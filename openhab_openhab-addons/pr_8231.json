{"pr_number": 8231, "pr_title": "[intesis] New Binding for Intesis WiFi adapters used in various AC systems", "pr_author": "hmerk", "pr_createdAt": "2020-07-30T22:36:18Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8231", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4MDU4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r464080582", "body": "Better use `HttpClientFactory` and us `getCommonHttpClient` to get a httpclient. See other bindings on how it's used.\r\n\r\nAlso better schedule this initialization part with calling the api to make sure initilize returns fast.", "bodyText": "Better use HttpClientFactory and us getCommonHttpClient to get a httpclient. See other bindings on how it's used.\nAlso better schedule this initialization part with calling the api to make sure initilize returns fast.", "bodyHTML": "<p dir=\"auto\">Better use <code>HttpClientFactory</code> and us <code>getCommonHttpClient</code> to get a httpclient. See other bindings on how it's used.</p>\n<p dir=\"auto\">Also better schedule this initialization part with calling the api to make sure initilize returns fast.</p>", "author": "Hilbrand", "createdAt": "2020-08-02T13:48:46Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+\n+    private static HttpClient httpClient = new HttpClient();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String deviceIp = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();", "originalCommit": "59fa0439a996103265d2e9c36e0066597781ee26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNTkzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r464225937", "bodyText": "Thanks @Hilbrand for pointing me into this direction. Will refactor my binding to address your comment.", "author": "hmerk", "createdAt": "2020-08-03T06:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4MDU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 520d69c519..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -73,69 +71,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         super(thing);\n     }\n \n-    @Override\n-    public void initialize() {\n-        logger.trace(\"Start initializing!\");\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-\n-        deviceIp = config.ipAddress;\n-        password = config.password;\n-        try {\n-            httpClient.start();\n-            String response = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-            if (success) {\n-                JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n-                info devInfo = gson.fromJson(devInfoNode, info.class);\n-                Map<String, String> properties = new HashMap<>(5);\n-                properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-                properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-                properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-                properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-                updateProperties(properties);\n-\n-                response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-                success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    logger.trace(\"sessionID : {}\", sessionId);\n-\n-                    refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n-                            TimeUnit.SECONDS);\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE);\n-                }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE);\n-            }\n-        } catch (Exception e) {\n-        }\n-        if (!sessionId.isEmpty()) {\n-            updateStatus(ThingStatus.ONLINE);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-        }\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        logger.debug(\"IntesisHomeHandler disposed.\");\n-        final ScheduledFuture<?> refreshJob = this.refreshJob;\n-\n-        if (refreshJob != null) {\n-            refreshJob.cancel(true);\n-            this.refreshJob = null;\n-        }\n-        try {\n-            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n-            httpClient.stop();\n-        } catch (Exception e) {\n-        }\n-    }\n-\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         int uid = 0;\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -71,6 +73,69 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         super(thing);\n     }\n \n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            String response = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                info devInfo = gson.fromJson(devInfoNode, info.class);\n+                Map<String, String> properties = new HashMap<>(5);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                updateProperties(properties);\n+\n+                response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+                success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    logger.trace(\"sessionID : {}\", sessionId);\n+\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+        }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n+            httpClient.stop();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         int uid = 0;\n", "next_change": {"commit": "253765c2c2d9dc92783e52efda4362279fb6da2e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..3ba2862f70 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -130,8 +142,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             this.refreshJob = null;\n         }\n         try {\n-            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n-            httpClient.stop();\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n         } catch (Exception e) {\n         }\n     }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 3ba2862f70..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -141,11 +158,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             refreshJob.cancel(true);\n             this.refreshJob = null;\n         }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "e616e3645d96b3e05a7635d64d755a70e694be02", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..cd6eddc6ee 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -166,7 +167,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         int value = 0;\n         String channelId = channelUID.getId();\n         if (command instanceof RefreshType) {\n-            getAllUidValues();\n+            // getAllUidValues();\n         } else {\n             switch (channelId) {\n                 case POWER_CHANNEL:\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex cd6eddc6ee..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -170,15 +322,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             // getAllUidValues();\n         } else {\n             switch (channelId) {\n-                case POWER_CHANNEL:\n+                case CHANNEL_TYPE_POWER:\n                     uid = 1;\n                     value = command.equals(OnOffType.OFF) ? 0 : 1;\n                     break;\n-                case MODE_CHANNEL:\n+                case CHANNEL_TYPE_MODE:\n                     uid = 2;\n                     value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n                     break;\n-                case FANSPEED_CHANNEL:\n+                case CHANNEL_TYPE_FANSPEED:\n                     uid = 4;\n                     if ((\"AUTO\").equals(command.toString())) {\n                         value = 0;\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -339,36 +150,50 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     }\n                     break;\n                 case CHANNEL_TYPE_VANESUD:\n-                    uid = 5;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n-                    }\n-                    break;\n                 case CHANNEL_TYPE_VANESLR:\n-                    uid = 6;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n                     }\n                     break;\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n-                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n                     break;\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEyMDMyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474120328", "body": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyHTML": "<p dir=\"auto\">Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 <a href=\"https://www.openhab.org/docs/developer/guidelines.html#f-logging\" rel=\"nofollow\">https://www.openhab.org/docs/developer/guidelines.html#f-logging</a></p>", "author": "fwolter", "createdAt": "2020-08-20T16:37:39Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal;\n+\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.THING_TYPE_INTESISHOME;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.intesis.internal.handler.IntesisHomeHandler;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link IntesisHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.intesis\", service = ThingHandlerFactory.class)\n+public class IntesisHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHandlerFactory.class);\n+    private final HttpClient httpClient;\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_INTESISHOME);\n+\n+    @Activate\n+    public IntesisHandlerFactory(@Reference HttpClientFactory httpClientFactory, ComponentContext componentContext) {\n+        logger.debug(\"Activate Shelly HandlerFactory\");", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0MjIwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474442206", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-08-21T06:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEyMDMyOA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java\nindex f1a98d9805..fc363a4968 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java\n", "chunk": "@@ -44,18 +37,7 @@ import org.slf4j.LoggerFactory;\n @Component(configurationPid = \"binding.intesis\", service = ThingHandlerFactory.class)\n public class IntesisHandlerFactory extends BaseThingHandlerFactory {\n \n-    private final Logger logger = LoggerFactory.getLogger(IntesisHandlerFactory.class);\n-    private final HttpClient httpClient;\n-\n-    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_INTESISHOME);\n-\n-    @Activate\n-    public IntesisHandlerFactory(@Reference HttpClientFactory httpClientFactory, ComponentContext componentContext) {\n-        logger.debug(\"Activate Shelly HandlerFactory\");\n-        super.activate(componentContext);\n-\n-        this.httpClient = httpClientFactory.getCommonHttpClient();\n-    }\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_MHACWIFI);\n \n     @Override\n     public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java\nindex fc363a4968..5189d8f74f 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java\n", "chunk": "@@ -37,7 +37,7 @@ import org.osgi.service.component.annotations.Component;\n @Component(configurationPid = \"binding.intesis\", service = ThingHandlerFactory.class)\n public class IntesisHandlerFactory extends BaseThingHandlerFactory {\n \n-    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_MHACWIFI);\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_INTESISHOME);\n \n     @Override\n     public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n", "next_change": {"commit": "253765c2c2d9dc92783e52efda4362279fb6da2e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java\nindex 5189d8f74f..f1a98d9805 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java\n", "chunk": "@@ -37,8 +44,19 @@ import org.osgi.service.component.annotations.Component;\n @Component(configurationPid = \"binding.intesis\", service = ThingHandlerFactory.class)\n public class IntesisHandlerFactory extends BaseThingHandlerFactory {\n \n+    private final Logger logger = LoggerFactory.getLogger(IntesisHandlerFactory.class);\n+    private final HttpClient httpClient;\n+\n     private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_INTESISHOME);\n \n+    @Activate\n+    public IntesisHandlerFactory(@Reference HttpClientFactory httpClientFactory, ComponentContext componentContext) {\n+        logger.debug(\"Activate Shelly HandlerFactory\");\n+        super.activate(componentContext);\n+\n+        this.httpClient = httpClientFactory.getCommonHttpClient();\n+    }\n+\n     @Override\n     public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n         return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java\nindex f1a98d9805..9ff387e846 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java\n", "chunk": "@@ -46,15 +46,17 @@ public class IntesisHandlerFactory extends BaseThingHandlerFactory {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHandlerFactory.class);\n     private final HttpClient httpClient;\n+    private final IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n \n     private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_INTESISHOME);\n \n     @Activate\n-    public IntesisHandlerFactory(@Reference HttpClientFactory httpClientFactory, ComponentContext componentContext) {\n-        logger.debug(\"Activate Shelly HandlerFactory\");\n+    public IntesisHandlerFactory(@Reference HttpClientFactory httpClientFactory, ComponentContext componentContext,\n+            final @Reference IntesisDynamicStateDescriptionProvider dynamicStateDescriptionProvider) {\n         super.activate(componentContext);\n \n         this.httpClient = httpClientFactory.getCommonHttpClient();\n+        this.intesisStateDescriptionProvider = dynamicStateDescriptionProvider;\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEyMjU1NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474122554", "body": "Can you fix the formatting?", "bodyText": "Can you fix the formatting?", "bodyHTML": "<p dir=\"auto\">Can you fix the formatting?</p>", "author": "fwolter", "createdAt": "2020-08-20T16:39:24Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.api;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link IntesisHomeHttpApi} wraps the IntesisHome REST API and provides various low level function to access the\n+ * device api (not\n+ * cloud api).", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0MjQ0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474442442", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T06:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEyMjU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\nindex b65a9aef24..28c61378c7 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n", "chunk": "@@ -19,10 +19,17 @@ import org.eclipse.jetty.client.api.ContentResponse;\n import org.eclipse.jetty.client.api.Request;\n import org.eclipse.jetty.client.util.StringContentProvider;\n import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpStatus;\n import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n /**\n  * {@link IntesisHomeHttpApi} wraps the IntesisHome REST API and provides various low level function to access the\n  * device api (not\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\nindex 28c61378c7..04b4567298 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n", "chunk": "@@ -19,17 +19,11 @@ import org.eclipse.jetty.client.api.ContentResponse;\n import org.eclipse.jetty.client.api.Request;\n import org.eclipse.jetty.client.util.StringContentProvider;\n import org.eclipse.jetty.http.HttpHeader;\n-import org.eclipse.jetty.http.HttpStatus;\n import org.openhab.binding.intesis.internal.IntesisConfiguration;\n-import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.gson.Gson;\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonObject;\n-import com.google.gson.JsonParser;\n-\n /**\n  * {@link IntesisHomeHttpApi} wraps the IntesisHome REST API and provides various low level function to access the\n  * device api (not\n", "next_change": {"commit": "253765c2c2d9dc92783e52efda4362279fb6da2e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\nindex 04b4567298..b65a9aef24 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n", "chunk": "@@ -20,7 +20,6 @@ import org.eclipse.jetty.client.api.Request;\n import org.eclipse.jetty.client.util.StringContentProvider;\n import org.eclipse.jetty.http.HttpHeader;\n import org.openhab.binding.intesis.internal.IntesisConfiguration;\n-import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\nindex b65a9aef24..8d2910811e 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n", "chunk": "@@ -25,8 +25,7 @@ import org.slf4j.LoggerFactory;\n \n /**\n  * {@link IntesisHomeHttpApi} wraps the IntesisHome REST API and provides various low level function to access the\n- * device api (not\n- * cloud api).\n+ * device api (not cloud api).\n  *\n  * @author Hans-J\u00f6rg Merk - Initial contribution\n  */\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMTgzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474131832", "body": "You should specify the concrete exception you want to catch, since catching `Exception` catches also all runtime exceptions.\r\n\r\nYou might want to throw the exception. Then, you don't need to return null, but handle the exception where `postRequest()` is invoked. You can use the exception message as an argument to set the Thing status. The message will be displayed in the UI, then.", "bodyText": "You should specify the concrete exception you want to catch, since catching Exception catches also all runtime exceptions.\nYou might want to throw the exception. Then, you don't need to return null, but handle the exception where postRequest() is invoked. You can use the exception message as an argument to set the Thing status. The message will be displayed in the UI, then.", "bodyHTML": "<p dir=\"auto\">You should specify the concrete exception you want to catch, since catching <code>Exception</code> catches also all runtime exceptions.</p>\n<p dir=\"auto\">You might want to throw the exception. Then, you don't need to return null, but handle the exception where <code>postRequest()</code> is invoked. You can use the exception message as an argument to set the Thing status. The message will be displayed in the UI, then.</p>", "author": "fwolter", "createdAt": "2020-08-20T16:47:12Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.api;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link IntesisHomeHttpApi} wraps the IntesisHome REST API and provides various low level function to access the\n+ * device api (not\n+ * cloud api).\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHttpApi {\n+    public static final String CONTENT_TYPE_JSON = \"application/json; charset=UTF-8\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHttpApi.class);\n+    private final HttpClient httpClient;\n+\n+    public IntesisHomeHttpApi(IntesisConfiguration config, HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Used to post a request to the device\n+     *\n+     * @param ipAddress of the device\n+     * @param content string\n+     * @return JSON string as response\n+     */\n+    @Nullable\n+    public String postRequest(String ipAddress, String contentString) {\n+\n+        String url = \"http://\" + ipAddress + \"/api.cgi\";\n+        try {\n+            Request request = httpClient.POST(url);\n+            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            request.content(new StringContentProvider(contentString), \"application/json\");\n+\n+            // Do request and get response\n+            ContentResponse contentResponse = request.send();\n+\n+            String response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n+            logger.trace(\"HTTP Response for getInfo {}: {}\", contentResponse.getStatus(), response);\n+\n+            if (response != null && !response.isEmpty()) {\n+                return response;\n+            }\n+        } catch (Exception e) {\n+        }", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1MDY5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r475450693", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-24T09:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMTgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\nindex b65a9aef24..28c61378c7 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n", "chunk": "@@ -34,40 +41,188 @@ import org.slf4j.LoggerFactory;\n public class IntesisHomeHttpApi {\n     public static final String CONTENT_TYPE_JSON = \"application/json; charset=UTF-8\";\n \n-    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHttpApi.class);\n-    private final HttpClient httpClient;\n+    private final static Logger logger = LoggerFactory.getLogger(IntesisHomeHttpApi.class);\n \n     public IntesisHomeHttpApi(IntesisConfiguration config, HttpClient httpClient) {\n-        this.httpClient = httpClient;\n     }\n \n-    /**\n-     * Used to post a request to the device\n-     *\n-     * @param ipAddress of the device\n-     * @param content string\n-     * @return JSON string as response\n-     */\n-    @Nullable\n-    public String postRequest(String ipAddress, String contentString) {\n-\n-        String url = \"http://\" + ipAddress + \"/api.cgi\";\n+    public static @Nullable JsonElement getInfo(String deviceIp, HttpClient httpClient) {\n+        String response = \"\";\n+        String url = \"http://\" + deviceIp + \"/api.cgi\";\n         try {\n             Request request = httpClient.POST(url);\n             request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n-            request.content(new StringContentProvider(contentString), \"application/json\");\n+            request.content(new StringContentProvider(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\"), \"application/json\");\n \n             // Do request and get response\n             ContentResponse contentResponse = request.send();\n \n-            String response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n+            response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n             logger.trace(\"HTTP Response for getInfo {}: {}\", contentResponse.getStatus(), response);\n \n+            // validate response, API errors are reported as Json\n+            if (contentResponse.getStatus() != HttpStatus.OK_200) {\n+                // toDo\n+            }\n+            if (response == null || response.isEmpty() || !response.startsWith(\"{\") && !response.startsWith(\"[\")) {\n+\n+            }\n+            if (response != null && !response.isEmpty()) {\n+                JsonElement infoNode = getData(response).get(\"info\");\n+                return infoNode;\n+            }\n+        } catch (Exception e) {\n+        }\n+        return null;\n+    }\n+\n+    public static String getSessionId(String deviceIp, String password, HttpClient httpClient) {\n+        logger.trace(\"getSessionId for {}\", deviceIp);\n+        String response = \"\";\n+        String sessionId = \"\";\n+        String url = \"http://\" + deviceIp + \"/api.cgi\";\n+        try {\n+            // httpClient.start();\n+            Request request = httpClient.POST(url);\n+            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            request.content(new StringContentProvider(\n+                    \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password + \"\\\"}}\"),\n+                    \"application/json\");\n+\n+            // Do request and get response\n+            ContentResponse contentResponse = request.send();\n+\n+            response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n+            logger.trace(\"HTTP Response {}: {}\", contentResponse.getStatus(), response);\n+\n+            // validate response, API errors are reported as Json\n+            if (contentResponse.getStatus() != HttpStatus.OK_200) {\n+                // toDo\n+            }\n+            if (response == null || response.isEmpty() || !response.startsWith(\"{\") && !response.startsWith(\"[\")) {\n+\n+            }\n+            if (response != null && !response.isEmpty()) {\n+                JsonElement idNode = getData(response).get(\"id\");\n+                Gson gson = new Gson();\n+                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                sessionId = auth.sessionID;\n+                logger.trace(\"sessionID : {}\", sessionId);\n+\n+                return sessionId;\n+\n+            }\n+\n+        } catch (Exception e) {\n+        }\n+        return sessionId;\n+    }\n+\n+    public static @Nullable JsonElement getRestrictedRequestAll(String deviceIp, String sessionId,\n+            HttpClient httpClient) {\n+        String response = \"\";\n+        String url = \"http://\" + deviceIp + \"/api.cgi\";\n+        try {\n+            Request request = httpClient.POST(url);\n+            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            request.content(new StringContentProvider(\"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                    + sessionId + \"\\\", \\\"uid\\\":\\\"all\\\"}}\"), \"application/json\");\n+\n+            // Do request and get response\n+            ContentResponse contentResponse = request.send();\n+\n+            response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n+            logger.trace(\"HTTP Response for all uid's {}: {}\", contentResponse.getStatus(), response);\n+\n+            // validate response, API errors are reported as Json\n+            if (contentResponse.getStatus() != HttpStatus.OK_200) {\n+                // toDo\n+            }\n+            if (response == null || response.isEmpty() || !response.startsWith(\"{\") && !response.startsWith(\"[\")) {\n+\n+            }\n             if (response != null && !response.isEmpty()) {\n-                return response;\n+                JsonElement dpvalNode = getData(response).get(\"dpval\");\n+                return dpvalNode;\n             }\n+\n         } catch (Exception e) {\n+\n         }\n         return null;\n     }\n+\n+    public static @Nullable JsonElement getRestrictedRequestUID6(String deviceIp, String sessionId,\n+            HttpClient httpClient) {\n+        String response = \"\";\n+        String url = \"http://\" + deviceIp + \"/api.cgi\";\n+        try {\n+            Request request = httpClient.POST(url);\n+            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            request.content(new StringContentProvider(\n+                    \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\", \\\"uid\\\":6}}\"),\n+                    \"application/json\");\n+\n+            // Do request and get response\n+            ContentResponse contentResponse = request.send();\n+\n+            response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n+            logger.trace(\"HTTP Response for uid 6 {}: {}\", contentResponse.getStatus(), response);\n+\n+            // validate response, API errors are reported as Json\n+            if (contentResponse.getStatus() != HttpStatus.OK_200) {\n+                // toDo\n+            }\n+            if (response == null || response.isEmpty() || !response.startsWith(\"{\") && !response.startsWith(\"[\")) {\n+\n+            }\n+            if (response != null && !response.isEmpty()) {\n+                JsonElement dpvalNode = getData(response).get(\"dpval\");\n+                return dpvalNode;\n+            }\n+\n+        } catch (Exception e) {\n+\n+        }\n+        return null;\n+    }\n+\n+    public static void setRestricted(String deviceIp, String sessionId, HttpClient httpClient, int uid, int value) {\n+        String response = \"\";\n+        String url = \"http://\" + deviceIp + \"/api.cgi\";\n+        logger.trace(\"Sending value {} to uid {}\", value, uid);\n+        try {\n+            Request request = httpClient.POST(url);\n+            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            request.content(new StringContentProvider(\"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                    + sessionId + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\"), \"application/json\");\n+\n+            logger.trace(\"HTTP Content to send : {}\", request.getContent());\n+\n+            // Do request and get response\n+            ContentResponse contentResponse = request.send();\n+\n+            response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n+            logger.trace(\"HTTP Response for setRestricted {}: {}\", contentResponse.getStatus(), response);\n+\n+            // validate response, API errors are reported as Json\n+            if (contentResponse.getStatus() != HttpStatus.OK_200) {\n+                // toDo\n+            }\n+            if (response == null || response.isEmpty() || !response.startsWith(\"{\") && !response.startsWith(\"[\")) {\n+\n+            }\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public static JsonObject getData(String response) {\n+        JsonParser parser = new JsonParser();\n+        JsonElement rootNode = parser.parse(response);\n+        JsonObject details = rootNode.getAsJsonObject();\n+        // JsonElement successNode = details.get(\"success\");\n+        JsonElement dataNode = details.get(\"data\");\n+        JsonObject data = dataNode.getAsJsonObject();\n+        return data;\n+    }\n }\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\nindex 28c61378c7..04b4567298 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n", "chunk": "@@ -197,32 +150,44 @@ public class IntesisHomeHttpApi {\n             request.content(new StringContentProvider(\"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n                     + sessionId + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\"), \"application/json\");\n \n-            logger.trace(\"HTTP Content to send : {}\", request.getContent());\n-\n             // Do request and get response\n             ContentResponse contentResponse = request.send();\n \n             response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n             logger.trace(\"HTTP Response for setRestricted {}: {}\", contentResponse.getStatus(), response);\n \n-            // validate response, API errors are reported as Json\n-            if (contentResponse.getStatus() != HttpStatus.OK_200) {\n-                // toDo\n-            }\n-            if (response == null || response.isEmpty() || !response.startsWith(\"{\") && !response.startsWith(\"[\")) {\n-\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                return success;\n             }\n         } catch (Exception e) {\n         }\n+        return false;\n     }\n \n-    public static JsonObject getData(String response) {\n-        JsonParser parser = new JsonParser();\n-        JsonElement rootNode = parser.parse(response);\n-        JsonObject details = rootNode.getAsJsonObject();\n-        // JsonElement successNode = details.get(\"success\");\n-        JsonElement dataNode = details.get(\"data\");\n-        JsonObject data = dataNode.getAsJsonObject();\n-        return data;\n+    public static boolean setLogout(String deviceIp, String sessionId, HttpClient httpClient) {\n+        String response = \"\";\n+        String url = \"http://\" + deviceIp + \"/api.cgi\";\n+        try {\n+            Request request = httpClient.POST(url);\n+            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            request.content(\n+                    new StringContentProvider(\n+                            \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\"),\n+                    \"application/json\");\n+\n+            // Do request and get response\n+            ContentResponse contentResponse = request.send();\n+\n+            response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n+            logger.trace(\"HTTP Response for getInfo {}: {}\", contentResponse.getStatus(), response);\n+\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                return success;\n+            }\n+        } catch (Exception e) {\n+        }\n+        return false;\n     }\n }\n", "next_change": {"commit": "253765c2c2d9dc92783e52efda4362279fb6da2e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\nindex 04b4567298..b65a9aef24 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n", "chunk": "@@ -65,129 +70,4 @@ public class IntesisHomeHttpApi {\n         }\n         return null;\n     }\n-\n-    public static @Nullable String getSessionId(String deviceIp, String password, HttpClient httpClient) {\n-        logger.trace(\"getSessionId for {}\", deviceIp);\n-        String response = \"\";\n-        String url = \"http://\" + deviceIp + \"/api.cgi\";\n-        try {\n-            // httpClient.start();\n-            Request request = httpClient.POST(url);\n-            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n-            request.content(new StringContentProvider(\n-                    \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password + \"\\\"}}\"),\n-                    \"application/json\");\n-\n-            // Do request and get response\n-            ContentResponse contentResponse = request.send();\n-\n-            response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n-            logger.trace(\"HTTP Response {}: {}\", contentResponse.getStatus(), response);\n-\n-            if (response != null && !response.isEmpty()) {\n-                return response;\n-            }\n-        } catch (Exception e) {\n-        }\n-        return null;\n-    }\n-\n-    public static @Nullable String getRestrictedRequestAll(String deviceIp, String sessionId, HttpClient httpClient) {\n-        String response = \"\";\n-        String url = \"http://\" + deviceIp + \"/api.cgi\";\n-        try {\n-            Request request = httpClient.POST(url);\n-            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n-            request.content(new StringContentProvider(\"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n-                    + sessionId + \"\\\", \\\"uid\\\":\\\"all\\\"}}\"), \"application/json\");\n-\n-            // Do request and get response\n-            ContentResponse contentResponse = request.send();\n-\n-            response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n-            logger.trace(\"HTTP Response for all uid's {}: {}\", contentResponse.getStatus(), response);\n-\n-            if (response != null && !response.isEmpty()) {\n-                return response;\n-            }\n-        } catch (Exception e) {\n-        }\n-        return null;\n-    }\n-\n-    public static @Nullable String getRestrictedRequestUID6(String deviceIp, String sessionId, HttpClient httpClient) {\n-        String response = \"\";\n-        String url = \"http://\" + deviceIp + \"/api.cgi\";\n-        try {\n-            Request request = httpClient.POST(url);\n-            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n-            request.content(new StringContentProvider(\n-                    \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\", \\\"uid\\\":6}}\"),\n-                    \"application/json\");\n-\n-            // Do request and get response\n-            ContentResponse contentResponse = request.send();\n-\n-            response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n-            logger.trace(\"HTTP Response for uid 6 {}: {}\", contentResponse.getStatus(), response);\n-\n-            if (response != null && !response.isEmpty()) {\n-                return response;\n-            }\n-        } catch (Exception e) {\n-\n-        }\n-        return null;\n-    }\n-\n-    public static boolean setRestricted(String deviceIp, String sessionId, HttpClient httpClient, int uid, int value) {\n-        String response = \"\";\n-        String url = \"http://\" + deviceIp + \"/api.cgi\";\n-        logger.trace(\"Sending value {} to uid {}\", value, uid);\n-        try {\n-            Request request = httpClient.POST(url);\n-            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n-            request.content(new StringContentProvider(\"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n-                    + sessionId + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\"), \"application/json\");\n-\n-            // Do request and get response\n-            ContentResponse contentResponse = request.send();\n-\n-            response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n-            logger.trace(\"HTTP Response for setRestricted {}: {}\", contentResponse.getStatus(), response);\n-\n-            if (response != null && !response.isEmpty()) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                return success;\n-            }\n-        } catch (Exception e) {\n-        }\n-        return false;\n-    }\n-\n-    public static boolean setLogout(String deviceIp, String sessionId, HttpClient httpClient) {\n-        String response = \"\";\n-        String url = \"http://\" + deviceIp + \"/api.cgi\";\n-        try {\n-            Request request = httpClient.POST(url);\n-            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n-            request.content(\n-                    new StringContentProvider(\n-                            \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\"),\n-                    \"application/json\");\n-\n-            // Do request and get response\n-            ContentResponse contentResponse = request.send();\n-\n-            response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n-            logger.trace(\"HTTP Response for getInfo {}: {}\", contentResponse.getStatus(), response);\n-\n-            if (response != null && !response.isEmpty()) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                return success;\n-            }\n-        } catch (Exception e) {\n-        }\n-        return false;\n-    }\n }\n", "next_change": {"commit": "7e0b358217cec54969f6a46c8ef04eb49fdfa79c", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\nindex b65a9aef24..a9c2686566 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n", "chunk": "@@ -50,23 +52,24 @@ public class IntesisHomeHttpApi {\n      */\n     @Nullable\n     public String postRequest(String ipAddress, String contentString) {\n-\n         String url = \"http://\" + ipAddress + \"/api.cgi\";\n         try {\n             Request request = httpClient.POST(url);\n             request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n             request.content(new StringContentProvider(contentString), \"application/json\");\n \n-            // Do request and get response\n             ContentResponse contentResponse = request.send();\n \n             String response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n-            logger.trace(\"HTTP Response for getInfo {}: {}\", contentResponse.getStatus(), response);\n+            logger.trace(\"HTTP Response {}: {}\", contentResponse.getStatus(), response);\n \n             if (response != null && !response.isEmpty()) {\n                 return response;\n+            } else {\n+                return null;\n             }\n-        } catch (Exception e) {\n+        } catch (TimeoutException | InterruptedException | ExecutionException e) {\n+            logger.debug(\"Could not make HTTP Post request\", e);\n         }\n         return null;\n     }\n", "next_change": {"commit": "623adb7055714c71dbf4efc86ce64d0804311b66", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\nindex a9c2686566..a69624b7c2 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n", "chunk": "@@ -69,7 +70,7 @@ public class IntesisHomeHttpApi {\n                 return null;\n             }\n         } catch (TimeoutException | InterruptedException | ExecutionException e) {\n-            logger.debug(\"Could not make HTTP Post request\", e);\n+            logger.debug(\"Could not make HTTP Post request\");\n         }\n         return null;\n     }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMjIxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474132219", "body": "Can this be removed?", "bodyText": "Can this be removed?", "bodyHTML": "<p dir=\"auto\">Can this be removed?</p>", "author": "fwolter", "createdAt": "2020-08-20T16:47:53Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0NzE5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474447195", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T07:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMjIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -57,99 +54,21 @@ import com.google.gson.JsonElement;\n public class IntesisHomeHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n-    // private final HttpClient httpClient;\n-    private final IntesisHomeHttpApi api;\n-    private IntesisConfiguration config = new IntesisConfiguration();\n+    private static HttpClient httpClient = new HttpClient();\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n-\n-    private int refreshInterval = 30;\n-    private String ipAddress = \"\";\n+    private String deviceIp = \"\";\n     private String password = \"\";\n+\n     private String sessionId = \"\";\n+    private @Nullable JsonElement uidValueArray;\n+    @SuppressWarnings(\"unused\")\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int refreshInterval = 30;\n \n     Gson gson = new Gson();\n \n-    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+    public IntesisHomeHandler(Thing thing) {\n         super(thing);\n-        this.api = new IntesisHomeHttpApi(config, httpClient);\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        logger.debug(\"Start initializing!\");\n-        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n-        }\n-\n-        // start background initialization:\n-        scheduler.schedule(() -> {\n-            try {\n-                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-                String response = api.postRequest(ipAddress, contentString);\n-                logger.trace(\"getInfo response : {}\", response);\n-                if (response != null && !response.isEmpty()) {\n-                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                    logger.trace(\"success response : {}\", success);\n-                    if (success) {\n-                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n-                        info devInfo = gson.fromJson(devInfoNode, info.class);\n-                        Map<String, String> properties = new HashMap<>(5);\n-                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-                        updateProperties(properties);\n-\n-                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, contentString);\n-                        if (response != null && !response.isEmpty()) {\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (success) {\n-                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                                sessionId = auth.sessionID;\n-                                if (!sessionId.isEmpty()) {\n-                                    logger.trace(\"sessionID : {}\", sessionId);\n-                                    updateStatus(ThingStatus.ONLINE);\n-                                } else {\n-                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                                }\n-                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n-                                        TimeUnit.SECONDS);\n-                            } else {\n-                                updateStatus(ThingStatus.OFFLINE);\n-                            }\n-                        }\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                }\n-            } catch (Exception e) {\n-            }\n-        }, 2, TimeUnit.SECONDS);\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        logger.debug(\"IntesisHomeHandler disposed.\");\n-        final ScheduledFuture<?> refreshJob = this.refreshJob;\n-\n-        if (refreshJob != null) {\n-            refreshJob.cancel(true);\n-            this.refreshJob = null;\n-        }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -71,6 +73,69 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         super(thing);\n     }\n \n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            String response = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                info devInfo = gson.fromJson(devInfoNode, info.class);\n+                Map<String, String> properties = new HashMap<>(5);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                updateProperties(properties);\n+\n+                response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+                success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    logger.trace(\"sessionID : {}\", sessionId);\n+\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+        }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n+            httpClient.stop();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         int uid = 0;\n", "next_change": {"commit": "253765c2c2d9dc92783e52efda4362279fb6da2e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..3ba2862f70 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -130,8 +142,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             this.refreshJob = null;\n         }\n         try {\n-            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n-            httpClient.stop();\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n         } catch (Exception e) {\n         }\n     }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 3ba2862f70..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -141,11 +158,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             refreshJob.cancel(true);\n             this.refreshJob = null;\n         }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "e616e3645d96b3e05a7635d64d755a70e694be02", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..cd6eddc6ee 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -166,7 +167,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         int value = 0;\n         String channelId = channelUID.getId();\n         if (command instanceof RefreshType) {\n-            getAllUidValues();\n+            // getAllUidValues();\n         } else {\n             switch (channelId) {\n                 case POWER_CHANNEL:\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex cd6eddc6ee..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -170,15 +322,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             // getAllUidValues();\n         } else {\n             switch (channelId) {\n-                case POWER_CHANNEL:\n+                case CHANNEL_TYPE_POWER:\n                     uid = 1;\n                     value = command.equals(OnOffType.OFF) ? 0 : 1;\n                     break;\n-                case MODE_CHANNEL:\n+                case CHANNEL_TYPE_MODE:\n                     uid = 2;\n                     value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n                     break;\n-                case FANSPEED_CHANNEL:\n+                case CHANNEL_TYPE_FANSPEED:\n                     uid = 4;\n                     if ((\"AUTO\").equals(command.toString())) {\n                         value = 0;\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -339,36 +150,50 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     }\n                     break;\n                 case CHANNEL_TYPE_VANESUD:\n-                    uid = 5;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n-                    }\n-                    break;\n                 case CHANNEL_TYPE_VANESLR:\n-                    uid = 6;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n                     }\n                     break;\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n-                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n                     break;\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMjc2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474132768", "body": "This could be static final. Also, it's good practice to append the unit. e.g. REFRESH_INTERVAL_SEC", "bodyText": "This could be static final. Also, it's good practice to append the unit. e.g. REFRESH_INTERVAL_SEC", "bodyHTML": "<p dir=\"auto\">This could be static final. Also, it's good practice to append the unit. e.g. REFRESH_INTERVAL_SEC</p>", "author": "fwolter", "createdAt": "2020-08-20T16:48:51Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0NzU1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474447556", "bodyText": "Changed and moved to binding constants", "author": "hmerk", "createdAt": "2020-08-21T07:01:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMjc2OA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -57,99 +54,21 @@ import com.google.gson.JsonElement;\n public class IntesisHomeHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n-    // private final HttpClient httpClient;\n-    private final IntesisHomeHttpApi api;\n-    private IntesisConfiguration config = new IntesisConfiguration();\n+    private static HttpClient httpClient = new HttpClient();\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n-\n-    private int refreshInterval = 30;\n-    private String ipAddress = \"\";\n+    private String deviceIp = \"\";\n     private String password = \"\";\n+\n     private String sessionId = \"\";\n+    private @Nullable JsonElement uidValueArray;\n+    @SuppressWarnings(\"unused\")\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int refreshInterval = 30;\n \n     Gson gson = new Gson();\n \n-    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+    public IntesisHomeHandler(Thing thing) {\n         super(thing);\n-        this.api = new IntesisHomeHttpApi(config, httpClient);\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        logger.debug(\"Start initializing!\");\n-        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n-        }\n-\n-        // start background initialization:\n-        scheduler.schedule(() -> {\n-            try {\n-                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-                String response = api.postRequest(ipAddress, contentString);\n-                logger.trace(\"getInfo response : {}\", response);\n-                if (response != null && !response.isEmpty()) {\n-                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                    logger.trace(\"success response : {}\", success);\n-                    if (success) {\n-                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n-                        info devInfo = gson.fromJson(devInfoNode, info.class);\n-                        Map<String, String> properties = new HashMap<>(5);\n-                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-                        updateProperties(properties);\n-\n-                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, contentString);\n-                        if (response != null && !response.isEmpty()) {\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (success) {\n-                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                                sessionId = auth.sessionID;\n-                                if (!sessionId.isEmpty()) {\n-                                    logger.trace(\"sessionID : {}\", sessionId);\n-                                    updateStatus(ThingStatus.ONLINE);\n-                                } else {\n-                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                                }\n-                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n-                                        TimeUnit.SECONDS);\n-                            } else {\n-                                updateStatus(ThingStatus.OFFLINE);\n-                            }\n-                        }\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                }\n-            } catch (Exception e) {\n-            }\n-        }, 2, TimeUnit.SECONDS);\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        logger.debug(\"IntesisHomeHandler disposed.\");\n-        final ScheduledFuture<?> refreshJob = this.refreshJob;\n-\n-        if (refreshJob != null) {\n-            refreshJob.cancel(true);\n-            this.refreshJob = null;\n-        }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -71,6 +73,69 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         super(thing);\n     }\n \n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            String response = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                info devInfo = gson.fromJson(devInfoNode, info.class);\n+                Map<String, String> properties = new HashMap<>(5);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                updateProperties(properties);\n+\n+                response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+                success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    logger.trace(\"sessionID : {}\", sessionId);\n+\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+        }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n+            httpClient.stop();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         int uid = 0;\n", "next_change": {"commit": "253765c2c2d9dc92783e52efda4362279fb6da2e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..3ba2862f70 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -130,8 +142,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             this.refreshJob = null;\n         }\n         try {\n-            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n-            httpClient.stop();\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n         } catch (Exception e) {\n         }\n     }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 3ba2862f70..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -141,11 +158,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             refreshJob.cancel(true);\n             this.refreshJob = null;\n         }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "e616e3645d96b3e05a7635d64d755a70e694be02", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..cd6eddc6ee 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -166,7 +167,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         int value = 0;\n         String channelId = channelUID.getId();\n         if (command instanceof RefreshType) {\n-            getAllUidValues();\n+            // getAllUidValues();\n         } else {\n             switch (channelId) {\n                 case POWER_CHANNEL:\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex cd6eddc6ee..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -170,15 +322,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             // getAllUidValues();\n         } else {\n             switch (channelId) {\n-                case POWER_CHANNEL:\n+                case CHANNEL_TYPE_POWER:\n                     uid = 1;\n                     value = command.equals(OnOffType.OFF) ? 0 : 1;\n                     break;\n-                case MODE_CHANNEL:\n+                case CHANNEL_TYPE_MODE:\n                     uid = 2;\n                     value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n                     break;\n-                case FANSPEED_CHANNEL:\n+                case CHANNEL_TYPE_FANSPEED:\n                     uid = 4;\n                     if ((\"AUTO\").equals(command.toString())) {\n                         value = 0;\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -339,36 +150,50 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     }\n                     break;\n                 case CHANNEL_TYPE_VANESUD:\n-                    uid = 5;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n-                    }\n-                    break;\n                 case CHANNEL_TYPE_VANESLR:\n-                    uid = 6;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n                     }\n                     break;\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n-                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n                     break;\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMjkzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474132937", "body": "This could be final", "bodyText": "This could be final", "bodyHTML": "<p dir=\"auto\">This could be final</p>", "author": "fwolter", "createdAt": "2020-08-20T16:49:06Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0ODE1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474448151", "bodyText": "Made Gson final", "author": "hmerk", "createdAt": "2020-08-21T07:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMjkzNw=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -57,99 +54,21 @@ import com.google.gson.JsonElement;\n public class IntesisHomeHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n-    // private final HttpClient httpClient;\n-    private final IntesisHomeHttpApi api;\n-    private IntesisConfiguration config = new IntesisConfiguration();\n+    private static HttpClient httpClient = new HttpClient();\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n-\n-    private int refreshInterval = 30;\n-    private String ipAddress = \"\";\n+    private String deviceIp = \"\";\n     private String password = \"\";\n+\n     private String sessionId = \"\";\n+    private @Nullable JsonElement uidValueArray;\n+    @SuppressWarnings(\"unused\")\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int refreshInterval = 30;\n \n     Gson gson = new Gson();\n \n-    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+    public IntesisHomeHandler(Thing thing) {\n         super(thing);\n-        this.api = new IntesisHomeHttpApi(config, httpClient);\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        logger.debug(\"Start initializing!\");\n-        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n-        }\n-\n-        // start background initialization:\n-        scheduler.schedule(() -> {\n-            try {\n-                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-                String response = api.postRequest(ipAddress, contentString);\n-                logger.trace(\"getInfo response : {}\", response);\n-                if (response != null && !response.isEmpty()) {\n-                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                    logger.trace(\"success response : {}\", success);\n-                    if (success) {\n-                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n-                        info devInfo = gson.fromJson(devInfoNode, info.class);\n-                        Map<String, String> properties = new HashMap<>(5);\n-                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-                        updateProperties(properties);\n-\n-                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, contentString);\n-                        if (response != null && !response.isEmpty()) {\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (success) {\n-                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                                sessionId = auth.sessionID;\n-                                if (!sessionId.isEmpty()) {\n-                                    logger.trace(\"sessionID : {}\", sessionId);\n-                                    updateStatus(ThingStatus.ONLINE);\n-                                } else {\n-                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                                }\n-                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n-                                        TimeUnit.SECONDS);\n-                            } else {\n-                                updateStatus(ThingStatus.OFFLINE);\n-                            }\n-                        }\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                }\n-            } catch (Exception e) {\n-            }\n-        }, 2, TimeUnit.SECONDS);\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        logger.debug(\"IntesisHomeHandler disposed.\");\n-        final ScheduledFuture<?> refreshJob = this.refreshJob;\n-\n-        if (refreshJob != null) {\n-            refreshJob.cancel(true);\n-            this.refreshJob = null;\n-        }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -71,6 +73,69 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         super(thing);\n     }\n \n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            String response = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                info devInfo = gson.fromJson(devInfoNode, info.class);\n+                Map<String, String> properties = new HashMap<>(5);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                updateProperties(properties);\n+\n+                response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+                success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    logger.trace(\"sessionID : {}\", sessionId);\n+\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+        }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n+            httpClient.stop();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         int uid = 0;\n", "next_change": {"commit": "253765c2c2d9dc92783e52efda4362279fb6da2e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..3ba2862f70 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -130,8 +142,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             this.refreshJob = null;\n         }\n         try {\n-            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n-            httpClient.stop();\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n         } catch (Exception e) {\n         }\n     }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 3ba2862f70..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -141,11 +158,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             refreshJob.cancel(true);\n             this.refreshJob = null;\n         }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "e616e3645d96b3e05a7635d64d755a70e694be02", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..cd6eddc6ee 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -166,7 +167,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         int value = 0;\n         String channelId = channelUID.getId();\n         if (command instanceof RefreshType) {\n-            getAllUidValues();\n+            // getAllUidValues();\n         } else {\n             switch (channelId) {\n                 case POWER_CHANNEL:\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex cd6eddc6ee..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -170,15 +322,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             // getAllUidValues();\n         } else {\n             switch (channelId) {\n-                case POWER_CHANNEL:\n+                case CHANNEL_TYPE_POWER:\n                     uid = 1;\n                     value = command.equals(OnOffType.OFF) ? 0 : 1;\n                     break;\n-                case MODE_CHANNEL:\n+                case CHANNEL_TYPE_MODE:\n                     uid = 2;\n                     value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n                     break;\n-                case FANSPEED_CHANNEL:\n+                case CHANNEL_TYPE_FANSPEED:\n                     uid = 4;\n                     if ((\"AUTO\").equals(command.toString())) {\n                         value = 0;\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -339,36 +150,50 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     }\n                     break;\n                 case CHANNEL_TYPE_VANESUD:\n-                    uid = 5;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n-                    }\n-                    break;\n                 case CHANNEL_TYPE_VANESLR:\n-                    uid = 6;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n                     }\n                     break;\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n-                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n                     break;\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMzAzMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474133030", "body": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyHTML": "<p dir=\"auto\">Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 <a href=\"https://www.openhab.org/docs/developer/guidelines.html#f-logging\" rel=\"nofollow\">https://www.openhab.org/docs/developer/guidelines.html#f-logging</a></p>", "author": "fwolter", "createdAt": "2020-08-20T16:49:17Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0OTQ2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474449460", "bodyText": "Hmm, You are commenting on code created with the binding skeleton, why ?\nIt is also common usage to have this debug logger.", "author": "hmerk", "createdAt": "2020-08-21T07:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMzAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MTgxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487791812", "bodyText": "I think it's supposed to be only a placeholder in the skeleton script. See point 4 in above link.", "author": "fwolter", "createdAt": "2020-09-14T09:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMzAzMA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -57,99 +54,21 @@ import com.google.gson.JsonElement;\n public class IntesisHomeHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n-    // private final HttpClient httpClient;\n-    private final IntesisHomeHttpApi api;\n-    private IntesisConfiguration config = new IntesisConfiguration();\n+    private static HttpClient httpClient = new HttpClient();\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n-\n-    private int refreshInterval = 30;\n-    private String ipAddress = \"\";\n+    private String deviceIp = \"\";\n     private String password = \"\";\n+\n     private String sessionId = \"\";\n+    private @Nullable JsonElement uidValueArray;\n+    @SuppressWarnings(\"unused\")\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int refreshInterval = 30;\n \n     Gson gson = new Gson();\n \n-    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+    public IntesisHomeHandler(Thing thing) {\n         super(thing);\n-        this.api = new IntesisHomeHttpApi(config, httpClient);\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        logger.debug(\"Start initializing!\");\n-        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n-        }\n-\n-        // start background initialization:\n-        scheduler.schedule(() -> {\n-            try {\n-                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-                String response = api.postRequest(ipAddress, contentString);\n-                logger.trace(\"getInfo response : {}\", response);\n-                if (response != null && !response.isEmpty()) {\n-                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                    logger.trace(\"success response : {}\", success);\n-                    if (success) {\n-                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n-                        info devInfo = gson.fromJson(devInfoNode, info.class);\n-                        Map<String, String> properties = new HashMap<>(5);\n-                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-                        updateProperties(properties);\n-\n-                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, contentString);\n-                        if (response != null && !response.isEmpty()) {\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (success) {\n-                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                                sessionId = auth.sessionID;\n-                                if (!sessionId.isEmpty()) {\n-                                    logger.trace(\"sessionID : {}\", sessionId);\n-                                    updateStatus(ThingStatus.ONLINE);\n-                                } else {\n-                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                                }\n-                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n-                                        TimeUnit.SECONDS);\n-                            } else {\n-                                updateStatus(ThingStatus.OFFLINE);\n-                            }\n-                        }\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                }\n-            } catch (Exception e) {\n-            }\n-        }, 2, TimeUnit.SECONDS);\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        logger.debug(\"IntesisHomeHandler disposed.\");\n-        final ScheduledFuture<?> refreshJob = this.refreshJob;\n-\n-        if (refreshJob != null) {\n-            refreshJob.cancel(true);\n-            this.refreshJob = null;\n-        }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -71,6 +73,69 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         super(thing);\n     }\n \n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            String response = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                info devInfo = gson.fromJson(devInfoNode, info.class);\n+                Map<String, String> properties = new HashMap<>(5);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                updateProperties(properties);\n+\n+                response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+                success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    logger.trace(\"sessionID : {}\", sessionId);\n+\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+        }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n+            httpClient.stop();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         int uid = 0;\n", "next_change": {"commit": "253765c2c2d9dc92783e52efda4362279fb6da2e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..3ba2862f70 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -130,8 +142,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             this.refreshJob = null;\n         }\n         try {\n-            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n-            httpClient.stop();\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n         } catch (Exception e) {\n         }\n     }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 3ba2862f70..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -141,11 +158,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             refreshJob.cancel(true);\n             this.refreshJob = null;\n         }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "e616e3645d96b3e05a7635d64d755a70e694be02", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..cd6eddc6ee 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -166,7 +167,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         int value = 0;\n         String channelId = channelUID.getId();\n         if (command instanceof RefreshType) {\n-            getAllUidValues();\n+            // getAllUidValues();\n         } else {\n             switch (channelId) {\n                 case POWER_CHANNEL:\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex cd6eddc6ee..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -170,15 +322,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             // getAllUidValues();\n         } else {\n             switch (channelId) {\n-                case POWER_CHANNEL:\n+                case CHANNEL_TYPE_POWER:\n                     uid = 1;\n                     value = command.equals(OnOffType.OFF) ? 0 : 1;\n                     break;\n-                case MODE_CHANNEL:\n+                case CHANNEL_TYPE_MODE:\n                     uid = 2;\n                     value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n                     break;\n-                case FANSPEED_CHANNEL:\n+                case CHANNEL_TYPE_FANSPEED:\n                     uid = 4;\n                     if ((\"AUTO\").equals(command.toString())) {\n                         value = 0;\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -339,36 +150,50 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     }\n                     break;\n                 case CHANNEL_TYPE_VANESUD:\n-                    uid = 5;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n-                    }\n-                    break;\n                 case CHANNEL_TYPE_VANESLR:\n-                    uid = 6;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n                     }\n                     break;\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n-                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n                     break;\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDAxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474134015", "body": "I think UNKNOWN would suit better. Let it go online only if the connection to the API is established.", "bodyText": "I think UNKNOWN would suit better. Let it go online only if the connection to the API is established.", "bodyHTML": "<p dir=\"auto\">I think UNKNOWN would suit better. Let it go online only if the connection to the API is established.</p>", "author": "fwolter", "createdAt": "2020-08-20T16:51:00Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0OTk3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474449975", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T07:04:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -57,99 +54,21 @@ import com.google.gson.JsonElement;\n public class IntesisHomeHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n-    // private final HttpClient httpClient;\n-    private final IntesisHomeHttpApi api;\n-    private IntesisConfiguration config = new IntesisConfiguration();\n+    private static HttpClient httpClient = new HttpClient();\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n-\n-    private int refreshInterval = 30;\n-    private String ipAddress = \"\";\n+    private String deviceIp = \"\";\n     private String password = \"\";\n+\n     private String sessionId = \"\";\n+    private @Nullable JsonElement uidValueArray;\n+    @SuppressWarnings(\"unused\")\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int refreshInterval = 30;\n \n     Gson gson = new Gson();\n \n-    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+    public IntesisHomeHandler(Thing thing) {\n         super(thing);\n-        this.api = new IntesisHomeHttpApi(config, httpClient);\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        logger.debug(\"Start initializing!\");\n-        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n-        }\n-\n-        // start background initialization:\n-        scheduler.schedule(() -> {\n-            try {\n-                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-                String response = api.postRequest(ipAddress, contentString);\n-                logger.trace(\"getInfo response : {}\", response);\n-                if (response != null && !response.isEmpty()) {\n-                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                    logger.trace(\"success response : {}\", success);\n-                    if (success) {\n-                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n-                        info devInfo = gson.fromJson(devInfoNode, info.class);\n-                        Map<String, String> properties = new HashMap<>(5);\n-                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-                        updateProperties(properties);\n-\n-                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, contentString);\n-                        if (response != null && !response.isEmpty()) {\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (success) {\n-                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                                sessionId = auth.sessionID;\n-                                if (!sessionId.isEmpty()) {\n-                                    logger.trace(\"sessionID : {}\", sessionId);\n-                                    updateStatus(ThingStatus.ONLINE);\n-                                } else {\n-                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                                }\n-                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n-                                        TimeUnit.SECONDS);\n-                            } else {\n-                                updateStatus(ThingStatus.OFFLINE);\n-                            }\n-                        }\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                }\n-            } catch (Exception e) {\n-            }\n-        }, 2, TimeUnit.SECONDS);\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        logger.debug(\"IntesisHomeHandler disposed.\");\n-        final ScheduledFuture<?> refreshJob = this.refreshJob;\n-\n-        if (refreshJob != null) {\n-            refreshJob.cancel(true);\n-            this.refreshJob = null;\n-        }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -71,6 +73,69 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         super(thing);\n     }\n \n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            String response = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                info devInfo = gson.fromJson(devInfoNode, info.class);\n+                Map<String, String> properties = new HashMap<>(5);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                updateProperties(properties);\n+\n+                response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+                success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    logger.trace(\"sessionID : {}\", sessionId);\n+\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+        }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n+            httpClient.stop();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         int uid = 0;\n", "next_change": {"commit": "253765c2c2d9dc92783e52efda4362279fb6da2e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..3ba2862f70 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -130,8 +142,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             this.refreshJob = null;\n         }\n         try {\n-            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n-            httpClient.stop();\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n         } catch (Exception e) {\n         }\n     }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 3ba2862f70..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -141,11 +158,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             refreshJob.cancel(true);\n             this.refreshJob = null;\n         }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "e616e3645d96b3e05a7635d64d755a70e694be02", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..cd6eddc6ee 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -166,7 +167,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         int value = 0;\n         String channelId = channelUID.getId();\n         if (command instanceof RefreshType) {\n-            getAllUidValues();\n+            // getAllUidValues();\n         } else {\n             switch (channelId) {\n                 case POWER_CHANNEL:\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex cd6eddc6ee..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -170,15 +322,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             // getAllUidValues();\n         } else {\n             switch (channelId) {\n-                case POWER_CHANNEL:\n+                case CHANNEL_TYPE_POWER:\n                     uid = 1;\n                     value = command.equals(OnOffType.OFF) ? 0 : 1;\n                     break;\n-                case MODE_CHANNEL:\n+                case CHANNEL_TYPE_MODE:\n                     uid = 2;\n                     value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n                     break;\n-                case FANSPEED_CHANNEL:\n+                case CHANNEL_TYPE_FANSPEED:\n                     uid = 4;\n                     if ((\"AUTO\").equals(command.toString())) {\n                         value = 0;\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -339,36 +150,50 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     }\n                     break;\n                 case CHANNEL_TYPE_VANESUD:\n-                    uid = 5;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n-                    }\n-                    break;\n                 case CHANNEL_TYPE_VANESLR:\n-                    uid = 6;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n                     }\n                     break;\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n-                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n                     break;\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDk1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474134952", "body": "`isEmpty()` is already checked in `postRequest()`.", "bodyText": "isEmpty() is already checked in postRequest().", "bodyHTML": "<p dir=\"auto\"><code>isEmpty()</code> is already checked in <code>postRequest()</code>.</p>", "author": "fwolter", "createdAt": "2020-08-20T16:52:39Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MTk5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474451996", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-08-21T07:07:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -57,99 +54,21 @@ import com.google.gson.JsonElement;\n public class IntesisHomeHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n-    // private final HttpClient httpClient;\n-    private final IntesisHomeHttpApi api;\n-    private IntesisConfiguration config = new IntesisConfiguration();\n+    private static HttpClient httpClient = new HttpClient();\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n-\n-    private int refreshInterval = 30;\n-    private String ipAddress = \"\";\n+    private String deviceIp = \"\";\n     private String password = \"\";\n+\n     private String sessionId = \"\";\n+    private @Nullable JsonElement uidValueArray;\n+    @SuppressWarnings(\"unused\")\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int refreshInterval = 30;\n \n     Gson gson = new Gson();\n \n-    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+    public IntesisHomeHandler(Thing thing) {\n         super(thing);\n-        this.api = new IntesisHomeHttpApi(config, httpClient);\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        logger.debug(\"Start initializing!\");\n-        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n-        }\n-\n-        // start background initialization:\n-        scheduler.schedule(() -> {\n-            try {\n-                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-                String response = api.postRequest(ipAddress, contentString);\n-                logger.trace(\"getInfo response : {}\", response);\n-                if (response != null && !response.isEmpty()) {\n-                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                    logger.trace(\"success response : {}\", success);\n-                    if (success) {\n-                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n-                        info devInfo = gson.fromJson(devInfoNode, info.class);\n-                        Map<String, String> properties = new HashMap<>(5);\n-                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-                        updateProperties(properties);\n-\n-                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, contentString);\n-                        if (response != null && !response.isEmpty()) {\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (success) {\n-                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                                sessionId = auth.sessionID;\n-                                if (!sessionId.isEmpty()) {\n-                                    logger.trace(\"sessionID : {}\", sessionId);\n-                                    updateStatus(ThingStatus.ONLINE);\n-                                } else {\n-                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                                }\n-                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n-                                        TimeUnit.SECONDS);\n-                            } else {\n-                                updateStatus(ThingStatus.OFFLINE);\n-                            }\n-                        }\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                }\n-            } catch (Exception e) {\n-            }\n-        }, 2, TimeUnit.SECONDS);\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        logger.debug(\"IntesisHomeHandler disposed.\");\n-        final ScheduledFuture<?> refreshJob = this.refreshJob;\n-\n-        if (refreshJob != null) {\n-            refreshJob.cancel(true);\n-            this.refreshJob = null;\n-        }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -71,6 +73,69 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         super(thing);\n     }\n \n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            String response = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                info devInfo = gson.fromJson(devInfoNode, info.class);\n+                Map<String, String> properties = new HashMap<>(5);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                updateProperties(properties);\n+\n+                response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+                success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    logger.trace(\"sessionID : {}\", sessionId);\n+\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+        }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n+            httpClient.stop();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         int uid = 0;\n", "next_change": {"commit": "253765c2c2d9dc92783e52efda4362279fb6da2e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..3ba2862f70 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -130,8 +142,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             this.refreshJob = null;\n         }\n         try {\n-            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n-            httpClient.stop();\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n         } catch (Exception e) {\n         }\n     }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 3ba2862f70..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -141,11 +158,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             refreshJob.cancel(true);\n             this.refreshJob = null;\n         }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "e616e3645d96b3e05a7635d64d755a70e694be02", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..cd6eddc6ee 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -166,7 +167,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         int value = 0;\n         String channelId = channelUID.getId();\n         if (command instanceof RefreshType) {\n-            getAllUidValues();\n+            // getAllUidValues();\n         } else {\n             switch (channelId) {\n                 case POWER_CHANNEL:\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex cd6eddc6ee..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -170,15 +322,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             // getAllUidValues();\n         } else {\n             switch (channelId) {\n-                case POWER_CHANNEL:\n+                case CHANNEL_TYPE_POWER:\n                     uid = 1;\n                     value = command.equals(OnOffType.OFF) ? 0 : 1;\n                     break;\n-                case MODE_CHANNEL:\n+                case CHANNEL_TYPE_MODE:\n                     uid = 2;\n                     value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n                     break;\n-                case FANSPEED_CHANNEL:\n+                case CHANNEL_TYPE_FANSPEED:\n                     uid = 4;\n                     if ((\"AUTO\").equals(command.toString())) {\n                         value = 0;\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -339,36 +150,50 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     }\n                     break;\n                 case CHANNEL_TYPE_VANESUD:\n-                    uid = 5;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n-                    }\n-                    break;\n                 case CHANNEL_TYPE_VANESLR:\n-                    uid = 6;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n                     }\n                     break;\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n-                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n                     break;\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNTc1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474135757", "body": "What type of exception do you expect here? Can you specify the concrete type and handle it appropriately?", "bodyText": "What type of exception do you expect here? Can you specify the concrete type and handle it appropriately?", "bodyHTML": "<p dir=\"auto\">What type of exception do you expect here? Can you specify the concrete type and handle it appropriately?</p>", "author": "fwolter", "createdAt": "2020-08-20T16:54:06Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1MTczMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r475451731", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-08-24T09:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNTc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -57,99 +54,21 @@ import com.google.gson.JsonElement;\n public class IntesisHomeHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n-    // private final HttpClient httpClient;\n-    private final IntesisHomeHttpApi api;\n-    private IntesisConfiguration config = new IntesisConfiguration();\n+    private static HttpClient httpClient = new HttpClient();\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n-\n-    private int refreshInterval = 30;\n-    private String ipAddress = \"\";\n+    private String deviceIp = \"\";\n     private String password = \"\";\n+\n     private String sessionId = \"\";\n+    private @Nullable JsonElement uidValueArray;\n+    @SuppressWarnings(\"unused\")\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int refreshInterval = 30;\n \n     Gson gson = new Gson();\n \n-    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+    public IntesisHomeHandler(Thing thing) {\n         super(thing);\n-        this.api = new IntesisHomeHttpApi(config, httpClient);\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        logger.debug(\"Start initializing!\");\n-        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n-        }\n-\n-        // start background initialization:\n-        scheduler.schedule(() -> {\n-            try {\n-                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-                String response = api.postRequest(ipAddress, contentString);\n-                logger.trace(\"getInfo response : {}\", response);\n-                if (response != null && !response.isEmpty()) {\n-                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                    logger.trace(\"success response : {}\", success);\n-                    if (success) {\n-                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n-                        info devInfo = gson.fromJson(devInfoNode, info.class);\n-                        Map<String, String> properties = new HashMap<>(5);\n-                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-                        updateProperties(properties);\n-\n-                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, contentString);\n-                        if (response != null && !response.isEmpty()) {\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (success) {\n-                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                                sessionId = auth.sessionID;\n-                                if (!sessionId.isEmpty()) {\n-                                    logger.trace(\"sessionID : {}\", sessionId);\n-                                    updateStatus(ThingStatus.ONLINE);\n-                                } else {\n-                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                                }\n-                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n-                                        TimeUnit.SECONDS);\n-                            } else {\n-                                updateStatus(ThingStatus.OFFLINE);\n-                            }\n-                        }\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                }\n-            } catch (Exception e) {\n-            }\n-        }, 2, TimeUnit.SECONDS);\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        logger.debug(\"IntesisHomeHandler disposed.\");\n-        final ScheduledFuture<?> refreshJob = this.refreshJob;\n-\n-        if (refreshJob != null) {\n-            refreshJob.cancel(true);\n-            this.refreshJob = null;\n-        }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -71,6 +73,69 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         super(thing);\n     }\n \n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            String response = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                info devInfo = gson.fromJson(devInfoNode, info.class);\n+                Map<String, String> properties = new HashMap<>(5);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                updateProperties(properties);\n+\n+                response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+                success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    logger.trace(\"sessionID : {}\", sessionId);\n+\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+        }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n+            httpClient.stop();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         int uid = 0;\n", "next_change": {"commit": "253765c2c2d9dc92783e52efda4362279fb6da2e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..3ba2862f70 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -130,8 +142,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             this.refreshJob = null;\n         }\n         try {\n-            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n-            httpClient.stop();\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n         } catch (Exception e) {\n         }\n     }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 3ba2862f70..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -141,11 +158,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             refreshJob.cancel(true);\n             this.refreshJob = null;\n         }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "e616e3645d96b3e05a7635d64d755a70e694be02", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..cd6eddc6ee 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -166,7 +167,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         int value = 0;\n         String channelId = channelUID.getId();\n         if (command instanceof RefreshType) {\n-            getAllUidValues();\n+            // getAllUidValues();\n         } else {\n             switch (channelId) {\n                 case POWER_CHANNEL:\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex cd6eddc6ee..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -170,15 +322,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             // getAllUidValues();\n         } else {\n             switch (channelId) {\n-                case POWER_CHANNEL:\n+                case CHANNEL_TYPE_POWER:\n                     uid = 1;\n                     value = command.equals(OnOffType.OFF) ? 0 : 1;\n                     break;\n-                case MODE_CHANNEL:\n+                case CHANNEL_TYPE_MODE:\n                     uid = 2;\n                     value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n                     break;\n-                case FANSPEED_CHANNEL:\n+                case CHANNEL_TYPE_FANSPEED:\n                     uid = 4;\n                     if ((\"AUTO\").equals(command.toString())) {\n                         value = 0;\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -339,36 +150,50 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     }\n                     break;\n                 case CHANNEL_TYPE_VANESUD:\n-                    uid = 5;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n-                    }\n-                    break;\n                 case CHANNEL_TYPE_VANESLR:\n-                    uid = 6;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n                     }\n                     break;\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n-                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n                     break;\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjAyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474136028", "body": "Is there any reason why you defer it?", "bodyText": "Is there any reason why you defer it?", "bodyHTML": "<p dir=\"auto\">Is there any reason why you defer it?</p>", "author": "fwolter", "createdAt": "2020-08-20T16:54:33Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MjQ4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474452486", "bodyText": "No, changed", "author": "hmerk", "createdAt": "2020-08-21T07:08:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -57,99 +54,21 @@ import com.google.gson.JsonElement;\n public class IntesisHomeHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n-    // private final HttpClient httpClient;\n-    private final IntesisHomeHttpApi api;\n-    private IntesisConfiguration config = new IntesisConfiguration();\n+    private static HttpClient httpClient = new HttpClient();\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n-\n-    private int refreshInterval = 30;\n-    private String ipAddress = \"\";\n+    private String deviceIp = \"\";\n     private String password = \"\";\n+\n     private String sessionId = \"\";\n+    private @Nullable JsonElement uidValueArray;\n+    @SuppressWarnings(\"unused\")\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int refreshInterval = 30;\n \n     Gson gson = new Gson();\n \n-    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+    public IntesisHomeHandler(Thing thing) {\n         super(thing);\n-        this.api = new IntesisHomeHttpApi(config, httpClient);\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        logger.debug(\"Start initializing!\");\n-        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n-        }\n-\n-        // start background initialization:\n-        scheduler.schedule(() -> {\n-            try {\n-                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-                String response = api.postRequest(ipAddress, contentString);\n-                logger.trace(\"getInfo response : {}\", response);\n-                if (response != null && !response.isEmpty()) {\n-                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                    logger.trace(\"success response : {}\", success);\n-                    if (success) {\n-                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n-                        info devInfo = gson.fromJson(devInfoNode, info.class);\n-                        Map<String, String> properties = new HashMap<>(5);\n-                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-                        updateProperties(properties);\n-\n-                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, contentString);\n-                        if (response != null && !response.isEmpty()) {\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (success) {\n-                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                                sessionId = auth.sessionID;\n-                                if (!sessionId.isEmpty()) {\n-                                    logger.trace(\"sessionID : {}\", sessionId);\n-                                    updateStatus(ThingStatus.ONLINE);\n-                                } else {\n-                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                                }\n-                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n-                                        TimeUnit.SECONDS);\n-                            } else {\n-                                updateStatus(ThingStatus.OFFLINE);\n-                            }\n-                        }\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                }\n-            } catch (Exception e) {\n-            }\n-        }, 2, TimeUnit.SECONDS);\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        logger.debug(\"IntesisHomeHandler disposed.\");\n-        final ScheduledFuture<?> refreshJob = this.refreshJob;\n-\n-        if (refreshJob != null) {\n-            refreshJob.cancel(true);\n-            this.refreshJob = null;\n-        }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -71,6 +73,69 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         super(thing);\n     }\n \n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            String response = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                info devInfo = gson.fromJson(devInfoNode, info.class);\n+                Map<String, String> properties = new HashMap<>(5);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                updateProperties(properties);\n+\n+                response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+                success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    logger.trace(\"sessionID : {}\", sessionId);\n+\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+        }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n+            httpClient.stop();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         int uid = 0;\n", "next_change": {"commit": "253765c2c2d9dc92783e52efda4362279fb6da2e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..3ba2862f70 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -130,8 +142,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             this.refreshJob = null;\n         }\n         try {\n-            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n-            httpClient.stop();\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n         } catch (Exception e) {\n         }\n     }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 3ba2862f70..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -141,11 +158,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             refreshJob.cancel(true);\n             this.refreshJob = null;\n         }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "e616e3645d96b3e05a7635d64d755a70e694be02", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..cd6eddc6ee 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -166,7 +167,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         int value = 0;\n         String channelId = channelUID.getId();\n         if (command instanceof RefreshType) {\n-            getAllUidValues();\n+            // getAllUidValues();\n         } else {\n             switch (channelId) {\n                 case POWER_CHANNEL:\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex cd6eddc6ee..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -170,15 +322,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             // getAllUidValues();\n         } else {\n             switch (channelId) {\n-                case POWER_CHANNEL:\n+                case CHANNEL_TYPE_POWER:\n                     uid = 1;\n                     value = command.equals(OnOffType.OFF) ? 0 : 1;\n                     break;\n-                case MODE_CHANNEL:\n+                case CHANNEL_TYPE_MODE:\n                     uid = 2;\n                     value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n                     break;\n-                case FANSPEED_CHANNEL:\n+                case CHANNEL_TYPE_FANSPEED:\n                     uid = 4;\n                     if ((\"AUTO\").equals(command.toString())) {\n                         value = 0;\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -339,36 +150,50 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     }\n                     break;\n                 case CHANNEL_TYPE_VANESUD:\n-                    uid = 5;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n-                    }\n-                    break;\n                 case CHANNEL_TYPE_VANESLR:\n-                    uid = 6;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n                     }\n                     break;\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n-                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n                     break;\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjMwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474136307", "body": "`dispose()` should return fast. Is this API logout request really necessary?", "bodyText": "dispose() should return fast. Is this API logout request really necessary?", "bodyHTML": "<p dir=\"auto\"><code>dispose()</code> should return fast. Is this API logout request really necessary?</p>", "author": "fwolter", "createdAt": "2020-08-20T16:55:04Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1Mjg1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474452851", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-08-21T07:08:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -57,99 +54,21 @@ import com.google.gson.JsonElement;\n public class IntesisHomeHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n-    // private final HttpClient httpClient;\n-    private final IntesisHomeHttpApi api;\n-    private IntesisConfiguration config = new IntesisConfiguration();\n+    private static HttpClient httpClient = new HttpClient();\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n-\n-    private int refreshInterval = 30;\n-    private String ipAddress = \"\";\n+    private String deviceIp = \"\";\n     private String password = \"\";\n+\n     private String sessionId = \"\";\n+    private @Nullable JsonElement uidValueArray;\n+    @SuppressWarnings(\"unused\")\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int refreshInterval = 30;\n \n     Gson gson = new Gson();\n \n-    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+    public IntesisHomeHandler(Thing thing) {\n         super(thing);\n-        this.api = new IntesisHomeHttpApi(config, httpClient);\n-    }\n-\n-    @Override\n-    public void initialize() {\n-        logger.debug(\"Start initializing!\");\n-        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n-        }\n-\n-        // start background initialization:\n-        scheduler.schedule(() -> {\n-            try {\n-                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-                String response = api.postRequest(ipAddress, contentString);\n-                logger.trace(\"getInfo response : {}\", response);\n-                if (response != null && !response.isEmpty()) {\n-                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                    logger.trace(\"success response : {}\", success);\n-                    if (success) {\n-                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n-                        info devInfo = gson.fromJson(devInfoNode, info.class);\n-                        Map<String, String> properties = new HashMap<>(5);\n-                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-                        updateProperties(properties);\n-\n-                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, contentString);\n-                        if (response != null && !response.isEmpty()) {\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (success) {\n-                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                                sessionId = auth.sessionID;\n-                                if (!sessionId.isEmpty()) {\n-                                    logger.trace(\"sessionID : {}\", sessionId);\n-                                    updateStatus(ThingStatus.ONLINE);\n-                                } else {\n-                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                                }\n-                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n-                                        TimeUnit.SECONDS);\n-                            } else {\n-                                updateStatus(ThingStatus.OFFLINE);\n-                            }\n-                        }\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                }\n-            } catch (Exception e) {\n-            }\n-        }, 2, TimeUnit.SECONDS);\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        logger.debug(\"IntesisHomeHandler disposed.\");\n-        final ScheduledFuture<?> refreshJob = this.refreshJob;\n-\n-        if (refreshJob != null) {\n-            refreshJob.cancel(true);\n-            this.refreshJob = null;\n-        }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -71,6 +73,69 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         super(thing);\n     }\n \n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            String response = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                info devInfo = gson.fromJson(devInfoNode, info.class);\n+                Map<String, String> properties = new HashMap<>(5);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                updateProperties(properties);\n+\n+                response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+                success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    logger.trace(\"sessionID : {}\", sessionId);\n+\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+        }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n+            httpClient.stop();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         int uid = 0;\n", "next_change": {"commit": "253765c2c2d9dc92783e52efda4362279fb6da2e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..3ba2862f70 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -130,8 +142,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             this.refreshJob = null;\n         }\n         try {\n-            IntesisHomeHttpApi.setLogout(deviceIp, sessionId, httpClient);\n-            httpClient.stop();\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n         } catch (Exception e) {\n         }\n     }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 3ba2862f70..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -141,11 +158,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             refreshJob.cancel(true);\n             this.refreshJob = null;\n         }\n-        try {\n-            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-            api.postRequest(ipAddress, contentString);\n-        } catch (Exception e) {\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "e616e3645d96b3e05a7635d64d755a70e694be02", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..cd6eddc6ee 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -166,7 +167,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         int value = 0;\n         String channelId = channelUID.getId();\n         if (command instanceof RefreshType) {\n-            getAllUidValues();\n+            // getAllUidValues();\n         } else {\n             switch (channelId) {\n                 case POWER_CHANNEL:\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex cd6eddc6ee..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -170,15 +322,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             // getAllUidValues();\n         } else {\n             switch (channelId) {\n-                case POWER_CHANNEL:\n+                case CHANNEL_TYPE_POWER:\n                     uid = 1;\n                     value = command.equals(OnOffType.OFF) ? 0 : 1;\n                     break;\n-                case MODE_CHANNEL:\n+                case CHANNEL_TYPE_MODE:\n                     uid = 2;\n                     value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n                     break;\n-                case FANSPEED_CHANNEL:\n+                case CHANNEL_TYPE_FANSPEED:\n                     uid = 4;\n                     if ((\"AUTO\").equals(command.toString())) {\n                         value = 0;\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -339,36 +150,50 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     }\n                     break;\n                 case CHANNEL_TYPE_VANESUD:\n-                    uid = 5;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n-                    }\n-                    break;\n                 case CHANNEL_TYPE_VANESLR:\n-                    uid = 6;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n                     }\n                     break;\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n-                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n                     break;\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474136684", "body": "Can you trigger an immediate polling of the data?", "bodyText": "Can you trigger an immediate polling of the data?", "bodyHTML": "<p dir=\"auto\">Can you trigger an immediate polling of the data?</p>", "author": "fwolter", "createdAt": "2020-08-20T16:55:36Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NzI3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474187271", "bodyText": "I could, but it is a really bad idea as I saw in the debugger, that all channels are refreshed at startup, which causes unnecessary traffic.", "author": "hmerk", "createdAt": "2020-08-20T18:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4MzQzMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474283430", "bodyText": "You could start a timer of e.g. 3 sec. for delaying the polling. Any Refresh command re-triggers it, so that only the last poll is invoked.", "author": "fwolter", "createdAt": "2020-08-20T21:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MzY1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474453657", "bodyText": "Don't see any benefit, as we poll the status every 30 seconds....", "author": "hmerk", "createdAt": "2020-08-21T07:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY4NA=="}], "type": "inlineReview", "revised_code": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -158,7 +166,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         int value = 0;\n         String channelId = channelUID.getId();\n         if (command instanceof RefreshType) {\n-            // The thing is updated by the scheduled automatic refresh so do nothing here.\n+            getAllUidValues();\n         } else {\n             switch (channelId) {\n                 case POWER_CHANNEL:\n", "next_change": {"commit": "e616e3645d96b3e05a7635d64d755a70e694be02", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..cd6eddc6ee 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -166,7 +167,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         int value = 0;\n         String channelId = channelUID.getId();\n         if (command instanceof RefreshType) {\n-            getAllUidValues();\n+            // getAllUidValues();\n         } else {\n             switch (channelId) {\n                 case POWER_CHANNEL:\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex cd6eddc6ee..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -170,15 +322,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             // getAllUidValues();\n         } else {\n             switch (channelId) {\n-                case POWER_CHANNEL:\n+                case CHANNEL_TYPE_POWER:\n                     uid = 1;\n                     value = command.equals(OnOffType.OFF) ? 0 : 1;\n                     break;\n-                case MODE_CHANNEL:\n+                case CHANNEL_TYPE_MODE:\n                     uid = 2;\n                     value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n                     break;\n-                case FANSPEED_CHANNEL:\n+                case CHANNEL_TYPE_FANSPEED:\n                     uid = 4;\n                     if ((\"AUTO\").equals(command.toString())) {\n                         value = 0;\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -339,36 +150,50 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     }\n                     break;\n                 case CHANNEL_TYPE_VANESUD:\n-                    uid = 5;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n-                    }\n-                    break;\n                 case CHANNEL_TYPE_VANESLR:\n-                    uid = 6;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n                     }\n                     break;\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n-                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n                     break;\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..cd6eddc6ee 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -175,17 +176,45 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     break;\n                 case MODE_CHANNEL:\n                     uid = 2;\n-                    value = Integer.parseInt(command.toString());\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n                     break;\n-                case WINDSPEED_CHANNEL:\n+                case FANSPEED_CHANNEL:\n                     uid = 4;\n-                    value = Integer.parseInt(command.toString());\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n                     break;\n-                case SWINGUD_CHANNEL:\n+                case VANESUD_CHANNEL:\n                     uid = 5;\n-                    value = Integer.parseInt(command.toString());\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else if ((\"SWING\").equals(command.toString())) {\n+                        value = 10;\n+                    } else if ((\"SWIRL\").equals(command.toString())) {\n+                        value = 11;\n+                    } else if ((\"WIDE\").equals(command.toString())) {\n+                        value = 12;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case VANESLR_CHANNEL:\n+                    uid = 6;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else if ((\"SWING\").equals(command.toString())) {\n+                        value = 10;\n+                    } else if ((\"SWIRL\").equals(command.toString())) {\n+                        value = 11;\n+                    } else if ((\"WIDE\").equals(command.toString())) {\n+                        value = 12;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n                     break;\n-                case TEMP_CHANNEL:\n+                case SETTEMP_CHANNEL:\n                     uid = 9;\n                     value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n                     break;\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex cd6eddc6ee..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -214,43 +366,28 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                         value = Integer.parseInt(command.toString());\n                     }\n                     break;\n-                case SETTEMP_CHANNEL:\n+                case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n                     value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n                     break;\n             }\n         }\n         if (uid != 0) {\n+            login();\n             String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n                     + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n             String response = api.postRequest(ipAddress, contentString);\n             if (response != null) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                boolean success = getSuccess(response);\n                 if (!success) {\n                     updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                     String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n                             + password + \"\\\"}}\";\n                     response = api.postRequest(ipAddress, sessionString);\n-                    if (response != null) {\n-                        success = IntesisHomeJSonDTO.getSuccess(response);\n-                        if (success) {\n-                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                            sessionId = auth.sessionID;\n-                            updateStatus(ThingStatus.ONLINE);\n-                            response = api.postRequest(ipAddress, contentString);\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            }\n-                        } else {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n                 } else {\n+                    logout();\n                     updateStatus(ThingStatus.ONLINE);\n                 }\n-\n             }\n         }\n     }\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -378,15 +203,20 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n             String response = api.postRequest(ipAddress, contentString);\n             if (response != null) {\n-                boolean success = getSuccess(response);\n-                if (!success) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n                     updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                            + password + \"\\\"}}\";\n-                    response = api.postRequest(ipAddress, sessionString);\n-                } else {\n-                    logout();\n-                    updateStatus(ThingStatus.ONLINE);\n                 }\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNzUyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474137523", "body": "Is this Channel documented in the readme?", "bodyText": "Is this Channel documented in the readme?", "bodyHTML": "<p dir=\"auto\">Is this Channel documented in the readme?</p>", "author": "fwolter", "createdAt": "2020-08-20T16:56:59Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.\n+        } else {\n+            switch (channelId) {\n+                case POWER_CHANNEL:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case MODE_CHANNEL:\n+                    uid = 2;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case WINDSPEED_CHANNEL:\n+                    uid = 4;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGUD_CHANNEL:\n+                    uid = 5;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGLR_CHANNEL:", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1NDE3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474454175", "bodyText": "Leftover, removed", "author": "hmerk", "createdAt": "2020-08-21T07:10:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNzUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -177,10 +185,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     uid = 5;\n                     value = Integer.parseInt(command.toString());\n                     break;\n-                case SWINGLR_CHANNEL:\n-                    uid = 6;\n-                    value = Integer.parseInt(command.toString());\n-                    break;\n                 case TEMP_CHANNEL:\n                     uid = 9;\n                     value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n", "next_change": {"commit": "e616e3645d96b3e05a7635d64d755a70e694be02", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..cd6eddc6ee 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -175,17 +176,45 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     break;\n                 case MODE_CHANNEL:\n                     uid = 2;\n-                    value = Integer.parseInt(command.toString());\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n                     break;\n-                case WINDSPEED_CHANNEL:\n+                case FANSPEED_CHANNEL:\n                     uid = 4;\n-                    value = Integer.parseInt(command.toString());\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n                     break;\n-                case SWINGUD_CHANNEL:\n+                case VANESUD_CHANNEL:\n                     uid = 5;\n-                    value = Integer.parseInt(command.toString());\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else if ((\"SWING\").equals(command.toString())) {\n+                        value = 10;\n+                    } else if ((\"SWIRL\").equals(command.toString())) {\n+                        value = 11;\n+                    } else if ((\"WIDE\").equals(command.toString())) {\n+                        value = 12;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case VANESLR_CHANNEL:\n+                    uid = 6;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else if ((\"SWING\").equals(command.toString())) {\n+                        value = 10;\n+                    } else if ((\"SWIRL\").equals(command.toString())) {\n+                        value = 11;\n+                    } else if ((\"WIDE\").equals(command.toString())) {\n+                        value = 12;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n                     break;\n-                case TEMP_CHANNEL:\n+                case SETTEMP_CHANNEL:\n                     uid = 9;\n                     value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n                     break;\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex cd6eddc6ee..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -214,43 +366,28 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                         value = Integer.parseInt(command.toString());\n                     }\n                     break;\n-                case SETTEMP_CHANNEL:\n+                case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n                     value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n                     break;\n             }\n         }\n         if (uid != 0) {\n+            login();\n             String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n                     + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n             String response = api.postRequest(ipAddress, contentString);\n             if (response != null) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                boolean success = getSuccess(response);\n                 if (!success) {\n                     updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                     String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n                             + password + \"\\\"}}\";\n                     response = api.postRequest(ipAddress, sessionString);\n-                    if (response != null) {\n-                        success = IntesisHomeJSonDTO.getSuccess(response);\n-                        if (success) {\n-                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                            sessionId = auth.sessionID;\n-                            updateStatus(ThingStatus.ONLINE);\n-                            response = api.postRequest(ipAddress, contentString);\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            }\n-                        } else {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n                 } else {\n+                    logout();\n                     updateStatus(ThingStatus.ONLINE);\n                 }\n-\n             }\n         }\n     }\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -378,15 +203,20 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n             String response = api.postRequest(ipAddress, contentString);\n             if (response != null) {\n-                boolean success = getSuccess(response);\n-                if (!success) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n                     updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                            + password + \"\\\"}}\";\n-                    response = api.postRequest(ipAddress, sessionString);\n-                } else {\n-                    logout();\n-                    updateStatus(ThingStatus.ONLINE);\n                 }\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzOTM5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474139390", "body": "As you use Units of Measure, you can cast this to `QuantityType` and use `toUnit()` to convert it to celsius. Your code would fail if the user uses Fahrenheit.", "bodyText": "As you use Units of Measure, you can cast this to QuantityType and use toUnit() to convert it to celsius. Your code would fail if the user uses Fahrenheit.", "bodyHTML": "<p dir=\"auto\">As you use Units of Measure, you can cast this to <code>QuantityType</code> and use <code>toUnit()</code> to convert it to celsius. Your code would fail if the user uses Fahrenheit.</p>", "author": "fwolter", "createdAt": "2020-08-20T17:00:00Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.\n+        } else {\n+            switch (channelId) {\n+                case POWER_CHANNEL:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case MODE_CHANNEL:\n+                    uid = 2;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case WINDSPEED_CHANNEL:\n+                    uid = 4;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGUD_CHANNEL:\n+                    uid = 5;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGLR_CHANNEL:\n+                    uid = 6;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case TEMP_CHANNEL:\n+                    uid = 9;\n+                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1NjExOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474456119", "bodyText": "No, the command has to deliver just an integer, so I have to remove the unit symvol and multiply the interger value by 10.", "author": "hmerk", "createdAt": "2020-08-21T07:12:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzOTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NjA5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484346097", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n          \n          \n            \n                                if (command instanceof QuantityType) {\n          \n          \n            \n                                    value = ((QuantityType) command).toUnit(SIUnits.CELSIUS).intValue()  * 10;\n          \n          \n            \n                                }", "author": "Hilbrand", "createdAt": "2020-09-07T10:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzOTM5MA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -188,89 +107,71 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null && !response.isEmpty()) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                            + password + \"\\\"}}\";\n-                    response = api.postRequest(ipAddress, sessionString);\n-                    if (response != null && !response.isEmpty()) {\n-                        success = IntesisHomeJSonDTO.getSuccess(response);\n-                        if (success) {\n-                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                            sessionId = auth.sessionID;\n-                            updateStatus(ThingStatus.ONLINE);\n-                            response = api.postRequest(ipAddress, contentString);\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            }\n-                        } else {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-\n-            }\n+            IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n         }\n     }\n \n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device for actuall status\");\n-        if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, sessionString);\n-            if (response != null && !response.isEmpty()) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            }\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            JsonElement deviceInfo = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            logger.trace(\"deviceInfo = {}\", deviceInfo);\n+\n+            info devInfo = gson.fromJson(deviceInfo, info.class);\n+            Map<String, String> properties = new HashMap<>(5);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+            updateProperties(properties);\n+\n+            sessionId = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+            logger.trace(\"SessionId = {}\", sessionId);\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval, TimeUnit.SECONDS);\n+        } catch (Exception e) {\n+            // TODO Auto-generated catch block\n         }\n-        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-        if (response != null && !response.isEmpty()) {\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-            if (!success) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            } else {\n-                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                int value = uid[0].value;\n \n-                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                State stateValue = new DecimalType(uid[1].value);\n-                updateState(MODE_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[2].value);\n-                updateState(WINDSPEED_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[3].value);\n-                updateState(SWINGUD_CHANNEL, stateValue);\n-                int unit = (uid[4].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(TEMP_CHANNEL, stateValue);\n-                unit = (uid[5].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(RETURNTEMP_CHANNEL, stateValue);\n-                unit = (uid[12].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n-            }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE);\n         }\n     }\n+\n+    public void getAllUidValues() {\n+        uidValueArray = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+\n+        dpval[] uid = gson.fromJson(uidValueArray, dpval[].class);\n+        int value = uid[0].value;\n+\n+        updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+        State stateValue = new DecimalType(uid[1].value);\n+        updateState(MODE_CHANNEL, stateValue);\n+        stateValue = new DecimalType(uid[2].value);\n+        updateState(WINDSPEED_CHANNEL, stateValue);\n+        stateValue = new DecimalType(uid[3].value);\n+        updateState(SWINGUD_CHANNEL, stateValue);\n+        int unit = (uid[4].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(TEMP_CHANNEL, stateValue);\n+        unit = (uid[5].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(RETURNTEMP_CHANNEL, stateValue);\n+        unit = (uid[12].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+\n+        JsonElement dpvalJson = IntesisHomeHttpApi.getRestrictedRequestUID6(deviceIp, sessionId, httpClient);\n+        dpval dpval = gson.fromJson(dpvalJson, dpval.class);\n+        stateValue = new DecimalType(dpval.value);\n+        updateState(SWINGLR_CHANNEL, stateValue);\n+    }\n }\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -107,71 +172,41 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n+            boolean success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n         }\n     }\n \n-    @Override\n-    public void initialize() {\n-        logger.trace(\"Start initializing!\");\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-\n-        deviceIp = config.ipAddress;\n-        password = config.password;\n-        try {\n-            httpClient.start();\n-            JsonElement deviceInfo = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n-            logger.trace(\"deviceInfo = {}\", deviceInfo);\n-\n-            info devInfo = gson.fromJson(deviceInfo, info.class);\n-            Map<String, String> properties = new HashMap<>(5);\n-            properties.put(PROPERTY_VENDOR, \"Intesis\");\n-            properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-            properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-            properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-            properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-            updateProperties(properties);\n-\n-            sessionId = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-            logger.trace(\"SessionId = {}\", sessionId);\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval, TimeUnit.SECONDS);\n-        } catch (Exception e) {\n-            // TODO Auto-generated catch block\n-        }\n-\n-        if (!sessionId.isEmpty()) {\n-            updateStatus(ThingStatus.ONLINE);\n+    public void getAllUidValues() {\n+        String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+        boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+        if (!success) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n         } else {\n-            updateStatus(ThingStatus.OFFLINE);\n+            JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+            dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+            int value = uid[0].value;\n+\n+            updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+            State stateValue = new DecimalType(uid[1].value);\n+            updateState(MODE_CHANNEL, stateValue);\n+            stateValue = new DecimalType(uid[2].value);\n+            updateState(WINDSPEED_CHANNEL, stateValue);\n+            stateValue = new DecimalType(uid[3].value);\n+            updateState(SWINGUD_CHANNEL, stateValue);\n+            int unit = (uid[4].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(TEMP_CHANNEL, stateValue);\n+            unit = (uid[5].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(RETURNTEMP_CHANNEL, stateValue);\n+            unit = (uid[12].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(OUTDOORTEMP_CHANNEL, stateValue);\n         }\n     }\n-\n-    public void getAllUidValues() {\n-        uidValueArray = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n-\n-        dpval[] uid = gson.fromJson(uidValueArray, dpval[].class);\n-        int value = uid[0].value;\n-\n-        updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-        State stateValue = new DecimalType(uid[1].value);\n-        updateState(MODE_CHANNEL, stateValue);\n-        stateValue = new DecimalType(uid[2].value);\n-        updateState(WINDSPEED_CHANNEL, stateValue);\n-        stateValue = new DecimalType(uid[3].value);\n-        updateState(SWINGUD_CHANNEL, stateValue);\n-        int unit = (uid[4].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(TEMP_CHANNEL, stateValue);\n-        unit = (uid[5].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(RETURNTEMP_CHANNEL, stateValue);\n-        unit = (uid[12].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(OUTDOORTEMP_CHANNEL, stateValue);\n-\n-        JsonElement dpvalJson = IntesisHomeHttpApi.getRestrictedRequestUID6(deviceIp, sessionId, httpClient);\n-        dpval dpval = gson.fromJson(dpvalJson, dpval.class);\n-        stateValue = new DecimalType(dpval.value);\n-        updateState(SWINGLR_CHANNEL, stateValue);\n-    }\n }\n", "next_change": {"commit": "ac4504b2317bb3f57bdaf584cc5aaf856dcc9fbe", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..520d69c519 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -182,31 +196,42 @@ public class IntesisHomeHandler extends BaseThingHandler {\n     }\n \n     public void getAllUidValues() {\n-        String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n-        boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-        if (!success) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        if (thing.getStatus() != ThingStatus.ONLINE) {\n+            String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                sessionId = auth.sessionID;\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n         } else {\n-            JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-            dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-            int value = uid[0].value;\n-\n-            updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-            State stateValue = new DecimalType(uid[1].value);\n-            updateState(MODE_CHANNEL, stateValue);\n-            stateValue = new DecimalType(uid[2].value);\n-            updateState(WINDSPEED_CHANNEL, stateValue);\n-            stateValue = new DecimalType(uid[3].value);\n-            updateState(SWINGUD_CHANNEL, stateValue);\n-            int unit = (uid[4].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(TEMP_CHANNEL, stateValue);\n-            unit = (uid[5].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(RETURNTEMP_CHANNEL, stateValue);\n-            unit = (uid[12].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+            String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+                int value = uid[0].value;\n+\n+                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                State stateValue = new DecimalType(uid[1].value);\n+                updateState(MODE_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[2].value);\n+                updateState(WINDSPEED_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[3].value);\n+                updateState(SWINGUD_CHANNEL, stateValue);\n+                int unit = (uid[4].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(TEMP_CHANNEL, stateValue);\n+                unit = (uid[5].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(RETURNTEMP_CHANNEL, stateValue);\n+                unit = (uid[12].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+            }\n         }\n     }\n }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 520d69c519..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -172,65 +192,90 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            boolean success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n-            if (!success) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-                success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                    success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                    if (response != null) {\n+                        success = IntesisHomeJSonDTO.getSuccess(response);\n+                        if (success) {\n+                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                            sessionId = auth.sessionID;\n+                            updateStatus(ThingStatus.ONLINE);\n+                            response = api.postRequest(ipAddress, contentString);\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n                 } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    updateStatus(ThingStatus.ONLINE);\n                 }\n-            } else {\n-                updateStatus(ThingStatus.ONLINE);\n+\n             }\n         }\n     }\n \n+    /**\n+     * Update device status and all channels\n+     */\n     public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device for actual status\");\n         if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-            if (success) {\n-                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                sessionId = auth.sessionID;\n-                updateStatus(ThingStatus.ONLINE);\n+            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                    + \"\\\"}}\";\n+\n+            String response = api.postRequest(ipAddress, sessionString);\n+            if (response != null) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n             }\n-        } else {\n-            String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+        }\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n             boolean success = IntesisHomeJSonDTO.getSuccess(response);\n             if (!success) {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             } else {\n                 JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n                 dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                int value = uid[0].value;\n-\n-                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                State stateValue = new DecimalType(uid[1].value);\n-                updateState(MODE_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[2].value);\n-                updateState(WINDSPEED_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[3].value);\n-                updateState(SWINGUD_CHANNEL, stateValue);\n-                int unit = (uid[4].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(TEMP_CHANNEL, stateValue);\n-                unit = (uid[5].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(RETURNTEMP_CHANNEL, stateValue);\n-                unit = (uid[12].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                if (uid.length >= 12) {\n+                    int value = uid[0].value;\n+                    updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                    State stateValue = new DecimalType(uid[1].value);\n+                    updateState(MODE_CHANNEL, stateValue);\n+                    stateValue = new DecimalType(uid[2].value);\n+                    updateState(WINDSPEED_CHANNEL, stateValue);\n+                    stateValue = new DecimalType(uid[3].value);\n+                    updateState(SWINGUD_CHANNEL, stateValue);\n+                    int unit = Math.round((uid[4].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(TEMP_CHANNEL, stateValue);\n+                    unit = Math.round((uid[5].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(AMBIENTTEMP_CHANNEL, stateValue);\n+                    unit = Math.round((uid[12].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                }\n             }\n         }\n     }\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -230,53 +396,171 @@ public class IntesisHomeHandler extends BaseThingHandler {\n      * Update device status and all channels\n      */\n     public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device for actual status\");\n-        if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                    + \"\\\"}}\";\n-\n-            String response = api.postRequest(ipAddress, sessionString);\n-            if (response != null) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            }\n-        }\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n         String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n                 + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n         if (response != null) {\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            boolean success = getSuccess(response);\n             if (!success) {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             } else {\n-                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                if (uid.length >= 12) {\n-                    int value = uid[0].value;\n-                    updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                    State stateValue = new DecimalType(uid[1].value);\n-                    updateState(MODE_CHANNEL, stateValue);\n-                    stateValue = new DecimalType(uid[2].value);\n-                    updateState(WINDSPEED_CHANNEL, stateValue);\n-                    stateValue = new DecimalType(uid[3].value);\n-                    updateState(SWINGUD_CHANNEL, stateValue);\n-                    int unit = Math.round((uid[4].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(TEMP_CHANNEL, stateValue);\n-                    unit = Math.round((uid[5].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(AMBIENTTEMP_CHANNEL, stateValue);\n-                    unit = Math.round((uid[12].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                logout();\n+                response resp = gson.fromJson(response, response.class);\n+                data data = gson.fromJson(resp.data.toString(), data.class);\n+                dpval[] dpval = gson.fromJson(data.dpval, dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            response resp = gson.fromJson(response, response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                data data = gson.fromJson(resp.data.toString(), data.class);\n+                id id = gson.fromJson(data.id.toString(), id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n                 }\n             }\n         }\n     }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        response resp = gson.fromJson(response, response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (getThing().getChannel(channelId) != null) {\n+                if (options != null) {\n+                    final List<StateOption> stateOptions = options.stream()\n+                            .map(e -> new StateOption(e.toString(),\n+                                    e instanceof String ? beautify((String) e) : e.toString()))\n+                            .collect(Collectors.toList());\n+                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n+        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n+                .withOptions(stateOptionList).build().toStateDescription();\n+        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n+    }\n+\n+    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n+        logger.debug(\"Adding state description for channel {}\", channelUID);\n+        descriptions.put(channelUID, description);\n+    }\n+\n+    @Override\n+    public @Nullable StateDescription getStateDescription(Channel channel,\n+            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n+        StateDescription description = descriptions.get(channel.getUID());\n+        return description;\n+    }\n }\n", "next_change": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -551,16 +557,4 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                 .withOptions(stateOptionList).build().toStateDescription();\n         intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n     }\n-\n-    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n-        logger.debug(\"Adding state description for channel {}\", channelUID);\n-        descriptions.put(channelUID, description);\n-    }\n-\n-    @Override\n-    public @Nullable StateDescription getStateDescription(Channel channel,\n-            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n-        StateDescription description = descriptions.get(channel.getUID());\n-        return description;\n-    }\n }\n", "next_change": {"commit": "b21bc3ddd7ac54ec9a8a1dd1c0eb088e0291c0bc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..af9e404b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -546,15 +544,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n-\n-    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n-        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n-                .withOptions(stateOptionList).build().toStateDescription();\n-        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n-    }\n }\n", "next_change": {"commit": "f2926350d73fde0aa6dbe4d6ac287bb2524d403d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex af9e404b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -544,9 +546,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n+                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n+\n+    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n+        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n+                .withOptions(stateOptionList).build().toStateDescription();\n+        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n+    }\n }\n", "next_change": {"commit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..af9e404b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -546,15 +544,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n-\n-    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n-        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n-                .withOptions(stateOptionList).build().toStateDescription();\n-        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n-    }\n }\n", "next_change": {"commit": "623adb7055714c71dbf4efc86ce64d0804311b66", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex af9e404b0c..ae486a0f96 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -544,7 +542,10 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n+                    channel = thing.getChannel(channelId);\n+                    if (channel != null) {\n+                        intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+                    }\n                 }\n             }\n         }\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ae486a0f96..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -535,17 +513,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             thingBuilder.withChannel(channel);\n             updateThing(thingBuilder.build());\n \n-            if (getThing().getChannel(channelId) != null) {\n-                if (options != null) {\n-                    final List<StateOption> stateOptions = options.stream()\n-                            .map(e -> new StateOption(e.toString(),\n-                                    e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                            .collect(Collectors.toList());\n-                    logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    channel = thing.getChannel(channelId);\n-                    if (channel != null) {\n-                        intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                    }\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e.toString(),\n+                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                channel = thing.getChannel(channelId);\n+                if (channel != null) {\n+                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n                 }\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -515,14 +526,10 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n             if (options != null) {\n                 final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e.toString(),\n-                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                         .collect(Collectors.toList());\n                 logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                channel = thing.getChannel(channelId);\n-                if (channel != null) {\n-                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                }\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n             }\n         }\n     }\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzOTQ4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474139484", "body": "See above", "bodyText": "See above", "bodyHTML": "<p dir=\"auto\">See above</p>", "author": "fwolter", "createdAt": "2020-08-20T17:00:13Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.\n+        } else {\n+            switch (channelId) {\n+                case POWER_CHANNEL:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case MODE_CHANNEL:\n+                    uid = 2;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case WINDSPEED_CHANNEL:\n+                    uid = 4;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGUD_CHANNEL:\n+                    uid = 5;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGLR_CHANNEL:\n+                    uid = 6;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case TEMP_CHANNEL:\n+                    uid = 9;\n+                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null && !response.isEmpty()) {", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1NjI0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474456246", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T07:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzOTQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -188,89 +107,71 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null && !response.isEmpty()) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                            + password + \"\\\"}}\";\n-                    response = api.postRequest(ipAddress, sessionString);\n-                    if (response != null && !response.isEmpty()) {\n-                        success = IntesisHomeJSonDTO.getSuccess(response);\n-                        if (success) {\n-                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                            sessionId = auth.sessionID;\n-                            updateStatus(ThingStatus.ONLINE);\n-                            response = api.postRequest(ipAddress, contentString);\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            }\n-                        } else {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-\n-            }\n+            IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n         }\n     }\n \n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device for actuall status\");\n-        if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, sessionString);\n-            if (response != null && !response.isEmpty()) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            }\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            JsonElement deviceInfo = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            logger.trace(\"deviceInfo = {}\", deviceInfo);\n+\n+            info devInfo = gson.fromJson(deviceInfo, info.class);\n+            Map<String, String> properties = new HashMap<>(5);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+            updateProperties(properties);\n+\n+            sessionId = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+            logger.trace(\"SessionId = {}\", sessionId);\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval, TimeUnit.SECONDS);\n+        } catch (Exception e) {\n+            // TODO Auto-generated catch block\n         }\n-        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-        if (response != null && !response.isEmpty()) {\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-            if (!success) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            } else {\n-                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                int value = uid[0].value;\n \n-                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                State stateValue = new DecimalType(uid[1].value);\n-                updateState(MODE_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[2].value);\n-                updateState(WINDSPEED_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[3].value);\n-                updateState(SWINGUD_CHANNEL, stateValue);\n-                int unit = (uid[4].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(TEMP_CHANNEL, stateValue);\n-                unit = (uid[5].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(RETURNTEMP_CHANNEL, stateValue);\n-                unit = (uid[12].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n-            }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE);\n         }\n     }\n+\n+    public void getAllUidValues() {\n+        uidValueArray = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+\n+        dpval[] uid = gson.fromJson(uidValueArray, dpval[].class);\n+        int value = uid[0].value;\n+\n+        updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+        State stateValue = new DecimalType(uid[1].value);\n+        updateState(MODE_CHANNEL, stateValue);\n+        stateValue = new DecimalType(uid[2].value);\n+        updateState(WINDSPEED_CHANNEL, stateValue);\n+        stateValue = new DecimalType(uid[3].value);\n+        updateState(SWINGUD_CHANNEL, stateValue);\n+        int unit = (uid[4].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(TEMP_CHANNEL, stateValue);\n+        unit = (uid[5].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(RETURNTEMP_CHANNEL, stateValue);\n+        unit = (uid[12].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+\n+        JsonElement dpvalJson = IntesisHomeHttpApi.getRestrictedRequestUID6(deviceIp, sessionId, httpClient);\n+        dpval dpval = gson.fromJson(dpvalJson, dpval.class);\n+        stateValue = new DecimalType(dpval.value);\n+        updateState(SWINGLR_CHANNEL, stateValue);\n+    }\n }\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -107,71 +172,41 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n+            boolean success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n         }\n     }\n \n-    @Override\n-    public void initialize() {\n-        logger.trace(\"Start initializing!\");\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-\n-        deviceIp = config.ipAddress;\n-        password = config.password;\n-        try {\n-            httpClient.start();\n-            JsonElement deviceInfo = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n-            logger.trace(\"deviceInfo = {}\", deviceInfo);\n-\n-            info devInfo = gson.fromJson(deviceInfo, info.class);\n-            Map<String, String> properties = new HashMap<>(5);\n-            properties.put(PROPERTY_VENDOR, \"Intesis\");\n-            properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-            properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-            properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-            properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-            updateProperties(properties);\n-\n-            sessionId = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-            logger.trace(\"SessionId = {}\", sessionId);\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval, TimeUnit.SECONDS);\n-        } catch (Exception e) {\n-            // TODO Auto-generated catch block\n-        }\n-\n-        if (!sessionId.isEmpty()) {\n-            updateStatus(ThingStatus.ONLINE);\n+    public void getAllUidValues() {\n+        String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+        boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+        if (!success) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n         } else {\n-            updateStatus(ThingStatus.OFFLINE);\n+            JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+            dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+            int value = uid[0].value;\n+\n+            updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+            State stateValue = new DecimalType(uid[1].value);\n+            updateState(MODE_CHANNEL, stateValue);\n+            stateValue = new DecimalType(uid[2].value);\n+            updateState(WINDSPEED_CHANNEL, stateValue);\n+            stateValue = new DecimalType(uid[3].value);\n+            updateState(SWINGUD_CHANNEL, stateValue);\n+            int unit = (uid[4].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(TEMP_CHANNEL, stateValue);\n+            unit = (uid[5].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(RETURNTEMP_CHANNEL, stateValue);\n+            unit = (uid[12].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(OUTDOORTEMP_CHANNEL, stateValue);\n         }\n     }\n-\n-    public void getAllUidValues() {\n-        uidValueArray = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n-\n-        dpval[] uid = gson.fromJson(uidValueArray, dpval[].class);\n-        int value = uid[0].value;\n-\n-        updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-        State stateValue = new DecimalType(uid[1].value);\n-        updateState(MODE_CHANNEL, stateValue);\n-        stateValue = new DecimalType(uid[2].value);\n-        updateState(WINDSPEED_CHANNEL, stateValue);\n-        stateValue = new DecimalType(uid[3].value);\n-        updateState(SWINGUD_CHANNEL, stateValue);\n-        int unit = (uid[4].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(TEMP_CHANNEL, stateValue);\n-        unit = (uid[5].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(RETURNTEMP_CHANNEL, stateValue);\n-        unit = (uid[12].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(OUTDOORTEMP_CHANNEL, stateValue);\n-\n-        JsonElement dpvalJson = IntesisHomeHttpApi.getRestrictedRequestUID6(deviceIp, sessionId, httpClient);\n-        dpval dpval = gson.fromJson(dpvalJson, dpval.class);\n-        stateValue = new DecimalType(dpval.value);\n-        updateState(SWINGLR_CHANNEL, stateValue);\n-    }\n }\n", "next_change": {"commit": "ac4504b2317bb3f57bdaf584cc5aaf856dcc9fbe", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..520d69c519 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -182,31 +196,42 @@ public class IntesisHomeHandler extends BaseThingHandler {\n     }\n \n     public void getAllUidValues() {\n-        String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n-        boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-        if (!success) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        if (thing.getStatus() != ThingStatus.ONLINE) {\n+            String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                sessionId = auth.sessionID;\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n         } else {\n-            JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-            dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-            int value = uid[0].value;\n-\n-            updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-            State stateValue = new DecimalType(uid[1].value);\n-            updateState(MODE_CHANNEL, stateValue);\n-            stateValue = new DecimalType(uid[2].value);\n-            updateState(WINDSPEED_CHANNEL, stateValue);\n-            stateValue = new DecimalType(uid[3].value);\n-            updateState(SWINGUD_CHANNEL, stateValue);\n-            int unit = (uid[4].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(TEMP_CHANNEL, stateValue);\n-            unit = (uid[5].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(RETURNTEMP_CHANNEL, stateValue);\n-            unit = (uid[12].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+            String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+                int value = uid[0].value;\n+\n+                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                State stateValue = new DecimalType(uid[1].value);\n+                updateState(MODE_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[2].value);\n+                updateState(WINDSPEED_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[3].value);\n+                updateState(SWINGUD_CHANNEL, stateValue);\n+                int unit = (uid[4].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(TEMP_CHANNEL, stateValue);\n+                unit = (uid[5].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(RETURNTEMP_CHANNEL, stateValue);\n+                unit = (uid[12].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+            }\n         }\n     }\n }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 520d69c519..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -172,65 +192,90 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            boolean success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n-            if (!success) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-                success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                    success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                    if (response != null) {\n+                        success = IntesisHomeJSonDTO.getSuccess(response);\n+                        if (success) {\n+                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                            sessionId = auth.sessionID;\n+                            updateStatus(ThingStatus.ONLINE);\n+                            response = api.postRequest(ipAddress, contentString);\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n                 } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    updateStatus(ThingStatus.ONLINE);\n                 }\n-            } else {\n-                updateStatus(ThingStatus.ONLINE);\n+\n             }\n         }\n     }\n \n+    /**\n+     * Update device status and all channels\n+     */\n     public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device for actual status\");\n         if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-            if (success) {\n-                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                sessionId = auth.sessionID;\n-                updateStatus(ThingStatus.ONLINE);\n+            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                    + \"\\\"}}\";\n+\n+            String response = api.postRequest(ipAddress, sessionString);\n+            if (response != null) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n             }\n-        } else {\n-            String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+        }\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n             boolean success = IntesisHomeJSonDTO.getSuccess(response);\n             if (!success) {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             } else {\n                 JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n                 dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                int value = uid[0].value;\n-\n-                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                State stateValue = new DecimalType(uid[1].value);\n-                updateState(MODE_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[2].value);\n-                updateState(WINDSPEED_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[3].value);\n-                updateState(SWINGUD_CHANNEL, stateValue);\n-                int unit = (uid[4].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(TEMP_CHANNEL, stateValue);\n-                unit = (uid[5].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(RETURNTEMP_CHANNEL, stateValue);\n-                unit = (uid[12].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                if (uid.length >= 12) {\n+                    int value = uid[0].value;\n+                    updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                    State stateValue = new DecimalType(uid[1].value);\n+                    updateState(MODE_CHANNEL, stateValue);\n+                    stateValue = new DecimalType(uid[2].value);\n+                    updateState(WINDSPEED_CHANNEL, stateValue);\n+                    stateValue = new DecimalType(uid[3].value);\n+                    updateState(SWINGUD_CHANNEL, stateValue);\n+                    int unit = Math.round((uid[4].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(TEMP_CHANNEL, stateValue);\n+                    unit = Math.round((uid[5].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(AMBIENTTEMP_CHANNEL, stateValue);\n+                    unit = Math.round((uid[12].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                }\n             }\n         }\n     }\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -230,53 +396,171 @@ public class IntesisHomeHandler extends BaseThingHandler {\n      * Update device status and all channels\n      */\n     public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device for actual status\");\n-        if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                    + \"\\\"}}\";\n-\n-            String response = api.postRequest(ipAddress, sessionString);\n-            if (response != null) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            }\n-        }\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n         String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n                 + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n         if (response != null) {\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            boolean success = getSuccess(response);\n             if (!success) {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             } else {\n-                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                if (uid.length >= 12) {\n-                    int value = uid[0].value;\n-                    updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                    State stateValue = new DecimalType(uid[1].value);\n-                    updateState(MODE_CHANNEL, stateValue);\n-                    stateValue = new DecimalType(uid[2].value);\n-                    updateState(WINDSPEED_CHANNEL, stateValue);\n-                    stateValue = new DecimalType(uid[3].value);\n-                    updateState(SWINGUD_CHANNEL, stateValue);\n-                    int unit = Math.round((uid[4].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(TEMP_CHANNEL, stateValue);\n-                    unit = Math.round((uid[5].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(AMBIENTTEMP_CHANNEL, stateValue);\n-                    unit = Math.round((uid[12].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                logout();\n+                response resp = gson.fromJson(response, response.class);\n+                data data = gson.fromJson(resp.data.toString(), data.class);\n+                dpval[] dpval = gson.fromJson(data.dpval, dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            response resp = gson.fromJson(response, response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                data data = gson.fromJson(resp.data.toString(), data.class);\n+                id id = gson.fromJson(data.id.toString(), id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n                 }\n             }\n         }\n     }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        response resp = gson.fromJson(response, response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (getThing().getChannel(channelId) != null) {\n+                if (options != null) {\n+                    final List<StateOption> stateOptions = options.stream()\n+                            .map(e -> new StateOption(e.toString(),\n+                                    e instanceof String ? beautify((String) e) : e.toString()))\n+                            .collect(Collectors.toList());\n+                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n+        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n+                .withOptions(stateOptionList).build().toStateDescription();\n+        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n+    }\n+\n+    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n+        logger.debug(\"Adding state description for channel {}\", channelUID);\n+        descriptions.put(channelUID, description);\n+    }\n+\n+    @Override\n+    public @Nullable StateDescription getStateDescription(Channel channel,\n+            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n+        StateDescription description = descriptions.get(channel.getUID());\n+        return description;\n+    }\n }\n", "next_change": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -551,16 +557,4 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                 .withOptions(stateOptionList).build().toStateDescription();\n         intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n     }\n-\n-    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n-        logger.debug(\"Adding state description for channel {}\", channelUID);\n-        descriptions.put(channelUID, description);\n-    }\n-\n-    @Override\n-    public @Nullable StateDescription getStateDescription(Channel channel,\n-            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n-        StateDescription description = descriptions.get(channel.getUID());\n-        return description;\n-    }\n }\n", "next_change": {"commit": "b21bc3ddd7ac54ec9a8a1dd1c0eb088e0291c0bc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..af9e404b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -546,15 +544,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n-\n-    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n-        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n-                .withOptions(stateOptionList).build().toStateDescription();\n-        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n-    }\n }\n", "next_change": {"commit": "f2926350d73fde0aa6dbe4d6ac287bb2524d403d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex af9e404b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -544,9 +546,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n+                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n+\n+    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n+        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n+                .withOptions(stateOptionList).build().toStateDescription();\n+        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n+    }\n }\n", "next_change": {"commit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..af9e404b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -546,15 +544,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n-\n-    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n-        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n-                .withOptions(stateOptionList).build().toStateDescription();\n-        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n-    }\n }\n", "next_change": {"commit": "623adb7055714c71dbf4efc86ce64d0804311b66", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex af9e404b0c..ae486a0f96 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -544,7 +542,10 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n+                    channel = thing.getChannel(channelId);\n+                    if (channel != null) {\n+                        intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+                    }\n                 }\n             }\n         }\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ae486a0f96..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -535,17 +513,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             thingBuilder.withChannel(channel);\n             updateThing(thingBuilder.build());\n \n-            if (getThing().getChannel(channelId) != null) {\n-                if (options != null) {\n-                    final List<StateOption> stateOptions = options.stream()\n-                            .map(e -> new StateOption(e.toString(),\n-                                    e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                            .collect(Collectors.toList());\n-                    logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    channel = thing.getChannel(channelId);\n-                    if (channel != null) {\n-                        intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                    }\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e.toString(),\n+                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                channel = thing.getChannel(channelId);\n+                if (channel != null) {\n+                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n                 }\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -515,14 +526,10 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n             if (options != null) {\n                 final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e.toString(),\n-                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                         .collect(Collectors.toList());\n                 logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                channel = thing.getChannel(channelId);\n-                if (channel != null) {\n-                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                }\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n             }\n         }\n     }\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MTI2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474141265", "body": "It might be a good approach to extract this code into a method and re-use it.", "bodyText": "It might be a good approach to extract this code into a method and re-use it.", "bodyHTML": "<p dir=\"auto\">It might be a good approach to extract this code into a method and re-use it.</p>", "author": "fwolter", "createdAt": "2020-08-20T17:03:34Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.\n+        } else {\n+            switch (channelId) {\n+                case POWER_CHANNEL:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case MODE_CHANNEL:\n+                    uid = 2;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case WINDSPEED_CHANNEL:\n+                    uid = 4;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGUD_CHANNEL:\n+                    uid = 5;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGLR_CHANNEL:\n+                    uid = 6;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case TEMP_CHANNEL:\n+                    uid = 9;\n+                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                    if (response != null && !response.isEmpty()) {\n+                        success = IntesisHomeJSonDTO.getSuccess(response);\n+                        if (success) {\n+                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                            sessionId = auth.sessionID;\n+                            updateStatus(ThingStatus.ONLINE);\n+                            response = api.postRequest(ipAddress, contentString);\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device for actuall status\");\n+        if (thing.getStatus() != ThingStatus.ONLINE) {\n+            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, sessionString);\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2NjcyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474466727", "bodyText": "Don't see the real benefit.", "author": "hmerk", "createdAt": "2020-08-21T07:26:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MTI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -188,89 +107,71 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null && !response.isEmpty()) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                            + password + \"\\\"}}\";\n-                    response = api.postRequest(ipAddress, sessionString);\n-                    if (response != null && !response.isEmpty()) {\n-                        success = IntesisHomeJSonDTO.getSuccess(response);\n-                        if (success) {\n-                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                            sessionId = auth.sessionID;\n-                            updateStatus(ThingStatus.ONLINE);\n-                            response = api.postRequest(ipAddress, contentString);\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            }\n-                        } else {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-\n-            }\n+            IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n         }\n     }\n \n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device for actuall status\");\n-        if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, sessionString);\n-            if (response != null && !response.isEmpty()) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            }\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            JsonElement deviceInfo = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            logger.trace(\"deviceInfo = {}\", deviceInfo);\n+\n+            info devInfo = gson.fromJson(deviceInfo, info.class);\n+            Map<String, String> properties = new HashMap<>(5);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+            updateProperties(properties);\n+\n+            sessionId = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+            logger.trace(\"SessionId = {}\", sessionId);\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval, TimeUnit.SECONDS);\n+        } catch (Exception e) {\n+            // TODO Auto-generated catch block\n         }\n-        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-        if (response != null && !response.isEmpty()) {\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-            if (!success) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            } else {\n-                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                int value = uid[0].value;\n \n-                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                State stateValue = new DecimalType(uid[1].value);\n-                updateState(MODE_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[2].value);\n-                updateState(WINDSPEED_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[3].value);\n-                updateState(SWINGUD_CHANNEL, stateValue);\n-                int unit = (uid[4].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(TEMP_CHANNEL, stateValue);\n-                unit = (uid[5].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(RETURNTEMP_CHANNEL, stateValue);\n-                unit = (uid[12].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n-            }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE);\n         }\n     }\n+\n+    public void getAllUidValues() {\n+        uidValueArray = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+\n+        dpval[] uid = gson.fromJson(uidValueArray, dpval[].class);\n+        int value = uid[0].value;\n+\n+        updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+        State stateValue = new DecimalType(uid[1].value);\n+        updateState(MODE_CHANNEL, stateValue);\n+        stateValue = new DecimalType(uid[2].value);\n+        updateState(WINDSPEED_CHANNEL, stateValue);\n+        stateValue = new DecimalType(uid[3].value);\n+        updateState(SWINGUD_CHANNEL, stateValue);\n+        int unit = (uid[4].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(TEMP_CHANNEL, stateValue);\n+        unit = (uid[5].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(RETURNTEMP_CHANNEL, stateValue);\n+        unit = (uid[12].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+\n+        JsonElement dpvalJson = IntesisHomeHttpApi.getRestrictedRequestUID6(deviceIp, sessionId, httpClient);\n+        dpval dpval = gson.fromJson(dpvalJson, dpval.class);\n+        stateValue = new DecimalType(dpval.value);\n+        updateState(SWINGLR_CHANNEL, stateValue);\n+    }\n }\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -107,71 +172,41 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n+            boolean success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n         }\n     }\n \n-    @Override\n-    public void initialize() {\n-        logger.trace(\"Start initializing!\");\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-\n-        deviceIp = config.ipAddress;\n-        password = config.password;\n-        try {\n-            httpClient.start();\n-            JsonElement deviceInfo = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n-            logger.trace(\"deviceInfo = {}\", deviceInfo);\n-\n-            info devInfo = gson.fromJson(deviceInfo, info.class);\n-            Map<String, String> properties = new HashMap<>(5);\n-            properties.put(PROPERTY_VENDOR, \"Intesis\");\n-            properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-            properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-            properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-            properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-            updateProperties(properties);\n-\n-            sessionId = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-            logger.trace(\"SessionId = {}\", sessionId);\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval, TimeUnit.SECONDS);\n-        } catch (Exception e) {\n-            // TODO Auto-generated catch block\n-        }\n-\n-        if (!sessionId.isEmpty()) {\n-            updateStatus(ThingStatus.ONLINE);\n+    public void getAllUidValues() {\n+        String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+        boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+        if (!success) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n         } else {\n-            updateStatus(ThingStatus.OFFLINE);\n+            JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+            dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+            int value = uid[0].value;\n+\n+            updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+            State stateValue = new DecimalType(uid[1].value);\n+            updateState(MODE_CHANNEL, stateValue);\n+            stateValue = new DecimalType(uid[2].value);\n+            updateState(WINDSPEED_CHANNEL, stateValue);\n+            stateValue = new DecimalType(uid[3].value);\n+            updateState(SWINGUD_CHANNEL, stateValue);\n+            int unit = (uid[4].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(TEMP_CHANNEL, stateValue);\n+            unit = (uid[5].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(RETURNTEMP_CHANNEL, stateValue);\n+            unit = (uid[12].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(OUTDOORTEMP_CHANNEL, stateValue);\n         }\n     }\n-\n-    public void getAllUidValues() {\n-        uidValueArray = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n-\n-        dpval[] uid = gson.fromJson(uidValueArray, dpval[].class);\n-        int value = uid[0].value;\n-\n-        updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-        State stateValue = new DecimalType(uid[1].value);\n-        updateState(MODE_CHANNEL, stateValue);\n-        stateValue = new DecimalType(uid[2].value);\n-        updateState(WINDSPEED_CHANNEL, stateValue);\n-        stateValue = new DecimalType(uid[3].value);\n-        updateState(SWINGUD_CHANNEL, stateValue);\n-        int unit = (uid[4].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(TEMP_CHANNEL, stateValue);\n-        unit = (uid[5].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(RETURNTEMP_CHANNEL, stateValue);\n-        unit = (uid[12].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(OUTDOORTEMP_CHANNEL, stateValue);\n-\n-        JsonElement dpvalJson = IntesisHomeHttpApi.getRestrictedRequestUID6(deviceIp, sessionId, httpClient);\n-        dpval dpval = gson.fromJson(dpvalJson, dpval.class);\n-        stateValue = new DecimalType(dpval.value);\n-        updateState(SWINGLR_CHANNEL, stateValue);\n-    }\n }\n", "next_change": {"commit": "ac4504b2317bb3f57bdaf584cc5aaf856dcc9fbe", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..520d69c519 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -182,31 +196,42 @@ public class IntesisHomeHandler extends BaseThingHandler {\n     }\n \n     public void getAllUidValues() {\n-        String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n-        boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-        if (!success) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        if (thing.getStatus() != ThingStatus.ONLINE) {\n+            String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                sessionId = auth.sessionID;\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n         } else {\n-            JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-            dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-            int value = uid[0].value;\n-\n-            updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-            State stateValue = new DecimalType(uid[1].value);\n-            updateState(MODE_CHANNEL, stateValue);\n-            stateValue = new DecimalType(uid[2].value);\n-            updateState(WINDSPEED_CHANNEL, stateValue);\n-            stateValue = new DecimalType(uid[3].value);\n-            updateState(SWINGUD_CHANNEL, stateValue);\n-            int unit = (uid[4].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(TEMP_CHANNEL, stateValue);\n-            unit = (uid[5].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(RETURNTEMP_CHANNEL, stateValue);\n-            unit = (uid[12].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+            String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+                int value = uid[0].value;\n+\n+                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                State stateValue = new DecimalType(uid[1].value);\n+                updateState(MODE_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[2].value);\n+                updateState(WINDSPEED_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[3].value);\n+                updateState(SWINGUD_CHANNEL, stateValue);\n+                int unit = (uid[4].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(TEMP_CHANNEL, stateValue);\n+                unit = (uid[5].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(RETURNTEMP_CHANNEL, stateValue);\n+                unit = (uid[12].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+            }\n         }\n     }\n }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 520d69c519..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -172,65 +192,90 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            boolean success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n-            if (!success) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-                success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                    success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                    if (response != null) {\n+                        success = IntesisHomeJSonDTO.getSuccess(response);\n+                        if (success) {\n+                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                            sessionId = auth.sessionID;\n+                            updateStatus(ThingStatus.ONLINE);\n+                            response = api.postRequest(ipAddress, contentString);\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n                 } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    updateStatus(ThingStatus.ONLINE);\n                 }\n-            } else {\n-                updateStatus(ThingStatus.ONLINE);\n+\n             }\n         }\n     }\n \n+    /**\n+     * Update device status and all channels\n+     */\n     public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device for actual status\");\n         if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-            if (success) {\n-                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                sessionId = auth.sessionID;\n-                updateStatus(ThingStatus.ONLINE);\n+            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                    + \"\\\"}}\";\n+\n+            String response = api.postRequest(ipAddress, sessionString);\n+            if (response != null) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n             }\n-        } else {\n-            String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+        }\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n             boolean success = IntesisHomeJSonDTO.getSuccess(response);\n             if (!success) {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             } else {\n                 JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n                 dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                int value = uid[0].value;\n-\n-                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                State stateValue = new DecimalType(uid[1].value);\n-                updateState(MODE_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[2].value);\n-                updateState(WINDSPEED_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[3].value);\n-                updateState(SWINGUD_CHANNEL, stateValue);\n-                int unit = (uid[4].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(TEMP_CHANNEL, stateValue);\n-                unit = (uid[5].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(RETURNTEMP_CHANNEL, stateValue);\n-                unit = (uid[12].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                if (uid.length >= 12) {\n+                    int value = uid[0].value;\n+                    updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                    State stateValue = new DecimalType(uid[1].value);\n+                    updateState(MODE_CHANNEL, stateValue);\n+                    stateValue = new DecimalType(uid[2].value);\n+                    updateState(WINDSPEED_CHANNEL, stateValue);\n+                    stateValue = new DecimalType(uid[3].value);\n+                    updateState(SWINGUD_CHANNEL, stateValue);\n+                    int unit = Math.round((uid[4].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(TEMP_CHANNEL, stateValue);\n+                    unit = Math.round((uid[5].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(AMBIENTTEMP_CHANNEL, stateValue);\n+                    unit = Math.round((uid[12].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                }\n             }\n         }\n     }\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -230,53 +396,171 @@ public class IntesisHomeHandler extends BaseThingHandler {\n      * Update device status and all channels\n      */\n     public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device for actual status\");\n-        if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                    + \"\\\"}}\";\n-\n-            String response = api.postRequest(ipAddress, sessionString);\n-            if (response != null) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            }\n-        }\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n         String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n                 + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n         if (response != null) {\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            boolean success = getSuccess(response);\n             if (!success) {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             } else {\n-                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                if (uid.length >= 12) {\n-                    int value = uid[0].value;\n-                    updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                    State stateValue = new DecimalType(uid[1].value);\n-                    updateState(MODE_CHANNEL, stateValue);\n-                    stateValue = new DecimalType(uid[2].value);\n-                    updateState(WINDSPEED_CHANNEL, stateValue);\n-                    stateValue = new DecimalType(uid[3].value);\n-                    updateState(SWINGUD_CHANNEL, stateValue);\n-                    int unit = Math.round((uid[4].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(TEMP_CHANNEL, stateValue);\n-                    unit = Math.round((uid[5].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(AMBIENTTEMP_CHANNEL, stateValue);\n-                    unit = Math.round((uid[12].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                logout();\n+                response resp = gson.fromJson(response, response.class);\n+                data data = gson.fromJson(resp.data.toString(), data.class);\n+                dpval[] dpval = gson.fromJson(data.dpval, dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            response resp = gson.fromJson(response, response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                data data = gson.fromJson(resp.data.toString(), data.class);\n+                id id = gson.fromJson(data.id.toString(), id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n                 }\n             }\n         }\n     }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        response resp = gson.fromJson(response, response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (getThing().getChannel(channelId) != null) {\n+                if (options != null) {\n+                    final List<StateOption> stateOptions = options.stream()\n+                            .map(e -> new StateOption(e.toString(),\n+                                    e instanceof String ? beautify((String) e) : e.toString()))\n+                            .collect(Collectors.toList());\n+                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n+        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n+                .withOptions(stateOptionList).build().toStateDescription();\n+        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n+    }\n+\n+    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n+        logger.debug(\"Adding state description for channel {}\", channelUID);\n+        descriptions.put(channelUID, description);\n+    }\n+\n+    @Override\n+    public @Nullable StateDescription getStateDescription(Channel channel,\n+            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n+        StateDescription description = descriptions.get(channel.getUID());\n+        return description;\n+    }\n }\n", "next_change": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -551,16 +557,4 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                 .withOptions(stateOptionList).build().toStateDescription();\n         intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n     }\n-\n-    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n-        logger.debug(\"Adding state description for channel {}\", channelUID);\n-        descriptions.put(channelUID, description);\n-    }\n-\n-    @Override\n-    public @Nullable StateDescription getStateDescription(Channel channel,\n-            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n-        StateDescription description = descriptions.get(channel.getUID());\n-        return description;\n-    }\n }\n", "next_change": {"commit": "b21bc3ddd7ac54ec9a8a1dd1c0eb088e0291c0bc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..af9e404b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -546,15 +544,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n-\n-    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n-        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n-                .withOptions(stateOptionList).build().toStateDescription();\n-        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n-    }\n }\n", "next_change": {"commit": "f2926350d73fde0aa6dbe4d6ac287bb2524d403d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex af9e404b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -544,9 +546,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n+                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n+\n+    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n+        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n+                .withOptions(stateOptionList).build().toStateDescription();\n+        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n+    }\n }\n", "next_change": {"commit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..af9e404b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -546,15 +544,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n-\n-    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n-        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n-                .withOptions(stateOptionList).build().toStateDescription();\n-        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n-    }\n }\n", "next_change": {"commit": "623adb7055714c71dbf4efc86ce64d0804311b66", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex af9e404b0c..ae486a0f96 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -544,7 +542,10 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n+                    channel = thing.getChannel(channelId);\n+                    if (channel != null) {\n+                        intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+                    }\n                 }\n             }\n         }\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ae486a0f96..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -535,17 +513,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             thingBuilder.withChannel(channel);\n             updateThing(thingBuilder.build());\n \n-            if (getThing().getChannel(channelId) != null) {\n-                if (options != null) {\n-                    final List<StateOption> stateOptions = options.stream()\n-                            .map(e -> new StateOption(e.toString(),\n-                                    e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                            .collect(Collectors.toList());\n-                    logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    channel = thing.getChannel(channelId);\n-                    if (channel != null) {\n-                        intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                    }\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e.toString(),\n+                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                channel = thing.getChannel(channelId);\n+                if (channel != null) {\n+                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n                 }\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -515,14 +526,10 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n             if (options != null) {\n                 final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e.toString(),\n-                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                         .collect(Collectors.toList());\n                 logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                channel = thing.getChannel(channelId);\n-                if (channel != null) {\n-                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                }\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n             }\n         }\n     }\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MTc2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474141761", "body": "Better check if the array has the length you expect.", "bodyText": "Better check if the array has the length you expect.", "bodyHTML": "<p dir=\"auto\">Better check if the array has the length you expect.</p>", "author": "fwolter", "createdAt": "2020-08-20T17:04:32Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.\n+        } else {\n+            switch (channelId) {\n+                case POWER_CHANNEL:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case MODE_CHANNEL:\n+                    uid = 2;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case WINDSPEED_CHANNEL:\n+                    uid = 4;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGUD_CHANNEL:\n+                    uid = 5;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGLR_CHANNEL:\n+                    uid = 6;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case TEMP_CHANNEL:\n+                    uid = 9;\n+                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                    if (response != null && !response.isEmpty()) {\n+                        success = IntesisHomeJSonDTO.getSuccess(response);\n+                        if (success) {\n+                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                            sessionId = auth.sessionID;\n+                            updateStatus(ThingStatus.ONLINE);\n+                            response = api.postRequest(ipAddress, contentString);\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device for actuall status\");\n+        if (thing.getStatus() != ThingStatus.ONLINE) {\n+            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, sessionString);\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null && !response.isEmpty()) {\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+                int value = uid[0].value;", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ3NTAxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474475019", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T07:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MTc2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -188,89 +107,71 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null && !response.isEmpty()) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                            + password + \"\\\"}}\";\n-                    response = api.postRequest(ipAddress, sessionString);\n-                    if (response != null && !response.isEmpty()) {\n-                        success = IntesisHomeJSonDTO.getSuccess(response);\n-                        if (success) {\n-                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                            sessionId = auth.sessionID;\n-                            updateStatus(ThingStatus.ONLINE);\n-                            response = api.postRequest(ipAddress, contentString);\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            }\n-                        } else {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-\n-            }\n+            IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n         }\n     }\n \n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device for actuall status\");\n-        if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, sessionString);\n-            if (response != null && !response.isEmpty()) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            }\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            JsonElement deviceInfo = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            logger.trace(\"deviceInfo = {}\", deviceInfo);\n+\n+            info devInfo = gson.fromJson(deviceInfo, info.class);\n+            Map<String, String> properties = new HashMap<>(5);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+            updateProperties(properties);\n+\n+            sessionId = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+            logger.trace(\"SessionId = {}\", sessionId);\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval, TimeUnit.SECONDS);\n+        } catch (Exception e) {\n+            // TODO Auto-generated catch block\n         }\n-        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-        if (response != null && !response.isEmpty()) {\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-            if (!success) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            } else {\n-                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                int value = uid[0].value;\n \n-                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                State stateValue = new DecimalType(uid[1].value);\n-                updateState(MODE_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[2].value);\n-                updateState(WINDSPEED_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[3].value);\n-                updateState(SWINGUD_CHANNEL, stateValue);\n-                int unit = (uid[4].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(TEMP_CHANNEL, stateValue);\n-                unit = (uid[5].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(RETURNTEMP_CHANNEL, stateValue);\n-                unit = (uid[12].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n-            }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE);\n         }\n     }\n+\n+    public void getAllUidValues() {\n+        uidValueArray = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+\n+        dpval[] uid = gson.fromJson(uidValueArray, dpval[].class);\n+        int value = uid[0].value;\n+\n+        updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+        State stateValue = new DecimalType(uid[1].value);\n+        updateState(MODE_CHANNEL, stateValue);\n+        stateValue = new DecimalType(uid[2].value);\n+        updateState(WINDSPEED_CHANNEL, stateValue);\n+        stateValue = new DecimalType(uid[3].value);\n+        updateState(SWINGUD_CHANNEL, stateValue);\n+        int unit = (uid[4].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(TEMP_CHANNEL, stateValue);\n+        unit = (uid[5].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(RETURNTEMP_CHANNEL, stateValue);\n+        unit = (uid[12].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+\n+        JsonElement dpvalJson = IntesisHomeHttpApi.getRestrictedRequestUID6(deviceIp, sessionId, httpClient);\n+        dpval dpval = gson.fromJson(dpvalJson, dpval.class);\n+        stateValue = new DecimalType(dpval.value);\n+        updateState(SWINGLR_CHANNEL, stateValue);\n+    }\n }\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -107,71 +172,41 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n+            boolean success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n         }\n     }\n \n-    @Override\n-    public void initialize() {\n-        logger.trace(\"Start initializing!\");\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-\n-        deviceIp = config.ipAddress;\n-        password = config.password;\n-        try {\n-            httpClient.start();\n-            JsonElement deviceInfo = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n-            logger.trace(\"deviceInfo = {}\", deviceInfo);\n-\n-            info devInfo = gson.fromJson(deviceInfo, info.class);\n-            Map<String, String> properties = new HashMap<>(5);\n-            properties.put(PROPERTY_VENDOR, \"Intesis\");\n-            properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-            properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-            properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-            properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-            updateProperties(properties);\n-\n-            sessionId = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-            logger.trace(\"SessionId = {}\", sessionId);\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval, TimeUnit.SECONDS);\n-        } catch (Exception e) {\n-            // TODO Auto-generated catch block\n-        }\n-\n-        if (!sessionId.isEmpty()) {\n-            updateStatus(ThingStatus.ONLINE);\n+    public void getAllUidValues() {\n+        String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+        boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+        if (!success) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n         } else {\n-            updateStatus(ThingStatus.OFFLINE);\n+            JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+            dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+            int value = uid[0].value;\n+\n+            updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+            State stateValue = new DecimalType(uid[1].value);\n+            updateState(MODE_CHANNEL, stateValue);\n+            stateValue = new DecimalType(uid[2].value);\n+            updateState(WINDSPEED_CHANNEL, stateValue);\n+            stateValue = new DecimalType(uid[3].value);\n+            updateState(SWINGUD_CHANNEL, stateValue);\n+            int unit = (uid[4].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(TEMP_CHANNEL, stateValue);\n+            unit = (uid[5].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(RETURNTEMP_CHANNEL, stateValue);\n+            unit = (uid[12].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(OUTDOORTEMP_CHANNEL, stateValue);\n         }\n     }\n-\n-    public void getAllUidValues() {\n-        uidValueArray = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n-\n-        dpval[] uid = gson.fromJson(uidValueArray, dpval[].class);\n-        int value = uid[0].value;\n-\n-        updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-        State stateValue = new DecimalType(uid[1].value);\n-        updateState(MODE_CHANNEL, stateValue);\n-        stateValue = new DecimalType(uid[2].value);\n-        updateState(WINDSPEED_CHANNEL, stateValue);\n-        stateValue = new DecimalType(uid[3].value);\n-        updateState(SWINGUD_CHANNEL, stateValue);\n-        int unit = (uid[4].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(TEMP_CHANNEL, stateValue);\n-        unit = (uid[5].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(RETURNTEMP_CHANNEL, stateValue);\n-        unit = (uid[12].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(OUTDOORTEMP_CHANNEL, stateValue);\n-\n-        JsonElement dpvalJson = IntesisHomeHttpApi.getRestrictedRequestUID6(deviceIp, sessionId, httpClient);\n-        dpval dpval = gson.fromJson(dpvalJson, dpval.class);\n-        stateValue = new DecimalType(dpval.value);\n-        updateState(SWINGLR_CHANNEL, stateValue);\n-    }\n }\n", "next_change": {"commit": "ac4504b2317bb3f57bdaf584cc5aaf856dcc9fbe", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..520d69c519 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -182,31 +196,42 @@ public class IntesisHomeHandler extends BaseThingHandler {\n     }\n \n     public void getAllUidValues() {\n-        String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n-        boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-        if (!success) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        if (thing.getStatus() != ThingStatus.ONLINE) {\n+            String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                sessionId = auth.sessionID;\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n         } else {\n-            JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-            dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-            int value = uid[0].value;\n-\n-            updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-            State stateValue = new DecimalType(uid[1].value);\n-            updateState(MODE_CHANNEL, stateValue);\n-            stateValue = new DecimalType(uid[2].value);\n-            updateState(WINDSPEED_CHANNEL, stateValue);\n-            stateValue = new DecimalType(uid[3].value);\n-            updateState(SWINGUD_CHANNEL, stateValue);\n-            int unit = (uid[4].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(TEMP_CHANNEL, stateValue);\n-            unit = (uid[5].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(RETURNTEMP_CHANNEL, stateValue);\n-            unit = (uid[12].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+            String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+                int value = uid[0].value;\n+\n+                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                State stateValue = new DecimalType(uid[1].value);\n+                updateState(MODE_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[2].value);\n+                updateState(WINDSPEED_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[3].value);\n+                updateState(SWINGUD_CHANNEL, stateValue);\n+                int unit = (uid[4].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(TEMP_CHANNEL, stateValue);\n+                unit = (uid[5].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(RETURNTEMP_CHANNEL, stateValue);\n+                unit = (uid[12].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+            }\n         }\n     }\n }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 520d69c519..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -172,65 +192,90 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            boolean success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n-            if (!success) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-                success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                    success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                    if (response != null) {\n+                        success = IntesisHomeJSonDTO.getSuccess(response);\n+                        if (success) {\n+                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                            sessionId = auth.sessionID;\n+                            updateStatus(ThingStatus.ONLINE);\n+                            response = api.postRequest(ipAddress, contentString);\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n                 } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    updateStatus(ThingStatus.ONLINE);\n                 }\n-            } else {\n-                updateStatus(ThingStatus.ONLINE);\n+\n             }\n         }\n     }\n \n+    /**\n+     * Update device status and all channels\n+     */\n     public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device for actual status\");\n         if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-            if (success) {\n-                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                sessionId = auth.sessionID;\n-                updateStatus(ThingStatus.ONLINE);\n+            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                    + \"\\\"}}\";\n+\n+            String response = api.postRequest(ipAddress, sessionString);\n+            if (response != null) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n             }\n-        } else {\n-            String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+        }\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n             boolean success = IntesisHomeJSonDTO.getSuccess(response);\n             if (!success) {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             } else {\n                 JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n                 dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                int value = uid[0].value;\n-\n-                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                State stateValue = new DecimalType(uid[1].value);\n-                updateState(MODE_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[2].value);\n-                updateState(WINDSPEED_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[3].value);\n-                updateState(SWINGUD_CHANNEL, stateValue);\n-                int unit = (uid[4].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(TEMP_CHANNEL, stateValue);\n-                unit = (uid[5].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(RETURNTEMP_CHANNEL, stateValue);\n-                unit = (uid[12].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                if (uid.length >= 12) {\n+                    int value = uid[0].value;\n+                    updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                    State stateValue = new DecimalType(uid[1].value);\n+                    updateState(MODE_CHANNEL, stateValue);\n+                    stateValue = new DecimalType(uid[2].value);\n+                    updateState(WINDSPEED_CHANNEL, stateValue);\n+                    stateValue = new DecimalType(uid[3].value);\n+                    updateState(SWINGUD_CHANNEL, stateValue);\n+                    int unit = Math.round((uid[4].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(TEMP_CHANNEL, stateValue);\n+                    unit = Math.round((uid[5].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(AMBIENTTEMP_CHANNEL, stateValue);\n+                    unit = Math.round((uid[12].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                }\n             }\n         }\n     }\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -230,53 +396,171 @@ public class IntesisHomeHandler extends BaseThingHandler {\n      * Update device status and all channels\n      */\n     public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device for actual status\");\n-        if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                    + \"\\\"}}\";\n-\n-            String response = api.postRequest(ipAddress, sessionString);\n-            if (response != null) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            }\n-        }\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n         String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n                 + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n         if (response != null) {\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            boolean success = getSuccess(response);\n             if (!success) {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             } else {\n-                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                if (uid.length >= 12) {\n-                    int value = uid[0].value;\n-                    updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                    State stateValue = new DecimalType(uid[1].value);\n-                    updateState(MODE_CHANNEL, stateValue);\n-                    stateValue = new DecimalType(uid[2].value);\n-                    updateState(WINDSPEED_CHANNEL, stateValue);\n-                    stateValue = new DecimalType(uid[3].value);\n-                    updateState(SWINGUD_CHANNEL, stateValue);\n-                    int unit = Math.round((uid[4].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(TEMP_CHANNEL, stateValue);\n-                    unit = Math.round((uid[5].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(AMBIENTTEMP_CHANNEL, stateValue);\n-                    unit = Math.round((uid[12].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                logout();\n+                response resp = gson.fromJson(response, response.class);\n+                data data = gson.fromJson(resp.data.toString(), data.class);\n+                dpval[] dpval = gson.fromJson(data.dpval, dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            response resp = gson.fromJson(response, response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                data data = gson.fromJson(resp.data.toString(), data.class);\n+                id id = gson.fromJson(data.id.toString(), id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n                 }\n             }\n         }\n     }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        response resp = gson.fromJson(response, response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (getThing().getChannel(channelId) != null) {\n+                if (options != null) {\n+                    final List<StateOption> stateOptions = options.stream()\n+                            .map(e -> new StateOption(e.toString(),\n+                                    e instanceof String ? beautify((String) e) : e.toString()))\n+                            .collect(Collectors.toList());\n+                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n+        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n+                .withOptions(stateOptionList).build().toStateDescription();\n+        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n+    }\n+\n+    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n+        logger.debug(\"Adding state description for channel {}\", channelUID);\n+        descriptions.put(channelUID, description);\n+    }\n+\n+    @Override\n+    public @Nullable StateDescription getStateDescription(Channel channel,\n+            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n+        StateDescription description = descriptions.get(channel.getUID());\n+        return description;\n+    }\n }\n", "next_change": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -551,16 +557,4 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                 .withOptions(stateOptionList).build().toStateDescription();\n         intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n     }\n-\n-    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n-        logger.debug(\"Adding state description for channel {}\", channelUID);\n-        descriptions.put(channelUID, description);\n-    }\n-\n-    @Override\n-    public @Nullable StateDescription getStateDescription(Channel channel,\n-            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n-        StateDescription description = descriptions.get(channel.getUID());\n-        return description;\n-    }\n }\n", "next_change": {"commit": "b21bc3ddd7ac54ec9a8a1dd1c0eb088e0291c0bc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..af9e404b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -546,15 +544,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n-\n-    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n-        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n-                .withOptions(stateOptionList).build().toStateDescription();\n-        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n-    }\n }\n", "next_change": {"commit": "f2926350d73fde0aa6dbe4d6ac287bb2524d403d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex af9e404b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -544,9 +546,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n+                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n+\n+    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n+        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n+                .withOptions(stateOptionList).build().toStateDescription();\n+        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n+    }\n }\n", "next_change": {"commit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..af9e404b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -546,15 +544,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n-\n-    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n-        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n-                .withOptions(stateOptionList).build().toStateDescription();\n-        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n-    }\n }\n", "next_change": {"commit": "623adb7055714c71dbf4efc86ce64d0804311b66", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex af9e404b0c..ae486a0f96 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -544,7 +542,10 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n+                    channel = thing.getChannel(channelId);\n+                    if (channel != null) {\n+                        intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+                    }\n                 }\n             }\n         }\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ae486a0f96..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -535,17 +513,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             thingBuilder.withChannel(channel);\n             updateThing(thingBuilder.build());\n \n-            if (getThing().getChannel(channelId) != null) {\n-                if (options != null) {\n-                    final List<StateOption> stateOptions = options.stream()\n-                            .map(e -> new StateOption(e.toString(),\n-                                    e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                            .collect(Collectors.toList());\n-                    logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    channel = thing.getChannel(channelId);\n-                    if (channel != null) {\n-                        intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                    }\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e.toString(),\n+                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                channel = thing.getChannel(channelId);\n+                if (channel != null) {\n+                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n                 }\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -515,14 +526,10 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n             if (options != null) {\n                 final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e.toString(),\n-                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                         .collect(Collectors.toList());\n                 logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                channel = thing.getChannel(channelId);\n-                if (channel != null) {\n-                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                }\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n             }\n         }\n     }\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0Mjg0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474142843", "body": "If I see correctly, the positions after the decimal point will be truncated. If this is intended, better use `Math.round()`, as integer division will always rounding down.", "bodyText": "If I see correctly, the positions after the decimal point will be truncated. If this is intended, better use Math.round(), as integer division will always rounding down.", "bodyHTML": "<p dir=\"auto\">If I see correctly, the positions after the decimal point will be truncated. If this is intended, better use <code>Math.round()</code>, as integer division will always rounding down.</p>", "author": "fwolter", "createdAt": "2020-08-20T17:06:35Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.\n+        } else {\n+            switch (channelId) {\n+                case POWER_CHANNEL:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case MODE_CHANNEL:\n+                    uid = 2;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case WINDSPEED_CHANNEL:\n+                    uid = 4;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGUD_CHANNEL:\n+                    uid = 5;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGLR_CHANNEL:\n+                    uid = 6;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case TEMP_CHANNEL:\n+                    uid = 9;\n+                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                    if (response != null && !response.isEmpty()) {\n+                        success = IntesisHomeJSonDTO.getSuccess(response);\n+                        if (success) {\n+                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                            sessionId = auth.sessionID;\n+                            updateStatus(ThingStatus.ONLINE);\n+                            response = api.postRequest(ipAddress, contentString);\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device for actuall status\");\n+        if (thing.getStatus() != ThingStatus.ONLINE) {\n+            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, sessionString);\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null && !response.isEmpty()) {\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+                int value = uid[0].value;\n+\n+                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                State stateValue = new DecimalType(uid[1].value);\n+                updateState(MODE_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[2].value);\n+                updateState(WINDSPEED_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[3].value);\n+                updateState(SWINGUD_CHANNEL, stateValue);\n+                int unit = (uid[4].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ3ODAxOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474478018", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T07:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0Mjg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 2abb0e43fa..c5b01cea62 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -188,89 +107,71 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null && !response.isEmpty()) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                            + password + \"\\\"}}\";\n-                    response = api.postRequest(ipAddress, sessionString);\n-                    if (response != null && !response.isEmpty()) {\n-                        success = IntesisHomeJSonDTO.getSuccess(response);\n-                        if (success) {\n-                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                            sessionId = auth.sessionID;\n-                            updateStatus(ThingStatus.ONLINE);\n-                            response = api.postRequest(ipAddress, contentString);\n-                            success = IntesisHomeJSonDTO.getSuccess(response);\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            }\n-                        } else {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-\n-            }\n+            IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n         }\n     }\n \n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device for actuall status\");\n-        if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, sessionString);\n-            if (response != null && !response.isEmpty()) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            }\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();\n+            JsonElement deviceInfo = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n+            logger.trace(\"deviceInfo = {}\", deviceInfo);\n+\n+            info devInfo = gson.fromJson(deviceInfo, info.class);\n+            Map<String, String> properties = new HashMap<>(5);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+            updateProperties(properties);\n+\n+            sessionId = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+            logger.trace(\"SessionId = {}\", sessionId);\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval, TimeUnit.SECONDS);\n+        } catch (Exception e) {\n+            // TODO Auto-generated catch block\n         }\n-        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-        if (response != null && !response.isEmpty()) {\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-            if (!success) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            } else {\n-                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                int value = uid[0].value;\n \n-                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                State stateValue = new DecimalType(uid[1].value);\n-                updateState(MODE_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[2].value);\n-                updateState(WINDSPEED_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[3].value);\n-                updateState(SWINGUD_CHANNEL, stateValue);\n-                int unit = (uid[4].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(TEMP_CHANNEL, stateValue);\n-                unit = (uid[5].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(RETURNTEMP_CHANNEL, stateValue);\n-                unit = (uid[12].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n-            }\n+        if (!sessionId.isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE);\n         }\n     }\n+\n+    public void getAllUidValues() {\n+        uidValueArray = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+\n+        dpval[] uid = gson.fromJson(uidValueArray, dpval[].class);\n+        int value = uid[0].value;\n+\n+        updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+        State stateValue = new DecimalType(uid[1].value);\n+        updateState(MODE_CHANNEL, stateValue);\n+        stateValue = new DecimalType(uid[2].value);\n+        updateState(WINDSPEED_CHANNEL, stateValue);\n+        stateValue = new DecimalType(uid[3].value);\n+        updateState(SWINGUD_CHANNEL, stateValue);\n+        int unit = (uid[4].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(TEMP_CHANNEL, stateValue);\n+        unit = (uid[5].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(RETURNTEMP_CHANNEL, stateValue);\n+        unit = (uid[12].value) / 10;\n+        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+        updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+\n+        JsonElement dpvalJson = IntesisHomeHttpApi.getRestrictedRequestUID6(deviceIp, sessionId, httpClient);\n+        dpval dpval = gson.fromJson(dpvalJson, dpval.class);\n+        stateValue = new DecimalType(dpval.value);\n+        updateState(SWINGLR_CHANNEL, stateValue);\n+    }\n }\n", "next_change": {"commit": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex c5b01cea62..1c0f2d361d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -107,71 +172,41 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n+            boolean success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n         }\n     }\n \n-    @Override\n-    public void initialize() {\n-        logger.trace(\"Start initializing!\");\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-\n-        deviceIp = config.ipAddress;\n-        password = config.password;\n-        try {\n-            httpClient.start();\n-            JsonElement deviceInfo = IntesisHomeHttpApi.getInfo(deviceIp, httpClient);\n-            logger.trace(\"deviceInfo = {}\", deviceInfo);\n-\n-            info devInfo = gson.fromJson(deviceInfo, info.class);\n-            Map<String, String> properties = new HashMap<>(5);\n-            properties.put(PROPERTY_VENDOR, \"Intesis\");\n-            properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n-            properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n-            properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n-            properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n-            updateProperties(properties);\n-\n-            sessionId = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-            logger.trace(\"SessionId = {}\", sessionId);\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval, TimeUnit.SECONDS);\n-        } catch (Exception e) {\n-            // TODO Auto-generated catch block\n-        }\n-\n-        if (!sessionId.isEmpty()) {\n-            updateStatus(ThingStatus.ONLINE);\n+    public void getAllUidValues() {\n+        String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+        boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+        if (!success) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n         } else {\n-            updateStatus(ThingStatus.OFFLINE);\n+            JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+            dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+            int value = uid[0].value;\n+\n+            updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+            State stateValue = new DecimalType(uid[1].value);\n+            updateState(MODE_CHANNEL, stateValue);\n+            stateValue = new DecimalType(uid[2].value);\n+            updateState(WINDSPEED_CHANNEL, stateValue);\n+            stateValue = new DecimalType(uid[3].value);\n+            updateState(SWINGUD_CHANNEL, stateValue);\n+            int unit = (uid[4].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(TEMP_CHANNEL, stateValue);\n+            unit = (uid[5].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(RETURNTEMP_CHANNEL, stateValue);\n+            unit = (uid[12].value) / 10;\n+            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+            updateState(OUTDOORTEMP_CHANNEL, stateValue);\n         }\n     }\n-\n-    public void getAllUidValues() {\n-        uidValueArray = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n-\n-        dpval[] uid = gson.fromJson(uidValueArray, dpval[].class);\n-        int value = uid[0].value;\n-\n-        updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-        State stateValue = new DecimalType(uid[1].value);\n-        updateState(MODE_CHANNEL, stateValue);\n-        stateValue = new DecimalType(uid[2].value);\n-        updateState(WINDSPEED_CHANNEL, stateValue);\n-        stateValue = new DecimalType(uid[3].value);\n-        updateState(SWINGUD_CHANNEL, stateValue);\n-        int unit = (uid[4].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(TEMP_CHANNEL, stateValue);\n-        unit = (uid[5].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(RETURNTEMP_CHANNEL, stateValue);\n-        unit = (uid[12].value) / 10;\n-        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-        updateState(OUTDOORTEMP_CHANNEL, stateValue);\n-\n-        JsonElement dpvalJson = IntesisHomeHttpApi.getRestrictedRequestUID6(deviceIp, sessionId, httpClient);\n-        dpval dpval = gson.fromJson(dpvalJson, dpval.class);\n-        stateValue = new DecimalType(dpval.value);\n-        updateState(SWINGLR_CHANNEL, stateValue);\n-    }\n }\n", "next_change": {"commit": "ac4504b2317bb3f57bdaf584cc5aaf856dcc9fbe", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 1c0f2d361d..520d69c519 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -182,31 +196,42 @@ public class IntesisHomeHandler extends BaseThingHandler {\n     }\n \n     public void getAllUidValues() {\n-        String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n-        boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-        if (!success) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        if (thing.getStatus() != ThingStatus.ONLINE) {\n+            String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (success) {\n+                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                sessionId = auth.sessionID;\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n         } else {\n-            JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-            dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-            int value = uid[0].value;\n-\n-            updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-            State stateValue = new DecimalType(uid[1].value);\n-            updateState(MODE_CHANNEL, stateValue);\n-            stateValue = new DecimalType(uid[2].value);\n-            updateState(WINDSPEED_CHANNEL, stateValue);\n-            stateValue = new DecimalType(uid[3].value);\n-            updateState(SWINGUD_CHANNEL, stateValue);\n-            int unit = (uid[4].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(TEMP_CHANNEL, stateValue);\n-            unit = (uid[5].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(RETURNTEMP_CHANNEL, stateValue);\n-            unit = (uid[12].value) / 10;\n-            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-            updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+            String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+                int value = uid[0].value;\n+\n+                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                State stateValue = new DecimalType(uid[1].value);\n+                updateState(MODE_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[2].value);\n+                updateState(WINDSPEED_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[3].value);\n+                updateState(SWINGUD_CHANNEL, stateValue);\n+                int unit = (uid[4].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(TEMP_CHANNEL, stateValue);\n+                unit = (uid[5].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(RETURNTEMP_CHANNEL, stateValue);\n+                unit = (uid[12].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+            }\n         }\n     }\n }\n", "next_change": {"commit": "640f8b2996d61918a219e4581b3d138583efd4e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 520d69c519..d9b5e72c41 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -172,65 +192,90 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            boolean success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n-            if (!success) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-                success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                    success = IntesisHomeHttpApi.setRestricted(deviceIp, sessionId, httpClient, uid, value);\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                    if (response != null) {\n+                        success = IntesisHomeJSonDTO.getSuccess(response);\n+                        if (success) {\n+                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                            sessionId = auth.sessionID;\n+                            updateStatus(ThingStatus.ONLINE);\n+                            response = api.postRequest(ipAddress, contentString);\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n                 } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    updateStatus(ThingStatus.ONLINE);\n                 }\n-            } else {\n-                updateStatus(ThingStatus.ONLINE);\n+\n             }\n         }\n     }\n \n+    /**\n+     * Update device status and all channels\n+     */\n     public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device for actual status\");\n         if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String response = IntesisHomeHttpApi.getSessionId(deviceIp, password, httpClient);\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-            if (success) {\n-                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                sessionId = auth.sessionID;\n-                updateStatus(ThingStatus.ONLINE);\n+            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                    + \"\\\"}}\";\n+\n+            String response = api.postRequest(ipAddress, sessionString);\n+            if (response != null) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n             }\n-        } else {\n-            String response = IntesisHomeHttpApi.getRestrictedRequestAll(deviceIp, sessionId, httpClient);\n+        }\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n             boolean success = IntesisHomeJSonDTO.getSuccess(response);\n             if (!success) {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             } else {\n                 JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n                 dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                int value = uid[0].value;\n-\n-                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                State stateValue = new DecimalType(uid[1].value);\n-                updateState(MODE_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[2].value);\n-                updateState(WINDSPEED_CHANNEL, stateValue);\n-                stateValue = new DecimalType(uid[3].value);\n-                updateState(SWINGUD_CHANNEL, stateValue);\n-                int unit = (uid[4].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(TEMP_CHANNEL, stateValue);\n-                unit = (uid[5].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(RETURNTEMP_CHANNEL, stateValue);\n-                unit = (uid[12].value) / 10;\n-                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                if (uid.length >= 12) {\n+                    int value = uid[0].value;\n+                    updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                    State stateValue = new DecimalType(uid[1].value);\n+                    updateState(MODE_CHANNEL, stateValue);\n+                    stateValue = new DecimalType(uid[2].value);\n+                    updateState(WINDSPEED_CHANNEL, stateValue);\n+                    stateValue = new DecimalType(uid[3].value);\n+                    updateState(SWINGUD_CHANNEL, stateValue);\n+                    int unit = Math.round((uid[4].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(TEMP_CHANNEL, stateValue);\n+                    unit = Math.round((uid[5].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(AMBIENTTEMP_CHANNEL, stateValue);\n+                    unit = Math.round((uid[12].value) / 10);\n+                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                    updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                }\n             }\n         }\n     }\n", "next_change": {"commit": "045bd480bf18803c14df72d383755c8c9ee7a813", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex d9b5e72c41..4e96513b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -230,53 +396,171 @@ public class IntesisHomeHandler extends BaseThingHandler {\n      * Update device status and all channels\n      */\n     public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device for actual status\");\n-        if (thing.getStatus() != ThingStatus.ONLINE) {\n-            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                    + \"\\\"}}\";\n-\n-            String response = api.postRequest(ipAddress, sessionString);\n-            if (response != null) {\n-                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n-                if (success) {\n-                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n-                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n-                    sessionId = auth.sessionID;\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            }\n-        }\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n         String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n                 + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n         if (response != null) {\n-            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            boolean success = getSuccess(response);\n             if (!success) {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             } else {\n-                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n-                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n-                if (uid.length >= 12) {\n-                    int value = uid[0].value;\n-                    updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                    State stateValue = new DecimalType(uid[1].value);\n-                    updateState(MODE_CHANNEL, stateValue);\n-                    stateValue = new DecimalType(uid[2].value);\n-                    updateState(WINDSPEED_CHANNEL, stateValue);\n-                    stateValue = new DecimalType(uid[3].value);\n-                    updateState(SWINGUD_CHANNEL, stateValue);\n-                    int unit = Math.round((uid[4].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(TEMP_CHANNEL, stateValue);\n-                    unit = Math.round((uid[5].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(AMBIENTTEMP_CHANNEL, stateValue);\n-                    unit = Math.round((uid[12].value) / 10);\n-                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                    updateState(OUTDOORTEMP_CHANNEL, stateValue);\n+                logout();\n+                response resp = gson.fromJson(response, response.class);\n+                data data = gson.fromJson(resp.data.toString(), data.class);\n+                dpval[] dpval = gson.fromJson(data.dpval, dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            response resp = gson.fromJson(response, response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                data data = gson.fromJson(resp.data.toString(), data.class);\n+                id id = gson.fromJson(data.id.toString(), id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n                 }\n             }\n         }\n     }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        response resp = gson.fromJson(response, response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (getThing().getChannel(channelId) != null) {\n+                if (options != null) {\n+                    final List<StateOption> stateOptions = options.stream()\n+                            .map(e -> new StateOption(e.toString(),\n+                                    e instanceof String ? beautify((String) e) : e.toString()))\n+                            .collect(Collectors.toList());\n+                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n+        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n+                .withOptions(stateOptionList).build().toStateDescription();\n+        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n+    }\n+\n+    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n+        logger.debug(\"Adding state description for channel {}\", channelUID);\n+        descriptions.put(channelUID, description);\n+    }\n+\n+    @Override\n+    public @Nullable StateDescription getStateDescription(Channel channel,\n+            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n+        StateDescription description = descriptions.get(channel.getUID());\n+        return description;\n+    }\n }\n", "next_change": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -551,16 +557,4 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                 .withOptions(stateOptionList).build().toStateDescription();\n         intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n     }\n-\n-    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n-        logger.debug(\"Adding state description for channel {}\", channelUID);\n-        descriptions.put(channelUID, description);\n-    }\n-\n-    @Override\n-    public @Nullable StateDescription getStateDescription(Channel channel,\n-            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n-        StateDescription description = descriptions.get(channel.getUID());\n-        return description;\n-    }\n }\n", "next_change": {"commit": "b21bc3ddd7ac54ec9a8a1dd1c0eb088e0291c0bc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..af9e404b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -546,15 +544,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n-\n-    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n-        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n-                .withOptions(stateOptionList).build().toStateDescription();\n-        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n-    }\n }\n", "next_change": {"commit": "f2926350d73fde0aa6dbe4d6ac287bb2524d403d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex af9e404b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -544,9 +546,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n+                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n+\n+    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n+        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n+                .withOptions(stateOptionList).build().toStateDescription();\n+        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n+    }\n }\n", "next_change": {"commit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..af9e404b0c 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -546,15 +544,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n+                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n                 }\n             }\n         }\n     }\n-\n-    private void updateStateDescription(ChannelUID channelUID, List<StateOption> stateOptionList) {\n-        StateDescription stateDescription = StateDescriptionFragmentBuilder.create().withReadOnly(false)\n-                .withOptions(stateOptionList).build().toStateDescription();\n-        intesisStateDescriptionProvider.setDescription(channelUID, stateDescription);\n-    }\n }\n", "next_change": {"commit": "623adb7055714c71dbf4efc86ce64d0804311b66", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex af9e404b0c..ae486a0f96 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -544,7 +542,10 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                     e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                             .collect(Collectors.toList());\n                     logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n+                    channel = thing.getChannel(channelId);\n+                    if (channel != null) {\n+                        intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+                    }\n                 }\n             }\n         }\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ae486a0f96..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -535,17 +513,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             thingBuilder.withChannel(channel);\n             updateThing(thingBuilder.build());\n \n-            if (getThing().getChannel(channelId) != null) {\n-                if (options != null) {\n-                    final List<StateOption> stateOptions = options.stream()\n-                            .map(e -> new StateOption(e.toString(),\n-                                    e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                            .collect(Collectors.toList());\n-                    logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    channel = thing.getChannel(channelId);\n-                    if (channel != null) {\n-                        intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                    }\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e.toString(),\n+                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                channel = thing.getChannel(channelId);\n+                if (channel != null) {\n+                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n                 }\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -515,14 +526,10 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n             if (options != null) {\n                 final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e.toString(),\n-                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                         .collect(Collectors.toList());\n                 logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                channel = thing.getChannel(channelId);\n-                if (channel != null) {\n-                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                }\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n             }\n         }\n     }\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "url": "https://github.com/openhab/openhab-addons/commit/e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "message": "Intesis Binding - initial contribution\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "url": "https://github.com/openhab/openhab-addons/commit/d5944f56d63f4b41bd98114ba6096cf2b1e09026", "message": "Code cleaning\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "6c69dc92c392ec88f8e6694149aa8428120525fd", "url": "https://github.com/openhab/openhab-addons/commit/6c69dc92c392ec88f8e6694149aa8428120525fd", "message": "Add README, CODEOWNERS and pom.xml\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "a444f3750f26f130691fd1530b5563f37ecb700b", "url": "https://github.com/openhab/openhab-addons/commit/a444f3750f26f130691fd1530b5563f37ecb700b", "message": "Code Cleaning\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "b0f12d53c66377db2ecd35ad2456c85365700486", "url": "https://github.com/openhab/openhab-addons/commit/b0f12d53c66377db2ecd35ad2456c85365700486", "message": "Add missing classpath and project file\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "73d3b4b587018e616ce173379fe5f4045b399104", "url": "https://github.com/openhab/openhab-addons/commit/73d3b4b587018e616ce173379fe5f4045b399104", "message": "Add missing pm.xml\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "ac4504b2317bb3f57bdaf584cc5aaf856dcc9fbe", "url": "https://github.com/openhab/openhab-addons/commit/ac4504b2317bb3f57bdaf584cc5aaf856dcc9fbe", "message": "Add session retry\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "253765c2c2d9dc92783e52efda4362279fb6da2e", "url": "https://github.com/openhab/openhab-addons/commit/253765c2c2d9dc92783e52efda4362279fb6da2e", "message": "Refactored to use httpClientFactory()\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "1d706c27736996a58383935e0e8dd20c57b4643b", "url": "https://github.com/openhab/openhab-addons/commit/1d706c27736996a58383935e0e8dd20c57b4643b", "message": "Avoid NPEs in IntesisHomeHandler\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "6ff68afc607d7fe23fe35ba62b9f2950357e7bf1", "url": "https://github.com/openhab/openhab-addons/commit/6ff68afc607d7fe23fe35ba62b9f2950357e7bf1", "message": "Catched another possible NPE in IntesisHomeJsonDTO\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "640f8b2996d61918a219e4581b3d138583efd4e6", "url": "https://github.com/openhab/openhab-addons/commit/640f8b2996d61918a219e4581b3d138583efd4e6", "message": "Applied changes after first review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "7e0b358217cec54969f6a46c8ef04eb49fdfa79c", "url": "https://github.com/openhab/openhab-addons/commit/7e0b358217cec54969f6a46c8ef04eb49fdfa79c", "message": "Applied more changes after first review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "9d58584b0c0f9bc01a66f1abd947e1345a1e117e", "url": "https://github.com/openhab/openhab-addons/commit/9d58584b0c0f9bc01a66f1abd947e1345a1e117e", "message": "Change SNAPSHOT version\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:24:00Z", "type": "commit"}, {"oid": "e616e3645d96b3e05a7635d64d755a70e694be02", "url": "https://github.com/openhab/openhab-addons/commit/e616e3645d96b3e05a7635d64d755a70e694be02", "message": "Finished localisation and refactored some channels in preparation of IntesisBox integration\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-26T12:06:50Z", "type": "commit"}, {"oid": "045bd480bf18803c14df72d383755c8c9ee7a813", "url": "https://github.com/openhab/openhab-addons/commit/045bd480bf18803c14df72d383755c8c9ee7a813", "message": "Refactored channel values and added dynamic channel and stateOption creation\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-01T09:04:15Z", "type": "commit"}, {"oid": "f54520518a67399dfa88a80ca34f69709f12bc0d", "url": "https://github.com/openhab/openhab-addons/commit/f54520518a67399dfa88a80ca34f69709f12bc0d", "message": "Minor corretion in README\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-01T10:25:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MTg4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r481051885", "body": "If you extend `BaseDynamicStateDescriptionProvider` you can remove most of the code.\r\n```suggestion\r\npublic class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\r\n```", "bodyText": "If you extend BaseDynamicStateDescriptionProvider you can remove most of the code.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class IntesisDynamicStateDescriptionProvider implements DynamicStateDescriptionProvider {\n          \n          \n            \n            public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {", "bodyHTML": "<p dir=\"auto\">If you extend <code>BaseDynamicStateDescriptionProvider</code> you can remove most of the code.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">IntesisDynamicStateDescriptionProvider</span> <span class=\"pl-k x x-first\">implements</span><span class=\"x\"> </span><span class=\"pl-e x x-last\">DynamicStateDescriptionProvider</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">IntesisDynamicStateDescriptionProvider</span> <span class=\"pl-k x x-first\">extends</span><span class=\"x\"> </span><span class=\"pl-e x x-last\">BaseDynamicStateDescriptionProvider</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-09-01T10:56:30Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@Component(service = { DynamicStateDescriptionProvider.class, IntesisDynamicStateDescriptionProvider.class })\n+@NonNullByDefault\n+public class IntesisDynamicStateDescriptionProvider implements DynamicStateDescriptionProvider {", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2NDQ3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484564471", "bodyText": "Changed, but do not see what code can be removed .", "author": "hmerk", "createdAt": "2020-09-07T20:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MTg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2NTc5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484565795", "bodyText": "You don't have to maintain the descriptions. The base class provides this functionallity. So all methods related to maintaining that field are not needed anymore.", "author": "Hilbrand", "createdAt": "2020-09-07T20:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MTg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2ODc0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484568746", "bodyText": "Tried to remove\nremoveAllDescriptions();\ngetStateDescription();\nBut this breaks functionality. PaperUI does not show the Options anymore", "author": "hmerk", "createdAt": "2020-09-07T21:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MTg4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\nindex 48dd717551..80eef35d66 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n", "chunk": "@@ -33,7 +34,7 @@ import org.slf4j.LoggerFactory;\n  */\n @Component(service = { DynamicStateDescriptionProvider.class, IntesisDynamicStateDescriptionProvider.class })\n @NonNullByDefault\n-public class IntesisDynamicStateDescriptionProvider implements DynamicStateDescriptionProvider {\n+public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n \n     private final Logger logger = LoggerFactory.getLogger(getClass());\n \n", "next_change": {"commit": "b21bc3ddd7ac54ec9a8a1dd1c0eb088e0291c0bc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\nindex 80eef35d66..8fbaf0bf2d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n", "chunk": "@@ -36,30 +25,4 @@ import org.slf4j.LoggerFactory;\n @NonNullByDefault\n public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n \n-    private final Logger logger = LoggerFactory.getLogger(getClass());\n-\n-    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n-\n-    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n-        logger.debug(\"Adding state description for channel {}\", channelUID);\n-        descriptions.put(channelUID, description);\n-    }\n-\n-    public void removeAllDescriptions() {\n-        logger.debug(\"Removing all state descriptions\");\n-        descriptions.clear();\n-    }\n-\n-    @Override\n-    public @Nullable StateDescription getStateDescription(Channel channel,\n-            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n-        StateDescription description = descriptions.get(channel.getUID());\n-        return description;\n-    }\n-\n-    @Override\n-    @Deactivate\n-    public void deactivate() {\n-        descriptions.clear();\n-    }\n }\n", "next_change": {"commit": "f2926350d73fde0aa6dbe4d6ac287bb2524d403d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\nindex 8fbaf0bf2d..80eef35d66 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n", "chunk": "@@ -25,4 +36,30 @@ import org.osgi.service.component.annotations.Component;\n @NonNullByDefault\n public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n \n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n+\n+    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n+        logger.debug(\"Adding state description for channel {}\", channelUID);\n+        descriptions.put(channelUID, description);\n+    }\n+\n+    public void removeAllDescriptions() {\n+        logger.debug(\"Removing all state descriptions\");\n+        descriptions.clear();\n+    }\n+\n+    @Override\n+    public @Nullable StateDescription getStateDescription(Channel channel,\n+            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n+        StateDescription description = descriptions.get(channel.getUID());\n+        return description;\n+    }\n+\n+    @Override\n+    @Deactivate\n+    public void deactivate() {\n+        descriptions.clear();\n+    }\n }\n", "next_change": {"commit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\nindex 80eef35d66..8fbaf0bf2d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n", "chunk": "@@ -36,30 +25,4 @@ import org.slf4j.LoggerFactory;\n @NonNullByDefault\n public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n \n-    private final Logger logger = LoggerFactory.getLogger(getClass());\n-\n-    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n-\n-    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n-        logger.debug(\"Adding state description for channel {}\", channelUID);\n-        descriptions.put(channelUID, description);\n-    }\n-\n-    public void removeAllDescriptions() {\n-        logger.debug(\"Removing all state descriptions\");\n-        descriptions.clear();\n-    }\n-\n-    @Override\n-    public @Nullable StateDescription getStateDescription(Channel channel,\n-            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n-        StateDescription description = descriptions.get(channel.getUID());\n-        return description;\n-    }\n-\n-    @Override\n-    @Deactivate\n-    public void deactivate() {\n-        descriptions.clear();\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MjUzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r481052537", "body": "Do add a timeout to the request to make sure it won't block.", "bodyText": "Do add a timeout to the request to make sure it won't block.", "bodyHTML": "<p dir=\"auto\">Do add a timeout to the request to make sure it won't block.</p>", "author": "Hilbrand", "createdAt": "2020-09-01T10:57:46Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.api;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link IntesisHomeHttpApi} wraps the IntesisHome REST API and provides various low level function to access the\n+ * device api (not cloud api).\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHttpApi {\n+    public static final String CONTENT_TYPE_JSON = \"application/json; charset=UTF-8\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHttpApi.class);\n+    private final HttpClient httpClient;\n+\n+    public IntesisHomeHttpApi(IntesisConfiguration config, HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Used to post a request to the device\n+     *\n+     * @param ipAddress of the device\n+     * @param content string\n+     * @return JSON string as response\n+     */\n+    @Nullable\n+    public String postRequest(String ipAddress, String contentString) {\n+        String url = \"http://\" + ipAddress + \"/api.cgi\";\n+        try {\n+            Request request = httpClient.POST(url);", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0Nzk5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484547994", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-07T19:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MjUzNw=="}], "type": "inlineReview", "revised_code": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\nindex a9c2686566..7e2259c1ca 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n", "chunk": "@@ -58,7 +59,7 @@ public class IntesisHomeHttpApi {\n             request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n             request.content(new StringContentProvider(contentString), \"application/json\");\n \n-            ContentResponse contentResponse = request.send();\n+            ContentResponse contentResponse = request.timeout(5, TimeUnit.SECONDS).send();\n \n             String response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n             logger.trace(\"HTTP Response {}: {}\", contentResponse.getStatus(), response);\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\nindex 7e2259c1ca..7bbeb095b1 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n", "chunk": "@@ -62,7 +62,6 @@ public class IntesisHomeHttpApi {\n             ContentResponse contentResponse = request.timeout(5, TimeUnit.SECONDS).send();\n \n             String response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n-            logger.trace(\"HTTP Response {}: {}\", contentResponse.getStatus(), response);\n \n             if (response != null && !response.isEmpty()) {\n                 return response;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MjkwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r481052900", "body": "If the serialized name is the same as the field name it's redundant to add SerializedName.", "bodyText": "If the serialized name is the same as the field name it's redundant to add SerializedName.", "bodyHTML": "<p dir=\"auto\">If the serialized name is the same as the field name it's redundant to add SerializedName.</p>", "author": "Hilbrand", "createdAt": "2020-09-01T10:58:33Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.gson;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * {@link IntesisHomeJSonDTO} is used for the JSon/GSon mapping\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+public class IntesisHomeJSonDTO {\n+\n+    public static class response {\n+        @SerializedName(\"success\")", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1MTEyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484551122", "bodyText": "Removed all occurences", "author": "hmerk", "createdAt": "2020-09-07T19:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MjkwMA=="}], "type": "inlineReview", "revised_code": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java\nindex ba657bebf5..13a7d8dcec 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java\n", "chunk": "@@ -23,163 +22,102 @@ import com.google.gson.annotations.SerializedName;\n  */\n public class IntesisHomeJSonDTO {\n \n-    public static class response {\n-        @SerializedName(\"success\")\n+    public static class Response {\n         public boolean success;\n-        @SerializedName(\"data\")\n         public JsonElement data;\n     }\n \n-    public static class data {\n-        @SerializedName(\"id\")\n+    public static class Data {\n         public JsonElement id;\n-        @SerializedName(\"info\")\n         public JsonElement info;\n-        @SerializedName(\"userinfo\")\n         public JsonElement userinfo;\n-        @SerializedName(\"config\")\n         public JsonElement config;\n-        @SerializedName(\"dp\")\n         public JsonElement dp;\n-        @SerializedName(\"dpval\")\n         public JsonElement dpval;\n     }\n \n-    public static class id {\n-        @SerializedName(\"sessionID\")\n+    public static class Id {\n         public String sessionID; // Session ID\n     }\n \n     // Device Information used for thing properties\n-    public static class info {\n-        @SerializedName(\"wlanSTAMAC\")\n+    public static class Info {\n         public String wlanSTAMAC; // Device Client MAC Address\n-        @SerializedName(\"wlanAPMAC\")\n         public String wlanAPMAC; // Device Access Point MAC Address\n-        @SerializedName(\"fwVersion\")\n         public String fwVersion; // Device Firmware Version\n-        @SerializedName(\"wlanFwVersion\")\n         public String wlanFwVersion; // Wireless Firmware Version\n-        @SerializedName(\"acStatus\")\n         public String acStatus; // Air Conditioner Communication Status\n-        @SerializedName(\"wlanLNK\")\n         public String wlanLNK; // Connection Status with Wireless Network\n-        @SerializedName(\"ssid\")\n         public String ssid; // Wireless Network SSID\n-        @SerializedName(\"rssi\")\n         public String rssi; // Wireless Signal Strength\n-        @SerializedName(\"tcpServerLNK\")\n         public String tcpServerLNK; // Cloud Server Connection (Not used for communication here)\n-        @SerializedName(\"localdatetime\")\n         public String localdatetime; // Local Date Time\n-        @SerializedName(\"powerStatus\")\n         public String powerStatus;\n-        @SerializedName(\"lastconfigdatetime\")\n         public String lastconfigdatetime; // Last Configuration Date Time\n-        @SerializedName(\"deviceModel\")\n         public String deviceModel; // Device Model\n-        @SerializedName(\"sn\")\n         public String sn; // Serial Number\n-        @SerializedName(\"lastError\")\n         public String lastError;\n     }\n \n-    public static class userinfo {\n-        @SerializedName(\"username\")\n+    public static class Userinfo {\n         public String username;\n-        @SerializedName(\"servicelist\")\n         public JsonElement servicelist;\n     }\n \n     // List of available services\n-    public static class servicelist {\n-        @SerializedName(\"setconfig\")\n+    public static class Servicelist {\n         public String setconfig;\n-        @SerializedName(\"getconfig\")\n         public String getconfig;\n-        @SerializedName(\"getcurrentconfig\")\n         public String getcurrentconfig;\n-        @SerializedName(\"getinfo\")\n         public String getinfo;\n-        @SerializedName(\"login\")\n         public String login;\n-        @SerializedName(\"logout\")\n         public String logout;\n-        @SerializedName(\"passchange\")\n         public String passchange;\n-        @SerializedName(\"getavailabledatapoints\")\n         public String getavailabledatapoints;\n-        @SerializedName(\"setdatapointvalue\")\n         public String setdatapointvalue;\n-        @SerializedName(\"getdatapointvalue\")\n         public String getdatapointvalue;\n-        @SerializedName(\"getavailableservices\")\n         public String getavailableservices;\n-        @SerializedName(\"reboot\")\n         public String reboot;\n-        @SerializedName(\"setdefaults\")\n         public String setdefaults;\n-        @SerializedName(\"getdefaultconfig\")\n         public String getdefaultconfig;\n     }\n \n-    public static class config {\n-        @SerializedName(\"deviceModel\")\n+    public static class Config {\n         public String deviceModel; // Device Model\n-        @SerializedName(\"ip\")\n         public String ip; // Device IP Address\n-        @SerializedName(\"netmask\")\n         public String netmask; // Device IP Address\n-        @SerializedName(\"dfltgw\")\n         public String dfltgw; // Default gateway\n-        @SerializedName(\"dhcp\")\n         public boolean dhcp; // DHCP enabled\n-        @SerializedName(\"ssid\")\n         public String ssid; // WLAN Access Point\n-        @SerializedName(\"security\")\n         public int security; // Security Type\n-        @SerializedName(\"regdomain\")\n         public int regdomain;\n-        @SerializedName(\"lastconfigdatetime\")\n         public int lastconfigdatetime;\n     }\n \n-    public static class dp {\n-        @SerializedName(\"datapoints\")\n+    public static class Dp {\n         public JsonArray datapoints; // dataPoints\n     }\n \n     // Array of UIDs with corresponding description for dynamic channel creation\n-    public static class datapoints {\n-        @SerializedName(\"uid\")\n+    public static class Datapoints {\n         public int uid; // dataPoint\n-        @SerializedName(\"rw\")\n         public String rw; // read/write status\n-        @SerializedName(\"type\")\n         public int type;\n-        @SerializedName(\"descr\")\n         public JsonElement descr;\n     }\n \n     // Descriptor of dataPoint values\n-    public static class descr {\n-        @SerializedName(\"numStates\")\n+    public static class Descr {\n         public int numStates;\n-        @SerializedName(\"states\")\n         public String[] states;\n-        @SerializedName(\"maxValue\")\n         public String maxValue;\n-        @SerializedName(\"minValue\")\n         public String minValue;\n     }\n \n     // Array of UIDs with corresponding values, mapped into channel\n-    public static class dpval {\n-        @SerializedName(\"uid\")\n+    public static class Dpval {\n         public int uid; // ID\n-        @SerializedName(\"value\")\n         public int value;\n-        @SerializedName(\"status\")\n         public int status;\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0Mjk1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484342957", "body": "```suggestion\r\n        updateStatus(ThingStatus.UNKNOWN);\r\n```\r\nSee https://www.openhab.org/docs/concepts/things.html#status-details", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.CONFIGURATION_PENDING);\n          \n          \n            \n                    updateStatus(ThingStatus.UNKNOWN);\n          \n      \n    \n    \n  \n\nSee https://www.openhab.org/docs/concepts/things.html#status-details", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>UNKNOWN</span><span class=\"x x-first\">, </span><span class=\"pl-smi x\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">CONFIGURATION_PENDING</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>UNKNOWN</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">See <a href=\"https://www.openhab.org/docs/concepts/things.html#status-details\" rel=\"nofollow\">https://www.openhab.org/docs/concepts/things.html#status-details</a></p>", "author": "Hilbrand", "createdAt": "2020-09-07T10:27:32Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,566 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.WordUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.StateDescriptionFragmentBuilder;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler implements DynamicStateDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    private static String beautify(final String camelCaseWording) {\n+        final StringBuilder b = new StringBuilder();\n+        for (final String s : StringUtils.splitByCharacterTypeCamelCase(camelCaseWording)) {\n+            b.append(\" \");\n+            b.append(s);\n+        }\n+        final StringBuilder bs = new StringBuilder();\n+        for (final String t : StringUtils.splitByWholeSeparator(b.toString(), \" _\")) {\n+            bs.append(\" \");\n+            bs.append(t);\n+        }\n+\n+        return WordUtils.capitalizeFully(bs.toString()).trim();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.CONFIGURATION_PENDING);", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1MTMwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484551307", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-09-07T19:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0Mjk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -102,25 +96,10 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n         this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n     }\n \n-    private static String beautify(final String camelCaseWording) {\n-        final StringBuilder b = new StringBuilder();\n-        for (final String s : StringUtils.splitByCharacterTypeCamelCase(camelCaseWording)) {\n-            b.append(\" \");\n-            b.append(s);\n-        }\n-        final StringBuilder bs = new StringBuilder();\n-        for (final String t : StringUtils.splitByWholeSeparator(b.toString(), \" _\")) {\n-            bs.append(\" \");\n-            bs.append(t);\n-        }\n-\n-        return WordUtils.capitalizeFully(bs.toString()).trim();\n-    }\n-\n     @Override\n     public void initialize() {\n         logger.debug(\"Start initializing!\");\n-        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.CONFIGURATION_PENDING);\n+        updateStatus(ThingStatus.UNKNOWN);\n         final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n         ipAddress = config.ipAddress;\n         password = config.password;\n", "next_change": {"commit": "623adb7055714c71dbf4efc86ce64d0804311b66", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..ae486a0f96 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -98,7 +96,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Start initializing!\");\n         updateStatus(ThingStatus.UNKNOWN);\n         final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n         ipAddress = config.ipAddress;\n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ae486a0f96..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -97,19 +97,23 @@ public class IntesisHomeHandler extends BaseThingHandler {\n     @Override\n     public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        config = getConfigAs(IntesisConfiguration.class);\n+        if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+        } else if (config.ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+        } else if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n         }\n \n         // start background initialization:\n-        scheduler.schedule(() -> {\n-            getInfo();\n-            getDataPoints();\n-\n-        }, 0, TimeUnit.SECONDS);\n+        scheduler.submit(() -> {\n+            populateProperties();\n+            // query available dataPoints and build dynamic channels\n+            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n+            updateProperties(properties);\n+        });\n     }\n \n     @Override\n", "next_change": {"commit": "a619be48d07d3b476b29034af12e1288a683833b", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 7d2b68bea9..982946626e 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -100,20 +100,23 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         config = getConfigAs(IntesisConfiguration.class);\n         if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+            return;\n         } else if (config.ipAddress.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+            return;\n         } else if (config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n+            return;\n+        } else {\n+            // start background initialization:\n+            scheduler.submit(() -> {\n+                populateProperties();\n+                // query available dataPoints and build dynamic channels\n+                postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                        + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n+                updateProperties(properties);\n+            });\n         }\n-\n-        // start background initialization:\n-        scheduler.submit(() -> {\n-            populateProperties();\n-            // query available dataPoints and build dynamic channels\n-            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n-                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n-            updateProperties(properties);\n-        });\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NzY5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484347691", "body": "Classes should start with uppercase character:\r\n```suggestion\r\n    public static class Response {\r\n```", "bodyText": "Classes should start with uppercase character:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static class response {\n          \n          \n            \n                public static class Response {", "bodyHTML": "<p dir=\"auto\">Classes should start with uppercase character:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-en x x-first x-last\">response</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-en x x-first x-last\">Response</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-09-07T10:37:22Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.gson;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * {@link IntesisHomeJSonDTO} is used for the JSon/GSon mapping\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+public class IntesisHomeJSonDTO {\n+\n+    public static class response {", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1MzA4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484553087", "bodyText": "Changed", "author": "hmerk", "createdAt": "2020-09-07T19:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NzY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java\nindex ba657bebf5..13a7d8dcec 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java\n", "chunk": "@@ -23,163 +22,102 @@ import com.google.gson.annotations.SerializedName;\n  */\n public class IntesisHomeJSonDTO {\n \n-    public static class response {\n-        @SerializedName(\"success\")\n+    public static class Response {\n         public boolean success;\n-        @SerializedName(\"data\")\n         public JsonElement data;\n     }\n \n-    public static class data {\n-        @SerializedName(\"id\")\n+    public static class Data {\n         public JsonElement id;\n-        @SerializedName(\"info\")\n         public JsonElement info;\n-        @SerializedName(\"userinfo\")\n         public JsonElement userinfo;\n-        @SerializedName(\"config\")\n         public JsonElement config;\n-        @SerializedName(\"dp\")\n         public JsonElement dp;\n-        @SerializedName(\"dpval\")\n         public JsonElement dpval;\n     }\n \n-    public static class id {\n-        @SerializedName(\"sessionID\")\n+    public static class Id {\n         public String sessionID; // Session ID\n     }\n \n     // Device Information used for thing properties\n-    public static class info {\n-        @SerializedName(\"wlanSTAMAC\")\n+    public static class Info {\n         public String wlanSTAMAC; // Device Client MAC Address\n-        @SerializedName(\"wlanAPMAC\")\n         public String wlanAPMAC; // Device Access Point MAC Address\n-        @SerializedName(\"fwVersion\")\n         public String fwVersion; // Device Firmware Version\n-        @SerializedName(\"wlanFwVersion\")\n         public String wlanFwVersion; // Wireless Firmware Version\n-        @SerializedName(\"acStatus\")\n         public String acStatus; // Air Conditioner Communication Status\n-        @SerializedName(\"wlanLNK\")\n         public String wlanLNK; // Connection Status with Wireless Network\n-        @SerializedName(\"ssid\")\n         public String ssid; // Wireless Network SSID\n-        @SerializedName(\"rssi\")\n         public String rssi; // Wireless Signal Strength\n-        @SerializedName(\"tcpServerLNK\")\n         public String tcpServerLNK; // Cloud Server Connection (Not used for communication here)\n-        @SerializedName(\"localdatetime\")\n         public String localdatetime; // Local Date Time\n-        @SerializedName(\"powerStatus\")\n         public String powerStatus;\n-        @SerializedName(\"lastconfigdatetime\")\n         public String lastconfigdatetime; // Last Configuration Date Time\n-        @SerializedName(\"deviceModel\")\n         public String deviceModel; // Device Model\n-        @SerializedName(\"sn\")\n         public String sn; // Serial Number\n-        @SerializedName(\"lastError\")\n         public String lastError;\n     }\n \n-    public static class userinfo {\n-        @SerializedName(\"username\")\n+    public static class Userinfo {\n         public String username;\n-        @SerializedName(\"servicelist\")\n         public JsonElement servicelist;\n     }\n \n     // List of available services\n-    public static class servicelist {\n-        @SerializedName(\"setconfig\")\n+    public static class Servicelist {\n         public String setconfig;\n-        @SerializedName(\"getconfig\")\n         public String getconfig;\n-        @SerializedName(\"getcurrentconfig\")\n         public String getcurrentconfig;\n-        @SerializedName(\"getinfo\")\n         public String getinfo;\n-        @SerializedName(\"login\")\n         public String login;\n-        @SerializedName(\"logout\")\n         public String logout;\n-        @SerializedName(\"passchange\")\n         public String passchange;\n-        @SerializedName(\"getavailabledatapoints\")\n         public String getavailabledatapoints;\n-        @SerializedName(\"setdatapointvalue\")\n         public String setdatapointvalue;\n-        @SerializedName(\"getdatapointvalue\")\n         public String getdatapointvalue;\n-        @SerializedName(\"getavailableservices\")\n         public String getavailableservices;\n-        @SerializedName(\"reboot\")\n         public String reboot;\n-        @SerializedName(\"setdefaults\")\n         public String setdefaults;\n-        @SerializedName(\"getdefaultconfig\")\n         public String getdefaultconfig;\n     }\n \n-    public static class config {\n-        @SerializedName(\"deviceModel\")\n+    public static class Config {\n         public String deviceModel; // Device Model\n-        @SerializedName(\"ip\")\n         public String ip; // Device IP Address\n-        @SerializedName(\"netmask\")\n         public String netmask; // Device IP Address\n-        @SerializedName(\"dfltgw\")\n         public String dfltgw; // Default gateway\n-        @SerializedName(\"dhcp\")\n         public boolean dhcp; // DHCP enabled\n-        @SerializedName(\"ssid\")\n         public String ssid; // WLAN Access Point\n-        @SerializedName(\"security\")\n         public int security; // Security Type\n-        @SerializedName(\"regdomain\")\n         public int regdomain;\n-        @SerializedName(\"lastconfigdatetime\")\n         public int lastconfigdatetime;\n     }\n \n-    public static class dp {\n-        @SerializedName(\"datapoints\")\n+    public static class Dp {\n         public JsonArray datapoints; // dataPoints\n     }\n \n     // Array of UIDs with corresponding description for dynamic channel creation\n-    public static class datapoints {\n-        @SerializedName(\"uid\")\n+    public static class Datapoints {\n         public int uid; // dataPoint\n-        @SerializedName(\"rw\")\n         public String rw; // read/write status\n-        @SerializedName(\"type\")\n         public int type;\n-        @SerializedName(\"descr\")\n         public JsonElement descr;\n     }\n \n     // Descriptor of dataPoint values\n-    public static class descr {\n-        @SerializedName(\"numStates\")\n+    public static class Descr {\n         public int numStates;\n-        @SerializedName(\"states\")\n         public String[] states;\n-        @SerializedName(\"maxValue\")\n         public String maxValue;\n-        @SerializedName(\"minValue\")\n         public String minValue;\n     }\n \n     // Array of UIDs with corresponding values, mapped into channel\n-    public static class dpval {\n-        @SerializedName(\"uid\")\n+    public static class Dpval {\n         public int uid; // ID\n-        @SerializedName(\"value\")\n         public int value;\n-        @SerializedName(\"status\")\n         public int status;\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0ODEwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484348102", "body": "Remove empty finally", "bodyText": "Remove empty finally", "bodyHTML": "<p dir=\"auto\">Remove empty finally</p>", "author": "Hilbrand", "createdAt": "2020-09-07T10:38:17Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,566 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.WordUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.StateDescriptionFragmentBuilder;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler implements DynamicStateDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    private static String beautify(final String camelCaseWording) {\n+        final StringBuilder b = new StringBuilder();\n+        for (final String s : StringUtils.splitByCharacterTypeCamelCase(camelCaseWording)) {\n+            b.append(\" \");\n+            b.append(s);\n+        }\n+        final StringBuilder bs = new StringBuilder();\n+        for (final String t : StringUtils.splitByWholeSeparator(b.toString(), \" _\")) {\n+            bs.append(\" \");\n+            bs.append(t);\n+        }\n+\n+        return WordUtils.capitalizeFully(bs.toString()).trim();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null) {\n+                    boolean success = getSuccess(response);\n+                    if (success) {\n+                        response resp = gson.fromJson(response, response.class);\n+                        data data = gson.fromJson(resp.data.toString(), data.class);\n+                        info info = gson.fromJson(data.info.toString(), info.class);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                        updateProperties(properties);\n+                        login();\n+                        if (!sessionId.isEmpty()) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                            contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                                    + sessionId + \"\\\"}}\";\n+                            response = api.postRequest(ipAddress, contentString);\n+                            logger.trace(\"available Datapoints response : {}\", response);\n+                            if (response != null) {\n+                                success = getSuccess(response);\n+                                if (success) {\n+                                    logout();\n+                                    resp = gson.fromJson(response, response.class);\n+                                    data = gson.fromJson(resp.data.toString(), data.class);\n+                                    dp dp = gson.fromJson(data.dp.toString(), dp.class);\n+                                    datapoints[] datapoints = gson.fromJson(dp.datapoints, datapoints[].class);\n+                                    for (int i = 0; i < datapoints.length; i++) {\n+                                        descr descr = gson.fromJson(datapoints[i].descr, descr.class);\n+                                        String channelId = \"\";\n+                                        String itemType = \"String\";\n+                                        switch (datapoints[i].uid) {\n+                                            case 2:\n+                                                List<String> opModes = new ArrayList<>();\n+                                                String[] modString = descr.states;\n+                                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                                    switch (modString[i1]) {\n+                                                        case \"0\":\n+                                                            opModes.add(\"AUTO\");\n+                                                            break;\n+                                                        case \"1\":\n+                                                            opModes.add(\"HEAT\");\n+                                                            break;\n+                                                        case \"2\":\n+                                                            opModes.add(\"DRY\");\n+                                                            break;\n+                                                        case \"3\":\n+                                                            opModes.add(\"FAN\");\n+                                                            break;\n+                                                        case \"4\":\n+                                                            opModes.add(\"COOL\");\n+                                                            break;\n+                                                    }\n+                                                }\n+                                                properties.put(\"Supported modes\", opModes.toString());\n+                                                updateProperties(properties);\n+                                                channelId = CHANNEL_TYPE_MODE;\n+                                                addChannel(channelId, itemType, opModes);\n+                                                break;\n+                                            case 4:\n+                                                List<String> fanLevels = new ArrayList<>();\n+                                                String[] fanString = descr.states;\n+                                                for (int i1 = 0; i1 < fanString.length; i1++) {\n+                                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n+                                                        fanLevels.add(\"AUTO\");\n+                                                    } else {\n+                                                        fanLevels.add(fanString[i1]);\n+                                                    }\n+                                                }\n+                                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                                updateProperties(properties);\n+                                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                                addChannel(channelId, itemType, fanLevels);\n+                                                break;\n+                                            case 5:\n+                                                List<String> swingUDModes = new ArrayList<>();\n+                                                String[] swingUDString = descr.states;\n+                                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n+                                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"AUTO\");\n+                                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"SWING\");\n+                                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"SWIRL\");\n+                                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"WIDE\");\n+                                                    } else {\n+                                                        swingUDModes.add(swingUDString[i1]);\n+                                                    }\n+                                                }\n+                                                channelId = CHANNEL_TYPE_VANESUD;\n+                                                properties.put(\"Supported vane up/down modes\", swingUDModes.toString());\n+                                                updateProperties(properties);\n+                                                addChannel(channelId, itemType, swingUDModes);\n+                                                break;\n+                                            case 6:\n+                                                List<String> swingLRModes = new ArrayList<>();\n+                                                String[] swingLRString = descr.states;\n+                                                for (int i1 = 0; i1 < swingLRString.length; i1++) {\n+                                                    if (\"AUTO\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"AUTO\");\n+                                                    } else if (\"10\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"SWING\");\n+                                                    } else if (\"11\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"SWIRL\");\n+                                                    } else if (\"12\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"WIDE\");\n+                                                    } else {\n+                                                        swingLRModes.add(swingLRString[i1]);\n+                                                    }\n+                                                }\n+                                                channelId = CHANNEL_TYPE_VANESLR;\n+                                                properties.put(\"Supported vane left/right modes\",\n+                                                        swingLRModes.toString());\n+                                                updateProperties(properties);\n+                                                addChannel(channelId, itemType, swingLRModes);\n+                                                break;\n+                                            case 9:\n+                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n+                                                        descr.minValue);\n+                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n+                                                        descr.maxValue);\n+                                                channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                                itemType = \"Number:Temperature\";\n+                                                addChannel(channelId, itemType, null);\n+                                                break;\n+                                            case 10:\n+                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n+                                                        descr.minValue);\n+                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n+                                                        descr.maxValue);\n+                                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                                itemType = \"Number:Temperature\";\n+                                                addChannel(channelId, itemType, null);\n+                                                break;\n+                                            case 37:\n+                                                logger.trace(\"Add Channel Outdoor Temperature\");\n+                                                logger.trace(\"UID : {} ; description : {}\", datapoints[i].uid,\n+                                                        datapoints[i].descr);\n+                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n+                                                        descr.minValue);\n+                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n+                                                        descr.maxValue);\n+                                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                                itemType = \"Number:Temperature\";\n+                                                addChannel(channelId, itemType, null);\n+                                                break;\n+                                        }\n+                                    }\n+                                }\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                            logger.trace(\"Start Refresh Job\");\n+                            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0,\n+                                    INTESIS_REFRESH_INTERVAL_SEC, TimeUnit.SECONDS);\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } finally {", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1MzMxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484553310", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-07T19:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0ODEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -130,175 +109,9 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n \n         // start background initialization:\n         scheduler.schedule(() -> {\n-            try {\n-                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-                String response = api.postRequest(ipAddress, contentString);\n-                logger.trace(\"getInfo response : {}\", response);\n-                if (response != null) {\n-                    boolean success = getSuccess(response);\n-                    if (success) {\n-                        response resp = gson.fromJson(response, response.class);\n-                        data data = gson.fromJson(resp.data.toString(), data.class);\n-                        info info = gson.fromJson(data.info.toString(), info.class);\n-                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                        properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                        properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                        properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                        properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                        updateProperties(properties);\n-                        login();\n-                        if (!sessionId.isEmpty()) {\n-                            updateStatus(ThingStatus.ONLINE);\n-                            contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n-                                    + sessionId + \"\\\"}}\";\n-                            response = api.postRequest(ipAddress, contentString);\n-                            logger.trace(\"available Datapoints response : {}\", response);\n-                            if (response != null) {\n-                                success = getSuccess(response);\n-                                if (success) {\n-                                    logout();\n-                                    resp = gson.fromJson(response, response.class);\n-                                    data = gson.fromJson(resp.data.toString(), data.class);\n-                                    dp dp = gson.fromJson(data.dp.toString(), dp.class);\n-                                    datapoints[] datapoints = gson.fromJson(dp.datapoints, datapoints[].class);\n-                                    for (int i = 0; i < datapoints.length; i++) {\n-                                        descr descr = gson.fromJson(datapoints[i].descr, descr.class);\n-                                        String channelId = \"\";\n-                                        String itemType = \"String\";\n-                                        switch (datapoints[i].uid) {\n-                                            case 2:\n-                                                List<String> opModes = new ArrayList<>();\n-                                                String[] modString = descr.states;\n-                                                for (int i1 = 0; i1 < modString.length; i1++) {\n-                                                    switch (modString[i1]) {\n-                                                        case \"0\":\n-                                                            opModes.add(\"AUTO\");\n-                                                            break;\n-                                                        case \"1\":\n-                                                            opModes.add(\"HEAT\");\n-                                                            break;\n-                                                        case \"2\":\n-                                                            opModes.add(\"DRY\");\n-                                                            break;\n-                                                        case \"3\":\n-                                                            opModes.add(\"FAN\");\n-                                                            break;\n-                                                        case \"4\":\n-                                                            opModes.add(\"COOL\");\n-                                                            break;\n-                                                    }\n-                                                }\n-                                                properties.put(\"Supported modes\", opModes.toString());\n-                                                updateProperties(properties);\n-                                                channelId = CHANNEL_TYPE_MODE;\n-                                                addChannel(channelId, itemType, opModes);\n-                                                break;\n-                                            case 4:\n-                                                List<String> fanLevels = new ArrayList<>();\n-                                                String[] fanString = descr.states;\n-                                                for (int i1 = 0; i1 < fanString.length; i1++) {\n-                                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n-                                                        fanLevels.add(\"AUTO\");\n-                                                    } else {\n-                                                        fanLevels.add(fanString[i1]);\n-                                                    }\n-                                                }\n-                                                properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                                updateProperties(properties);\n-                                                channelId = CHANNEL_TYPE_FANSPEED;\n-                                                addChannel(channelId, itemType, fanLevels);\n-                                                break;\n-                                            case 5:\n-                                                List<String> swingUDModes = new ArrayList<>();\n-                                                String[] swingUDString = descr.states;\n-                                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n-                                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n-                                                        swingUDModes.add(\"AUTO\");\n-                                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n-                                                        swingUDModes.add(\"SWING\");\n-                                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n-                                                        swingUDModes.add(\"SWIRL\");\n-                                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n-                                                        swingUDModes.add(\"WIDE\");\n-                                                    } else {\n-                                                        swingUDModes.add(swingUDString[i1]);\n-                                                    }\n-                                                }\n-                                                channelId = CHANNEL_TYPE_VANESUD;\n-                                                properties.put(\"Supported vane up/down modes\", swingUDModes.toString());\n-                                                updateProperties(properties);\n-                                                addChannel(channelId, itemType, swingUDModes);\n-                                                break;\n-                                            case 6:\n-                                                List<String> swingLRModes = new ArrayList<>();\n-                                                String[] swingLRString = descr.states;\n-                                                for (int i1 = 0; i1 < swingLRString.length; i1++) {\n-                                                    if (\"AUTO\".contentEquals(swingLRString[i1])) {\n-                                                        swingLRModes.add(\"AUTO\");\n-                                                    } else if (\"10\".contentEquals(swingLRString[i1])) {\n-                                                        swingLRModes.add(\"SWING\");\n-                                                    } else if (\"11\".contentEquals(swingLRString[i1])) {\n-                                                        swingLRModes.add(\"SWIRL\");\n-                                                    } else if (\"12\".contentEquals(swingLRString[i1])) {\n-                                                        swingLRModes.add(\"WIDE\");\n-                                                    } else {\n-                                                        swingLRModes.add(swingLRString[i1]);\n-                                                    }\n-                                                }\n-                                                channelId = CHANNEL_TYPE_VANESLR;\n-                                                properties.put(\"Supported vane left/right modes\",\n-                                                        swingLRModes.toString());\n-                                                updateProperties(properties);\n-                                                addChannel(channelId, itemType, swingLRModes);\n-                                                break;\n-                                            case 9:\n-                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n-                                                        descr.minValue);\n-                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n-                                                        descr.maxValue);\n-                                                channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                                itemType = \"Number:Temperature\";\n-                                                addChannel(channelId, itemType, null);\n-                                                break;\n-                                            case 10:\n-                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n-                                                        descr.minValue);\n-                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n-                                                        descr.maxValue);\n-                                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                                itemType = \"Number:Temperature\";\n-                                                addChannel(channelId, itemType, null);\n-                                                break;\n-                                            case 37:\n-                                                logger.trace(\"Add Channel Outdoor Temperature\");\n-                                                logger.trace(\"UID : {} ; description : {}\", datapoints[i].uid,\n-                                                        datapoints[i].descr);\n-                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n-                                                        descr.minValue);\n-                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n-                                                        descr.maxValue);\n-                                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                                itemType = \"Number:Temperature\";\n-                                                addChannel(channelId, itemType, null);\n-                                                break;\n-                                        }\n-                                    }\n-                                }\n-                            } else {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            }\n-                            logger.trace(\"Start Refresh Job\");\n-                            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0,\n-                                    INTESIS_REFRESH_INTERVAL_SEC, TimeUnit.SECONDS);\n-                        } else {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                }\n-            } finally {\n-            }\n+            getInfo();\n+            getDataPoints();\n+\n         }, 0, TimeUnit.SECONDS);\n     }\n \n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -109,7 +107,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n         // start background initialization:\n         scheduler.schedule(() -> {\n-            getInfo();\n+            populateProperties();\n             getDataPoints();\n \n         }, 0, TimeUnit.SECONDS);\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -108,7 +107,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         // start background initialization:\n         scheduler.schedule(() -> {\n             populateProperties();\n-            getDataPoints();\n+            populateChannels();\n+            updateProperties(properties);\n \n         }, 0, TimeUnit.SECONDS);\n     }\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -105,12 +107,14 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n \n         // start background initialization:\n-        scheduler.schedule(() -> {\n+        scheduler.submit(() -> {\n             populateProperties();\n-            populateChannels();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n             updateProperties(properties);\n \n-        }, 0, TimeUnit.SECONDS);\n+        });\n     }\n \n     @Override\n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -99,21 +97,22 @@ public class IntesisHomeHandler extends BaseThingHandler {\n     @Override\n     public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        config = getConfigAs(IntesisConfiguration.class);\n+        if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+        } else if (config.ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+        } else if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n         }\n \n         // start background initialization:\n         scheduler.submit(() -> {\n             populateProperties();\n             // query available dataPoints and build dynamic channels\n-            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n             updateProperties(properties);\n-\n         });\n     }\n \n", "next_change": {"commit": "a619be48d07d3b476b29034af12e1288a683833b", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 7d2b68bea9..982946626e 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -100,20 +100,23 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         config = getConfigAs(IntesisConfiguration.class);\n         if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+            return;\n         } else if (config.ipAddress.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+            return;\n         } else if (config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n+            return;\n+        } else {\n+            // start background initialization:\n+            scheduler.submit(() -> {\n+                populateProperties();\n+                // query available dataPoints and build dynamic channels\n+                postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                        + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n+                updateProperties(properties);\n+            });\n         }\n-\n-        // start background initialization:\n-        scheduler.submit(() -> {\n-            populateProperties();\n-            // query available dataPoints and build dynamic channels\n-            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n-                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n-            updateProperties(properties);\n-        });\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0OTk0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484349947", "body": "This is a horribly long inline method. Please put this code in a method and pass with `this::startupInitialization` (or whatever name). Also do split the content of this method in multiple smaller methods. You can select a block of code in eclipse (if you use that) and `Ctrl-1` will give you if you select a coherent part the option to extract as method. Even better would be to split different code behavior into separate classes.", "bodyText": "This is a horribly long inline method. Please put this code in a method and pass with this::startupInitialization (or whatever name). Also do split the content of this method in multiple smaller methods. You can select a block of code in eclipse (if you use that) and Ctrl-1 will give you if you select a coherent part the option to extract as method. Even better would be to split different code behavior into separate classes.", "bodyHTML": "<p dir=\"auto\">This is a horribly long inline method. Please put this code in a method and pass with <code>this::startupInitialization</code> (or whatever name). Also do split the content of this method in multiple smaller methods. You can select a block of code in eclipse (if you use that) and <code>Ctrl-1</code> will give you if you select a coherent part the option to extract as method. Even better would be to split different code behavior into separate classes.</p>", "author": "Hilbrand", "createdAt": "2020-09-07T10:42:02Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,566 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.WordUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.StateDescriptionFragmentBuilder;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler implements DynamicStateDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    private static String beautify(final String camelCaseWording) {\n+        final StringBuilder b = new StringBuilder();\n+        for (final String s : StringUtils.splitByCharacterTypeCamelCase(camelCaseWording)) {\n+            b.append(\" \");\n+            b.append(s);\n+        }\n+        final StringBuilder bs = new StringBuilder();\n+        for (final String t : StringUtils.splitByWholeSeparator(b.toString(), \" _\")) {\n+            bs.append(\" \");\n+            bs.append(t);\n+        }\n+\n+        return WordUtils.capitalizeFully(bs.toString()).trim();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1NTgwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484555804", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-07T19:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0OTk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -130,175 +109,9 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n \n         // start background initialization:\n         scheduler.schedule(() -> {\n-            try {\n-                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-                String response = api.postRequest(ipAddress, contentString);\n-                logger.trace(\"getInfo response : {}\", response);\n-                if (response != null) {\n-                    boolean success = getSuccess(response);\n-                    if (success) {\n-                        response resp = gson.fromJson(response, response.class);\n-                        data data = gson.fromJson(resp.data.toString(), data.class);\n-                        info info = gson.fromJson(data.info.toString(), info.class);\n-                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                        properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                        properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                        properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                        properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                        updateProperties(properties);\n-                        login();\n-                        if (!sessionId.isEmpty()) {\n-                            updateStatus(ThingStatus.ONLINE);\n-                            contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n-                                    + sessionId + \"\\\"}}\";\n-                            response = api.postRequest(ipAddress, contentString);\n-                            logger.trace(\"available Datapoints response : {}\", response);\n-                            if (response != null) {\n-                                success = getSuccess(response);\n-                                if (success) {\n-                                    logout();\n-                                    resp = gson.fromJson(response, response.class);\n-                                    data = gson.fromJson(resp.data.toString(), data.class);\n-                                    dp dp = gson.fromJson(data.dp.toString(), dp.class);\n-                                    datapoints[] datapoints = gson.fromJson(dp.datapoints, datapoints[].class);\n-                                    for (int i = 0; i < datapoints.length; i++) {\n-                                        descr descr = gson.fromJson(datapoints[i].descr, descr.class);\n-                                        String channelId = \"\";\n-                                        String itemType = \"String\";\n-                                        switch (datapoints[i].uid) {\n-                                            case 2:\n-                                                List<String> opModes = new ArrayList<>();\n-                                                String[] modString = descr.states;\n-                                                for (int i1 = 0; i1 < modString.length; i1++) {\n-                                                    switch (modString[i1]) {\n-                                                        case \"0\":\n-                                                            opModes.add(\"AUTO\");\n-                                                            break;\n-                                                        case \"1\":\n-                                                            opModes.add(\"HEAT\");\n-                                                            break;\n-                                                        case \"2\":\n-                                                            opModes.add(\"DRY\");\n-                                                            break;\n-                                                        case \"3\":\n-                                                            opModes.add(\"FAN\");\n-                                                            break;\n-                                                        case \"4\":\n-                                                            opModes.add(\"COOL\");\n-                                                            break;\n-                                                    }\n-                                                }\n-                                                properties.put(\"Supported modes\", opModes.toString());\n-                                                updateProperties(properties);\n-                                                channelId = CHANNEL_TYPE_MODE;\n-                                                addChannel(channelId, itemType, opModes);\n-                                                break;\n-                                            case 4:\n-                                                List<String> fanLevels = new ArrayList<>();\n-                                                String[] fanString = descr.states;\n-                                                for (int i1 = 0; i1 < fanString.length; i1++) {\n-                                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n-                                                        fanLevels.add(\"AUTO\");\n-                                                    } else {\n-                                                        fanLevels.add(fanString[i1]);\n-                                                    }\n-                                                }\n-                                                properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                                updateProperties(properties);\n-                                                channelId = CHANNEL_TYPE_FANSPEED;\n-                                                addChannel(channelId, itemType, fanLevels);\n-                                                break;\n-                                            case 5:\n-                                                List<String> swingUDModes = new ArrayList<>();\n-                                                String[] swingUDString = descr.states;\n-                                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n-                                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n-                                                        swingUDModes.add(\"AUTO\");\n-                                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n-                                                        swingUDModes.add(\"SWING\");\n-                                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n-                                                        swingUDModes.add(\"SWIRL\");\n-                                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n-                                                        swingUDModes.add(\"WIDE\");\n-                                                    } else {\n-                                                        swingUDModes.add(swingUDString[i1]);\n-                                                    }\n-                                                }\n-                                                channelId = CHANNEL_TYPE_VANESUD;\n-                                                properties.put(\"Supported vane up/down modes\", swingUDModes.toString());\n-                                                updateProperties(properties);\n-                                                addChannel(channelId, itemType, swingUDModes);\n-                                                break;\n-                                            case 6:\n-                                                List<String> swingLRModes = new ArrayList<>();\n-                                                String[] swingLRString = descr.states;\n-                                                for (int i1 = 0; i1 < swingLRString.length; i1++) {\n-                                                    if (\"AUTO\".contentEquals(swingLRString[i1])) {\n-                                                        swingLRModes.add(\"AUTO\");\n-                                                    } else if (\"10\".contentEquals(swingLRString[i1])) {\n-                                                        swingLRModes.add(\"SWING\");\n-                                                    } else if (\"11\".contentEquals(swingLRString[i1])) {\n-                                                        swingLRModes.add(\"SWIRL\");\n-                                                    } else if (\"12\".contentEquals(swingLRString[i1])) {\n-                                                        swingLRModes.add(\"WIDE\");\n-                                                    } else {\n-                                                        swingLRModes.add(swingLRString[i1]);\n-                                                    }\n-                                                }\n-                                                channelId = CHANNEL_TYPE_VANESLR;\n-                                                properties.put(\"Supported vane left/right modes\",\n-                                                        swingLRModes.toString());\n-                                                updateProperties(properties);\n-                                                addChannel(channelId, itemType, swingLRModes);\n-                                                break;\n-                                            case 9:\n-                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n-                                                        descr.minValue);\n-                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n-                                                        descr.maxValue);\n-                                                channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                                itemType = \"Number:Temperature\";\n-                                                addChannel(channelId, itemType, null);\n-                                                break;\n-                                            case 10:\n-                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n-                                                        descr.minValue);\n-                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n-                                                        descr.maxValue);\n-                                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                                itemType = \"Number:Temperature\";\n-                                                addChannel(channelId, itemType, null);\n-                                                break;\n-                                            case 37:\n-                                                logger.trace(\"Add Channel Outdoor Temperature\");\n-                                                logger.trace(\"UID : {} ; description : {}\", datapoints[i].uid,\n-                                                        datapoints[i].descr);\n-                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n-                                                        descr.minValue);\n-                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n-                                                        descr.maxValue);\n-                                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                                itemType = \"Number:Temperature\";\n-                                                addChannel(channelId, itemType, null);\n-                                                break;\n-                                        }\n-                                    }\n-                                }\n-                            } else {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            }\n-                            logger.trace(\"Start Refresh Job\");\n-                            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0,\n-                                    INTESIS_REFRESH_INTERVAL_SEC, TimeUnit.SECONDS);\n-                        } else {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                }\n-            } finally {\n-            }\n+            getInfo();\n+            getDataPoints();\n+\n         }, 0, TimeUnit.SECONDS);\n     }\n \n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -109,7 +107,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n         // start background initialization:\n         scheduler.schedule(() -> {\n-            getInfo();\n+            populateProperties();\n             getDataPoints();\n \n         }, 0, TimeUnit.SECONDS);\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -108,7 +107,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         // start background initialization:\n         scheduler.schedule(() -> {\n             populateProperties();\n-            getDataPoints();\n+            populateChannels();\n+            updateProperties(properties);\n \n         }, 0, TimeUnit.SECONDS);\n     }\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -105,12 +107,14 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n \n         // start background initialization:\n-        scheduler.schedule(() -> {\n+        scheduler.submit(() -> {\n             populateProperties();\n-            populateChannels();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n             updateProperties(properties);\n \n-        }, 0, TimeUnit.SECONDS);\n+        });\n     }\n \n     @Override\n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -99,21 +97,22 @@ public class IntesisHomeHandler extends BaseThingHandler {\n     @Override\n     public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        config = getConfigAs(IntesisConfiguration.class);\n+        if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+        } else if (config.ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+        } else if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n         }\n \n         // start background initialization:\n         scheduler.submit(() -> {\n             populateProperties();\n             // query available dataPoints and build dynamic channels\n-            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n             updateProperties(properties);\n-\n         });\n     }\n \n", "next_change": {"commit": "a619be48d07d3b476b29034af12e1288a683833b", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 7d2b68bea9..982946626e 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -100,20 +100,23 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         config = getConfigAs(IntesisConfiguration.class);\n         if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+            return;\n         } else if (config.ipAddress.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+            return;\n         } else if (config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n+            return;\n+        } else {\n+            // start background initialization:\n+            scheduler.submit(() -> {\n+                populateProperties();\n+                // query available dataPoints and build dynamic channels\n+                postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                        + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n+                updateProperties(properties);\n+            });\n         }\n-\n-        // start background initialization:\n-        scheduler.submit(() -> {\n-            populateProperties();\n-            // query available dataPoints and build dynamic channels\n-            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n-                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n-            updateProperties(properties);\n-        });\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1MDI2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484350269", "body": "This can be a switch statement", "bodyText": "This can be a switch statement", "bodyHTML": "<p dir=\"auto\">This can be a switch statement</p>", "author": "Hilbrand", "createdAt": "2020-09-07T10:42:46Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,566 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.WordUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.StateDescriptionFragmentBuilder;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler implements DynamicStateDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    private static String beautify(final String camelCaseWording) {\n+        final StringBuilder b = new StringBuilder();\n+        for (final String s : StringUtils.splitByCharacterTypeCamelCase(camelCaseWording)) {\n+            b.append(\" \");\n+            b.append(s);\n+        }\n+        final StringBuilder bs = new StringBuilder();\n+        for (final String t : StringUtils.splitByWholeSeparator(b.toString(), \" _\")) {\n+            bs.append(\" \");\n+            bs.append(t);\n+        }\n+\n+        return WordUtils.capitalizeFully(bs.toString()).trim();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null) {\n+                    boolean success = getSuccess(response);\n+                    if (success) {\n+                        response resp = gson.fromJson(response, response.class);\n+                        data data = gson.fromJson(resp.data.toString(), data.class);\n+                        info info = gson.fromJson(data.info.toString(), info.class);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                        updateProperties(properties);\n+                        login();\n+                        if (!sessionId.isEmpty()) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                            contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                                    + sessionId + \"\\\"}}\";\n+                            response = api.postRequest(ipAddress, contentString);\n+                            logger.trace(\"available Datapoints response : {}\", response);\n+                            if (response != null) {\n+                                success = getSuccess(response);\n+                                if (success) {\n+                                    logout();\n+                                    resp = gson.fromJson(response, response.class);\n+                                    data = gson.fromJson(resp.data.toString(), data.class);\n+                                    dp dp = gson.fromJson(data.dp.toString(), dp.class);\n+                                    datapoints[] datapoints = gson.fromJson(dp.datapoints, datapoints[].class);\n+                                    for (int i = 0; i < datapoints.length; i++) {\n+                                        descr descr = gson.fromJson(datapoints[i].descr, descr.class);\n+                                        String channelId = \"\";\n+                                        String itemType = \"String\";\n+                                        switch (datapoints[i].uid) {\n+                                            case 2:\n+                                                List<String> opModes = new ArrayList<>();\n+                                                String[] modString = descr.states;\n+                                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                                    switch (modString[i1]) {\n+                                                        case \"0\":\n+                                                            opModes.add(\"AUTO\");\n+                                                            break;\n+                                                        case \"1\":\n+                                                            opModes.add(\"HEAT\");\n+                                                            break;\n+                                                        case \"2\":\n+                                                            opModes.add(\"DRY\");\n+                                                            break;\n+                                                        case \"3\":\n+                                                            opModes.add(\"FAN\");\n+                                                            break;\n+                                                        case \"4\":\n+                                                            opModes.add(\"COOL\");\n+                                                            break;\n+                                                    }\n+                                                }\n+                                                properties.put(\"Supported modes\", opModes.toString());\n+                                                updateProperties(properties);\n+                                                channelId = CHANNEL_TYPE_MODE;\n+                                                addChannel(channelId, itemType, opModes);\n+                                                break;\n+                                            case 4:\n+                                                List<String> fanLevels = new ArrayList<>();\n+                                                String[] fanString = descr.states;\n+                                                for (int i1 = 0; i1 < fanString.length; i1++) {\n+                                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n+                                                        fanLevels.add(\"AUTO\");\n+                                                    } else {\n+                                                        fanLevels.add(fanString[i1]);\n+                                                    }\n+                                                }\n+                                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                                updateProperties(properties);\n+                                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                                addChannel(channelId, itemType, fanLevels);\n+                                                break;\n+                                            case 5:\n+                                                List<String> swingUDModes = new ArrayList<>();\n+                                                String[] swingUDString = descr.states;\n+                                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n+                                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"AUTO\");\n+                                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"SWING\");\n+                                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"SWIRL\");\n+                                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"WIDE\");\n+                                                    } else {\n+                                                        swingUDModes.add(swingUDString[i1]);\n+                                                    }\n+                                                }\n+                                                channelId = CHANNEL_TYPE_VANESUD;\n+                                                properties.put(\"Supported vane up/down modes\", swingUDModes.toString());\n+                                                updateProperties(properties);\n+                                                addChannel(channelId, itemType, swingUDModes);\n+                                                break;\n+                                            case 6:\n+                                                List<String> swingLRModes = new ArrayList<>();\n+                                                String[] swingLRString = descr.states;\n+                                                for (int i1 = 0; i1 < swingLRString.length; i1++) {\n+                                                    if (\"AUTO\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"AUTO\");\n+                                                    } else if (\"10\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"SWING\");\n+                                                    } else if (\"11\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"SWIRL\");\n+                                                    } else if (\"12\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"WIDE\");\n+                                                    } else {\n+                                                        swingLRModes.add(swingLRString[i1]);\n+                                                    }\n+                                                }\n+                                                channelId = CHANNEL_TYPE_VANESLR;\n+                                                properties.put(\"Supported vane left/right modes\",\n+                                                        swingLRModes.toString());\n+                                                updateProperties(properties);\n+                                                addChannel(channelId, itemType, swingLRModes);\n+                                                break;\n+                                            case 9:\n+                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n+                                                        descr.minValue);\n+                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n+                                                        descr.maxValue);\n+                                                channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                                itemType = \"Number:Temperature\";\n+                                                addChannel(channelId, itemType, null);\n+                                                break;\n+                                            case 10:\n+                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n+                                                        descr.minValue);\n+                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n+                                                        descr.maxValue);\n+                                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                                itemType = \"Number:Temperature\";\n+                                                addChannel(channelId, itemType, null);\n+                                                break;\n+                                            case 37:\n+                                                logger.trace(\"Add Channel Outdoor Temperature\");\n+                                                logger.trace(\"UID : {} ; description : {}\", datapoints[i].uid,\n+                                                        datapoints[i].descr);\n+                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n+                                                        descr.minValue);\n+                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n+                                                        descr.maxValue);\n+                                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                                itemType = \"Number:Temperature\";\n+                                                addChannel(channelId, itemType, null);\n+                                                break;\n+                                        }\n+                                    }\n+                                }\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                            logger.trace(\"Start Refresh Job\");\n+                            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0,\n+                                    INTESIS_REFRESH_INTERVAL_SEC, TimeUnit.SECONDS);\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } finally {\n+            }\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // getAllUidValues();\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else if ((\"SWING\").equals(command.toString())) {\n+                        value = 10;\n+                    } else if ((\"SWIRL\").equals(command.toString())) {\n+                        value = 11;\n+                    } else if ((\"WIDE\").equals(command.toString())) {\n+                        value = 12;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1NjgzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484556836", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-07T20:01:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1MDI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -340,35 +153,65 @@ public class IntesisHomeHandler extends BaseThingHandler implements DynamicState\n                     break;\n                 case CHANNEL_TYPE_VANESUD:\n                     uid = 5;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n                     }\n                     break;\n                 case CHANNEL_TYPE_VANESLR:\n                     uid = 6;\n-                    if ((\"AUTO\").equals(command.toString())) {\n-                        value = 0;\n-                    } else if ((\"SWING\").equals(command.toString())) {\n-                        value = 10;\n-                    } else if ((\"SWIRL\").equals(command.toString())) {\n-                        value = 11;\n-                    } else if ((\"WIDE\").equals(command.toString())) {\n-                        value = 12;\n-                    } else {\n-                        value = Integer.parseInt(command.toString());\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n                     }\n                     break;\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n-                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    if (command instanceof QuantityType) {\n+                        value = ((QuantityType) command).toUnit(SIUnits.CELSIUS).intValue() * 10;\n+                    }\n                     break;\n             }\n         }\n", "next_change": {"commit": "bca20a55c1cb0440d955a3419a648b360a62f01d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..5cd1c7eec8 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -210,7 +207,11 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n                     if (command instanceof QuantityType) {\n-                        value = ((QuantityType) command).toUnit(SIUnits.CELSIUS).intValue() * 10;\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n                     }\n                     break;\n             }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 5cd1c7eec8..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -217,22 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                boolean success = getSuccess(response);\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                            + password + \"\\\"}}\";\n-                    response = api.postRequest(ipAddress, sessionString);\n-                } else {\n-                    logout();\n-                    updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1MDg3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484350872", "body": "Remove usage of apache library as it will be removed in openHAB 3", "bodyText": "Remove usage of apache library as it will be removed in openHAB 3", "bodyHTML": "<p dir=\"auto\">Remove usage of apache library as it will be removed in openHAB 3</p>", "author": "Hilbrand", "createdAt": "2020-09-07T10:43:53Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,566 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.WordUtils;", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MjA0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484562041", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-09-07T20:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1MDg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -19,15 +19,11 @@ import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n-import java.util.Locale;\n import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n-import org.apache.commons.lang.StringUtils;\n-import org.apache.commons.lang.WordUtils;\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.jetty.client.HttpClient;\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -22,6 +22,8 @@ import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n import java.util.stream.Collectors;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NDYzMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484354630", "body": "Put `DynamicStateDescriptionProvider` in a separate class and let it extend `BaseDynamicStateDescriptionProvider` that way you can make a minimal implementation.", "bodyText": "Put DynamicStateDescriptionProvider in a separate class and let it extend BaseDynamicStateDescriptionProvider that way you can make a minimal implementation.", "bodyHTML": "<p dir=\"auto\">Put <code>DynamicStateDescriptionProvider</code> in a separate class and let it extend <code>BaseDynamicStateDescriptionProvider</code> that way you can make a minimal implementation.</p>", "author": "Hilbrand", "createdAt": "2020-09-07T10:50:28Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,566 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.WordUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.StateDescriptionFragmentBuilder;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler implements DynamicStateDescriptionProvider {", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1NzcwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484557705", "bodyText": "Removed Leftover", "author": "hmerk", "createdAt": "2020-09-07T20:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NDYzMA=="}], "type": "inlineReview", "revised_code": {"commit": "e773227e604233c9a344f5184232133c1db725f8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 4e96513b0c..8b03e96872 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -76,13 +71,12 @@ import com.google.gson.Gson;\n  * @author Hans-J\u00f6rg Merk - Initial contribution\n  */\n @NonNullByDefault\n-public class IntesisHomeHandler extends BaseThingHandler implements DynamicStateDescriptionProvider {\n+public class IntesisHomeHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n     private final IntesisHomeHttpApi api;\n     private IntesisConfiguration config = new IntesisConfiguration();\n \n-    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n     private final Map<String, String> properties = new HashMap<>();\n \n     private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 8b03e96872..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -85,7 +84,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n     private String ipAddress = \"\";\n     private String password = \"\";\n-    private String sessionId = \"\";\n \n     final Gson gson = new Gson();\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -74,18 +76,16 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n     private final IntesisHomeHttpApi api;\n-    private IntesisConfiguration config = new IntesisConfiguration();\n \n     private final Map<String, String> properties = new HashMap<>();\n \n-    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+    private final IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n+    private final Gson gson = new Gson();\n \n-    private String ipAddress = \"\";\n-    private String password = \"\";\n+    private IntesisConfiguration config = new IntesisConfiguration();\n \n-    final Gson gson = new Gson();\n+    private @Nullable ScheduledFuture<?> refreshJob;\n \n     public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n             IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n", "next_change": null}]}}]}}]}}, {"oid": "e773227e604233c9a344f5184232133c1db725f8", "url": "https://github.com/openhab/openhab-addons/commit/e773227e604233c9a344f5184232133c1db725f8", "message": "Implement changes after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-07T20:52:19Z", "type": "commit"}, {"oid": "6a765029cf496a5128b348dfc805a72c32a7a405", "url": "https://github.com/openhab/openhab-addons/commit/6a765029cf496a5128b348dfc805a72c32a7a405", "message": "resolv conflicting pom.xml\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-07T20:58:14Z", "type": "commit"}, {"oid": "f4a15a66deb29dc15cdc45a854493048cd43332b", "url": "https://github.com/openhab/openhab-addons/commit/f4a15a66deb29dc15cdc45a854493048cd43332b", "message": "Merge branch '2.5.x' into Intesis_Binding", "committedDate": "2020-09-07T21:12:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzMDUyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484930522", "body": "```suggestion\r\npublic class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\r\n}\r\n```\r\n\r\nAnd in `IntesisHomeHandler` replace\r\n```\r\n    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\r\n```\r\nwith\r\n```\r\n     intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\r\n```\r\n\r\nAnd remove `updateStateDescription`.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n          \n          \n            \n            \n          \n          \n            \n                private final Logger logger = LoggerFactory.getLogger(getClass());\n          \n          \n            \n            \n          \n          \n            \n                private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n          \n          \n            \n            \n          \n          \n            \n                public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n          \n          \n            \n                    logger.debug(\"Adding state description for channel {}\", channelUID);\n          \n          \n            \n                    descriptions.put(channelUID, description);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public void removeAllDescriptions() {\n          \n          \n            \n                    logger.debug(\"Removing all state descriptions\");\n          \n          \n            \n                    descriptions.clear();\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public @Nullable StateDescription getStateDescription(Channel channel,\n          \n          \n            \n                        @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n          \n          \n            \n                    StateDescription description = descriptions.get(channel.getUID());\n          \n          \n            \n                    return description;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                @Deactivate\n          \n          \n            \n                public void deactivate() {\n          \n          \n            \n                    descriptions.clear();\n          \n          \n            \n                }\n          \n          \n            \n            }\n          \n          \n            \n            public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n          \n          \n            \n            }\n          \n      \n    \n    \n  \n\nAnd in IntesisHomeHandler replace\n    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n\nwith\n     intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n\nAnd remove updateStateDescription.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"28\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">IntesisDynamicStateDescriptionProvider</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">BaseDynamicStateDescriptionProvider</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"29\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"30\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Logger</span> logger <span class=\"pl-k\">=</span> <span class=\"pl-smi\">LoggerFactory</span><span class=\"pl-k\">.</span>getLogger(getClass());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"31\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"32\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">ChannelUID</span>, @</span><span class=\"pl-smi\">Nullable</span> <span class=\"pl-smi\">StateDescription</span><span class=\"pl-k\">&gt;</span> descriptions <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ConcurrentHashMap&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"33\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"34\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> setDescription(<span class=\"pl-smi\">ChannelUID</span> channelUID, <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">StateDescription</span> description) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"35\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Adding state description for channel {}<span class=\"pl-pds\">\"</span></span>, channelUID);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"36\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        descriptions<span class=\"pl-k\">.</span>put(channelUID, description);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"37\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"38\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"39\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> removeAllDescriptions() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"40\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Removing all state descriptions<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"41\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        descriptions<span class=\"pl-k\">.</span>clear();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"42\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"43\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"44\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Override</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"45\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">StateDescription</span> getStateDescription(<span class=\"pl-smi\">Channel</span> channel,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"46\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">StateDescription</span> originalStateDescription, <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">Locale</span> locale) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"47\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">StateDescription</span> description <span class=\"pl-k\">=</span> descriptions<span class=\"pl-k\">.</span>get(channel<span class=\"pl-k\">.</span>getUID());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"48\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> description;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"49\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"50\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"51\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Override</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"52\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Deactivate</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"53\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> deactivate() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"54\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        descriptions<span class=\"pl-k\">.</span>clear();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"55\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">}</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"28\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">IntesisDynamicStateDescriptionProvider</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">BaseDynamicStateDescriptionProvider</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"29\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">}</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">And in <code>IntesisHomeHandler</code> replace</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\"><pre><code>    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n</code></pre></div>\n<p dir=\"auto\">with</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"     intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\"><pre><code>     intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n</code></pre></div>\n<p dir=\"auto\">And remove <code>updateStateDescription</code>.</p>", "author": "Hilbrand", "createdAt": "2020-09-08T13:42:53Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseDynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@Component(service = { DynamicStateDescriptionProvider.class, IntesisDynamicStateDescriptionProvider.class })\n+@NonNullByDefault\n+public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n+\n+    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n+        logger.debug(\"Adding state description for channel {}\", channelUID);\n+        descriptions.put(channelUID, description);\n+    }\n+\n+    public void removeAllDescriptions() {\n+        logger.debug(\"Removing all state descriptions\");\n+        descriptions.clear();\n+    }\n+\n+    @Override\n+    public @Nullable StateDescription getStateDescription(Channel channel,\n+            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n+        StateDescription description = descriptions.get(channel.getUID());\n+        return description;\n+    }\n+\n+    @Override\n+    @Deactivate\n+    public void deactivate() {\n+        descriptions.clear();\n+    }\n+}", "originalCommit": "f4a15a66deb29dc15cdc45a854493048cd43332b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5Mzk2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484993961", "bodyText": "Thanks @Hilbrand, I will give it a try later tonight or tomorrow and report back.", "author": "hmerk", "createdAt": "2020-09-08T15:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzMDUyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4MzY2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r485183660", "bodyText": "Thanks again @Hilbrand !!!! That worked an is implemented now. Had some trouble with the commit, but solved it.", "author": "hmerk", "createdAt": "2020-09-08T20:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzMDUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "b21bc3ddd7ac54ec9a8a1dd1c0eb088e0291c0bc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\nindex 80eef35d66..8fbaf0bf2d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n", "chunk": "@@ -36,30 +25,4 @@ import org.slf4j.LoggerFactory;\n @NonNullByDefault\n public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n \n-    private final Logger logger = LoggerFactory.getLogger(getClass());\n-\n-    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n-\n-    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n-        logger.debug(\"Adding state description for channel {}\", channelUID);\n-        descriptions.put(channelUID, description);\n-    }\n-\n-    public void removeAllDescriptions() {\n-        logger.debug(\"Removing all state descriptions\");\n-        descriptions.clear();\n-    }\n-\n-    @Override\n-    public @Nullable StateDescription getStateDescription(Channel channel,\n-            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n-        StateDescription description = descriptions.get(channel.getUID());\n-        return description;\n-    }\n-\n-    @Override\n-    @Deactivate\n-    public void deactivate() {\n-        descriptions.clear();\n-    }\n }\n", "next_change": {"commit": "f2926350d73fde0aa6dbe4d6ac287bb2524d403d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\nindex 8fbaf0bf2d..80eef35d66 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n", "chunk": "@@ -25,4 +36,30 @@ import org.osgi.service.component.annotations.Component;\n @NonNullByDefault\n public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n \n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n+\n+    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n+        logger.debug(\"Adding state description for channel {}\", channelUID);\n+        descriptions.put(channelUID, description);\n+    }\n+\n+    public void removeAllDescriptions() {\n+        logger.debug(\"Removing all state descriptions\");\n+        descriptions.clear();\n+    }\n+\n+    @Override\n+    public @Nullable StateDescription getStateDescription(Channel channel,\n+            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n+        StateDescription description = descriptions.get(channel.getUID());\n+        return description;\n+    }\n+\n+    @Override\n+    @Deactivate\n+    public void deactivate() {\n+        descriptions.clear();\n+    }\n }\n", "next_change": {"commit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\nindex 80eef35d66..8fbaf0bf2d 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java\n", "chunk": "@@ -36,30 +25,4 @@ import org.slf4j.LoggerFactory;\n @NonNullByDefault\n public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n \n-    private final Logger logger = LoggerFactory.getLogger(getClass());\n-\n-    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n-\n-    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n-        logger.debug(\"Adding state description for channel {}\", channelUID);\n-        descriptions.put(channelUID, description);\n-    }\n-\n-    public void removeAllDescriptions() {\n-        logger.debug(\"Removing all state descriptions\");\n-        descriptions.clear();\n-    }\n-\n-    @Override\n-    public @Nullable StateDescription getStateDescription(Channel channel,\n-            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n-        StateDescription description = descriptions.get(channel.getUID());\n-        return description;\n-    }\n-\n-    @Override\n-    @Deactivate\n-    public void deactivate() {\n-        descriptions.clear();\n-    }\n }\n", "next_change": null}]}}]}}]}}, {"oid": "b21bc3ddd7ac54ec9a8a1dd1c0eb088e0291c0bc", "url": "https://github.com/openhab/openhab-addons/commit/b21bc3ddd7ac54ec9a8a1dd1c0eb088e0291c0bc", "message": "Refactor DynamicStateDescriptionProvider after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-08T20:32:24Z", "type": "commit"}, {"oid": "f2926350d73fde0aa6dbe4d6ac287bb2524d403d", "url": "https://github.com/openhab/openhab-addons/commit/f2926350d73fde0aa6dbe4d6ac287bb2524d403d", "message": "Revert \"Refactor DynamicStateDescriptionProvider after review\"\n\nThis reverts commit c87f34f5eba0cba21fda6feff73bcae2352465f0.", "committedDate": "2020-09-08T20:32:24Z", "type": "commit"}, {"oid": "fcac653784baca12d96d9bbf142e3540966e6c0d", "url": "https://github.com/openhab/openhab-addons/commit/fcac653784baca12d96d9bbf142e3540966e6c0d", "message": "Refactor dynamic state options\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-08T20:38:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTYzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487789639", "body": "It seems a bit unreasonable to log the stack trace when the network fails.", "bodyText": "It seems a bit unreasonable to log the stack trace when the network fails.", "bodyHTML": "<p dir=\"auto\">It seems a bit unreasonable to log the stack trace when the network fails.</p>", "author": "fwolter", "createdAt": "2020-09-14T09:52:55Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.api;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link IntesisHomeHttpApi} wraps the IntesisHome REST API and provides various low level function to access the\n+ * device api (not cloud api).\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHttpApi {\n+    public static final String CONTENT_TYPE_JSON = \"application/json; charset=UTF-8\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHttpApi.class);\n+    private final HttpClient httpClient;\n+\n+    public IntesisHomeHttpApi(IntesisConfiguration config, HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Used to post a request to the device\n+     *\n+     * @param ipAddress of the device\n+     * @param content string\n+     * @return JSON string as response\n+     */\n+    @Nullable\n+    public String postRequest(String ipAddress, String contentString) {\n+        String url = \"http://\" + ipAddress + \"/api.cgi\";\n+        try {\n+            Request request = httpClient.POST(url);\n+            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            request.content(new StringContentProvider(contentString), \"application/json\");\n+\n+            ContentResponse contentResponse = request.timeout(5, TimeUnit.SECONDS).send();\n+\n+            String response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n+            logger.trace(\"HTTP Response {}: {}\", contentResponse.getStatus(), response);\n+\n+            if (response != null && !response.isEmpty()) {\n+                return response;\n+            } else {\n+                return null;\n+            }\n+        } catch (TimeoutException | InterruptedException | ExecutionException e) {\n+            logger.debug(\"Could not make HTTP Post request\", e);", "originalCommit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NTY5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487875694", "bodyText": "removed logging of stack trace", "author": "hmerk", "createdAt": "2020-09-14T12:33:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTYzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "623adb7055714c71dbf4efc86ce64d0804311b66", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\nindex 7e2259c1ca..a69624b7c2 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java\n", "chunk": "@@ -70,7 +70,7 @@ public class IntesisHomeHttpApi {\n                 return null;\n             }\n         } catch (TimeoutException | InterruptedException | ExecutionException e) {\n-            logger.debug(\"Could not make HTTP Post request\", e);\n+            logger.debug(\"Could not make HTTP Post request\");\n         }\n         return null;\n     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MjYxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487792611", "body": "Can you handle the refresh command?", "bodyText": "Can you handle the refresh command?", "bodyHTML": "<p dir=\"auto\">Can you handle the refresh command?</p>", "author": "fwolter", "createdAt": "2020-09-14T09:57:41Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,552 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // getAllUidValues();", "originalCommit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgzMDUyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487830527", "bodyText": "Removed debug logger.\nRefresh command is not supported as the binding polls all values every 30 seconds.", "author": "hmerk", "createdAt": "2020-09-14T11:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MjYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "623adb7055714c71dbf4efc86ce64d0804311b66", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex af9e404b0c..ae486a0f96 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -130,7 +129,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         int value = 0;\n         String channelId = channelUID.getId();\n         if (command instanceof RefreshType) {\n-            // getAllUidValues();\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n         } else {\n             switch (channelId) {\n                 case CHANNEL_TYPE_POWER:\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NTA0NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487795044", "body": "`toUnit()` is Nullable. Please add a null check.", "bodyText": "toUnit() is Nullable. Please add a null check.", "bodyHTML": "<p dir=\"auto\"><code>toUnit()</code> is Nullable. Please add a null check.</p>", "author": "fwolter", "createdAt": "2020-09-14T10:01:41Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,552 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // getAllUidValues();\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        value = ((QuantityType) command).toUnit(SIUnits.CELSIUS).intValue() * 10;", "originalCommit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzQzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487873436", "bodyText": "Could you help me with this ??? Can't figure out how to detect if toUnit(Unit) can be checked here.", "author": "hmerk", "createdAt": "2020-09-14T12:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NTA0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAwMDI1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r488000252", "bodyText": "Solved and changed", "author": "hmerk", "createdAt": "2020-09-14T14:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NTA0NA=="}], "type": "inlineReview", "revised_code": {"commit": "bca20a55c1cb0440d955a3419a648b360a62f01d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex af9e404b0c..5cd1c7eec8 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -208,7 +207,11 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                 case CHANNEL_TYPE_TARGETTEMP:\n                     uid = 9;\n                     if (command instanceof QuantityType) {\n-                        value = ((QuantityType) command).toUnit(SIUnits.CELSIUS).intValue() * 10;\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n                     }\n                     break;\n             }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 5cd1c7eec8..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -217,22 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                boolean success = getSuccess(response);\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                            + password + \"\\\"}}\";\n-                    response = api.postRequest(ipAddress, sessionString);\n-                } else {\n-                    logout();\n-                    updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NjE0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487796141", "body": "Please add a null check instead of suppressing the warning.", "bodyText": "Please add a null check instead of suppressing the warning.", "bodyHTML": "<p dir=\"auto\">Please add a null check instead of suppressing the warning.</p>", "author": "fwolter", "createdAt": "2020-09-14T10:03:39Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,552 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // getAllUidValues();\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        value = ((QuantityType) command).toUnit(SIUnits.CELSIUS).intValue() * 10;\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (int i = 0; i < datapoints.length; i++) {\n+                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoints[i].uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                String[] modString = descr.states;\n+                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                    switch (modString[i1]) {\n+                                        case \"0\":\n+                                            opModes.add(\"AUTO\");\n+                                            break;\n+                                        case \"1\":\n+                                            opModes.add(\"HEAT\");\n+                                            break;\n+                                        case \"2\":\n+                                            opModes.add(\"DRY\");\n+                                            break;\n+                                        case \"3\":\n+                                            opModes.add(\"FAN\");\n+                                            break;\n+                                        case \"4\":\n+                                            opModes.add(\"COOL\");\n+                                            break;\n+                                    }\n+                                }\n+                                properties.put(\"Supported modes\", opModes.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_MODE;\n+                                addChannel(channelId, itemType, opModes);\n+                                break;\n+                            case 4:\n+                                List<String> fanLevels = new ArrayList<>();\n+                                String[] fanString = descr.states;\n+                                for (int i1 = 0; i1 < fanString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n+                                        fanLevels.add(\"AUTO\");\n+                                    } else {\n+                                        fanLevels.add(fanString[i1]);\n+                                    }\n+                                }\n+                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                addChannel(channelId, itemType, fanLevels);\n+                                break;\n+                            case 5:\n+                                List<String> swingUDModes = new ArrayList<>();\n+                                String[] swingUDString = descr.states;\n+                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingUDModes.add(swingUDString[i1]);\n+                                    }\n+                                }\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingUDModes.toString());\n+                                updateProperties(properties);\n+                                addChannel(channelId, itemType, swingUDModes);\n+                                break;\n+                            case 6:\n+                                List<String> swingLRModes = new ArrayList<>();\n+                                String[] swingLRString = descr.states;\n+                                for (int i1 = 0; i1 < swingLRString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingLRModes.add(swingLRString[i1]);\n+                                    }\n+                                }\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingLRModes.toString());\n+                                updateProperties(properties);\n+                                addChannel(channelId, itemType, swingLRModes);\n+                                break;\n+                            case 9:\n+                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid, descr.minValue);\n+                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid, descr.maxValue);\n+                                channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                itemType = \"Number:Temperature\";\n+                                addChannel(channelId, itemType, null);\n+                                break;\n+                            case 10:\n+                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid, descr.minValue);\n+                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid, descr.maxValue);\n+                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                itemType = \"Number:Temperature\";\n+                                addChannel(channelId, itemType, null);\n+                                break;\n+                            case 37:\n+                                logger.trace(\"Add Channel Outdoor Temperature\");\n+                                logger.trace(\"UID : {} ; description : {}\", datapoints[i].uid, datapoints[i].descr);\n+                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid, descr.minValue);\n+                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid, descr.maxValue);\n+                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                itemType = \"Number:Temperature\";\n+                                addChannel(channelId, itemType, null);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+            logger.trace(\"Start Refresh Job\");\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                    TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")", "originalCommit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4MjE2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487882167", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-14T12:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NjE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "623adb7055714c71dbf4efc86ce64d0804311b66", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex af9e404b0c..ae486a0f96 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -526,7 +525,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    @SuppressWarnings(\"null\")\n     public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n         if (thing.getChannel(channelId) == null) {\n             logger.trace(\"Channel '{}' for UID to be added\", channelId);\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ae486a0f96..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -525,7 +514,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n         if (thing.getChannel(channelId) == null) {\n             logger.trace(\"Channel '{}' for UID to be added\", channelId);\n             ThingBuilder thingBuilder = editThing();\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}, {"oid": "623adb7055714c71dbf4efc86ce64d0804311b66", "url": "https://github.com/openhab/openhab-addons/commit/623adb7055714c71dbf4efc86ce64d0804311b66", "message": "Applied changes after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-14T12:47:41Z", "type": "commit"}, {"oid": "bca20a55c1cb0440d955a3419a648b360a62f01d", "url": "https://github.com/openhab/openhab-addons/commit/bca20a55c1cb0440d955a3419a648b360a62f01d", "message": "Added null check for toUnit() usage\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-14T14:58:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMTQwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489201400", "body": "A for-each loop would be preferred here unless you really need to know the current index.\r\n```suggestion\r\n                    for (Datapoints datapoint : datapoints) {\r\n                        Descr descr = gson.fromJson(datapoint.descr, Descr.class);\r\n```", "bodyText": "A for-each loop would be preferred here unless you really need to know the current index.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                for (int i = 0; i < datapoints.length; i++) {\n          \n          \n            \n                                    Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n          \n          \n            \n                                for (Datapoints datapoint : datapoints) {\n          \n          \n            \n                                    Descr descr = gson.fromJson(datapoint.descr, Descr.class);", "bodyHTML": "<p dir=\"auto\">A for-each loop would be preferred here unless you really need to know the current index.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">for</span> (<span class=\"pl-k x x-first\">int</span><span class=\"x\"> i </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">0</span><span class=\"x\">; i </span><span class=\"pl-k x\">&lt;</span><span class=\"x x-last\"> </span>datapoints<span class=\"pl-k x x-first\">.</span><span class=\"x\">length; i</span><span class=\"pl-k x x-last\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        <span class=\"pl-smi\">Descr</span> descr <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(<span class=\"x x-first x-last\">datapoints[i]</span><span class=\"pl-k\">.</span>descr, <span class=\"pl-smi\">Descr</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">for</span> (<span class=\"pl-smi x x-first\">Datapoints</span><span class=\"x\"> datapoint </span><span class=\"pl-k x\">:</span><span class=\"x x-last\"> </span>datapoints) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-smi\">Descr</span> descr <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(<span class=\"x x-first x-last\">datapoint</span><span class=\"pl-k\">.</span>descr, <span class=\"pl-smi\">Descr</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-16T06:47:54Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,557 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (int i = 0; i < datapoints.length; i++) {\n+                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);", "originalCommit": "bca20a55c1cb0440d955a3419a648b360a62f01d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNTU3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489215574", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T07:17:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMTQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 5cd1c7eec8..42bda92937 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -403,16 +403,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     Data data = gson.fromJson(resp.data.toString(), Data.class);\n                     Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n                     Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                    for (int i = 0; i < datapoints.length; i++) {\n-                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n+                    for (Datapoints datapoint : datapoints) {\n+                        Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n                         String channelId = \"\";\n                         String itemType = \"String\";\n-                        switch (datapoints[i].uid) {\n+                        switch (datapoint.uid) {\n                             case 2:\n                                 List<String> opModes = new ArrayList<>();\n-                                String[] modString = descr.states;\n-                                for (int i1 = 0; i1 < modString.length; i1++) {\n-                                    switch (modString[i1]) {\n+                                for (String modString : descr.states) {\n+                                    switch (modString) {\n                                         case \"0\":\n                                             opModes.add(\"AUTO\");\n                                             break;\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -396,106 +386,111 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             String response = api.postRequest(ipAddress, contentString);\n             logger.trace(\"available Datapoints response : {}\", response);\n             if (response != null) {\n-                boolean success = getSuccess(response);\n-                if (success) {\n-                    logout();\n+                try {\n                     Response resp = gson.fromJson(response, Response.class);\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n-                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                    for (Datapoints datapoint : datapoints) {\n-                        Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                        String channelId = \"\";\n-                        String itemType = \"String\";\n-                        switch (datapoint.uid) {\n-                            case 2:\n-                                List<String> opModes = new ArrayList<>();\n-                                for (String modString : descr.states) {\n-                                    switch (modString) {\n-                                        case \"0\":\n-                                            opModes.add(\"AUTO\");\n-                                            break;\n-                                        case \"1\":\n-                                            opModes.add(\"HEAT\");\n-                                            break;\n-                                        case \"2\":\n-                                            opModes.add(\"DRY\");\n-                                            break;\n-                                        case \"3\":\n-                                            opModes.add(\"FAN\");\n-                                            break;\n-                                        case \"4\":\n-                                            opModes.add(\"COOL\");\n-                                            break;\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n                                     }\n-                                }\n-                                properties.put(\"Supported modes\", opModes.toString());\n-                                updateProperties(properties);\n-                                channelId = CHANNEL_TYPE_MODE;\n-                                addChannel(channelId, itemType, opModes);\n-                                break;\n-                            case 4:\n-                                List<String> fanLevels = new ArrayList<>();\n-                                for (String fanString : descr.states) {\n-                                    if (\"AUTO\".contentEquals(fanString)) {\n-                                        fanLevels.add(\"AUTO\");\n-                                    } else {\n-                                        fanLevels.add(fanString);\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n                                     }\n-                                }\n-                                properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                updateProperties(properties);\n-                                channelId = CHANNEL_TYPE_FANSPEED;\n-                                addChannel(channelId, itemType, fanLevels);\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                List<String> swingModes = new ArrayList<>();\n-                                for (String swingString : descr.states) {\n-                                    if (\"AUTO\".contentEquals(swingString)) {\n-                                        swingModes.add(\"AUTO\");\n-                                    } else if (\"10\".contentEquals(swingString)) {\n-                                        swingModes.add(\"SWING\");\n-                                    } else if (\"11\".contentEquals(swingString)) {\n-                                        swingModes.add(\"SWIRL\");\n-                                    } else if (\"12\".contentEquals(swingString)) {\n-                                        swingModes.add(\"WIDE\");\n-                                    } else {\n-                                        swingModes.add(swingString);\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_FANSPEED;\n+                                    addChannel(channelId, itemType, fanLevels);\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    List<String> swingModes = new ArrayList<>();\n+                                    for (String swingString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(swingString)) {\n+                                            swingModes.add(\"AUTO\");\n+                                        } else if (\"10\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWING\");\n+                                        } else if (\"11\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWIRL\");\n+                                        } else if (\"12\".contentEquals(swingString)) {\n+                                            swingModes.add(\"WIDE\");\n+                                        } else {\n+                                            swingModes.add(swingString);\n+                                        }\n                                     }\n-                                }\n-                                switch (datapoint.uid) {\n-                                    case 5:\n-                                        channelId = CHANNEL_TYPE_VANESUD;\n-                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                        updateProperties(properties);\n-                                        addChannel(channelId, itemType, swingModes);\n-                                        break;\n-                                    case 6:\n-                                        channelId = CHANNEL_TYPE_VANESUD;\n-                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                        updateProperties(properties);\n-                                        addChannel(channelId, itemType, swingModes);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n-                            case 10:\n-                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n-                            case 37:\n-                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n+                                    switch (datapoint.uid) {\n+                                        case 5:\n+                                            channelId = CHANNEL_TYPE_VANESUD;\n+                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                        case 6:\n+                                            channelId = CHANNEL_TYPE_VANESLR;\n+                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 10:\n+                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 37:\n+                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                            }\n                         }\n                     }\n+\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n             } else {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -490,7 +501,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n \n                 } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n                 }\n             } else {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMTgwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489201801", "body": "```suggestion\r\n                                for (String modString : descr.states) {\r\n                                    switch (modString) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            String[] modString = descr.states;\n          \n          \n            \n                                            for (int i1 = 0; i1 < modString.length; i1++) {\n          \n          \n            \n                                                switch (modString[i1]) {\n          \n          \n            \n                                            for (String modString : descr.states) {\n          \n          \n            \n                                                switch (modString) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                <span class=\"pl-k\">String</span>[] modString <span class=\"pl-k\">=</span> descr<span class=\"pl-k\">.</span>states;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> i1 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i1 <span class=\"pl-k\">&lt;</span> modString<span class=\"pl-k\">.</span>length; i1<span class=\"pl-k\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    <span class=\"pl-k\">switch</span> (modString[i1]) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">String</span> modString <span class=\"pl-k\">:</span> descr<span class=\"pl-k\">.</span>states) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                    <span class=\"pl-k\">switch</span> (modString) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-16T06:48:49Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,557 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (int i = 0; i < datapoints.length; i++) {\n+                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoints[i].uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                String[] modString = descr.states;\n+                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                    switch (modString[i1]) {", "originalCommit": "bca20a55c1cb0440d955a3419a648b360a62f01d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNTY1OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489215658", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T07:17:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMTgwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 5cd1c7eec8..42bda92937 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -403,16 +403,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     Data data = gson.fromJson(resp.data.toString(), Data.class);\n                     Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n                     Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                    for (int i = 0; i < datapoints.length; i++) {\n-                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n+                    for (Datapoints datapoint : datapoints) {\n+                        Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n                         String channelId = \"\";\n                         String itemType = \"String\";\n-                        switch (datapoints[i].uid) {\n+                        switch (datapoint.uid) {\n                             case 2:\n                                 List<String> opModes = new ArrayList<>();\n-                                String[] modString = descr.states;\n-                                for (int i1 = 0; i1 < modString.length; i1++) {\n-                                    switch (modString[i1]) {\n+                                for (String modString : descr.states) {\n+                                    switch (modString) {\n                                         case \"0\":\n                                             opModes.add(\"AUTO\");\n                                             break;\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -396,106 +386,111 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             String response = api.postRequest(ipAddress, contentString);\n             logger.trace(\"available Datapoints response : {}\", response);\n             if (response != null) {\n-                boolean success = getSuccess(response);\n-                if (success) {\n-                    logout();\n+                try {\n                     Response resp = gson.fromJson(response, Response.class);\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n-                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                    for (Datapoints datapoint : datapoints) {\n-                        Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                        String channelId = \"\";\n-                        String itemType = \"String\";\n-                        switch (datapoint.uid) {\n-                            case 2:\n-                                List<String> opModes = new ArrayList<>();\n-                                for (String modString : descr.states) {\n-                                    switch (modString) {\n-                                        case \"0\":\n-                                            opModes.add(\"AUTO\");\n-                                            break;\n-                                        case \"1\":\n-                                            opModes.add(\"HEAT\");\n-                                            break;\n-                                        case \"2\":\n-                                            opModes.add(\"DRY\");\n-                                            break;\n-                                        case \"3\":\n-                                            opModes.add(\"FAN\");\n-                                            break;\n-                                        case \"4\":\n-                                            opModes.add(\"COOL\");\n-                                            break;\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n                                     }\n-                                }\n-                                properties.put(\"Supported modes\", opModes.toString());\n-                                updateProperties(properties);\n-                                channelId = CHANNEL_TYPE_MODE;\n-                                addChannel(channelId, itemType, opModes);\n-                                break;\n-                            case 4:\n-                                List<String> fanLevels = new ArrayList<>();\n-                                for (String fanString : descr.states) {\n-                                    if (\"AUTO\".contentEquals(fanString)) {\n-                                        fanLevels.add(\"AUTO\");\n-                                    } else {\n-                                        fanLevels.add(fanString);\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n                                     }\n-                                }\n-                                properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                updateProperties(properties);\n-                                channelId = CHANNEL_TYPE_FANSPEED;\n-                                addChannel(channelId, itemType, fanLevels);\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                List<String> swingModes = new ArrayList<>();\n-                                for (String swingString : descr.states) {\n-                                    if (\"AUTO\".contentEquals(swingString)) {\n-                                        swingModes.add(\"AUTO\");\n-                                    } else if (\"10\".contentEquals(swingString)) {\n-                                        swingModes.add(\"SWING\");\n-                                    } else if (\"11\".contentEquals(swingString)) {\n-                                        swingModes.add(\"SWIRL\");\n-                                    } else if (\"12\".contentEquals(swingString)) {\n-                                        swingModes.add(\"WIDE\");\n-                                    } else {\n-                                        swingModes.add(swingString);\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_FANSPEED;\n+                                    addChannel(channelId, itemType, fanLevels);\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    List<String> swingModes = new ArrayList<>();\n+                                    for (String swingString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(swingString)) {\n+                                            swingModes.add(\"AUTO\");\n+                                        } else if (\"10\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWING\");\n+                                        } else if (\"11\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWIRL\");\n+                                        } else if (\"12\".contentEquals(swingString)) {\n+                                            swingModes.add(\"WIDE\");\n+                                        } else {\n+                                            swingModes.add(swingString);\n+                                        }\n                                     }\n-                                }\n-                                switch (datapoint.uid) {\n-                                    case 5:\n-                                        channelId = CHANNEL_TYPE_VANESUD;\n-                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                        updateProperties(properties);\n-                                        addChannel(channelId, itemType, swingModes);\n-                                        break;\n-                                    case 6:\n-                                        channelId = CHANNEL_TYPE_VANESUD;\n-                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                        updateProperties(properties);\n-                                        addChannel(channelId, itemType, swingModes);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n-                            case 10:\n-                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n-                            case 37:\n-                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n+                                    switch (datapoint.uid) {\n+                                        case 5:\n+                                            channelId = CHANNEL_TYPE_VANESUD;\n+                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                        case 6:\n+                                            channelId = CHANNEL_TYPE_VANESLR;\n+                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 10:\n+                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 37:\n+                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                            }\n                         }\n                     }\n+\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n             } else {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -490,7 +501,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n \n                 } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n                 }\n             } else {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMjMxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489202311", "body": "```suggestion\r\n                                for (String fanString : descr.states) {\r\n                                    if (\"AUTO\".contentEquals(fanString)) {\r\n                                        fanLevels.add(\"AUTO\");\r\n                                    } else {\r\n                                        fanLevels.add(fanString);\r\n                                    }\r\n                                }\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            String[] fanString = descr.states;\n          \n          \n            \n                                            for (int i1 = 0; i1 < fanString.length; i1++) {\n          \n          \n            \n                                                if (\"AUTO\".contentEquals(fanString[i1])) {\n          \n          \n            \n                                                    fanLevels.add(\"AUTO\");\n          \n          \n            \n                                                } else {\n          \n          \n            \n                                                    fanLevels.add(fanString[i1]);\n          \n          \n            \n                                                }\n          \n          \n            \n                                            }\n          \n          \n            \n                                            for (String fanString : descr.states) {\n          \n          \n            \n                                                if (\"AUTO\".contentEquals(fanString)) {\n          \n          \n            \n                                                    fanLevels.add(\"AUTO\");\n          \n          \n            \n                                                } else {\n          \n          \n            \n                                                    fanLevels.add(fanString);\n          \n          \n            \n                                                }\n          \n          \n            \n                                            }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                <span class=\"pl-k\">String</span>[] fanString <span class=\"pl-k\">=</span> descr<span class=\"pl-k\">.</span>states;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> i1 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i1 <span class=\"pl-k\">&lt;</span> fanString<span class=\"pl-k\">.</span>length; i1<span class=\"pl-k\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>AUTO<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>contentEquals(fanString[i1])) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                        fanLevels<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>AUTO<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                        fanLevels<span class=\"pl-k\">.</span>add(fanString[i1]);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">String</span> fanString <span class=\"pl-k\">:</span> descr<span class=\"pl-k\">.</span>states) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                    <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>AUTO<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>contentEquals(fanString)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                        fanLevels<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>AUTO<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                    } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                        fanLevels<span class=\"pl-k\">.</span>add(fanString);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-16T06:49:47Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,557 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (int i = 0; i < datapoints.length; i++) {\n+                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoints[i].uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                String[] modString = descr.states;\n+                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                    switch (modString[i1]) {\n+                                        case \"0\":\n+                                            opModes.add(\"AUTO\");\n+                                            break;\n+                                        case \"1\":\n+                                            opModes.add(\"HEAT\");\n+                                            break;\n+                                        case \"2\":\n+                                            opModes.add(\"DRY\");\n+                                            break;\n+                                        case \"3\":\n+                                            opModes.add(\"FAN\");\n+                                            break;\n+                                        case \"4\":\n+                                            opModes.add(\"COOL\");\n+                                            break;\n+                                    }\n+                                }\n+                                properties.put(\"Supported modes\", opModes.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_MODE;\n+                                addChannel(channelId, itemType, opModes);\n+                                break;\n+                            case 4:\n+                                List<String> fanLevels = new ArrayList<>();\n+                                String[] fanString = descr.states;\n+                                for (int i1 = 0; i1 < fanString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n+                                        fanLevels.add(\"AUTO\");\n+                                    } else {\n+                                        fanLevels.add(fanString[i1]);\n+                                    }\n+                                }", "originalCommit": "bca20a55c1cb0440d955a3419a648b360a62f01d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNjI5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489216290", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T07:18:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMjMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 5cd1c7eec8..42bda92937 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -437,12 +436,11 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                 break;\n                             case 4:\n                                 List<String> fanLevels = new ArrayList<>();\n-                                String[] fanString = descr.states;\n-                                for (int i1 = 0; i1 < fanString.length; i1++) {\n-                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n+                                for (String fanString : descr.states) {\n+                                    if (\"AUTO\".contentEquals(fanString)) {\n                                         fanLevels.add(\"AUTO\");\n                                     } else {\n-                                        fanLevels.add(fanString[i1]);\n+                                        fanLevels.add(fanString);\n                                     }\n                                 }\n                                 properties.put(\"Supported fan levels\", fanLevels.toString());\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -396,106 +386,111 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             String response = api.postRequest(ipAddress, contentString);\n             logger.trace(\"available Datapoints response : {}\", response);\n             if (response != null) {\n-                boolean success = getSuccess(response);\n-                if (success) {\n-                    logout();\n+                try {\n                     Response resp = gson.fromJson(response, Response.class);\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n-                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                    for (Datapoints datapoint : datapoints) {\n-                        Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                        String channelId = \"\";\n-                        String itemType = \"String\";\n-                        switch (datapoint.uid) {\n-                            case 2:\n-                                List<String> opModes = new ArrayList<>();\n-                                for (String modString : descr.states) {\n-                                    switch (modString) {\n-                                        case \"0\":\n-                                            opModes.add(\"AUTO\");\n-                                            break;\n-                                        case \"1\":\n-                                            opModes.add(\"HEAT\");\n-                                            break;\n-                                        case \"2\":\n-                                            opModes.add(\"DRY\");\n-                                            break;\n-                                        case \"3\":\n-                                            opModes.add(\"FAN\");\n-                                            break;\n-                                        case \"4\":\n-                                            opModes.add(\"COOL\");\n-                                            break;\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n                                     }\n-                                }\n-                                properties.put(\"Supported modes\", opModes.toString());\n-                                updateProperties(properties);\n-                                channelId = CHANNEL_TYPE_MODE;\n-                                addChannel(channelId, itemType, opModes);\n-                                break;\n-                            case 4:\n-                                List<String> fanLevels = new ArrayList<>();\n-                                for (String fanString : descr.states) {\n-                                    if (\"AUTO\".contentEquals(fanString)) {\n-                                        fanLevels.add(\"AUTO\");\n-                                    } else {\n-                                        fanLevels.add(fanString);\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n                                     }\n-                                }\n-                                properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                updateProperties(properties);\n-                                channelId = CHANNEL_TYPE_FANSPEED;\n-                                addChannel(channelId, itemType, fanLevels);\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                List<String> swingModes = new ArrayList<>();\n-                                for (String swingString : descr.states) {\n-                                    if (\"AUTO\".contentEquals(swingString)) {\n-                                        swingModes.add(\"AUTO\");\n-                                    } else if (\"10\".contentEquals(swingString)) {\n-                                        swingModes.add(\"SWING\");\n-                                    } else if (\"11\".contentEquals(swingString)) {\n-                                        swingModes.add(\"SWIRL\");\n-                                    } else if (\"12\".contentEquals(swingString)) {\n-                                        swingModes.add(\"WIDE\");\n-                                    } else {\n-                                        swingModes.add(swingString);\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_FANSPEED;\n+                                    addChannel(channelId, itemType, fanLevels);\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    List<String> swingModes = new ArrayList<>();\n+                                    for (String swingString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(swingString)) {\n+                                            swingModes.add(\"AUTO\");\n+                                        } else if (\"10\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWING\");\n+                                        } else if (\"11\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWIRL\");\n+                                        } else if (\"12\".contentEquals(swingString)) {\n+                                            swingModes.add(\"WIDE\");\n+                                        } else {\n+                                            swingModes.add(swingString);\n+                                        }\n                                     }\n-                                }\n-                                switch (datapoint.uid) {\n-                                    case 5:\n-                                        channelId = CHANNEL_TYPE_VANESUD;\n-                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                        updateProperties(properties);\n-                                        addChannel(channelId, itemType, swingModes);\n-                                        break;\n-                                    case 6:\n-                                        channelId = CHANNEL_TYPE_VANESUD;\n-                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                        updateProperties(properties);\n-                                        addChannel(channelId, itemType, swingModes);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n-                            case 10:\n-                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n-                            case 37:\n-                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n+                                    switch (datapoint.uid) {\n+                                        case 5:\n+                                            channelId = CHANNEL_TYPE_VANESUD;\n+                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                        case 6:\n+                                            channelId = CHANNEL_TYPE_VANESLR;\n+                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 10:\n+                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 37:\n+                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                            }\n                         }\n                     }\n+\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n             } else {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -490,7 +501,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n \n                 } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n                 }\n             } else {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMzE3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489203173", "body": "```suggestion\r\n                                for (String swingUDString : descr.states) {\r\n                                    if (\"AUTO\".contentEquals(swingUDString)) {\r\n                                        swingUDModes.add(\"AUTO\");\r\n                                    } else if (\"10\".contentEquals(swingUDString)) {\r\n                                        swingUDModes.add(\"SWING\");\r\n                                    } else if (\"11\".contentEquals(swingUDString)) {\r\n                                        swingUDModes.add(\"SWIRL\");\r\n                                    } else if (\"12\".contentEquals(swingUDString)) {\r\n                                        swingUDModes.add(\"WIDE\");\r\n                                    } else {\r\n                                        swingUDModes.add(swingUDString);\r\n                                    }\r\n                                }\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            String[] swingUDString = descr.states;\n          \n          \n            \n                                            for (int i1 = 0; i1 < swingUDString.length; i1++) {\n          \n          \n            \n                                                if (\"AUTO\".contentEquals(swingUDString[i1])) {\n          \n          \n            \n                                                    swingUDModes.add(\"AUTO\");\n          \n          \n            \n                                                } else if (\"10\".contentEquals(swingUDString[i1])) {\n          \n          \n            \n                                                    swingUDModes.add(\"SWING\");\n          \n          \n            \n                                                } else if (\"11\".contentEquals(swingUDString[i1])) {\n          \n          \n            \n                                                    swingUDModes.add(\"SWIRL\");\n          \n          \n            \n                                                } else if (\"12\".contentEquals(swingUDString[i1])) {\n          \n          \n            \n                                                    swingUDModes.add(\"WIDE\");\n          \n          \n            \n                                                } else {\n          \n          \n            \n                                                    swingUDModes.add(swingUDString[i1]);\n          \n          \n            \n                                                }\n          \n          \n            \n                                            }\n          \n          \n            \n                                            for (String swingUDString : descr.states) {\n          \n          \n            \n                                                if (\"AUTO\".contentEquals(swingUDString)) {\n          \n          \n            \n                                                    swingUDModes.add(\"AUTO\");\n          \n          \n            \n                                                } else if (\"10\".contentEquals(swingUDString)) {\n          \n          \n            \n                                                    swingUDModes.add(\"SWING\");\n          \n          \n            \n                                                } else if (\"11\".contentEquals(swingUDString)) {\n          \n          \n            \n                                                    swingUDModes.add(\"SWIRL\");\n          \n          \n            \n                                                } else if (\"12\".contentEquals(swingUDString)) {\n          \n          \n            \n                                                    swingUDModes.add(\"WIDE\");\n          \n          \n            \n                                                } else {\n          \n          \n            \n                                                    swingUDModes.add(swingUDString);\n          \n          \n            \n                                                }\n          \n          \n            \n                                            }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                <span class=\"pl-k\">String</span>[] swingUDString <span class=\"pl-k\">=</span> descr<span class=\"pl-k\">.</span>states;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> i1 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i1 <span class=\"pl-k\">&lt;</span> swingUDString<span class=\"pl-k\">.</span>length; i1<span class=\"pl-k\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>AUTO<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>contentEquals(swingUDString[i1])) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                        swingUDModes<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>AUTO<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>10<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>contentEquals(swingUDString[i1])) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                        swingUDModes<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SWING<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>11<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>contentEquals(swingUDString[i1])) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                        swingUDModes<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SWIRL<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>12<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>contentEquals(swingUDString[i1])) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                        swingUDModes<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>WIDE<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                        swingUDModes<span class=\"pl-k\">.</span>add(swingUDString[i1]);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">String</span> swingUDString <span class=\"pl-k\">:</span> descr<span class=\"pl-k\">.</span>states) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                    <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>AUTO<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>contentEquals(swingUDString)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                        swingUDModes<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>AUTO<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                    } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>10<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>contentEquals(swingUDString)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                        swingUDModes<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SWING<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                    } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>11<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>contentEquals(swingUDString)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                        swingUDModes<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SWIRL<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                    } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>12<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>contentEquals(swingUDString)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                        swingUDModes<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>WIDE<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                    } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                        swingUDModes<span class=\"pl-k\">.</span>add(swingUDString);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-16T06:51:27Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,557 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (int i = 0; i < datapoints.length; i++) {\n+                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoints[i].uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                String[] modString = descr.states;\n+                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                    switch (modString[i1]) {\n+                                        case \"0\":\n+                                            opModes.add(\"AUTO\");\n+                                            break;\n+                                        case \"1\":\n+                                            opModes.add(\"HEAT\");\n+                                            break;\n+                                        case \"2\":\n+                                            opModes.add(\"DRY\");\n+                                            break;\n+                                        case \"3\":\n+                                            opModes.add(\"FAN\");\n+                                            break;\n+                                        case \"4\":\n+                                            opModes.add(\"COOL\");\n+                                            break;\n+                                    }\n+                                }\n+                                properties.put(\"Supported modes\", opModes.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_MODE;\n+                                addChannel(channelId, itemType, opModes);\n+                                break;\n+                            case 4:\n+                                List<String> fanLevels = new ArrayList<>();\n+                                String[] fanString = descr.states;\n+                                for (int i1 = 0; i1 < fanString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n+                                        fanLevels.add(\"AUTO\");\n+                                    } else {\n+                                        fanLevels.add(fanString[i1]);\n+                                    }\n+                                }\n+                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                addChannel(channelId, itemType, fanLevels);\n+                                break;\n+                            case 5:\n+                                List<String> swingUDModes = new ArrayList<>();\n+                                String[] swingUDString = descr.states;\n+                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingUDModes.add(swingUDString[i1]);\n+                                    }\n+                                }", "originalCommit": "bca20a55c1cb0440d955a3419a648b360a62f01d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMTg3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489221879", "bodyText": "Refactored", "author": "hmerk", "createdAt": "2020-09-16T07:28:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMzE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 5cd1c7eec8..42bda92937 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -451,66 +449,47 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                 addChannel(channelId, itemType, fanLevels);\n                                 break;\n                             case 5:\n-                                List<String> swingUDModes = new ArrayList<>();\n-                                String[] swingUDString = descr.states;\n-                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n-                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n-                                        swingUDModes.add(\"AUTO\");\n-                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n-                                        swingUDModes.add(\"SWING\");\n-                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n-                                        swingUDModes.add(\"SWIRL\");\n-                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n-                                        swingUDModes.add(\"WIDE\");\n-                                    } else {\n-                                        swingUDModes.add(swingUDString[i1]);\n-                                    }\n-                                }\n-                                channelId = CHANNEL_TYPE_VANESUD;\n-                                properties.put(\"Supported vane up/down modes\", swingUDModes.toString());\n-                                updateProperties(properties);\n-                                addChannel(channelId, itemType, swingUDModes);\n-                                break;\n                             case 6:\n-                                List<String> swingLRModes = new ArrayList<>();\n-                                String[] swingLRString = descr.states;\n-                                for (int i1 = 0; i1 < swingLRString.length; i1++) {\n-                                    if (\"AUTO\".contentEquals(swingLRString[i1])) {\n-                                        swingLRModes.add(\"AUTO\");\n-                                    } else if (\"10\".contentEquals(swingLRString[i1])) {\n-                                        swingLRModes.add(\"SWING\");\n-                                    } else if (\"11\".contentEquals(swingLRString[i1])) {\n-                                        swingLRModes.add(\"SWIRL\");\n-                                    } else if (\"12\".contentEquals(swingLRString[i1])) {\n-                                        swingLRModes.add(\"WIDE\");\n+                                List<String> swingModes = new ArrayList<>();\n+                                for (String swingString : descr.states) {\n+                                    if (\"AUTO\".contentEquals(swingString)) {\n+                                        swingModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingString)) {\n+                                        swingModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingString)) {\n+                                        swingModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingString)) {\n+                                        swingModes.add(\"WIDE\");\n                                     } else {\n-                                        swingLRModes.add(swingLRString[i1]);\n+                                        swingModes.add(swingString);\n                                     }\n                                 }\n-                                channelId = CHANNEL_TYPE_VANESLR;\n-                                properties.put(\"Supported vane left/right modes\", swingLRModes.toString());\n-                                updateProperties(properties);\n-                                addChannel(channelId, itemType, swingLRModes);\n+                                switch (datapoint.uid) {\n+                                    case 5:\n+                                        channelId = CHANNEL_TYPE_VANESUD;\n+                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                        updateProperties(properties);\n+                                        addChannel(channelId, itemType, swingModes);\n+                                        break;\n+                                    case 6:\n+                                        channelId = CHANNEL_TYPE_VANESUD;\n+                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                        updateProperties(properties);\n+                                        addChannel(channelId, itemType, swingModes);\n+                                        break;\n+                                }\n                                 break;\n                             case 9:\n-                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid, descr.minValue);\n-                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid, descr.maxValue);\n                                 channelId = CHANNEL_TYPE_TARGETTEMP;\n                                 itemType = \"Number:Temperature\";\n                                 addChannel(channelId, itemType, null);\n                                 break;\n                             case 10:\n-                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid, descr.minValue);\n-                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid, descr.maxValue);\n                                 channelId = CHANNEL_TYPE_AMBIENTTEMP;\n                                 itemType = \"Number:Temperature\";\n                                 addChannel(channelId, itemType, null);\n                                 break;\n                             case 37:\n-                                logger.trace(\"Add Channel Outdoor Temperature\");\n-                                logger.trace(\"UID : {} ; description : {}\", datapoints[i].uid, datapoints[i].descr);\n-                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid, descr.minValue);\n-                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid, descr.maxValue);\n                                 channelId = CHANNEL_TYPE_OUTDOORTEMP;\n                                 itemType = \"Number:Temperature\";\n                                 addChannel(channelId, itemType, null);\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -396,106 +386,111 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             String response = api.postRequest(ipAddress, contentString);\n             logger.trace(\"available Datapoints response : {}\", response);\n             if (response != null) {\n-                boolean success = getSuccess(response);\n-                if (success) {\n-                    logout();\n+                try {\n                     Response resp = gson.fromJson(response, Response.class);\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n-                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                    for (Datapoints datapoint : datapoints) {\n-                        Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                        String channelId = \"\";\n-                        String itemType = \"String\";\n-                        switch (datapoint.uid) {\n-                            case 2:\n-                                List<String> opModes = new ArrayList<>();\n-                                for (String modString : descr.states) {\n-                                    switch (modString) {\n-                                        case \"0\":\n-                                            opModes.add(\"AUTO\");\n-                                            break;\n-                                        case \"1\":\n-                                            opModes.add(\"HEAT\");\n-                                            break;\n-                                        case \"2\":\n-                                            opModes.add(\"DRY\");\n-                                            break;\n-                                        case \"3\":\n-                                            opModes.add(\"FAN\");\n-                                            break;\n-                                        case \"4\":\n-                                            opModes.add(\"COOL\");\n-                                            break;\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n                                     }\n-                                }\n-                                properties.put(\"Supported modes\", opModes.toString());\n-                                updateProperties(properties);\n-                                channelId = CHANNEL_TYPE_MODE;\n-                                addChannel(channelId, itemType, opModes);\n-                                break;\n-                            case 4:\n-                                List<String> fanLevels = new ArrayList<>();\n-                                for (String fanString : descr.states) {\n-                                    if (\"AUTO\".contentEquals(fanString)) {\n-                                        fanLevels.add(\"AUTO\");\n-                                    } else {\n-                                        fanLevels.add(fanString);\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n                                     }\n-                                }\n-                                properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                updateProperties(properties);\n-                                channelId = CHANNEL_TYPE_FANSPEED;\n-                                addChannel(channelId, itemType, fanLevels);\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                List<String> swingModes = new ArrayList<>();\n-                                for (String swingString : descr.states) {\n-                                    if (\"AUTO\".contentEquals(swingString)) {\n-                                        swingModes.add(\"AUTO\");\n-                                    } else if (\"10\".contentEquals(swingString)) {\n-                                        swingModes.add(\"SWING\");\n-                                    } else if (\"11\".contentEquals(swingString)) {\n-                                        swingModes.add(\"SWIRL\");\n-                                    } else if (\"12\".contentEquals(swingString)) {\n-                                        swingModes.add(\"WIDE\");\n-                                    } else {\n-                                        swingModes.add(swingString);\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_FANSPEED;\n+                                    addChannel(channelId, itemType, fanLevels);\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    List<String> swingModes = new ArrayList<>();\n+                                    for (String swingString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(swingString)) {\n+                                            swingModes.add(\"AUTO\");\n+                                        } else if (\"10\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWING\");\n+                                        } else if (\"11\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWIRL\");\n+                                        } else if (\"12\".contentEquals(swingString)) {\n+                                            swingModes.add(\"WIDE\");\n+                                        } else {\n+                                            swingModes.add(swingString);\n+                                        }\n                                     }\n-                                }\n-                                switch (datapoint.uid) {\n-                                    case 5:\n-                                        channelId = CHANNEL_TYPE_VANESUD;\n-                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                        updateProperties(properties);\n-                                        addChannel(channelId, itemType, swingModes);\n-                                        break;\n-                                    case 6:\n-                                        channelId = CHANNEL_TYPE_VANESUD;\n-                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                        updateProperties(properties);\n-                                        addChannel(channelId, itemType, swingModes);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n-                            case 10:\n-                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n-                            case 37:\n-                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n+                                    switch (datapoint.uid) {\n+                                        case 5:\n+                                            channelId = CHANNEL_TYPE_VANESUD;\n+                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                        case 6:\n+                                            channelId = CHANNEL_TYPE_VANESLR;\n+                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 10:\n+                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 37:\n+                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                            }\n                         }\n                     }\n+\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n             } else {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -490,7 +501,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n \n                 } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n                 }\n             } else {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMzcwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489203709", "body": "It looks like this code is almost identical to the code above. Can you refactor this code so it isn't duplicated?", "bodyText": "It looks like this code is almost identical to the code above. Can you refactor this code so it isn't duplicated?", "bodyHTML": "<p dir=\"auto\">It looks like this code is almost identical to the code above. Can you refactor this code so it isn't duplicated?</p>", "author": "cpmeister", "createdAt": "2020-09-16T06:52:36Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,557 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (int i = 0; i < datapoints.length; i++) {\n+                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoints[i].uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                String[] modString = descr.states;\n+                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                    switch (modString[i1]) {\n+                                        case \"0\":\n+                                            opModes.add(\"AUTO\");\n+                                            break;\n+                                        case \"1\":\n+                                            opModes.add(\"HEAT\");\n+                                            break;\n+                                        case \"2\":\n+                                            opModes.add(\"DRY\");\n+                                            break;\n+                                        case \"3\":\n+                                            opModes.add(\"FAN\");\n+                                            break;\n+                                        case \"4\":\n+                                            opModes.add(\"COOL\");\n+                                            break;\n+                                    }\n+                                }\n+                                properties.put(\"Supported modes\", opModes.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_MODE;\n+                                addChannel(channelId, itemType, opModes);\n+                                break;\n+                            case 4:\n+                                List<String> fanLevels = new ArrayList<>();\n+                                String[] fanString = descr.states;\n+                                for (int i1 = 0; i1 < fanString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n+                                        fanLevels.add(\"AUTO\");\n+                                    } else {\n+                                        fanLevels.add(fanString[i1]);\n+                                    }\n+                                }\n+                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                addChannel(channelId, itemType, fanLevels);\n+                                break;\n+                            case 5:\n+                                List<String> swingUDModes = new ArrayList<>();\n+                                String[] swingUDString = descr.states;\n+                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingUDModes.add(swingUDString[i1]);\n+                                    }\n+                                }\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingUDModes.toString());\n+                                updateProperties(properties);\n+                                addChannel(channelId, itemType, swingUDModes);\n+                                break;\n+                            case 6:\n+                                List<String> swingLRModes = new ArrayList<>();\n+                                String[] swingLRString = descr.states;\n+                                for (int i1 = 0; i1 < swingLRString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingLRModes.add(swingLRString[i1]);\n+                                    }\n+                                }", "originalCommit": "bca20a55c1cb0440d955a3419a648b360a62f01d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMjAxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489222010", "bodyText": "Refactored", "author": "hmerk", "createdAt": "2020-09-16T07:28:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMzcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 5cd1c7eec8..42bda92937 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -451,66 +449,47 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                 addChannel(channelId, itemType, fanLevels);\n                                 break;\n                             case 5:\n-                                List<String> swingUDModes = new ArrayList<>();\n-                                String[] swingUDString = descr.states;\n-                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n-                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n-                                        swingUDModes.add(\"AUTO\");\n-                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n-                                        swingUDModes.add(\"SWING\");\n-                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n-                                        swingUDModes.add(\"SWIRL\");\n-                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n-                                        swingUDModes.add(\"WIDE\");\n-                                    } else {\n-                                        swingUDModes.add(swingUDString[i1]);\n-                                    }\n-                                }\n-                                channelId = CHANNEL_TYPE_VANESUD;\n-                                properties.put(\"Supported vane up/down modes\", swingUDModes.toString());\n-                                updateProperties(properties);\n-                                addChannel(channelId, itemType, swingUDModes);\n-                                break;\n                             case 6:\n-                                List<String> swingLRModes = new ArrayList<>();\n-                                String[] swingLRString = descr.states;\n-                                for (int i1 = 0; i1 < swingLRString.length; i1++) {\n-                                    if (\"AUTO\".contentEquals(swingLRString[i1])) {\n-                                        swingLRModes.add(\"AUTO\");\n-                                    } else if (\"10\".contentEquals(swingLRString[i1])) {\n-                                        swingLRModes.add(\"SWING\");\n-                                    } else if (\"11\".contentEquals(swingLRString[i1])) {\n-                                        swingLRModes.add(\"SWIRL\");\n-                                    } else if (\"12\".contentEquals(swingLRString[i1])) {\n-                                        swingLRModes.add(\"WIDE\");\n+                                List<String> swingModes = new ArrayList<>();\n+                                for (String swingString : descr.states) {\n+                                    if (\"AUTO\".contentEquals(swingString)) {\n+                                        swingModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingString)) {\n+                                        swingModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingString)) {\n+                                        swingModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingString)) {\n+                                        swingModes.add(\"WIDE\");\n                                     } else {\n-                                        swingLRModes.add(swingLRString[i1]);\n+                                        swingModes.add(swingString);\n                                     }\n                                 }\n-                                channelId = CHANNEL_TYPE_VANESLR;\n-                                properties.put(\"Supported vane left/right modes\", swingLRModes.toString());\n-                                updateProperties(properties);\n-                                addChannel(channelId, itemType, swingLRModes);\n+                                switch (datapoint.uid) {\n+                                    case 5:\n+                                        channelId = CHANNEL_TYPE_VANESUD;\n+                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                        updateProperties(properties);\n+                                        addChannel(channelId, itemType, swingModes);\n+                                        break;\n+                                    case 6:\n+                                        channelId = CHANNEL_TYPE_VANESUD;\n+                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                        updateProperties(properties);\n+                                        addChannel(channelId, itemType, swingModes);\n+                                        break;\n+                                }\n                                 break;\n                             case 9:\n-                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid, descr.minValue);\n-                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid, descr.maxValue);\n                                 channelId = CHANNEL_TYPE_TARGETTEMP;\n                                 itemType = \"Number:Temperature\";\n                                 addChannel(channelId, itemType, null);\n                                 break;\n                             case 10:\n-                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid, descr.minValue);\n-                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid, descr.maxValue);\n                                 channelId = CHANNEL_TYPE_AMBIENTTEMP;\n                                 itemType = \"Number:Temperature\";\n                                 addChannel(channelId, itemType, null);\n                                 break;\n                             case 37:\n-                                logger.trace(\"Add Channel Outdoor Temperature\");\n-                                logger.trace(\"UID : {} ; description : {}\", datapoints[i].uid, datapoints[i].descr);\n-                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid, descr.minValue);\n-                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid, descr.maxValue);\n                                 channelId = CHANNEL_TYPE_OUTDOORTEMP;\n                                 itemType = \"Number:Temperature\";\n                                 addChannel(channelId, itemType, null);\n", "next_change": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -396,106 +386,111 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             String response = api.postRequest(ipAddress, contentString);\n             logger.trace(\"available Datapoints response : {}\", response);\n             if (response != null) {\n-                boolean success = getSuccess(response);\n-                if (success) {\n-                    logout();\n+                try {\n                     Response resp = gson.fromJson(response, Response.class);\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n-                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                    for (Datapoints datapoint : datapoints) {\n-                        Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                        String channelId = \"\";\n-                        String itemType = \"String\";\n-                        switch (datapoint.uid) {\n-                            case 2:\n-                                List<String> opModes = new ArrayList<>();\n-                                for (String modString : descr.states) {\n-                                    switch (modString) {\n-                                        case \"0\":\n-                                            opModes.add(\"AUTO\");\n-                                            break;\n-                                        case \"1\":\n-                                            opModes.add(\"HEAT\");\n-                                            break;\n-                                        case \"2\":\n-                                            opModes.add(\"DRY\");\n-                                            break;\n-                                        case \"3\":\n-                                            opModes.add(\"FAN\");\n-                                            break;\n-                                        case \"4\":\n-                                            opModes.add(\"COOL\");\n-                                            break;\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n                                     }\n-                                }\n-                                properties.put(\"Supported modes\", opModes.toString());\n-                                updateProperties(properties);\n-                                channelId = CHANNEL_TYPE_MODE;\n-                                addChannel(channelId, itemType, opModes);\n-                                break;\n-                            case 4:\n-                                List<String> fanLevels = new ArrayList<>();\n-                                for (String fanString : descr.states) {\n-                                    if (\"AUTO\".contentEquals(fanString)) {\n-                                        fanLevels.add(\"AUTO\");\n-                                    } else {\n-                                        fanLevels.add(fanString);\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n                                     }\n-                                }\n-                                properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                updateProperties(properties);\n-                                channelId = CHANNEL_TYPE_FANSPEED;\n-                                addChannel(channelId, itemType, fanLevels);\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                List<String> swingModes = new ArrayList<>();\n-                                for (String swingString : descr.states) {\n-                                    if (\"AUTO\".contentEquals(swingString)) {\n-                                        swingModes.add(\"AUTO\");\n-                                    } else if (\"10\".contentEquals(swingString)) {\n-                                        swingModes.add(\"SWING\");\n-                                    } else if (\"11\".contentEquals(swingString)) {\n-                                        swingModes.add(\"SWIRL\");\n-                                    } else if (\"12\".contentEquals(swingString)) {\n-                                        swingModes.add(\"WIDE\");\n-                                    } else {\n-                                        swingModes.add(swingString);\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_FANSPEED;\n+                                    addChannel(channelId, itemType, fanLevels);\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    List<String> swingModes = new ArrayList<>();\n+                                    for (String swingString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(swingString)) {\n+                                            swingModes.add(\"AUTO\");\n+                                        } else if (\"10\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWING\");\n+                                        } else if (\"11\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWIRL\");\n+                                        } else if (\"12\".contentEquals(swingString)) {\n+                                            swingModes.add(\"WIDE\");\n+                                        } else {\n+                                            swingModes.add(swingString);\n+                                        }\n                                     }\n-                                }\n-                                switch (datapoint.uid) {\n-                                    case 5:\n-                                        channelId = CHANNEL_TYPE_VANESUD;\n-                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                        updateProperties(properties);\n-                                        addChannel(channelId, itemType, swingModes);\n-                                        break;\n-                                    case 6:\n-                                        channelId = CHANNEL_TYPE_VANESUD;\n-                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                        updateProperties(properties);\n-                                        addChannel(channelId, itemType, swingModes);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n-                            case 10:\n-                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n-                            case 37:\n-                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n+                                    switch (datapoint.uid) {\n+                                        case 5:\n+                                            channelId = CHANNEL_TYPE_VANESUD;\n+                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                        case 6:\n+                                            channelId = CHANNEL_TYPE_VANESLR;\n+                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 10:\n+                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 37:\n+                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                            }\n                         }\n                     }\n+\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n             } else {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -490,7 +501,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n \n                 } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n                 }\n             } else {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"oid": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "url": "https://github.com/openhab/openhab-addons/commit/310290f6368a5e8d4e19c3e40f02fb99b952b85d", "message": "Simplified IntesisHomeHandler after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-16T07:31:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwOTUwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489709508", "body": "Please use a for-each loop here.", "bodyText": "Please use a for-each loop here.", "bodyHTML": "<p dir=\"auto\">Please use a for-each loop here.</p>", "author": "cpmeister", "createdAt": "2020-09-16T19:38:19Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NTUwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489765508", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T21:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwOTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -247,90 +233,92 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         String response = api.postRequest(ipAddress, contentString);\n         logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n         if (response != null) {\n-            boolean success = getSuccess(response);\n-            if (!success) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            } else {\n-                logout();\n+            try {\n                 Response resp = gson.fromJson(response, Response.class);\n-                Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                for (int i = 0; i < dpval.length; i++) {\n-                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n-                    switch (dpval[i].uid) {\n-                        case 1:\n-                            updateState(CHANNEL_TYPE_POWER,\n-                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                            break;\n-                        case 2:\n-                            switch (dpval[i].value) {\n-                                case 0:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                    break;\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                    break;\n-                                case 2:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                    break;\n-                                case 3:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                    break;\n-                                case 4:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                    break;\n-                            }\n-                            break;\n-                        case 4:\n-                            if ((dpval[i].value) == 0) {\n-                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                            } else {\n-                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n-                            }\n-                            break;\n-                        case 5:\n-                            if ((dpval[i].value) == 0) {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n-                            } else if ((dpval[i].value) == 10) {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n-                            } else if ((dpval[i].value) == 11) {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n-                            } else if ((dpval[i].value) == 12) {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n-                            } else {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n-                            }\n-                            break;\n-                        case 6:\n-                            if ((dpval[i].value) == 0) {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n-                            } else if ((dpval[i].value) == 10) {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n-                            } else if ((dpval[i].value) == 11) {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n-                            } else if ((dpval[i].value) == 12) {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n-                            } else {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n-                            }\n-                            break;\n-                        case 9:\n-                            int unit = Math.round((dpval[i].value) / 10);\n-                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                            break;\n-                        case 10:\n-                            unit = Math.round((dpval[i].value) / 10);\n-                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                            break;\n-                        case 37:\n-                            unit = Math.round((dpval[i].value) / 10);\n-                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                            break;\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n                     }\n                 }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -227,127 +232,138 @@ public class IntesisHomeHandler extends BaseThingHandler {\n      */\n     public void getAllUidValues() {\n         logger.debug(\"Polling IntesisHome device\");\n-        login();\n-        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                } else {\n-                    logout();\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                    for (Dpval element : dpval) {\n-                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                        switch (element.uid) {\n-                            case 1:\n-                                updateState(CHANNEL_TYPE_POWER,\n-                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                break;\n-                            case 2:\n-                                switch (element.value) {\n-                                    case 0:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                        break;\n-                                    case 1:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                        break;\n-                                    case 2:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                        break;\n-                                    case 3:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                        break;\n-                                    case 4:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                        break;\n-                                }\n-                                break;\n-                            case 4:\n-                                if ((element.value) == 0) {\n-                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                } else {\n-                                    updateState(CHANNEL_TYPE_FANSPEED,\n-                                            StringType.valueOf(String.valueOf(element.value)));\n-                                }\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                State state;\n-                                if ((element.value) == 0) {\n-                                    state = StringType.valueOf(\"AUTO\");\n-                                } else if ((element.value) == 10) {\n-                                    state = StringType.valueOf(\"SWING\");\n-                                } else if ((element.value) == 11) {\n-                                    state = StringType.valueOf(\"SWIRL\");\n-                                } else if ((element.value) == 12) {\n-                                    state = StringType.valueOf(\"WIDE\");\n-                                } else {\n-                                    state = StringType.valueOf(String.valueOf(element.value));\n-                                }\n-                                switch (element.uid) {\n-                                    case 5:\n-                                        updateState(CHANNEL_TYPE_VANESUD, state);\n-                                        break;\n-                                    case 6:\n-                                        updateState(CHANNEL_TYPE_VANESLR, state);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                int unit = Math.round((element.value) / 10);\n-                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                break;\n-                            case 10:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                break;\n-                            case 37:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                break;\n+        String sessionId = login();\n+        if (sessionId != null) {\n+            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    } else {\n+                        logout(sessionId);\n+                        Data data = gson.fromJson(resp.data, Data.class);\n+                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                        for (Dpval element : dpval) {\n+                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                            switch (element.uid) {\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_POWER,\n+                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                    break;\n+                                case 2:\n+                                    switch (element.value) {\n+                                        case 0:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                            break;\n+                                        case 1:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                            break;\n+                                        case 2:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                            break;\n+                                        case 3:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                            break;\n+                                        case 4:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 4:\n+                                    if ((element.value) == 0) {\n+                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                    } else {\n+                                        updateState(CHANNEL_TYPE_FANSPEED,\n+                                                StringType.valueOf(String.valueOf(element.value)));\n+                                    }\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    State state;\n+                                    if ((element.value) == 0) {\n+                                        state = StringType.valueOf(\"AUTO\");\n+                                    } else if ((element.value) == 10) {\n+                                        state = StringType.valueOf(\"SWING\");\n+                                    } else if ((element.value) == 11) {\n+                                        state = StringType.valueOf(\"SWIRL\");\n+                                    } else if ((element.value) == 12) {\n+                                        state = StringType.valueOf(\"WIDE\");\n+                                    } else {\n+                                        state = StringType.valueOf(String.valueOf(element.value));\n+                                    }\n+                                    switch (element.uid) {\n+                                        case 5:\n+                                            updateState(CHANNEL_TYPE_VANESUD, state);\n+                                            break;\n+                                        case 6:\n+                                            updateState(CHANNEL_TYPE_VANESLR, state);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    int unit = Math.round((element.value) / 10);\n+                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                    break;\n+                                case 10:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                    break;\n+                                case 37:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                    break;\n+                            }\n                         }\n                     }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n \n-    public void login() {\n+    public @Nullable String login() {\n         String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n                 + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n         if (response != null) {\n             try {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Id id = gson.fromJson(data.id.toString(), Id.class);\n-                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n-                        sessionId = id.sessionID.toString();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n                         updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n                     } else {\n                         updateStatus(ThingStatus.OFFLINE);\n                     }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n                 }\n             } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n             }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n         }\n+        return sessionId;\n     }\n \n-    public @Nullable String logout() {\n+    public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         return response;\n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -200,337 +203,294 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         if (uid != 0) {\n             final int uId = uid;\n             final int newValue = value;\n-            scheduler.schedule(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            scheduler.submit(() -> {\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n+            });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(String request, Consumer<Response> handler) {\n+        try {\n+            logger.trace(\"request : '{}'\", request);\n+            String response = api.postRequest(config.ipAddress, request);\n+            if (response != null) {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n+                    handler.accept(resp);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Request unsuccessful\");\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n \n-    public void populateChannels() {\n+    private void postRequestInSession(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                postRequest(request, handler);\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxMTc5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489711799", "body": "This looks like almost duplicate code, can you refactor it? The easiest way would be to create a function (e.g. `toSwingMode()` that returns a String given a `dpval.value` parameter.\r\n\r\n```\r\n\r\n                   private String toSwingMode(int value){\r\n                            if(value == 0) {\r\n                                return \"AUTO\";\r\n                            } else if (value == 10) {\r\n                                return \"SWING\";\r\n                            } else if (value == 11) {\r\n                                return \"SWIRL\";\r\n                            } else if (value == 12) {\r\n                                return \"WIDE\";\r\n                            } else {\r\n                                return String.valueOf(value);\r\n                            }\r\n                   }\r\n```\r\n\r\n```suggestion\r\n                            updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(toSwingMode(dpval.value)));\r\n                            break;\r\n                        case 6:\r\n                            updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(toSwingMode(dpval.value)));\r\n                            break;\r\n```", "bodyText": "This looks like almost duplicate code, can you refactor it? The easiest way would be to create a function (e.g. toSwingMode() that returns a String given a dpval.value parameter.\n\n                   private String toSwingMode(int value){\n                            if(value == 0) {\n                                return \"AUTO\";\n                            } else if (value == 10) {\n                                return \"SWING\";\n                            } else if (value == 11) {\n                                return \"SWIRL\";\n                            } else if (value == 12) {\n                                return \"WIDE\";\n                            } else {\n                                return String.valueOf(value);\n                            }\n                   }\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        if ((dpval[i].value) == 0) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n          \n          \n            \n                                        } else if ((dpval[i].value) == 10) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n          \n          \n            \n                                        } else if ((dpval[i].value) == 11) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n          \n          \n            \n                                        } else if ((dpval[i].value) == 12) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n          \n          \n            \n                                        } else {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n          \n          \n            \n                                        }\n          \n          \n            \n                                        break;\n          \n          \n            \n                                    case 6:\n          \n          \n            \n                                        if ((dpval[i].value) == 0) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n          \n          \n            \n                                        } else if ((dpval[i].value) == 10) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n          \n          \n            \n                                        } else if ((dpval[i].value) == 11) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n          \n          \n            \n                                        } else if ((dpval[i].value) == 12) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n          \n          \n            \n                                        } else {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n          \n          \n            \n                                        }\n          \n          \n            \n                                        break;\n          \n          \n            \n                                        updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(toSwingMode(dpval.value)));\n          \n          \n            \n                                        break;\n          \n          \n            \n                                    case 6:\n          \n          \n            \n                                        updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(toSwingMode(dpval.value)));\n          \n          \n            \n                                        break;", "bodyHTML": "<p dir=\"auto\">This looks like almost duplicate code, can you refactor it? The easiest way would be to create a function (e.g. <code>toSwingMode()</code> that returns a String given a <code>dpval.value</code> parameter.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\n                   private String toSwingMode(int value){\n                            if(value == 0) {\n                                return &quot;AUTO&quot;;\n                            } else if (value == 10) {\n                                return &quot;SWING&quot;;\n                            } else if (value == 11) {\n                                return &quot;SWIRL&quot;;\n                            } else if (value == 12) {\n                                return &quot;WIDE&quot;;\n                            } else {\n                                return String.valueOf(value);\n                            }\n                   }\"><pre><code>\n                   private String toSwingMode(int value){\n                            if(value == 0) {\n                                return \"AUTO\";\n                            } else if (value == 10) {\n                                return \"SWING\";\n                            } else if (value == 11) {\n                                return \"SWIRL\";\n                            } else if (value == 12) {\n                                return \"WIDE\";\n                            } else {\n                                return String.valueOf(value);\n                            }\n                   }\n</code></pre></div>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            <span class=\"pl-k\">if</span> ((dpval[i]<span class=\"pl-k\">.</span>value) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                updateState(<span class=\"pl-c1\">CHANNEL_TYPE_VANESUD</span>, <span class=\"pl-smi\">StringType</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>AUTO<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> ((dpval[i]<span class=\"pl-k\">.</span>value) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">10</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                updateState(<span class=\"pl-c1\">CHANNEL_TYPE_VANESUD</span>, <span class=\"pl-smi\">StringType</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SWING<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> ((dpval[i]<span class=\"pl-k\">.</span>value) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">11</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                updateState(<span class=\"pl-c1\">CHANNEL_TYPE_VANESUD</span>, <span class=\"pl-smi\">StringType</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SWIRL<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> ((dpval[i]<span class=\"pl-k\">.</span>value) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">12</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                updateState(<span class=\"pl-c1\">CHANNEL_TYPE_VANESUD</span>, <span class=\"pl-smi\">StringType</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>WIDE<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                updateState(<span class=\"pl-c1\">CHANNEL_TYPE_VANESUD</span>, <span class=\"pl-smi\">StringType</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>valueOf(dpval[i]<span class=\"pl-k\">.</span>value)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            <span class=\"pl-k\">break</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        <span class=\"pl-k\">case</span> <span class=\"pl-c1\">6</span><span class=\"pl-k\">:</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            <span class=\"pl-k\">if</span> ((dpval[i]<span class=\"pl-k\">.</span>value) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                updateState(<span class=\"pl-c1\">CHANNEL_TYPE_VANESLR</span>, <span class=\"pl-smi\">StringType</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>AUTO<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> ((dpval[i]<span class=\"pl-k\">.</span>value) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">10</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                updateState(<span class=\"pl-c1\">CHANNEL_TYPE_VANESLR</span>, <span class=\"pl-smi\">StringType</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SWING<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> ((dpval[i]<span class=\"pl-k\">.</span>value) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">11</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                updateState(<span class=\"pl-c1\">CHANNEL_TYPE_VANESLR</span>, <span class=\"pl-smi\">StringType</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SWIRL<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> ((dpval[i]<span class=\"pl-k\">.</span>value) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">12</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                updateState(<span class=\"pl-c1\">CHANNEL_TYPE_VANESLR</span>, <span class=\"pl-smi\">StringType</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>WIDE<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                updateState(<span class=\"pl-c1\">CHANNEL_TYPE_VANESLR</span>, <span class=\"pl-smi\">StringType</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>valueOf(dpval[i]<span class=\"pl-k\">.</span>value)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            <span class=\"pl-k\">break</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            updateState(<span class=\"pl-c1\">CHANNEL_TYPE_VANESUD</span>, <span class=\"pl-smi\">StringType</span><span class=\"pl-k\">.</span>valueOf(toSwingMode(dpval<span class=\"pl-k\">.</span>value)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            <span class=\"pl-k\">break</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-k\">case</span> <span class=\"pl-c1\">6</span><span class=\"pl-k\">:</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            updateState(<span class=\"pl-c1\">CHANNEL_TYPE_VANESLR</span>, <span class=\"pl-smi\">StringType</span><span class=\"pl-k\">.</span>valueOf(toSwingMode(dpval<span class=\"pl-k\">.</span>value)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            <span class=\"pl-k\">break</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-16T19:42:40Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NjA3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489766078", "bodyText": "Solved with nested case", "author": "hmerk", "createdAt": "2020-09-16T21:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxMTc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -247,90 +233,92 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         String response = api.postRequest(ipAddress, contentString);\n         logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n         if (response != null) {\n-            boolean success = getSuccess(response);\n-            if (!success) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            } else {\n-                logout();\n+            try {\n                 Response resp = gson.fromJson(response, Response.class);\n-                Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                for (int i = 0; i < dpval.length; i++) {\n-                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n-                    switch (dpval[i].uid) {\n-                        case 1:\n-                            updateState(CHANNEL_TYPE_POWER,\n-                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                            break;\n-                        case 2:\n-                            switch (dpval[i].value) {\n-                                case 0:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                    break;\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                    break;\n-                                case 2:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                    break;\n-                                case 3:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                    break;\n-                                case 4:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                    break;\n-                            }\n-                            break;\n-                        case 4:\n-                            if ((dpval[i].value) == 0) {\n-                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                            } else {\n-                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n-                            }\n-                            break;\n-                        case 5:\n-                            if ((dpval[i].value) == 0) {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n-                            } else if ((dpval[i].value) == 10) {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n-                            } else if ((dpval[i].value) == 11) {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n-                            } else if ((dpval[i].value) == 12) {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n-                            } else {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n-                            }\n-                            break;\n-                        case 6:\n-                            if ((dpval[i].value) == 0) {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n-                            } else if ((dpval[i].value) == 10) {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n-                            } else if ((dpval[i].value) == 11) {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n-                            } else if ((dpval[i].value) == 12) {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n-                            } else {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n-                            }\n-                            break;\n-                        case 9:\n-                            int unit = Math.round((dpval[i].value) / 10);\n-                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                            break;\n-                        case 10:\n-                            unit = Math.round((dpval[i].value) / 10);\n-                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                            break;\n-                        case 37:\n-                            unit = Math.round((dpval[i].value) / 10);\n-                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                            break;\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n                     }\n                 }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -227,127 +232,138 @@ public class IntesisHomeHandler extends BaseThingHandler {\n      */\n     public void getAllUidValues() {\n         logger.debug(\"Polling IntesisHome device\");\n-        login();\n-        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                } else {\n-                    logout();\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                    for (Dpval element : dpval) {\n-                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                        switch (element.uid) {\n-                            case 1:\n-                                updateState(CHANNEL_TYPE_POWER,\n-                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                break;\n-                            case 2:\n-                                switch (element.value) {\n-                                    case 0:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                        break;\n-                                    case 1:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                        break;\n-                                    case 2:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                        break;\n-                                    case 3:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                        break;\n-                                    case 4:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                        break;\n-                                }\n-                                break;\n-                            case 4:\n-                                if ((element.value) == 0) {\n-                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                } else {\n-                                    updateState(CHANNEL_TYPE_FANSPEED,\n-                                            StringType.valueOf(String.valueOf(element.value)));\n-                                }\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                State state;\n-                                if ((element.value) == 0) {\n-                                    state = StringType.valueOf(\"AUTO\");\n-                                } else if ((element.value) == 10) {\n-                                    state = StringType.valueOf(\"SWING\");\n-                                } else if ((element.value) == 11) {\n-                                    state = StringType.valueOf(\"SWIRL\");\n-                                } else if ((element.value) == 12) {\n-                                    state = StringType.valueOf(\"WIDE\");\n-                                } else {\n-                                    state = StringType.valueOf(String.valueOf(element.value));\n-                                }\n-                                switch (element.uid) {\n-                                    case 5:\n-                                        updateState(CHANNEL_TYPE_VANESUD, state);\n-                                        break;\n-                                    case 6:\n-                                        updateState(CHANNEL_TYPE_VANESLR, state);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                int unit = Math.round((element.value) / 10);\n-                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                break;\n-                            case 10:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                break;\n-                            case 37:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                break;\n+        String sessionId = login();\n+        if (sessionId != null) {\n+            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    } else {\n+                        logout(sessionId);\n+                        Data data = gson.fromJson(resp.data, Data.class);\n+                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                        for (Dpval element : dpval) {\n+                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                            switch (element.uid) {\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_POWER,\n+                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                    break;\n+                                case 2:\n+                                    switch (element.value) {\n+                                        case 0:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                            break;\n+                                        case 1:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                            break;\n+                                        case 2:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                            break;\n+                                        case 3:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                            break;\n+                                        case 4:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 4:\n+                                    if ((element.value) == 0) {\n+                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                    } else {\n+                                        updateState(CHANNEL_TYPE_FANSPEED,\n+                                                StringType.valueOf(String.valueOf(element.value)));\n+                                    }\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    State state;\n+                                    if ((element.value) == 0) {\n+                                        state = StringType.valueOf(\"AUTO\");\n+                                    } else if ((element.value) == 10) {\n+                                        state = StringType.valueOf(\"SWING\");\n+                                    } else if ((element.value) == 11) {\n+                                        state = StringType.valueOf(\"SWIRL\");\n+                                    } else if ((element.value) == 12) {\n+                                        state = StringType.valueOf(\"WIDE\");\n+                                    } else {\n+                                        state = StringType.valueOf(String.valueOf(element.value));\n+                                    }\n+                                    switch (element.uid) {\n+                                        case 5:\n+                                            updateState(CHANNEL_TYPE_VANESUD, state);\n+                                            break;\n+                                        case 6:\n+                                            updateState(CHANNEL_TYPE_VANESLR, state);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    int unit = Math.round((element.value) / 10);\n+                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                    break;\n+                                case 10:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                    break;\n+                                case 37:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                    break;\n+                            }\n                         }\n                     }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n \n-    public void login() {\n+    public @Nullable String login() {\n         String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n                 + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n         if (response != null) {\n             try {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Id id = gson.fromJson(data.id.toString(), Id.class);\n-                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n-                        sessionId = id.sessionID.toString();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n                         updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n                     } else {\n                         updateStatus(ThingStatus.OFFLINE);\n                     }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n                 }\n             } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n             }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n         }\n+        return sessionId;\n     }\n \n-    public @Nullable String logout() {\n+    public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         return response;\n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -200,337 +203,294 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         if (uid != 0) {\n             final int uId = uid;\n             final int newValue = value;\n-            scheduler.schedule(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            scheduler.submit(() -> {\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n+            });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(String request, Consumer<Response> handler) {\n+        try {\n+            logger.trace(\"request : '{}'\", request);\n+            String response = api.postRequest(config.ipAddress, request);\n+            if (response != null) {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n+                    handler.accept(resp);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Request unsuccessful\");\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n \n-    public void populateChannels() {\n+    private void postRequestInSession(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                postRequest(request, handler);\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMDA5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489720095", "body": "Parsing and writing json to/from a String can be pretty computationally intensive, so it would be more efficient to pass the already parsed JsonElement into gson instead.\r\n```suggestion\r\n                Data data = gson.fromJson(resp.data, Data.class);\r\n```", "bodyText": "Parsing and writing json to/from a String can be pretty computationally intensive, so it would be more efficient to pass the already parsed JsonElement into gson instead.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Data data = gson.fromJson(resp.data.toString(), Data.class);\n          \n          \n            \n                            Data data = gson.fromJson(resp.data, Data.class);", "bodyHTML": "<p dir=\"auto\">Parsing and writing json to/from a String can be pretty computationally intensive, so it would be more efficient to pass the already parsed JsonElement into gson instead.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">Data</span> data <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(resp<span class=\"pl-k\">.</span>data<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">toString()</span>, <span class=\"pl-smi\">Data</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-smi\">Data</span> data <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(resp<span class=\"pl-k\">.</span>data, <span class=\"pl-smi\">Data</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-16T19:58:56Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NjgxNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489766816", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T21:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMDA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -247,90 +233,92 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         String response = api.postRequest(ipAddress, contentString);\n         logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n         if (response != null) {\n-            boolean success = getSuccess(response);\n-            if (!success) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            } else {\n-                logout();\n+            try {\n                 Response resp = gson.fromJson(response, Response.class);\n-                Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                for (int i = 0; i < dpval.length; i++) {\n-                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n-                    switch (dpval[i].uid) {\n-                        case 1:\n-                            updateState(CHANNEL_TYPE_POWER,\n-                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                            break;\n-                        case 2:\n-                            switch (dpval[i].value) {\n-                                case 0:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                    break;\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                    break;\n-                                case 2:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                    break;\n-                                case 3:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                    break;\n-                                case 4:\n-                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                    break;\n-                            }\n-                            break;\n-                        case 4:\n-                            if ((dpval[i].value) == 0) {\n-                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                            } else {\n-                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n-                            }\n-                            break;\n-                        case 5:\n-                            if ((dpval[i].value) == 0) {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n-                            } else if ((dpval[i].value) == 10) {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n-                            } else if ((dpval[i].value) == 11) {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n-                            } else if ((dpval[i].value) == 12) {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n-                            } else {\n-                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n-                            }\n-                            break;\n-                        case 6:\n-                            if ((dpval[i].value) == 0) {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n-                            } else if ((dpval[i].value) == 10) {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n-                            } else if ((dpval[i].value) == 11) {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n-                            } else if ((dpval[i].value) == 12) {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n-                            } else {\n-                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n-                            }\n-                            break;\n-                        case 9:\n-                            int unit = Math.round((dpval[i].value) / 10);\n-                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                            break;\n-                        case 10:\n-                            unit = Math.round((dpval[i].value) / 10);\n-                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                            break;\n-                        case 37:\n-                            unit = Math.round((dpval[i].value) / 10);\n-                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                            break;\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n                     }\n                 }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -227,127 +232,138 @@ public class IntesisHomeHandler extends BaseThingHandler {\n      */\n     public void getAllUidValues() {\n         logger.debug(\"Polling IntesisHome device\");\n-        login();\n-        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                } else {\n-                    logout();\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                    for (Dpval element : dpval) {\n-                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                        switch (element.uid) {\n-                            case 1:\n-                                updateState(CHANNEL_TYPE_POWER,\n-                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                break;\n-                            case 2:\n-                                switch (element.value) {\n-                                    case 0:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                        break;\n-                                    case 1:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                        break;\n-                                    case 2:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                        break;\n-                                    case 3:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                        break;\n-                                    case 4:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                        break;\n-                                }\n-                                break;\n-                            case 4:\n-                                if ((element.value) == 0) {\n-                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                } else {\n-                                    updateState(CHANNEL_TYPE_FANSPEED,\n-                                            StringType.valueOf(String.valueOf(element.value)));\n-                                }\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                State state;\n-                                if ((element.value) == 0) {\n-                                    state = StringType.valueOf(\"AUTO\");\n-                                } else if ((element.value) == 10) {\n-                                    state = StringType.valueOf(\"SWING\");\n-                                } else if ((element.value) == 11) {\n-                                    state = StringType.valueOf(\"SWIRL\");\n-                                } else if ((element.value) == 12) {\n-                                    state = StringType.valueOf(\"WIDE\");\n-                                } else {\n-                                    state = StringType.valueOf(String.valueOf(element.value));\n-                                }\n-                                switch (element.uid) {\n-                                    case 5:\n-                                        updateState(CHANNEL_TYPE_VANESUD, state);\n-                                        break;\n-                                    case 6:\n-                                        updateState(CHANNEL_TYPE_VANESLR, state);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                int unit = Math.round((element.value) / 10);\n-                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                break;\n-                            case 10:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                break;\n-                            case 37:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                break;\n+        String sessionId = login();\n+        if (sessionId != null) {\n+            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    } else {\n+                        logout(sessionId);\n+                        Data data = gson.fromJson(resp.data, Data.class);\n+                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                        for (Dpval element : dpval) {\n+                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                            switch (element.uid) {\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_POWER,\n+                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                    break;\n+                                case 2:\n+                                    switch (element.value) {\n+                                        case 0:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                            break;\n+                                        case 1:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                            break;\n+                                        case 2:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                            break;\n+                                        case 3:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                            break;\n+                                        case 4:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 4:\n+                                    if ((element.value) == 0) {\n+                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                    } else {\n+                                        updateState(CHANNEL_TYPE_FANSPEED,\n+                                                StringType.valueOf(String.valueOf(element.value)));\n+                                    }\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    State state;\n+                                    if ((element.value) == 0) {\n+                                        state = StringType.valueOf(\"AUTO\");\n+                                    } else if ((element.value) == 10) {\n+                                        state = StringType.valueOf(\"SWING\");\n+                                    } else if ((element.value) == 11) {\n+                                        state = StringType.valueOf(\"SWIRL\");\n+                                    } else if ((element.value) == 12) {\n+                                        state = StringType.valueOf(\"WIDE\");\n+                                    } else {\n+                                        state = StringType.valueOf(String.valueOf(element.value));\n+                                    }\n+                                    switch (element.uid) {\n+                                        case 5:\n+                                            updateState(CHANNEL_TYPE_VANESUD, state);\n+                                            break;\n+                                        case 6:\n+                                            updateState(CHANNEL_TYPE_VANESLR, state);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    int unit = Math.round((element.value) / 10);\n+                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                    break;\n+                                case 10:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                    break;\n+                                case 37:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                    break;\n+                            }\n                         }\n                     }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n \n-    public void login() {\n+    public @Nullable String login() {\n         String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n                 + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n         if (response != null) {\n             try {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Id id = gson.fromJson(data.id.toString(), Id.class);\n-                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n-                        sessionId = id.sessionID.toString();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n                         updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n                     } else {\n                         updateStatus(ThingStatus.OFFLINE);\n                     }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n                 }\n             } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n             }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n         }\n+        return sessionId;\n     }\n \n-    public @Nullable String logout() {\n+    public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         return response;\n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -200,337 +203,294 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         if (uid != 0) {\n             final int uId = uid;\n             final int newValue = value;\n-            scheduler.schedule(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            scheduler.submit(() -> {\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n+            });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(String request, Consumer<Response> handler) {\n+        try {\n+            logger.trace(\"request : '{}'\", request);\n+            String response = api.postRequest(config.ipAddress, request);\n+            if (response != null) {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n+                    handler.accept(resp);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Request unsuccessful\");\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n \n-    public void populateChannels() {\n+    private void postRequestInSession(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                postRequest(request, handler);\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMTY1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489721651", "body": "Any reason that you aren't using classes for the nested json structure?\r\n```suggestion\r\n        public Datapoints[] datapoints; // dataPoints\r\n```", "bodyText": "Any reason that you aren't using classes for the nested json structure?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public JsonArray datapoints; // dataPoints\n          \n          \n            \n                    public Datapoints[] datapoints; // dataPoints", "bodyHTML": "<p dir=\"auto\">Any reason that you aren't using classes for the nested json structure?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"98\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">public</span> <span class=\"pl-smi x x-first x-last\">JsonArray</span> datapoints; <span class=\"pl-c\"><span class=\"pl-c\">//</span> dataPoints</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"98\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">public</span> <span class=\"pl-k x x-first\">Datapoints</span><span class=\"x x-last\">[]</span> datapoints; <span class=\"pl-c\"><span class=\"pl-c\">//</span> dataPoints</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-16T20:01:54Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.gson;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * {@link IntesisHomeJSonDTO} is used for the JSon/GSon mapping\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+public class IntesisHomeJSonDTO {\n+\n+    public static class Response {\n+        public boolean success;\n+        public JsonElement data;\n+    }\n+\n+    public static class Data {\n+        public JsonElement id;\n+        public JsonElement info;\n+        public JsonElement userinfo;\n+        public JsonElement config;\n+        public JsonElement dp;\n+        public JsonElement dpval;\n+    }\n+\n+    public static class Id {\n+        public String sessionID; // Session ID\n+    }\n+\n+    // Device Information used for thing properties\n+    public static class Info {\n+        public String wlanSTAMAC; // Device Client MAC Address\n+        public String wlanAPMAC; // Device Access Point MAC Address\n+        public String fwVersion; // Device Firmware Version\n+        public String wlanFwVersion; // Wireless Firmware Version\n+        public String acStatus; // Air Conditioner Communication Status\n+        public String wlanLNK; // Connection Status with Wireless Network\n+        public String ssid; // Wireless Network SSID\n+        public String rssi; // Wireless Signal Strength\n+        public String tcpServerLNK; // Cloud Server Connection (Not used for communication here)\n+        public String localdatetime; // Local Date Time\n+        public String powerStatus;\n+        public String lastconfigdatetime; // Last Configuration Date Time\n+        public String deviceModel; // Device Model\n+        public String sn; // Serial Number\n+        public String lastError;\n+    }\n+\n+    public static class Userinfo {\n+        public String username;\n+        public JsonElement servicelist;\n+    }\n+\n+    // List of available services\n+    public static class Servicelist {\n+        public String setconfig;\n+        public String getconfig;\n+        public String getcurrentconfig;\n+        public String getinfo;\n+        public String login;\n+        public String logout;\n+        public String passchange;\n+        public String getavailabledatapoints;\n+        public String setdatapointvalue;\n+        public String getdatapointvalue;\n+        public String getavailableservices;\n+        public String reboot;\n+        public String setdefaults;\n+        public String getdefaultconfig;\n+    }\n+\n+    public static class Config {\n+        public String deviceModel; // Device Model\n+        public String ip; // Device IP Address\n+        public String netmask; // Device IP Address\n+        public String dfltgw; // Default gateway\n+        public boolean dhcp; // DHCP enabled\n+        public String ssid; // WLAN Access Point\n+        public int security; // Security Type\n+        public int regdomain;\n+        public int lastconfigdatetime;\n+    }\n+\n+    public static class Dp {\n+        public JsonArray datapoints; // dataPoints", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NzUzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489767534", "bodyText": "I tried using classes, but the returned json is a bit malformed, so this was the simplest way to solve it.", "author": "hmerk", "createdAt": "2020-09-16T21:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMTY1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyNTcyMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489725720", "body": "It looks like you are parsing the response multiple times here, first to check the success flag, then again if the flag was true. Can you optimize this so it only parses the response a single time?", "bodyText": "It looks like you are parsing the response multiple times here, first to check the success flag, then again if the flag was true. Can you optimize this so it only parses the response a single time?", "bodyHTML": "<p dir=\"auto\">It looks like you are parsing the response multiple times here, first to check the success flag, then again if the flag was true. Can you optimize this so it only parses the response a single time?</p>", "author": "cpmeister", "createdAt": "2020-09-16T20:09:59Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MjU5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489772592", "bodyText": "removed getSuccess and avoided double parsing", "author": "hmerk", "createdAt": "2020-09-16T21:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyNTcyMA=="}], "type": "inlineReview", "revised_code": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -361,29 +353,27 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         return response;\n     }\n \n-    public boolean getSuccess(String response) {\n-        Response resp = gson.fromJson(response, Response.class);\n-        boolean success = resp.success;\n-        return success;\n-    }\n-\n-    public void getInfo() {\n+    public void populateProperties() {\n         String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n         String response = api.postRequest(ipAddress, contentString);\n         logger.trace(\"getInfo response : {}\", response);\n         if (response != null) {\n-            boolean success = getSuccess(response);\n-            if (success) {\n+            try {\n                 Response resp = gson.fromJson(response, Response.class);\n-                Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                Info info = gson.fromJson(data.info.toString(), Info.class);\n-                properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                updateProperties(properties);\n-                updateStatus(ThingStatus.ONLINE);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -362,14 +378,13 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Info info = gson.fromJson(data.info, Info.class);\n                     properties.put(PROPERTY_VENDOR, \"Intesis\");\n                     properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n                     properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n                     properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n                     properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateProperties(properties);\n                     updateStatus(ThingStatus.ONLINE);\n                 }\n             } catch (JsonSyntaxException e) {\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}, {"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -378,9 +393,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void getDataPoints() {\n-        login();\n-        if (!sessionId.isEmpty()) {\n+    public void populateChannels() {\n+        String sessionId = login();\n+        if (sessionId != null && !sessionId.isEmpty()) {\n             String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n                     + \"\\\"}}\";\n             String response = api.postRequest(ipAddress, contentString);\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyNjk3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489726978", "body": "I don't think you should have this method, parsing is too expensive to throw away the result on success. It would be better if you inlined this code in the callers and then got rid of this method.", "bodyText": "I don't think you should have this method, parsing is too expensive to throw away the result on success. It would be better if you inlined this code in the callers and then got rid of this method.", "bodyHTML": "<p dir=\"auto\">I don't think you should have this method, parsing is too expensive to throw away the result on success. It would be better if you inlined this code in the callers and then got rid of this method.</p>", "author": "cpmeister", "createdAt": "2020-09-16T20:12:34Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3Mjc1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489772755", "bodyText": "removed", "author": "hmerk", "createdAt": "2020-09-16T21:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyNjk3OA=="}], "type": "inlineReview", "revised_code": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -361,29 +353,27 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         return response;\n     }\n \n-    public boolean getSuccess(String response) {\n-        Response resp = gson.fromJson(response, Response.class);\n-        boolean success = resp.success;\n-        return success;\n-    }\n-\n-    public void getInfo() {\n+    public void populateProperties() {\n         String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n         String response = api.postRequest(ipAddress, contentString);\n         logger.trace(\"getInfo response : {}\", response);\n         if (response != null) {\n-            boolean success = getSuccess(response);\n-            if (success) {\n+            try {\n                 Response resp = gson.fromJson(response, Response.class);\n-                Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                Info info = gson.fromJson(data.info.toString(), Info.class);\n-                properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                updateProperties(properties);\n-                updateStatus(ThingStatus.ONLINE);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -362,14 +378,13 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Info info = gson.fromJson(data.info, Info.class);\n                     properties.put(PROPERTY_VENDOR, \"Intesis\");\n                     properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n                     properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n                     properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n                     properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateProperties(properties);\n                     updateStatus(ThingStatus.ONLINE);\n                 }\n             } catch (JsonSyntaxException e) {\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}, {"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -378,9 +393,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void getDataPoints() {\n-        login();\n-        if (!sessionId.isEmpty()) {\n+    public void populateChannels() {\n+        String sessionId = login();\n+        if (sessionId != null && !sessionId.isEmpty()) {\n             String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n                     + \"\\\"}}\";\n             String response = api.postRequest(ipAddress, contentString);\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyOTIyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489729229", "body": "You should catch any `JsonSyntaxException` that might be thrown when using gson. Sometimes vendors accidentally break their own api. You should make sure that your code can appropriately handle when that happens.", "bodyText": "You should catch any JsonSyntaxException that might be thrown when using gson. Sometimes vendors accidentally break their own api. You should make sure that your code can appropriately handle when that happens.", "bodyHTML": "<p dir=\"auto\">You should catch any <code>JsonSyntaxException</code> that might be thrown when using gson. Sometimes vendors accidentally break their own api. You should make sure that your code can appropriately handle when that happens.</p>", "author": "cpmeister", "createdAt": "2020-09-16T20:17:06Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3Njg4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489776881", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T21:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyOTIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -340,17 +328,21 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                 + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         if (response != null) {\n-            Response resp = gson.fromJson(response, Response.class);\n-            boolean success = resp.success;\n-            if (success) {\n-                Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                Id id = gson.fromJson(data.id.toString(), Id.class);\n-                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n-                    sessionId = id.sessionID.toString();\n-                    updateStatus(ThingStatus.ONLINE);\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE);\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n                 }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -227,127 +232,138 @@ public class IntesisHomeHandler extends BaseThingHandler {\n      */\n     public void getAllUidValues() {\n         logger.debug(\"Polling IntesisHome device\");\n-        login();\n-        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                } else {\n-                    logout();\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                    for (Dpval element : dpval) {\n-                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                        switch (element.uid) {\n-                            case 1:\n-                                updateState(CHANNEL_TYPE_POWER,\n-                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                break;\n-                            case 2:\n-                                switch (element.value) {\n-                                    case 0:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                        break;\n-                                    case 1:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                        break;\n-                                    case 2:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                        break;\n-                                    case 3:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                        break;\n-                                    case 4:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                        break;\n-                                }\n-                                break;\n-                            case 4:\n-                                if ((element.value) == 0) {\n-                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                } else {\n-                                    updateState(CHANNEL_TYPE_FANSPEED,\n-                                            StringType.valueOf(String.valueOf(element.value)));\n-                                }\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                State state;\n-                                if ((element.value) == 0) {\n-                                    state = StringType.valueOf(\"AUTO\");\n-                                } else if ((element.value) == 10) {\n-                                    state = StringType.valueOf(\"SWING\");\n-                                } else if ((element.value) == 11) {\n-                                    state = StringType.valueOf(\"SWIRL\");\n-                                } else if ((element.value) == 12) {\n-                                    state = StringType.valueOf(\"WIDE\");\n-                                } else {\n-                                    state = StringType.valueOf(String.valueOf(element.value));\n-                                }\n-                                switch (element.uid) {\n-                                    case 5:\n-                                        updateState(CHANNEL_TYPE_VANESUD, state);\n-                                        break;\n-                                    case 6:\n-                                        updateState(CHANNEL_TYPE_VANESLR, state);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                int unit = Math.round((element.value) / 10);\n-                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                break;\n-                            case 10:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                break;\n-                            case 37:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                break;\n+        String sessionId = login();\n+        if (sessionId != null) {\n+            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    } else {\n+                        logout(sessionId);\n+                        Data data = gson.fromJson(resp.data, Data.class);\n+                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                        for (Dpval element : dpval) {\n+                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                            switch (element.uid) {\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_POWER,\n+                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                    break;\n+                                case 2:\n+                                    switch (element.value) {\n+                                        case 0:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                            break;\n+                                        case 1:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                            break;\n+                                        case 2:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                            break;\n+                                        case 3:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                            break;\n+                                        case 4:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 4:\n+                                    if ((element.value) == 0) {\n+                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                    } else {\n+                                        updateState(CHANNEL_TYPE_FANSPEED,\n+                                                StringType.valueOf(String.valueOf(element.value)));\n+                                    }\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    State state;\n+                                    if ((element.value) == 0) {\n+                                        state = StringType.valueOf(\"AUTO\");\n+                                    } else if ((element.value) == 10) {\n+                                        state = StringType.valueOf(\"SWING\");\n+                                    } else if ((element.value) == 11) {\n+                                        state = StringType.valueOf(\"SWIRL\");\n+                                    } else if ((element.value) == 12) {\n+                                        state = StringType.valueOf(\"WIDE\");\n+                                    } else {\n+                                        state = StringType.valueOf(String.valueOf(element.value));\n+                                    }\n+                                    switch (element.uid) {\n+                                        case 5:\n+                                            updateState(CHANNEL_TYPE_VANESUD, state);\n+                                            break;\n+                                        case 6:\n+                                            updateState(CHANNEL_TYPE_VANESLR, state);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    int unit = Math.round((element.value) / 10);\n+                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                    break;\n+                                case 10:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                    break;\n+                                case 37:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                    break;\n+                            }\n                         }\n                     }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n \n-    public void login() {\n+    public @Nullable String login() {\n         String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n                 + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n         if (response != null) {\n             try {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Id id = gson.fromJson(data.id.toString(), Id.class);\n-                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n-                        sessionId = id.sessionID.toString();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n                         updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n                     } else {\n                         updateStatus(ThingStatus.OFFLINE);\n                     }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n                 }\n             } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n             }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n         }\n+        return sessionId;\n     }\n \n-    public @Nullable String logout() {\n+    public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         return response;\n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -200,337 +203,294 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         if (uid != 0) {\n             final int uId = uid;\n             final int newValue = value;\n-            scheduler.schedule(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            scheduler.submit(() -> {\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n+            });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(String request, Consumer<Response> handler) {\n+        try {\n+            logger.trace(\"request : '{}'\", request);\n+            String response = api.postRequest(config.ipAddress, request);\n+            if (response != null) {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n+                    handler.accept(resp);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Request unsuccessful\");\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n \n-    public void populateChannels() {\n+    private void postRequestInSession(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                postRequest(request, handler);\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyOTYwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489729608", "body": "Please refactor this too.", "bodyText": "Please refactor this too.", "bodyHTML": "<p dir=\"auto\">Please refactor this too.</p>", "author": "cpmeister", "createdAt": "2020-09-16T20:17:52Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3OTU2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489779561", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T22:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyOTYwOA=="}], "type": "inlineReview", "revised_code": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -175,32 +176,12 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                             value = 12;\n                             break;\n                     }\n-                    break;\n-                case CHANNEL_TYPE_VANESLR:\n-                    uid = 6;\n-                    switch (command.toString()) {\n-                        case \"AUTO\":\n-                            value = 0;\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n                             break;\n-                        case \"1\":\n-                        case \"2\":\n-                        case \"3\":\n-                        case \"4\":\n-                        case \"5\":\n-                        case \"6\":\n-                        case \"7\":\n-                        case \"8\":\n-                        case \"9\":\n-                            value = Integer.parseInt(command.toString());\n-                            break;\n-                        case \"SWING\":\n-                            value = 10;\n-                            break;\n-                        case \"SWIRL\":\n-                            value = 11;\n-                            break;\n-                        case \"WIDE\":\n-                            value = 12;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n                             break;\n                     }\n                     break;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMTYyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489731625", "body": "Starting a method name with `get` implies that the method would return something, but this code doesn't do that. I would suggest renaming this method `populateProperties`.", "bodyText": "Starting a method name with get implies that the method would return something, but this code doesn't do that. I would suggest renaming this method populateProperties.", "bodyHTML": "<p dir=\"auto\">Starting a method name with <code>get</code> implies that the method would return something, but this code doesn't do that. I would suggest renaming this method <code>populateProperties</code>.</p>", "author": "cpmeister", "createdAt": "2020-09-16T20:21:51Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4MDI3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489780277", "bodyText": "renamed", "author": "hmerk", "createdAt": "2020-09-16T22:04:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMTYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -361,29 +353,27 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         return response;\n     }\n \n-    public boolean getSuccess(String response) {\n-        Response resp = gson.fromJson(response, Response.class);\n-        boolean success = resp.success;\n-        return success;\n-    }\n-\n-    public void getInfo() {\n+    public void populateProperties() {\n         String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n         String response = api.postRequest(ipAddress, contentString);\n         logger.trace(\"getInfo response : {}\", response);\n         if (response != null) {\n-            boolean success = getSuccess(response);\n-            if (success) {\n+            try {\n                 Response resp = gson.fromJson(response, Response.class);\n-                Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                Info info = gson.fromJson(data.info.toString(), Info.class);\n-                properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                updateProperties(properties);\n-                updateStatus(ThingStatus.ONLINE);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -362,14 +378,13 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Info info = gson.fromJson(data.info, Info.class);\n                     properties.put(PROPERTY_VENDOR, \"Intesis\");\n                     properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n                     properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n                     properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n                     properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateProperties(properties);\n                     updateStatus(ThingStatus.ONLINE);\n                 }\n             } catch (JsonSyntaxException e) {\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}, {"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -378,9 +393,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void getDataPoints() {\n-        login();\n-        if (!sessionId.isEmpty()) {\n+    public void populateChannels() {\n+        String sessionId = login();\n+        if (sessionId != null && !sessionId.isEmpty()) {\n             String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n                     + \"\\\"}}\";\n             String response = api.postRequest(ipAddress, contentString);\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzE1MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489733150", "body": "You add this channel to the thing in the code preceding this, so would this ever be false?", "bodyText": "You add this channel to the thing in the code preceding this, so would this ever be false?", "bodyHTML": "<p dir=\"auto\">You add this channel to the thing in the code preceding this, so would this ever be false?</p>", "author": "cpmeister", "createdAt": "2020-09-16T20:24:58Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (Datapoints datapoint : datapoints) {\n+                        Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoint.uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                for (String modString : descr.states) {\n+                                    switch (modString) {\n+                                        case \"0\":\n+                                            opModes.add(\"AUTO\");\n+                                            break;\n+                                        case \"1\":\n+                                            opModes.add(\"HEAT\");\n+                                            break;\n+                                        case \"2\":\n+                                            opModes.add(\"DRY\");\n+                                            break;\n+                                        case \"3\":\n+                                            opModes.add(\"FAN\");\n+                                            break;\n+                                        case \"4\":\n+                                            opModes.add(\"COOL\");\n+                                            break;\n+                                    }\n+                                }\n+                                properties.put(\"Supported modes\", opModes.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_MODE;\n+                                addChannel(channelId, itemType, opModes);\n+                                break;\n+                            case 4:\n+                                List<String> fanLevels = new ArrayList<>();\n+                                for (String fanString : descr.states) {\n+                                    if (\"AUTO\".contentEquals(fanString)) {\n+                                        fanLevels.add(\"AUTO\");\n+                                    } else {\n+                                        fanLevels.add(fanString);\n+                                    }\n+                                }\n+                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                addChannel(channelId, itemType, fanLevels);\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                List<String> swingModes = new ArrayList<>();\n+                                for (String swingString : descr.states) {\n+                                    if (\"AUTO\".contentEquals(swingString)) {\n+                                        swingModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingString)) {\n+                                        swingModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingString)) {\n+                                        swingModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingString)) {\n+                                        swingModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingModes.add(swingString);\n+                                    }\n+                                }\n+                                switch (datapoint.uid) {\n+                                    case 5:\n+                                        channelId = CHANNEL_TYPE_VANESUD;\n+                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                        updateProperties(properties);\n+                                        addChannel(channelId, itemType, swingModes);\n+                                        break;\n+                                    case 6:\n+                                        channelId = CHANNEL_TYPE_VANESUD;\n+                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                        updateProperties(properties);\n+                                        addChannel(channelId, itemType, swingModes);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                itemType = \"Number:Temperature\";\n+                                addChannel(channelId, itemType, null);\n+                                break;\n+                            case 10:\n+                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                itemType = \"Number:Temperature\";\n+                                addChannel(channelId, itemType, null);\n+                                break;\n+                            case 37:\n+                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                itemType = \"Number:Temperature\";\n+                                addChannel(channelId, itemType, null);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+            logger.trace(\"Start Refresh Job\");\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                    TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (getThing().getChannel(channelId) != null) {", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4MTA5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489781096", "bodyText": "You're right, removed superfluend null check", "author": "hmerk", "createdAt": "2020-09-16T22:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -518,17 +513,15 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             thingBuilder.withChannel(channel);\n             updateThing(thingBuilder.build());\n \n-            if (getThing().getChannel(channelId) != null) {\n-                if (options != null) {\n-                    final List<StateOption> stateOptions = options.stream()\n-                            .map(e -> new StateOption(e.toString(),\n-                                    e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                            .collect(Collectors.toList());\n-                    logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                    channel = thing.getChannel(channelId);\n-                    if (channel != null) {\n-                        intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                    }\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e.toString(),\n+                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                channel = thing.getChannel(channelId);\n+                if (channel != null) {\n+                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n                 }\n             }\n         }\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -515,14 +526,10 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n             if (options != null) {\n                 final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e.toString(),\n-                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                         .collect(Collectors.toList());\n                 logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                channel = thing.getChannel(channelId);\n-                if (channel != null) {\n-                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                }\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n             }\n         }\n     }\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzkxNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489733917", "body": "Looks like a copy/paste bug here.", "bodyText": "Looks like a copy/paste bug here.", "bodyHTML": "<p dir=\"auto\">Looks like a copy/paste bug here.</p>", "author": "cpmeister", "createdAt": "2020-09-16T20:26:26Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (Datapoints datapoint : datapoints) {\n+                        Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoint.uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                for (String modString : descr.states) {\n+                                    switch (modString) {\n+                                        case \"0\":\n+                                            opModes.add(\"AUTO\");\n+                                            break;\n+                                        case \"1\":\n+                                            opModes.add(\"HEAT\");\n+                                            break;\n+                                        case \"2\":\n+                                            opModes.add(\"DRY\");\n+                                            break;\n+                                        case \"3\":\n+                                            opModes.add(\"FAN\");\n+                                            break;\n+                                        case \"4\":\n+                                            opModes.add(\"COOL\");\n+                                            break;\n+                                    }\n+                                }\n+                                properties.put(\"Supported modes\", opModes.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_MODE;\n+                                addChannel(channelId, itemType, opModes);\n+                                break;\n+                            case 4:\n+                                List<String> fanLevels = new ArrayList<>();\n+                                for (String fanString : descr.states) {\n+                                    if (\"AUTO\".contentEquals(fanString)) {\n+                                        fanLevels.add(\"AUTO\");\n+                                    } else {\n+                                        fanLevels.add(fanString);\n+                                    }\n+                                }\n+                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                addChannel(channelId, itemType, fanLevels);\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                List<String> swingModes = new ArrayList<>();\n+                                for (String swingString : descr.states) {\n+                                    if (\"AUTO\".contentEquals(swingString)) {\n+                                        swingModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingString)) {\n+                                        swingModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingString)) {\n+                                        swingModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingString)) {\n+                                        swingModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingModes.add(swingString);\n+                                    }\n+                                }\n+                                switch (datapoint.uid) {\n+                                    case 5:\n+                                        channelId = CHANNEL_TYPE_VANESUD;\n+                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                        updateProperties(properties);\n+                                        addChannel(channelId, itemType, swingModes);\n+                                        break;\n+                                    case 6:\n+                                        channelId = CHANNEL_TYPE_VANESUD;\n+                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                        updateProperties(properties);\n+                                        addChannel(channelId, itemType, swingModes);\n+                                        break;", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3OTk0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489779942", "bodyText": "Indeed, changed", "author": "hmerk", "createdAt": "2020-09-16T22:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 42bda92937..20524a851a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -396,106 +386,111 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             String response = api.postRequest(ipAddress, contentString);\n             logger.trace(\"available Datapoints response : {}\", response);\n             if (response != null) {\n-                boolean success = getSuccess(response);\n-                if (success) {\n-                    logout();\n+                try {\n                     Response resp = gson.fromJson(response, Response.class);\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n-                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                    for (Datapoints datapoint : datapoints) {\n-                        Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                        String channelId = \"\";\n-                        String itemType = \"String\";\n-                        switch (datapoint.uid) {\n-                            case 2:\n-                                List<String> opModes = new ArrayList<>();\n-                                for (String modString : descr.states) {\n-                                    switch (modString) {\n-                                        case \"0\":\n-                                            opModes.add(\"AUTO\");\n-                                            break;\n-                                        case \"1\":\n-                                            opModes.add(\"HEAT\");\n-                                            break;\n-                                        case \"2\":\n-                                            opModes.add(\"DRY\");\n-                                            break;\n-                                        case \"3\":\n-                                            opModes.add(\"FAN\");\n-                                            break;\n-                                        case \"4\":\n-                                            opModes.add(\"COOL\");\n-                                            break;\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n                                     }\n-                                }\n-                                properties.put(\"Supported modes\", opModes.toString());\n-                                updateProperties(properties);\n-                                channelId = CHANNEL_TYPE_MODE;\n-                                addChannel(channelId, itemType, opModes);\n-                                break;\n-                            case 4:\n-                                List<String> fanLevels = new ArrayList<>();\n-                                for (String fanString : descr.states) {\n-                                    if (\"AUTO\".contentEquals(fanString)) {\n-                                        fanLevels.add(\"AUTO\");\n-                                    } else {\n-                                        fanLevels.add(fanString);\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n                                     }\n-                                }\n-                                properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                updateProperties(properties);\n-                                channelId = CHANNEL_TYPE_FANSPEED;\n-                                addChannel(channelId, itemType, fanLevels);\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                List<String> swingModes = new ArrayList<>();\n-                                for (String swingString : descr.states) {\n-                                    if (\"AUTO\".contentEquals(swingString)) {\n-                                        swingModes.add(\"AUTO\");\n-                                    } else if (\"10\".contentEquals(swingString)) {\n-                                        swingModes.add(\"SWING\");\n-                                    } else if (\"11\".contentEquals(swingString)) {\n-                                        swingModes.add(\"SWIRL\");\n-                                    } else if (\"12\".contentEquals(swingString)) {\n-                                        swingModes.add(\"WIDE\");\n-                                    } else {\n-                                        swingModes.add(swingString);\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_FANSPEED;\n+                                    addChannel(channelId, itemType, fanLevels);\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    List<String> swingModes = new ArrayList<>();\n+                                    for (String swingString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(swingString)) {\n+                                            swingModes.add(\"AUTO\");\n+                                        } else if (\"10\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWING\");\n+                                        } else if (\"11\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWIRL\");\n+                                        } else if (\"12\".contentEquals(swingString)) {\n+                                            swingModes.add(\"WIDE\");\n+                                        } else {\n+                                            swingModes.add(swingString);\n+                                        }\n                                     }\n-                                }\n-                                switch (datapoint.uid) {\n-                                    case 5:\n-                                        channelId = CHANNEL_TYPE_VANESUD;\n-                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                        updateProperties(properties);\n-                                        addChannel(channelId, itemType, swingModes);\n-                                        break;\n-                                    case 6:\n-                                        channelId = CHANNEL_TYPE_VANESUD;\n-                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                        updateProperties(properties);\n-                                        addChannel(channelId, itemType, swingModes);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n-                            case 10:\n-                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n-                            case 37:\n-                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                itemType = \"Number:Temperature\";\n-                                addChannel(channelId, itemType, null);\n-                                break;\n+                                    switch (datapoint.uid) {\n+                                        case 5:\n+                                            channelId = CHANNEL_TYPE_VANESUD;\n+                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                        case 6:\n+                                            channelId = CHANNEL_TYPE_VANESLR;\n+                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 10:\n+                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 37:\n+                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                            }\n                         }\n                     }\n+\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n             } else {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n", "next_change": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -490,7 +501,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n \n                 } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n                 }\n             } else {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}, {"oid": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "url": "https://github.com/openhab/openhab-addons/commit/3686e2eb700297ebf057829dc3e7b7a6de4ac439", "message": "Further simplification in  IntesisHomeHandler after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-16T22:08:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxMzQwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490513405", "body": "```suggestion\r\n                        Dp dp = gson.fromJson(data.dp, Dp.class);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n          \n          \n            \n                                    Dp dp = gson.fromJson(data.dp, Dp.class);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        <span class=\"pl-smi\">Dp</span> dp <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(data<span class=\"pl-k\">.</span>dp<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">toString()</span>, <span class=\"pl-smi\">Dp</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-smi\">Dp</span> dp <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(data<span class=\"pl-k\">.</span>dp, <span class=\"pl-smi\">Dp</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-17T19:35:56Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMzI4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490733284", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxMzQwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -390,9 +405,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout();\n-                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        logout(sessionId);\n+                        Data data = gson.fromJson(resp.data, Data.class);\n+                        Dp dp = gson.fromJson(data.dp, Dp.class);\n                         Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n                         for (Datapoints datapoint : datapoints) {\n                             Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNDY5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490514698", "body": "```suggestion\r\n                    Data data = gson.fromJson(resp.data, Data.class);\r\n                    Info info = gson.fromJson(data.info, Info.class);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Data data = gson.fromJson(resp.data.toString(), Data.class);\n          \n          \n            \n                                Info info = gson.fromJson(data.info.toString(), Info.class);\n          \n          \n            \n                                Data data = gson.fromJson(resp.data, Data.class);\n          \n          \n            \n                                Info info = gson.fromJson(data.info, Info.class);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">Data</span> data <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(resp<span class=\"pl-k\">.</span>data<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">toString()</span>, <span class=\"pl-smi\">Data</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">Info</span> info <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(data<span class=\"pl-k\">.</span>info<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">toString()</span>, <span class=\"pl-smi\">Info</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">Data</span> data <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(resp<span class=\"pl-k\">.</span>data, <span class=\"pl-smi\">Data</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">Info</span> info <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(data<span class=\"pl-k\">.</span>info, <span class=\"pl-smi\">Info</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-17T19:37:23Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMDM5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490730393", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:31:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNDY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -362,14 +378,13 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Info info = gson.fromJson(data.info, Info.class);\n                     properties.put(PROPERTY_VENDOR, \"Intesis\");\n                     properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n                     properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n                     properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n                     properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateProperties(properties);\n                     updateStatus(ThingStatus.ONLINE);\n                 }\n             } catch (JsonSyntaxException e) {\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNzA1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490517057", "body": "```suggestion\r\n                    Data data = gson.fromJson(resp.data, Data.class);\r\n                    Id id = gson.fromJson(data.id, Id.class);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Data data = gson.fromJson(resp.data.toString(), Data.class);\n          \n          \n            \n                                Id id = gson.fromJson(data.id.toString(), Id.class);\n          \n          \n            \n                                Data data = gson.fromJson(resp.data, Data.class);\n          \n          \n            \n                                Id id = gson.fromJson(data.id, Id.class);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">Data</span> data <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(resp<span class=\"pl-k\">.</span>data<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">toString()</span>, <span class=\"pl-smi\">Data</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">Id</span> id <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(data<span class=\"pl-k\">.</span>id<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">toString()</span>, <span class=\"pl-smi\">Id</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">Data</span> data <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(resp<span class=\"pl-k\">.</span>data, <span class=\"pl-smi\">Data</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">Id</span> id <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(data<span class=\"pl-k\">.</span>id, <span class=\"pl-smi\">Id</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-17T19:41:20Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMDY1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490730651", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNzA1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -227,127 +232,138 @@ public class IntesisHomeHandler extends BaseThingHandler {\n      */\n     public void getAllUidValues() {\n         logger.debug(\"Polling IntesisHome device\");\n-        login();\n-        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                } else {\n-                    logout();\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                    for (Dpval element : dpval) {\n-                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                        switch (element.uid) {\n-                            case 1:\n-                                updateState(CHANNEL_TYPE_POWER,\n-                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                break;\n-                            case 2:\n-                                switch (element.value) {\n-                                    case 0:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                        break;\n-                                    case 1:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                        break;\n-                                    case 2:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                        break;\n-                                    case 3:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                        break;\n-                                    case 4:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                        break;\n-                                }\n-                                break;\n-                            case 4:\n-                                if ((element.value) == 0) {\n-                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                } else {\n-                                    updateState(CHANNEL_TYPE_FANSPEED,\n-                                            StringType.valueOf(String.valueOf(element.value)));\n-                                }\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                State state;\n-                                if ((element.value) == 0) {\n-                                    state = StringType.valueOf(\"AUTO\");\n-                                } else if ((element.value) == 10) {\n-                                    state = StringType.valueOf(\"SWING\");\n-                                } else if ((element.value) == 11) {\n-                                    state = StringType.valueOf(\"SWIRL\");\n-                                } else if ((element.value) == 12) {\n-                                    state = StringType.valueOf(\"WIDE\");\n-                                } else {\n-                                    state = StringType.valueOf(String.valueOf(element.value));\n-                                }\n-                                switch (element.uid) {\n-                                    case 5:\n-                                        updateState(CHANNEL_TYPE_VANESUD, state);\n-                                        break;\n-                                    case 6:\n-                                        updateState(CHANNEL_TYPE_VANESLR, state);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                int unit = Math.round((element.value) / 10);\n-                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                break;\n-                            case 10:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                break;\n-                            case 37:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                break;\n+        String sessionId = login();\n+        if (sessionId != null) {\n+            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    } else {\n+                        logout(sessionId);\n+                        Data data = gson.fromJson(resp.data, Data.class);\n+                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                        for (Dpval element : dpval) {\n+                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                            switch (element.uid) {\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_POWER,\n+                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                    break;\n+                                case 2:\n+                                    switch (element.value) {\n+                                        case 0:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                            break;\n+                                        case 1:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                            break;\n+                                        case 2:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                            break;\n+                                        case 3:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                            break;\n+                                        case 4:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 4:\n+                                    if ((element.value) == 0) {\n+                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                    } else {\n+                                        updateState(CHANNEL_TYPE_FANSPEED,\n+                                                StringType.valueOf(String.valueOf(element.value)));\n+                                    }\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    State state;\n+                                    if ((element.value) == 0) {\n+                                        state = StringType.valueOf(\"AUTO\");\n+                                    } else if ((element.value) == 10) {\n+                                        state = StringType.valueOf(\"SWING\");\n+                                    } else if ((element.value) == 11) {\n+                                        state = StringType.valueOf(\"SWIRL\");\n+                                    } else if ((element.value) == 12) {\n+                                        state = StringType.valueOf(\"WIDE\");\n+                                    } else {\n+                                        state = StringType.valueOf(String.valueOf(element.value));\n+                                    }\n+                                    switch (element.uid) {\n+                                        case 5:\n+                                            updateState(CHANNEL_TYPE_VANESUD, state);\n+                                            break;\n+                                        case 6:\n+                                            updateState(CHANNEL_TYPE_VANESLR, state);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    int unit = Math.round((element.value) / 10);\n+                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                    break;\n+                                case 10:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                    break;\n+                                case 37:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                    break;\n+                            }\n                         }\n                     }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n \n-    public void login() {\n+    public @Nullable String login() {\n         String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n                 + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n         if (response != null) {\n             try {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Id id = gson.fromJson(data.id.toString(), Id.class);\n-                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n-                        sessionId = id.sessionID.toString();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n                         updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n                     } else {\n                         updateStatus(ThingStatus.OFFLINE);\n                     }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n                 }\n             } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n             }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n         }\n+        return sessionId;\n     }\n \n-    public @Nullable String logout() {\n+    public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         return response;\n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -200,337 +203,294 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         if (uid != 0) {\n             final int uId = uid;\n             final int newValue = value;\n-            scheduler.schedule(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            scheduler.submit(() -> {\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n+            });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(String request, Consumer<Response> handler) {\n+        try {\n+            logger.trace(\"request : '{}'\", request);\n+            String response = api.postRequest(config.ipAddress, request);\n+            if (response != null) {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n+                    handler.accept(resp);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Request unsuccessful\");\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n \n-    public void populateChannels() {\n+    private void postRequestInSession(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                postRequest(request, handler);\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNzYzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490517631", "body": "```suggestion\r\n                    String sessionID = id.sessionID.toString();\r\n                    if (sessionID != null && !sessionID.isEmpty()) {\r\n                        this.sessionId = sessionID;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n          \n          \n            \n                                    sessionId = id.sessionID.toString();\n          \n          \n            \n                                String sessionID = id.sessionID.toString();\n          \n          \n            \n                                if (sessionID != null && !sessionID.isEmpty()) {\n          \n          \n            \n                                    this.sessionId = sessionID;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">if</span> (id<span class=\"pl-k\">.</span>sessionID<span class=\"pl-k\">.</span>toString() <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>id<span class=\"pl-k\">.</span>sessionID<span class=\"pl-k\">.</span>toString()<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        sessionId <span class=\"pl-k\">=</span> id<span class=\"pl-k\">.</span>sessionID<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">String</span> sessionID <span class=\"pl-k\">=</span> id<span class=\"pl-k\">.</span>sessionID<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">if</span> (sessionID <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>sessionID<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>sessionId <span class=\"pl-k\">=</span> sessionID;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-17T19:42:29Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMDk0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490730945", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNzYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -227,127 +232,138 @@ public class IntesisHomeHandler extends BaseThingHandler {\n      */\n     public void getAllUidValues() {\n         logger.debug(\"Polling IntesisHome device\");\n-        login();\n-        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                } else {\n-                    logout();\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                    for (Dpval element : dpval) {\n-                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                        switch (element.uid) {\n-                            case 1:\n-                                updateState(CHANNEL_TYPE_POWER,\n-                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                break;\n-                            case 2:\n-                                switch (element.value) {\n-                                    case 0:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                        break;\n-                                    case 1:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                        break;\n-                                    case 2:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                        break;\n-                                    case 3:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                        break;\n-                                    case 4:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                        break;\n-                                }\n-                                break;\n-                            case 4:\n-                                if ((element.value) == 0) {\n-                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                } else {\n-                                    updateState(CHANNEL_TYPE_FANSPEED,\n-                                            StringType.valueOf(String.valueOf(element.value)));\n-                                }\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                State state;\n-                                if ((element.value) == 0) {\n-                                    state = StringType.valueOf(\"AUTO\");\n-                                } else if ((element.value) == 10) {\n-                                    state = StringType.valueOf(\"SWING\");\n-                                } else if ((element.value) == 11) {\n-                                    state = StringType.valueOf(\"SWIRL\");\n-                                } else if ((element.value) == 12) {\n-                                    state = StringType.valueOf(\"WIDE\");\n-                                } else {\n-                                    state = StringType.valueOf(String.valueOf(element.value));\n-                                }\n-                                switch (element.uid) {\n-                                    case 5:\n-                                        updateState(CHANNEL_TYPE_VANESUD, state);\n-                                        break;\n-                                    case 6:\n-                                        updateState(CHANNEL_TYPE_VANESLR, state);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                int unit = Math.round((element.value) / 10);\n-                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                break;\n-                            case 10:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                break;\n-                            case 37:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                break;\n+        String sessionId = login();\n+        if (sessionId != null) {\n+            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    } else {\n+                        logout(sessionId);\n+                        Data data = gson.fromJson(resp.data, Data.class);\n+                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                        for (Dpval element : dpval) {\n+                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                            switch (element.uid) {\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_POWER,\n+                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                    break;\n+                                case 2:\n+                                    switch (element.value) {\n+                                        case 0:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                            break;\n+                                        case 1:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                            break;\n+                                        case 2:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                            break;\n+                                        case 3:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                            break;\n+                                        case 4:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 4:\n+                                    if ((element.value) == 0) {\n+                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                    } else {\n+                                        updateState(CHANNEL_TYPE_FANSPEED,\n+                                                StringType.valueOf(String.valueOf(element.value)));\n+                                    }\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    State state;\n+                                    if ((element.value) == 0) {\n+                                        state = StringType.valueOf(\"AUTO\");\n+                                    } else if ((element.value) == 10) {\n+                                        state = StringType.valueOf(\"SWING\");\n+                                    } else if ((element.value) == 11) {\n+                                        state = StringType.valueOf(\"SWIRL\");\n+                                    } else if ((element.value) == 12) {\n+                                        state = StringType.valueOf(\"WIDE\");\n+                                    } else {\n+                                        state = StringType.valueOf(String.valueOf(element.value));\n+                                    }\n+                                    switch (element.uid) {\n+                                        case 5:\n+                                            updateState(CHANNEL_TYPE_VANESUD, state);\n+                                            break;\n+                                        case 6:\n+                                            updateState(CHANNEL_TYPE_VANESLR, state);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    int unit = Math.round((element.value) / 10);\n+                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                    break;\n+                                case 10:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                    break;\n+                                case 37:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                    break;\n+                            }\n                         }\n                     }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n \n-    public void login() {\n+    public @Nullable String login() {\n         String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n                 + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n         if (response != null) {\n             try {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Id id = gson.fromJson(data.id.toString(), Id.class);\n-                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n-                        sessionId = id.sessionID.toString();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n                         updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n                     } else {\n                         updateStatus(ThingStatus.OFFLINE);\n                     }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n                 }\n             } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n             }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n         }\n+        return sessionId;\n     }\n \n-    public @Nullable String logout() {\n+    public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         return response;\n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -200,337 +203,294 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         if (uid != 0) {\n             final int uId = uid;\n             final int newValue = value;\n-            scheduler.schedule(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            scheduler.submit(() -> {\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n+            });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(String request, Consumer<Response> handler) {\n+        try {\n+            logger.trace(\"request : '{}'\", request);\n+            String response = api.postRequest(config.ipAddress, request);\n+            if (response != null) {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n+                    handler.accept(resp);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Request unsuccessful\");\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n \n-    public void populateChannels() {\n+    private void postRequestInSession(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                postRequest(request, handler);\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNzk2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490517968", "body": "If this isn't successful should the thing go offline as well?", "bodyText": "If this isn't successful should the thing go offline as well?", "bodyHTML": "<p dir=\"auto\">If this isn't successful should the thing go offline as well?</p>", "author": "cpmeister", "createdAt": "2020-09-17T19:43:08Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMTk4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490731981", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNzk2OA=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -227,127 +232,138 @@ public class IntesisHomeHandler extends BaseThingHandler {\n      */\n     public void getAllUidValues() {\n         logger.debug(\"Polling IntesisHome device\");\n-        login();\n-        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                } else {\n-                    logout();\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                    for (Dpval element : dpval) {\n-                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                        switch (element.uid) {\n-                            case 1:\n-                                updateState(CHANNEL_TYPE_POWER,\n-                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                break;\n-                            case 2:\n-                                switch (element.value) {\n-                                    case 0:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                        break;\n-                                    case 1:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                        break;\n-                                    case 2:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                        break;\n-                                    case 3:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                        break;\n-                                    case 4:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                        break;\n-                                }\n-                                break;\n-                            case 4:\n-                                if ((element.value) == 0) {\n-                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                } else {\n-                                    updateState(CHANNEL_TYPE_FANSPEED,\n-                                            StringType.valueOf(String.valueOf(element.value)));\n-                                }\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                State state;\n-                                if ((element.value) == 0) {\n-                                    state = StringType.valueOf(\"AUTO\");\n-                                } else if ((element.value) == 10) {\n-                                    state = StringType.valueOf(\"SWING\");\n-                                } else if ((element.value) == 11) {\n-                                    state = StringType.valueOf(\"SWIRL\");\n-                                } else if ((element.value) == 12) {\n-                                    state = StringType.valueOf(\"WIDE\");\n-                                } else {\n-                                    state = StringType.valueOf(String.valueOf(element.value));\n-                                }\n-                                switch (element.uid) {\n-                                    case 5:\n-                                        updateState(CHANNEL_TYPE_VANESUD, state);\n-                                        break;\n-                                    case 6:\n-                                        updateState(CHANNEL_TYPE_VANESLR, state);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                int unit = Math.round((element.value) / 10);\n-                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                break;\n-                            case 10:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                break;\n-                            case 37:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                break;\n+        String sessionId = login();\n+        if (sessionId != null) {\n+            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    } else {\n+                        logout(sessionId);\n+                        Data data = gson.fromJson(resp.data, Data.class);\n+                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                        for (Dpval element : dpval) {\n+                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                            switch (element.uid) {\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_POWER,\n+                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                    break;\n+                                case 2:\n+                                    switch (element.value) {\n+                                        case 0:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                            break;\n+                                        case 1:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                            break;\n+                                        case 2:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                            break;\n+                                        case 3:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                            break;\n+                                        case 4:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 4:\n+                                    if ((element.value) == 0) {\n+                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                    } else {\n+                                        updateState(CHANNEL_TYPE_FANSPEED,\n+                                                StringType.valueOf(String.valueOf(element.value)));\n+                                    }\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    State state;\n+                                    if ((element.value) == 0) {\n+                                        state = StringType.valueOf(\"AUTO\");\n+                                    } else if ((element.value) == 10) {\n+                                        state = StringType.valueOf(\"SWING\");\n+                                    } else if ((element.value) == 11) {\n+                                        state = StringType.valueOf(\"SWIRL\");\n+                                    } else if ((element.value) == 12) {\n+                                        state = StringType.valueOf(\"WIDE\");\n+                                    } else {\n+                                        state = StringType.valueOf(String.valueOf(element.value));\n+                                    }\n+                                    switch (element.uid) {\n+                                        case 5:\n+                                            updateState(CHANNEL_TYPE_VANESUD, state);\n+                                            break;\n+                                        case 6:\n+                                            updateState(CHANNEL_TYPE_VANESLR, state);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    int unit = Math.round((element.value) / 10);\n+                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                    break;\n+                                case 10:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                    break;\n+                                case 37:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                    break;\n+                            }\n                         }\n                     }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n \n-    public void login() {\n+    public @Nullable String login() {\n         String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n                 + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n         if (response != null) {\n             try {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Id id = gson.fromJson(data.id.toString(), Id.class);\n-                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n-                        sessionId = id.sessionID.toString();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n                         updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n                     } else {\n                         updateStatus(ThingStatus.OFFLINE);\n                     }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n                 }\n             } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n             }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n         }\n+        return sessionId;\n     }\n \n-    public @Nullable String logout() {\n+    public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         return response;\n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -200,337 +203,294 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         if (uid != 0) {\n             final int uId = uid;\n             final int newValue = value;\n-            scheduler.schedule(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            scheduler.submit(() -> {\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n+            });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(String request, Consumer<Response> handler) {\n+        try {\n+            logger.trace(\"request : '{}'\", request);\n+            String response = api.postRequest(config.ipAddress, request);\n+            if (response != null) {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n+                    handler.accept(resp);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Request unsuccessful\");\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n \n-    public void populateChannels() {\n+    private void postRequestInSession(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                postRequest(request, handler);\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyMTIyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490521221", "body": "Why are you retrieving the channel again here? Didn't you just add that channel in the code above?", "bodyText": "Why are you retrieving the channel again here? Didn't you just add that channel in the code above?", "bodyHTML": "<p dir=\"auto\">Why are you retrieving the channel again here? Didn't you just add that channel in the code above?</p>", "author": "cpmeister", "createdAt": "2020-09-17T19:49:28Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_FANSPEED;\n+                                    addChannel(channelId, itemType, fanLevels);\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    List<String> swingModes = new ArrayList<>();\n+                                    for (String swingString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(swingString)) {\n+                                            swingModes.add(\"AUTO\");\n+                                        } else if (\"10\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWING\");\n+                                        } else if (\"11\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWIRL\");\n+                                        } else if (\"12\".contentEquals(swingString)) {\n+                                            swingModes.add(\"WIDE\");\n+                                        } else {\n+                                            swingModes.add(swingString);\n+                                        }\n+                                    }\n+                                    switch (datapoint.uid) {\n+                                        case 5:\n+                                            channelId = CHANNEL_TYPE_VANESUD;\n+                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                        case 6:\n+                                            channelId = CHANNEL_TYPE_VANESLR;\n+                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 10:\n+                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 37:\n+                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                            }\n+                        }\n+                    }\n+\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+            logger.trace(\"Start Refresh Job\");\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                    TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e.toString(),\n+                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                channel = thing.getChannel(channelId);\n+                if (channel != null) {\n+                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+                }", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMzA1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490733056", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-09-18T06:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyMTIyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -515,14 +526,10 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n             if (options != null) {\n                 final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e.toString(),\n-                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                         .collect(Collectors.toList());\n                 logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                channel = thing.getChannel(channelId);\n-                if (channel != null) {\n-                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                }\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n             }\n         }\n     }\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyNDQ4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490524484", "body": "You should provide details when your thing goes offline. Let the user know why it went offline helps them troubleshoot and perhaps fix the issue, or at the very least helps others troubleshoot the issue.", "bodyText": "You should provide details when your thing goes offline. Let the user know why it went offline helps them troubleshoot and perhaps fix the issue, or at the very least helps others troubleshoot the issue.", "bodyHTML": "<p dir=\"auto\">You should provide details when your thing goes offline. Let the user know why it went offline helps them troubleshoot and perhaps fix the issue, or at the very least helps others troubleshoot the issue.</p>", "author": "cpmeister", "createdAt": "2020-09-17T19:54:18Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_FANSPEED;\n+                                    addChannel(channelId, itemType, fanLevels);\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    List<String> swingModes = new ArrayList<>();\n+                                    for (String swingString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(swingString)) {\n+                                            swingModes.add(\"AUTO\");\n+                                        } else if (\"10\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWING\");\n+                                        } else if (\"11\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWIRL\");\n+                                        } else if (\"12\".contentEquals(swingString)) {\n+                                            swingModes.add(\"WIDE\");\n+                                        } else {\n+                                            swingModes.add(swingString);\n+                                        }\n+                                    }\n+                                    switch (datapoint.uid) {\n+                                        case 5:\n+                                            channelId = CHANNEL_TYPE_VANESUD;\n+                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                        case 6:\n+                                            channelId = CHANNEL_TYPE_VANESLR;\n+                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 10:\n+                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 37:\n+                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                            }\n+                        }\n+                    }\n+\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNDQ4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490734487", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyNDQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -490,7 +501,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n \n                 } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n                 }\n             } else {\n                 updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyODQyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490528422", "body": "Instead of calling `updateProperties` multiple times in this loop, it would be better if you only called it after you exited the loop. In fact, you might consider only calling `updateProperties` after both `populateProperties()` and this method are called as part of initialization.", "bodyText": "Instead of calling updateProperties multiple times in this loop, it would be better if you only called it after you exited the loop. In fact, you might consider only calling updateProperties after both populateProperties() and this method are called as part of initialization.", "bodyHTML": "<p dir=\"auto\">Instead of calling <code>updateProperties</code> multiple times in this loop, it would be better if you only called it after you exited the loop. In fact, you might consider only calling <code>updateProperties</code> after both <code>populateProperties()</code> and this method are called as part of initialization.</p>", "author": "cpmeister", "createdAt": "2020-09-17T20:01:38Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNTU1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490735553", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyODQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -435,7 +449,6 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                                         }\n                                     }\n                                     properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    updateProperties(properties);\n                                     channelId = CHANNEL_TYPE_FANSPEED;\n                                     addChannel(channelId, itemType, fanLevels);\n                                     break;\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyOTQxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490529410", "body": "What if either of these methods fail? Would the thing properties never get populated? Perhaps you could make it retry on failure.", "bodyText": "What if either of these methods fail? Would the thing properties never get populated? Perhaps you could make it retry on failure.", "bodyHTML": "<p dir=\"auto\">What if either of these methods fail? Would the thing properties never get populated? Perhaps you could make it retry on failure.</p>", "author": "cpmeister", "createdAt": "2020-09-17T20:03:37Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNzExNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490737117", "bodyText": "I don't see a reason for a retry and did not see such a thing in other bindings. If either of these fail, the thing status is set to offline, as there is some kind of communication error.", "author": "hmerk", "createdAt": "2020-09-18T06:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyOTQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -108,7 +107,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         // start background initialization:\n         scheduler.schedule(() -> {\n             populateProperties();\n-            getDataPoints();\n+            populateChannels();\n+            updateProperties(properties);\n \n         }, 0, TimeUnit.SECONDS);\n     }\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -105,12 +107,14 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n \n         // start background initialization:\n-        scheduler.schedule(() -> {\n+        scheduler.submit(() -> {\n             populateProperties();\n-            populateChannels();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n             updateProperties(properties);\n \n-        }, 0, TimeUnit.SECONDS);\n+        });\n     }\n \n     @Override\n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -99,21 +97,22 @@ public class IntesisHomeHandler extends BaseThingHandler {\n     @Override\n     public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        config = getConfigAs(IntesisConfiguration.class);\n+        if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+        } else if (config.ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+        } else if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n         }\n \n         // start background initialization:\n         scheduler.submit(() -> {\n             populateProperties();\n             // query available dataPoints and build dynamic channels\n-            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n             updateProperties(properties);\n-\n         });\n     }\n \n", "next_change": {"commit": "a619be48d07d3b476b29034af12e1288a683833b", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 7d2b68bea9..982946626e 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -100,20 +100,23 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         config = getConfigAs(IntesisConfiguration.class);\n         if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+            return;\n         } else if (config.ipAddress.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+            return;\n         } else if (config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n+            return;\n+        } else {\n+            // start background initialization:\n+            scheduler.submit(() -> {\n+                populateProperties();\n+                // query available dataPoints and build dynamic channels\n+                postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                        + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n+                updateProperties(properties);\n+            });\n         }\n-\n-        // start background initialization:\n-        scheduler.submit(() -> {\n-            populateProperties();\n-            // query available dataPoints and build dynamic channels\n-            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n-                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n-            updateProperties(properties);\n-        });\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMDc3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490530771", "body": "`response` isn't used after this point, so why set it?", "bodyText": "response isn't used after this point, so why set it?", "bodyHTML": "<p dir=\"auto\"><code>response</code> isn't used after this point, so why set it?</p>", "author": "cpmeister", "createdAt": "2020-09-17T20:06:10Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczODkxOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490738918", "bodyText": "It was a leftover, removed", "author": "hmerk", "createdAt": "2020-09-18T06:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMDc3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMzE3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490533179", "body": "Since you are only passing in String options you might as well make the Collection contain only Strings you don't have to call `toString()` on all of the option elements later on.\r\n```suggestion\r\n    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\r\n        if (thing.getChannel(channelId) == null) {\r\n            logger.trace(\"Channel '{}' for UID to be added\", channelId);\r\n            ThingBuilder thingBuilder = editThing();\r\n            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\r\n            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\r\n                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\r\n            thingBuilder.withChannel(channel);\r\n            updateThing(thingBuilder.build());\r\n\r\n            if (options != null) {\r\n                final List<StateOption> stateOptions = options.stream()\r\n                        .map(e -> new StateOption(e,\r\n                                e.substring(0, 1) + e.substring(1).toLowerCase()))\r\n                        .collect(Collectors.toList());\r\n```", "bodyText": "Since you are only passing in String options you might as well make the Collection contain only Strings you don't have to call toString() on all of the option elements later on.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n          \n          \n            \n                    if (thing.getChannel(channelId) == null) {\n          \n          \n            \n                        logger.trace(\"Channel '{}' for UID to be added\", channelId);\n          \n          \n            \n                        ThingBuilder thingBuilder = editThing();\n          \n          \n            \n                        final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n          \n          \n            \n                        Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n          \n          \n            \n                                .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n          \n          \n            \n                        thingBuilder.withChannel(channel);\n          \n          \n            \n                        updateThing(thingBuilder.build());\n          \n          \n            \n            \n          \n          \n            \n                        if (options != null) {\n          \n          \n            \n                            final List<StateOption> stateOptions = options.stream()\n          \n          \n            \n                                    .map(e -> new StateOption(e.toString(),\n          \n          \n            \n                                            e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n          \n          \n            \n                                    .collect(Collectors.toList());\n          \n          \n            \n                public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n          \n          \n            \n                    if (thing.getChannel(channelId) == null) {\n          \n          \n            \n                        logger.trace(\"Channel '{}' for UID to be added\", channelId);\n          \n          \n            \n                        ThingBuilder thingBuilder = editThing();\n          \n          \n            \n                        final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n          \n          \n            \n                        Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n          \n          \n            \n                                .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n          \n          \n            \n                        thingBuilder.withChannel(channel);\n          \n          \n            \n                        updateThing(thingBuilder.build());\n          \n          \n            \n            \n          \n          \n            \n                        if (options != null) {\n          \n          \n            \n                            final List<StateOption> stateOptions = options.stream()\n          \n          \n            \n                                    .map(e -> new StateOption(e,\n          \n          \n            \n                                            e.substring(0, 1) + e.substring(1).toLowerCase()))\n          \n          \n            \n                                    .collect(Collectors.toList());", "bodyHTML": "<p dir=\"auto\">Since you are only passing in String options you might as well make the Collection contain only Strings you don't have to call <code>toString()</code> on all of the option elements later on.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> addChannel(<span class=\"pl-smi\">String</span> channelId, <span class=\"pl-smi\">String</span> itemType, <span class=\"pl-k\">@Nullable</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Collection&lt;<span class=\"x x-first x-last\">?</span>&gt;</span> options) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (thing<span class=\"pl-k\">.</span>getChannel(channelId) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            logger<span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Channel '{}' for UID to be added<span class=\"pl-pds\">\"</span></span>, channelId);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">ThingBuilder</span> thingBuilder <span class=\"pl-k\">=</span> editThing();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ChannelTypeUID</span> channelTypeUID <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ChannelTypeUID</span>(<span class=\"pl-c1\">BINDING_ID</span>, channelId);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">Channel</span> channel <span class=\"pl-k\">=</span> <span class=\"pl-smi\">ChannelBuilder</span><span class=\"pl-k\">.</span>create(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ChannelUID</span>(getThing()<span class=\"pl-k\">.</span>getUID(), channelId), itemType)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    .withType(channelTypeUID)<span class=\"pl-k\">.</span>withKind(<span class=\"pl-smi\">ChannelKind</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>STATE</span>)<span class=\"pl-k\">.</span>build();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            thingBuilder<span class=\"pl-k\">.</span>withChannel(channel);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            updateThing(thingBuilder<span class=\"pl-k\">.</span>build());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (options <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">final</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">StateOption</span>&gt;</span> stateOptions <span class=\"pl-k\">=</span> options<span class=\"pl-k\">.</span>stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .map(e <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StateOption</span>(e<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">toString()</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                e<span class=\"pl-k\">.</span><span class=\"x x-first\">toString()</span><span class=\"pl-k x x-last\">.</span>substring(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>) <span class=\"pl-k\">+</span> e<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">toString()</span><span class=\"pl-k\">.</span>substring(<span class=\"pl-c1\">1</span>)<span class=\"pl-k\">.</span>toLowerCase()))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toList());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> addChannel(<span class=\"pl-smi\">String</span> channelId, <span class=\"pl-smi\">String</span> itemType, <span class=\"pl-k\">@Nullable</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Collection&lt;<span class=\"pl-smi x x-first x-last\">String</span>&gt;</span> options) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (thing<span class=\"pl-k\">.</span>getChannel(channelId) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logger<span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Channel '{}' for UID to be added<span class=\"pl-pds\">\"</span></span>, channelId);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">ThingBuilder</span> thingBuilder <span class=\"pl-k\">=</span> editThing();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ChannelTypeUID</span> channelTypeUID <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ChannelTypeUID</span>(<span class=\"pl-c1\">BINDING_ID</span>, channelId);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">Channel</span> channel <span class=\"pl-k\">=</span> <span class=\"pl-smi\">ChannelBuilder</span><span class=\"pl-k\">.</span>create(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ChannelUID</span>(getThing()<span class=\"pl-k\">.</span>getUID(), channelId), itemType)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    .withType(channelTypeUID)<span class=\"pl-k\">.</span>withKind(<span class=\"pl-smi\">ChannelKind</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>STATE</span>)<span class=\"pl-k\">.</span>build();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            thingBuilder<span class=\"pl-k\">.</span>withChannel(channel);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            updateThing(thingBuilder<span class=\"pl-k\">.</span>build());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (options <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">final</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">StateOption</span>&gt;</span> stateOptions <span class=\"pl-k\">=</span> options<span class=\"pl-k\">.</span>stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        .map(e <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StateOption</span>(e,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                e<span class=\"pl-k\">.</span>substring(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>) <span class=\"pl-k\">+</span> e<span class=\"pl-k\">.</span>substring(<span class=\"pl-c1\">1</span>)<span class=\"pl-k\">.</span>toLowerCase()))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toList());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-17T20:10:49Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_FANSPEED;\n+                                    addChannel(channelId, itemType, fanLevels);\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    List<String> swingModes = new ArrayList<>();\n+                                    for (String swingString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(swingString)) {\n+                                            swingModes.add(\"AUTO\");\n+                                        } else if (\"10\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWING\");\n+                                        } else if (\"11\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWIRL\");\n+                                        } else if (\"12\".contentEquals(swingString)) {\n+                                            swingModes.add(\"WIDE\");\n+                                        } else {\n+                                            swingModes.add(swingString);\n+                                        }\n+                                    }\n+                                    switch (datapoint.uid) {\n+                                        case 5:\n+                                            channelId = CHANNEL_TYPE_VANESUD;\n+                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                        case 6:\n+                                            channelId = CHANNEL_TYPE_VANESLR;\n+                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 10:\n+                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 37:\n+                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                            }\n+                        }\n+                    }\n+\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+            logger.trace(\"Start Refresh Job\");\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                    TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e.toString(),\n+                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczOTU4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490739586", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMzE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -515,14 +526,10 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n             if (options != null) {\n                 final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e.toString(),\n-                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n                         .collect(Collectors.toList());\n                 logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                channel = thing.getChannel(channelId);\n-                if (channel != null) {\n-                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n-                }\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n             }\n         }\n     }\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNDc2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490534762", "body": "Just like `populateProperties` you should probably rename this method to `populateChannels`", "bodyText": "Just like populateProperties you should probably rename this method to populateChannels", "bodyHTML": "<p dir=\"auto\">Just like <code>populateProperties</code> you should probably rename this method to <code>populateChannels</code></p>", "author": "cpmeister", "createdAt": "2020-09-17T20:14:05Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczOTk3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490739973", "bodyText": "Renamed", "author": "hmerk", "createdAt": "2020-09-18T06:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNDc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -378,9 +393,9 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void getDataPoints() {\n-        login();\n-        if (!sessionId.isEmpty()) {\n+    public void populateChannels() {\n+        String sessionId = login();\n+        if (sessionId != null && !sessionId.isEmpty()) {\n             String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n                     + \"\\\"}}\";\n             String response = api.postRequest(ipAddress, contentString);\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -393,144 +294,244 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    public void populateChannels() {\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n                     Response resp = gson.fromJson(response, Response.class);\n                     boolean success = resp.success;\n                     if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequest(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjQ3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490536478", "body": "`handleCommand` should execute and return quickly. Http requests can turn into lengthy operations so it would better if you ran this code asynchronously on the `scheduler`.", "bodyText": "handleCommand should execute and return quickly. Http requests can turn into lengthy operations so it would better if you ran this code asynchronously on the scheduler.", "bodyHTML": "<p dir=\"auto\"><code>handleCommand</code> should execute and return quickly. Http requests can turn into lengthy operations so it would better if you ran this code asynchronously on the <code>scheduler</code>.</p>", "author": "cpmeister", "createdAt": "2020-09-17T20:17:19Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc2MTg3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490761873", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T07:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -198,27 +198,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             }\n         }\n         if (uid != 0) {\n-            login();\n-            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n-                                + password + \"\\\"}}\";\n-                        response = api.postRequest(ipAddress, sessionString);\n-                    } else {\n-                        logout();\n-                        updateStatus(ThingStatus.ONLINE);\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.schedule(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n                     }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            }\n+\n+            }, 0, TimeUnit.SECONDS);\n         }\n     }\n \n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -223,110 +227,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n                     }\n                 }\n \n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            });\n         }\n     }\n \n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjg0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490536849", "body": "```suggestion\r\n        scheduler.submit(() -> {\r\n            populateProperties();\r\n            getDataPoints();\r\n        });\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    scheduler.schedule(() -> {\n          \n          \n            \n                        populateProperties();\n          \n          \n            \n                        getDataPoints();\n          \n          \n            \n            \n          \n          \n            \n                    }, 0, TimeUnit.SECONDS);\n          \n          \n            \n                    scheduler.submit(() -> {\n          \n          \n            \n                        populateProperties();\n          \n          \n            \n                        getDataPoints();\n          \n          \n            \n                    });", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        scheduler<span class=\"pl-k\">.</span>schedule(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            populateProperties();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            getDataPoints();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }, <span class=\"pl-c1\">0</span>, <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>SECONDS</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        scheduler<span class=\"pl-k\">.</span>submit(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            populateProperties();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            getDataPoints();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        });</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-17T20:17:57Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc0MTc3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490741779", "bodyText": "This gives an error in Eclipse IDE, as schedule expects three parameters:  Runnable, long, TimeUnit", "author": "hmerk", "createdAt": "2020-09-18T06:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc0Mjg1OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490742858", "bodyText": "schedule expects three parameters, yes. But I was suggesting you changed it to submit instead. execute should also work if you prefer.", "author": "cpmeister", "createdAt": "2020-09-18T07:02:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc2ODY3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490768670", "bodyText": "Ah, did not see that you changed it to submit. Anyway, could be changed later...", "author": "hmerk", "createdAt": "2020-09-18T07:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxNDY3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490914672", "bodyText": "Changed", "author": "hmerk", "createdAt": "2020-09-18T12:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -108,7 +107,8 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         // start background initialization:\n         scheduler.schedule(() -> {\n             populateProperties();\n-            getDataPoints();\n+            populateChannels();\n+            updateProperties(properties);\n \n         }, 0, TimeUnit.SECONDS);\n     }\n", "next_change": {"commit": "5a46805f72bcb924860feeae643164f51c1cb094", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..fb4bb13c06 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -105,12 +107,14 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n \n         // start background initialization:\n-        scheduler.schedule(() -> {\n+        scheduler.submit(() -> {\n             populateProperties();\n-            populateChannels();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n             updateProperties(properties);\n \n-        }, 0, TimeUnit.SECONDS);\n+        });\n     }\n \n     @Override\n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -99,21 +97,22 @@ public class IntesisHomeHandler extends BaseThingHandler {\n     @Override\n     public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        config = getConfigAs(IntesisConfiguration.class);\n+        if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+        } else if (config.ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+        } else if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n         }\n \n         // start background initialization:\n         scheduler.submit(() -> {\n             populateProperties();\n             // query available dataPoints and build dynamic channels\n-            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n             updateProperties(properties);\n-\n         });\n     }\n \n", "next_change": {"commit": "a619be48d07d3b476b29034af12e1288a683833b", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 7d2b68bea9..982946626e 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -100,20 +100,23 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         config = getConfigAs(IntesisConfiguration.class);\n         if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+            return;\n         } else if (config.ipAddress.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+            return;\n         } else if (config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n+            return;\n+        } else {\n+            // start background initialization:\n+            scheduler.submit(() -> {\n+                populateProperties();\n+                // query available dataPoints and build dynamic channels\n+                postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                        + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n+                updateProperties(properties);\n+            });\n         }\n-\n-        // start background initialization:\n-        scheduler.submit(() -> {\n-            populateProperties();\n-            // query available dataPoints and build dynamic channels\n-            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n-                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n-            updateProperties(properties);\n-        });\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MjM3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490542376", "body": "Since `login()` can fail, you should provide a way for callers to know if it executed without issue. This can be done by either adding a return value that indicates success or by throwing an exception if something goes wrong.\r\n\r\nSince you are currently having this method update the thing status it would be easiest to just have it return the sessionId.\r\n\r\n```suggestion\r\n    public String login() {\r\n```\r\n\r\nThen it could be called like this:\r\n```\r\nString sessionId = login();\r\nif(sessionId != null){\r\n...\r\n    logout(sessionId);\r\n}\r\n```\r\n\r\nIf you want to take things further, a better way would be to refactor session management into a single method and allow callers to pass the functions that they want executed in a single session.\r\nLambdas make this easy.\r\n```\r\nprivate void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler){\r\n  String sessionId = login();\r\n  if(sessionId != null){\r\n    try{\r\n      String request = requestFactory.apply(sessionId);\r\n      String response = api.postRequest(ipAddress, contentString);\r\n      if (response != null) {\r\n           \r\n                Response resp = gson.fromJson(response, Response.class);\r\n                boolean success = resp.success;\r\n                if (success) {\r\n                   handler.accept(resp);\r\n                } else {\r\n                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Request unsuccessful\");\r\n                }\r\n      }else{\r\n         updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\r\n      }\r\n    } catch (JsonSyntaxException e) {\r\n      updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n    } finally {\r\n      logout(sessionId);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThen it could be called like this:\r\n```\r\n\r\nprivate void handleDataPointsResponse(Response response){\r\n}\r\n\r\nprivate void foo(){\r\n    postRequest(sessionId -> \r\n       \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\", \r\n        this::handleDataPointsResponse);\r\n}\r\n```", "bodyText": "Since login() can fail, you should provide a way for callers to know if it executed without issue. This can be done by either adding a return value that indicates success or by throwing an exception if something goes wrong.\nSince you are currently having this method update the thing status it would be easiest to just have it return the sessionId.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void login() {\n          \n          \n            \n                public String login() {\n          \n      \n    \n    \n  \n\nThen it could be called like this:\nString sessionId = login();\nif(sessionId != null){\n...\n    logout(sessionId);\n}\n\nIf you want to take things further, a better way would be to refactor session management into a single method and allow callers to pass the functions that they want executed in a single session.\nLambdas make this easy.\nprivate void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler){\n  String sessionId = login();\n  if(sessionId != null){\n    try{\n      String request = requestFactory.apply(sessionId);\n      String response = api.postRequest(ipAddress, contentString);\n      if (response != null) {\n           \n                Response resp = gson.fromJson(response, Response.class);\n                boolean success = resp.success;\n                if (success) {\n                   handler.accept(resp);\n                } else {\n                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Request unsuccessful\");\n                }\n      }else{\n         updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n      }\n    } catch (JsonSyntaxException e) {\n      updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n    } finally {\n      logout(sessionId);\n    }\n  }\n}\n\nThen it could be called like this:\n\nprivate void handleDataPointsResponse(Response response){\n}\n\nprivate void foo(){\n    postRequest(sessionId -> \n       \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\", \n        this::handleDataPointsResponse);\n}", "bodyHTML": "<p dir=\"auto\">Since <code>login()</code> can fail, you should provide a way for callers to know if it executed without issue. This can be done by either adding a return value that indicates success or by throwing an exception if something goes wrong.</p>\n<p dir=\"auto\">Since you are currently having this method update the thing status it would be easiest to just have it return the sessionId.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k x x-first x-last\">void</span> login() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi x x-first x-last\">String</span> login() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Then it could be called like this:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"String sessionId = login();\nif(sessionId != null){\n...\n    logout(sessionId);\n}\"><pre><code>String sessionId = login();\nif(sessionId != null){\n...\n    logout(sessionId);\n}\n</code></pre></div>\n<p dir=\"auto\">If you want to take things further, a better way would be to refactor session management into a single method and allow callers to pass the functions that they want executed in a single session.<br>\nLambdas make this easy.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private void postRequest(UnaryOperator&lt;String&gt; requestFactory, Consumer&lt;Response&gt; handler){\n  String sessionId = login();\n  if(sessionId != null){\n    try{\n      String request = requestFactory.apply(sessionId);\n      String response = api.postRequest(ipAddress, contentString);\n      if (response != null) {\n           \n                Response resp = gson.fromJson(response, Response.class);\n                boolean success = resp.success;\n                if (success) {\n                   handler.accept(resp);\n                } else {\n                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, &quot;Request unsuccessful&quot;);\n                }\n      }else{\n         updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, &quot;No Response&quot;);\n      }\n    } catch (JsonSyntaxException e) {\n      updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n    } finally {\n      logout(sessionId);\n    }\n  }\n}\"><pre><code>private void postRequest(UnaryOperator&lt;String&gt; requestFactory, Consumer&lt;Response&gt; handler){\n  String sessionId = login();\n  if(sessionId != null){\n    try{\n      String request = requestFactory.apply(sessionId);\n      String response = api.postRequest(ipAddress, contentString);\n      if (response != null) {\n           \n                Response resp = gson.fromJson(response, Response.class);\n                boolean success = resp.success;\n                if (success) {\n                   handler.accept(resp);\n                } else {\n                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Request unsuccessful\");\n                }\n      }else{\n         updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n      }\n    } catch (JsonSyntaxException e) {\n      updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n    } finally {\n      logout(sessionId);\n    }\n  }\n}\n</code></pre></div>\n<p dir=\"auto\">Then it could be called like this:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\nprivate void handleDataPointsResponse(Response response){\n}\n\nprivate void foo(){\n    postRequest(sessionId -&gt; \n       &quot;{\\&quot;command\\&quot;:\\&quot;getavailabledatapoints\\&quot;,\\&quot;data\\&quot;:{\\&quot;sessionID\\&quot;:\\&quot;&quot; + sessionId + &quot;\\&quot;}}&quot;, \n        this::handleDataPointsResponse);\n}\"><pre><code>\nprivate void handleDataPointsResponse(Response response){\n}\n\nprivate void foo(){\n    postRequest(sessionId -&gt; \n       \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\", \n        this::handleDataPointsResponse);\n}\n</code></pre></div>", "author": "cpmeister", "createdAt": "2020-09-17T20:28:19Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1OTkwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490759905", "bodyText": "I have changed the sessionID handling as requested, but would like to leve your further refactoring for a later stage.\nA fist try to implement this, which indeed seems to be a good idea, lead into some errors.", "author": "hmerk", "createdAt": "2020-09-18T07:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MjM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxNDk2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490914962", "bodyText": "Implemented this as well", "author": "hmerk", "createdAt": "2020-09-18T12:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MjM3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 20524a851a..ad354df65a 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -227,127 +232,138 @@ public class IntesisHomeHandler extends BaseThingHandler {\n      */\n     public void getAllUidValues() {\n         logger.debug(\"Polling IntesisHome device\");\n-        login();\n-        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (!success) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                } else {\n-                    logout();\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                    for (Dpval element : dpval) {\n-                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                        switch (element.uid) {\n-                            case 1:\n-                                updateState(CHANNEL_TYPE_POWER,\n-                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                break;\n-                            case 2:\n-                                switch (element.value) {\n-                                    case 0:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                        break;\n-                                    case 1:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                        break;\n-                                    case 2:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                        break;\n-                                    case 3:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                        break;\n-                                    case 4:\n-                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                        break;\n-                                }\n-                                break;\n-                            case 4:\n-                                if ((element.value) == 0) {\n-                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                } else {\n-                                    updateState(CHANNEL_TYPE_FANSPEED,\n-                                            StringType.valueOf(String.valueOf(element.value)));\n-                                }\n-                                break;\n-                            case 5:\n-                            case 6:\n-                                State state;\n-                                if ((element.value) == 0) {\n-                                    state = StringType.valueOf(\"AUTO\");\n-                                } else if ((element.value) == 10) {\n-                                    state = StringType.valueOf(\"SWING\");\n-                                } else if ((element.value) == 11) {\n-                                    state = StringType.valueOf(\"SWIRL\");\n-                                } else if ((element.value) == 12) {\n-                                    state = StringType.valueOf(\"WIDE\");\n-                                } else {\n-                                    state = StringType.valueOf(String.valueOf(element.value));\n-                                }\n-                                switch (element.uid) {\n-                                    case 5:\n-                                        updateState(CHANNEL_TYPE_VANESUD, state);\n-                                        break;\n-                                    case 6:\n-                                        updateState(CHANNEL_TYPE_VANESLR, state);\n-                                        break;\n-                                }\n-                                break;\n-                            case 9:\n-                                int unit = Math.round((element.value) / 10);\n-                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                break;\n-                            case 10:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                break;\n-                            case 37:\n-                                unit = Math.round((element.value) / 10);\n-                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                break;\n+        String sessionId = login();\n+        if (sessionId != null) {\n+            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    } else {\n+                        logout(sessionId);\n+                        Data data = gson.fromJson(resp.data, Data.class);\n+                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                        for (Dpval element : dpval) {\n+                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                            switch (element.uid) {\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_POWER,\n+                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                    break;\n+                                case 2:\n+                                    switch (element.value) {\n+                                        case 0:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                            break;\n+                                        case 1:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                            break;\n+                                        case 2:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                            break;\n+                                        case 3:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                            break;\n+                                        case 4:\n+                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 4:\n+                                    if ((element.value) == 0) {\n+                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                    } else {\n+                                        updateState(CHANNEL_TYPE_FANSPEED,\n+                                                StringType.valueOf(String.valueOf(element.value)));\n+                                    }\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    State state;\n+                                    if ((element.value) == 0) {\n+                                        state = StringType.valueOf(\"AUTO\");\n+                                    } else if ((element.value) == 10) {\n+                                        state = StringType.valueOf(\"SWING\");\n+                                    } else if ((element.value) == 11) {\n+                                        state = StringType.valueOf(\"SWIRL\");\n+                                    } else if ((element.value) == 12) {\n+                                        state = StringType.valueOf(\"WIDE\");\n+                                    } else {\n+                                        state = StringType.valueOf(String.valueOf(element.value));\n+                                    }\n+                                    switch (element.uid) {\n+                                        case 5:\n+                                            updateState(CHANNEL_TYPE_VANESUD, state);\n+                                            break;\n+                                        case 6:\n+                                            updateState(CHANNEL_TYPE_VANESLR, state);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    int unit = Math.round((element.value) / 10);\n+                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                    break;\n+                                case 10:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                    break;\n+                                case 37:\n+                                    unit = Math.round((element.value) / 10);\n+                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                    break;\n+                            }\n                         }\n                     }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n         }\n     }\n \n-    public void login() {\n+    public @Nullable String login() {\n         String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n                 + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n         if (response != null) {\n             try {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n-                    Id id = gson.fromJson(data.id.toString(), Id.class);\n-                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n-                        sessionId = id.sessionID.toString();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n                         updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n                     } else {\n                         updateStatus(ThingStatus.OFFLINE);\n                     }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n                 }\n             } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n             }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n         }\n+        return sessionId;\n     }\n \n-    public @Nullable String logout() {\n+    public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n         String response = api.postRequest(ipAddress, contentString);\n         return response;\n", "next_change": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex ad354df65a..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -200,337 +203,294 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         if (uid != 0) {\n             final int uId = uid;\n             final int newValue = value;\n-            scheduler.schedule(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n-            }, 0, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    /**\n-     * Update device status and all channels\n-     */\n-    public void getAllUidValues() {\n-        logger.debug(\"Polling IntesisHome device\");\n-        String sessionId = login();\n-        if (sessionId != null) {\n-            String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (!success) {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    } else {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n-                        for (Dpval element : dpval) {\n-                            logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n-                            switch (element.uid) {\n-                                case 1:\n-                                    updateState(CHANNEL_TYPE_POWER,\n-                                            String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n-                                    break;\n-                                case 2:\n-                                    switch (element.value) {\n-                                        case 0:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n-                                            break;\n-                                        case 1:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n-                                            break;\n-                                        case 2:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n-                                            break;\n-                                        case 3:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n-                                            break;\n-                                        case 4:\n-                                            updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 4:\n-                                    if ((element.value) == 0) {\n-                                        updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n-                                    } else {\n-                                        updateState(CHANNEL_TYPE_FANSPEED,\n-                                                StringType.valueOf(String.valueOf(element.value)));\n-                                    }\n-                                    break;\n-                                case 5:\n-                                case 6:\n-                                    State state;\n-                                    if ((element.value) == 0) {\n-                                        state = StringType.valueOf(\"AUTO\");\n-                                    } else if ((element.value) == 10) {\n-                                        state = StringType.valueOf(\"SWING\");\n-                                    } else if ((element.value) == 11) {\n-                                        state = StringType.valueOf(\"SWIRL\");\n-                                    } else if ((element.value) == 12) {\n-                                        state = StringType.valueOf(\"WIDE\");\n-                                    } else {\n-                                        state = StringType.valueOf(String.valueOf(element.value));\n-                                    }\n-                                    switch (element.uid) {\n-                                        case 5:\n-                                            updateState(CHANNEL_TYPE_VANESUD, state);\n-                                            break;\n-                                        case 6:\n-                                            updateState(CHANNEL_TYPE_VANESLR, state);\n-                                            break;\n-                                    }\n-                                    break;\n-                                case 9:\n-                                    int unit = Math.round((element.value) / 10);\n-                                    State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n-                                    break;\n-                                case 10:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n-                                    break;\n-                                case 37:\n-                                    unit = Math.round((element.value) / 10);\n-                                    stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n-                                    updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n-                                    break;\n-                            }\n-                        }\n-                    }\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                }\n-            }\n+            scheduler.submit(() -> {\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n+            });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(String request, Consumer<Response> handler) {\n+        try {\n+            logger.trace(\"request : '{}'\", request);\n+            String response = api.postRequest(config.ipAddress, request);\n+            if (response != null) {\n                 Response resp = gson.fromJson(response, Response.class);\n                 boolean success = resp.success;\n                 if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n+                    handler.accept(resp);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Request unsuccessful\");\n                 }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n \n-    public void populateChannels() {\n+    private void postRequestInSession(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n-        if (sessionId != null && !sessionId.isEmpty()) {\n-            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\";\n-            String response = api.postRequest(ipAddress, contentString);\n-            logger.trace(\"available Datapoints response : {}\", response);\n-            if (response != null) {\n-                try {\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (success) {\n-                        logout(sessionId);\n-                        Data data = gson.fromJson(resp.data, Data.class);\n-                        Dp dp = gson.fromJson(data.dp, Dp.class);\n-                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n-                        for (Datapoints datapoint : datapoints) {\n-                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n-                            String channelId = \"\";\n-                            String itemType = \"String\";\n-                            switch (datapoint.uid) {\n-                                case 2:\n-                                    List<String> opModes = new ArrayList<>();\n-                                    for (String modString : descr.states) {\n-                                        switch (modString) {\n-                                            case \"0\":\n-                                                opModes.add(\"AUTO\");\n-                                                break;\n-                                            case \"1\":\n-                                                opModes.add(\"HEAT\");\n-                                                break;\n-                                            case \"2\":\n-                                                opModes.add(\"DRY\");\n-                                                break;\n-                                            case \"3\":\n-                                                opModes.add(\"FAN\");\n-                                                break;\n-                                            case \"4\":\n-                                                opModes.add(\"COOL\");\n-                                                break;\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported modes\", opModes.toString());\n-                                    channelId = CHANNEL_TYPE_MODE;\n-                                    addChannel(channelId, itemType, opModes);\n-                                    break;\n-                                case 4:\n-                                    List<String> fanLevels = new ArrayList<>();\n-                                    for (String fanString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(fanString)) {\n-                                            fanLevels.add(\"AUTO\");\n-                                        } else {\n-                                            fanLevels.add(fanString);\n-                                        }\n-                                    }\n-                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n-                                    channelId = CHANNEL_TYPE_FANSPEED;\n-                                    addChannel(channelId, itemType, fanLevels);\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                postRequest(request, handler);\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }\n+\n+    private void handleDataPointsResponse(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dp dp = gson.fromJson(data.dp, Dp.class);\n+            Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+            for (Datapoints datapoint : datapoints) {\n+                Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                String channelId = \"\";\n+                String itemType = \"String\";\n+                switch (datapoint.uid) {\n+                    case 2:\n+                        List<String> opModes = new ArrayList<>();\n+                        for (String modString : descr.states) {\n+                            switch (modString) {\n+                                case \"0\":\n+                                    opModes.add(\"AUTO\");\n                                     break;\n-                                case 5:\n-                                case 6:\n-                                    List<String> swingModes = new ArrayList<>();\n-                                    for (String swingString : descr.states) {\n-                                        if (\"AUTO\".contentEquals(swingString)) {\n-                                            swingModes.add(\"AUTO\");\n-                                        } else if (\"10\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWING\");\n-                                        } else if (\"11\".contentEquals(swingString)) {\n-                                            swingModes.add(\"SWIRL\");\n-                                        } else if (\"12\".contentEquals(swingString)) {\n-                                            swingModes.add(\"WIDE\");\n-                                        } else {\n-                                            swingModes.add(swingString);\n-                                        }\n-                                    }\n-                                    switch (datapoint.uid) {\n-                                        case 5:\n-                                            channelId = CHANNEL_TYPE_VANESUD;\n-                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                        case 6:\n-                                            channelId = CHANNEL_TYPE_VANESLR;\n-                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n-                                            addChannel(channelId, itemType, swingModes);\n-                                            break;\n-                                    }\n+                                case \"1\":\n+                                    opModes.add(\"HEAT\");\n                                     break;\n-                                case 9:\n-                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"2\":\n+                                    opModes.add(\"DRY\");\n                                     break;\n-                                case 10:\n-                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"3\":\n+                                    opModes.add(\"FAN\");\n                                     break;\n-                                case 37:\n-                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n-                                    itemType = \"Number:Temperature\";\n-                                    addChannel(channelId, itemType, null);\n+                                case \"4\":\n+                                    opModes.add(\"COOL\");\n                                     break;\n                             }\n                         }\n-                    }\n-\n-                } catch (JsonSyntaxException e) {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        properties.put(\"Supported modes\", opModes.toString());\n+                        channelId = CHANNEL_TYPE_MODE;\n+                        addChannel(channelId, itemType, opModes);\n+                        break;\n+                    case 4:\n+                        List<String> fanLevels = new ArrayList<>();\n+                        for (String fanString : descr.states) {\n+                            if (\"AUTO\".contentEquals(fanString)) {\n+                                fanLevels.add(\"AUTO\");\n+                            } else {\n+                                fanLevels.add(fanString);\n+                            }\n+                        }\n+                        properties.put(\"Supported fan levels\", fanLevels.toString());\n+                        channelId = CHANNEL_TYPE_FANSPEED;\n+                        addChannel(channelId, itemType, fanLevels);\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        List<String> swingModes = new ArrayList<>();\n+                        for (String swingString : descr.states) {\n+                            if (\"AUTO\".contentEquals(swingString)) {\n+                                swingModes.add(\"AUTO\");\n+                            } else if (\"10\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWING\");\n+                            } else if (\"11\".contentEquals(swingString)) {\n+                                swingModes.add(\"SWIRL\");\n+                            } else if (\"12\".contentEquals(swingString)) {\n+                                swingModes.add(\"WIDE\");\n+                            } else {\n+                                swingModes.add(swingString);\n+                            }\n+                        }\n+                        switch (datapoint.uid) {\n+                            case 5:\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                            case 6:\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                addChannel(channelId, itemType, swingModes);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        channelId = CHANNEL_TYPE_TARGETTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 10:\n+                        channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n+                    case 37:\n+                        channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                        itemType = \"Number:Temperature\";\n+                        addChannel(channelId, itemType, null);\n+                        break;\n                 }\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             }\n-            logger.trace(\"Start Refresh Job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n-                    TimeUnit.SECONDS);\n-        } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n+        logger.trace(\"Start Refresh Job\");\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                TimeUnit.SECONDS);\n     }\n \n-    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n-        if (thing.getChannel(channelId) == null) {\n-            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n-            ThingBuilder thingBuilder = editThing();\n-            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n-            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n-                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n-            thingBuilder.withChannel(channel);\n-            updateThing(thingBuilder.build());\n+    /**\n+     * Update device status and all channels\n+     */\n+    private void getAllUidValues() {\n+        postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\", this::handleDataPointValues);\n+    }\n \n-            if (options != null) {\n-                final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n-                        .collect(Collectors.toList());\n-                logger.trace(\"StateOptions : '{}'\", stateOptions);\n-                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+    private void handleDataPointValues(Response response) {\n+        try {\n+            Data data = gson.fromJson(response.data, Data.class);\n+            Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+            for (Dpval element : dpval) {\n+                logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                switch (element.uid) {\n+                    case 1:\n+                        updateState(CHANNEL_TYPE_POWER,\n+                                String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                        break;\n+                    case 2:\n+                        switch (element.value) {\n+                            case 0:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                break;\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                break;\n+                            case 2:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                break;\n+                            case 3:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                break;\n+                            case 4:\n+                                updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                break;\n+                        }\n+                        break;\n+                    case 4:\n+                        if ((element.value) == 0) {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                        } else {\n+                            updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(element.value)));\n+                        }\n+                        break;\n+                    case 5:\n+                    case 6:\n+                        State state;\n+                        if ((element.value) == 0) {\n+                            state = StringType.valueOf(\"AUTO\");\n+                        } else if ((element.value) == 10) {\n+                            state = StringType.valueOf(\"SWING\");\n+                        } else if ((element.value) == 11) {\n+                            state = StringType.valueOf(\"SWIRL\");\n+                        } else if ((element.value) == 12) {\n+                            state = StringType.valueOf(\"WIDE\");\n+                        } else {\n+                            state = StringType.valueOf(String.valueOf(element.value));\n+                        }\n+                        switch (element.uid) {\n+                            case 5:\n+                                updateState(CHANNEL_TYPE_VANESUD, state);\n+                                break;\n+                            case 6:\n+                                updateState(CHANNEL_TYPE_VANESLR, state);\n+                                break;\n+                        }\n+                        break;\n+                    case 9:\n+                        int unit = Math.round((element.value) / 10);\n+                        State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                        break;\n+                    case 10:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                        break;\n+                    case 37:\n+                        unit = Math.round((element.value) / 10);\n+                        stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                        updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                        break;\n+                }\n             }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n         }\n     }\n }\n", "next_change": null}]}}]}}, {"oid": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "url": "https://github.com/openhab/openhab-addons/commit/3b651e749b28fccf9658734e0c7f00bc5add03dc", "message": "Further changes in  IntesisHomeHandler after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-18T07:51:32Z", "type": "commit"}, {"oid": "5a46805f72bcb924860feeae643164f51c1cb094", "url": "https://github.com/openhab/openhab-addons/commit/5a46805f72bcb924860feeae643164f51c1cb094", "message": "Further simplification in  IntesisHomeHandler after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-18T12:30:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NTkyNA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491055924", "body": "```suggestion\r\n                postRequestInSession(sessionId ->  \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\r\n                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\", r -> updateStatus(ThingStatus.ONLINE));\r\n```\r\n`postRequestInSession` is renamed version of `postRequest`. See my comments below for details.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            login();\n          \n          \n            \n                            String sessionId = login();\n          \n          \n            \n                            if (sessionId != null) {\n          \n          \n            \n                                String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n          \n          \n            \n                                        + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n          \n          \n            \n                                String response = api.postRequest(ipAddress, contentString);\n          \n          \n            \n                                if (response != null) {\n          \n          \n            \n                                    try {\n          \n          \n            \n                                        Response resp = gson.fromJson(response, Response.class);\n          \n          \n            \n                                        boolean success = resp.success;\n          \n          \n            \n                                        if (!success) {\n          \n          \n            \n                                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n          \n          \n            \n                                        } else {\n          \n          \n            \n                                            logout(sessionId);\n          \n          \n            \n                                            updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                                        }\n          \n          \n            \n                                    } catch (JsonSyntaxException e) {\n          \n          \n            \n                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n          \n          \n            \n                                    }\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                            postRequestInSession(sessionId ->  \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n          \n          \n            \n                                        + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\", r -> updateStatus(ThingStatus.ONLINE));\n          \n      \n    \n    \n  \n\npostRequestInSession is renamed version of postRequest. See my comments below for details.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                login();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">String</span> sessionId <span class=\"pl-k\">=</span> login();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">if</span> (sessionId <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">String</span> contentString <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{<span class=\"pl-cce\">\\\"</span>command<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span>setdatapointvalue<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>data<span class=\"pl-cce\">\\\"</span>:{<span class=\"pl-cce\">\\\"</span>sessionID<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> sessionId</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\\"</span>, <span class=\"pl-cce\">\\\"</span>uid<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> uId <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-cce\">\\\"</span>value<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> newValue <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>}}<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">String</span> response <span class=\"pl-k\">=</span> api<span class=\"pl-k\">.</span>postRequest(ipAddress, contentString);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">if</span> (response <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            <span class=\"pl-smi\">Response</span> resp <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(response, <span class=\"pl-smi\">Response</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            <span class=\"pl-k\">boolean</span> success <span class=\"pl-k\">=</span> resp<span class=\"pl-k\">.</span>success;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>success) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                logout(sessionId);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ONLINE</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">JsonSyntaxException</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                postRequestInSession(sessionId <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span>  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{<span class=\"pl-cce\">\\\"</span>command<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span>setdatapointvalue<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>data<span class=\"pl-cce\">\\\"</span>:{<span class=\"pl-cce\">\\\"</span>sessionID<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> sessionId</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\\"</span>, <span class=\"pl-cce\">\\\"</span>uid<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> uId <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-cce\">\\\"</span>value<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> newValue <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>}}<span class=\"pl-pds\">\"</span></span>, r <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ONLINE</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\"><code>postRequestInSession</code> is renamed version of <code>postRequest</code>. See my comments below for details.</p>", "author": "cpmeister", "createdAt": "2020-09-18T16:18:14Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.submit(() -> {\n+            populateProperties();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            updateProperties(properties);\n+\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.submit(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                }", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NDIwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491174204", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NTkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5Mjc5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491092798", "body": "```suggestion\r\n        //lambda's can't modify local variables, so we use an array here to get around the issue\r\n        String[] sessionId = new String[1];\r\n        postRequest(\"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\r\n                + \"\\\"}}\", resp -> {\r\n                   Data data = gson.fromJson(resp.data, Data.class);\r\n                    Id id = gson.fromJson(data.id, Id.class);\r\n                    sessionId[0] = id.sessionID.toString();\r\n                });\r\n        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\r\n             updateStatus(ThingStatus.ONLINE);\r\n             return sessionId[0];\r\n        } else {\r\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\r\n             return null;\r\n        }\r\n```\r\n\r\nYou will notice that this requires a new `postRequest` method that I'll describe below.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n          \n          \n            \n                            + \"\\\"}}\";\n          \n          \n            \n                    String response = api.postRequest(ipAddress, contentString);\n          \n          \n            \n                    String sessionId = null;\n          \n          \n            \n                    if (response != null) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            Response resp = gson.fromJson(response, Response.class);\n          \n          \n            \n                            boolean success = resp.success;\n          \n          \n            \n                            if (success) {\n          \n          \n            \n                                Data data = gson.fromJson(resp.data, Data.class);\n          \n          \n            \n                                Id id = gson.fromJson(data.id, Id.class);\n          \n          \n            \n                                sessionId = id.sessionID.toString();\n          \n          \n            \n                                if (sessionId != null && !sessionId.isEmpty()) {\n          \n          \n            \n                                    updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                                    return sessionId;\n          \n          \n            \n                                } else {\n          \n          \n            \n                                    updateStatus(ThingStatus.OFFLINE);\n          \n          \n            \n                                }\n          \n          \n            \n                            } else {\n          \n          \n            \n                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n          \n          \n            \n                                return null;\n          \n          \n            \n                            }\n          \n          \n            \n                        } catch (JsonSyntaxException e) {\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                        }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n          \n          \n            \n                        return null;\n          \n          \n            \n                    }\n          \n          \n            \n                    return sessionId;\n          \n          \n            \n                    //lambda's can't modify local variables, so we use an array here to get around the issue\n          \n          \n            \n                    String[] sessionId = new String[1];\n          \n          \n            \n                    postRequest(\"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n          \n          \n            \n                            + \"\\\"}}\", resp -> {\n          \n          \n            \n                               Data data = gson.fromJson(resp.data, Data.class);\n          \n          \n            \n                                Id id = gson.fromJson(data.id, Id.class);\n          \n          \n            \n                                sessionId[0] = id.sessionID.toString();\n          \n          \n            \n                            });\n          \n          \n            \n                    if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n          \n          \n            \n                         updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                         return sessionId[0];\n          \n          \n            \n                    } else {\n          \n          \n            \n                         updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n          \n          \n            \n                         return null;\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nYou will notice that this requires a new postRequest method that I'll describe below.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">String</span> contentString <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{<span class=\"pl-cce\">\\\"</span>command<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span>login<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>data<span class=\"pl-cce\">\\\"</span>:{<span class=\"pl-cce\">\\\"</span>username<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span>Admin<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>password<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> password</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\\"</span>}}<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">String</span> response <span class=\"pl-k\">=</span> api<span class=\"pl-k\">.</span>postRequest(ipAddress, contentString);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">String</span> sessionId <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (response <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">Response</span> resp <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(response, <span class=\"pl-smi\">Response</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">boolean</span> success <span class=\"pl-k\">=</span> resp<span class=\"pl-k\">.</span>success;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">if</span> (success) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">Data</span> data <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(resp<span class=\"pl-k\">.</span>data, <span class=\"pl-smi\">Data</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">Id</span> id <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(data<span class=\"pl-k\">.</span>id, <span class=\"pl-smi\">Id</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    sessionId <span class=\"pl-k\">=</span> id<span class=\"pl-k\">.</span>sessionID<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">if</span> (sessionId <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>sessionId<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ONLINE</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        <span class=\"pl-k\">return</span> sessionId;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">JsonSyntaxException</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>, e<span class=\"pl-k\">.</span>getMessage());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> sessionId;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span>lambda's can't modify local variables, so we use an array here to get around the issue</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">String</span>[] sessionId <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">String</span>[<span class=\"pl-c1\">1</span>];</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        postRequest(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{<span class=\"pl-cce\">\\\"</span>command<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span>login<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>data<span class=\"pl-cce\">\\\"</span>:{<span class=\"pl-cce\">\\\"</span>username<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span>Admin<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>password<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> password</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\\"</span>}}<span class=\"pl-pds\">\"</span></span>, resp <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                   <span class=\"pl-smi\">Data</span> data <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(resp<span class=\"pl-k\">.</span>data, <span class=\"pl-smi\">Data</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">Id</span> id <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(data<span class=\"pl-k\">.</span>id, <span class=\"pl-smi\">Id</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    sessionId[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">=</span> id<span class=\"pl-k\">.</span>sessionID<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                });</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (sessionId[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>sessionId[<span class=\"pl-c1\">0</span>]<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">             updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ONLINE</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">             <span class=\"pl-k\">return</span> sessionId[<span class=\"pl-c1\">0</span>];</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">             updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SessionId not received<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">             <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">You will notice that this requires a new <code>postRequest</code> method that I'll describe below.</p>", "author": "cpmeister", "createdAt": "2020-09-18T17:30:52Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.submit(() -> {\n+            populateProperties();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            updateProperties(properties);\n+\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.submit(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                }\n+\n+            });\n+        }\n+    }\n+\n+    public @Nullable String login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n+        }\n+        return sessionId;", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NDMzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491174332", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5Mjc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0NjA2NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491146064", "body": "The previous suggestion requires a version of `postRequest` that doesn't handle session state. We can simply refactor some of the inner code from old `postRequest` method to serve this purpose.\r\nBut since we don't want to confuse our two `postRequest` methods, it would also be a good idea to\r\nrename our old `postRequest` method into something more suitable. I suggest `postRequestInSession`.\r\n```suggestion\r\n    \r\n    private void postRequest(String request, Consumer<Response> handler) {\r\n        try {\r\n                logger.trace(\"request : '{}'\", request);\r\n\r\n                String response = api.postRequest(ipAddress, request);\r\n                if (response != null) {\r\n\r\n                    Response resp = gson.fromJson(response, Response.class);\r\n                    boolean success = resp.success;\r\n                    if (success) {\r\n                        handler.accept(resp);\r\n                    } else {\r\n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n                                \"Request unsuccessful\");\r\n                    }\r\n                } else {\r\n                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\r\n                }\r\n         } catch (JsonSyntaxException e) {\r\n                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n         }\r\n    }\r\n\r\n    private void postRequestInSession(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\r\n        String sessionId = login();\r\n        if (sessionId != null) {\r\n            try {\r\n                String request = requestFactory.apply(sessionId);\r\n                postRequest(request, handler);\r\n            } finally {\r\n                logout(sessionId);\r\n            }\r\n        }\r\n    }\r\n```\r\n", "bodyText": "The previous suggestion requires a version of postRequest that doesn't handle session state. We can simply refactor some of the inner code from old postRequest method to serve this purpose.\nBut since we don't want to confuse our two postRequest methods, it would also be a good idea to\nrename our old postRequest method into something more suitable. I suggest postRequestInSession.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n          \n          \n            \n                    String sessionId = login();\n          \n          \n            \n                    if (sessionId != null) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            String request = requestFactory.apply(sessionId);\n          \n          \n            \n                            logger.trace(\"request : '{}'\", request);\n          \n          \n            \n            \n          \n          \n            \n                            String response = api.postRequest(ipAddress, request);\n          \n          \n            \n                            if (response != null) {\n          \n          \n            \n            \n          \n          \n            \n                                Response resp = gson.fromJson(response, Response.class);\n          \n          \n            \n                                boolean success = resp.success;\n          \n          \n            \n                                if (success) {\n          \n          \n            \n                                    handler.accept(resp);\n          \n          \n            \n                                } else {\n          \n          \n            \n                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n          \n          \n            \n                                            \"Request unsuccessful\");\n          \n          \n            \n                                }\n          \n          \n            \n                            } else {\n          \n          \n            \n                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n          \n          \n            \n                            }\n          \n          \n            \n                        } catch (JsonSyntaxException e) {\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                        } finally {\n          \n          \n            \n                            logout(sessionId);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                \n          \n          \n            \n                private void postRequest(String request, Consumer<Response> handler) {\n          \n          \n            \n                    try {\n          \n          \n            \n                            logger.trace(\"request : '{}'\", request);\n          \n          \n            \n            \n          \n          \n            \n                            String response = api.postRequest(ipAddress, request);\n          \n          \n            \n                            if (response != null) {\n          \n          \n            \n            \n          \n          \n            \n                                Response resp = gson.fromJson(response, Response.class);\n          \n          \n            \n                                boolean success = resp.success;\n          \n          \n            \n                                if (success) {\n          \n          \n            \n                                    handler.accept(resp);\n          \n          \n            \n                                } else {\n          \n          \n            \n                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n          \n          \n            \n                                            \"Request unsuccessful\");\n          \n          \n            \n                                }\n          \n          \n            \n                            } else {\n          \n          \n            \n                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n          \n          \n            \n                            }\n          \n          \n            \n                     } catch (JsonSyntaxException e) {\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                     }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private void postRequestInSession(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n          \n          \n            \n                    String sessionId = login();\n          \n          \n            \n                    if (sessionId != null) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            String request = requestFactory.apply(sessionId);\n          \n          \n            \n                            postRequest(request, handler);\n          \n          \n            \n                        } finally {\n          \n          \n            \n                            logout(sessionId);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                }", "bodyHTML": "<p dir=\"auto\">The previous suggestion requires a version of <code>postRequest</code> that doesn't handle session state. We can simply refactor some of the inner code from old <code>postRequest</code> method to serve this purpose.<br>\nBut since we don't want to confuse our two <code>postRequest</code> methods, it would also be a good idea to<br>\nrename our old <code>postRequest</code> method into something more suitable. I suggest <code>postRequestInSession</code>.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"306\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> postRequest(<span class=\"pl-k\">UnaryOperator&lt;<span class=\"pl-smi\">String</span>&gt;</span> requestFactory, <span class=\"pl-k\">Consumer&lt;<span class=\"pl-smi\">Response</span>&gt;</span> handler) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"307\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">String</span> sessionId <span class=\"pl-k\">=</span> login();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"308\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (sessionId <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"309\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"310\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">String</span> request <span class=\"pl-k\">=</span> requestFactory<span class=\"pl-k\">.</span>apply(sessionId);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"311\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                logger<span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>request : '{}'<span class=\"pl-pds\">\"</span></span>, request);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"312\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"313\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">String</span> response <span class=\"pl-k\">=</span> api<span class=\"pl-k\">.</span>postRequest(ipAddress, request);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"314\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">if</span> (response <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"315\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"316\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">Response</span> resp <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(response, <span class=\"pl-smi\">Response</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"317\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">boolean</span> success <span class=\"pl-k\">=</span> resp<span class=\"pl-k\">.</span>success;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"318\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">if</span> (success) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"319\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        handler<span class=\"pl-k\">.</span>accept(resp);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"320\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"321\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"322\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Request unsuccessful<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"323\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"324\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"325\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No Response<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"326\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"327\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">JsonSyntaxException</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"328\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>, e<span class=\"pl-k\">.</span>getMessage());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"329\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            } <span class=\"pl-k\">finally</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"330\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                logout(sessionId);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"331\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"332\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"333\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"306\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"307\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> postRequest(<span class=\"pl-smi\">String</span> request, <span class=\"pl-k\">Consumer&lt;<span class=\"pl-smi\">Response</span>&gt;</span> handler) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"308\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"309\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                logger<span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>request : '{}'<span class=\"pl-pds\">\"</span></span>, request);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"310\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"311\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-smi\">String</span> response <span class=\"pl-k\">=</span> api<span class=\"pl-k\">.</span>postRequest(ipAddress, request);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"312\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">if</span> (response <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"313\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"314\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">Response</span> resp <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(response, <span class=\"pl-smi\">Response</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"315\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">boolean</span> success <span class=\"pl-k\">=</span> resp<span class=\"pl-k\">.</span>success;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"316\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">if</span> (success) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"317\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        handler<span class=\"pl-k\">.</span>accept(resp);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"318\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"319\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"320\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Request unsuccessful<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"321\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"322\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"323\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No Response<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"324\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"325\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">         } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">JsonSyntaxException</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"326\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>, e<span class=\"pl-k\">.</span>getMessage());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"327\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">         }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"328\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"329\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"330\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> postRequestInSession(<span class=\"pl-k\">UnaryOperator&lt;<span class=\"pl-smi\">String</span>&gt;</span> requestFactory, <span class=\"pl-k\">Consumer&lt;<span class=\"pl-smi\">Response</span>&gt;</span> handler) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"331\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">String</span> sessionId <span class=\"pl-k\">=</span> login();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"332\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (sessionId <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"333\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"334\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-smi\">String</span> request <span class=\"pl-k\">=</span> requestFactory<span class=\"pl-k\">.</span>apply(sessionId);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"335\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                postRequest(request, handler);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"336\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            } <span class=\"pl-k\">finally</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"337\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                logout(sessionId);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"338\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"339\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"340\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-18T19:20:48Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.submit(() -> {\n+            populateProperties();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            updateProperties(properties);\n+\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.submit(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                }\n+\n+            });\n+        }\n+    }\n+\n+    public @Nullable String login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n+        }\n+        return sessionId;\n+    }\n+\n+    public @Nullable String logout(String sessionId) {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Info info = gson.fromJson(data.info, Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n+        String sessionId = login();\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NDQ0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491174448", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0NjA2NA=="}], "type": "inlineReview", "revised_code": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -314,29 +270,32 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         }\n     }\n \n-    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n+    private void postRequest(String request, Consumer<Response> handler) {\n+        try {\n+            logger.trace(\"request : '{}'\", request);\n+            String response = api.postRequest(config.ipAddress, request);\n+            if (response != null) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    handler.accept(resp);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Request unsuccessful\");\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+            }\n+        } catch (JsonSyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    private void postRequestInSession(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n         String sessionId = login();\n         if (sessionId != null) {\n             try {\n                 String request = requestFactory.apply(sessionId);\n-                logger.trace(\"request : '{}'\", request);\n-\n-                String response = api.postRequest(ipAddress, request);\n-                if (response != null) {\n-\n-                    Response resp = gson.fromJson(response, Response.class);\n-                    boolean success = resp.success;\n-                    if (success) {\n-                        handler.accept(resp);\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n-                                \"Request unsuccessful\");\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                postRequest(request, handler);\n             } finally {\n                 logout(sessionId);\n             }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MTg3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491151874", "body": "This code can now also be refactored to use our new `postRequest` method.\r\n```suggestion\r\n        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\r\n                    Data data = gson.fromJson(resp.data, Data.class);\r\n                    Info info = gson.fromJson(data.info, Info.class);\r\n                    properties.put(PROPERTY_VENDOR, \"Intesis\");\r\n                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\r\n                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\r\n                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\r\n                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\r\n                    updateStatus(ThingStatus.ONLINE);\r\n        });\r\n```", "bodyText": "This code can now also be refactored to use our new postRequest method.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n          \n          \n            \n                    String response = api.postRequest(ipAddress, contentString);\n          \n          \n            \n                    logger.trace(\"getInfo response : {}\", response);\n          \n          \n            \n                    if (response != null) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            Response resp = gson.fromJson(response, Response.class);\n          \n          \n            \n                            boolean success = resp.success;\n          \n          \n            \n                            if (success) {\n          \n          \n            \n                                Data data = gson.fromJson(resp.data, Data.class);\n          \n          \n            \n                                Info info = gson.fromJson(data.info, Info.class);\n          \n          \n            \n                                properties.put(PROPERTY_VENDOR, \"Intesis\");\n          \n          \n            \n                                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n          \n          \n            \n                                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n          \n          \n            \n                                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n          \n          \n            \n                                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n          \n          \n            \n                                updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                            }\n          \n          \n            \n                        } catch (JsonSyntaxException e) {\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n          \n          \n            \n                                Data data = gson.fromJson(resp.data, Data.class);\n          \n          \n            \n                                Info info = gson.fromJson(data.info, Info.class);\n          \n          \n            \n                                properties.put(PROPERTY_VENDOR, \"Intesis\");\n          \n          \n            \n                                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n          \n          \n            \n                                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n          \n          \n            \n                                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n          \n          \n            \n                                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n          \n          \n            \n                                updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                    });", "bodyHTML": "<p dir=\"auto\">This code can now also be refactored to use our new <code>postRequest</code> method.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">String</span> contentString <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{<span class=\"pl-cce\">\\\"</span>command<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span>getinfo<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>data<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"\\\"</span>}<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">String</span> response <span class=\"pl-k\">=</span> api<span class=\"pl-k\">.</span>postRequest(ipAddress, contentString);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>getInfo response : {}<span class=\"pl-pds\">\"</span></span>, response);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (response <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">Response</span> resp <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(response, <span class=\"pl-smi\">Response</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">boolean</span> success <span class=\"pl-k\">=</span> resp<span class=\"pl-k\">.</span>success;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">if</span> (success) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">Data</span> data <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(resp<span class=\"pl-k\">.</span>data, <span class=\"pl-smi\">Data</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">Info</span> info <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(data<span class=\"pl-k\">.</span>info, <span class=\"pl-smi\">Info</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    properties<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">PROPERTY_VENDOR</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Intesis<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    properties<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">PROPERTY_MODEL_ID</span>, info<span class=\"pl-k\">.</span>deviceModel);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    properties<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">PROPERTY_SERIAL_NUMBER</span>, info<span class=\"pl-k\">.</span>sn);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    properties<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">PROPERTY_FIRMWARE_VERSION</span>, info<span class=\"pl-k\">.</span>fwVersion);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    properties<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">PROPERTY_MAC_ADDRESS</span>, info<span class=\"pl-k\">.</span>wlanSTAMAC);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ONLINE</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">JsonSyntaxException</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        postRequest(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{<span class=\"pl-cce\">\\\"</span>command<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span>getinfo<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>data<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"\\\"</span>}<span class=\"pl-pds\">\"</span></span>, resp <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">Data</span> data <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(resp<span class=\"pl-k\">.</span>data, <span class=\"pl-smi\">Data</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">Info</span> info <span class=\"pl-k\">=</span> gson<span class=\"pl-k\">.</span>fromJson(data<span class=\"pl-k\">.</span>info, <span class=\"pl-smi\">Info</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    properties<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">PROPERTY_VENDOR</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Intesis<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    properties<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">PROPERTY_MODEL_ID</span>, info<span class=\"pl-k\">.</span>deviceModel);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    properties<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">PROPERTY_SERIAL_NUMBER</span>, info<span class=\"pl-k\">.</span>sn);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    properties<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">PROPERTY_FIRMWARE_VERSION</span>, info<span class=\"pl-k\">.</span>fwVersion);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    properties<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">PROPERTY_MAC_ADDRESS</span>, info<span class=\"pl-k\">.</span>wlanSTAMAC);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ONLINE</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        });</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-18T19:33:59Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.submit(() -> {\n+            populateProperties();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            updateProperties(properties);\n+\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.submit(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                }\n+\n+            });\n+        }\n+    }\n+\n+    public @Nullable String login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n+        }\n+        return sessionId;\n+    }\n+\n+    public @Nullable String logout(String sessionId) {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Info info = gson.fromJson(data.info, Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NDA1MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491174050", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MTg3NA=="}], "type": "inlineReview", "revised_code": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -205,93 +204,50 @@ public class IntesisHomeHandler extends BaseThingHandler {\n             final int uId = uid;\n             final int newValue = value;\n             scheduler.submit(() -> {\n-                login();\n-                String sessionId = login();\n-                if (sessionId != null) {\n-                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n-                    String response = api.postRequest(ipAddress, contentString);\n-                    if (response != null) {\n-                        try {\n-                            Response resp = gson.fromJson(response, Response.class);\n-                            boolean success = resp.success;\n-                            if (!success) {\n-                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                            } else {\n-                                logout(sessionId);\n-                                updateStatus(ThingStatus.ONLINE);\n-                            }\n-                        } catch (JsonSyntaxException e) {\n-                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                        }\n-                    }\n-                }\n-\n+                postRequestInSession(\n+                        sessionId -> \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                                + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\",\n+                        r -> updateStatus(ThingStatus.ONLINE));\n             });\n         }\n     }\n \n     public @Nullable String login() {\n-        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n-                + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        String sessionId = null;\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n+        // lambda's can't modify local variables, so we use an array here to get around the issue\n+        String[] sessionId = new String[1];\n+        postRequest(\n+                \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + config.password + \"\\\"}}\",\n+                resp -> {\n                     Data data = gson.fromJson(resp.data, Data.class);\n                     Id id = gson.fromJson(data.id, Id.class);\n-                    sessionId = id.sessionID.toString();\n-                    if (sessionId != null && !sessionId.isEmpty()) {\n-                        updateStatus(ThingStatus.ONLINE);\n-                        return sessionId;\n-                    } else {\n-                        updateStatus(ThingStatus.OFFLINE);\n-                    }\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-                    return null;\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n-            }\n+                    sessionId[0] = id.sessionID.toString();\n+                });\n+        if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            return sessionId[0];\n         } else {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n             return null;\n         }\n-        return sessionId;\n     }\n \n     public @Nullable String logout(String sessionId) {\n         String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n-        String response = api.postRequest(ipAddress, contentString);\n+        String response = api.postRequest(config.ipAddress, contentString);\n         return response;\n     }\n \n     public void populateProperties() {\n-        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n-        String response = api.postRequest(ipAddress, contentString);\n-        logger.trace(\"getInfo response : {}\", response);\n-        if (response != null) {\n-            try {\n-                Response resp = gson.fromJson(response, Response.class);\n-                boolean success = resp.success;\n-                if (success) {\n-                    Data data = gson.fromJson(resp.data, Data.class);\n-                    Info info = gson.fromJson(data.info, Info.class);\n-                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n-                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n-                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n-                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n-                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n-                    updateStatus(ThingStatus.ONLINE);\n-                }\n-            } catch (JsonSyntaxException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        }\n+        postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n+            Data data = gson.fromJson(resp.data, Data.class);\n+            Info info = gson.fromJson(data.info, Info.class);\n+            properties.put(PROPERTY_VENDOR, \"Intesis\");\n+            properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+            properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+            properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+            properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+            updateStatus(ThingStatus.ONLINE);\n+        });\n     }\n \n     public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MjUyMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491152520", "body": "```suggestion\r\n                        .map(e -> new StateOption(e, e.substring(0, 1) + e.substring(1).toLowerCase()))\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n          \n          \n            \n                                    .map(e -> new StateOption(e, e.substring(0, 1) + e.substring(1).toLowerCase()))", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .map(e <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StateOption</span>(e, e<span class=\"pl-k\">.</span>substring(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>) <span class=\"pl-k\">+</span> e<span class=\"pl-k\">.</span><span class=\"x x-first\">toString()</span><span class=\"pl-k x x-last\">.</span>substring(<span class=\"pl-c1\">1</span>)<span class=\"pl-k\">.</span>toLowerCase()))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        .map(e <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StateOption</span>(e, e<span class=\"pl-k\">.</span>substring(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>) <span class=\"pl-k\">+</span> e<span class=\"pl-k\">.</span>substring(<span class=\"pl-c1\">1</span>)<span class=\"pl-k\">.</span>toLowerCase()))</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-18T19:35:22Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.submit(() -> {\n+            populateProperties();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            updateProperties(properties);\n+\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.submit(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                }\n+\n+            });\n+        }\n+    }\n+\n+    public @Nullable String login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n+        }\n+        return sessionId;\n+    }\n+\n+    public @Nullable String logout(String sessionId) {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Info info = gson.fromJson(data.info, Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3Mzk0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491173948", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MjUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -306,7 +262,7 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n             if (options != null) {\n                 final List<StateOption> stateOptions = options.stream()\n-                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.substring(1).toLowerCase()))\n                         .collect(Collectors.toList());\n                 logger.trace(\"StateOptions : '{}'\", stateOptions);\n                 intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NDAwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491154006", "body": "If configuration is invalid there is no reason to continue initializing right?\r\nAlso, you should specify in the status details which configuration parameter is wrong so that users would\r\nknow how to fix it.", "bodyText": "If configuration is invalid there is no reason to continue initializing right?\nAlso, you should specify in the status details which configuration parameter is wrong so that users would\nknow how to fix it.", "bodyHTML": "<p dir=\"auto\">If configuration is invalid there is no reason to continue initializing right?<br>\nAlso, you should specify in the status details which configuration parameter is wrong so that users would<br>\nknow how to fix it.</p>", "author": "cpmeister", "createdAt": "2020-09-18T19:39:01Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3OTkwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491179907", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NDAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -99,21 +97,22 @@ public class IntesisHomeHandler extends BaseThingHandler {\n     @Override\n     public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        config = getConfigAs(IntesisConfiguration.class);\n+        if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+        } else if (config.ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+        } else if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n         }\n \n         // start background initialization:\n         scheduler.submit(() -> {\n             populateProperties();\n             // query available dataPoints and build dynamic channels\n-            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n             updateProperties(properties);\n-\n         });\n     }\n \n", "next_change": {"commit": "a619be48d07d3b476b29034af12e1288a683833b", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 7d2b68bea9..982946626e 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -100,20 +100,23 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         config = getConfigAs(IntesisConfiguration.class);\n         if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+            return;\n         } else if (config.ipAddress.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+            return;\n         } else if (config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n+            return;\n+        } else {\n+            // start background initialization:\n+            scheduler.submit(() -> {\n+                populateProperties();\n+                // query available dataPoints and build dynamic channels\n+                postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                        + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n+                updateProperties(properties);\n+            });\n         }\n-\n-        // start background initialization:\n-        scheduler.submit(() -> {\n-            populateProperties();\n-            // query available dataPoints and build dynamic channels\n-            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n-                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n-            updateProperties(properties);\n-        });\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NTM1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491155353", "body": "There is no need to cache these as their own fields in the handler when you could always just retrieve them directly from the config each time.", "bodyText": "There is no need to cache these as their own fields in the handler when you could always just retrieve them directly from the config each time.", "bodyHTML": "<p dir=\"auto\">There is no need to cache these as their own fields in the handler when you could always just retrieve them directly from the config each time.</p>", "author": "cpmeister", "createdAt": "2020-09-18T19:42:17Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NzI4OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491177288", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NTM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -99,21 +97,22 @@ public class IntesisHomeHandler extends BaseThingHandler {\n     @Override\n     public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        config = getConfigAs(IntesisConfiguration.class);\n+        if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+        } else if (config.ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+        } else if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n         }\n \n         // start background initialization:\n         scheduler.submit(() -> {\n             populateProperties();\n             // query available dataPoints and build dynamic channels\n-            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n             updateProperties(properties);\n-\n         });\n     }\n \n", "next_change": {"commit": "a619be48d07d3b476b29034af12e1288a683833b", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 7d2b68bea9..982946626e 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -100,20 +100,23 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         config = getConfigAs(IntesisConfiguration.class);\n         if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+            return;\n         } else if (config.ipAddress.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+            return;\n         } else if (config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n+            return;\n+        } else {\n+            // start background initialization:\n+            scheduler.submit(() -> {\n+                populateProperties();\n+                // query available dataPoints and build dynamic channels\n+                postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                        + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n+                updateProperties(properties);\n+            });\n         }\n-\n-        // start background initialization:\n-        scheduler.submit(() -> {\n-            populateProperties();\n-            // query available dataPoints and build dynamic channels\n-            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n-                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n-            updateProperties(properties);\n-        });\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NjIxOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491156218", "body": "I assume it was your original intention save the config in your `config` field. This is the standard design pattern in most bindings.\r\n```suggestion\r\n        config = getConfigAs(IntesisConfiguration.class);\r\n```", "bodyText": "I assume it was your original intention save the config in your config field. This is the standard design pattern in most bindings.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n          \n          \n            \n                    config = getConfigAs(IntesisConfiguration.class);", "bodyHTML": "<p dir=\"auto\">I assume it was your original intention save the config in your <code>config</code> field. This is the standard design pattern in most bindings.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k x x-first\">final</span><span class=\"x\"> </span><span class=\"pl-smi x\">IntesisConfiguration</span><span class=\"x x-last\"> </span>config <span class=\"pl-k\">=</span> getConfigAs(<span class=\"pl-smi\">IntesisConfiguration</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        config <span class=\"pl-k\">=</span> getConfigAs(<span class=\"pl-smi\">IntesisConfiguration</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-18T19:44:23Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NTE0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491175149", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NjIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -99,21 +97,22 @@ public class IntesisHomeHandler extends BaseThingHandler {\n     @Override\n     public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        config = getConfigAs(IntesisConfiguration.class);\n+        if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+        } else if (config.ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+        } else if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n         }\n \n         // start background initialization:\n         scheduler.submit(() -> {\n             populateProperties();\n             // query available dataPoints and build dynamic channels\n-            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n-                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n             updateProperties(properties);\n-\n         });\n     }\n \n", "next_change": {"commit": "a619be48d07d3b476b29034af12e1288a683833b", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 7d2b68bea9..982946626e 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -100,20 +100,23 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         config = getConfigAs(IntesisConfiguration.class);\n         if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+            return;\n         } else if (config.ipAddress.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+            return;\n         } else if (config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n+            return;\n+        } else {\n+            // start background initialization:\n+            scheduler.submit(() -> {\n+                populateProperties();\n+                // query available dataPoints and build dynamic channels\n+                postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                        + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n+                updateProperties(properties);\n+            });\n         }\n-\n-        // start background initialization:\n-        scheduler.submit(() -> {\n-            populateProperties();\n-            // query available dataPoints and build dynamic channels\n-            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n-                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n-            updateProperties(properties);\n-        });\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NjUwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491156501", "body": "Might as well make this final.\r\n```suggestion\r\n    private final IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\r\n```\r\nAlso, please move all final fields above the non-final ones.", "bodyText": "Might as well make this final.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n          \n          \n            \n                private final IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n          \n      \n    \n    \n  \n\nAlso, please move all final fields above the non-final ones.", "bodyHTML": "<p dir=\"auto\">Might as well make this final.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">IntesisDynamicStateDescriptionProvider</span> intesisStateDescriptionProvider;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">IntesisDynamicStateDescriptionProvider</span> intesisStateDescriptionProvider;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Also, please move all final fields above the non-final ones.</p>", "author": "cpmeister", "createdAt": "2020-09-18T19:45:03Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NTkwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491175906", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:30:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NjUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -76,18 +76,16 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n     private final IntesisHomeHttpApi api;\n-    private IntesisConfiguration config = new IntesisConfiguration();\n \n     private final Map<String, String> properties = new HashMap<>();\n \n-    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+    private final IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n+    private final Gson gson = new Gson();\n \n-    private String ipAddress = \"\";\n-    private String password = \"\";\n+    private IntesisConfiguration config = new IntesisConfiguration();\n \n-    final Gson gson = new Gson();\n+    private @Nullable ScheduledFuture<?> refreshJob;\n \n     public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n             IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NjgzOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491156838", "body": "```suggestion\r\n    private final Gson gson = new Gson();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Gson gson = new Gson();\n          \n          \n            \n                private final Gson gson = new Gson();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Gson</span> gson <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first\">private</span><span class=\"x x-last\"> </span><span class=\"pl-k\">final</span> <span class=\"pl-smi\">Gson</span> gson <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-18T19:45:44Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NTgzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491175836", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NjgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex fb4bb13c06..7d2b68bea9 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -76,18 +76,16 @@ public class IntesisHomeHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n     private final IntesisHomeHttpApi api;\n-    private IntesisConfiguration config = new IntesisConfiguration();\n \n     private final Map<String, String> properties = new HashMap<>();\n \n-    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+    private final IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n+    private final Gson gson = new Gson();\n \n-    private String ipAddress = \"\";\n-    private String password = \"\";\n+    private IntesisConfiguration config = new IntesisConfiguration();\n \n-    final Gson gson = new Gson();\n+    private @Nullable ScheduledFuture<?> refreshJob;\n \n     public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n             IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n", "next_change": null}]}}, {"oid": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "url": "https://github.com/openhab/openhab-addons/commit/b5316d06ce4f5000baefc57cd18b8c9671d87740", "message": "Some more code optimization after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-18T20:46:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MDI1MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491250250", "body": "Once you find that the configuration is invalid, you should bail out early subsequent errors from the improper configuration would end up burying the initial config errors.\r\n```suggestion\r\n            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\r\n            return;\r\n        } else if (config.ipAddress.isEmpty()) {\r\n            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\r\n            return;\r\n        } else if (config.password.isEmpty()) {\r\n            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\r\n            return;\r\n        }\r\n```", "bodyText": "Once you find that the configuration is invalid, you should bail out early subsequent errors from the improper configuration would end up burying the initial config errors.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n          \n          \n            \n                    } else if (config.ipAddress.isEmpty()) {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n          \n          \n            \n                    } else if (config.password.isEmpty()) {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n          \n          \n            \n                    }\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n          \n          \n            \n                        return;\n          \n          \n            \n                    } else if (config.ipAddress.isEmpty()) {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n          \n          \n            \n                        return;\n          \n          \n            \n                    } else if (config.password.isEmpty()) {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n          \n          \n            \n                        return;\n          \n          \n            \n                    }", "bodyHTML": "<p dir=\"auto\">Once you find that the configuration is invalid, you should bail out early subsequent errors from the improper configuration would end up burying the initial config errors.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"119\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONFIGURATION_ERROR</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>IP-Address and password not set<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"120\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (config<span class=\"pl-k\">.</span>ipAddress<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"121\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONFIGURATION_ERROR</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>IP-Address not set<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"122\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (config<span class=\"pl-k\">.</span>password<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"123\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONFIGURATION_ERROR</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Password not set<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"124\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"119\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONFIGURATION_ERROR</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>IP-Address and password not set<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"120\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"121\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (config<span class=\"pl-k\">.</span>ipAddress<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"122\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONFIGURATION_ERROR</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>IP-Address not set<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"123\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"124\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (config<span class=\"pl-k\">.</span>password<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"125\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONFIGURATION_ERROR</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Password not set<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"126\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"127\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-09-19T01:16:55Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -99,21 +97,22 @@ public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n     @Override\n     public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        config = getConfigAs(IntesisConfiguration.class);\n+        if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+        } else if (config.ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+        } else if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n         }", "originalCommit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI5NDY0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491294642", "bodyText": "Maybe better to add an else case at the last if and put the rest of the code in there\n } else {\n    // start background initialization:\n   ....\n}", "author": "Hilbrand", "createdAt": "2020-09-19T06:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI5NzQyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491297421", "bodyText": "Done, implemented both changes.", "author": "hmerk", "createdAt": "2020-09-19T06:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI5OTEzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491299136", "bodyText": "With the else the return is technically not needed \ud83d\ude09 :", "author": "Hilbrand", "createdAt": "2020-09-19T06:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MDI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "a619be48d07d3b476b29034af12e1288a683833b", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\nindex 7d2b68bea9..982946626e 100644\n--- a/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n+++ b/bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java\n", "chunk": "@@ -100,20 +100,23 @@ public class IntesisHomeHandler extends BaseThingHandler {\n         config = getConfigAs(IntesisConfiguration.class);\n         if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+            return;\n         } else if (config.ipAddress.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+            return;\n         } else if (config.password.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n+            return;\n+        } else {\n+            // start background initialization:\n+            scheduler.submit(() -> {\n+                populateProperties();\n+                // query available dataPoints and build dynamic channels\n+                postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                        + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n+                updateProperties(properties);\n+            });\n         }\n-\n-        // start background initialization:\n-        scheduler.submit(() -> {\n-            populateProperties();\n-            // query available dataPoints and build dynamic channels\n-            postRequestInSession(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n-                    + sessionId + \"\\\"}}\", this::handleDataPointsResponse);\n-            updateProperties(properties);\n-        });\n     }\n \n     @Override\n", "next_change": null}]}}, {"oid": "a619be48d07d3b476b29034af12e1288a683833b", "url": "https://github.com/openhab/openhab-addons/commit/a619be48d07d3b476b29034af12e1288a683833b", "message": "Some more code optimization after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-19T06:53:11Z", "type": "commit"}]}