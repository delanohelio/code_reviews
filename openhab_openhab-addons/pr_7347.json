{"pr_number": 7347, "pr_title": "[insteon] Improve hub message processing", "pr_author": "jsetton", "pr_createdAt": "2020-04-12T00:25:05Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7347", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MTM3MA==", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407141370", "body": "You aren't going to log this message anymore?", "bodyText": "You aren't going to log this message anymore?", "bodyHTML": "<p dir=\"auto\">You aren't going to log this message anymore?</p>", "author": "cpmeister", "createdAt": "2020-04-12T03:46:23Z", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/driver/Port.java", "diffHunk": "@@ -300,21 +300,23 @@ public void run() {\n         }\n \n         private void processMessages() {\n-            try {\n-                // must call processData() until we get a null pointer back\n-                for (Msg m = msgFactory.processData(); m != null; m = msgFactory.processData()) {\n-                    toAllListeners(m);\n-                    notifyWriter(m);\n-                }\n-            } catch (IOException e) {\n-                // got bad data from modem,\n-                // unblock those waiting for ack\n-                logger.warn(\"bad data received: {}\", e.getMessage());", "originalCommit": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1OTc0NA==", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407159744", "bodyText": "This was removed because it was getting logged twice just before the IOException is raised. That's why the bad data received prefix was moved to the other log statement.", "author": "jsetton", "createdAt": "2020-04-12T07:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MTM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjI1OA==", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407142258", "body": "Is there any way to prevent calling `getHexByte` if it wouldn't be logged anyway? Maybe call it inside the `bail` method?", "bodyText": "Is there any way to prevent calling getHexByte if it wouldn't be logged anyway? Maybe call it inside the bail method?", "bodyHTML": "<p dir=\"auto\">Is there any way to prevent calling <code>getHexByte</code> if it wouldn't be logged anyway? Maybe call it inside the <code>bail</code> method?</p>", "author": "cpmeister", "createdAt": "2020-04-12T04:00:03Z", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "diffHunk": "@@ -93,44 +108,48 @@ public void addData(byte[] data, int len) {\n         // Now see if we have enough data for a complete message.\n         // If not, we return null, and expect this method to be called again\n         // when more data has come in.\n-        int msgLen = -1;\n-        boolean isExtended = false;\n         if (end > 1) {\n             // we have some data, but do we have enough to read the entire header?\n             int headerLength = Msg.getHeaderLength(buf[1]);\n-            isExtended = Msg.isExtended(buf, end, headerLength);\n+            boolean isExtended = Msg.isExtended(buf, end, headerLength);\n             logger.trace(\"header length expected: {} extended: {}\", headerLength, isExtended);\n             if (headerLength < 0) {\n                 removeFromBuffer(1); // get rid of the leading 0x02 so draining works\n-                bail(\"got unknown command code \" + Utils.getHexByte(buf[1]));\n+                bail(\"got unknown command code \" + Utils.getHexByte(buf[0]));\n             } else if (headerLength >= 2) {\n                 if (end >= headerLength) {\n                     // only when the header is complete do we know that isExtended is correct!\n-                    msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    int msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    logger.trace(\"msgLen expected: {}\", msgLen);\n                     if (msgLen < 0) {\n                         // Cannot make sense out of the combined command code & isExtended flag.\n                         removeFromBuffer(1);\n-                        bail(\"unknown command code/ext flag: \" + Utils.getHexByte(buf[1]));\n+                        bail(\"got unknown command code/ext flag \" + Utils.getHexByte(buf[0]));", "originalCommit": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1OTgwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407159800", "bodyText": "The message is being logged in the bail method. So I am unsure why you are asking this?", "author": "jsetton", "createdAt": "2020-04-12T07:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjI3MA==", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407142270", "body": "please fix the indentation.", "bodyText": "please fix the indentation.", "bodyHTML": "<p dir=\"auto\">please fix the indentation.</p>", "author": "cpmeister", "createdAt": "2020-04-12T04:00:17Z", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "diffHunk": "@@ -56,9 +66,13 @@ public MsgFactory() {\n     public void addData(byte[] data, int len) {\n         int l = len;\n         if (l + end > MAX_MSG_LEN) {\n-            logger.warn(\"warn: truncating excessively long message!\");\n+            logger.warn(\"truncating excessively long message!\");\n             l = MAX_MSG_LEN - end;\n         }\n+        // indicate new data can be processed if length > 0\n+        if (l > 0) {\n+          done = false;", "originalCommit": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1OTgzNg==", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407159836", "bodyText": "Sure.", "author": "jsetton", "createdAt": "2020-04-12T07:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjI3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjYxOA==", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407142618", "body": "```suggestion\r\n        if(logger.isTraceEnabled()){\r\n            logger.trace(\"keeping buffer len {} data: {}\", end, Utils.getHexString(buf, end));\r\n        }\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.trace(\"keeping buffer len {} data: {}\", end, Utils.getHexString(buf, end));\n          \n          \n            \n                    if(logger.isTraceEnabled()){\n          \n          \n            \n                        logger.trace(\"keeping buffer len {} data: {}\", end, Utils.getHexString(buf, end));\n          \n          \n            \n                    }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"146\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span><span class=\"x x-first\">trace(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">keeping buffer len {} data: {}</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, end, </span><span class=\"pl-smi x\">Utils</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getHexString(buf, end));</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"146\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k x x-first\">if</span><span class=\"x x-last\">(</span>logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">isTraceEnabled()){</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"147\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logger<span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>keeping buffer len {} data: {}<span class=\"pl-pds\">\"</span></span>, end, <span class=\"pl-smi\">Utils</span><span class=\"pl-k\">.</span>getHexString(buf, end));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"148\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-04-12T04:05:58Z", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "diffHunk": "@@ -93,44 +108,48 @@ public void addData(byte[] data, int len) {\n         // Now see if we have enough data for a complete message.\n         // If not, we return null, and expect this method to be called again\n         // when more data has come in.\n-        int msgLen = -1;\n-        boolean isExtended = false;\n         if (end > 1) {\n             // we have some data, but do we have enough to read the entire header?\n             int headerLength = Msg.getHeaderLength(buf[1]);\n-            isExtended = Msg.isExtended(buf, end, headerLength);\n+            boolean isExtended = Msg.isExtended(buf, end, headerLength);\n             logger.trace(\"header length expected: {} extended: {}\", headerLength, isExtended);\n             if (headerLength < 0) {\n                 removeFromBuffer(1); // get rid of the leading 0x02 so draining works\n-                bail(\"got unknown command code \" + Utils.getHexByte(buf[1]));\n+                bail(\"got unknown command code \" + Utils.getHexByte(buf[0]));\n             } else if (headerLength >= 2) {\n                 if (end >= headerLength) {\n                     // only when the header is complete do we know that isExtended is correct!\n-                    msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    int msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    logger.trace(\"msgLen expected: {}\", msgLen);\n                     if (msgLen < 0) {\n                         // Cannot make sense out of the combined command code & isExtended flag.\n                         removeFromBuffer(1);\n-                        bail(\"unknown command code/ext flag: \" + Utils.getHexByte(buf[1]));\n+                        bail(\"got unknown command code/ext flag \" + Utils.getHexByte(buf[0]));\n+                    } else if (msgLen > 0) {\n+                        if (end >= msgLen) {\n+                            msg = Msg.createMessage(buf, msgLen, isExtended);\n+                            removeFromBuffer(msgLen);\n+                        }\n+                    } else { // should never happen\n+                        logger.warn(\"invalid message length, internal error!\");\n                     }\n                 }\n             } else { // should never happen\n                 logger.warn(\"invalid header length, internal error!\");\n-                msgLen = -1;\n             }\n         }\n-        logger.trace(\"msgLen expected: {}\", msgLen);\n-        Msg msg = null;\n-        if (msgLen > 0 && end >= msgLen) {\n-            msg = Msg.createMessage(buf, msgLen, isExtended);\n-            removeFromBuffer(msgLen);\n+        // indicate no more messages available in buffer if empty or undefined message\n+        if (end == 0 || msg == null) {\n+            logger.trace(\"done processing current buffer data\");\n+            done = true;\n         }\n         logger.trace(\"keeping buffer len {} data: {}\", end, Utils.getHexString(buf, end));", "originalCommit": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MDAxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407160017", "bodyText": "There are a ton of logger.trace calls across the code. What's the point of this?", "author": "jsetton", "createdAt": "2020-04-12T07:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjYxOA=="}], "type": "inlineReview"}, {"oid": "859aab3b3cce0cdb572013ffc4ab1c0501fbb8e0", "url": "https://github.com/openhab/openhab-addons/commit/859aab3b3cce0cdb572013ffc4ab1c0501fbb8e0", "message": "improved message processing\n\nSigned-off-by: jsetton <jeremy.setton@gmail.com>", "committedDate": "2020-04-12T07:41:39Z", "type": "commit"}, {"oid": "e548f46ef78191ac3846280dafc80d8f456a7a5d", "url": "https://github.com/openhab/openhab-addons/commit/e548f46ef78191ac3846280dafc80d8f456a7a5d", "message": "added undocumented 0x5c message code definition\n\nSigned-off-by: jsetton <jeremy.setton@gmail.com>", "committedDate": "2020-04-12T07:41:54Z", "type": "commit"}, {"oid": "e548f46ef78191ac3846280dafc80d8f456a7a5d", "url": "https://github.com/openhab/openhab-addons/commit/e548f46ef78191ac3846280dafc80d8f456a7a5d", "message": "added undocumented 0x5c message code definition\n\nSigned-off-by: jsetton <jeremy.setton@gmail.com>", "committedDate": "2020-04-12T07:41:54Z", "type": "forcePushed"}]}