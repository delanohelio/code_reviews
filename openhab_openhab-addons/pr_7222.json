{"pr_number": 7222, "pr_title": "[miio] compiler warnings & spotbugs cleanup", "pr_author": "marcelrv", "pr_createdAt": "2020-03-25T23:02:42Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7222", "timeline": [{"oid": "103a726088723bd3424021e42884767ee0d8ad35", "url": "https://github.com/openhab/openhab-addons/commit/103a726088723bd3424021e42884767ee0d8ad35", "message": "[miio] compiler warnings & spotbugs cleanup\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-03-25T23:00:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNDkzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398224939", "body": "If these aren't supposed to be mutable you should return a Collections.emptyList() instead.", "bodyText": "If these aren't supposed to be mutable you should return a Collections.emptyList() instead.", "bodyHTML": "<p dir=\"auto\">If these aren't supposed to be mutable you should return a Collections.emptyList() instead.</p>", "author": "cpmeister", "createdAt": "2020-03-25T23:08:23Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoBasicChannel.java", "diffHunk": "@@ -25,102 +28,111 @@\n  *\n  * @author Marcel Verpaalen - Initial contribution\n  */\n+@NonNullByDefault\n public class MiIoBasicChannel {\n \n     @SerializedName(\"property\")\n     @Expose\n-    private String property;\n+    private @Nullable String property;\n     @SerializedName(\"friendlyName\")\n     @Expose\n-    private String friendlyName;\n+    private @Nullable String friendlyName;\n     @SerializedName(\"channel\")\n     @Expose\n-    private String channel;\n+    private @Nullable String channel;\n     @SerializedName(\"channelType\")\n     @Expose\n-    private String channelType;\n+    private @Nullable String channelType;\n     @SerializedName(\"type\")\n     @Expose\n-    private String type;\n+    private @Nullable String type;\n     @SerializedName(\"refresh\")\n     @Expose\n-    private Boolean refresh;\n+    private @Nullable Boolean refresh;\n     @SerializedName(\"transformation\")\n     @Expose\n-    private String transfortmation;\n+    private @Nullable String transfortmation;\n     @SerializedName(\"ChannelGroup\")\n     @Expose\n-    private String channelGroup;\n+    private @Nullable String channelGroup;\n     @SerializedName(\"actions\")\n     @Expose\n-    private List<MiIoDeviceAction> miIoDeviceActions = new ArrayList<MiIoDeviceAction>();\n+    private @Nullable List<MiIoDeviceAction> miIoDeviceActions = new ArrayList<MiIoDeviceAction>();\n \n     public String getProperty() {\n-        return property;\n+        final String property = this.property;\n+        return (property != null) ? property : \"\";\n     }\n \n     public void setProperty(String property) {\n         this.property = property;\n     }\n \n     public String getFriendlyName() {\n-        return type == null || friendlyName.isEmpty() ? channel : friendlyName;\n+        final String fn = friendlyName;\n+        return (fn == null || type == null || fn.isEmpty()) ? getChannel() : fn;\n     }\n \n     public void setFriendlyName(String friendlyName) {\n         this.friendlyName = friendlyName;\n     }\n \n     public String getChannel() {\n-        return channel;\n+        final @Nullable String channel = this.channel;\n+        return channel != null ? channel : \"\";\n     }\n \n     public void setChannel(String channel) {\n         this.channel = channel;\n     }\n \n     public String getChannelType() {\n-        return channelType == null || channelType.isEmpty() ? BINDING_ID + \":\" + channel\n-                : (channelType.startsWith(\"system\") ? channelType : BINDING_ID + \":\" + channelType);\n+        final @Nullable String ct = channelType;\n+        return ct == null || ct.isEmpty() ? BINDING_ID + \":\" + channel\n+                : (ct.startsWith(\"system\") ? ct : BINDING_ID + \":\" + ct);\n     }\n \n     public void setChannelType(String channelType) {\n         this.channelType = channelType;\n     }\n \n     public String getType() {\n-        return type == null ? \"\" : type;\n+        final @Nullable String type = this.type;\n+        return type != null ? type : \"\";\n     }\n \n     public void setType(String type) {\n         this.type = type;\n     }\n \n     public Boolean getRefresh() {\n-        return refresh && !property.isEmpty();\n+        final @Nullable Boolean rf = refresh;\n+        return rf != null && rf.booleanValue() && !getProperty().isEmpty();\n     }\n \n     public void setRefresh(Boolean refresh) {\n         this.refresh = refresh;\n     }\n \n     public String getChannelGroup() {\n-        return channelGroup;\n+        final @Nullable String channelGroup = this.channelGroup;\n+        return channelGroup != null ? channelGroup : \"\";\n     }\n \n     public void setChannelGroup(String channelGroup) {\n         this.channelGroup = channelGroup;\n     }\n \n     public List<MiIoDeviceAction> getActions() {\n-        return miIoDeviceActions;\n+        final @Nullable List<MiIoDeviceAction> miIoDeviceActions = this.miIoDeviceActions;\n+        return (miIoDeviceActions != null) ? miIoDeviceActions : new ArrayList<MiIoDeviceAction>();", "originalCommit": "103a726088723bd3424021e42884767ee0d8ad35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMTc1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398801751", "bodyText": "thanks.. changed it.", "author": "marcelrv", "createdAt": "2020-03-26T18:32:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNDkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTUxMw==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398225513", "body": "This Gson instance should be reused, but I guess you can do that in another PR.", "bodyText": "This Gson instance should be reused, but I guess you can do that in another PR.", "bodyHTML": "<p dir=\"auto\">This Gson instance should be reused, but I guess you can do that in another PR.</p>", "author": "cpmeister", "createdAt": "2020-03-25T23:09:55Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoDatabaseWatchService.java", "diffHunk": "@@ -109,14 +112,11 @@ private void populateDatabase() {\n         for (URL db : urlEntries) {\n             logger.trace(\"Adding devices for db file: {}\", db);\n             try {\n-                @Nullable\n                 JsonObject deviceMapping = Utils.convertFileToJSON(db);\n-                if (deviceMapping != null) {\n-                    Gson gson = new GsonBuilder().serializeNulls().create();\n-                    MiIoBasicDevice devdb = gson.fromJson(deviceMapping, MiIoBasicDevice.class);\n-                    for (String id : devdb.getDevice().getId()) {\n-                        workingDatabaseList.put(id, db);\n-                    }\n+                Gson gson = new GsonBuilder().serializeNulls().create();", "originalCommit": "103a726088723bd3424021e42884767ee0d8ad35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMjA3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398802076", "bodyText": "Thanks, moved it so it is reused indeed.", "author": "marcelrv", "createdAt": "2020-03-26T18:33:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTY1MA==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398225650", "body": "```suggestion\r\n            this.miIoDiscoveryJob = scheduler.scheduleWithFixedDelay(this::discover, 0, SEARCH_INTERVAL,\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.miIoDiscoveryJob = scheduler.scheduleWithFixedDelay(() -> discover(), 0, SEARCH_INTERVAL,\n          \n          \n            \n                        this.miIoDiscoveryJob = scheduler.scheduleWithFixedDelay(this::discover, 0, SEARCH_INTERVAL,", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>miIoDiscoveryJob <span class=\"pl-k\">=</span> scheduler<span class=\"pl-k\">.</span>scheduleWithFixedDelay(<span class=\"x x-first\">() </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> </span>discover<span class=\"x x-first x-last\">()</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">SEARCH_INTERVAL</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>miIoDiscoveryJob <span class=\"pl-k\">=</span> scheduler<span class=\"pl-k\">.</span>scheduleWithFixedDelay(<span class=\"pl-c1 x x-first\">this</span><span class=\"pl-k x x-last\">::</span>discover, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">SEARCH_INTERVAL</span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-03-25T23:10:23Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/discovery/MiIoDiscovery.java", "diffHunk": "@@ -71,36 +74,44 @@ public MiIoDiscovery() throws IllegalArgumentException {\n     @Override\n     protected void startBackgroundDiscovery() {\n         logger.debug(\"Start Xiaomi Mi IO background discovery\");\n+        final @Nullable ScheduledFuture<?> miIoDiscoveryJob = this.miIoDiscoveryJob;\n         if (miIoDiscoveryJob == null || miIoDiscoveryJob.isCancelled()) {\n-            miIoDiscoveryJob = scheduler.scheduleWithFixedDelay(() -> discover(), 0, SEARCH_INTERVAL, TimeUnit.SECONDS);\n+            this.miIoDiscoveryJob = scheduler.scheduleWithFixedDelay(() -> discover(), 0, SEARCH_INTERVAL,", "originalCommit": "103a726088723bd3424021e42884767ee0d8ad35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMjMzMA==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398802330", "bodyText": "thanks. updated it to your suggestion", "author": "marcelrv", "createdAt": "2020-03-26T18:33:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNzMwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398227300", "body": "I don't think you should grab the configuration until the handler is initialized, especially since configurations can change.", "bodyText": "I don't think you should grab the configuration until the handler is initialized, especially since configurations can change.", "bodyHTML": "<p dir=\"auto\">I don't think you should grab the configuration until the handler is initialized, especially since configurations can change.</p>", "author": "cpmeister", "createdAt": "2020-03-25T23:15:24Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -58,32 +58,34 @@\n  *\n  * @author Marcel Verpaalen - Initial contribution\n  */\n+@NonNullByDefault\n public abstract class MiIoAbstractHandler extends BaseThingHandler implements MiIoMessageListener {\n     protected static final int MAX_QUEUE = 5;\n \n-    protected ScheduledFuture<?> pollingJob;\n+    protected @Nullable ScheduledFuture<?> pollingJob;\n     protected MiIoBindingConfiguration configuration;\n     protected MiIoDevices miDevice = MiIoDevices.UNKNOWN;\n     protected boolean isIdentified;\n \n     protected JsonParser parser;\n-    protected byte[] token;\n+    protected byte[] token = new byte[0];\n \n-    protected MiIoAsyncCommunication miioCom;\n+    protected @Nullable MiIoAsyncCommunication miioCom;\n     protected int lastId;\n \n     protected Map<Integer, String> cmds = new ConcurrentHashMap<Integer, String>();\n-    protected ExpiringCache<String> network;\n+    protected @Nullable ExpiringCache<String> network;\n     protected static final long CACHE_EXPIRY = TimeUnit.SECONDS.toMillis(5);\n     protected static final long CACHE_EXPIRY_NETWORK = TimeUnit.SECONDS.toMillis(60);\n \n     private final Logger logger = LoggerFactory.getLogger(MiIoAbstractHandler.class);\n     protected MiIoDatabaseWatchService miIoDatabaseWatchService;\n \n-    @NonNullByDefault\n-    public MiIoAbstractHandler(Thing thing) {\n+    public MiIoAbstractHandler(Thing thing, MiIoDatabaseWatchService miIoDatabaseWatchService) {\n         super(thing);\n         parser = new JsonParser();\n+        this.miIoDatabaseWatchService = miIoDatabaseWatchService;\n+        this.configuration = getConfigAs(MiIoBindingConfiguration.class);", "originalCommit": "103a726088723bd3424021e42884767ee0d8ad35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMzM4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398803382", "bodyText": "ok, makes sense. removed it", "author": "marcelrv", "createdAt": "2020-03-26T18:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNzMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyODU5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398228591", "body": "fanLevel?", "bodyText": "fanLevel?", "bodyHTML": "<p dir=\"auto\">fanLevel?</p>", "author": "cpmeister", "createdAt": "2020-03-25T23:19:09Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -139,7 +201,8 @@ private boolean updateVacuumStatus(JsonObject statusData) {\n         int fanLevel = statusData.get(\"fan_power\").getAsInt();\n         updateState(CHANNEL_FAN_POWER, new DecimalType(fanLevel));\n         updateState(CHANNEL_FAN_CONTROL, new DecimalType(FanModeType.getType(fanLevel).getId()));\n-        updateState(CHANNEL_IN_CLEANING, new DecimalType(statusData.get(\"in_cleaning\").getAsBigDecimal()));\n+        inCleaning = statusData.get(\"in_cleaning\").getAsInt();\n+        updateState(CHANNEL_IN_CLEANING, new DecimalType(fanLevel));", "originalCommit": "103a726088723bd3424021e42884767ee0d8ad35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMzc4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398803785", "bodyText": ":-) good catch... was doing bit trail & error testing.. seems I did not change this one back.", "author": "marcelrv", "createdAt": "2020-03-26T18:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyODU5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTAwMw==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398229003", "body": "You can reuse threads like this?", "bodyText": "You can reuse threads like this?", "bodyHTML": "<p dir=\"auto\">You can reuse threads like this?</p>", "author": "cpmeister", "createdAt": "2020-03-25T23:20:27Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/transport/MiIoAsyncCommunication.java", "diffHunk": "@@ -191,19 +195,22 @@ MiIoSendCommand sendMiIoSendCommand(MiIoSendCommand miIoSendCommand) {\n     }\n \n     public synchronized void startReceiver() {\n+        MessageSenderThread senderThread = this.senderThread;\n         if (senderThread == null) {\n             senderThread = new MessageSenderThread();\n         }\n         if (!senderThread.isAlive()) {\n             senderThread.start();\n         }", "originalCommit": "103a726088723bd3424021e42884767ee0d8ad35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNDE5OA==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398804198", "bodyText": "Not 100% sure. I changed it to be sure.", "author": "marcelrv", "createdAt": "2020-03-26T18:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTAwMw=="}], "type": "inlineReview"}, {"oid": "472f897316c6118ba66edced6744c16abd93fdb8", "url": "https://github.com/openhab/openhab-addons/commit/472f897316c6118ba66edced6744c16abd93fdb8", "message": "[miio] processing changes based on feedback\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-03-26T18:30:59Z", "type": "commit"}, {"oid": "472f897316c6118ba66edced6744c16abd93fdb8", "url": "https://github.com/openhab/openhab-addons/commit/472f897316c6118ba66edced6744c16abd93fdb8", "message": "[miio] processing changes based on feedback\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-03-26T18:30:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3NjU4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398876585", "body": "too many conditional operators and `\":\"` mixed with `:`. Can you make this more readable?", "bodyText": "too many conditional operators and \":\" mixed with :. Can you make this more readable?", "bodyHTML": "<p dir=\"auto\">too many conditional operators and <code>\":\"</code> mixed with <code>:</code>. Can you make this more readable?</p>", "author": "cpmeister", "createdAt": "2020-03-26T20:38:31Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoBasicChannel.java", "diffHunk": "@@ -25,102 +29,111 @@\n  *\n  * @author Marcel Verpaalen - Initial contribution\n  */\n+@NonNullByDefault\n public class MiIoBasicChannel {\n \n     @SerializedName(\"property\")\n     @Expose\n-    private String property;\n+    private @Nullable String property;\n     @SerializedName(\"friendlyName\")\n     @Expose\n-    private String friendlyName;\n+    private @Nullable String friendlyName;\n     @SerializedName(\"channel\")\n     @Expose\n-    private String channel;\n+    private @Nullable String channel;\n     @SerializedName(\"channelType\")\n     @Expose\n-    private String channelType;\n+    private @Nullable String channelType;\n     @SerializedName(\"type\")\n     @Expose\n-    private String type;\n+    private @Nullable String type;\n     @SerializedName(\"refresh\")\n     @Expose\n-    private Boolean refresh;\n+    private @Nullable Boolean refresh;\n     @SerializedName(\"transformation\")\n     @Expose\n-    private String transfortmation;\n+    private @Nullable String transfortmation;\n     @SerializedName(\"ChannelGroup\")\n     @Expose\n-    private String channelGroup;\n+    private @Nullable String channelGroup;\n     @SerializedName(\"actions\")\n     @Expose\n-    private List<MiIoDeviceAction> miIoDeviceActions = new ArrayList<MiIoDeviceAction>();\n+    private @Nullable List<MiIoDeviceAction> miIoDeviceActions = new ArrayList<MiIoDeviceAction>();\n \n     public String getProperty() {\n-        return property;\n+        final String property = this.property;\n+        return (property != null) ? property : \"\";\n     }\n \n     public void setProperty(String property) {\n         this.property = property;\n     }\n \n     public String getFriendlyName() {\n-        return type == null || friendlyName.isEmpty() ? channel : friendlyName;\n+        final String fn = friendlyName;\n+        return (fn == null || type == null || fn.isEmpty()) ? getChannel() : fn;\n     }\n \n     public void setFriendlyName(String friendlyName) {\n         this.friendlyName = friendlyName;\n     }\n \n     public String getChannel() {\n-        return channel;\n+        final @Nullable String channel = this.channel;\n+        return channel != null ? channel : \"\";\n     }\n \n     public void setChannel(String channel) {\n         this.channel = channel;\n     }\n \n     public String getChannelType() {\n-        return channelType == null || channelType.isEmpty() ? BINDING_ID + \":\" + channel\n-                : (channelType.startsWith(\"system\") ? channelType : BINDING_ID + \":\" + channelType);\n+        final @Nullable String ct = channelType;\n+        return ct == null || ct.isEmpty() ? BINDING_ID + \":\" + channel\n+                : (ct.startsWith(\"system\") ? ct : BINDING_ID + \":\" + ct);", "originalCommit": "472f897316c6118ba66edced6744c16abd93fdb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NDI1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399564253", "bodyText": "I improved this now. I think it is more clear", "author": "marcelrv", "createdAt": "2020-03-27T22:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3NjU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3OTYyNg==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398879626", "body": "Why can't this be created in the constructor? That way you can make the `network` field non-null and final.", "bodyText": "Why can't this be created in the constructor? That way you can make the network field non-null and final.", "bodyHTML": "<p dir=\"auto\">Why can't this be created in the constructor? That way you can make the <code>network</code> field non-null and final.</p>", "author": "cpmeister", "createdAt": "2020-03-26T20:44:03Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -335,9 +336,11 @@ protected boolean initializeData() {\n \n     /**\n      * Prepares the ExpiringCache for network data\n+     *\n+     * @return\n      */\n-    protected void initalizeNetworkCache() {\n-        network = new ExpiringCache<String>(CACHE_EXPIRY_NETWORK, () -> {\n+    protected ExpiringCache<String> initalizeNetworkCache() {\n+        final ExpiringCache<String> network = new ExpiringCache<String>(CACHE_EXPIRY_NETWORK, () -> {", "originalCommit": "472f897316c6118ba66edced6744c16abd93fdb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwMjkyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399502927", "bodyText": "yes, that's a good way to solve it. Done.", "author": "marcelrv", "createdAt": "2020-03-27T19:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3OTYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4MjExOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398882119", "body": "If you create a new thread isn't it still supposed to be started here? right now you are starting the thread in the constructor (and elsewhere maybe, I didn't check too thoroughly).", "bodyText": "If you create a new thread isn't it still supposed to be started here? right now you are starting the thread in the constructor (and elsewhere maybe, I didn't check too thoroughly).", "bodyHTML": "<p dir=\"auto\">If you create a new thread isn't it still supposed to be started here? right now you are starting the thread in the constructor (and elsewhere maybe, I didn't check too thoroughly).</p>", "author": "cpmeister", "createdAt": "2020-03-26T20:48:35Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/transport/MiIoAsyncCommunication.java", "diffHunk": "@@ -191,12 +195,11 @@ MiIoSendCommand sendMiIoSendCommand(MiIoSendCommand miIoSendCommand) {\n     }\n \n     public synchronized void startReceiver() {\n-        if (senderThread == null) {\n+        MessageSenderThread senderThread = this.senderThread;\n+        if (senderThread == null || !senderThread.isAlive()) {\n             senderThread = new MessageSenderThread();\n         }\n-        if (!senderThread.isAlive()) {\n-            senderThread.start();\n-        }", "originalCommit": "472f897316c6118ba66edced6744c16abd93fdb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4Mjg0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398882846", "body": "looks like a good place to use a switch statement.", "bodyText": "looks like a good place to use a switch statement.", "bodyHTML": "<p dir=\"auto\">looks like a good place to use a switch statement.</p>", "author": "cpmeister", "createdAt": "2020-03-26T20:49:51Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -394,36 +413,39 @@ private void updatePropsFromJsonObject(MiIoSendCommand response) {\n \n     private void updateChannel(@Nullable MiIoBasicChannel basicChannel, String param, JsonElement value) {\n         JsonElement val = value;\n-        if (basicChannel != null) {\n-            if (basicChannel.getTransfortmation() != null) {\n-                JsonElement transformed = Conversions.execute(basicChannel.getTransfortmation(), val);\n-                logger.debug(\"Transformed with '{}': {} {} -> {} \", basicChannel.getTransfortmation(),\n-                        basicChannel.getFriendlyName(), val, transformed);\n-                val = transformed;\n+        if (basicChannel == null) {\n+            logger.debug(\"Channel not found for {}\", param);\n+            return;\n+        }\n+        final String transformation = basicChannel.getTransfortmation();\n+        if (transformation != null) {\n+            JsonElement transformed = Conversions.execute(transformation, val);\n+            logger.debug(\"Transformed with '{}': {} {} -> {} \", transformation, basicChannel.getFriendlyName(), val,\n+                    transformed);\n+            val = transformed;\n+        }\n+        try {\n+            if (basicChannel.getType().equals(\"Number\")) {", "originalCommit": "472f897316c6118ba66edced6744c16abd93fdb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxMDI4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399510282", "bodyText": "yes, that makes the code cleaner... done", "author": "marcelrv", "createdAt": "2020-03-27T20:03:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4Mjg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4Mzc0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398883747", "body": "Why return here?", "bodyText": "Why return here?", "bodyHTML": "<p dir=\"auto\">Why return here?</p>", "author": "cpmeister", "createdAt": "2020-03-26T20:51:38Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -191,11 +194,17 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n \n     @Override\n     protected synchronized void updateData() {\n+        final MiIoBindingConfiguration configuration = getConfigAs(MiIoBindingConfiguration.class);\n         logger.debug(\"Periodic update for '{}' ({})\", getThing().getUID().toString(), getThing().getThingTypeUID());\n+        final MiIoAsyncCommunication miioCom = this.miioCom;\n         try {\n             if (!hasConnection() || skipUpdate()) {\n                 return;\n             }\n+            if (miioCom == null) {\n+                initializeData();\n+                return;", "originalCommit": "472f897316c6118ba66edced6744c16abd93fdb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyMzI2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399523263", "bodyText": "yes, indeed not needed. Fixed", "author": "marcelrv", "createdAt": "2020-03-27T20:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4Mzc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4NDM1OA==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398884358", "body": "Any specific exceptions you are trying to catch? If so please list them instead of catching a generic exception.", "bodyText": "Any specific exceptions you are trying to catch? If so please list them instead of catching a generic exception.", "bodyHTML": "<p dir=\"auto\">Any specific exceptions you are trying to catch? If so please list them instead of catching a generic exception.</p>", "author": "cpmeister", "createdAt": "2020-03-26T20:52:45Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -394,36 +413,39 @@ private void updatePropsFromJsonObject(MiIoSendCommand response) {\n \n     private void updateChannel(@Nullable MiIoBasicChannel basicChannel, String param, JsonElement value) {\n         JsonElement val = value;\n-        if (basicChannel != null) {\n-            if (basicChannel.getTransfortmation() != null) {\n-                JsonElement transformed = Conversions.execute(basicChannel.getTransfortmation(), val);\n-                logger.debug(\"Transformed with '{}': {} {} -> {} \", basicChannel.getTransfortmation(),\n-                        basicChannel.getFriendlyName(), val, transformed);\n-                val = transformed;\n+        if (basicChannel == null) {\n+            logger.debug(\"Channel not found for {}\", param);\n+            return;\n+        }\n+        final String transformation = basicChannel.getTransfortmation();\n+        if (transformation != null) {\n+            JsonElement transformed = Conversions.execute(transformation, val);\n+            logger.debug(\"Transformed with '{}': {} {} -> {} \", transformation, basicChannel.getFriendlyName(), val,\n+                    transformed);\n+            val = transformed;\n+        }\n+        try {\n+            if (basicChannel.getType().equals(\"Number\")) {\n+                updateState(basicChannel.getChannel(), new DecimalType(val.getAsBigDecimal()));\n             }\n-            try {\n-                if (basicChannel.getType().equals(\"Number\")) {\n-                    updateState(basicChannel.getChannel(), new DecimalType(val.getAsBigDecimal()));\n-                }\n-                if (basicChannel.getType().equals(\"String\")) {\n-                    updateState(basicChannel.getChannel(), new StringType(val.getAsString()));\n-                }\n-                if (basicChannel.getType().equals(\"Switch\")) {\n-                    updateState(basicChannel.getChannel(), val.getAsString().toLowerCase().equals(\"on\")\n-                            || val.getAsString().toLowerCase().equals(\"true\") ? OnOffType.ON : OnOffType.OFF);\n-                }\n-                if (basicChannel.getType().equals(\"Color\")) {\n-                    Color rgb = new Color(val.getAsInt());\n-                    HSBType hsb = HSBType.fromRGB(rgb.getRed(), rgb.getGreen(), rgb.getBlue());\n-                    updateState(basicChannel.getChannel(), hsb);\n-                }\n-            } catch (Exception e) {\n-                logger.debug(\"Error updating {} property {} with '{}' : {}: {}\", getThing().getUID(),\n-                        basicChannel.getChannel(), val, e.getClass().getCanonicalName(), e.getMessage());\n-                logger.trace(\"Property update error detail:\", e);\n+            if (basicChannel.getType().equals(\"String\")) {\n+                updateState(basicChannel.getChannel(), new StringType(val.getAsString()));\n             }\n-        } else {\n-            logger.debug(\"Channel not found for {}\", param);\n+            if (basicChannel.getType().equals(\"Switch\")) {\n+                updateState(basicChannel.getChannel(),\n+                        val.getAsString().toLowerCase().equals(\"on\") || val.getAsString().toLowerCase().equals(\"true\")\n+                                ? OnOffType.ON\n+                                : OnOffType.OFF);\n+            }\n+            if (basicChannel.getType().equals(\"Color\")) {\n+                Color rgb = new Color(val.getAsInt());\n+                HSBType hsb = HSBType.fromRGB(rgb.getRed(), rgb.getGreen(), rgb.getBlue());\n+                updateState(basicChannel.getChannel(), hsb);\n+            }\n+        } catch (Exception e) {", "originalCommit": "472f897316c6118ba66edced6744c16abd93fdb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNjcyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399526727", "bodyText": "There were various updating issues (e.g. conversion issues, colors not updating ell etc)\nThere should be no particular errors cuurently known to happen here", "author": "marcelrv", "createdAt": "2020-03-27T20:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4NDM1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMDAzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399530035", "bodyText": "leave as is for now then", "author": "cpmeister", "createdAt": "2020-03-27T20:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4NDM1OA=="}], "type": "inlineReview"}, {"oid": "93784cdb9406b73afcd84fb8ac0289eb903aefd1", "url": "https://github.com/openhab/openhab-addons/commit/93784cdb9406b73afcd84fb8ac0289eb903aefd1", "message": "[miio] improvements based on review comments\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-03-27T22:11:56Z", "type": "commit"}, {"oid": "4e07fb0bf49be07f399490ef0176418caf67fda9", "url": "https://github.com/openhab/openhab-addons/commit/4e07fb0bf49be07f399490ef0176418caf67fda9", "message": "[miio] fix confusion channel codeing\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-03-27T22:18:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3NTYxNg==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399575616", "body": "Why was this made a field?", "bodyText": "Why was this made a field?", "bodyHTML": "<p dir=\"auto\">Why was this made a field?</p>", "author": "cpmeister", "createdAt": "2020-03-27T23:02:35Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -51,19 +52,63 @@\n  *\n  * @author Marcel Verpaalen - Initial contribution\n  */\n+@NonNullByDefault\n public class MiIoVacuumHandler extends MiIoAbstractHandler {\n     private final Logger logger = LoggerFactory.getLogger(MiIoVacuumHandler.class);\n-\n     private ExpiringCache<String> status;\n     private ExpiringCache<String> consumables;\n     private ExpiringCache<String> dnd;\n     private ExpiringCache<String> history;\n-    private String lastHistoryId;\n+    private String lastHistoryId = \"\";\n+    private int inCleaning;", "originalCommit": "4e07fb0bf49be07f399490ef0176418caf67fda9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNDkwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399624905", "bodyText": "Indeed... Not really for this PR... For the next one...\nI extracted these changes from the upcoming big pr to separate these many cleanup changes from the real functionality changes.\nhttps://community.openhab.org/t/xiaomi-robot-vacuum-binding/31317/1277", "author": "marcelrv", "createdAt": "2020-03-28T05:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3NTYxNg=="}], "type": "inlineReview"}]}