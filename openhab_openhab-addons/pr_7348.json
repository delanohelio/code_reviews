{"pr_number": 7348, "pr_title": "[extensionservice] Add more null annotations", "pr_author": "wborn", "pr_createdAt": "2020-04-12T17:28:50Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7348", "timeline": [{"oid": "0efaf56718624d815eb5da4c3f23adb9b5793fd9", "url": "https://github.com/openhab/openhab-addons/commit/0efaf56718624d815eb5da4c3f23adb9b5793fd9", "message": "[extensionservice] Add more null annotations\n\nSigned-off-by: Wouter Born <github@maindrain.net>", "committedDate": "2020-04-12T17:30:51Z", "type": "commit"}, {"oid": "0efaf56718624d815eb5da4c3f23adb9b5793fd9", "url": "https://github.com/openhab/openhab-addons/commit/0efaf56718624d815eb5da4c3f23adb9b5793fd9", "message": "[extensionservice] Add more null annotations\n\nSigned-off-by: Wouter Born <github@maindrain.net>", "committedDate": "2020-04-12T17:30:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyOTE1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7348#discussion_r407229153", "body": "Using `@NonNullByDefault({})` is the only way to be compatible with both annotated and non-annotated classes.", "bodyText": "Using @NonNullByDefault({}) is the only way to be compatible with both annotated and non-annotated classes.", "bodyHTML": "<p dir=\"auto\">Using <code>@NonNullByDefault({})</code> is the only way to be compatible with both annotated and non-annotated classes.</p>", "author": "wborn", "createdAt": "2020-04-12T17:33:21Z", "path": "bundles/org.openhab.extensionservice.marketplace/src/main/java/org/openhab/extensionservice/marketplace/internal/MarketplaceXMLReader.java", "diffHunk": "@@ -25,18 +26,19 @@\n  * @author Kai Kreuzer - Initial contribution and API\n  *\n  */\n+@NonNullByDefault\n public class MarketplaceXMLReader extends XmlDocumentReader<Marketplace> {\n \n     public MarketplaceXMLReader() {\n         super.setClassLoader(Marketplace.class.getClassLoader());\n     }\n \n     @Override\n-    public void registerConverters(XStream xstream) {\n+    public void registerConverters(@NonNullByDefault({}) XStream xstream) {\n     }\n \n     @Override\n-    public void registerAliases(XStream xstream) {\n+    public void registerAliases(@NonNullByDefault({}) XStream xstream) {", "originalCommit": "0efaf56718624d815eb5da4c3f23adb9b5793fd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NDM2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7348#discussion_r407264361", "bodyText": "I have no problems with this, sometimes it is the only way to deal with libraries.", "author": "cpmeister", "createdAt": "2020-04-12T23:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyOTE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MTk4MA==", "url": "https://github.com/openhab/openhab-addons/pull/7348#discussion_r407251980", "body": "There is a slight chance that `getNodes()` is called in between the `clear()` and `addAll(..)`. Perhaps we should synchronize the critical sections on `cachedNodes` so it's thread safe and still performs well.", "bodyText": "There is a slight chance that getNodes() is called in between the clear() and addAll(..). Perhaps we should synchronize the critical sections on cachedNodes so it's thread safe and still performs well.", "bodyHTML": "<p dir=\"auto\">There is a slight chance that <code>getNodes()</code> is called in between the <code>clear()</code> and <code>addAll(..)</code>. Perhaps we should synchronize the critical sections on <code>cachedNodes</code> so it's thread safe and still performs well.</p>", "author": "wborn", "createdAt": "2020-04-12T21:04:15Z", "path": "bundles/org.openhab.extensionservice.marketplace/src/main/java/org/openhab/extensionservice/marketplace/internal/MarketplaceProxy.java", "diffHunk": "@@ -81,24 +82,27 @@ public MarketplaceProxy() {\n     public synchronized void refresh() {\n         XmlDocumentReader<Marketplace> reader = new MarketplaceXMLReader();\n         try {\n+            @Nullable\n             Marketplace result = reader.readFromXML(url);\n-            cachedNodes = result.categories[0].nodes;\n+            if (result != null) {\n+                cachedNodes.clear();\n+                cachedNodes.addAll(Arrays.asList(result.categories[0].nodes));", "originalCommit": "0efaf56718624d815eb5da4c3f23adb9b5793fd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MzkxOA==", "url": "https://github.com/openhab/openhab-addons/pull/7348#discussion_r407263918", "bodyText": "Why couldn't you keep cacheNodes a non-null array but just have it initialized to new Node[0]?", "author": "cpmeister", "createdAt": "2020-04-12T23:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MTk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2MjcwMw==", "url": "https://github.com/openhab/openhab-addons/pull/7348#discussion_r407362703", "bodyText": "I've changed it back again. It seems like using an array here has an edge over using a collection. Usually it's the other way around so you can make the variable final to prevent null assignments and use methods like .isEmpty() instead of comparing .length to 0 etc.", "author": "wborn", "createdAt": "2020-04-13T07:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MTk4MA=="}], "type": "inlineReview"}, {"oid": "af4a1f5315b9c68f5ab4d9eb6894799ffbbe9921", "url": "https://github.com/openhab/openhab-addons/commit/af4a1f5315b9c68f5ab4d9eb6894799ffbbe9921", "message": "Use cachedNodes array again for easy atomic assignments\n\nSigned-off-by: Wouter Born <github@maindrain.net>", "committedDate": "2020-04-13T07:42:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ0MTY3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7348#discussion_r407441673", "body": "But it makes sense to return an immutable list here. Doesn't it?\r\n\r\n```suggestion\r\n        return Collections.unmodifiableList(Arrays.asList(cachedNodes));\r\n```", "bodyText": "But it makes sense to return an immutable list here. Doesn't it?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Arrays.asList(cachedNodes);\n          \n          \n            \n                    return Collections.unmodifiableList(Arrays.asList(cachedNodes));", "bodyHTML": "<p dir=\"auto\">But it makes sense to return an immutable list here. Doesn't it?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>asList(cachedNodes);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi x x-first\">Collections</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">unmodifiableList(</span><span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>asList(cachedNodes<span class=\"x x-first x-last\">)</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cweitkamp", "createdAt": "2020-04-13T11:46:44Z", "path": "bundles/org.openhab.extensionservice.marketplace/src/main/java/org/openhab/extensionservice/marketplace/internal/MarketplaceProxy.java", "diffHunk": "@@ -72,7 +71,7 @@ public MarketplaceProxy() {\n      * @return list of marketplace nodes\n      */\n     public List<Node> getNodes() {\n-        return cachedNodes != null ? Arrays.asList(cachedNodes) : Collections.emptyList();\n+        return Arrays.asList(cachedNodes);", "originalCommit": "af4a1f5315b9c68f5ab4d9eb6894799ffbbe9921", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ0Mzc5MA==", "url": "https://github.com/openhab/openhab-addons/pull/7348#discussion_r407443790", "bodyText": "Yes it's best to prevent code from messing with the cached values.", "author": "wborn", "createdAt": "2020-04-13T11:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ0MTY3Mw=="}], "type": "inlineReview"}, {"oid": "22017b337dcd4cca03ac9cf3bb00b1497b4201cf", "url": "https://github.com/openhab/openhab-addons/commit/22017b337dcd4cca03ac9cf3bb00b1497b4201cf", "message": "Prevent code from messing with cachedNodes\n\nSigned-off-by: Wouter Born <github@maindrain.net>", "committedDate": "2020-04-13T12:10:46Z", "type": "commit"}]}