{"pr_number": 7393, "pr_title": "[km200] bugfixing and optimization", "pr_author": "Markinus", "pr_createdAt": "2020-04-16T18:42:04Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7393", "timeline": [{"oid": "d0c3bff759b47a52c800e004d96e974bd2861637", "url": "https://github.com/openhab/openhab-addons/commit/d0c3bff759b47a52c800e004d96e974bd2861637", "message": "Some bug fixes:\n- Fixed problems on dispose, restart and configuration changing\n- Fixed a lot of warnings\n- Fixed the number of decimal places to one\n\nSigned-off-by: Markus Eckhardt <github@familie-eckhardt.eu>", "committedDate": "2020-04-14T19:50:52Z", "type": "commit"}, {"oid": "a4e611449253b2a026dcf997668f0864434a5943", "url": "https://github.com/openhab/openhab-addons/commit/a4e611449253b2a026dcf997668f0864434a5943", "message": "Added @NonNullByDefault to all interfaces and removed warnings\n\nSigned-off-by: Markus Eckhardt <github@familie-eckhardt.eu>", "committedDate": "2020-04-16T07:20:47Z", "type": "commit"}, {"oid": "68b620de8533d80cf724fb0c08fd0e611e7d0c9e", "url": "https://github.com/openhab/openhab-addons/commit/68b620de8533d80cf724fb0c08fd0e611e7d0c9e", "message": "Fixed problems with program switches\n\nSigned-off-by: Markus Eckhardt <github@familie-eckhardt.eu>", "committedDate": "2020-04-16T10:36:23Z", "type": "commit"}, {"oid": "09ea29ede22f201b4decc340074cd45450b10a1b", "url": "https://github.com/openhab/openhab-addons/commit/09ea29ede22f201b4decc340074cd45450b10a1b", "message": "Fixed fraction problems on numbers\n\nSigned-off-by: Markus Eckhardt <github@familie-eckhardt.eu>", "committedDate": "2020-04-16T12:23:52Z", "type": "commit"}, {"oid": "c14ba38663ea7cbdafaaa82fce721990e5db62ef", "url": "https://github.com/openhab/openhab-addons/commit/c14ba38663ea7cbdafaaa82fce721990e5db62ef", "message": "Disabled log entry\n\nSigned-off-by: Markus Eckhardt <github@familie-eckhardt.eu>", "committedDate": "2020-04-16T12:25:58Z", "type": "commit"}, {"oid": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "url": "https://github.com/openhab/openhab-addons/commit/6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "message": "Fixed sending of data\n\nSigned-off-by: Markus Eckhardt <github@familie-eckhardt.eu>", "committedDate": "2020-04-16T17:49:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc3MzY2NA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409773664", "body": "Please use empty string literals instead of creating a new string instance.\r\n```suggestion\r\n    protected String ip4Address = \"\";\r\n```", "bodyText": "Please use empty string literals instead of creating a new string instance.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected String ip4Address = new String();\n          \n          \n            \n                protected String ip4Address = \"\";", "bodyHTML": "<p dir=\"auto\">Please use empty string literals instead of creating a new string instance.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">protected</span> <span class=\"pl-smi\">String</span> ip4Address <span class=\"pl-k\">=</span> <span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">String</span><span class=\"x x-last\">()</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">protected</span> <span class=\"pl-smi\">String</span> ip4Address <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds x x-first\">\"</span><span class=\"pl-pds x x-last\">\"</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-04-16T18:45:14Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200Device.java", "diffHunk": "@@ -32,60 +34,54 @@\n  *\n  * @author Markus Eckhardt - Initial contribution\n  */\n+@NonNullByDefault\n public class KM200Device {\n \n     private final Logger logger = LoggerFactory.getLogger(KM200Device.class);\n     private final JsonParser jsonParser = new JsonParser();\n     private final KM200Cryption comCryption;\n     private final KM200Comm<KM200Device> deviceCommunicator;\n \n-    /**\n-     * shared instance of HTTP client for asynchronous calls\n-     */\n-    private HttpClient httpClient;\n-\n     /* valid IPv4 address of the KMxxx. */\n-    protected String ip4Address;\n+    protected String ip4Address = new String();", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwOTUzMA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410009530", "bodyText": "ok, changed.", "author": "Markinus", "createdAt": "2020-04-17T06:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc3MzY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4MTg4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409781882", "body": "Since you are already using the apache library you can just use:\r\n```suggestion\r\n    protected byte[] cryptKeyInit = ArrayUtils.EMPTY_BYTE_ARRAY;\r\n```", "bodyText": "Since you are already using the apache library you can just use:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected byte[] cryptKeyInit = {};\n          \n          \n            \n                protected byte[] cryptKeyInit = ArrayUtils.EMPTY_BYTE_ARRAY;", "bodyHTML": "<p dir=\"auto\">Since you are already using the apache library you can just use:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">protected</span> <span class=\"pl-k\">byte</span>[] cryptKeyInit <span class=\"pl-k\">=</span> <span class=\"x x-first x-last\">{}</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">protected</span> <span class=\"pl-k\">byte</span>[] cryptKeyInit <span class=\"pl-k\">=</span> <span class=\"pl-smi x x-first\">ArrayUtils</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">EMPTY_BYTE_ARRAY</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-04-16T18:59:54Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200Device.java", "diffHunk": "@@ -32,60 +34,54 @@\n  *\n  * @author Markus Eckhardt - Initial contribution\n  */\n+@NonNullByDefault\n public class KM200Device {\n \n     private final Logger logger = LoggerFactory.getLogger(KM200Device.class);\n     private final JsonParser jsonParser = new JsonParser();\n     private final KM200Cryption comCryption;\n     private final KM200Comm<KM200Device> deviceCommunicator;\n \n-    /**\n-     * shared instance of HTTP client for asynchronous calls\n-     */\n-    private HttpClient httpClient;\n-\n     /* valid IPv4 address of the KMxxx. */\n-    protected String ip4Address;\n+    protected String ip4Address = new String();\n \n     /* The gateway password which is provided on the type sign of the KMxxx. */\n-    protected String gatewayPassword;\n+    protected String gatewayPassword = new String();\n \n     /* The private password which has been defined by the user via EasyControl. */\n-    protected String privatePassword;\n+    protected String privatePassword = new String();\n \n     /* The returned device charset for communication */\n-    protected String charSet;\n+    protected String charSet = new String();;\n \n     /* Needed keys for the communication */\n-    protected byte[] cryptKeyInit;\n-    protected byte[] cryptKeyPriv;\n+    protected byte[] cryptKeyInit = {};", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwOTU0NA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410009544", "bodyText": "ok, changed.", "author": "Markinus", "createdAt": "2020-04-17T06:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4MTg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4MjUyMg==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409782522", "body": "I suggest making `valPara` a StringBuilder instance instead since you do a lot of concatenation with it.", "bodyText": "I suggest making valPara a StringBuilder instance instead since you do a lot of concatenation with it.", "bodyHTML": "<p dir=\"auto\">I suggest making <code>valPara</code> a StringBuilder instance instead since you do a lot of concatenation with it.</p>", "author": "cpmeister", "createdAt": "2020-04-16T19:01:03Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200Device.java", "diffHunk": "@@ -192,22 +194,20 @@ public void listAllServices() {\n      * @param actTreeMap\n      */\n     public void printAllServices(Map<String, KM200ServiceObject> actTreeMap) {\n-        if (actTreeMap != null) {\n-            for (KM200ServiceObject object : actTreeMap.values()) {\n-                if (object != null) {\n-                    String val = \"\", type, valPara = \"\";\n-                    logger.debug(\"List type: {} service: {}\", object.getServiceType(), object.getFullServiceName());\n-                    type = object.getServiceType();\n-                    if (type == null) {\n-                        type = new String();\n-                    }\n-                    if (\"stringValue\".equals(type) || \"floatValue\".equals(type)) {\n-                        val = object.getValue().toString();\n-                        if (object.getValueParameter() != null) {\n-                            if (\"stringValue\".equals(type)) {\n-                                // Type is definitely correct here\n-                                @SuppressWarnings(\"unchecked\")\n-                                List<String> valParas = (List<String>) object.getValueParameter();\n+        for (KM200ServiceObject object : actTreeMap.values()) {\n+            String val = \"\", type, valPara = \"\";", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwOTU4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410009585", "bodyText": "ok, changed.", "author": "Markinus", "createdAt": "2020-04-17T06:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4MjUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NDM0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409784340", "body": "Would it be possible to make `type` an enum instead of a string?", "bodyText": "Would it be possible to make type an enum instead of a string?", "bodyHTML": "<p dir=\"auto\">Would it be possible to make <code>type</code> an enum instead of a string?</p>", "author": "cpmeister", "createdAt": "2020-04-16T19:04:31Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200Device.java", "diffHunk": "@@ -192,22 +194,20 @@ public void listAllServices() {\n      * @param actTreeMap\n      */\n     public void printAllServices(Map<String, KM200ServiceObject> actTreeMap) {\n-        if (actTreeMap != null) {\n-            for (KM200ServiceObject object : actTreeMap.values()) {\n-                if (object != null) {\n-                    String val = \"\", type, valPara = \"\";\n-                    logger.debug(\"List type: {} service: {}\", object.getServiceType(), object.getFullServiceName());\n-                    type = object.getServiceType();\n-                    if (type == null) {\n-                        type = new String();\n-                    }\n-                    if (\"stringValue\".equals(type) || \"floatValue\".equals(type)) {\n-                        val = object.getValue().toString();\n-                        if (object.getValueParameter() != null) {\n-                            if (\"stringValue\".equals(type)) {\n-                                // Type is definitely correct here\n-                                @SuppressWarnings(\"unchecked\")\n-                                List<String> valParas = (List<String>) object.getValueParameter();\n+        for (KM200ServiceObject object : actTreeMap.values()) {\n+            String val = \"\", type, valPara = \"\";\n+            logger.debug(\"List type: {} service: {}\", object.getServiceType(), object.getFullServiceName());\n+            type = object.getServiceType();", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzMTkzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410331937", "bodyText": "I added constants for the different types. I cannot use enum because it cannot be used in switch/case.", "author": "Markinus", "createdAt": "2020-04-17T16:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NDM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0NDM5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410344399", "bodyText": "But enum can be used in switch/case... it is one of the primary benefits of using an enum.", "author": "cpmeister", "createdAt": "2020-04-17T16:46:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NDM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1NTcxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410355717", "bodyText": "but only if I'm using something like:\npublic enum DataType {\"stringValue\", \"floatValue\")\nIt would be in my opinion not really much better. I defined now string constants for this types, like:\n public static final String DATA_TYPE_STRING_VALUE = \"stringValue\";\nIts ok for you?", "author": "Markinus", "createdAt": "2020-04-17T17:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NDM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MDgyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410370820", "bodyText": "That is fine for me. An enum type would be better but a constant works as well.", "author": "cpmeister", "createdAt": "2020-04-17T17:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NDM0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NTI0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409785242", "body": "This method should exit early if necessary logging levels are not enabled.", "bodyText": "This method should exit early if necessary logging levels are not enabled.", "bodyHTML": "<p dir=\"auto\">This method should exit early if necessary logging levels are not enabled.</p>", "author": "cpmeister", "createdAt": "2020-04-16T19:06:10Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200Device.java", "diffHunk": "@@ -192,22 +194,20 @@ public void listAllServices() {\n      * @param actTreeMap\n      */\n     public void printAllServices(Map<String, KM200ServiceObject> actTreeMap) {", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwOTYyNg==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410009626", "bodyText": "ok, changed.", "author": "Markinus", "createdAt": "2020-04-17T06:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NTI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NTM2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409785367", "body": "```suggestion\r\n    public @Nullable KM200ServiceObject getServiceObject(String service) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                public KM200ServiceObject getServiceObject(String service) {\n          \n          \n            \n                public @Nullable KM200ServiceObject getServiceObject(String service) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Nullable</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">KM200ServiceObject</span> getServiceObject(<span class=\"pl-smi\">String</span> service) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">KM200ServiceObject</span> getServiceObject(<span class=\"pl-smi\">String</span> service) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-04-16T19:06:24Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200Device.java", "diffHunk": "@@ -297,6 +294,7 @@ public Boolean containsService(String service) {\n      *\n      * @param service\n      */\n+    @Nullable\n     public KM200ServiceObject getServiceObject(String service) {", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwOTY2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410009662", "bodyText": "ok, changed.", "author": "Markinus", "createdAt": "2020-04-17T06:05:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NTM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NTQ0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409785448", "body": "```suggestion\r\n    public @Nullable JsonObject getServiceNode(String service) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                public JsonObject getServiceNode(String service) {\n          \n          \n            \n                public @Nullable JsonObject getServiceNode(String service) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Nullable</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">JsonObject</span> getServiceNode(<span class=\"pl-smi\">String</span> service) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">JsonObject</span> getServiceNode(<span class=\"pl-smi\">String</span> service) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-04-16T19:06:35Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200Device.java", "diffHunk": "@@ -328,6 +326,7 @@ public KM200ServiceObject getServiceObject(String service) {\n      * possible and a JSON node in opposide case.\n      *\n      */\n+    @Nullable\n     public JsonObject getServiceNode(String service) {", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwOTY4OA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410009688", "bodyText": "ok, changed.", "author": "Markinus", "createdAt": "2020-04-17T06:05:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NTQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4Njg3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409786879", "body": "Instead of getting the httpClient reference through the set/unset methods you should instead have the `HttpClientFactory` passed in through the `KM200HandlerFactory` constructor; that way you can make the httpClient field non-null and final.", "bodyText": "Instead of getting the httpClient reference through the set/unset methods you should instead have the HttpClientFactory passed in through the KM200HandlerFactory constructor; that way you can make the httpClient field non-null and final.", "bodyHTML": "<p dir=\"auto\">Instead of getting the httpClient reference through the set/unset methods you should instead have the <code>HttpClientFactory</code> passed in through the <code>KM200HandlerFactory</code> constructor; that way you can make the httpClient field non-null and final.</p>", "author": "cpmeister", "createdAt": "2020-04-16T19:09:08Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200HandlerFactory.java", "diffHunk": "@@ -57,12 +60,12 @@\n \n     private final Logger logger = LoggerFactory.getLogger(KM200HandlerFactory.class);\n \n-    private KM200ChannelTypeProvider channelTypeProvider;\n+    private @Nullable KM200ChannelTypeProvider channelTypeProvider;\n \n     /**\n      * shared instance of HTTP client for asynchronous calls\n      */\n-    private HttpClient httpClient;\n+    private @Nullable HttpClient httpClient;", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MjA0NA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410372044", "bodyText": "Do you maybe have an example you to do this? I'm not sure about the interface to the constructor of KM200HandlerFactory instead of the reference anotation to set/unset. How can I modify the call to the modified constructor? Usually the system is searching fo a constructor with 0 arguments. Is there a different annotation type for this case? Sorry, I don't know how to do this..", "author": "Markinus", "createdAt": "2020-04-17T17:38:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4Njg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NTQ3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410375474", "bodyText": "@Activate\npublic KM200HandlerFactory(@Reference HttpClientFactory httpClientFactory){\n...\n}", "author": "cpmeister", "createdAt": "2020-04-17T17:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4Njg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4NDM0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410384345", "bodyText": "thx, ok, done.", "author": "Markinus", "createdAt": "2020-04-17T18:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4Njg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NzA5NA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409787094", "body": "```suggestion\r\n    public @Nullable Object getValue() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                public Object getValue() {\n          \n          \n            \n                public @Nullable Object getValue() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Nullable</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Object</span> getValue() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">Object</span> getValue() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-04-16T19:09:35Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200ServiceObject.java", "diffHunk": "@@ -91,14 +93,17 @@ public String getFullServiceName() {\n         return fullServiceName;\n     }\n \n+    @Nullable\n     public Object getValue() {", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxMDI3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410010274", "bodyText": "ok", "author": "Markinus", "createdAt": "2020-04-17T06:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NzA5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NzQ3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409787475", "body": "same here", "bodyText": "same here", "bodyHTML": "<p dir=\"auto\">same here</p>", "author": "cpmeister", "createdAt": "2020-04-16T19:10:18Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200ServiceObject.java", "diffHunk": "@@ -91,14 +93,17 @@ public String getFullServiceName() {\n         return fullServiceName;\n     }\n \n+    @Nullable\n     public Object getValue() {\n         return value;\n     }\n \n+    @Nullable\n     public Object getValueParameter() {", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxMDM2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410010368", "bodyText": "ok", "author": "Markinus", "createdAt": "2020-04-17T06:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NzQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NzY1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409787653", "body": "and here, you get the idea. Please update all other methods similarly.", "bodyText": "and here, you get the idea. Please update all other methods similarly.", "bodyHTML": "<p dir=\"auto\">and here, you get the idea. Please update all other methods similarly.</p>", "author": "cpmeister", "createdAt": "2020-04-16T19:10:39Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200ServiceObject.java", "diffHunk": "@@ -91,14 +93,17 @@ public String getFullServiceName() {\n         return fullServiceName;\n     }\n \n+    @Nullable\n     public Object getValue() {\n         return value;\n     }\n \n+    @Nullable\n     public Object getValueParameter() {\n         return valueParameter;\n     }\n \n+    @Nullable\n     public String getParent() {", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMjI3MA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410022270", "bodyText": "ok, changed.", "author": "Markinus", "createdAt": "2020-04-17T06:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NzY1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4ODk0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409788948", "body": "The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. In error in a binding shouldn't qualify for this. Please read the [openHab coding guidelines](https://www.openhab.org/docs/developer/guidelines.html#f-logging) for expected use of logging in bindings.", "bodyText": "The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. In error in a binding shouldn't qualify for this. Please read the openHab coding guidelines for expected use of logging in bindings.", "bodyHTML": "<p dir=\"auto\">The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. In error in a binding shouldn't qualify for this. Please read the <a href=\"https://www.openhab.org/docs/developer/guidelines.html#f-logging\" rel=\"nofollow\">openHab coding guidelines</a> for expected use of logging in bindings.</p>", "author": "cpmeister", "createdAt": "2020-04-16T19:13:06Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/discovery/KM200GatewayDiscoveryService.java", "diffHunk": "@@ -97,6 +99,10 @@ private void discoverDevices() {\n             if (gateway.getDevice().containsService(root)) {\n                 boolean enumOnly = true;\n                 KM200ServiceObject object = gateway.getDevice().getServiceObject(root);\n+                if (null == object) {\n+                    logger.error(\"No root service object found\");", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNDQ3OA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410024478", "bodyText": "Ok, I will take a closer look to it.", "author": "Markinus", "createdAt": "2020-04-17T06:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4ODk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4OTczNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409789735", "body": "same here", "bodyText": "same here", "bodyHTML": "<p dir=\"auto\">same here</p>", "author": "cpmeister", "createdAt": "2020-04-16T19:14:25Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/discovery/KM200GatewayDiscoveryService.java", "diffHunk": "@@ -144,26 +154,31 @@ private void discoverDevices() {\n                                     currParaRepl = switchObject.serviceTreeMap.entrySet().iterator().next().getKey();\n                                 }\n                             }\n-\n-                            String posName = ((KM200SwitchProgramServiceHandler) switchObject.serviceTreeMap.entrySet()\n-                                    .iterator().next().getValue().getValueParameter()).getPositiveSwitch();\n-                            String negName = ((KM200SwitchProgramServiceHandler) switchObject.serviceTreeMap.entrySet()\n-                                    .iterator().next().getValue().getValueParameter()).getNegativeSwitch();\n-                            ThingUID subThingUID = new ThingUID(tType.getThingTypeUID(), bridgeUID,\n-                                    key + \"-switchprogram\");\n-                            Map<String, Object> subProperties = new HashMap<>(4);\n-                            subProperties.put(\"root\", KM200Utils.translatesPathToName(\n-                                    root + \"/\" + key + \"/\" + SWITCH_PROGRAM_PATH_NAME + \"/\" + currParaRepl));\n-                            subProperties.put(SWITCH_PROGRAM_CURRENT_PATH_NAME,\n-                                    KM200Utils.translatesPathToName(currentPathName));\n-                            subProperties.put(SWITCH_PROGRAM_POSITIVE, posName);\n-                            subProperties.put(SWITCH_PROGRAM_NEGATIVE, negName);\n-                            logger.debug(\"enum thingUID {} bridgeUID {} withLabel {} root {}\", thingUID, bridgeUID, key,\n-                                    root);\n-                            DiscoveryResult subDiscoveryResult = DiscoveryResultBuilder.create(subThingUID)\n-                                    .withBridge(bridgeUID).withLabel(key + \" switch program\")\n-                                    .withProperties(subProperties).build();\n-                            thingDiscovered(subDiscoveryResult);\n+                            KM200SwitchProgramServiceHandler valPara = (KM200SwitchProgramServiceHandler) switchObject.serviceTreeMap\n+                                    .entrySet().iterator().next().getValue().getValueParameter();\n+                            if (null != valPara) {\n+                                String posName = valPara.getPositiveSwitch();\n+                                String negName = valPara.getNegativeSwitch();\n+                                if (null == posName || null == negName) {\n+                                    logger.error(\"Service switches not found!\");", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNDM3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410024376", "bodyText": "Ok, changed.", "author": "Markinus", "createdAt": "2020-04-17T06:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4OTczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MDIzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409790235", "body": "```suggestion\r\n                    logger.warn(\"Serviceobject does not exist\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.warn(\"Serviceobject is not existing\");\n          \n          \n            \n                                logger.warn(\"Serviceobject does not exist\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    logger<span class=\"pl-k\">.</span>warn(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Serviceobject <span class=\"x x-first x-last\">is</span> not <span class=\"x x-first x-last\">existing</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    logger<span class=\"pl-k\">.</span>warn(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Serviceobject <span class=\"x x-first x-last\">does</span> not <span class=\"x x-first x-last\">exist</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-04-16T19:15:22Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200DataHandler.java", "diffHunk": "@@ -65,60 +70,82 @@ public State getProvidersState(String service, String itemType, Map<String, Stri\n             }\n             if (remoteDevice.containsService(service)) {\n                 object = remoteDevice.getServiceObject(service);\n+                if (null == object) {\n+                    logger.warn(\"Serviceobject is not existing\");", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNDM0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410024348", "bodyText": "Ok, changed.", "author": "Markinus", "createdAt": "2020-04-17T06:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MDIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MDU5OA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409790598", "body": "don't log error", "bodyText": "don't log error", "bodyHTML": "<p dir=\"auto\">don't log error</p>", "author": "cpmeister", "createdAt": "2020-04-16T19:16:02Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200DataHandler.java", "diffHunk": "@@ -65,60 +70,82 @@ public State getProvidersState(String service, String itemType, Map<String, Stri\n             }\n             if (remoteDevice.containsService(service)) {\n                 object = remoteDevice.getServiceObject(service);\n+                if (null == object) {\n+                    logger.warn(\"Serviceobject is not existing\");\n+                    return null;\n+                }\n                 if (object.getReadable() == 0) {\n                     logger.warn(\"Service is listed as protected (reading is not possible): {}\", service);\n                     return null;\n                 }\n                 type = object.getServiceType();\n+                logger.debug(\"Type: {}\", type);\n             } else {\n                 logger.warn(\"Service is not in the determined device service list: {}\", service);\n                 return null;\n             }\n-            /* For using of virtual services only one receive on the parent service is needed */\n-            if (!object.getUpdated()\n-                    || (object.getVirtual() == 1 && !remoteDevice.getServiceObject(object.getParent()).getUpdated())) {\n-                if (object.getVirtual() == 1) {\n-                    logger.debug(\"Receive data for an virtual object\");\n-                    /* If it's a virtual service then receive the data from parent service */\n-                    jsonNode = remoteDevice.getServiceNode(object.getParent());\n-                } else {\n+            /* Needs to be updated? */\n+            if (object.getVirtual() == 0) {\n+                if (!object.getUpdated()) {\n                     logger.debug(\"Receive data\");\n                     jsonNode = remoteDevice.getServiceNode(service);\n-                }\n-\n-                if (jsonNode == null || jsonNode.isJsonNull()) {\n-                    logger.error(\"Communication is not possible!\");\n-                    return null;\n-                }\n-                if (object.getVirtual() == 1) {\n-                    remoteDevice.getServiceObject(object.getParent()).setJSONData(jsonNode);\n-                    remoteDevice.getServiceObject(object.getParent()).setUpdated(true);\n-                } else {\n+                    if (jsonNode == null || jsonNode.isJsonNull()) {\n+                        logger.error(\"Communication is not possible!\");", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNDMzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410024337", "bodyText": "Ok, changed.", "author": "Markinus", "createdAt": "2020-04-17T06:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MDU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MTYxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409791611", "body": "This is safer.\r\n```suggestion\r\n                            state = new DecimalType(((Number) bdVal).doubleValue());\r\n```", "bodyText": "This is safer.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        state = new DecimalType(((BigDecimal) bdVal).doubleValue());\n          \n          \n            \n                                        state = new DecimalType(((Number) bdVal).doubleValue());", "bodyHTML": "<p dir=\"auto\">This is safer.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            state <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DecimalType</span>(((<span class=\"pl-smi x x-first x-last\">BigDecimal</span>) bdVal)<span class=\"pl-k\">.</span>doubleValue());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            state <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DecimalType</span>(((<span class=\"pl-smi x x-first x-last\">Number</span>) bdVal)<span class=\"pl-k\">.</span>doubleValue());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-04-16T19:17:53Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200DataHandler.java", "diffHunk": "@@ -190,9 +217,9 @@ public State parseJSONData(JsonObject nodeRoot, String type, String service, Str\n                     /* NumberItem Binding */\n                     if (\"Number\".equals(itemType)) {\n                         if (bdVal instanceof Double) { // Checking whether\n-                            state = new DecimalType(((Double) bdVal).floatValue());\n+                            state = new DecimalType((Double) bdVal);\n                         } else {\n-                            state = new DecimalType(((BigDecimal) bdVal).floatValue());\n+                            state = new DecimalType(((BigDecimal) bdVal).doubleValue());", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNDMwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410024309", "bodyText": "Ok, changed.", "author": "Markinus", "createdAt": "2020-04-17T06:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MTYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MzMwOA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r409793308", "body": "Should probably make all these string literals constants", "bodyText": "Should probably make all these string literals constants", "bodyHTML": "<p dir=\"auto\">Should probably make all these string literals constants</p>", "author": "cpmeister", "createdAt": "2020-04-16T19:20:49Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200DataHandler.java", "diffHunk": "@@ -290,142 +335,137 @@ public State parseJSONData(JsonObject nodeRoot, String type, String service, Str\n     /**\n      * This function checks the virtual state of a service\n      */\n-    private State getVirtualState(KM200ServiceObject object, String itemType, String service) {\n+    private @Nullable State getVirtualState(KM200ServiceObject object, String itemType, String service) {\n         State state = null;\n         String type = object.getServiceType();\n-        logger.debug(\"Check virtual state of: {} type: {} item: {}\", service, type, itemType);\n-        switch (type) {\n-            case \"switchProgram\":\n-                KM200SwitchProgramServiceHandler sPService = ((KM200SwitchProgramServiceHandler) remoteDevice\n-                        .getServiceObject(object.getParent()).getValueParameter());\n-                String[] servicePath = service.split(\"/\");\n-                String virtService = servicePath[servicePath.length - 1];\n-                if (\"weekday\".equals(virtService)) {\n-                    if (\"String\".equals(itemType)) {\n-                        String val = sPService.getActiveDay();\n-                        if (val == null) {\n-                            return null;\n-                        }\n-                        state = new StringType(val);\n-                    } else {\n-                        logger.warn(\"Bindingtype not supported for day service: {}\", itemType.getClass());\n-                        return null;\n-                    }\n-                } else if (\"nbrCycles\".equals(virtService)) {\n-                    if (\"Number\".equals(itemType)) {\n-                        Integer val = sPService.getNbrCycles();\n-                        if (val == null) {\n-                            return null;\n-                        }\n-                        state = new DecimalType(val);\n-                    } else {\n-                        logger.warn(\"Bindingtype not supported for nbrCycles service: {}\", itemType.getClass());\n-                        return null;\n-                    }\n-                } else if (\"cycle\".equals(virtService)) {\n-                    if (\"Number\".equals(itemType)) {\n-                        Integer val = sPService.getActiveCycle();\n-                        if (val == null) {\n-                            return null;\n-                        }\n-                        state = new DecimalType(val);\n-                    } else {\n-                        logger.warn(\"Bindingtype not supported for cycle service: {}\", itemType.getClass());\n-                        return null;\n-                    }\n-                } else if (virtService.equals(sPService.getPositiveSwitch())) {\n-                    if (\"Number\".equals(itemType)) {\n-                        Integer val = sPService.getActivePositiveSwitch();\n-                        if (val == null) {\n-                            return null;\n-                        }\n-                        state = new DecimalType(val);\n-                    } else if (\"DateTime\".equals(itemType)) {\n-                        Integer val = sPService.getActivePositiveSwitch();\n-                        if (val == null) {\n-                            return null;\n-                        }\n-                        Calendar rightNow = Calendar.getInstance();\n-                        Integer hour = val % 60;\n-                        Integer minute = val - (hour * 60);\n-                        rightNow.set(Calendar.HOUR_OF_DAY, hour);\n-                        rightNow.set(Calendar.MINUTE, minute);\n-                        state = new DateTimeType(rightNow);\n-                    } else {\n-                        logger.warn(\"Bindingtype not supported for cycle service: {}\", itemType);\n-                        return null;\n-                    }\n-                } else if (virtService.equals(sPService.getNegativeSwitch())) {\n-                    if (\"Number\".equals(itemType)) {\n-                        Integer val = sPService.getActiveNegativeSwitch();\n-                        if (val == null) {\n-                            return null;\n-                        }\n-                        state = new DecimalType(val);\n-                    } else if (\"DateTime\".equals(itemType)) {\n-                        Integer val = sPService.getActiveNegativeSwitch();\n-                        if (val == null) {\n-                            return null;\n-                        }\n-                        Calendar rightNow = Calendar.getInstance();\n-                        Integer hour = val % 60;\n-                        Integer minute = val - (hour * 60);\n-                        rightNow.set(Calendar.HOUR_OF_DAY, hour);\n-                        rightNow.set(Calendar.MINUTE, minute);\n-                        state = new DateTimeType(rightNow);\n-                    } else {\n-                        logger.warn(\"Bindingtype not supported for cycle service: {}\", itemType.getClass());\n-                        return null;\n-                    }\n-                }\n-                break;\n-            case \"errorList\":\n-                KM200ErrorServiceHandler eService = ((KM200ErrorServiceHandler) remoteDevice\n-                        .getServiceObject(object.getParent()).getValueParameter());\n-                String[] nServicePath = service.split(\"/\");\n-                String nVirtService = nServicePath[nServicePath.length - 1];\n-                /* Go through the parameters and read the values */\n-                switch (nVirtService) {\n-                    case \"nbrErrors\":\n-                        if (\"Number\".equals(itemType)) {\n-                            Integer val = eService.getNbrErrors();\n-                            state = new DecimalType(val);\n-                        } else {\n-                            logger.warn(\"Bindingtype not supported for error number service: {}\", itemType.getClass());\n-                            return null;\n-                        }\n-                        break;\n-                    case \"error\":\n-                        if (\"Number\".equals(itemType)) {\n-                            Integer val = eService.getActiveError();\n-                            state = new DecimalType(val);\n+        String parent = object.getParent();\n+        if (null != parent) {\n+            KM200ServiceObject objParent = remoteDevice.getServiceObject(parent);\n+            if (null != objParent) {\n+                logger.debug(\"Check virtual state of: {} type: {} item: {}\", service, type, itemType);\n+                switch (type) {\n+                    case \"switchProgram\":\n+                        KM200SwitchProgramServiceHandler sPService = ((KM200SwitchProgramServiceHandler) objParent\n+                                .getValueParameter());\n+                        if (null != sPService) {\n+                            String[] servicePath = service.split(\"/\");\n+                            String virtService = servicePath[servicePath.length - 1];\n+                            if (\"weekday\".equals(virtService)) {\n+                                if (\"String\".equals(itemType)) {\n+                                    String actDay = sPService.getActiveDay();\n+                                    state = new StringType(actDay);\n+                                } else {\n+                                    logger.warn(\"Bindingtype not supported for day service: {}\", itemType.getClass());\n+                                    return null;\n+                                }\n+                            } else if (\"nbrCycles\".equals(virtService)) {\n+                                if (\"Number\".equals(itemType)) {\n+                                    Integer nbrCycles = sPService.getNbrCycles();\n+                                    state = new DecimalType(nbrCycles);\n+                                } else {\n+                                    logger.warn(\"Bindingtype not supported for nbrCycles service: {}\",\n+                                            itemType.getClass());\n+                                    return null;\n+                                }\n+                            } else if (\"cycle\".equals(virtService)) {\n+                                if (\"Number\".equals(itemType)) {\n+                                    Integer cycle = sPService.getActiveCycle();\n+                                    state = new DecimalType(cycle);\n+                                } else {\n+                                    logger.warn(\"Bindingtype not supported for cycle service: {}\", itemType.getClass());\n+                                    return null;\n+                                }\n+                            } else if (virtService.equals(sPService.getPositiveSwitch())) {\n+                                if (\"Number\".equals(itemType)) {", "originalCommit": "6ff46638cc3db2f10d49f73cbbe3f370e37f4ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzMDA1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410330059", "bodyText": "I changed it. It is using now constants from the CoreItemFactory class.", "author": "Markinus", "createdAt": "2020-04-17T16:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MzMwOA=="}], "type": "inlineReview"}, {"oid": "85027749e66a2abdfc145b00e2930d2a32881495", "url": "https://github.com/openhab/openhab-addons/commit/85027749e66a2abdfc145b00e2930d2a32881495", "message": "Added constants for data types\nUsing constants for item types\nSmall changes and bugfixes\n\nSigned-off-by: Markus Eckhardt <github@familie-eckhardt.eu>", "committedDate": "2020-04-17T16:42:43Z", "type": "commit"}, {"oid": "85027749e66a2abdfc145b00e2930d2a32881495", "url": "https://github.com/openhab/openhab-addons/commit/85027749e66a2abdfc145b00e2930d2a32881495", "message": "Added constants for data types\nUsing constants for item types\nSmall changes and bugfixes\n\nSigned-off-by: Markus Eckhardt <github@familie-eckhardt.eu>", "committedDate": "2020-04-17T16:42:43Z", "type": "forcePushed"}, {"oid": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "url": "https://github.com/openhab/openhab-addons/commit/a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "message": "Changed the httpClientFactory interface from set/uset to constructor.\n\nSigned-off-by: Markus Eckhardt <github@familie-eckhardt.eu>", "committedDate": "2020-04-17T17:58:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwNDY0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410404645", "body": "```suggestion\r\n    private final HttpClient httpClient;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private HttpClient httpClient;\n          \n          \n            \n                private final HttpClient httpClient;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">HttpClient</span> httpClient;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">HttpClient</span> httpClient;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-04-17T18:41:24Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200HandlerFactory.java", "diffHunk": "@@ -57,13 +61,18 @@\n \n     private final Logger logger = LoggerFactory.getLogger(KM200HandlerFactory.class);\n \n-    private KM200ChannelTypeProvider channelTypeProvider;\n+    private @Nullable KM200ChannelTypeProvider channelTypeProvider;\n \n     /**\n      * shared instance of HTTP client for asynchronous calls\n      */\n     private HttpClient httpClient;", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0NzAzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410647039", "bodyText": "Ok, changed.", "author": "Markinus", "createdAt": "2020-04-18T05:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwNDY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwNDg1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410404852", "body": "You can get this one in the constructor too", "bodyText": "You can get this one in the constructor too", "bodyHTML": "<p dir=\"auto\">You can get this one in the constructor too</p>", "author": "cpmeister", "createdAt": "2020-04-17T18:41:55Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200HandlerFactory.java", "diffHunk": "@@ -57,13 +61,18 @@\n \n     private final Logger logger = LoggerFactory.getLogger(KM200HandlerFactory.class);\n \n-    private KM200ChannelTypeProvider channelTypeProvider;\n+    private @Nullable KM200ChannelTypeProvider channelTypeProvider;", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0NzA3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410647076", "bodyText": "Ok, changed.", "author": "Markinus", "createdAt": "2020-04-18T05:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwNDg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMDkyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410410927", "body": "Any time you create your own threadpool in a binding you should make sure that theadpool gives the threads names that identify this binding as the creator. Also make sure that the created threads are daemon.\r\nUsing a `NamedThreadFactory` can accomplish this just make sure to replace `...` with the prefix for your thread names.\r\n```suggestion\r\n        executor = Executors.newScheduledThreadPool(2, new NamedThreadFactory(...,true));\r\n```\r\n\r\nThat said, I do have to ask why aren't you using the `scheduler` instead?", "bodyText": "Any time you create your own threadpool in a binding you should make sure that theadpool gives the threads names that identify this binding as the creator. Also make sure that the created threads are daemon.\nUsing a NamedThreadFactory can accomplish this just make sure to replace ... with the prefix for your thread names.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    executor = Executors.newScheduledThreadPool(2);\n          \n          \n            \n                    executor = Executors.newScheduledThreadPool(2, new NamedThreadFactory(...,true));\n          \n      \n    \n    \n  \n\nThat said, I do have to ask why aren't you using the scheduler instead?", "bodyHTML": "<p dir=\"auto\">Any time you create your own threadpool in a binding you should make sure that theadpool gives the threads names that identify this binding as the creator. Also make sure that the created threads are daemon.<br>\nUsing a <code>NamedThreadFactory</code> can accomplish this just make sure to replace <code>...</code> with the prefix for your thread names.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        executor <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Executors</span><span class=\"pl-k\">.</span>newScheduledThreadPool(<span class=\"pl-c1\">2</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        executor <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Executors</span><span class=\"pl-k\">.</span>newScheduledThreadPool(<span class=\"pl-c1\">2</span><span class=\"x x-first\">, </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">NamedThreadFactory</span><span class=\"x\">(</span><span class=\"pl-c1 x\">...</span><span class=\"x\">,</span><span class=\"pl-c1 x\">true</span><span class=\"x x-last\">)</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">That said, I do have to ask why aren't you using the <code>scheduler</code> instead?</p>", "author": "cpmeister", "createdAt": "2020-04-17T18:53:55Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200GatewayHandler.java", "diffHunk": "@@ -76,37 +79,37 @@\n     /**\n      * shared instance of HTTP client for (a)synchronous calls\n      */\n-    private HttpClient httpClient;\n-\n-    private ScheduledExecutorService executor = Executors.newScheduledThreadPool(2);\n+    private ScheduledExecutorService executor;\n     private final KM200Device remoteDevice;\n     private final KM200DataHandler dataHandler;\n     private int readDelay;\n     private int refreshInterval;\n \n     public KM200GatewayHandler(Bridge bridge, HttpClient httpClient) {\n         super(bridge);\n-        this.httpClient = httpClient;\n         refreshInterval = 120;\n         readDelay = 100;\n         updateStatus(ThingStatus.UNINITIALIZED, ThingStatusDetail.CONFIGURATION_PENDING);\n         remoteDevice = new KM200Device(httpClient);\n         dataHandler = new KM200DataHandler(remoteDevice);\n+        executor = Executors.newScheduledThreadPool(2);", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1NjgwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410656809", "bodyText": "I tested both for this binding in the past. The threadpool solution was better for this case. I will add the prefix.", "author": "Markinus", "createdAt": "2020-04-18T06:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMDkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMTAwNw==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410411007", "body": "see above", "bodyText": "see above", "bodyHTML": "<p dir=\"auto\">see above</p>", "author": "cpmeister", "createdAt": "2020-04-17T18:54:06Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200GatewayHandler.java", "diffHunk": "@@ -122,10 +125,11 @@ public void initialize() {\n                 return;\n             }\n \n-            if (getDevice() != null) {\n-                logger.debug(\"Starting send and receive executor\");\n-                SendKM200Runnable sendRunnable = new SendKM200Runnable(sendMap, getDevice());\n-                GetKM200Runnable receivingRunnable = new GetKM200Runnable(sendMap, this, getDevice());\n+            logger.debug(\"Starting send and receive executor\");\n+            SendKM200Runnable sendRunnable = new SendKM200Runnable(sendMap, getDevice());\n+            GetKM200Runnable receivingRunnable = new GetKM200Runnable(sendMap, this, getDevice());\n+            if (!executor.isTerminated()) {\n+                executor = Executors.newScheduledThreadPool(2);", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1ODE0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410658146", "bodyText": "prefix added.", "author": "Markinus", "createdAt": "2020-04-18T06:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMTAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMTcwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410411700", "body": "please remove all the blank lines after your break statements.", "bodyText": "please remove all the blank lines after your break statements.", "bodyHTML": "<p dir=\"auto\">please remove all the blank lines after your break statements.</p>", "author": "cpmeister", "createdAt": "2020-04-17T18:55:37Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200ServiceHandler.java", "diffHunk": "@@ -91,142 +96,143 @@ public void createServiceObject() {\n             recordable = val;\n         }\n         logger.debug(\"Typ: {}\", type);\n-        serviceObject = new KM200ServiceObject(id, type, readable, writeable, recordable, 0, null, parent);\n+        serviceObject = new KM200ServiceObject(id, type, readable, writeable, recordable, 0, null);\n         serviceObject.setJSONData(nodeRoot);\n+        return serviceObject;\n     }\n \n     /**\n      * This function determines the service's capabilities\n      */\n-    public void determineServiceObject() {\n+    public void determineServiceObject(KM200ServiceObject serviceObject, JsonObject nodeRoot) {\n         /* Check the service features and set the flags */\n         String id = null;\n         Object valObject = null;\n         JsonObject dataObject = serviceObject.getJSONData();\n-        switch (serviceObject.getServiceType()) {\n-            case \"stringValue\": /*\n-                                 * Check whether the type is a single value containing a\n-                                 * string value\n-                                 */\n-                logger.debug(\"initDevice: type string value: {}\", dataObject);\n-                valObject = new String(nodeRoot.get(\"value\").getAsString());\n-                serviceObject.setValue(valObject);\n-                if (nodeRoot.has(\"allowedValues\")) {\n-                    List<String> valParas = new ArrayList<>();\n-                    JsonArray paras = nodeRoot.get(\"allowedValues\").getAsJsonArray();\n-                    for (int i = 0; i < paras.size(); i++) {\n-                        String subJSON = paras.get(i).getAsString();\n-                        valParas.add(subJSON);\n-                    }\n-                    serviceObject.setValueParameter(valParas);\n-                }\n-                break;\n-\n-            case \"floatValue\": /* Check whether the type is a single value containing a float value */\n-                logger.debug(\"initDevice: type float value: {}\", dataObject);\n-                valObject = nodeRoot.get(\"value\");\n-                try {\n-                    valObject = nodeRoot.get(\"value\").getAsBigDecimal();\n+        if (null != dataObject) {\n+            switch (serviceObject.getServiceType()) {\n+                case DATA_TYPE_STRING_VALUE: /*\n+                                              * Check whether the type is a single value containing a\n+                                              * string value\n+                                              */\n+                    logger.debug(\"initDevice: type string value: {}\", dataObject);\n+                    valObject = new String(nodeRoot.get(\"value\").getAsString());\n                     serviceObject.setValue(valObject);\n-                } catch (NumberFormatException e) {\n-                    logger.debug(\"float value is a string: {}\", valObject);\n-                    Double tmpObj = Double.NaN;\n-                    serviceObject.setValue(tmpObj);\n-                }\n-                if (nodeRoot.has(\"minValue\") && nodeRoot.has(\"maxValue\")) {\n-                    List<Object> valParas = new ArrayList<>();\n-                    valParas.add(nodeRoot.get(\"minValue\").getAsBigDecimal());\n-                    valParas.add(nodeRoot.get(\"maxValue\").getAsBigDecimal());\n-                    if (nodeRoot.has(\"unitOfMeasure\")) {\n-                        valParas.add(nodeRoot.get(\"unitOfMeasure\").getAsString());\n+                    if (nodeRoot.has(\"allowedValues\")) {\n+                        List<String> valParas = new ArrayList<>();\n+                        JsonArray paras = nodeRoot.get(\"allowedValues\").getAsJsonArray();\n+                        for (int i = 0; i < paras.size(); i++) {\n+                            String subJSON = paras.get(i).getAsString();\n+                            valParas.add(subJSON);\n+                        }\n+                        serviceObject.setValueParameter(valParas);\n+                    }\n+                    break;\n+\n+                case DATA_TYPE_FLOAT_VALUE: /* Check whether the type is a single value containing a float value */\n+                    logger.debug(\"initDevice: type float value: {}\", dataObject);\n+                    valObject = nodeRoot.get(\"value\");\n+                    try {\n+                        valObject = nodeRoot.get(\"value\").getAsBigDecimal();\n+                        serviceObject.setValue(valObject);\n+                    } catch (NumberFormatException e) {\n+                        logger.debug(\"float value is a string: {}\", valObject);\n+                        Double tmpObj = Double.NaN;\n+                        serviceObject.setValue(tmpObj);\n+                    }\n+                    if (nodeRoot.has(\"minValue\") && nodeRoot.has(\"maxValue\")) {\n+                        List<Object> valParas = new ArrayList<>();\n+                        valParas.add(nodeRoot.get(\"minValue\").getAsBigDecimal());\n+                        valParas.add(nodeRoot.get(\"maxValue\").getAsBigDecimal());\n+                        if (nodeRoot.has(\"unitOfMeasure\")) {\n+                            valParas.add(nodeRoot.get(\"unitOfMeasure\").getAsString());\n+                        }\n+                        serviceObject.setValueParameter(valParas);\n                     }\n-                    serviceObject.setValueParameter(valParas);\n-                }\n-                break;\n-\n-            case \"switchProgram\": /* Check whether the type is a switchProgram */\n-                logger.debug(\"initDevice: type switchProgram {}\", dataObject);\n-                KM200SwitchProgramServiceHandler sPService = new KM200SwitchProgramServiceHandler();\n-                sPService.setMaxNbOfSwitchPoints(nodeRoot.get(\"maxNbOfSwitchPoints\").getAsInt());\n-                sPService.setMaxNbOfSwitchPointsPerDay(nodeRoot.get(\"maxNbOfSwitchPointsPerDay\").getAsInt());\n-                sPService.setSwitchPointTimeRaster(nodeRoot.get(\"switchPointTimeRaster\").getAsInt());\n-                JsonObject propObject = nodeRoot.get(\"setpointProperty\").getAsJsonObject();\n-                sPService.setSetpointProperty(propObject.get(\"id\").getAsString());\n-                serviceObject.setValueParameter(sPService);\n-                serviceObject.setJSONData(dataObject);\n-                remoteDevice.virtualList.add(serviceObject);\n-                break;\n-\n-            case \"errorList\": /* Check whether the type is a errorList */\n-                logger.debug(\"initDevice: type errorList: {}\", dataObject);\n-                KM200ErrorServiceHandler eService = new KM200ErrorServiceHandler();\n-                eService.updateErrors(nodeRoot);\n-                serviceObject.setValueParameter(eService);\n-                serviceObject.setJSONData(dataObject);\n-                remoteDevice.virtualList.add(serviceObject);\n-                break;\n-\n-            case \"refEnum\": /* Check whether the type is a refEnum */\n-                logger.debug(\"initDevice: type refEnum: {}\", dataObject);\n-                JsonArray refers = nodeRoot.get(\"references\").getAsJsonArray();\n-                for (int i = 0; i < refers.size(); i++) {\n-                    JsonObject subJSON = refers.get(i).getAsJsonObject();\n-                    id = subJSON.get(\"id\").getAsString();\n-                    KM200ServiceHandler serviceHandler = new KM200ServiceHandler(id, serviceObject, remoteDevice);\n-                    serviceHandler.initObject();\n-\n-                }\n-                break;\n-\n-            case \"moduleList\": /* Check whether the type is a moduleList */\n-                logger.debug(\"initDevice: type moduleList: {}\", dataObject);\n-                JsonArray vals = nodeRoot.get(\"values\").getAsJsonArray();\n-                for (int i = 0; i < vals.size(); i++) {\n-                    JsonObject subJSON = vals.get(i).getAsJsonObject();\n-                    id = subJSON.get(\"id\").getAsString();\n-                    KM200ServiceHandler serviceHandler = new KM200ServiceHandler(id, serviceObject, remoteDevice);\n-                    serviceHandler.initObject();\n-                }\n-                break;\n-\n-            case \"yRecording\": /* Check whether the type is a yRecording */\n-                logger.debug(\"initDevice: type yRecording: {}\", dataObject);\n-                /* have to be completed */\n-                break;\n-\n-            case \"systeminfo\": /* Check whether the type is a systeminfo */\n-                logger.debug(\"initDevice: type systeminfo: {}\", dataObject);\n-                JsonArray sInfo = nodeRoot.get(\"values\").getAsJsonArray();\n-                serviceObject.setValue(sInfo);\n-                /* have to be completed */\n-                break;\n-            case \"arrayData\":\n-                logger.debug(\"initDevice: type arrayData: {}\", dataObject);\n-                serviceObject.setJSONData(dataObject);\n-                /* have to be completed */\n-                break;\n-\n-            case \"eMonitoringList\":\n-                logger.debug(\"initDevice: type eMonitoringList: {}\", dataObject);\n-                serviceObject.setJSONData(dataObject);\n-                /* have to be completed */\n-                break;\n-\n-            case \"$$PROTECTED$$\":\n-                logger.debug(\"initDevice: readonly\");\n-                serviceObject.setJSONData(dataObject);\n-                break;\n-\n-            default: /* Unknown type */\n-                logger.info(\"initDevice: type: {} unknown for service: {} Data: {}\", serviceObject.getServiceType(),\n-                        service, dataObject);\n+                    break;\n+\n+                case DATA_TYPE_SWITCH_PROGRAM: /* Check whether the type is a switchProgram */\n+                    logger.debug(\"initDevice: type switchProgram {}\", dataObject);\n+                    KM200SwitchProgramServiceHandler sPService = new KM200SwitchProgramServiceHandler();\n+                    sPService.setMaxNbOfSwitchPoints(nodeRoot.get(\"maxNbOfSwitchPoints\").getAsInt());\n+                    sPService.setMaxNbOfSwitchPointsPerDay(nodeRoot.get(\"maxNbOfSwitchPointsPerDay\").getAsInt());\n+                    sPService.setSwitchPointTimeRaster(nodeRoot.get(\"switchPointTimeRaster\").getAsInt());\n+                    JsonObject propObject = nodeRoot.get(\"setpointProperty\").getAsJsonObject();\n+                    sPService.setSetpointProperty(propObject.get(\"id\").getAsString());\n+                    serviceObject.setValueParameter(sPService);\n+                    serviceObject.setJSONData(dataObject);\n+                    remoteDevice.virtualList.add(serviceObject);\n+                    break;\n+\n+                case DATA_TYPE_ERROR_LIST: /* Check whether the type is a errorList */\n+                    logger.debug(\"initDevice: type errorList: {}\", dataObject);\n+                    KM200ErrorServiceHandler eService = new KM200ErrorServiceHandler();\n+                    eService.updateErrors(nodeRoot);\n+                    serviceObject.setValueParameter(eService);\n+                    serviceObject.setJSONData(dataObject);\n+                    remoteDevice.virtualList.add(serviceObject);\n+                    break;\n+\n+                case DATA_TYPE_REF_ENUM: /* Check whether the type is a refEnum */\n+                    logger.debug(\"initDevice: type refEnum: {}\", dataObject);\n+                    JsonArray refers = nodeRoot.get(\"references\").getAsJsonArray();\n+                    for (int i = 0; i < refers.size(); i++) {\n+                        JsonObject subJSON = refers.get(i).getAsJsonObject();\n+                        id = subJSON.get(\"id\").getAsString();\n+                        KM200ServiceHandler serviceHandler = new KM200ServiceHandler(id, serviceObject, remoteDevice);\n+                        serviceHandler.initObject();\n+                    }\n+                    break;\n+", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0ODc0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410648747", "bodyText": "Ok, changed.", "author": "Markinus", "createdAt": "2020-04-18T05:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMTcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMjgwNA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410412804", "body": "Why is a static field getting populated by a constructor? Please do this in a `static{...}` block instead.", "bodyText": "Why is a static field getting populated by a constructor? Please do this in a static{...} block instead.", "bodyHTML": "<p dir=\"auto\">Why is a static field getting populated by a constructor? Please do this in a <code>static{...}</code> block instead.</p>", "author": "cpmeister", "createdAt": "2020-04-17T18:57:54Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200SwitchProgramServiceHandler.java", "diffHunk": "@@ -57,32 +60,29 @@\n     private Integer activeCycle = 1;\n \n     /* Night- and daylist for all weekdays */\n-    public Map<String, Map<String, List<Integer>>> switchMap;\n+    public Map<String, Map<String, List<Integer>>> switchMap = new HashMap<>();\n \n     /* List with all days */\n-    private List<String> days;\n-    public static List<StateOption> daysList;\n+    private List<String> days = new ArrayList<>();\n+    public static List<StateOption> daysList = new ArrayList<>();", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1NjYxNg==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410656616", "bodyText": "Ohh, yes, you're right. I fixed it.", "author": "Markinus", "createdAt": "2020-04-18T06:30:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMjgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMzk1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410413953", "body": "Once you make the `KM200ChannelTypeProvider` non-null and final in the ThingHandlerFactory then you should be able to make the non-null again.", "bodyText": "Once you make the KM200ChannelTypeProvider non-null and final in the ThingHandlerFactory then you should be able to make the non-null again.", "bodyHTML": "<p dir=\"auto\">Once you make the <code>KM200ChannelTypeProvider</code> non-null and final in the ThingHandlerFactory then you should be able to make the non-null again.</p>", "author": "cpmeister", "createdAt": "2020-04-17T19:00:15Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200ThingHandler.java", "diffHunk": "@@ -65,28 +67,22 @@\n  *\n  * @author Markus Eckhardt - Initial contribution\n  */\n+@NonNullByDefault\n public class KM200ThingHandler extends BaseThingHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(KM200ThingHandler.class);\n-    private static URI configDescriptionUriChannel;\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n             .of(THING_TYPE_DHW_CIRCUIT, THING_TYPE_HEATING_CIRCUIT, THING_TYPE_SOLAR_CIRCUIT, THING_TYPE_HEAT_SOURCE,\n                     THING_TYPE_SYSTEM_APPLIANCE, THING_TYPE_SYSTEM_HOLIDAYMODES, THING_TYPE_SYSTEM_SENSOR,\n                     THING_TYPE_GATEWAY, THING_TYPE_NOTIFICATION, THING_TYPE_SYSTEM, THING_TYPE_SYSTEMSTATES)\n             .collect(Collectors.toSet()));\n \n-    private KM200ChannelTypeProvider channelTypeProvider;\n+    private @Nullable KM200ChannelTypeProvider channelTypeProvider;\n \n-    public KM200ThingHandler(Thing thing, KM200ChannelTypeProvider channelTypeProvider) {\n+    public KM200ThingHandler(Thing thing, @Nullable KM200ChannelTypeProvider channelTypeProvider) {", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0OTAwMw==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410649003", "bodyText": "Ok, changed.", "author": "Markinus", "createdAt": "2020-04-18T05:57:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMzk1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNDgxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410414817", "body": "Please don't log as error", "bodyText": "Please don't log as error", "bodyHTML": "<p dir=\"auto\">Please don't log as error</p>", "author": "cpmeister", "createdAt": "2020-04-17T19:02:12Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200ThingHandler.java", "diffHunk": "@@ -233,22 +256,34 @@ public void initialize() {\n                         new ChannelUID(thing.getUID(), \"weekday\"), service + \"/\" + \"weekday\", CoreItemFactory.STRING,\n                         currentPathName, \"Current selected weekday for cycle selection\", \"Weekday\", true, true, state,\n                         \"\");\n-                subChannels.add(newChannel);\n+                if (null == newChannel) {\n+                    logger.error(\"Creation of the channel {} was niot possible\", thing.getUID());", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0OTIwNA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410649204", "bodyText": "I rechecked all log entries now.", "author": "Markinus", "createdAt": "2020-04-18T05:58:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNDgxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNDkyNg==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410414926", "body": "don't log as error", "bodyText": "don't log as error", "bodyHTML": "<p dir=\"auto\">don't log as error</p>", "author": "cpmeister", "createdAt": "2020-04-17T19:02:27Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200ThingHandler.java", "diffHunk": "@@ -233,22 +256,34 @@ public void initialize() {\n                         new ChannelUID(thing.getUID(), \"weekday\"), service + \"/\" + \"weekday\", CoreItemFactory.STRING,\n                         currentPathName, \"Current selected weekday for cycle selection\", \"Weekday\", true, true, state,\n                         \"\");\n-                subChannels.add(newChannel);\n+                if (null == newChannel) {\n+                    logger.error(\"Creation of the channel {} was niot possible\", thing.getUID());\n+                } else {\n+                    subChannels.add(newChannel);\n+                }\n \n                 state = StateDescriptionFragmentBuilder.create().withMinimum(BigDecimal.ZERO).withStep(BigDecimal.ONE)\n                         .withPattern(\"%d\").withReadOnly(true).build();\n                 newChannel = createChannel(new ChannelTypeUID(thing.getUID().getAsString() + \":\" + \"nbrCycles\"),\n                         new ChannelUID(thing.getUID(), \"nbrCycles\"), service + \"/\" + \"nbrCycles\",\n                         CoreItemFactory.NUMBER, currentPathName, \"Number of switching cycles\", \"Number\", true, true,\n                         state, \"\");\n-                subChannels.add(newChannel);\n+                if (null == newChannel) {\n+                    logger.error(\"Creation of the channel {} was niot possible\", thing.getUID());\n+                } else {\n+                    subChannels.add(newChannel);\n+                }\n \n                 state = StateDescriptionFragmentBuilder.create().withMinimum(BigDecimal.ZERO).withStep(BigDecimal.ONE)\n                         .withPattern(\"%d\").build();\n                 newChannel = createChannel(new ChannelTypeUID(thing.getUID().getAsString() + \":\" + \"cycle\"),\n                         new ChannelUID(thing.getUID(), \"cycle\"), service + \"/\" + \"cycle\", CoreItemFactory.NUMBER,\n                         currentPathName, \"Current selected cycle\", \"Cycle\", true, true, state, \"\");\n-                subChannels.add(newChannel);\n+                if (null == newChannel) {\n+                    logger.error(\"Creation of the channel {} was niot possible\", thing.getUID());", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0OTIzMA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410649230", "bodyText": "ok", "author": "Markinus", "createdAt": "2020-04-18T05:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNDkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNDk3OA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410414978", "body": "here too", "bodyText": "here too", "bodyHTML": "<p dir=\"auto\">here too</p>", "author": "cpmeister", "createdAt": "2020-04-17T19:02:33Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200ThingHandler.java", "diffHunk": "@@ -257,14 +292,22 @@ public void initialize() {\n                         new ChannelUID(thing.getUID(), posName), service + \"/\" + posName, CoreItemFactory.NUMBER,\n                         currentPathName, \"Positive switch of the cycle, like 'Day' 'On'\", posName, true, true, state,\n                         \"minutes\");\n-                subChannels.add(newChannel);\n+                if (null == newChannel) {\n+                    logger.error(\"Creation of the channel {} was niot possible\", thing.getUID());\n+                } else {\n+                    subChannels.add(newChannel);\n+                }\n \n                 String negName = thing.getProperties().get(SWITCH_PROGRAM_NEGATIVE);\n                 newChannel = createChannel(new ChannelTypeUID(thing.getUID().getAsString() + \":\" + negName),\n                         new ChannelUID(thing.getUID(), negName), service + \"/\" + negName, CoreItemFactory.NUMBER,\n                         currentPathName, \"Negative switch of the cycle, like 'Night' 'Off'\", negName, true, true, state,\n                         \"minutes\");\n-                subChannels.add(newChannel);\n+                if (null == newChannel) {\n+                    logger.error(\"Creation of the channel {} was niot possible\", thing.getUID());", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0OTI2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410649265", "bodyText": "ok", "author": "Markinus", "createdAt": "2020-04-18T05:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNDk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNTE4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410415182", "body": "```suggestion\r\n                                if (\"C\".equals(unitOfMeasure)) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            if (\"C\".compareTo(unitOfMeasure) == 0) {\n          \n          \n            \n                                            if (\"C\".equals(unitOfMeasure)) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">compareTo</span>(unitOfMeasure)<span class=\"x x-first\"> </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">0</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">equals</span>(unitOfMeasure)) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-04-17T19:02:58Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200ThingHandler.java", "diffHunk": "@@ -384,15 +433,17 @@ private void addChannels(KM200ServiceObject serObj, Thing thing, List<Channel> s\n                         // The type is definitely correct here\n                         @SuppressWarnings(\"unchecked\")\n                         List<Object> subValParas = (List<Object>) serObj.serviceTreeMap.get(subKey).getValueParameter();\n-                        minVal = (BigDecimal) subValParas.get(0);\n-                        maxVal = (BigDecimal) subValParas.get(1);\n-                        if (subValParas.size() > 2) {\n-                            unitOfMeasure = (String) subValParas.get(2);\n-                            if (\"C\".compareTo(unitOfMeasure) == 0) {\n-                                unitOfMeasure = \"\u00b0C\";\n+                        if (null != subValParas) {\n+                            minVal = (BigDecimal) subValParas.get(0);\n+                            maxVal = (BigDecimal) subValParas.get(1);\n+                            if (subValParas.size() > 2) {\n+                                unitOfMeasure = (String) subValParas.get(2);\n+                                if (\"C\".compareTo(unitOfMeasure) == 0) {", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MTY2MA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410651660", "bodyText": "ok", "author": "Markinus", "createdAt": "2020-04-18T06:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNTE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNjIyMg==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410416222", "body": "Why are you sleeping in a synchronized block? Or better question, why do you need to sleep the thread?", "bodyText": "Why are you sleeping in a synchronized block? Or better question, why do you need to sleep the thread?", "bodyHTML": "<p dir=\"auto\">Why are you sleeping in a synchronized block? Or better question, why do you need to sleep the thread?</p>", "author": "cpmeister", "createdAt": "2020-04-17T19:05:11Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200GatewayHandler.java", "diffHunk": "@@ -405,35 +440,36 @@ private void updateChildren(Map<Channel, JsonObject> sendMap, KM200GatewayHandle\n                         continue;\n                     }\n                     String tmpService = KM200Utils.checkParameterReplacement(actChannel, remoteDevice);\n-                    if (parent == null || parent.equals(remoteDevice.getServiceObject(tmpService).getParent())) {\n-                        synchronized (sendMap) {\n-                            if (sendMap.containsKey(actChannel)) {\n-                                state = dataHandler.parseJSONData(sendMap.get(actChannel),\n-                                        remoteDevice.getServiceObject(tmpService).getServiceType(), tmpService,\n-                                        actChannel.getAcceptedItemType(),\n-                                        KM200Utils.getChannelConfigurationStrings(actChannel));\n-                            } else {\n-                                state = dataHandler.getProvidersState(tmpService, actChannel.getAcceptedItemType(),\n-                                        KM200Utils.getChannelConfigurationStrings(actChannel));\n+                    KM200ServiceObject tmpSerObjekt = remoteDevice.getServiceObject(tmpService);\n+                    if (null != tmpSerObjekt) {\n+                        if (parent == null || parent.equals(tmpSerObjekt.getParent())) {\n+                            synchronized (sendMap) {\n+                                if (sendMap.containsKey(actChannel)) {\n+                                    state = dataHandler.parseJSONData(sendMap.get(actChannel),\n+                                            tmpSerObjekt.getServiceType(), tmpService, actChTypes,\n+                                            KM200Utils.getChannelConfigurationStrings(actChannel));\n+                                } else {\n+                                    state = dataHandler.getProvidersState(tmpService, actChTypes,\n+                                            KM200Utils.getChannelConfigurationStrings(actChannel));\n+                                }\n                             }\n-                        }\n-                        if (state != null) {\n-                            try {\n-                                gatewayHandler.updateState(actChannel.getUID(), state);\n-                            } catch (IllegalStateException e) {\n-                                logger.error(\"Could not get updated item state\", e);\n+                            if (state != null) {\n+                                try {\n+                                    gatewayHandler.updateState(actChannel.getUID(), state);\n+                                } catch (IllegalStateException e) {\n+                                    logger.error(\"Could not get updated item state\", e);\n+                                }\n                             }\n                         }\n-                    }\n-                    try {\n-                        Thread.sleep(readDelay);\n-                    } catch (InterruptedException e) {\n-                        continue;\n+                        try {\n+                            Thread.sleep(readDelay);", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MTAyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410651021", "bodyText": "The device needs a bit time to recover.", "author": "Markinus", "createdAt": "2020-04-18T06:03:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNjIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNjI4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410416281", "body": "don't log as error", "bodyText": "don't log as error", "bodyHTML": "<p dir=\"auto\">don't log as error</p>", "author": "cpmeister", "createdAt": "2020-04-17T19:05:18Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200GatewayHandler.java", "diffHunk": "@@ -405,35 +440,36 @@ private void updateChildren(Map<Channel, JsonObject> sendMap, KM200GatewayHandle\n                         continue;\n                     }\n                     String tmpService = KM200Utils.checkParameterReplacement(actChannel, remoteDevice);\n-                    if (parent == null || parent.equals(remoteDevice.getServiceObject(tmpService).getParent())) {\n-                        synchronized (sendMap) {\n-                            if (sendMap.containsKey(actChannel)) {\n-                                state = dataHandler.parseJSONData(sendMap.get(actChannel),\n-                                        remoteDevice.getServiceObject(tmpService).getServiceType(), tmpService,\n-                                        actChannel.getAcceptedItemType(),\n-                                        KM200Utils.getChannelConfigurationStrings(actChannel));\n-                            } else {\n-                                state = dataHandler.getProvidersState(tmpService, actChannel.getAcceptedItemType(),\n-                                        KM200Utils.getChannelConfigurationStrings(actChannel));\n+                    KM200ServiceObject tmpSerObjekt = remoteDevice.getServiceObject(tmpService);\n+                    if (null != tmpSerObjekt) {\n+                        if (parent == null || parent.equals(tmpSerObjekt.getParent())) {\n+                            synchronized (sendMap) {\n+                                if (sendMap.containsKey(actChannel)) {\n+                                    state = dataHandler.parseJSONData(sendMap.get(actChannel),\n+                                            tmpSerObjekt.getServiceType(), tmpService, actChTypes,\n+                                            KM200Utils.getChannelConfigurationStrings(actChannel));\n+                                } else {\n+                                    state = dataHandler.getProvidersState(tmpService, actChTypes,\n+                                            KM200Utils.getChannelConfigurationStrings(actChannel));\n+                                }\n                             }\n-                        }\n-                        if (state != null) {\n-                            try {\n-                                gatewayHandler.updateState(actChannel.getUID(), state);\n-                            } catch (IllegalStateException e) {\n-                                logger.error(\"Could not get updated item state\", e);\n+                            if (state != null) {\n+                                try {\n+                                    gatewayHandler.updateState(actChannel.getUID(), state);\n+                                } catch (IllegalStateException e) {\n+                                    logger.error(\"Could not get updated item state\", e);", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MDcwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410650701", "bodyText": "ok", "author": "Markinus", "createdAt": "2020-04-18T06:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNjI4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNjQyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410416425", "body": "here too", "bodyText": "here too", "bodyHTML": "<p dir=\"auto\">here too</p>", "author": "cpmeister", "createdAt": "2020-04-17T19:05:37Z", "path": "bundles/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/handler/KM200GatewayHandler.java", "diffHunk": "@@ -340,60 +354,81 @@ private void updateBridgeProperties() {\n      * Prepares a message for sending\n      */\n     public void prepareMessage(Thing thing, Channel channel, Command command) {\n-        if (getDevice() != null && getDevice().getInited() && channel != null) {\n+        if (getDevice().getInited()) {\n             JsonObject newObject = null;\n             State state = null;\n             String service = KM200Utils.checkParameterReplacement(channel, getDevice());\n-\n+            String chTypes = channel.getAcceptedItemType();\n+            if (null == chTypes) {\n+                logger.error(\"Channel {} has not accepted item types\", channel.getLabel());\n+                return;\n+            }\n             logger.debug(\"handleCommand channel: {} service: {}\", channel.getLabel(), service);\n-            newObject = dataHandler.sendProvidersState(service, command, channel.getAcceptedItemType(),\n+            newObject = dataHandler.sendProvidersState(service, command, chTypes,\n                     KM200Utils.getChannelConfigurationStrings(channel));\n             synchronized (getDevice()) {\n-                if (newObject != null) {\n-                    sendMap.put(channel, newObject);\n-                } else if (getDevice().containsService(service)\n-                        && getDevice().getServiceObject(service).getVirtual() == 1) {\n-                    String parent = getDevice().getServiceObject(service).getParent();\n-                    for (Thing actThing : getThing().getThings()) {\n-                        logger.debug(\"Checking: {}\", actThing.getUID().getAsString());\n-                        for (Channel tmpChannel : actThing.getChannels()) {\n-                            String actService = KM200Utils.checkParameterReplacement(tmpChannel, getDevice());\n-                            logger.debug(\"tmpService: {}\", actService);\n-                            String actParent = getDevice().getServiceObject(actService).getParent();\n-                            if (actParent != null && actParent.equals(parent)) {\n-                                state = dataHandler.getProvidersState(actService, tmpChannel.getAcceptedItemType(),\n-                                        KM200Utils.getChannelConfigurationStrings(tmpChannel));\n-                                if (state != null) {\n-                                    try {\n-                                        updateState(tmpChannel.getUID(), state);\n-                                    } catch (IllegalStateException e) {\n-                                        logger.error(\"Could not get updated item state\", e);\n+                KM200ServiceObject serObjekt = getDevice().getServiceObject(service);\n+                if (null != serObjekt) {\n+                    if (newObject != null) {\n+                        sendMap.put(channel, newObject);\n+                    } else if (getDevice().containsService(service) && serObjekt.getVirtual() == 1) {\n+                        String parent = serObjekt.getParent();\n+                        for (Thing actThing : getThing().getThings()) {\n+                            logger.debug(\"Checking: {}\", actThing.getUID().getAsString());\n+                            for (Channel tmpChannel : actThing.getChannels()) {\n+                                String tmpChTypes = tmpChannel.getAcceptedItemType();\n+                                if (null == tmpChTypes) {\n+                                    logger.error(\"Channel {} has not accepted item types\", tmpChannel.getLabel());\n+                                    return;\n+                                }\n+                                String actService = KM200Utils.checkParameterReplacement(tmpChannel, getDevice());\n+                                logger.debug(\"tmpService: {}\", actService);\n+                                KM200ServiceObject actSerObjekt = getDevice().getServiceObject(actService);\n+                                if (null != actSerObjekt) {\n+                                    String actParent = actSerObjekt.getParent();\n+                                    if (actParent != null && actParent.equals(parent)) {\n+                                        state = dataHandler.getProvidersState(actService, tmpChTypes,\n+                                                KM200Utils.getChannelConfigurationStrings(tmpChannel));\n+                                        if (state != null) {\n+                                            try {\n+                                                updateState(tmpChannel.getUID(), state);\n+                                            } catch (IllegalStateException e) {\n+                                                logger.error(\"Could not get updated item state\", e);\n+                                            }\n+                                        }\n                                     }\n                                 }\n                             }\n                         }\n+                    } else {\n+                        logger.warn(\"Service is not availible: {}\", service);\n                     }\n-                } else {\n-                    logger.warn(\"Service is not availible: {}\", service);\n                 }\n             }\n         }\n-\n     }\n \n     /**\n      * Update the children\n      */\n     // Every thing has here a handler\n     private void updateChildren(Map<Channel, JsonObject> sendMap, KM200GatewayHandler gatewayHandler,\n-            KM200Device remoteDevice, String parent) {\n+            KM200Device remoteDevice, @Nullable String parent) {\n         State state;\n         synchronized (remoteDevice) {\n             if (parent != null) {\n-                remoteDevice.getServiceObject(parent).setUpdated(false);\n+                KM200ServiceObject serParObjekt = remoteDevice.getServiceObject(parent);\n+                if (null != serParObjekt) {\n+                    serParObjekt.setUpdated(false);\n+                }\n             }\n             for (Thing actThing : gatewayHandler.getThing().getThings()) {\n                 for (Channel actChannel : actThing.getChannels()) {\n+                    String actChTypes = actChannel.getAcceptedItemType();\n+                    if (null == actChTypes) {\n+                        logger.error(\"Channel {} has not accepted item types\", actChannel.getLabel());", "originalCommit": "a67b5e511dd5cbcc7f0bd30ad98a2c72890789a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MDcyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7393#discussion_r410650720", "bodyText": "ok", "author": "Markinus", "createdAt": "2020-04-18T06:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNjQyNQ=="}], "type": "inlineReview"}, {"oid": "11bb9dd73c26036dc7756a2514ff495d63e11efb", "url": "https://github.com/openhab/openhab-addons/commit/11bb9dd73c26036dc7756a2514ff495d63e11efb", "message": "Rechecked all logging levels\n\nSigned-off-by: Markus Eckhardt <github@familie-eckhardt.eu>", "committedDate": "2020-04-18T05:47:04Z", "type": "commit"}, {"oid": "fe4ae7d2cce3487a056c311cb8a2ab6253bb7cb3", "url": "https://github.com/openhab/openhab-addons/commit/fe4ae7d2cce3487a056c311cb8a2ab6253bb7cb3", "message": "More bugfixes and optimizations\n\nSigned-off-by: Markus Eckhardt <github@familie-eckhardt.eu>", "committedDate": "2020-04-18T06:45:36Z", "type": "commit"}]}