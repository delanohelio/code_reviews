{"pr_number": 8390, "pr_title": "[mqtt][homie] Improve Homie initialization process for big devices", "pr_author": "bodiroga", "pr_createdAt": "2020-09-03T15:59:32Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8390", "timeline": [{"oid": "625cbfbf185e3186f48f102a052102afde7022a7", "url": "https://github.com/openhab/openhab-addons/commit/625cbfbf185e3186f48f102a052102afde7022a7", "message": "[mqtt][homie] Improve Homie initialization process for big devices\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-09-07T10:05:56Z", "type": "commit"}, {"oid": "1c686234099c7b192a30098d4a96beb6c7248e2a", "url": "https://github.com/openhab/openhab-addons/commit/1c686234099c7b192a30098d4a96beb6c7248e2a", "message": "Fix tests\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-09-07T10:05:56Z", "type": "commit"}, {"oid": "af914a8348ea51e605b972ab168e1312e368cbfe", "url": "https://github.com/openhab/openhab-addons/commit/af914a8348ea51e605b972ab168e1312e368cbfe", "message": "Remove execution of initialize() in a separate thread\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-09-07T10:05:56Z", "type": "commit"}, {"oid": "cf31eeb726ac216a2acea96a4bddf8ba4620efa3", "url": "https://github.com/openhab/openhab-addons/commit/cf31eeb726ac216a2acea96a4bddf8ba4620efa3", "message": "Move started flag from Device to Property (doesn't work)\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-09-07T10:05:56Z", "type": "commit"}, {"oid": "cf31eeb726ac216a2acea96a4bddf8ba4620efa3", "url": "https://github.com/openhab/openhab-addons/commit/cf31eeb726ac216a2acea96a4bddf8ba4620efa3", "message": "Move started flag from Device to Property (doesn't work)\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-09-07T10:05:56Z", "type": "forcePushed"}, {"oid": "089e17c4365a20dbe2273e63c0b41cee76c56bf3", "url": "https://github.com/openhab/openhab-addons/commit/089e17c4365a20dbe2273e63c0b41cee76c56bf3", "message": "Remove newline\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-09-07T10:15:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3NTU5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8390#discussion_r483175597", "body": "I do not think, that this is a good idea.\r\nThe 5 second message is just a warning and the consequences are too big for me.", "bodyText": "I do not think, that this is a good idea.\nThe 5 second message is just a warning and the consequences are too big for me.", "bodyHTML": "<p dir=\"auto\">I do not think, that this is a good idea.<br>\nThe 5 second message is just a warning and the consequences are too big for me.</p>", "author": "jochen314", "createdAt": "2020-09-03T18:29:19Z", "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/handler/HomieThingHandler.java", "diffHunk": "@@ -104,7 +105,7 @@ public void initialize() {\n             return;\n         }\n         device.initialize(config.basetopic, config.deviceid, thing.getChannels());\n-        super.initialize();\n+        scheduler.schedule(() -> super.initialize(), 0, TimeUnit.SECONDS);", "originalCommit": "82094d32c6b0e2481f285d61f02dbae60cee3632", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3NzQzMA==", "url": "https://github.com/openhab/openhab-addons/pull/8390#discussion_r483177430", "body": "This is not thread safe. So it will not guarantee solving the problem.\r\nOne thread might still be past the test and before setting the flag when the second call happens.\r\nHave a look into the `java.util.concurrent.atomic.Atomic*` classes to avoid this problem.", "bodyText": "This is not thread safe. So it will not guarantee solving the problem.\nOne thread might still be past the test and before setting the flag when the second call happens.\nHave a look into the java.util.concurrent.atomic.Atomic* classes to avoid this problem.", "bodyHTML": "<p dir=\"auto\">This is not thread safe. So it will not guarantee solving the problem.<br>\nOne thread might still be past the test and before setting the flag when the second call happens.<br>\nHave a look into the <code>java.util.concurrent.atomic.Atomic*</code> classes to avoid this problem.</p>", "author": "jochen314", "createdAt": "2020-09-03T18:31:42Z", "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/homie300/Device.java", "diffHunk": "@@ -64,6 +64,7 @@\n     private String topic = \"\";\n     public String deviceID = \"\";\n     private boolean initialized = false;\n+    private boolean startingChannels = false;", "originalCommit": "82094d32c6b0e2481f285d61f02dbae60cee3632", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3ODgwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8390#discussion_r483178805", "body": "There is `CompletableFuture.completedFuture(U value)`\r\nFor line 151: There would have been `CompletableFuture.failedFuture(Throwable ex)`", "bodyText": "There is CompletableFuture.completedFuture(U value)\nFor line 151: There would have been CompletableFuture.failedFuture(Throwable ex)", "bodyHTML": "<p dir=\"auto\">There is <code>CompletableFuture.completedFuture(U value)</code><br>\nFor line 151: There would have been <code>CompletableFuture.failedFuture(Throwable ex)</code></p>", "author": "jochen314", "createdAt": "2020-09-03T18:34:22Z", "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/homie300/Device.java", "diffHunk": "@@ -140,14 +141,23 @@ public Device(ThingUID thingUID, DeviceCallback callback, DeviceAttributes attri\n      */\n     public CompletableFuture<@Nullable Void> startChannels(MqttBrokerConnection connection,\n             ScheduledExecutorService scheduler, int timeout, HomieThingHandler handler) {\n+        if (startingChannels) {\n+            CompletableFuture<@Nullable Void> c = new CompletableFuture<>();\n+            c.complete(null);\n+            return c;", "originalCommit": "82094d32c6b0e2481f285d61f02dbae60cee3632", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5MDUzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8390#discussion_r484090531", "body": "This is not the threadsafe way to do it.\r\nWe still try to start the channel a second time, if the first time has not finished yet....\r\n\r\nWe need to set `starting` to `true` *before* we try start it.\r\nSomething like:\r\n```\r\nif (starting.getAndSet(true)) {\r\n   return CompletableFuture.completedFuture(null);\r\n}\r\n```", "bodyText": "This is not the threadsafe way to do it.\nWe still try to start the channel a second time, if the first time has not finished yet....\nWe need to set starting to true before we try start it.\nSomething like:\nif (starting.getAndSet(true)) {\n   return CompletableFuture.completedFuture(null);\n}", "bodyHTML": "<p dir=\"auto\">This is not the threadsafe way to do it.<br>\nWe still try to start the channel a second time, if the first time has not finished yet....</p>\n<p dir=\"auto\">We need to set <code>starting</code> to <code>true</code> <em>before</em> we try start it.<br>\nSomething like:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (starting.getAndSet(true)) {\n   return CompletableFuture.completedFuture(null);\n}\"><pre><code>if (starting.getAndSet(true)) {\n   return CompletableFuture.completedFuture(null);\n}\n</code></pre></div>", "author": "jochen314", "createdAt": "2020-09-06T16:40:58Z", "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/homie300/Property.java", "diffHunk": "@@ -262,6 +264,12 @@ public void createChannelFromAttribute() {\n      */\n     public CompletableFuture<@Nullable Void> startChannel(MqttBrokerConnection connection,\n             ScheduledExecutorService scheduler, int timeout) {\n+        if (started.get()) {", "originalCommit": "e5f52f3f355754cd812614384d013aabdaf8028c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bbdec18c2483ed7e0e7376bb657a7d8e7c024169", "url": "https://github.com/openhab/openhab-addons/commit/bbdec18c2483ed7e0e7376bb657a7d8e7c024169", "message": "Make final implementation thread safe\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-09-12T21:08:01Z", "type": "commit"}, {"oid": "92b60cd973b51bd5f1e246cc40b521452e41403f", "url": "https://github.com/openhab/openhab-addons/commit/92b60cd973b51bd5f1e246cc40b521452e41403f", "message": "Fix formatting issues\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-09-12T21:20:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyMDczMA==", "url": "https://github.com/openhab/openhab-addons/pull/8390#discussion_r490720730", "body": "From what I can tell the fix should be in ChannelState.start() instead. It isn't thread safe and it is no surprise that you are seeing the issues that you are seeing. \r\n\r\nTry making these changes in ChannelState and see if it fixes your problem.\r\n```\r\nprivate CompletableFuture<@Nullable Void> future = CompletableFuture.completedFuture(null);\r\nprivate final Object futureLock = new Object();\r\n\r\npublic CompletableFuture<@Nullable Void> start(MqttBrokerConnection connection, ScheduledExecutorService scheduler,\r\n            int timeout) {\r\n        sychronized(futureLock){\r\n          // if the connection is still the same, the subscription is still present, otherwise we need to renew\r\n          if ((hasSubscribed || !future.isDone()) && connection.equals(this.connection)) {\r\n              return future;\r\n          }\r\n          hasSubscribed = false;\r\n          \r\n          this.connection = connection;\r\n\r\n          if (StringUtils.isBlank(config.stateTopic)) {\r\n              return CompletableFuture.completedFuture(null);\r\n          }\r\n\r\n          this.future = new CompletableFuture<>();\r\n        }\r\n        connection.subscribe(config.stateTopic, this).thenRun(() -> {\r\n            hasSubscribed = true;\r\n            logger.debug(\"Subscribed channel {} to topic: {}\", this.channelUID, config.stateTopic);\r\n            if (timeout > 0 && !future.isDone()) {\r\n                this.scheduledFuture = scheduler.schedule(this::receivedOrTimeout, timeout, TimeUnit.MILLISECONDS);\r\n            } else {\r\n                receivedOrTimeout();\r\n            }\r\n        }).exceptionally(this::subscribeFail);\r\n        return future;\r\n    }\r\n``` ", "bodyText": "From what I can tell the fix should be in ChannelState.start() instead. It isn't thread safe and it is no surprise that you are seeing the issues that you are seeing.\nTry making these changes in ChannelState and see if it fixes your problem.\nprivate CompletableFuture<@Nullable Void> future = CompletableFuture.completedFuture(null);\nprivate final Object futureLock = new Object();\n\npublic CompletableFuture<@Nullable Void> start(MqttBrokerConnection connection, ScheduledExecutorService scheduler,\n            int timeout) {\n        sychronized(futureLock){\n          // if the connection is still the same, the subscription is still present, otherwise we need to renew\n          if ((hasSubscribed || !future.isDone()) && connection.equals(this.connection)) {\n              return future;\n          }\n          hasSubscribed = false;\n          \n          this.connection = connection;\n\n          if (StringUtils.isBlank(config.stateTopic)) {\n              return CompletableFuture.completedFuture(null);\n          }\n\n          this.future = new CompletableFuture<>();\n        }\n        connection.subscribe(config.stateTopic, this).thenRun(() -> {\n            hasSubscribed = true;\n            logger.debug(\"Subscribed channel {} to topic: {}\", this.channelUID, config.stateTopic);\n            if (timeout > 0 && !future.isDone()) {\n                this.scheduledFuture = scheduler.schedule(this::receivedOrTimeout, timeout, TimeUnit.MILLISECONDS);\n            } else {\n                receivedOrTimeout();\n            }\n        }).exceptionally(this::subscribeFail);\n        return future;\n    }", "bodyHTML": "<p dir=\"auto\">From what I can tell the fix should be in ChannelState.start() instead. It isn't thread safe and it is no surprise that you are seeing the issues that you are seeing.</p>\n<p dir=\"auto\">Try making these changes in ChannelState and see if it fixes your problem.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private CompletableFuture&lt;@Nullable Void&gt; future = CompletableFuture.completedFuture(null);\nprivate final Object futureLock = new Object();\n\npublic CompletableFuture&lt;@Nullable Void&gt; start(MqttBrokerConnection connection, ScheduledExecutorService scheduler,\n            int timeout) {\n        sychronized(futureLock){\n          // if the connection is still the same, the subscription is still present, otherwise we need to renew\n          if ((hasSubscribed || !future.isDone()) &amp;&amp; connection.equals(this.connection)) {\n              return future;\n          }\n          hasSubscribed = false;\n          \n          this.connection = connection;\n\n          if (StringUtils.isBlank(config.stateTopic)) {\n              return CompletableFuture.completedFuture(null);\n          }\n\n          this.future = new CompletableFuture&lt;&gt;();\n        }\n        connection.subscribe(config.stateTopic, this).thenRun(() -&gt; {\n            hasSubscribed = true;\n            logger.debug(&quot;Subscribed channel {} to topic: {}&quot;, this.channelUID, config.stateTopic);\n            if (timeout &gt; 0 &amp;&amp; !future.isDone()) {\n                this.scheduledFuture = scheduler.schedule(this::receivedOrTimeout, timeout, TimeUnit.MILLISECONDS);\n            } else {\n                receivedOrTimeout();\n            }\n        }).exceptionally(this::subscribeFail);\n        return future;\n    }\"><pre><code>private CompletableFuture&lt;@Nullable Void&gt; future = CompletableFuture.completedFuture(null);\nprivate final Object futureLock = new Object();\n\npublic CompletableFuture&lt;@Nullable Void&gt; start(MqttBrokerConnection connection, ScheduledExecutorService scheduler,\n            int timeout) {\n        sychronized(futureLock){\n          // if the connection is still the same, the subscription is still present, otherwise we need to renew\n          if ((hasSubscribed || !future.isDone()) &amp;&amp; connection.equals(this.connection)) {\n              return future;\n          }\n          hasSubscribed = false;\n          \n          this.connection = connection;\n\n          if (StringUtils.isBlank(config.stateTopic)) {\n              return CompletableFuture.completedFuture(null);\n          }\n\n          this.future = new CompletableFuture&lt;&gt;();\n        }\n        connection.subscribe(config.stateTopic, this).thenRun(() -&gt; {\n            hasSubscribed = true;\n            logger.debug(\"Subscribed channel {} to topic: {}\", this.channelUID, config.stateTopic);\n            if (timeout &gt; 0 &amp;&amp; !future.isDone()) {\n                this.scheduledFuture = scheduler.schedule(this::receivedOrTimeout, timeout, TimeUnit.MILLISECONDS);\n            } else {\n                receivedOrTimeout();\n            }\n        }).exceptionally(this::subscribeFail);\n        return future;\n    }\n</code></pre></div>", "author": "cpmeister", "createdAt": "2020-09-18T06:04:12Z", "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/homie300/Property.java", "diffHunk": "@@ -280,7 +286,7 @@ public void createChannelFromAttribute() {\n         }\n         // Make sure we set the callback again which might have been nulled during an stop\n         channelState.setChannelStateUpdateListener(this.callback);\n-        return channelState.start(connection, scheduler, timeout);\n+        return channelState.start(connection, scheduler, timeout).thenRun(() -> starting.set(false));", "originalCommit": "92b60cd973b51bd5f1e246cc40b521452e41403f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ3OTgyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8390#discussion_r491479828", "bodyText": "Hi @cpmeister! Thanks for your suggestion, I've implemented it and it also works fine (I didn't expect anything else coming from you \ud83d\ude09)!\n@Hilbrand and @jochen314: what do you think? Should I commit the suggested changes?", "author": "bodiroga", "createdAt": "2020-09-19T18:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyMDczMA=="}], "type": "inlineReview"}, {"oid": "c3b076357d0238c59127fd80b0716ae7f5bbb461", "url": "https://github.com/openhab/openhab-addons/commit/c3b076357d0238c59127fd80b0716ae7f5bbb461", "message": "Address review comments\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>", "committedDate": "2020-09-19T18:34:06Z", "type": "commit"}]}