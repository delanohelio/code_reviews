{"pr_number": 9260, "pr_title": "[Broadlinkthermostat] Initial contribution", "pr_author": "flo-02-mu", "pr_createdAt": "2020-12-06T16:24:50Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9260", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMjg3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542002871", "body": "What's the purpose of this?", "bodyText": "What's the purpose of this?", "bodyHTML": "<p dir=\"auto\">What's the purpose of this?</p>", "author": "fwolter", "createdAt": "2020-12-13T20:50:43Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/BroadlinkThermostatHandlerFactory.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.BroadlinkThermostatHandler;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.FloureonThermostatHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandlerFactory} is responsible for creating things and thing handlers.\n+ *\n+ * @author Gerhard Riegler - Initial contribution\n+ */\n+@Component(configurationPid = \"binding.broadlinkthermostat\", service = ThingHandlerFactory.class)\n+@NonNullByDefault\n+public class BroadlinkThermostatHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandlerFactory.class);\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, HYSEN_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE)\n+            .collect(Collectors.toSet()));\n+    private static final Map<String, BroadlinkThermostatHandler> BROADLINK_THERMOSTAT_THING_HANDLERS = new HashMap<>();\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (FLOUREON_THERMOSTAT_THING_TYPE.equals(thingTypeUID) || HYSEN_THERMOSTAT_THING_TYPE.equals(thingTypeUID)) {\n+            return new FloureonThermostatHandler(thing);\n+        }\n+        logger.warn(\"No handler for {} available\", thingTypeUID);\n+        return null;\n+    }\n+\n+    @Override\n+    public void unregisterHandler(Thing thing) {\n+        super.unregisterHandler(thing);\n+        BROADLINK_THERMOSTAT_THING_HANDLERS.remove(thing.getUID().toString());\n+    }", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY5OTExNA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543699114", "bodyText": "removed the useless method.", "author": "flo-02-mu", "createdAt": "2020-12-15T21:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMjg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMjk1MA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542002950", "body": "```suggestion\r\n    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set\r\n            .of(FLOUREON_THERMOSTAT_THING_TYPE, HYSEN_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(Stream\n          \n          \n            \n                        .of(FLOUREON_THERMOSTAT_THING_TYPE, HYSEN_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE)\n          \n          \n            \n                        .collect(Collectors.toSet()));\n          \n          \n            \n                private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set\n          \n          \n            \n                        .of(FLOUREON_THERMOSTAT_THING_TYPE, HYSEN_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">ThingTypeUID</span>&gt;</span> <span class=\"pl-c1\">SUPPORTED_THING_TYPES</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>unmodifiableSet(<span class=\"pl-smi\">Stream</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            .of(<span class=\"pl-c1\">FLOUREON_THERMOSTAT_THING_TYPE</span>, <span class=\"pl-c1\">HYSEN_THERMOSTAT_THING_TYPE</span>, <span class=\"pl-c1\">UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toSet()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">ThingTypeUID</span>&gt;</span> <span class=\"pl-c1\">SUPPORTED_THING_TYPES</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Set</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            .of(<span class=\"pl-c1\">FLOUREON_THERMOSTAT_THING_TYPE</span>, <span class=\"pl-c1\">HYSEN_THERMOSTAT_THING_TYPE</span>, <span class=\"pl-c1\">UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2020-12-13T20:51:14Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/BroadlinkThermostatHandlerFactory.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.BroadlinkThermostatHandler;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.FloureonThermostatHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandlerFactory} is responsible for creating things and thing handlers.\n+ *\n+ * @author Gerhard Riegler - Initial contribution\n+ */\n+@Component(configurationPid = \"binding.broadlinkthermostat\", service = ThingHandlerFactory.class)\n+@NonNullByDefault\n+public class BroadlinkThermostatHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandlerFactory.class);\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, HYSEN_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE)\n+            .collect(Collectors.toSet()));", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzI0OA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542003248", "body": "You could move this as a parameter argument to the constructor to avoid the Nullable annotation.", "bodyText": "You could move this as a parameter argument to the constructor to avoid the Nullable annotation.", "bodyHTML": "<p dir=\"auto\">You could move this as a parameter argument to the constructor to avoid the Nullable annotation.</p>", "author": "fwolter", "createdAt": "2020-12-13T20:52:40Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE).collect(Collectors.toSet()));\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    public BroadlinkThermostatDiscoveryService(@Nullable Set<ThingTypeUID> supportedThingTypes, int timeout)\n+            throws IllegalArgumentException {\n+        super(supportedThingTypes, timeout);\n+    }\n+\n+    public BroadlinkThermostatDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+    }\n+\n+    @Reference\n+    protected void setNetworkAddressService(NetworkAddressService networkAddressService) {\n+        this.networkAddressService = networkAddressService;\n+    }", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY5OTk0MA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543699940", "bodyText": "Done.", "author": "flo-02-mu", "createdAt": "2020-12-15T21:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzMxNA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542003314", "body": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. This could be debug. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyText": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. This could be debug. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyHTML": "<p dir=\"auto\">Bindings should only log to error if something severe happened, like the detection of a bug in your code. This could be debug. See this link for a description of the log levels: <a href=\"https://www.openhab.org/docs/developer/guidelines.html#f-logging\" rel=\"nofollow\">https://www.openhab.org/docs/developer/guidelines.html#f-logging</a></p>", "author": "fwolter", "createdAt": "2020-12-13T20:53:01Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE).collect(Collectors.toSet()));\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    public BroadlinkThermostatDiscoveryService(@Nullable Set<ThingTypeUID> supportedThingTypes, int timeout)\n+            throws IllegalArgumentException {\n+        super(supportedThingTypes, timeout);\n+    }\n+\n+    public BroadlinkThermostatDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+    }\n+\n+    @Reference\n+    protected void setNetworkAddressService(NetworkAddressService networkAddressService) {\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.error(\"Error while trying to discover broadlinkthermostat devices: \", e);", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMDI4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543700281", "bodyText": "Changed to debug logging.", "author": "flo-02-mu", "createdAt": "2020-12-15T21:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzMzMg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542003332", "body": "Logging to info should be used sparsely e.g. a newly started component or a user file that has been loaded. This could be debug.", "bodyText": "Logging to info should be used sparsely e.g. a newly started component or a user file that has been loaded. This could be debug.", "bodyHTML": "<p dir=\"auto\">Logging to info should be used sparsely e.g. a newly started component or a user file that has been loaded. This could be debug.</p>", "author": "fwolter", "createdAt": "2020-12-13T20:53:08Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE).collect(Collectors.toSet()));\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    public BroadlinkThermostatDiscoveryService(@Nullable Set<ThingTypeUID> supportedThingTypes, int timeout)\n+            throws IllegalArgumentException {\n+        super(supportedThingTypes, timeout);\n+    }\n+\n+    public BroadlinkThermostatDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+    }\n+\n+    @Reference\n+    protected void setNetworkAddressService(NetworkAddressService networkAddressService) {\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.error(\"Error while trying to discover broadlinkthermostat devices: \", e);\n+        }\n+        logger.info(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMDYzMw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543700633", "bodyText": "Changed to debug.", "author": "flo-02-mu", "createdAt": "2020-12-15T21:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzMzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzQwMg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542003402", "body": "`warn` seems a bit unreasonable.", "bodyText": "warn seems a bit unreasonable.", "bodyHTML": "<p dir=\"auto\"><code>warn</code> seems a bit unreasonable.</p>", "author": "fwolter", "createdAt": "2020-12-13T20:53:37Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE).collect(Collectors.toSet()));\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    public BroadlinkThermostatDiscoveryService(@Nullable Set<ThingTypeUID> supportedThingTypes, int timeout)\n+            throws IllegalArgumentException {\n+        super(supportedThingTypes, timeout);\n+    }\n+\n+    public BroadlinkThermostatDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+    }\n+\n+    @Reference\n+    protected void setNetworkAddressService(NetworkAddressService networkAddressService) {\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.error(\"Error while trying to discover broadlinkthermostat devices: \", e);\n+        }\n+        logger.info(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+        for (BLDevice dev : blDevices) {\n+            logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\", dev.getDeviceDescription(),\n+                    Integer.toHexString(dev.getDeviceType()), dev.getHost(), dev.getMac());\n+\n+            ThingUID thingUID;\n+            String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+            logger.debug(\"Device ID with IP address replacement: {}\", id);\n+            try {\n+                id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                logger.debug(\"Device ID with DNS name: {}\", id);\n+            } catch (UnknownHostException e) {\n+                logger.warn(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                        dev.getHost());", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMDg5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543700891", "bodyText": "Changed to debug.", "author": "flo-02-mu", "createdAt": "2020-12-15T21:31:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzQwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzQ4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542003482", "body": "```suggestion\r\n     * Uses openHAB's NetworkAddressService to determine the local primary network interface.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Uses OpenHAB's NetworkAddressService to determine the local primary network interface.\n          \n          \n            \n                 * Uses openHAB's NetworkAddressService to determine the local primary network interface.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Uses</span> <span class=\"pl-smi x x-first x-last\">OpenHAB</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>s NetworkAddressService to determine the local primary network interface.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Uses</span> <span class=\"x x-first x-last\">openHAB</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>s NetworkAddressService to determine the local primary network interface.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2020-12-13T20:54:10Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE).collect(Collectors.toSet()));\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    public BroadlinkThermostatDiscoveryService(@Nullable Set<ThingTypeUID> supportedThingTypes, int timeout)\n+            throws IllegalArgumentException {\n+        super(supportedThingTypes, timeout);\n+    }\n+\n+    public BroadlinkThermostatDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+    }\n+\n+    @Reference\n+    protected void setNetworkAddressService(NetworkAddressService networkAddressService) {\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.error(\"Error while trying to discover broadlinkthermostat devices: \", e);\n+        }\n+        logger.info(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+        for (BLDevice dev : blDevices) {\n+            logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\", dev.getDeviceDescription(),\n+                    Integer.toHexString(dev.getDeviceType()), dev.getHost(), dev.getMac());\n+\n+            ThingUID thingUID;\n+            String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+            logger.debug(\"Device ID with IP address replacement: {}\", id);\n+            try {\n+                id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                logger.debug(\"Device ID with DNS name: {}\", id);\n+            } catch (UnknownHostException e) {\n+                logger.warn(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                        dev.getHost());\n+            }\n+\n+            switch (dev.getDeviceDescription()) {\n+                case \"Floureon Thermostat\":\n+                    thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                case \"Hysen Thermostat\":\n+                    thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                default:\n+                    thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+            }\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+            properties.put(BroadlinkThermostatBindingConstants.MAC, dev.getMac().getMacString());\n+            properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+            logger.debug(\"Property map: {}\", properties);\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                    .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                    .withRepresentationProperty(BroadlinkThermostatBindingConstants.HOST).build();\n+\n+            thingDiscovered(discoveryResult);\n+\n+        }\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.trace(\"Starting background scan for Broadlinkthermostat devices\");\n+        startScan();\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        logger.trace(\"Stopping background scan for Broadlinkthermostat devices\");\n+        stopScan();\n+    }\n+\n+    private @Nullable InetAddress getIpAddress() {\n+        return getIpFromNetworkAddressService().orElse(null);\n+    }\n+\n+    /**\n+     * Uses OpenHAB's NetworkAddressService to determine the local primary network interface.", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDE1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542004159", "body": "The config parameters should be read in `initialize()` as the constructor won't be invoked when then configuration changes.\r\n\r\nYou could create a config parameter class and read the config with `getConfigAs()`. This way you can avoid the casting and the null checks, which would be necesseary if you read the config in `initialize()`.", "bodyText": "The config parameters should be read in initialize() as the constructor won't be invoked when then configuration changes.\nYou could create a config parameter class and read the config with getConfigAs(). This way you can avoid the casting and the null checks, which would be necesseary if you read the config in initialize().", "bodyHTML": "<p dir=\"auto\">The config parameters should be read in <code>initialize()</code> as the constructor won't be invoked when then configuration changes.</p>\n<p dir=\"auto\">You could create a config parameter class and read the config with <code>getConfigAs()</code>. This way you can avoid the casting and the null checks, which would be necesseary if you read the config in <code>initialize()</code>.</p>", "author": "fwolter", "createdAt": "2020-12-13T20:57:43Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    protected @Nullable BLDevice blDevice;\n+    protected final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    protected @Nullable ScheduledFuture<?> scanJob;\n+    protected String host;\n+    protected String mac;\n+    protected String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+        host = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.HOST);", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMTE2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543701166", "bodyText": "Created config class and moved to initialized().", "author": "flo-02-mu", "createdAt": "2020-12-15T21:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDE5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542004196", "body": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyHTML": "<p dir=\"auto\">Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 <a href=\"https://www.openhab.org/docs/developer/guidelines.html#f-logging\" rel=\"nofollow\">https://www.openhab.org/docs/developer/guidelines.html#f-logging</a></p>", "author": "fwolter", "createdAt": "2020-12-13T20:57:59Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    protected @Nullable BLDevice blDevice;\n+    protected final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    protected @Nullable ScheduledFuture<?> scanJob;\n+    protected String host;\n+    protected String mac;\n+    protected String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+        host = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.HOST);\n+        mac = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.MAC);\n+        logger.debug(\"Config properties: {}\", thing.getConfiguration());\n+        logger.debug(\"host: {}, mac: {}, deviceDescription: {}\", host, mac, deviceDescription);", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMTY2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543701662", "bodyText": "Removed the logging.", "author": "flo-02-mu", "createdAt": "2020-12-15T21:32:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDgxNg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542004816", "body": "What's the purpose of this?", "bodyText": "What's the purpose of this?", "bodyHTML": "<p dir=\"auto\">What's the purpose of this?</p>", "author": "fwolter", "createdAt": "2020-12-13T21:01:42Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    protected @Nullable BLDevice blDevice;\n+    protected final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    protected @Nullable ScheduledFuture<?> scanJob;\n+    protected String host;\n+    protected String mac;\n+    protected String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+        host = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.HOST);\n+        mac = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.MAC);\n+        logger.debug(\"Config properties: {}\", thing.getConfiguration());\n+        logger.debug(\"host: {}, mac: {}, deviceDescription: {}\", host, mac, deviceDescription);\n+    }\n+\n+    protected void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            if (blDevice.auth()) {\n+                logger.debug(\"Authentication for device {} successful\", thing.getLabel());\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while authenticating broadlinkthermostat device {}\", thing.getLabel(), e);\n+            updateStatus(ThingStatus.INITIALIZING);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        authenticate();\n+\n+        // schedule a new scan every minute\n+        scanJob = scheduler.scheduleWithFixedDelay(this::refreshData, 0, 1, TimeUnit.MINUTES);\n+    }\n+\n+    protected void refreshData() {\n+    }", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMjA0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543702043", "bodyText": "The method is now made abstract.", "author": "flo-02-mu", "createdAt": "2020-12-15T21:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDg4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542004882", "body": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging\r\n\r\nSame for below.", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging\nSame for below.", "bodyHTML": "<p dir=\"auto\">Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 <a href=\"https://www.openhab.org/docs/developer/guidelines.html#f-logging\" rel=\"nofollow\">https://www.openhab.org/docs/developer/guidelines.html#f-logging</a></p>\n<p dir=\"auto\">Same for below.</p>", "author": "fwolter", "createdAt": "2020-12-13T21:02:00Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    protected @Nullable BLDevice blDevice;\n+    protected final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    protected @Nullable ScheduledFuture<?> scanJob;\n+    protected String host;\n+    protected String mac;\n+    protected String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+        host = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.HOST);\n+        mac = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.MAC);\n+        logger.debug(\"Config properties: {}\", thing.getConfiguration());\n+        logger.debug(\"host: {}, mac: {}, deviceDescription: {}\", host, mac, deviceDescription);\n+    }\n+\n+    protected void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            if (blDevice.auth()) {\n+                logger.debug(\"Authentication for device {} successful\", thing.getLabel());\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while authenticating broadlinkthermostat device {}\", thing.getLabel(), e);\n+            updateStatus(ThingStatus.INITIALIZING);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        authenticate();\n+\n+        // schedule a new scan every minute\n+        scanJob = scheduler.scheduleWithFixedDelay(this::refreshData, 0, 1, TimeUnit.MINUTES);\n+    }\n+\n+    protected void refreshData() {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing thing {}\", getThing().getUID());", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMjIxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543702219", "bodyText": "Removed.", "author": "flo-02-mu", "createdAt": "2020-12-15T21:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDk0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542004945", "body": "```suggestion\r\n    private @Nullable FloureonDevice floureonDevice;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private FloureonDevice floureonDevice;\n          \n          \n            \n                private @Nullable FloureonDevice floureonDevice;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Nullable</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">FloureonDevice</span> floureonDevice;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">FloureonDevice</span> floureonDevice;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2020-12-13T21:02:19Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    @Nullable\n+    private FloureonDevice floureonDevice;", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTQ4NA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542005484", "body": "Bindings must not set the status to INITIALIZING. OFFLINE would be appropriate. Also, you could set the ThingStatusDetail to COMMUNICATION_ERROR and set a message as third argument to `updateStatus()`, which includes the exception's message. \r\n\r\nThe log message can be removed, as `updateStatus()` does already the logging.", "bodyText": "Bindings must not set the status to INITIALIZING. OFFLINE would be appropriate. Also, you could set the ThingStatusDetail to COMMUNICATION_ERROR and set a message as third argument to updateStatus(), which includes the exception's message.\nThe log message can be removed, as updateStatus() does already the logging.", "bodyHTML": "<p dir=\"auto\">Bindings must not set the status to INITIALIZING. OFFLINE would be appropriate. Also, you could set the ThingStatusDetail to COMMUNICATION_ERROR and set a message as third argument to <code>updateStatus()</code>, which includes the exception's message.</p>\n<p dir=\"auto\">The log message can be removed, as <code>updateStatus()</code> does already the logging.</p>", "author": "fwolter", "createdAt": "2020-12-13T21:05:39Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    protected @Nullable BLDevice blDevice;\n+    protected final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    protected @Nullable ScheduledFuture<?> scanJob;\n+    protected String host;\n+    protected String mac;\n+    protected String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+        host = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.HOST);\n+        mac = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.MAC);\n+        logger.debug(\"Config properties: {}\", thing.getConfiguration());\n+        logger.debug(\"host: {}, mac: {}, deviceDescription: {}\", host, mac, deviceDescription);\n+    }\n+\n+    protected void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            if (blDevice.auth()) {\n+                logger.debug(\"Authentication for device {} successful\", thing.getLabel());\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while authenticating broadlinkthermostat device {}\", thing.getLabel(), e);\n+            updateStatus(ThingStatus.INITIALIZING);", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMjcxMg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543702712", "bodyText": "Changed to offline and provide the COMMUNICATION_ERROR.", "author": "flo-02-mu", "createdAt": "2020-12-15T21:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTU4MA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542005580", "body": "Can you make the logging less chatty?", "bodyText": "Can you make the logging less chatty?", "bodyHTML": "<p dir=\"auto\">Can you make the logging less chatty?</p>", "author": "fwolter", "createdAt": "2020-12-13T21:06:13Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    @Nullable\n+    private FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command class: {}\", command.getClass());\n+        logger.debug(\"Command: {}\", command.toFullString());", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMzEwNA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543703104", "bodyText": "Removed both loglines.", "author": "flo-02-mu", "createdAt": "2020-12-15T21:35:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTU4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTYzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542005631", "body": "What type of exception do you expect here? Can you specify the concrete type? Please check all.", "bodyText": "What type of exception do you expect here? Can you specify the concrete type? Please check all.", "bodyHTML": "<p dir=\"auto\">What type of exception do you expect here? Can you specify the concrete type? Please check all.</p>", "author": "fwolter", "createdAt": "2020-12-13T21:06:27Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    @Nullable\n+    private FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command class: {}\", command.getClass());\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMzc3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543703772", "bodyText": "The Exception is thrown by the broadlink-java-api library and unfortunately that one does not throw a specific exception.", "author": "flo-02-mu", "createdAt": "2020-12-15T21:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTYzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTI4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548885289", "bodyText": "Ok, I overlooked that.", "author": "fwolter", "createdAt": "2020-12-25T15:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTk4OA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542005988", "body": "You should use `QuantityTyp.toUnit()` to convert the temperature to the unit you expect. The user could use \u00b0F or \u00b0C.", "bodyText": "You should use QuantityTyp.toUnit() to convert the temperature to the unit you expect. The user could use \u00b0F or \u00b0C.", "bodyHTML": "<p dir=\"auto\">You should use <code>QuantityTyp.toUnit()</code> to convert the temperature to the unit you expect. The user could use \u00b0F or \u00b0C.</p>", "author": "fwolter", "createdAt": "2020-12-13T21:08:52Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    @Nullable\n+    private FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command class: {}\", command.getClass());\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof QuantityType) {\n+            try {\n+                floureonDevice.setThermostatTemp(((QuantityType) command).doubleValue());", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwNDQwMg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543704402", "bodyText": "Changed to\nfloureonDevice.setThermostatTemp(((QuantityType) command).toUnit(SIUnits.CELSIUS).doubleValue());\nIs this the correct way?", "author": "flo-02-mu", "createdAt": "2020-12-15T21:37:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0NDkwNw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543744907", "bodyText": "Yes, but you need to check if toUnit() returned null, in case the unit couldn't be converted.", "author": "fwolter", "createdAt": "2020-12-15T22:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY3MjExMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r544672111", "bodyText": "Thanks, I added the null check.", "author": "flo-02-mu", "createdAt": "2020-12-16T22:34:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTk4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNjYwNg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542006606", "body": "This annotation has no effect and can be removed.", "bodyText": "This annotation has no effect and can be removed.", "bodyHTML": "<p dir=\"auto\">This annotation has no effect and can be removed.</p>", "author": "fwolter", "createdAt": "2020-12-13T21:12:15Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    @Nullable\n+    private FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command class: {}\", command.getClass());\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof QuantityType) {\n+            try {\n+                floureonDevice.setThermostatTemp(((QuantityType) command).doubleValue());\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting setpoint of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSensorCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                BaseStatusInfo statusInfo = floureonDevice.getBasicStatus();\n+                if (SENSOR_INTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.INTERNAL);\n+                } else if (SENSOR_EXTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.EXTERNAL);\n+                } else {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(),\n+                            SensorControl.INTERNAL_TEMP_EXTERNAL_LIMIT);\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while trying to set sensor mode {}: \", command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleRemoteLockCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setLock(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting remote lock of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetTimeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof DateTimeType) {\n+            ZonedDateTime zonedDateTime = ((DateTimeType) command).getZonedDateTime();\n+            try {\n+                new SetTimeCommand(tob(zonedDateTime.getHour()), tob(zonedDateTime.getMinute()),\n+                        tob(zonedDateTime.getSecond()), tob(zonedDateTime.getDayOfWeek().getValue()))\n+                                .execute(floureonDevice);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting time of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    protected void refreshData() {\n+        try {\n+            AdvancedStatusInfo advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+            if (advancedStatusInfo == null) {\n+                logger.warn(\"Device {} did not return any data. Trying to reauthenticate...\", thing.getUID());\n+                authenticate();\n+                advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+            }\n+            if (advancedStatusInfo == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Device not responding.\");\n+                return;\n+            }\n+            logger.debug(\"Retrieved data from device {}: {}\", thing.getUID(), advancedStatusInfo);\n+            logger.debug(\"Updating channel {} with value {}\", ROOM_TEMPERATURE,\n+                    new DecimalType(advancedStatusInfo.getRoomTemp()));\n+            logger.debug(\"Mode {}\", StringType.valueOf(advancedStatusInfo.getAutoMode() ? \"auto\" : \"manual\"));\n+            updateState(ROOM_TEMPERATURE, new DecimalType(advancedStatusInfo.getRoomTemp()));\n+            logger.debug(\"Updating channel {} with value {}\", ROOM_TEMPERATURE_EXTERNAL_SENSOR,\n+                    new DecimalType(advancedStatusInfo.getExternalTemp()));\n+            updateState(ROOM_TEMPERATURE_EXTERNAL_SENSOR, new DecimalType(advancedStatusInfo.getExternalTemp()));\n+            updateState(SETPOINT, new DecimalType(advancedStatusInfo.getThermostatTemp()));\n+            updateState(POWER, OnOffType.from(advancedStatusInfo.getPower()));\n+            updateState(MODE, StringType.valueOf(advancedStatusInfo.getAutoMode() ? \"auto\" : \"manual\"));\n+            updateState(SENSOR, StringType.valueOf(advancedStatusInfo.getSensorControl().name()));\n+            logger.debug(\"Updating channel {} with value {}\", SENSOR,\n+                    new StringType(advancedStatusInfo.getSensorControl().name()));\n+            updateState(TEMPERATURE_OFFSET, new DecimalType(advancedStatusInfo.getDif()));\n+            updateState(ACTIVE, OnOffType.from(advancedStatusInfo.getActive()));\n+            updateState(REMOTE_LOCK, OnOffType.from(advancedStatusInfo.getRemoteLock()));\n+            String timestamp = getTimestamp(advancedStatusInfo);\n+            logger.debug(\"Composed timestamp: {}\", timestamp);\n+            updateState(TIME, DateTimeType.valueOf(timestamp));\n+        } catch (Exception e) {\n+            logger.error(\"Error while retrieving data for {}\", thing.getUID(), e);\n+        }\n+    }\n+\n+    @NotNull", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwNDU3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r543704579", "bodyText": "Removed.", "author": "flo-02-mu", "createdAt": "2020-12-15T21:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNjYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNjc3NA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542006774", "body": "You could use `DateTimeFormatter` to make the code better to read and maintain.", "bodyText": "You could use DateTimeFormatter to make the code better to read and maintain.", "bodyHTML": "<p dir=\"auto\">You could use <code>DateTimeFormatter</code> to make the code better to read and maintain.</p>", "author": "fwolter", "createdAt": "2020-12-13T21:12:54Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    @Nullable\n+    private FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command class: {}\", command.getClass());\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof QuantityType) {\n+            try {\n+                floureonDevice.setThermostatTemp(((QuantityType) command).doubleValue());\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting setpoint of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSensorCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                BaseStatusInfo statusInfo = floureonDevice.getBasicStatus();\n+                if (SENSOR_INTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.INTERNAL);\n+                } else if (SENSOR_EXTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.EXTERNAL);\n+                } else {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(),\n+                            SensorControl.INTERNAL_TEMP_EXTERNAL_LIMIT);\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while trying to set sensor mode {}: \", command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleRemoteLockCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setLock(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting remote lock of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetTimeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof DateTimeType) {\n+            ZonedDateTime zonedDateTime = ((DateTimeType) command).getZonedDateTime();\n+            try {\n+                new SetTimeCommand(tob(zonedDateTime.getHour()), tob(zonedDateTime.getMinute()),\n+                        tob(zonedDateTime.getSecond()), tob(zonedDateTime.getDayOfWeek().getValue()))\n+                                .execute(floureonDevice);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting time of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    protected void refreshData() {\n+        try {\n+            AdvancedStatusInfo advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+            if (advancedStatusInfo == null) {\n+                logger.warn(\"Device {} did not return any data. Trying to reauthenticate...\", thing.getUID());\n+                authenticate();\n+                advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+            }\n+            if (advancedStatusInfo == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Device not responding.\");\n+                return;\n+            }\n+            logger.debug(\"Retrieved data from device {}: {}\", thing.getUID(), advancedStatusInfo);\n+            logger.debug(\"Updating channel {} with value {}\", ROOM_TEMPERATURE,\n+                    new DecimalType(advancedStatusInfo.getRoomTemp()));\n+            logger.debug(\"Mode {}\", StringType.valueOf(advancedStatusInfo.getAutoMode() ? \"auto\" : \"manual\"));\n+            updateState(ROOM_TEMPERATURE, new DecimalType(advancedStatusInfo.getRoomTemp()));\n+            logger.debug(\"Updating channel {} with value {}\", ROOM_TEMPERATURE_EXTERNAL_SENSOR,\n+                    new DecimalType(advancedStatusInfo.getExternalTemp()));\n+            updateState(ROOM_TEMPERATURE_EXTERNAL_SENSOR, new DecimalType(advancedStatusInfo.getExternalTemp()));\n+            updateState(SETPOINT, new DecimalType(advancedStatusInfo.getThermostatTemp()));\n+            updateState(POWER, OnOffType.from(advancedStatusInfo.getPower()));\n+            updateState(MODE, StringType.valueOf(advancedStatusInfo.getAutoMode() ? \"auto\" : \"manual\"));\n+            updateState(SENSOR, StringType.valueOf(advancedStatusInfo.getSensorControl().name()));\n+            logger.debug(\"Updating channel {} with value {}\", SENSOR,\n+                    new StringType(advancedStatusInfo.getSensorControl().name()));\n+            updateState(TEMPERATURE_OFFSET, new DecimalType(advancedStatusInfo.getDif()));\n+            updateState(ACTIVE, OnOffType.from(advancedStatusInfo.getActive()));\n+            updateState(REMOTE_LOCK, OnOffType.from(advancedStatusInfo.getRemoteLock()));\n+            String timestamp = getTimestamp(advancedStatusInfo);\n+            logger.debug(\"Composed timestamp: {}\", timestamp);\n+            updateState(TIME, DateTimeType.valueOf(timestamp));\n+        } catch (Exception e) {\n+            logger.error(\"Error while retrieving data for {}\", thing.getUID(), e);\n+        }\n+    }\n+\n+    @NotNull\n+    private String getTimestamp(AdvancedStatusInfo advancedStatusInfo) {\n+        ZonedDateTime now = ZonedDateTime.now();\n+        return (String.valueOf(now.getYear()) + \"-\" + String.format(\"%02d\", now.getMonthValue()) + \"-\"\n+                + String.format(\"%02d\", now.getDayOfMonth()) + \"T\" + String.format(\"%02d\", advancedStatusInfo.getHour())\n+                + \":\" + String.format(\"%02d\", advancedStatusInfo.getMin()) + \":\"\n+                + String.format(\"%02d\", advancedStatusInfo.getSec()));\n+    }", "originalCommit": "da23d4be119c54a5341b1997504ca25f9cf4dfd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY3MjM3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r544672372", "bodyText": "I used the ZonedDateTime function directly, looks way cleaner now.", "author": "flo-02-mu", "createdAt": "2020-12-16T22:35:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNjc3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDEzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548884135", "body": "This is logged by the framework and can therefore be removed.", "bodyText": "This is logged by the framework and can therefore be removed.", "bodyHTML": "<p dir=\"auto\">This is logged by the framework and can therefore be removed.</p>", "author": "fwolter", "createdAt": "2020-12-25T15:21:01Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/BroadlinkThermostatHandlerFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.FloureonThermostatHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandlerFactory} is responsible for creating things and thing handlers.\n+ *\n+ * @author Gerhard Riegler - Initial contribution\n+ */\n+@Component(configurationPid = \"binding.broadlinkthermostat\", service = ThingHandlerFactory.class)\n+@NonNullByDefault\n+public class BroadlinkThermostatHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandlerFactory.class);\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            HYSEN_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (FLOUREON_THERMOSTAT_THING_TYPE.equals(thingTypeUID) || HYSEN_THERMOSTAT_THING_TYPE.equals(thingTypeUID)) {\n+            return new FloureonThermostatHandler(thing);\n+        }\n+        logger.warn(\"No handler for {} available\", thingTypeUID);", "originalCommit": "b1a486c47e843501fd80a5dd943d72e476307109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2MTg1NA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548961854", "bodyText": "Removed.", "author": "flo-02-mu", "createdAt": "2020-12-26T09:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDE3NA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548884174", "body": "```suggestion\r\n@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n          \n          \n            \n            @Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">@Component</span>(<span class=\"pl-c1\">service</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">DiscoveryService</span><span class=\"pl-k\">.</span>class, <span class=\"pl-c1 x x-first\">immediate</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">true</span><span class=\"x x-last\">, </span><span class=\"pl-c1\">configurationPid</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>discovery.broadlinkthermostat<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">@Component</span>(<span class=\"pl-c1\">service</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">DiscoveryService</span><span class=\"pl-k\">.</span>class, <span class=\"pl-c1\">configurationPid</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>discovery.broadlinkthermostat<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2020-12-25T15:21:24Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")", "originalCommit": "b1a486c47e843501fd80a5dd943d72e476307109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2MTkzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548961939", "bodyText": "applied.", "author": "flo-02-mu", "createdAt": "2020-12-26T09:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDI0NA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548884244", "body": "Logging the whole stack trace seems a bit unreasonable. Is logging the exception's message sufficient?\r\n```suggestion\r\n            logger.debug(\"Error while trying to discover broadlinkthermostat devices: \" + e.getMessage());\r\n```", "bodyText": "Logging the whole stack trace seems a bit unreasonable. Is logging the exception's message sufficient?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"Error while trying to discover broadlinkthermostat devices: \", e);\n          \n          \n            \n                        logger.debug(\"Error while trying to discover broadlinkthermostat devices: \" + e.getMessage());", "bodyHTML": "<p dir=\"auto\">Logging the whole stack trace seems a bit unreasonable. Is logging the exception's message sufficient?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Error while trying to discover broadlinkthermostat devices: <span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\">, e</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Error while trying to discover broadlinkthermostat devices: <span class=\"pl-pds\">\"</span></span><span class=\"x x-first\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> e</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getMessage()</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2020-12-25T15:22:33Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error while trying to discover broadlinkthermostat devices: \", e);", "originalCommit": "b1a486c47e843501fd80a5dd943d72e476307109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2MTk1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548961955", "bodyText": "applied.", "author": "flo-02-mu", "createdAt": "2020-12-26T09:05:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDY2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548884666", "body": "There's a predefined constant for the mac address:\r\n```suggestion\r\n            properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());\r\n```", "bodyText": "There's a predefined constant for the mac address:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        properties.put(BroadlinkThermostatBindingConstants.MAC, dev.getMac().getMacString());\n          \n          \n            \n                        properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());", "bodyHTML": "<p dir=\"auto\">There's a predefined constant for the mac address:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            properties<span class=\"pl-k\">.</span>put(<span class=\"pl-smi x x-first\">BroadlinkThermostatBindingConstants</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">MAC</span></span>, dev<span class=\"pl-k\">.</span>getMac()<span class=\"pl-k\">.</span>getMacString());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            properties<span class=\"pl-k\">.</span>put(<span class=\"pl-smi x x-first\">Thing</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">PROPERTY_MAC_ADDRESS</span></span>, dev<span class=\"pl-k\">.</span>getMac()<span class=\"pl-k\">.</span>getMacString());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2020-12-25T15:26:30Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error while trying to discover broadlinkthermostat devices: \", e);\n+        }\n+        logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+        for (BLDevice dev : blDevices) {\n+            logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\", dev.getDeviceDescription(),\n+                    Integer.toHexString(dev.getDeviceType()), dev.getHost(), dev.getMac());\n+\n+            ThingUID thingUID;\n+            String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+            logger.debug(\"Device ID with IP address replacement: {}\", id);\n+            try {\n+                id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                logger.debug(\"Device ID with DNS name: {}\", id);\n+            } catch (UnknownHostException e) {\n+                logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                        dev.getHost());\n+            }\n+\n+            switch (dev.getDeviceDescription()) {\n+                case \"Floureon Thermostat\":\n+                    thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                case \"Hysen Thermostat\":\n+                    thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                default:\n+                    thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+            }\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+            properties.put(BroadlinkThermostatBindingConstants.MAC, dev.getMac().getMacString());", "originalCommit": "b1a486c47e843501fd80a5dd943d72e476307109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxMDIwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r549510205", "bodyText": "applied.", "author": "flo-02-mu", "createdAt": "2020-12-28T22:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDcwMw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548884703", "body": "```suggestion\r\n                    .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .withRepresentationProperty(BroadlinkThermostatBindingConstants.HOST).build();\n          \n          \n            \n                                .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    .withRepresentationProperty(<span class=\"pl-smi x x-first\">BroadlinkThermostatBindingConstants</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">HOST</span></span>)<span class=\"pl-k\">.</span>build();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    .withRepresentationProperty(<span class=\"pl-smi x x-first\">Thing</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">PROPERTY_MAC_ADDRESS</span></span>)<span class=\"pl-k\">.</span>build();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2020-12-25T15:26:46Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error while trying to discover broadlinkthermostat devices: \", e);\n+        }\n+        logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+        for (BLDevice dev : blDevices) {\n+            logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\", dev.getDeviceDescription(),\n+                    Integer.toHexString(dev.getDeviceType()), dev.getHost(), dev.getMac());\n+\n+            ThingUID thingUID;\n+            String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+            logger.debug(\"Device ID with IP address replacement: {}\", id);\n+            try {\n+                id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                logger.debug(\"Device ID with DNS name: {}\", id);\n+            } catch (UnknownHostException e) {\n+                logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                        dev.getHost());\n+            }\n+\n+            switch (dev.getDeviceDescription()) {\n+                case \"Floureon Thermostat\":\n+                    thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                case \"Hysen Thermostat\":\n+                    thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                default:\n+                    thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+            }\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+            properties.put(BroadlinkThermostatBindingConstants.MAC, dev.getMac().getMacString());\n+            properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+            logger.debug(\"Property map: {}\", properties);\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                    .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                    .withRepresentationProperty(BroadlinkThermostatBindingConstants.HOST).build();", "originalCommit": "b1a486c47e843501fd80a5dd943d72e476307109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxMDIyOA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r549510228", "bodyText": "applied.", "author": "flo-02-mu", "createdAt": "2020-12-28T22:49:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDk4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548884989", "body": "You could use the scheduler provided by `BaseThingHandler`. The protected field is also called `scheduler`.", "bodyText": "You could use the scheduler provided by BaseThingHandler. The protected field is also called scheduler.", "bodyHTML": "<p dir=\"auto\">You could use the scheduler provided by <code>BaseThingHandler</code>. The protected field is also called <code>scheduler</code>.</p>", "author": "fwolter", "createdAt": "2020-12-25T15:29:09Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");", "originalCommit": "b1a486c47e843501fd80a5dd943d72e476307109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxMDI4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r549510289", "bodyText": "done.", "author": "flo-02-mu", "createdAt": "2020-12-28T22:49:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDk4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTAzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548885039", "body": "The log message could be removed, as the status update is already logged by the framework.\r\n\r\nThe state change originated by updateStatus() is logged to events.log. Including the status detail message.", "bodyText": "The log message could be removed, as the status update is already logged by the framework.\nThe state change originated by updateStatus() is logged to events.log. Including the status detail message.", "bodyHTML": "<p dir=\"auto\">The log message could be removed, as the status update is already logged by the framework.</p>\n<p dir=\"auto\">The state change originated by updateStatus() is logged to events.log. Including the status detail message.</p>", "author": "fwolter", "createdAt": "2020-12-25T15:29:48Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    private @Nullable ScheduledFuture<?> scanJob;\n+    protected @Nullable String host;\n+    @Nullable\n+    String mac;\n+    private String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+    }\n+\n+    void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            if (blDevice.auth()) {\n+                logger.debug(\"Authentication for device {} successful\", thing.getLabel());", "originalCommit": "b1a486c47e843501fd80a5dd943d72e476307109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxMDQwOA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r549510408", "bodyText": "logging removed.", "author": "flo-02-mu", "createdAt": "2020-12-28T22:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTAzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTE4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548885187", "body": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging\r\n\r\nYou could remove the log message and use the message as a third argument to `updateStatus()` to display it in the UI.", "bodyText": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging\nYou could remove the log message and use the message as a third argument to updateStatus() to display it in the UI.", "bodyHTML": "<p dir=\"auto\">Bindings should only log to error if something severe happened, like the detection of a bug in your code. See this link for a description of the log levels: <a href=\"https://www.openhab.org/docs/developer/guidelines.html#f-logging\" rel=\"nofollow\">https://www.openhab.org/docs/developer/guidelines.html#f-logging</a></p>\n<p dir=\"auto\">You could remove the log message and use the message as a third argument to <code>updateStatus()</code> to display it in the UI.</p>", "author": "fwolter", "createdAt": "2020-12-25T15:31:34Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);", "originalCommit": "b1a486c47e843501fd80a5dd943d72e476307109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxMDQ1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r549510457", "bodyText": "Moved message to updateStatus()", "author": "flo-02-mu", "createdAt": "2020-12-28T22:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTI1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548885252", "body": "This is never used.", "bodyText": "This is never used.", "bodyHTML": "<p dir=\"auto\">This is never used.</p>", "author": "fwolter", "createdAt": "2020-12-25T15:32:12Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    private @Nullable ScheduledFuture<?> scanJob;\n+    protected @Nullable String host;\n+    @Nullable\n+    String mac;\n+    private String deviceDescription;", "originalCommit": "b1a486c47e843501fd80a5dd943d72e476307109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxMDQ3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r549510472", "bodyText": "deleted.", "author": "flo-02-mu", "createdAt": "2020-12-28T22:51:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTMyNg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548885326", "body": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. This could be warn. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging\r\n\r\nAlso, it seems a bit unreasonable to log the stack trace when the network fails.\r\n\r\nPlease check all.", "bodyText": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. This could be warn. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging\nAlso, it seems a bit unreasonable to log the stack trace when the network fails.\nPlease check all.", "bodyHTML": "<p dir=\"auto\">Bindings should only log to error if something severe happened, like the detection of a bug in your code. This could be warn. See this link for a description of the log levels: <a href=\"https://www.openhab.org/docs/developer/guidelines.html#f-logging\" rel=\"nofollow\">https://www.openhab.org/docs/developer/guidelines.html#f-logging</a></p>\n<p dir=\"auto\">Also, it seems a bit unreasonable to log the stack trace when the network fails.</p>\n<p dir=\"auto\">Please check all.</p>", "author": "fwolter", "createdAt": "2020-12-25T15:33:15Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+        authenticate();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);", "originalCommit": "b1a486c47e843501fd80a5dd943d72e476307109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2MTk3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548961975", "bodyText": "Changed to warn and only log message.", "author": "flo-02-mu", "createdAt": "2020-12-26T09:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTkxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548885919", "body": "The javadoc states this will throw an exception if the MAC address is null.", "bodyText": "The javadoc states this will throw an exception if the MAC address is null.", "bodyHTML": "<p dir=\"auto\">The javadoc states this will throw an exception if the MAC address is null.</p>", "author": "fwolter", "createdAt": "2020-12-25T15:38:36Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));", "originalCommit": "b1a486c47e843501fd80a5dd943d72e476307109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2MjA3OA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548962078", "bodyText": "(see above).", "author": "flo-02-mu", "createdAt": "2020-12-26T09:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NjAzNA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548886034", "body": "Please store the result of `getConfigAs()` to a local variable, as reading the config is an expensive operation.", "bodyText": "Please store the result of getConfigAs() to a local variable, as reading the config is an expensive operation.", "bodyHTML": "<p dir=\"auto\">Please store the result of <code>getConfigAs()</code> to a local variable, as reading the config is an expensive operation.</p>", "author": "fwolter", "createdAt": "2020-12-25T15:39:19Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    private @Nullable ScheduledFuture<?> scanJob;\n+    protected @Nullable String host;\n+    @Nullable\n+    String mac;\n+    private String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+    }\n+\n+    void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            if (blDevice.auth()) {\n+                logger.debug(\"Authentication for device {} successful\", thing.getLabel());\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Error while authenticating broadlinkthermostat device \" + thing.getLabel() + \":\" + e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        host = getConfigAs(BroadlinkThermostatConfig.class).getHost();\n+        mac = getConfigAs(BroadlinkThermostatConfig.class).getMac();", "originalCommit": "b1a486c47e843501fd80a5dd943d72e476307109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2MjA5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548962093", "bodyText": "Done.", "author": "flo-02-mu", "createdAt": "2020-12-26T09:06:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NjAzNA=="}], "type": "inlineReview"}, {"oid": "80ef47e6c3039ca4d1b5ab4a66cadd496a597aee", "url": "https://github.com/openhab/openhab-addons/commit/80ef47e6c3039ca4d1b5ab4a66cadd496a597aee", "message": "Initial commit\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2020-12-29T22:42:59Z", "type": "commit"}, {"oid": "e93e7b3fd1163851591946cd38db28327cdcff66", "url": "https://github.com/openhab/openhab-addons/commit/e93e7b3fd1163851591946cd38db28327cdcff66", "message": "Fix comment in pom\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2020-12-29T22:42:59Z", "type": "commit"}, {"oid": "67702b0cdf0ab56c9c983e1d6e4fa8cb01bceddc", "url": "https://github.com/openhab/openhab-addons/commit/67702b0cdf0ab56c9c983e1d6e4fa8cb01bceddc", "message": "Update bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java\n\nAccept review suggestion.\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2020-12-29T22:42:59Z", "type": "commit"}, {"oid": "131104e6dde27543ef79c62536a3cea2e20baa39", "url": "https://github.com/openhab/openhab-addons/commit/131104e6dde27543ef79c62536a3cea2e20baa39", "message": "Update bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java\n\nAccept review suggestion.\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2020-12-29T22:42:59Z", "type": "commit"}, {"oid": "c7ea49f8bf94b0f545348c7de220dc5cdea5c466", "url": "https://github.com/openhab/openhab-addons/commit/c7ea49f8bf94b0f545348c7de220dc5cdea5c466", "message": "Process PR review comments.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2020-12-29T22:42:59Z", "type": "commit"}, {"oid": "8465eb388b55675ea2157041cdd57ed5889ec944", "url": "https://github.com/openhab/openhab-addons/commit/8465eb388b55675ea2157041cdd57ed5889ec944", "message": "Update bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/BroadlinkThermostatHandlerFactory.java\n\nAccept review suggestion.\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2020-12-29T22:42:59Z", "type": "commit"}, {"oid": "8b64b66794bbd940d8980ffadd4767e157171283", "url": "https://github.com/openhab/openhab-addons/commit/8b64b66794bbd940d8980ffadd4767e157171283", "message": "Remove unused imports.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2020-12-29T22:42:59Z", "type": "commit"}, {"oid": "67a00b435afedc24534818ac8600cef150e46e05", "url": "https://github.com/openhab/openhab-addons/commit/67a00b435afedc24534818ac8600cef150e46e05", "message": "Fix typo in README.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2020-12-29T22:42:59Z", "type": "commit"}, {"oid": "ff35479db2429b7f8f9c19444ef7f2b16ea94fb4", "url": "https://github.com/openhab/openhab-addons/commit/ff35479db2429b7f8f9c19444ef7f2b16ea94fb4", "message": "Remove packaged library\nSimplify timestamp method\nFormat fixes\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2020-12-29T22:42:59Z", "type": "commit"}, {"oid": "c6c89805e18e5ea0a4860c71e5727208a60b98de", "url": "https://github.com/openhab/openhab-addons/commit/c6c89805e18e5ea0a4860c71e5727208a60b98de", "message": "Add tp-jaxb dependency.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2020-12-29T22:42:59Z", "type": "commit"}, {"oid": "bc1cd7bfe9e324f8498f67036d6d682aa42d1477", "url": "https://github.com/openhab/openhab-addons/commit/bc1cd7bfe9e324f8498f67036d6d682aa42d1477", "message": "Process review comments.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2020-12-29T22:42:59Z", "type": "commit"}, {"oid": "fe23ac3f9c7e0f6924efead709098eb172796427", "url": "https://github.com/openhab/openhab-addons/commit/fe23ac3f9c7e0f6924efead709098eb172796427", "message": "Process \"hidden\" review comments.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2020-12-29T22:42:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTE0OA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551001148", "body": "Is this correct?", "bodyText": "Is this correct?", "bodyHTML": "<p dir=\"auto\">Is this correct?</p>", "author": "fwolter", "createdAt": "2021-01-03T12:42:58Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/BroadlinkThermostatHandlerFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.FloureonThermostatHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandlerFactory} is responsible for creating things and thing handlers.\n+ *\n+ * @author Gerhard Riegler - Initial contribution", "originalCommit": "fe23ac3f9c7e0f6924efead709098eb172796427", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA2NjQ1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551066459", "bodyText": "No, corrected.", "author": "flo-02-mu", "createdAt": "2021-01-03T23:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTM4NA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551001384", "body": "This method should return fast. You could use `scheduler.scheduleWithFixedDelay()` to let it run asynchronously.", "bodyText": "This method should return fast. You could use scheduler.scheduleWithFixedDelay() to let it run asynchronously.", "bodyHTML": "<p dir=\"auto\">This method should return fast. You could use <code>scheduler.scheduleWithFixedDelay()</code> to let it run asynchronously.</p>", "author": "fwolter", "createdAt": "2021-01-03T12:45:01Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error while trying to discover broadlinkthermostat devices: {}\", e.getMessage());\n+        }\n+        logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+        for (BLDevice dev : blDevices) {\n+            logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\", dev.getDeviceDescription(),\n+                    Integer.toHexString(dev.getDeviceType()), dev.getHost(), dev.getMac());\n+\n+            ThingUID thingUID;\n+            String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+            logger.debug(\"Device ID with IP address replacement: {}\", id);\n+            try {\n+                id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                logger.debug(\"Device ID with DNS name: {}\", id);\n+            } catch (UnknownHostException e) {\n+                logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                        dev.getHost());\n+            }\n+\n+            switch (dev.getDeviceDescription()) {\n+                case \"Floureon Thermostat\":\n+                    thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                case \"Hysen Thermostat\":\n+                    thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                default:\n+                    thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+            }\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+            properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());\n+            properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+            logger.debug(\"Property map: {}\", properties);\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                    .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                    .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();\n+\n+            thingDiscovered(discoveryResult);\n+\n+        }\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.trace(\"Starting background scan for Broadlinkthermostat devices\");\n+        startScan();\n+    }", "originalCommit": "fe23ac3f9c7e0f6924efead709098eb172796427", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA2NjUwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551066501", "bodyText": "Changed to a scanner.", "author": "flo-02-mu", "createdAt": "2021-01-03T23:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTcwMg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551001702", "body": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging\r\n\r\nThe log message could be removed, as the status update is already logged by the framework.\r\n\r\nThe state change originated by updateStatus() is logged to events.log. Including the status detail message.", "bodyText": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging\nThe log message could be removed, as the status update is already logged by the framework.\nThe state change originated by updateStatus() is logged to events.log. Including the status detail message.", "bodyHTML": "<p dir=\"auto\">Bindings should only log to error if something severe happened, like the detection of a bug in your code. See this link for a description of the log levels: <a href=\"https://www.openhab.org/docs/developer/guidelines.html#f-logging\" rel=\"nofollow\">https://www.openhab.org/docs/developer/guidelines.html#f-logging</a></p>\n<p dir=\"auto\">The log message could be removed, as the status update is already logged by the framework.</p>\n<p dir=\"auto\">The state change originated by updateStatus() is logged to events.log. Including the status detail message.</p>", "author": "fwolter", "createdAt": "2021-01-03T12:47:19Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);", "originalCommit": "fe23ac3f9c7e0f6924efead709098eb172796427", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA2NjUyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551066529", "bodyText": "Removed.", "author": "flo-02-mu", "createdAt": "2021-01-03T23:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTc4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551001789", "body": "Logging to error. See above. This could be warn.\r\n\r\nDo you log the stack trace by intention?\r\n\r\nPlease check all.", "bodyText": "Logging to error. See above. This could be warn.\nDo you log the stack trace by intention?\nPlease check all.", "bodyHTML": "<p dir=\"auto\">Logging to error. See above. This could be warn.</p>\n<p dir=\"auto\">Do you log the stack trace by intention?</p>\n<p dir=\"auto\">Please check all.</p>", "author": "fwolter", "createdAt": "2021-01-03T12:48:09Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + mac + \": \"\n+                            + e.getMessage());\n+        }\n+        authenticate();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);", "originalCommit": "fe23ac3f9c7e0f6924efead709098eb172796427", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA2NjU4MA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551066580", "bodyText": "All logs are now on warning and only the exception message is logged.", "author": "flo-02-mu", "createdAt": "2021-01-03T23:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTc4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTk1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551001956", "body": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyHTML": "<p dir=\"auto\">Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 <a href=\"https://www.openhab.org/docs/developer/guidelines.html#f-logging\" rel=\"nofollow\">https://www.openhab.org/docs/developer/guidelines.html#f-logging</a></p>", "author": "fwolter", "createdAt": "2021-01-03T12:49:24Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + mac + \": \"\n+                            + e.getMessage());\n+        }\n+        authenticate();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof QuantityType) {\n+            try {\n+                QuantityType<Temperature> temperatureQuantityType = ((QuantityType) command).toUnit(SIUnits.CELSIUS);\n+                if (temperatureQuantityType != null) {\n+                    floureonDevice.setThermostatTemp(temperatureQuantityType.doubleValue());\n+                } else {\n+                    logger.warn(\"Could not convert {} to \u00b0C\", command);\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting setpoint of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSensorCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                BaseStatusInfo statusInfo = floureonDevice.getBasicStatus();\n+                if (SENSOR_INTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.INTERNAL);\n+                } else if (SENSOR_EXTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.EXTERNAL);\n+                } else {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(),\n+                            SensorControl.INTERNAL_TEMP_EXTERNAL_LIMIT);\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while trying to set sensor mode {}: \", command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleRemoteLockCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setLock(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting remote lock of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetTimeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof DateTimeType) {\n+            ZonedDateTime zonedDateTime = ((DateTimeType) command).getZonedDateTime();\n+            try {\n+                new SetTimeCommand(tob(zonedDateTime.getHour()), tob(zonedDateTime.getMinute()),\n+                        tob(zonedDateTime.getSecond()), tob(zonedDateTime.getDayOfWeek().getValue()))\n+                                .execute(floureonDevice);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting time of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    protected void refreshData() {\n+        if (ThingStatus.ONLINE != thing.getStatus()) {\n+            return;\n+        }\n+        try {\n+            AdvancedStatusInfo advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+            if (advancedStatusInfo == null) {\n+                logger.warn(\"Device {} did not return any data. Trying to reauthenticate...\", thing.getUID());\n+                authenticate();\n+                advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+            }\n+            if (advancedStatusInfo == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Device not responding.\");\n+                return;\n+            }\n+            logger.debug(\"Retrieved data from device {}: {}\", thing.getUID(), advancedStatusInfo);\n+            logger.debug(\"Updating channel {} with value {}\", ROOM_TEMPERATURE,\n+                    new DecimalType(advancedStatusInfo.getRoomTemp()));\n+            logger.debug(\"Mode {}\", StringType.valueOf(advancedStatusInfo.getAutoMode() ? \"auto\" : \"manual\"));\n+            updateState(ROOM_TEMPERATURE, new DecimalType(advancedStatusInfo.getRoomTemp()));\n+            logger.debug(\"Updating channel {} with value {}\", ROOM_TEMPERATURE_EXTERNAL_SENSOR,\n+                    new DecimalType(advancedStatusInfo.getExternalTemp()));", "originalCommit": "fe23ac3f9c7e0f6924efead709098eb172796427", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA2NjY2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551066661", "bodyText": "I kept the very first one as this was indeed helpful for debugging. The remaining ones are removed.", "author": "flo-02-mu", "createdAt": "2021-01-03T23:11:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTk1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMjI3OA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551002278", "body": "This logger is never used.", "bodyText": "This logger is never used.", "bodyHTML": "<p dir=\"auto\">This logger is never used.</p>", "author": "fwolter", "createdAt": "2021-01-03T12:52:54Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/BroadlinkThermostatHandlerFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.FloureonThermostatHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandlerFactory} is responsible for creating things and thing handlers.\n+ *\n+ * @author Gerhard Riegler - Initial contribution\n+ */\n+@Component(configurationPid = \"binding.broadlinkthermostat\", service = ThingHandlerFactory.class)\n+@NonNullByDefault\n+public class BroadlinkThermostatHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandlerFactory.class);", "originalCommit": "fe23ac3f9c7e0f6924efead709098eb172796427", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA2NjY4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551066683", "bodyText": "Removed.", "author": "flo-02-mu", "createdAt": "2021-01-03T23:12:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMjI3OA=="}], "type": "inlineReview"}, {"oid": "6d675806dc52f3e1384ba55693ce795fae95e548", "url": "https://github.com/openhab/openhab-addons/commit/6d675806dc52f3e1384ba55693ce795fae95e548", "message": "Process latest review comments.\nFix regex\nUse QuantityType for temperatures.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2021-01-03T23:06:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5Mjc4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551492785", "body": "This unnecessary empty line is present in my checkstyle warnings.", "bodyText": "This unnecessary empty line is present in my checkstyle warnings.", "bodyHTML": "<p dir=\"auto\">This unnecessary empty line is present in my checkstyle warnings.</p>", "author": "fwolter", "createdAt": "2021-01-04T18:35:27Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+    private final Runnable scanner;\n+    private @Nullable ScheduledFuture<?> backgroundDiscoveryFuture;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+        scanner = createScanner();\n+    }\n+\n+    private Runnable createScanner() {\n+        return () -> {\n+            long timestampOfLastScan = getTimestampOfLastScan();\n+            BLDevice[] blDevices = new BLDevice[0];\n+            try {\n+                @Nullable\n+                InetAddress sourceAddress = getIpAddress();\n+                if (sourceAddress != null) {\n+                    logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                    blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+                } else {\n+                    blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+                }\n+", "originalCommit": "6d675806dc52f3e1384ba55693ce795fae95e548", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU5MjM5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551592396", "bodyText": "Ok, removed it.", "author": "flo-02-mu", "createdAt": "2021-01-04T21:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5Mjc4NQ=="}], "type": "inlineReview"}, {"oid": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd", "url": "https://github.com/openhab/openhab-addons/commit/c24a8a364af4eb43b96bf3d70c9041dd1aec71cd", "message": "Remove empty line.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2021-01-04T21:56:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMDg5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552910897", "body": "You could make this a method.\r\n```suggestion\r\n    private void createScanner() {\r\n```", "bodyText": "You could make this a method.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Runnable createScanner() {\n          \n          \n            \n                    return () -> {\n          \n          \n            \n                private void createScanner() {", "bodyHTML": "<p dir=\"auto\">You could make this a method.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Runnable</span> createScanner() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> createScanner() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2021-01-06T19:12:01Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+    private final Runnable scanner;\n+    private @Nullable ScheduledFuture<?> backgroundDiscoveryFuture;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+        scanner = createScanner();\n+    }\n+\n+    private Runnable createScanner() {\n+        return () -> {", "originalCommit": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzODgxMw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r553338813", "bodyText": "Done.", "author": "flo-02-mu", "createdAt": "2021-01-07T13:52:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMDg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMTA4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552911086", "body": "Then, you can apply this:\r\n```suggestion\r\n        scheduler.execute(this::createScanner);\r\n```", "bodyText": "Then, you can apply this:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    scheduler.execute(scanner);\n          \n          \n            \n                    scheduler.execute(this::createScanner);", "bodyHTML": "<p dir=\"auto\">Then, you can apply this:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        scheduler<span class=\"pl-k\">.</span>execute(<span class=\"x x-first x-last\">scanner</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        scheduler<span class=\"pl-k\">.</span>execute(<span class=\"pl-c1 x x-first\">this</span><span class=\"pl-k x\">::</span><span class=\"x x-last\">createScanner</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2021-01-06T19:12:25Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+    private final Runnable scanner;\n+    private @Nullable ScheduledFuture<?> backgroundDiscoveryFuture;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+        scanner = createScanner();\n+    }\n+\n+    private Runnable createScanner() {\n+        return () -> {\n+            long timestampOfLastScan = getTimestampOfLastScan();\n+            BLDevice[] blDevices = new BLDevice[0];\n+            try {\n+                @Nullable\n+                InetAddress sourceAddress = getIpAddress();\n+                if (sourceAddress != null) {\n+                    logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                    blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+                } else {\n+                    blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+                }\n+            } catch (IOException e) {\n+                logger.debug(\"Error while trying to discover broadlinkthermostat devices: {}\", e.getMessage());\n+            }\n+            logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+            for (BLDevice dev : blDevices) {\n+                logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\",\n+                        dev.getDeviceDescription(), Integer.toHexString(dev.getDeviceType()), dev.getHost(),\n+                        dev.getMac());\n+\n+                ThingUID thingUID;\n+                String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+                logger.debug(\"Device ID with IP address replacement: {}\", id);\n+                try {\n+                    id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                    logger.debug(\"Device ID with DNS name: {}\", id);\n+                } catch (UnknownHostException e) {\n+                    logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                            dev.getHost());\n+                }\n+\n+                switch (dev.getDeviceDescription()) {\n+                    case \"Floureon Thermostat\":\n+                        thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    case \"Hysen Thermostat\":\n+                        thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    default:\n+                        thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+                }\n+\n+                Map<String, Object> properties = new HashMap<>();\n+                properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+                properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());\n+                properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+                logger.debug(\"Property map: {}\", properties);\n+\n+                DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                        .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                        .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();\n+\n+                thingDiscovered(discoveryResult);\n+\n+            }\n+            removeOlderResults(timestampOfLastScan);\n+        };\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        scheduler.execute(scanner);", "originalCommit": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzODkwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r553338901", "bodyText": "Applied.", "author": "flo-02-mu", "createdAt": "2021-01-07T13:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMTA4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMTMwNw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552911307", "body": "No harm in canceling a task that is already cancelled.\r\n```suggestion\r\n        if (currentBackgroundDiscoveryFuture != null) {\r\n```", "bodyText": "No harm in canceling a task that is already cancelled.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (currentBackgroundDiscoveryFuture != null && !currentBackgroundDiscoveryFuture.isDone()) {\n          \n          \n            \n                    if (currentBackgroundDiscoveryFuture != null) {", "bodyHTML": "<p dir=\"auto\">No harm in canceling a task that is already cancelled.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (currentBackgroundDiscoveryFuture <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span><span class=\"x x-first\"> </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x\"> </span><span class=\"pl-k x\">!</span><span class=\"x\">currentBackgroundDiscoveryFuture</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isDone()</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (currentBackgroundDiscoveryFuture <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2021-01-06T19:12:55Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+    private final Runnable scanner;\n+    private @Nullable ScheduledFuture<?> backgroundDiscoveryFuture;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+        scanner = createScanner();\n+    }\n+\n+    private Runnable createScanner() {\n+        return () -> {\n+            long timestampOfLastScan = getTimestampOfLastScan();\n+            BLDevice[] blDevices = new BLDevice[0];\n+            try {\n+                @Nullable\n+                InetAddress sourceAddress = getIpAddress();\n+                if (sourceAddress != null) {\n+                    logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                    blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+                } else {\n+                    blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+                }\n+            } catch (IOException e) {\n+                logger.debug(\"Error while trying to discover broadlinkthermostat devices: {}\", e.getMessage());\n+            }\n+            logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+            for (BLDevice dev : blDevices) {\n+                logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\",\n+                        dev.getDeviceDescription(), Integer.toHexString(dev.getDeviceType()), dev.getHost(),\n+                        dev.getMac());\n+\n+                ThingUID thingUID;\n+                String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+                logger.debug(\"Device ID with IP address replacement: {}\", id);\n+                try {\n+                    id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                    logger.debug(\"Device ID with DNS name: {}\", id);\n+                } catch (UnknownHostException e) {\n+                    logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                            dev.getHost());\n+                }\n+\n+                switch (dev.getDeviceDescription()) {\n+                    case \"Floureon Thermostat\":\n+                        thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    case \"Hysen Thermostat\":\n+                        thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    default:\n+                        thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+                }\n+\n+                Map<String, Object> properties = new HashMap<>();\n+                properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+                properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());\n+                properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+                logger.debug(\"Property map: {}\", properties);\n+\n+                DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                        .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                        .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();\n+\n+                thingDiscovered(discoveryResult);\n+\n+            }\n+            removeOlderResults(timestampOfLastScan);\n+        };\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        scheduler.execute(scanner);\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.trace(\"Starting background scan for Broadlinkthermostat devices\");\n+        @Nullable\n+        ScheduledFuture<?> currentBackgroundDiscoveryFuture = backgroundDiscoveryFuture;\n+        if (currentBackgroundDiscoveryFuture != null && !currentBackgroundDiscoveryFuture.isDone()) {", "originalCommit": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzODk5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r553338991", "bodyText": "Applied.", "author": "flo-02-mu", "createdAt": "2021-01-07T13:52:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMTMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMTY1MA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552911650", "body": "The compiler is more intelligent on local variables, so this annotation could be removed.", "bodyText": "The compiler is more intelligent on local variables, so this annotation could be removed.", "bodyHTML": "<p dir=\"auto\">The compiler is more intelligent on local variables, so this annotation could be removed.</p>", "author": "fwolter", "createdAt": "2021-01-06T19:13:37Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+    private final Runnable scanner;\n+    private @Nullable ScheduledFuture<?> backgroundDiscoveryFuture;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+        scanner = createScanner();\n+    }\n+\n+    private Runnable createScanner() {\n+        return () -> {\n+            long timestampOfLastScan = getTimestampOfLastScan();\n+            BLDevice[] blDevices = new BLDevice[0];\n+            try {\n+                @Nullable\n+                InetAddress sourceAddress = getIpAddress();\n+                if (sourceAddress != null) {\n+                    logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                    blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+                } else {\n+                    blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+                }\n+            } catch (IOException e) {\n+                logger.debug(\"Error while trying to discover broadlinkthermostat devices: {}\", e.getMessage());\n+            }\n+            logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+            for (BLDevice dev : blDevices) {\n+                logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\",\n+                        dev.getDeviceDescription(), Integer.toHexString(dev.getDeviceType()), dev.getHost(),\n+                        dev.getMac());\n+\n+                ThingUID thingUID;\n+                String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+                logger.debug(\"Device ID with IP address replacement: {}\", id);\n+                try {\n+                    id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                    logger.debug(\"Device ID with DNS name: {}\", id);\n+                } catch (UnknownHostException e) {\n+                    logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                            dev.getHost());\n+                }\n+\n+                switch (dev.getDeviceDescription()) {\n+                    case \"Floureon Thermostat\":\n+                        thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    case \"Hysen Thermostat\":\n+                        thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    default:\n+                        thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+                }\n+\n+                Map<String, Object> properties = new HashMap<>();\n+                properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+                properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());\n+                properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+                logger.debug(\"Property map: {}\", properties);\n+\n+                DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                        .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                        .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();\n+\n+                thingDiscovered(discoveryResult);\n+\n+            }\n+            removeOlderResults(timestampOfLastScan);\n+        };\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        scheduler.execute(scanner);\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.trace(\"Starting background scan for Broadlinkthermostat devices\");\n+        @Nullable", "originalCommit": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzOTUyOA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r553339528", "bodyText": "I got confused because I still saw warnings. But those were from the IDE (IntelliJ) no native compiler warnings. => I removed all @nullables on the local vars again.", "author": "flo-02-mu", "createdAt": "2021-01-07T13:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMTY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMjE1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552912157", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nullable", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        </span><span class=\"pl-k x x-last\">@Nullable</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2021-01-06T19:14:34Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+    private final Runnable scanner;\n+    private @Nullable ScheduledFuture<?> backgroundDiscoveryFuture;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+        scanner = createScanner();\n+    }\n+\n+    private Runnable createScanner() {\n+        return () -> {\n+            long timestampOfLastScan = getTimestampOfLastScan();\n+            BLDevice[] blDevices = new BLDevice[0];\n+            try {\n+                @Nullable\n+                InetAddress sourceAddress = getIpAddress();\n+                if (sourceAddress != null) {\n+                    logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                    blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+                } else {\n+                    blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+                }\n+            } catch (IOException e) {\n+                logger.debug(\"Error while trying to discover broadlinkthermostat devices: {}\", e.getMessage());\n+            }\n+            logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+            for (BLDevice dev : blDevices) {\n+                logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\",\n+                        dev.getDeviceDescription(), Integer.toHexString(dev.getDeviceType()), dev.getHost(),\n+                        dev.getMac());\n+\n+                ThingUID thingUID;\n+                String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+                logger.debug(\"Device ID with IP address replacement: {}\", id);\n+                try {\n+                    id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                    logger.debug(\"Device ID with DNS name: {}\", id);\n+                } catch (UnknownHostException e) {\n+                    logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                            dev.getHost());\n+                }\n+\n+                switch (dev.getDeviceDescription()) {\n+                    case \"Floureon Thermostat\":\n+                        thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    case \"Hysen Thermostat\":\n+                        thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    default:\n+                        thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+                }\n+\n+                Map<String, Object> properties = new HashMap<>();\n+                properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+                properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());\n+                properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+                logger.debug(\"Property map: {}\", properties);\n+\n+                DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                        .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                        .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();\n+\n+                thingDiscovered(discoveryResult);\n+\n+            }\n+            removeOlderResults(timestampOfLastScan);\n+        };\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        scheduler.execute(scanner);\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.trace(\"Starting background scan for Broadlinkthermostat devices\");\n+        @Nullable\n+        ScheduledFuture<?> currentBackgroundDiscoveryFuture = backgroundDiscoveryFuture;\n+        if (currentBackgroundDiscoveryFuture != null && !currentBackgroundDiscoveryFuture.isDone()) {\n+            currentBackgroundDiscoveryFuture.cancel(true);\n+        }\n+        backgroundDiscoveryFuture = scheduler.scheduleWithFixedDelay(scanner, 0, 60, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        logger.trace(\"Stopping background scan for Broadlinkthermostat devices\");\n+        @Nullable\n+        ScheduledFuture<?> backgroundDiscoveryFuture = this.backgroundDiscoveryFuture;\n+        if (backgroundDiscoveryFuture != null && !backgroundDiscoveryFuture.isCancelled()) {\n+            if (backgroundDiscoveryFuture.cancel(true)) {\n+                this.backgroundDiscoveryFuture = null;\n+            }\n+        }\n+        stopScan();\n+    }\n+\n+    private @Nullable InetAddress getIpAddress() {\n+        return getIpFromNetworkAddressService().orElse(null);\n+    }\n+\n+    /**\n+     * Uses openHAB's NetworkAddressService to determine the local primary network interface.\n+     *\n+     * @return local ip or <code>empty</code> if configured primary IP is not set or could not be parsed.\n+     */\n+    private Optional<InetAddress> getIpFromNetworkAddressService() {\n+        @Nullable", "originalCommit": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzOTY1NA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r553339654", "bodyText": "applied.", "author": "flo-02-mu", "createdAt": "2021-01-07T13:53:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMjE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMjc1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552912756", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        @Nullable", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">            </span><span class=\"pl-k x x-last\">@Nullable</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2021-01-06T19:15:44Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private @Nullable ScheduledFuture<?> scanJob;\n+    @Nullable\n+    String host;\n+    @Nullable\n+    String macAddress;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            @Nullable", "originalCommit": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM0MDAyNw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r553340027", "bodyText": "applied.", "author": "flo-02-mu", "createdAt": "2021-01-07T13:54:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMjc1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMjg1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552912856", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nullable", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        </span><span class=\"pl-k x x-last\">@Nullable</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2021-01-06T19:15:57Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private @Nullable ScheduledFuture<?> scanJob;\n+    @Nullable\n+    String host;\n+    @Nullable\n+    String macAddress;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            @Nullable\n+            BLDevice blDevice = this.blDevice;\n+            if (blDevice != null && blDevice.auth()) {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Error while authenticating broadlinkthermostat device \" + thing.getLabel() + \":\" + e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        BroadlinkThermostatConfig config = getConfigAs(BroadlinkThermostatConfig.class);\n+        host = config.getHost();\n+        macAddress = config.getMacAddress();\n+\n+        // schedule a new scan every minute\n+        scanJob = scheduler.scheduleWithFixedDelay(this::refreshData, 0, 1, TimeUnit.MINUTES);\n+    }\n+\n+    protected abstract void refreshData();\n+\n+    @Override\n+    public void dispose() {\n+        @Nullable", "originalCommit": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzOTgyNw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r553339827", "bodyText": "applied", "author": "flo-02-mu", "createdAt": "2021-01-07T13:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMjg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMzIxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552913211", "body": "Please check all.\r\n```suggestion\r\n```", "bodyText": "Please check all.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nullable", "bodyHTML": "<p dir=\"auto\">Please check all.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        </span><span class=\"pl-k x x-last\">@Nullable</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2021-01-06T19:16:37Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        if (host != null && macAddress != null) {\n+            try {\n+                blDevice = new FloureonDevice(host, new Mac(macAddress));\n+                this.floureonDevice = (FloureonDevice) blDevice;\n+            } catch (IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + macAddress + \": \"\n+                                + e.getMessage());\n+            }\n+            authenticate();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        @Nullable\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof OnOffType && floureonDevice != null) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        @Nullable", "originalCommit": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM0MDEwOA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r553340108", "bodyText": "applied.", "author": "flo-02-mu", "createdAt": "2021-01-07T13:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMzIxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMzY4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552913682", "body": "You could specify the wildcard to get rid of the supression.\r\n```suggestion\r\n                QuantityType<?> temperatureQuantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\r\n```", "bodyText": "You could specify the wildcard to get rid of the supression.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            @Nullable\n          \n          \n            \n                            @SuppressWarnings(\"unchecked\")\n          \n          \n            \n                            QuantityType<Temperature> temperatureQuantityType = ((QuantityType<Temperature>) command)\n          \n          \n            \n                                    .toUnit(SIUnits.CELSIUS);\n          \n          \n            \n                            QuantityType<?> temperatureQuantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);", "bodyHTML": "<p dir=\"auto\">You could specify the wildcard to get rid of the supression.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">@Nullable</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">@SuppressWarnings</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>unchecked<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">QuantityType&lt;<span class=\"pl-smi\">Temperature</span>&gt;</span> temperatureQuantityType <span class=\"pl-k\">=</span> ((<span class=\"pl-k\">QuantityType&lt;<span class=\"pl-smi\">Temperature</span>&gt;</span>) command)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .toUnit(<span class=\"pl-smi\">SIUnits</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CELSIUS</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">QuantityType&lt;?&gt;</span> temperatureQuantityType <span class=\"pl-k\">=</span> ((<span class=\"pl-k\">QuantityType&lt;?&gt;</span>) command)<span class=\"pl-k\">.</span>toUnit(<span class=\"pl-smi\">SIUnits</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CELSIUS</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fwolter", "createdAt": "2021-01-06T19:17:33Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        if (host != null && macAddress != null) {\n+            try {\n+                blDevice = new FloureonDevice(host, new Mac(macAddress));\n+                this.floureonDevice = (FloureonDevice) blDevice;\n+            } catch (IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + macAddress + \": \"\n+                                + e.getMessage());\n+            }\n+            authenticate();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        @Nullable\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof OnOffType && floureonDevice != null) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        @Nullable\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof StringType && floureonDevice != null) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power off {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        @Nullable\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof QuantityType && floureonDevice != null) {\n+            try {\n+                @Nullable\n+                @SuppressWarnings(\"unchecked\")\n+                QuantityType<Temperature> temperatureQuantityType = ((QuantityType<Temperature>) command)\n+                        .toUnit(SIUnits.CELSIUS);", "originalCommit": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM0MDMwNw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r553340307", "bodyText": "Ah, nice! Applied.", "author": "flo-02-mu", "createdAt": "2021-01-07T13:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMzY4Mg=="}], "type": "inlineReview"}, {"oid": "8a66147bf9b8e53eb40a568cabdd09cab2750b71", "url": "https://github.com/openhab/openhab-addons/commit/8a66147bf9b8e53eb40a568cabdd09cab2750b71", "message": "Remove Nullable annotations and extract scanner to a method.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2021-01-07T13:51:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc2NjUxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r567766511", "body": "```suggestion\r\n    private static final int DISCOVERY_TIMEOUT_SECONDS = 30;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final int DISCOVERY_TIMEOUT = 30;\n          \n          \n            \n                private static final int DISCOVERY_TIMEOUT_SECONDS = 30;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1 x x-first x-last\">DISCOVERY_TIMEOUT</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">30</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1 x x-first x-last\">DISCOVERY_TIMEOUT_SECONDS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">30</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2021-02-01T11:53:51Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;", "originalCommit": "8a66147bf9b8e53eb40a568cabdd09cab2750b71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ5NjkxNw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r571496917", "bodyText": "Changed. Copyright year is updated as well.", "author": "flo-02-mu", "createdAt": "2021-02-06T22:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc2NjUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc2ODIzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r567768235", "body": "```suggestion\r\n    @Nullable BLDevice blDevice;\r\n    private @Nullable ScheduledFuture<?> scanJob;\r\n    @Nullable String host;\r\n    @Nullable String macAddress;\r\n```\r\nOr should these fields without access modifier also be `protected`?", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                BLDevice blDevice;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> scanJob;\n          \n          \n            \n                @Nullable\n          \n          \n            \n                String host;\n          \n          \n            \n                @Nullable\n          \n          \n            \n                String macAddress;\n          \n          \n            \n                @Nullable BLDevice blDevice;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> scanJob;\n          \n          \n            \n                @Nullable String host;\n          \n          \n            \n                @Nullable String macAddress;\n          \n      \n    \n    \n  \n\nOr should these fields without access modifier also be protected?", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"41\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Nullable</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"42\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">BLDevice</span> blDevice;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"43\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">@Nullable</span> <span class=\"pl-k\">ScheduledFuture&lt;?&gt;</span> scanJob;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"44\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Nullable</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"45\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">String</span> host;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"46\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Nullable</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"47\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">String</span> macAddress;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"41\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">BLDevice</span> blDevice;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"42\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">@Nullable</span> <span class=\"pl-k\">ScheduledFuture&lt;?&gt;</span> scanJob;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"43\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">String</span> host;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"44\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">String</span> macAddress;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Or should these fields without access modifier also be <code>protected</code>?</p>", "author": "Hilbrand", "createdAt": "2021-02-01T11:56:50Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private @Nullable ScheduledFuture<?> scanJob;\n+    @Nullable\n+    String host;\n+    @Nullable\n+    String macAddress;", "originalCommit": "8a66147bf9b8e53eb40a568cabdd09cab2750b71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ5NjkyNw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r571496927", "bodyText": "Applied.", "author": "flo-02-mu", "createdAt": "2021-02-06T22:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc2ODIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc2OTYwNg==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r567769606", "body": "I'm assuming `authenticate()` makes some network call. In which case you should schedule this call (or do the scheduling in `authenticate`) to make sure it won't run to long. Because `initialize` should finish fast.", "bodyText": "I'm assuming authenticate() makes some network call. In which case you should schedule this call (or do the scheduling in authenticate) to make sure it won't run to long. Because initialize should finish fast.", "bodyHTML": "<p dir=\"auto\">I'm assuming <code>authenticate()</code> makes some network call. In which case you should schedule this call (or do the scheduling in <code>authenticate</code>) to make sure it won't run to long. Because <code>initialize</code> should finish fast.</p>", "author": "Hilbrand", "createdAt": "2021-02-01T11:59:01Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        if (host != null && macAddress != null) {\n+            try {\n+                blDevice = new FloureonDevice(host, new Mac(macAddress));\n+                this.floureonDevice = (FloureonDevice) blDevice;\n+            } catch (IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + macAddress + \": \"\n+                                + e.getMessage());\n+            }\n+            authenticate();", "originalCommit": "8a66147bf9b8e53eb40a568cabdd09cab2750b71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ5NzEwNw==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r571497107", "bodyText": "Good point, especially in combination with the next comment. I moved the authentication now entirely out of the initialization and inside handleComman(). As the library keeps a state of the authentication, the call is not made with every refresh.", "author": "flo-02-mu", "createdAt": "2021-02-06T22:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc2OTYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc3MjY1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r567772651", "body": "If the device is set off line here it looks like it will never be set online again. Because the first part of refresh checks if the device is online and if not just returns.", "bodyText": "If the device is set off line here it looks like it will never be set online again. Because the first part of refresh checks if the device is online and if not just returns.", "bodyHTML": "<p dir=\"auto\">If the device is set off line here it looks like it will never be set online again. Because the first part of refresh checks if the device is online and if not just returns.</p>", "author": "Hilbrand", "createdAt": "2021-02-01T12:04:12Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        if (host != null && macAddress != null) {\n+            try {\n+                blDevice = new FloureonDevice(host, new Mac(macAddress));\n+                this.floureonDevice = (FloureonDevice) blDevice;\n+            } catch (IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + macAddress + \": \"\n+                                + e.getMessage());\n+            }\n+            authenticate();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof OnOffType && floureonDevice != null) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof StringType && floureonDevice != null) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power off {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof QuantityType && floureonDevice != null) {\n+            try {\n+                QuantityType<?> temperatureQuantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+                if (temperatureQuantityType != null) {\n+                    floureonDevice.setThermostatTemp(temperatureQuantityType.doubleValue());\n+                } else {\n+                    logger.warn(\"Could not convert {} to \u00b0C\", command);\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting setpoint of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSensorCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof StringType && floureonDevice != null) {\n+            try {\n+                BaseStatusInfo statusInfo = floureonDevice.getBasicStatus();\n+                if (SENSOR_INTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.INTERNAL);\n+                } else if (SENSOR_EXTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.EXTERNAL);\n+                } else {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(),\n+                            SensorControl.INTERNAL_TEMP_EXTERNAL_LIMIT);\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while trying to set sensor mode {}: {}\", command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleRemoteLockCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof OnOffType && floureonDevice != null) {\n+            try {\n+                floureonDevice.setLock(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting remote lock of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetTimeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof DateTimeType) {\n+            ZonedDateTime zonedDateTime = ((DateTimeType) command).getZonedDateTime();\n+            try {\n+                new SetTimeCommand(tob(zonedDateTime.getHour()), tob(zonedDateTime.getMinute()),\n+                        tob(zonedDateTime.getSecond()), tob(zonedDateTime.getDayOfWeek().getValue()))\n+                                .execute(floureonDevice);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting time of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    protected void refreshData() {\n+        if (ThingStatus.ONLINE != thing.getStatus()) {\n+            return;\n+        }\n+\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (floureonDevice != null) {\n+            try {\n+                AdvancedStatusInfo advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+                if (advancedStatusInfo == null) {\n+                    logger.warn(\"Device {} did not return any data. Trying to reauthenticate...\", thing.getUID());\n+                    authenticate();\n+                    advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+                }\n+                if (advancedStatusInfo == null) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Device not responding.\");", "originalCommit": "8a66147bf9b8e53eb40a568cabdd09cab2750b71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ5NzE1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r571497159", "bodyText": "See above. Now the authentication call happens before and puts the device back online, if authentication was successful.", "author": "flo-02-mu", "createdAt": "2021-02-06T22:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc3MjY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc3NjU3MA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r567776570", "body": "Refresh is called for every channel. So if you have 10 channels this will be called 10 times. So you might want to build in some caching. You can do this for example with `ExpiringCache` on `AdvancedStatusInfo`. Where the actual call to the service is set in the cache. When getting the value you just call get on the cache and if the timeout has exceeded it will to a refresh. For example set the timeout to 3 seconds. So repeated calls due to refresh calls won't trigger a new call to the service.", "bodyText": "Refresh is called for every channel. So if you have 10 channels this will be called 10 times. So you might want to build in some caching. You can do this for example with ExpiringCache on AdvancedStatusInfo. Where the actual call to the service is set in the cache. When getting the value you just call get on the cache and if the timeout has exceeded it will to a refresh. For example set the timeout to 3 seconds. So repeated calls due to refresh calls won't trigger a new call to the service.", "bodyHTML": "<p dir=\"auto\">Refresh is called for every channel. So if you have 10 channels this will be called 10 times. So you might want to build in some caching. You can do this for example with <code>ExpiringCache</code> on <code>AdvancedStatusInfo</code>. Where the actual call to the service is set in the cache. When getting the value you just call get on the cache and if the timeout has exceeded it will to a refresh. For example set the timeout to 3 seconds. So repeated calls due to refresh calls won't trigger a new call to the service.</p>", "author": "Hilbrand", "createdAt": "2021-02-01T12:10:27Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        if (host != null && macAddress != null) {\n+            try {\n+                blDevice = new FloureonDevice(host, new Mac(macAddress));\n+                this.floureonDevice = (FloureonDevice) blDevice;\n+            } catch (IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + macAddress + \": \"\n+                                + e.getMessage());\n+            }\n+            authenticate();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();", "originalCommit": "8a66147bf9b8e53eb40a568cabdd09cab2750b71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ5NzI0OA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r571497248", "bodyText": "Cool idea. Applied.", "author": "flo-02-mu", "createdAt": "2021-02-06T22:24:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc3NjU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc3NzE0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r567777145", "body": "If this happens you might want to set the thing to offline (and log to debug). So the user is also informed about this.", "bodyText": "If this happens you might want to set the thing to offline (and log to debug). So the user is also informed about this.", "bodyHTML": "<p dir=\"auto\">If this happens you might want to set the thing to offline (and log to debug). So the user is also informed about this.</p>", "author": "Hilbrand", "createdAt": "2021-02-01T12:11:22Z", "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        if (host != null && macAddress != null) {\n+            try {\n+                blDevice = new FloureonDevice(host, new Mac(macAddress));\n+                this.floureonDevice = (FloureonDevice) blDevice;\n+            } catch (IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + macAddress + \": \"\n+                                + e.getMessage());\n+            }\n+            authenticate();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof OnOffType && floureonDevice != null) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof StringType && floureonDevice != null) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power off {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof QuantityType && floureonDevice != null) {\n+            try {\n+                QuantityType<?> temperatureQuantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+                if (temperatureQuantityType != null) {\n+                    floureonDevice.setThermostatTemp(temperatureQuantityType.doubleValue());\n+                } else {\n+                    logger.warn(\"Could not convert {} to \u00b0C\", command);\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting setpoint of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSensorCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof StringType && floureonDevice != null) {\n+            try {\n+                BaseStatusInfo statusInfo = floureonDevice.getBasicStatus();\n+                if (SENSOR_INTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.INTERNAL);\n+                } else if (SENSOR_EXTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.EXTERNAL);\n+                } else {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(),\n+                            SensorControl.INTERNAL_TEMP_EXTERNAL_LIMIT);\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while trying to set sensor mode {}: {}\", command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleRemoteLockCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof OnOffType && floureonDevice != null) {\n+            try {\n+                floureonDevice.setLock(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting remote lock of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetTimeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof DateTimeType) {\n+            ZonedDateTime zonedDateTime = ((DateTimeType) command).getZonedDateTime();\n+            try {\n+                new SetTimeCommand(tob(zonedDateTime.getHour()), tob(zonedDateTime.getMinute()),\n+                        tob(zonedDateTime.getSecond()), tob(zonedDateTime.getDayOfWeek().getValue()))\n+                                .execute(floureonDevice);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting time of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    protected void refreshData() {\n+        if (ThingStatus.ONLINE != thing.getStatus()) {\n+            return;\n+        }\n+\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (floureonDevice != null) {\n+            try {\n+                AdvancedStatusInfo advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+                if (advancedStatusInfo == null) {\n+                    logger.warn(\"Device {} did not return any data. Trying to reauthenticate...\", thing.getUID());\n+                    authenticate();\n+                    advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+                }\n+                if (advancedStatusInfo == null) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Device not responding.\");\n+                    return;\n+                }\n+                logger.trace(\"Retrieved data from device {}: {}\", thing.getUID(), advancedStatusInfo);\n+                updateState(ROOM_TEMPERATURE, new QuantityType<>(advancedStatusInfo.getRoomTemp(), SIUnits.CELSIUS));\n+                updateState(ROOM_TEMPERATURE_EXTERNAL_SENSOR,\n+                        new QuantityType<>(advancedStatusInfo.getExternalTemp(), SIUnits.CELSIUS));\n+                updateState(SETPOINT, new QuantityType<>(advancedStatusInfo.getThermostatTemp(), SIUnits.CELSIUS));\n+                updateState(POWER, OnOffType.from(advancedStatusInfo.getPower()));\n+                updateState(MODE, StringType.valueOf(advancedStatusInfo.getAutoMode() ? \"auto\" : \"manual\"));\n+                updateState(SENSOR, StringType.valueOf(advancedStatusInfo.getSensorControl().name()));\n+                updateState(TEMPERATURE_OFFSET, new QuantityType<>(advancedStatusInfo.getDif(), SIUnits.CELSIUS));\n+                updateState(ACTIVE, OnOffType.from(advancedStatusInfo.getActive()));\n+                updateState(REMOTE_LOCK, OnOffType.from(advancedStatusInfo.getRemoteLock()));\n+                updateState(TIME, new DateTimeType(getTimestamp(advancedStatusInfo)));\n+            } catch (Exception e) {\n+                logger.warn(\"Error while retrieving data for {}: {}\", thing.getUID(), e.getMessage());", "originalCommit": "8a66147bf9b8e53eb40a568cabdd09cab2750b71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ5NzIyNA==", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r571497224", "bodyText": "done.", "author": "flo-02-mu", "createdAt": "2021-02-06T22:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc3NzE0NQ=="}], "type": "inlineReview"}, {"oid": "24ae00c1149f34ff1ab4757cb3a4bb0e77795b39", "url": "https://github.com/openhab/openhab-addons/commit/24ae00c1149f34ff1ab4757cb3a4bb0e77795b39", "message": "Merge remote-tracking branch 'upstream/main' into broadlinkthermostat", "committedDate": "2021-02-06T21:05:56Z", "type": "commit"}, {"oid": "d8e3169b11c206607998214ab987ae47f2da2c75", "url": "https://github.com/openhab/openhab-addons/commit/d8e3169b11c206607998214ab987ae47f2da2c75", "message": "Update license files.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2021-02-06T21:09:38Z", "type": "commit"}, {"oid": "7795f5841392ed9ff4120a30071d62e801374736", "url": "https://github.com/openhab/openhab-addons/commit/7795f5841392ed9ff4120a30071d62e801374736", "message": "Address review comments:\n* introduce cache for AdvanceStatusInfo\n* Move authentication outside of initialize step\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>", "committedDate": "2021-02-06T22:19:01Z", "type": "commit"}]}