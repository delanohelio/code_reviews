{"pr_number": 6785, "pr_title": "[openthermgateway] Initial contribution", "pr_author": "ArjenKorevaar", "pr_createdAt": "2020-01-07T14:10:17Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/6785", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MDE1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367360152", "body": "This is generally designed as a `Set` because that's more efficient in lookup. The list is used to check if a value is present.", "bodyText": "This is generally designed as a Set because that's more efficient in lookup. The list is used to check if a value is present.", "bodyHTML": "<p dir=\"auto\">This is generally designed as a <code>Set</code> because that's more efficient in lookup. The list is used to check if a value is present.</p>", "author": "Hilbrand", "createdAt": "2020-01-16T11:10:51Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/OpenThermGatewayBindingConstants.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link OpenThermGatewayBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayBindingConstants {\n+\n+    private static final String BINDING_ID = \"openthermgateway\";\n+\n+    // List of all Thing Type UID's\n+    public static final ThingTypeUID MAIN_THING_TYPE = new ThingTypeUID(BINDING_ID, \"otgw\");\n+\n+    // List of all Channel id's\n+    public static final String CHANNEL_SEND_COMMAND = \"sendcommand\";\n+\n+    public static final String CHANNEL_OVERRIDE_SETPOINT_TEMPORARY = \"temperaturetemporary\";\n+    public static final String CHANNEL_OVERRIDE_SETPOINT_CONSTANT = \"temperatureconstant\";\n+    public static final String CHANNEL_OVERRIDE_DHW_SETPOINT = \"overridedhwsetpoint\";\n+    public static final String CHANNEL_ROOM_TEMPERATURE = \"roomtemp\";\n+    public static final String CHANNEL_ROOM_SETPOINT = \"roomsetpoint\";\n+    public static final String CHANNEL_FLOW_TEMPERATURE = \"flowtemp\";\n+    public static final String CHANNEL_RETURN_TEMPERATURE = \"returntemp\";\n+    public static final String CHANNEL_OUTSIDE_TEMPERATURE = \"outsidetemp\";\n+    public static final String CHANNEL_CENTRAL_HEATING_WATER_SETPOINT = \"controlsetpoint\";\n+    public static final String CHANNEL_CENTRAL_HEATING_WATER_PRESSURE = \"waterpressure\";\n+    public static final String CHANNEL_CENTRAL_HEATING_ENABLED = \"ch_enable\";\n+    public static final String CHANNEL_CENTRAL_HEATING_MODE = \"ch_mode\";\n+    public static final String CHANNEL_DOMESTIC_HOT_WATER_TEMPERATURE = \"dhwtemp\";\n+    public static final String CHANNEL_DOMESTIC_HOT_WATER_ENABLED = \"dhw_enable\";\n+    public static final String CHANNEL_DOMESTIC_HOT_WATER_MODE = \"dhw_mode\";\n+    public static final String CHANNEL_DOMESTIC_HOT_WATER_SETPOINT = \"tdhwset\";\n+    public static final String CHANNEL_FLAME = \"flame\";\n+    public static final String CHANNEL_RELATIVE_MODULATION_LEVEL = \"modulevel\";\n+    public static final String CHANNEL_MAXIMUM_MODULATION_LEVEL = \"maxrelmdulevel\";\n+    public static final String CHANNEL_FAULT = \"fault\";\n+    public static final String CHANNEL_SERVICEREQUEST = \"servicerequest\";\n+    public static final String CHANNEL_REMOTE_RESET = \"lockout-reset\";\n+    public static final String CHANNEL_LOW_WATER_PRESSURE = \"lowwaterpress\";\n+    public static final String CHANNEL_GAS_FLAME_FAULT = \"gasflamefault\";\n+    public static final String CHANNEL_AIR_PRESSURE_FAULT = \"airpressfault\";\n+    public static final String CHANNEL_WATER_OVER_TEMP = \"waterovtemp\";\n+    public static final String CHANNEL_OEM_FAULTCODE = \"oemfaultcode\";\n+\n+    public static final List<String> SUPPORTED_CHANNEL_IDS = Arrays.asList(CHANNEL_ROOM_TEMPERATURE,", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4OTk1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367589952", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MDE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "21ba1500b317c036d39b160ba29578d05848a715", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/OpenThermGatewayBindingConstants.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/OpenThermGatewayBindingConstants.java\nindex b7d28451a5..fca58cfc12 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/OpenThermGatewayBindingConstants.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/OpenThermGatewayBindingConstants.java\n", "chunk": "@@ -63,12 +67,13 @@ public class OpenThermGatewayBindingConstants {\n     public static final String CHANNEL_WATER_OVER_TEMP = \"waterovtemp\";\n     public static final String CHANNEL_OEM_FAULTCODE = \"oemfaultcode\";\n \n-    public static final List<String> SUPPORTED_CHANNEL_IDS = Arrays.asList(CHANNEL_ROOM_TEMPERATURE,\n-            CHANNEL_ROOM_SETPOINT, CHANNEL_FLOW_TEMPERATURE, CHANNEL_RETURN_TEMPERATURE, CHANNEL_OUTSIDE_TEMPERATURE,\n-            CHANNEL_CENTRAL_HEATING_WATER_PRESSURE, CHANNEL_CENTRAL_HEATING_ENABLED, CHANNEL_CENTRAL_HEATING_MODE,\n-            CHANNEL_CENTRAL_HEATING_WATER_SETPOINT, CHANNEL_DOMESTIC_HOT_WATER_TEMPERATURE,\n-            CHANNEL_DOMESTIC_HOT_WATER_ENABLED, CHANNEL_DOMESTIC_HOT_WATER_MODE, CHANNEL_DOMESTIC_HOT_WATER_SETPOINT,\n-            CHANNEL_FLAME, CHANNEL_RELATIVE_MODULATION_LEVEL, CHANNEL_MAXIMUM_MODULATION_LEVEL, CHANNEL_FAULT,\n-            CHANNEL_SERVICEREQUEST, CHANNEL_REMOTE_RESET, CHANNEL_LOW_WATER_PRESSURE, CHANNEL_GAS_FLAME_FAULT,\n-            CHANNEL_AIR_PRESSURE_FAULT, CHANNEL_WATER_OVER_TEMP, CHANNEL_OEM_FAULTCODE);\n+    public static final Set<String> SUPPORTED_CHANNEL_IDS = Collections.unmodifiableSet(Stream.of(\n+        CHANNEL_ROOM_TEMPERATURE, CHANNEL_ROOM_SETPOINT, CHANNEL_FLOW_TEMPERATURE, CHANNEL_RETURN_TEMPERATURE,\n+        CHANNEL_OUTSIDE_TEMPERATURE, CHANNEL_CENTRAL_HEATING_WATER_PRESSURE, CHANNEL_CENTRAL_HEATING_ENABLED,\n+        CHANNEL_CENTRAL_HEATING_MODE, CHANNEL_CENTRAL_HEATING_WATER_SETPOINT, CHANNEL_DOMESTIC_HOT_WATER_TEMPERATURE,\n+        CHANNEL_DOMESTIC_HOT_WATER_ENABLED, CHANNEL_DOMESTIC_HOT_WATER_MODE, CHANNEL_DOMESTIC_HOT_WATER_SETPOINT,\n+        CHANNEL_FLAME, CHANNEL_RELATIVE_MODULATION_LEVEL, CHANNEL_MAXIMUM_MODULATION_LEVEL, CHANNEL_FAULT,\n+        CHANNEL_SERVICEREQUEST, CHANNEL_REMOTE_RESET, CHANNEL_LOW_WATER_PRESSURE, CHANNEL_GAS_FLAME_FAULT,\n+        CHANNEL_AIR_PRESSURE_FAULT, CHANNEL_WATER_OVER_TEMP, CHANNEL_OEM_FAULTCODE\n+        ).collect(Collectors.toSet()));\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MzgyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367363829", "body": "Enum convention should all be upper case, and/or use underscore:\r\n```suggestion\r\n    FLAGS,\r\n```", "bodyText": "Enum convention should all be upper case, and/or use underscore:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Flags,\n          \n          \n            \n                FLAGS,", "bodyHTML": "<p dir=\"auto\">Enum convention should all be upper case, and/or use underscore:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi x x-first x-last\">Flags</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-c1 x x-first x-last\">FLAGS</span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T11:20:05Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataType.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum DataType {\n+    Flags,", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MjAwNA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582004", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MzgyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataType.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataType.java\nindex 99b47f815a..21e6974be6 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataType.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataType.java\n", "chunk": "@@ -16,11 +16,11 @@ package org.openhab.binding.openthermgateway.internal;\n  * @author Arjen Korevaar - Initial contribution\n  */\n public enum DataType {\n-    Flags,\n-    Uint8,\n-    Int8,\n-    Float,\n-    Uint16,\n-    Int16,\n-    DoWToD\n+    FLAGS,\n+    UINT8,\n+    INT8,\n+    FLOAT,\n+    UINT16,\n+    INT16,\n+    DOWTOD\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NjM2NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367366364", "body": "Use Java 8 notation:\r\n\r\n```suggestion\r\n                scheduler.schedule(() -> {\r\n```", "bodyText": "Use Java 8 notation:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            scheduler.schedule(new Runnable() {\n          \n          \n            \n            \n          \n          \n            \n                                @Override\n          \n          \n            \n                                public void run() {\n          \n          \n            \n                            scheduler.schedule(() -> {", "bodyHTML": "<p dir=\"auto\">Use Java 8 notation:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                scheduler<span class=\"pl-k\">.</span>schedule(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Runnable</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">@Override</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> run() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                scheduler<span class=\"pl-k\">.</span>schedule(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T11:26:13Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU5NjQxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367596415", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T19:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NjM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..b626d4cc2b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -126,7 +126,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n                             connect();\n                         }\n                     }\n-                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+                }, config.connectionRetryInterval, TimeUnit.SECONDS);\n             }\n         } catch (IllegalStateException ex) {\n         }\n", "next_change": {"commit": "2dd2016c926678c7d6b858a4347265a7583b36c4", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b626d4cc2b..c3e50e0ada 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -118,13 +118,9 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n             // retry connection if disconnect is not explicitly requested\n             if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n-                scheduler.schedule(new Runnable() {\n-\n-                    @Override\n-                    public void run() {\n-                        if (connector != null && !connecting && !connector.isConnected()) {\n-                            connect();\n-                        }\n+                scheduler.schedule(() -> {\n+                    if (connector != null && !connecting && !connector.isConnected()) {\n+                        connect();\n                     }\n                 }, config.connectionRetryInterval, TimeUnit.SECONDS);\n             }\n", "next_change": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex c3e50e0ada..4564dc9b5d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -112,20 +109,17 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void disconnected() {\n         connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE);\n \n-        try {\n-            updateStatus(ThingStatus.OFFLINE);\n-\n-            // retry connection if disconnect is not explicitly requested\n-            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n-                scheduler.schedule(() -> {\n-                    if (connector != null && !connecting && !connector.isConnected()) {\n-                        connect();\n-                    }\n-                }, config.connectionRetryInterval, TimeUnit.SECONDS);\n-            }\n-        } catch (IllegalStateException ex) {\n-        }\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n     }\n \n     @Override\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..b5818019e7 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -108,18 +125,24 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n         connecting = false;\n-        \n-        updateStatus(ThingStatus.OFFLINE);\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n \n         // retry connection if disconnect is not explicitly requested\n-        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+        if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n             scheduler.schedule(() -> {\n-                if (connector != null && !connecting && !connector.isConnected()) {\n+                if (conn != null && !connecting && !conn.isConnected()) {\n                     connect();\n                 }\n-            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n-        }    \n+            }, conf.connectionRetryInterval, TimeUnit.SECONDS);\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "8822e46eb435f89bdd4f1b31fdf79d2a7227cb42", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b5818019e7..aaa6ba3552 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -147,6 +145,8 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n+        updateStatus(ThingStatus.ONLINE);\n+\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": {"commit": "eb1bb1de0e9d893eb1c7a23660f3d56a9eec9849", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex aaa6ba3552..1a1e88ccdc 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -145,8 +147,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n-        updateStatus(ThingStatus.ONLINE);\n-\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": null}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..b5818019e7 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -127,7 +150,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n-            for (DataItem dataItem: dataItems) {\n+            for (DataItem dataItem : dataItems) {\n                 String channelId = dataItem.getSubject();\n \n                 if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n", "next_change": {"commit": "8822e46eb435f89bdd4f1b31fdf79d2a7227cb42", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b5818019e7..aaa6ba3552 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -147,6 +145,8 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n+        updateStatus(ThingStatus.ONLINE);\n+\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": {"commit": "eb1bb1de0e9d893eb1c7a23660f3d56a9eec9849", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex aaa6ba3552..1a1e88ccdc 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -145,8 +147,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n-        updateStatus(ThingStatus.ONLINE);\n-\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NjU3MA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367366570", "body": "```suggestion\r\n                }, config.connectionRetryInterval, TimeUnit.SECONDS);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n          \n          \n            \n                            }, config.connectionRetryInterval, TimeUnit.SECONDS);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                }, config<span class=\"pl-k\">.</span>connectionRetryInterval<span class=\"x x-first\"> </span><span class=\"pl-k x\">*</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">1000</span>, <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">MILLISECONDS</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                }, config<span class=\"pl-k\">.</span>connectionRetryInterval, <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">SECONDS</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T11:26:45Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MjE0MA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582140", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NjU3MA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..b626d4cc2b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -126,7 +126,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n                             connect();\n                         }\n                     }\n-                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+                }, config.connectionRetryInterval, TimeUnit.SECONDS);\n             }\n         } catch (IllegalStateException ex) {\n         }\n", "next_change": {"commit": "2dd2016c926678c7d6b858a4347265a7583b36c4", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b626d4cc2b..c3e50e0ada 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -118,13 +118,9 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n             // retry connection if disconnect is not explicitly requested\n             if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n-                scheduler.schedule(new Runnable() {\n-\n-                    @Override\n-                    public void run() {\n-                        if (connector != null && !connecting && !connector.isConnected()) {\n-                            connect();\n-                        }\n+                scheduler.schedule(() -> {\n+                    if (connector != null && !connecting && !connector.isConnected()) {\n+                        connect();\n                     }\n                 }, config.connectionRetryInterval, TimeUnit.SECONDS);\n             }\n", "next_change": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex c3e50e0ada..4564dc9b5d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -112,20 +109,17 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void disconnected() {\n         connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE);\n \n-        try {\n-            updateStatus(ThingStatus.OFFLINE);\n-\n-            // retry connection if disconnect is not explicitly requested\n-            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n-                scheduler.schedule(() -> {\n-                    if (connector != null && !connecting && !connector.isConnected()) {\n-                        connect();\n-                    }\n-                }, config.connectionRetryInterval, TimeUnit.SECONDS);\n-            }\n-        } catch (IllegalStateException ex) {\n-        }\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n     }\n \n     @Override\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..b5818019e7 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -108,18 +125,24 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n         connecting = false;\n-        \n-        updateStatus(ThingStatus.OFFLINE);\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n \n         // retry connection if disconnect is not explicitly requested\n-        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+        if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n             scheduler.schedule(() -> {\n-                if (connector != null && !connecting && !connector.isConnected()) {\n+                if (conn != null && !connecting && !conn.isConnected()) {\n                     connect();\n                 }\n-            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n-        }    \n+            }, conf.connectionRetryInterval, TimeUnit.SECONDS);\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "8822e46eb435f89bdd4f1b31fdf79d2a7227cb42", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b5818019e7..aaa6ba3552 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -147,6 +145,8 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n+        updateStatus(ThingStatus.ONLINE);\n+\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": {"commit": "eb1bb1de0e9d893eb1c7a23660f3d56a9eec9849", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex aaa6ba3552..1a1e88ccdc 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -145,8 +147,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n-        updateStatus(ThingStatus.ONLINE);\n-\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": null}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..b5818019e7 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -127,7 +150,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n-            for (DataItem dataItem: dataItems) {\n+            for (DataItem dataItem : dataItems) {\n                 String channelId = dataItem.getSubject();\n \n                 if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n", "next_change": {"commit": "8822e46eb435f89bdd4f1b31fdf79d2a7227cb42", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b5818019e7..aaa6ba3552 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -147,6 +145,8 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n+        updateStatus(ThingStatus.ONLINE);\n+\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": {"commit": "eb1bb1de0e9d893eb1c7a23660f3d56a9eec9849", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex aaa6ba3552..1a1e88ccdc 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -145,8 +147,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n-        updateStatus(ThingStatus.ONLINE);\n-\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3OTAzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367379031", "body": "Only catch the specific Exception.", "bodyText": "Only catch the specific Exception.", "bodyHTML": "<p dir=\"auto\">Only catch the specific Exception.</p>", "author": "Hilbrand", "createdAt": "2020-01-16T11:58:04Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n+                        break;\n+                    case DoWToD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String format, String arg) {\n+        String message = String.format(format, arg);\n+        log(loglevel, message);\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message, Throwable t) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message, t);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message, t);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message, t);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message, t);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message, t);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        try {\n+            disconnect();\n+\n+            logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+            explicitDisconnect = false;\n+\n+            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            new Thread(connector).start();\n+\n+            logger.info(\"OpenTherm Gateway connector started\");\n+\n+            return true;\n+        } catch (Exception ex) {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NzA4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368287087", "bodyText": "Removed catching generic exceptions", "author": "ArjenKorevaar", "createdAt": "2020-01-19T11:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3OTAzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..4564dc9b5d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -266,11 +250,12 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n             logger.info(\"OpenTherm Gateway connector started\");\n \n             return true;\n-        } catch (Exception ex) {\n-            logger.error(\"error\", ex);\n-        }\n+       }\n+       catch (Exception ex) {\n+            disconnected();\n+       }\n \n-        return false;\n+       return false;\n     }\n \n     boolean explicitDisconnect = false;\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..f80442a117 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -237,29 +192,20 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     }\n \n     private synchronized boolean connect() {\n-       try {\n-            disconnect();\n+        disconnect();\n \n-            logger.info(\"Starting OpenTherm Gateway connector\");\n+        logger.info(\"Starting OpenTherm Gateway connector\");\n \n-            explicitDisconnect = false;\n+        explicitDisconnect = false;\n \n-            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n-            new Thread(connector).start();\n+        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+        new Thread(connector).start();\n \n-            logger.info(\"OpenTherm Gateway connector started\");\n+        logger.info(\"OpenTherm Gateway connector started\");\n \n-            return true;\n-       }\n-       catch (Exception ex) {\n-            disconnected();\n-       }\n-\n-       return false;\n+        return true;\n     }\n \n-    boolean explicitDisconnect = false;\n-\n     private synchronized void disconnect() {\n         if (connector != null) {\n             if (connector.isConnected()) {\n", "next_change": {"commit": "550abf0f6ac5feafd97aba9a916d036e4aa5ead5", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex f80442a117..fa731111f6 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -191,25 +192,28 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         return connect();\n     }\n \n-    private synchronized boolean connect() {\n+    private boolean connect() {\n         disconnect();\n \n-        logger.info(\"Starting OpenTherm Gateway connector\");\n+        logger.debug(\"Starting OpenTherm Gateway connector\");\n \n         explicitDisconnect = false;\n \n         connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n-        new Thread(connector).start();\n \n-        logger.info(\"OpenTherm Gateway connector started\");\n+        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+        thread.setDaemon(true);\n+        thread.start();\n+\n+        logger.debug(\"OpenTherm Gateway connector started\");\n \n         return true;\n     }\n \n-    private synchronized void disconnect() {\n+    private void disconnect() {\n         if (connector != null) {\n             if (connector.isConnected()) {\n-                logger.info(\"Stopping OpenTherm Gateway connector\");\n+                logger.debug(\"Stopping OpenTherm Gateway connector\");\n \n                 explicitDisconnect = true;\n                 connector.stop();\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex fa731111f6..b5818019e7 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -193,30 +214,40 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     }\n \n     private boolean connect() {\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n         disconnect();\n \n-        logger.debug(\"Starting OpenTherm Gateway connector\");\n+        if (conf != null) {\n+            logger.debug(\"Starting OpenTherm Gateway connector\");\n \n-        explicitDisconnect = false;\n+            explicitDisconnect = false;\n \n-        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            connector = new OpenThermGatewaySocketConnector(this, conf.ipaddress, conf.port);\n \n-        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n-        thread.setDaemon(true);\n-        thread.start();\n+            Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+            thread.setDaemon(true);\n+            thread.start();\n \n-        logger.debug(\"OpenTherm Gateway connector started\");\n+            logger.debug(\"OpenTherm Gateway connector started\");\n \n-        return true;\n+            return true;\n+        }\n+\n+        return false;\n     }\n \n     private void disconnect() {\n-        if (connector != null) {\n-            if (connector.isConnected()) {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        if (conn != null) {\n+            if (conn.isConnected()) {\n                 logger.debug(\"Stopping OpenTherm Gateway connector\");\n \n                 explicitDisconnect = true;\n-                connector.stop();\n+                conn.stop();\n             }\n \n             connector = null;\n", "next_change": {"commit": "e84b7d1ec8a5b0a782b25f8c3101d85355823c3e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b5818019e7..866bd16690 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -254,7 +254,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         }\n     }\n \n-    private String getGatewayCodeFromChannel(String channel) throws IllegalArgumentException {\n+    private @Nullable String getGatewayCodeFromChannel(String channel) throws IllegalArgumentException {\n         switch (channel) {\n             case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_SETPOINT_TEMPORARY:\n                 return GatewayCommandCode.TemperatureTemporary;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3OTU2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367379566", "body": "Only log to error if it's a bug. If this exception happens you probably also want to inform the user by setting the thing offline with the exception message.", "bodyText": "Only log to error if it's a bug. If this exception happens you probably also want to inform the user by setting the thing offline with the exception message.", "bodyHTML": "<p dir=\"auto\">Only log to error if it's a bug. If this exception happens you probably also want to inform the user by setting the thing offline with the exception message.</p>", "author": "Hilbrand", "createdAt": "2020-01-16T11:59:16Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n+                        break;\n+                    case DoWToD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String format, String arg) {\n+        String message = String.format(format, arg);\n+        log(loglevel, message);\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message, Throwable t) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message, t);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message, t);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message, t);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message, t);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message, t);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        try {\n+            disconnect();\n+\n+            logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+            explicitDisconnect = false;\n+\n+            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            new Thread(connector).start();\n+\n+            logger.info(\"OpenTherm Gateway connector started\");\n+\n+            return true;\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NzEyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368287121", "bodyText": "Adjusted to debug level", "author": "ArjenKorevaar", "createdAt": "2020-01-19T11:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3OTU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..4564dc9b5d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -266,11 +250,12 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n             logger.info(\"OpenTherm Gateway connector started\");\n \n             return true;\n-        } catch (Exception ex) {\n-            logger.error(\"error\", ex);\n-        }\n+       }\n+       catch (Exception ex) {\n+            disconnected();\n+       }\n \n-        return false;\n+       return false;\n     }\n \n     boolean explicitDisconnect = false;\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..f80442a117 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -237,29 +192,20 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     }\n \n     private synchronized boolean connect() {\n-       try {\n-            disconnect();\n+        disconnect();\n \n-            logger.info(\"Starting OpenTherm Gateway connector\");\n+        logger.info(\"Starting OpenTherm Gateway connector\");\n \n-            explicitDisconnect = false;\n+        explicitDisconnect = false;\n \n-            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n-            new Thread(connector).start();\n+        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+        new Thread(connector).start();\n \n-            logger.info(\"OpenTherm Gateway connector started\");\n+        logger.info(\"OpenTherm Gateway connector started\");\n \n-            return true;\n-       }\n-       catch (Exception ex) {\n-            disconnected();\n-       }\n-\n-       return false;\n+        return true;\n     }\n \n-    boolean explicitDisconnect = false;\n-\n     private synchronized void disconnect() {\n         if (connector != null) {\n             if (connector.isConnected()) {\n", "next_change": {"commit": "550abf0f6ac5feafd97aba9a916d036e4aa5ead5", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex f80442a117..fa731111f6 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -191,25 +192,28 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         return connect();\n     }\n \n-    private synchronized boolean connect() {\n+    private boolean connect() {\n         disconnect();\n \n-        logger.info(\"Starting OpenTherm Gateway connector\");\n+        logger.debug(\"Starting OpenTherm Gateway connector\");\n \n         explicitDisconnect = false;\n \n         connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n-        new Thread(connector).start();\n \n-        logger.info(\"OpenTherm Gateway connector started\");\n+        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+        thread.setDaemon(true);\n+        thread.start();\n+\n+        logger.debug(\"OpenTherm Gateway connector started\");\n \n         return true;\n     }\n \n-    private synchronized void disconnect() {\n+    private void disconnect() {\n         if (connector != null) {\n             if (connector.isConnected()) {\n-                logger.info(\"Stopping OpenTherm Gateway connector\");\n+                logger.debug(\"Stopping OpenTherm Gateway connector\");\n \n                 explicitDisconnect = true;\n                 connector.stop();\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex fa731111f6..b5818019e7 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -193,30 +214,40 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     }\n \n     private boolean connect() {\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n         disconnect();\n \n-        logger.debug(\"Starting OpenTherm Gateway connector\");\n+        if (conf != null) {\n+            logger.debug(\"Starting OpenTherm Gateway connector\");\n \n-        explicitDisconnect = false;\n+            explicitDisconnect = false;\n \n-        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            connector = new OpenThermGatewaySocketConnector(this, conf.ipaddress, conf.port);\n \n-        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n-        thread.setDaemon(true);\n-        thread.start();\n+            Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+            thread.setDaemon(true);\n+            thread.start();\n \n-        logger.debug(\"OpenTherm Gateway connector started\");\n+            logger.debug(\"OpenTherm Gateway connector started\");\n \n-        return true;\n+            return true;\n+        }\n+\n+        return false;\n     }\n \n     private void disconnect() {\n-        if (connector != null) {\n-            if (connector.isConnected()) {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        if (conn != null) {\n+            if (conn.isConnected()) {\n                 logger.debug(\"Stopping OpenTherm Gateway connector\");\n \n                 explicitDisconnect = true;\n-                connector.stop();\n+                conn.stop();\n             }\n \n             connector = null;\n", "next_change": {"commit": "e84b7d1ec8a5b0a782b25f8c3101d85355823c3e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b5818019e7..866bd16690 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -254,7 +254,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         }\n     }\n \n-    private String getGatewayCodeFromChannel(String channel) throws IllegalArgumentException {\n+    private @Nullable String getGatewayCodeFromChannel(String channel) throws IllegalArgumentException {\n         switch (channel) {\n             case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_SETPOINT_TEMPORARY:\n                 return GatewayCommandCode.TemperatureTemporary;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MDM3NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367380374", "body": "Always log catched exceptions! Do you really need to catch the exception here? I've not seen it in other places, so you should probably remove the catch here.", "bodyText": "Always log catched exceptions! Do you really need to catch the exception here? I've not seen it in other places, so you should probably remove the catch here.", "bodyHTML": "<p dir=\"auto\">Always log catched exceptions! Do you really need to catch the exception here? I've not seen it in other places, so you should probably remove the catch here.</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:01:30Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n+                        break;\n+                    case DoWToD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MjI1NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367792254", "bodyText": "Removed", "author": "ArjenKorevaar", "createdAt": "2020-01-17T06:57:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MDM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..b626d4cc2b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -149,31 +147,27 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case Flags:\n-                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case Uint8:\n-                    case Uint16:\n-                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n                         break;\n-                    case Int8:\n-                    case Int16:\n-                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n                         break;\n-                    case Float:\n-                        state = TypeConverter.toDecimalType(message.getFloat());\n+                    case FLOAT:\n+                        state = new DecimalType(message.getFloat());\n                         break;\n-                    case DoWToD:\n+                    case DOWTOD:\n                         break;\n                 }\n \n                 if (state != null) {\n                     logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n-                    try {\n-                        updateState(channelId, state);\n-                    } catch (IllegalStateException e) {\n-                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n-                    }\n+                    updateState(channelId, state);\n                 }\n             }\n         }\n", "next_change": {"commit": "e2e66bb9838bfc21ac4acf458c3b99391651ce63", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b626d4cc2b..ed4ad29992 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -159,12 +150,14 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n                         state = new DecimalType(message.getInt(dataItem.getByteType()));\n                         break;\n                     case FLOAT:\n-                        state = new DecimalType(message.getFloat());\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n                         break;\n                     case DOWTOD:\n                         break;\n                 }\n-\n+          \n                 if (state != null) {\n                     logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n                     updateState(channelId, state);\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex ed4ad29992..0861edc52c 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -166,58 +168,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         }\n     }\n \n-    @Override\n-    public void log(LogLevel loglevel, String format, String arg) {\n-        String message = String.format(format, arg);\n-        log(loglevel, message);\n-    }\n-\n-    @Override\n-    public void log(LogLevel loglevel, String message, Throwable t) {\n-        switch (loglevel) {\n-            case TRACE:\n-                logger.trace(\"{}\", message, t);\n-                break;\n-            case DEBUG:\n-                logger.debug(\"{}\", message, t);\n-                break;\n-            case INFO:\n-                logger.info(\"{}\", message, t);\n-                break;\n-            case WARNING:\n-                logger.warn(\"{}\", message, t);\n-                break;\n-            case ERROR:\n-                logger.error(\"{}\", message, t);\n-                break;\n-            default:\n-                break;\n-        }\n-    }\n-\n-    @Override\n-    public void log(LogLevel loglevel, String message) {\n-        switch (loglevel) {\n-            case TRACE:\n-                logger.trace(\"{}\", message);\n-                break;\n-            case DEBUG:\n-                logger.debug(\"{}\", message);\n-                break;\n-            case INFO:\n-                logger.info(\"{}\", message);\n-                break;\n-            case WARNING:\n-                logger.warn(\"{}\", message);\n-                break;\n-            case ERROR:\n-                logger.error(\"{}\", message);\n-                break;\n-            default:\n-                break;\n-        }\n-    }\n-\n     @Override\n     public void handleRemoval() {\n         logger.debug(\"Removing OpenTherm Gateway handler\");\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MDkxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367380911", "body": "```suggestion\r\n            for (DataItem dataItem: dataItems) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; i < dataItems.length; i++) {\n          \n          \n            \n                        for (DataItem dataItem: dataItems) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">for</span> (<span class=\"pl-k x x-first\">int</span><span class=\"x\"> i </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">0</span><span class=\"x\">; i </span><span class=\"pl-k x\">&lt;</span><span class=\"x x-last\"> </span>dataItems<span class=\"pl-k x x-first\">.</span><span class=\"x\">length; i</span><span class=\"pl-k x x-last\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">for</span> (<span class=\"pl-smi x x-first\">DataItem</span><span class=\"x\"> dataItem</span><span class=\"pl-k x\">:</span><span class=\"x x-last\"> </span>dataItems) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T12:02:53Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MjQyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582425", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MDkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..b626d4cc2b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -137,9 +137,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n-            for (int i = 0; i < dataItems.length; i++) {\n-                DataItem dataItem = dataItems[i];\n-\n+            for (DataItem dataItem: dataItems) {\n                 String channelId = dataItem.getSubject();\n \n                 if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b626d4cc2b..b5818019e7 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -137,7 +150,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n-            for (DataItem dataItem: dataItems) {\n+            for (DataItem dataItem : dataItems) {\n                 String channelId = dataItem.getSubject();\n \n                 if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n", "next_change": {"commit": "8822e46eb435f89bdd4f1b31fdf79d2a7227cb42", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b5818019e7..aaa6ba3552 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -147,6 +145,8 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n+        updateStatus(ThingStatus.ONLINE);\n+\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": {"commit": "eb1bb1de0e9d893eb1c7a23660f3d56a9eec9849", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex aaa6ba3552..1a1e88ccdc 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -145,8 +147,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n-        updateStatus(ThingStatus.ONLINE);\n-\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MTU2NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367381564", "body": "Remove this catch", "bodyText": "Remove this catch", "bodyHTML": "<p dir=\"auto\">Remove this catch</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:04:20Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MjY3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367792675", "bodyText": "Removed", "author": "ArjenKorevaar", "createdAt": "2020-01-17T06:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MTU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..b626d4cc2b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -126,7 +126,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n                             connect();\n                         }\n                     }\n-                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+                }, config.connectionRetryInterval, TimeUnit.SECONDS);\n             }\n         } catch (IllegalStateException ex) {\n         }\n", "next_change": {"commit": "2dd2016c926678c7d6b858a4347265a7583b36c4", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b626d4cc2b..c3e50e0ada 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -118,13 +118,9 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n             // retry connection if disconnect is not explicitly requested\n             if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n-                scheduler.schedule(new Runnable() {\n-\n-                    @Override\n-                    public void run() {\n-                        if (connector != null && !connecting && !connector.isConnected()) {\n-                            connect();\n-                        }\n+                scheduler.schedule(() -> {\n+                    if (connector != null && !connecting && !connector.isConnected()) {\n+                        connect();\n                     }\n                 }, config.connectionRetryInterval, TimeUnit.SECONDS);\n             }\n", "next_change": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex c3e50e0ada..4564dc9b5d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -112,20 +109,17 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void disconnected() {\n         connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE);\n \n-        try {\n-            updateStatus(ThingStatus.OFFLINE);\n-\n-            // retry connection if disconnect is not explicitly requested\n-            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n-                scheduler.schedule(() -> {\n-                    if (connector != null && !connecting && !connector.isConnected()) {\n-                        connect();\n-                    }\n-                }, config.connectionRetryInterval, TimeUnit.SECONDS);\n-            }\n-        } catch (IllegalStateException ex) {\n-        }\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n     }\n \n     @Override\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..b5818019e7 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -108,18 +125,24 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n         connecting = false;\n-        \n-        updateStatus(ThingStatus.OFFLINE);\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n \n         // retry connection if disconnect is not explicitly requested\n-        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+        if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n             scheduler.schedule(() -> {\n-                if (connector != null && !connecting && !connector.isConnected()) {\n+                if (conn != null && !connecting && !conn.isConnected()) {\n                     connect();\n                 }\n-            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n-        }    \n+            }, conf.connectionRetryInterval, TimeUnit.SECONDS);\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "8822e46eb435f89bdd4f1b31fdf79d2a7227cb42", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b5818019e7..aaa6ba3552 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -147,6 +145,8 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n+        updateStatus(ThingStatus.ONLINE);\n+\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": {"commit": "eb1bb1de0e9d893eb1c7a23660f3d56a9eec9849", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex aaa6ba3552..1a1e88ccdc 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -145,8 +147,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n-        updateStatus(ThingStatus.ONLINE);\n-\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": null}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..b5818019e7 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -127,7 +150,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n-            for (DataItem dataItem: dataItems) {\n+            for (DataItem dataItem : dataItems) {\n                 String channelId = dataItem.getSubject();\n \n                 if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n", "next_change": {"commit": "8822e46eb435f89bdd4f1b31fdf79d2a7227cb42", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b5818019e7..aaa6ba3552 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -147,6 +145,8 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n+        updateStatus(ThingStatus.ONLINE);\n+\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": {"commit": "eb1bb1de0e9d893eb1c7a23660f3d56a9eec9849", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex aaa6ba3552..1a1e88ccdc 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -145,8 +147,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n-        updateStatus(ThingStatus.ONLINE);\n-\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MTcxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367381715", "body": "Is this catch needed?", "bodyText": "Is this catch needed?", "bodyHTML": "<p dir=\"auto\">Is this catch needed?</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:04:41Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5Mjc0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367792749", "bodyText": "Removed", "author": "ArjenKorevaar", "createdAt": "2020-01-17T06:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MTcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..4564dc9b5d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -73,25 +74,21 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n \n-        try {\n-            if (command.toFullString() != \"REFRESH\") {\n-                String channel = channelUID.getId();\n-                String code = getGatewayCodeFromChannel(channel);\n-\n-                GatewayCommand gatewayCommand;\n-                if (command instanceof QuantityType) {\n-                    gatewayCommand = GatewayCommand.parse(code,\n-                            Double.toString(((QuantityType) command).doubleValue()));\n-                } else {\n-                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n-                }\n+        if (command.toFullString() != \"REFRESH\") {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n \n-                if (gatewayCommand != null && checkConnection()) {\n-                    connector.sendCommand(gatewayCommand);\n-                }\n+            GatewayCommand gatewayCommand;\n+            if (command instanceof QuantityType) {\n+                gatewayCommand = GatewayCommand.parse(code,\n+                        Double.toString(((QuantityType) command).doubleValue()));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n             }\n-        } catch (Exception ex) {\n-            logger.error(\"error\", ex);\n         }\n     }\n \n", "next_change": {"commit": "e2e66bb9838bfc21ac4acf458c3b99391651ce63", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..ed4ad29992 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -92,8 +95,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         }\n     }\n \n-    boolean connecting = false;\n-\n     @Override\n     public void connecting() {\n         connecting = true;\n", "next_change": {"commit": "f4d2bfd2fcb3b29dd05b246a2c84bbe1e9f216c8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex ed4ad29992..dfa5b5495b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -98,7 +103,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n     }\n \n     @Override\n", "next_change": {"commit": "766a0e5159df21696dedf42c4c1f437fd19112e2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex dfa5b5495b..f812329e06 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -103,7 +114,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Connecting\");\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MjQ2NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367382464", "body": "Don't compare string with `!=`. But you should check here on instanceof \r\n```suggestion\r\n            if (!command instanceof RefreshType) {\r\n```\r\n\r\nYou do need to handle the `RefreshType` command  by updating the channel with the known (or unknown) value.", "bodyText": "Don't compare string with !=. But you should check here on instanceof\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (command.toFullString() != \"REFRESH\") {\n          \n          \n            \n                        if (!command instanceof RefreshType) {\n          \n      \n    \n    \n  \n\nYou do need to handle the RefreshType command  by updating the channel with the known (or unknown) value.", "bodyHTML": "<p dir=\"auto\">Don't compare string with <code>!=</code>. But you should check here on instanceof</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (command<span class=\"pl-k x x-first\">.</span><span class=\"x\">toFullString() </span><span class=\"pl-k x\">!=</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">REFRESH</span><span class=\"pl-pds x x-last\">\"</span></span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (<span class=\"pl-k x x-first x-last\">!</span>command<span class=\"x x-first\"> </span><span class=\"pl-k x\">instanceof</span><span class=\"x\"> </span><span class=\"pl-smi x x-last\">RefreshType</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">You do need to handle the <code>RefreshType</code> command  by updating the channel with the known (or unknown) value.</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:06:34Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzOTk3NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368239974", "bodyText": "Changed comparison. Not sure how to respond to refreshtype commands. The binding doesn't keep track of the values, nor can it read the values from the OTGW device. The device reports the values continuously to the socket and the binding maps the incoming values to the channels.", "author": "ArjenKorevaar", "createdAt": "2020-01-18T18:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MjQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4OTIwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421689205", "bodyText": "Hi @Hilbrand, could you please review this PR and this comment in particular ?", "author": "ArjenKorevaar", "createdAt": "2020-05-07T17:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MjQ2NA=="}], "type": "inlineReview", "revised_code": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..4564dc9b5d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -73,25 +74,21 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n \n-        try {\n-            if (command.toFullString() != \"REFRESH\") {\n-                String channel = channelUID.getId();\n-                String code = getGatewayCodeFromChannel(channel);\n-\n-                GatewayCommand gatewayCommand;\n-                if (command instanceof QuantityType) {\n-                    gatewayCommand = GatewayCommand.parse(code,\n-                            Double.toString(((QuantityType) command).doubleValue()));\n-                } else {\n-                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n-                }\n+        if (command.toFullString() != \"REFRESH\") {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n \n-                if (gatewayCommand != null && checkConnection()) {\n-                    connector.sendCommand(gatewayCommand);\n-                }\n+            GatewayCommand gatewayCommand;\n+            if (command instanceof QuantityType) {\n+                gatewayCommand = GatewayCommand.parse(code,\n+                        Double.toString(((QuantityType) command).doubleValue()));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n             }\n-        } catch (Exception ex) {\n-            logger.error(\"error\", ex);\n         }\n     }\n \n", "next_change": {"commit": "e2e66bb9838bfc21ac4acf458c3b99391651ce63", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..ed4ad29992 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -92,8 +95,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         }\n     }\n \n-    boolean connecting = false;\n-\n     @Override\n     public void connecting() {\n         connecting = true;\n", "next_change": {"commit": "f4d2bfd2fcb3b29dd05b246a2c84bbe1e9f216c8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex ed4ad29992..dfa5b5495b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -98,7 +103,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n     }\n \n     @Override\n", "next_change": {"commit": "766a0e5159df21696dedf42c4c1f437fd19112e2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex dfa5b5495b..f812329e06 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -103,7 +114,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Connecting\");\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4Mjk2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367382966", "body": "Uppercase enum values:\r\n```suggestion\r\n    READ,\r\n```", "bodyText": "Uppercase enum values:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Read,\n          \n          \n            \n                READ,", "bodyHTML": "<p dir=\"auto\">Uppercase enum values:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi x x-first x-last\">Read</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-c1 x x-first x-last\">READ</span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T12:08:03Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Msg.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum Msg {\n+    Read,", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MjY0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582641", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:35:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4Mjk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Msg.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Msg.java\nindex bb322cf530..f3e24eaf92 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Msg.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Msg.java\n", "chunk": "@@ -16,7 +16,7 @@ package org.openhab.binding.openthermgateway.internal;\n  * @author Arjen Korevaar - Initial contribution\n  */\n public enum Msg {\n-    Read,\n-    Write,\n-    ReadWrite\n+    READ,\n+    WRITE,\n+    READWRITE\n }\n", "next_change": {"commit": "f7f77d72c7cf2073b87d1122331c5e0ca97dad26", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Msg.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Msg.java\nindex f3e24eaf92..a910f58249 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Msg.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Msg.java\n", "chunk": "@@ -13,6 +13,9 @@\n package org.openhab.binding.openthermgateway.internal;\n \n /**\n+ * The {@link Msg} flag is used to indicate whether the message is sent for Reading, Writing\n+ * or both, based on the OpenTherm specification.\n+ * \n  * @author Arjen Korevaar - Initial contribution\n  */\n public enum Msg {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MzA3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367383075", "body": "Remove, see other comment.", "bodyText": "Remove, see other comment.", "bodyHTML": "<p dir=\"auto\">Remove, see other comment.</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:08:22Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public interface OpenThermGatewayCallback {\n+    public void connecting();\n+\n+    public void connected();\n+\n+    public void disconnected();\n+\n+    public void receiveMessage(Message message);\n+\n+    public void log(LogLevel loglevel, String message);\n+\n+    public void log(LogLevel loglevel, String format, String arg);\n+\n+    public void log(LogLevel loglevel, String format, Throwable t);", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5OTc3MA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367799770", "bodyText": "I'd like to resolve this comment to keep a clean overview of work to be done, please see my other comment on logging from the thread. Once I get to test that, I will remove the logging callback methods alltogether.", "author": "ArjenKorevaar", "createdAt": "2020-01-17T07:29:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MzA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java\nindex ec6544e223..65857e04e2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java\n", "chunk": "@@ -19,17 +19,17 @@ import org.eclipse.jdt.annotation.NonNullByDefault;\n  */\n @NonNullByDefault\n public interface OpenThermGatewayCallback {\n-    public void connecting();\n+    void connecting();\n \n-    public void connected();\n+    void connected();\n \n-    public void disconnected();\n+    void disconnected();\n \n-    public void receiveMessage(Message message);\n+    void receiveMessage(Message message);\n \n-    public void log(LogLevel loglevel, String message);\n+    void log(LogLevel loglevel, String message);\n \n-    public void log(LogLevel loglevel, String format, String arg);\n+    void log(LogLevel loglevel, String format, String arg);\n \n-    public void log(LogLevel loglevel, String format, Throwable t);\n+    void log(LogLevel loglevel, String format, Throwable t);\n }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java\nindex 65857e04e2..3bb04afdb6 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java\n", "chunk": "@@ -26,10 +26,4 @@ public interface OpenThermGatewayCallback {\n     void disconnected();\n \n     void receiveMessage(Message message);\n-\n-    void log(LogLevel loglevel, String message);\n-\n-    void log(LogLevel loglevel, String format, String arg);\n-\n-    void log(LogLevel loglevel, String format, Throwable t);\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MzMxMw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367383313", "body": "Remove public on interface methods. It's not needed as interface methods are public by convention.\r\n```suggestion\r\n    void connecting();\r\n```", "bodyText": "Remove public on interface methods. It's not needed as interface methods are public by convention.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void connecting();\n          \n          \n            \n                void connecting();", "bodyHTML": "<p dir=\"auto\">Remove public on interface methods. It's not needed as interface methods are public by convention.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first\">public</span><span class=\"x x-last\"> </span><span class=\"pl-k\">void</span> connecting();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">void</span> connecting();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T12:09:02Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public interface OpenThermGatewayCallback {\n+    public void connecting();", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MjczNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582735", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:36:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MzMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java\nindex ec6544e223..65857e04e2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java\n", "chunk": "@@ -19,17 +19,17 @@ import org.eclipse.jdt.annotation.NonNullByDefault;\n  */\n @NonNullByDefault\n public interface OpenThermGatewayCallback {\n-    public void connecting();\n+    void connecting();\n \n-    public void connected();\n+    void connected();\n \n-    public void disconnected();\n+    void disconnected();\n \n-    public void receiveMessage(Message message);\n+    void receiveMessage(Message message);\n \n-    public void log(LogLevel loglevel, String message);\n+    void log(LogLevel loglevel, String message);\n \n-    public void log(LogLevel loglevel, String format, String arg);\n+    void log(LogLevel loglevel, String format, String arg);\n \n-    public void log(LogLevel loglevel, String format, Throwable t);\n+    void log(LogLevel loglevel, String format, Throwable t);\n }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java\nindex 65857e04e2..3bb04afdb6 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java\n", "chunk": "@@ -26,10 +26,4 @@ public interface OpenThermGatewayCallback {\n     void disconnected();\n \n     void receiveMessage(Message message);\n-\n-    void log(LogLevel loglevel, String message);\n-\n-    void log(LogLevel loglevel, String format, String arg);\n-\n-    void log(LogLevel loglevel, String format, Throwable t);\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MzUxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367383511", "body": "Remove public, see other comment.", "bodyText": "Remove public, see other comment.", "bodyHTML": "<p dir=\"auto\">Remove public, see other comment.</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:09:32Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayConnector.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public interface OpenThermGatewayConnector extends Runnable {\n+    public void sendCommand(GatewayCommand command);", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MjgxOA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582818", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MzUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayConnector.java\nindex c2aa119c4e..c4bc19c6a8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayConnector.java\n", "chunk": "@@ -19,9 +19,9 @@ import org.eclipse.jdt.annotation.NonNullByDefault;\n  */\n @NonNullByDefault\n public interface OpenThermGatewayConnector extends Runnable {\n-    public void sendCommand(GatewayCommand command);\n+    void sendCommand(GatewayCommand command);\n \n-    public boolean isConnected();\n+    boolean isConnected();\n \n-    public void stop();\n+    void stop();\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4Mzc1NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367383754", "body": "Remove `immediate` we don't set it on binding components.\r\n```suggestion\r\n@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.openthermgateway\")\r\n```", "bodyText": "Remove immediate we don't set it on binding components.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(service = ThingHandlerFactory.class, immediate = true, configurationPid = \"binding.openthermgateway\")\n          \n          \n            \n            @Component(service = ThingHandlerFactory.class, configurationPid = \"binding.openthermgateway\")", "bodyHTML": "<p dir=\"auto\">Remove <code>immediate</code> we don't set it on binding components.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">@Component</span>(<span class=\"pl-c1\">service</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">ThingHandlerFactory</span><span class=\"pl-k\">.</span>class, <span class=\"pl-c1 x x-first\">immediate</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">true</span><span class=\"x x-last\">, </span><span class=\"pl-c1\">configurationPid</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>binding.openthermgateway<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">@Component</span>(<span class=\"pl-c1\">service</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">ThingHandlerFactory</span><span class=\"pl-k\">.</span>class, <span class=\"pl-c1\">configurationPid</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>binding.openthermgateway<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T12:10:15Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayHandlerFactory.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.handler.OpenThermGatewayHandler;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link OpenThermGatewayHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class, immediate = true, configurationPid = \"binding.openthermgateway\")", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4Mjk3NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582974", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4Mzc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayHandlerFactory.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayHandlerFactory.java\nindex 1ad87463f8..2195b973fb 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayHandlerFactory.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayHandlerFactory.java\n", "chunk": "@@ -29,7 +29,7 @@ import org.osgi.service.component.annotations.Component;\n  *\n  * @author Arjen Korevaar - Initial contribution\n  */\n-@Component(service = ThingHandlerFactory.class, immediate = true, configurationPid = \"binding.openthermgateway\")\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.openthermgateway\")\n @NonNullByDefault\n public class OpenThermGatewayHandlerFactory extends BaseThingHandlerFactory {\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4NDI5OA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367384298", "body": "Use the timeunit in the variable name so it's easy to see what the unit is:\r\n```suggestion\r\n    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\r\n```\r\nSame for `COMMAND_TIMEOUT`", "bodyText": "Use the timeunit in the variable name so it's easy to see what the unit is:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final int COMMAND_RESPONSE_TIME = 100;\n          \n          \n            \n                private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n          \n      \n    \n    \n  \n\nSame for COMMAND_TIMEOUT", "bodyHTML": "<p dir=\"auto\">Use the timeunit in the variable name so it's easy to see what the unit is:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1 x x-first x-last\">COMMAND_RESPONSE_TIME</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1 x x-first x-last\">COMMAND_RESPONSE_TIME_MILLISECONDS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Same for <code>COMMAND_TIMEOUT</code></p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:11:34Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.handler.TypeConverter;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME = 100;", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzA2MA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583060", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4NDI5OA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -37,8 +38,8 @@ import org.openhab.binding.openthermgateway.handler.TypeConverter;\n  */\n @NonNullByDefault\n public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n-    private static final int COMMAND_RESPONSE_TIME = 100;\n-    private static final int COMMAND_TIMEOUT = 5000;\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n \n     private OpenThermGatewayCallback callback;\n     private String ipaddress;\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..8054bdf381 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -45,13 +46,13 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private String ipaddress;\n     private int port;\n \n-    private @Nullable Socket socket;\n-    private @Nullable BufferedReader reader;\n     private @Nullable PrintWriter writer;\n \n     private volatile boolean stopping;\n     private boolean connected;\n \n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "f27de9d0833f113c5bdae57c5e9e60d356c6120e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 8054bdf381..47c3871317 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -53,6 +53,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n     private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n \n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "9303b87ad1b3fbf8d599a7133ade75cae35a04f0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 47c3871317..a8e5acf692 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -42,17 +42,17 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n     private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n \n-    private OpenThermGatewayCallback callback;\n-    private String ipaddress;\n-    private int port;\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n \n     private @Nullable PrintWriter writer;\n \n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n-\n     private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n \n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n", "next_change": {"commit": "e493f47fd02a581b2acc5eb23bbb188eaecd196e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex a8e5acf692..6c7e4dd300 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -53,7 +53,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n \n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4NjU1NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367386554", "body": "```suggestion\r\n            for (DataItem dataItem: dataItems) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; i < dataItems.length; i++) {\n          \n          \n            \n                        for (DataItem dataItem: dataItems) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">for</span> (<span class=\"pl-k x x-first\">int</span><span class=\"x\"> i </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">0</span><span class=\"x\">; i </span><span class=\"pl-k x\">&lt;</span><span class=\"x x-last\"> </span>dataItems<span class=\"pl-k x x-first\">.</span><span class=\"x\">length; i</span><span class=\"pl-k x x-last\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">for</span> (<span class=\"pl-smi x x-first\">DataItem</span><span class=\"x\"> dataItem</span><span class=\"pl-k x\">:</span><span class=\"x x-last\"> </span>dataItems) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T12:17:06Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.handler.TypeConverter;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        try {\n+            callback.log(LogLevel.Info,\n+                    String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n+\n+            callback.connecting();\n+\n+            socket = new Socket();\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n+            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            writer = new PrintWriter(socket.getOutputStream(), true);\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector connected\");\n+\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+            // Set the OTGW to report every message it receives and transmits\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+            while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                @Nullable\n+                String message = reader.readLine();\n+\n+                if (message != null) {\n+                    handleMessage(message);\n+                } else {\n+                    callback.log(LogLevel.Info, \"Connection closed by OpenTherm Gateway\");\n+                    break;\n+                }\n+            }\n+\n+            callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n+        } catch (Exception e) {\n+            callback.log(LogLevel.Error, \"An error occured in OpenThermGatewaySocketConnector: %s\", e.getMessage());\n+        } finally {\n+\n+            if (writer != null) {\n+                writer.flush();\n+                writer.close();\n+            }\n+\n+            close(reader);\n+            close(writer);\n+\n+            connected = false;\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector disconnected\");\n+            callback.disconnected();\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n+        stopping = true;\n+\n+        close(socket);\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            callback.log(LogLevel.Debug, \"Sending message: %s\", msg);\n+            writer.printf(\"%s\\r\\n\", msg);\n+        } else {\n+            callback.log(LogLevel.Debug,\n+                    \"Unable to send message: %s. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+            callback.log(LogLevel.Debug, String.format(\"Received command confirmation: %s: %s\", code, value));\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME) {\n+                callback.log(LogLevel.Debug,\n+                        String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            callback.log(LogLevel.Debug, \"Received message: %s, (unknown)\", message);\n+            return;\n+        } else {\n+            callback.log(LogLevel.Debug, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n+                    msg.getCode(), msg.getMessageType().toString()));\n+        }\n+\n+        if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzEyMA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583120", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:36:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4NjU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -171,46 +171,44 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            callback.log(LogLevel.Debug, \"Received message: %s, (unknown)\", message);\n+            callback.log(LogLevel.DEBUG, \"Received message: %s, (unknown)\", message);\n             return;\n         } else {\n-            callback.log(LogLevel.Debug, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n+            callback.log(LogLevel.DEBUG, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n                     msg.getCode(), msg.getMessageType().toString()));\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n \n-            for (int i = 0; i < dataItems.length; i++) {\n-                DataItem dataItem = dataItems[i];\n-\n+            for (DataItem dataItem : dataItems) {\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case Flags:\n-                        state = TypeConverter.toOnOffType(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case Uint8:\n-                    case Uint16:\n-                        state = TypeConverter.toDecimalType(msg.getUInt(dataItem.getByteType()));\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n                         break;\n-                    case Int8:\n-                    case Int16:\n-                        state = TypeConverter.toDecimalType(msg.getInt(dataItem.getByteType()));\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n                         break;\n-                    case Float:\n-                        state = TypeConverter.toDecimalType(msg.getFloat());\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n                         break;\n-                    case DoWToD:\n+                    case DOWTOD:\n                         break;\n                 }\n-                callback.log(LogLevel.Trace,\n-                        String.format(\"  Data %d: %d %s %s %s\", i, dataItem.getID(), dataItem.getSubject(),\n+                callback.log(LogLevel.DEBUG,\n+                        String.format(\"  Data: %d %s %s %s\", dataItem.getID(), dataItem.getSubject(),\n                                 dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n             }\n         }\n \n-        if (msg.getMessageType() == MessageType.ReadAck || msg.getMessageType() == MessageType.WriteData) {\n+        if (msg.getMessageType() == MessageType.READACK || msg.getMessageType() == MessageType.WRITEDATA) {\n             receiveMessage(msg);\n         }\n     }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -202,9 +201,9 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                     case DOWTOD:\n                         break;\n                 }\n-                callback.log(LogLevel.DEBUG,\n-                        String.format(\"  Data: %d %s %s %s\", dataItem.getID(), dataItem.getSubject(),\n-                                dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n+\n+                logger.debug(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n \n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -202,7 +192,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         break;\n                 }\n \n-                logger.debug(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n                     dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -193,7 +200,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                 }\n \n                 logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n \n", "next_change": {"commit": "16a5c94678bf41760ea84ef9232f728c75fb2954", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..82faecded4 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -199,8 +203,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         break;\n                 }\n \n-                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(), dataItem.getDataType(),\n+                        state == null ? \"\" : state);\n             }\n         }\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4ODI0NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367388244", "body": "Uppercase enums:", "bodyText": "Uppercase enums:", "bodyHTML": "<p dir=\"auto\">Uppercase enums:</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:21:21Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/MessageType.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum MessageType {\n+    ReadData, // 000", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzE3OA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583178", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4ODI0NA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/MessageType.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/MessageType.java\nindex a49eaa1203..d42321ae59 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/MessageType.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/MessageType.java\n", "chunk": "@@ -16,12 +16,12 @@ package org.openhab.binding.openthermgateway.internal;\n  * @author Arjen Korevaar - Initial contribution\n  */\n public enum MessageType {\n-    ReadData, // 000\n-    ReadAck, // 100\n-    WriteData, // 001\n-    WriteAck, // 101\n-    InvalidData, // 010\n-    DataInvalid, // 110\n-    Reserved, // 011\n-    UnknownDataId // 111\n+    READDATA, // 000\n+    READACK, // 100\n+    WRITEDATA, // 001\n+    WRITEACK, // 101\n+    INVALIDDATA, // 010\n+    DATAINVALID, // 110\n+    RESERVED, // 011\n+    UNKNOWNDATAID // 111\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4OTA2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367389067", "body": "Don't compare strings with `==`:\r\n```suggestion\r\n        return other != null && this.getID() == other.getID() && (\"R\".equals(this.getCode()) || \"A\".equals(this.getCode()));\r\n```\r\nAnd just return the condition.", "bodyText": "Don't compare strings with ==:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (other != null && this.getID() == other.getID() && (this.getCode() == \"R\" || this.getCode() == \"A\")) {\n          \n          \n            \n                    return other != null && this.getID() == other.getID() && (\"R\".equals(this.getCode()) || \"A\".equals(this.getCode()));\n          \n      \n    \n    \n  \n\nAnd just return the condition.", "bodyHTML": "<p dir=\"auto\">Don't compare strings with <code>==</code>:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k x x-first\">if</span><span class=\"x x-last\"> (</span>other <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>getID() <span class=\"pl-k\">==</span> other<span class=\"pl-k\">.</span>getID() <span class=\"pl-k\">&amp;&amp;</span> (<span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>getCode()<span class=\"x x-first\"> </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">R</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\"> </span><span class=\"pl-k\">||</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>getCode()<span class=\"x x-first\"> </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">A</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">)) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k x x-first\">return</span><span class=\"x x-last\"> </span>other <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>getID() <span class=\"pl-k\">==</span> other<span class=\"pl-k\">.</span>getID() <span class=\"pl-k\">&amp;&amp;</span> (<span class=\"pl-s\"><span class=\"pl-pds x x-first\">\"</span><span class=\"x\">R</span><span class=\"pl-pds x\">\"</span></span><span class=\"pl-k x\">.</span><span class=\"x x-last\">equals(</span><span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>getCode()<span class=\"x x-first x-last\">) </span><span class=\"pl-k\">||</span> <span class=\"pl-s\"><span class=\"pl-pds x x-first\">\"</span><span class=\"x\">A</span><span class=\"pl-pds x\">\"</span></span><span class=\"pl-k x\">.</span><span class=\"x x-last\">equals(</span><span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>getCode()<span class=\"x x-first x-last\">));</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">And just return the condition.</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:23:28Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Message {\n+    /*\n+     * The code field is not part of OpenTherm specification, but added by OpenTherm Gateway.\n+     * It can be any of the following:\n+     *\n+     * T: Message received from the thermostat\n+     * B: Message received from the boiler\n+     * R: Request sent to the boiler\n+     * A: Response returned to the thermostat\n+     * E: Parity or stop bit error\n+     */\n+\n+    private String code;\n+    private MessageType messageType;\n+    private int id;\n+    private String data;\n+\n+    public String getCode() {\n+        return this.code;\n+    }\n+\n+    public MessageType getMessageType() {\n+        return messageType;\n+    }\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public @Nullable String getData(ByteType byteType) {\n+        if (this.data.length() == 4) {\n+            switch (byteType) {\n+                case HighByte:\n+                    return this.data.substring(0, 2);\n+                case LowByte:\n+                    return this.data.substring(2, 4);\n+                case Both:\n+                    return this.data;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean getBit(ByteType byteType, int pos) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            // First parse the hex value to an integer\n+            int parsed = Integer.parseInt(data, 16);\n+\n+            // Then right shift it pos positions so that the required bit is at the front\n+            // and then apply a bitmask of 00000001 (1)\n+            return ((parsed >> pos) & 1) == 1;\n+        }\n+\n+        return false;\n+    }\n+\n+    public int getUInt(ByteType byteType) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            return Integer.parseInt(data, 16);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public int getInt(ByteType byteType) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            return parseSignedInteger(data);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public float getFloat() {\n+        // f8.8, two's complement\n+        @Nullable\n+        String data = getData(ByteType.Both);\n+\n+        if (data != null) {\n+            long value = Long.parseLong(data, 16);\n+\n+            // left padded with zeros\n+            String binary = String.format(\"%16s\", Long.toBinaryString(value)).replace(' ', '0');\n+\n+            if (binary.charAt(0) == '1') {\n+                // negative value\n+\n+                String inverted = invertBinary(binary);\n+\n+                value = Long.parseLong(inverted, 2);\n+                value = value + 1;\n+                value = value * -1;\n+            }\n+\n+            // divide by 2^8 = 256\n+            return (float) value / 256;\n+        }\n+\n+        return 0;\n+    }\n+\n+    public boolean overrides(@Nullable Message other) {\n+        // If the message is a Request sent to the boiler or an Answer returned to the\n+        // thermostat, and it's ID is equal to the previous message, then this is an\n+        // override sent by the OpenTherm Gateway\n+        if (other != null && this.getID() == other.getID() && (this.getCode() == \"R\" || this.getCode() == \"A\")) {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzI3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583271", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4OTA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\nindex 51eeb8ca7a..b2ff2dd69d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\n", "chunk": "@@ -133,11 +129,7 @@ public class Message {\n         // If the message is a Request sent to the boiler or an Answer returned to the\n         // thermostat, and it's ID is equal to the previous message, then this is an\n         // override sent by the OpenTherm Gateway\n-        if (other != null && this.getID() == other.getID() && (this.getCode() == \"R\" || this.getCode() == \"A\")) {\n-            return true;\n-        }\n-\n-        return false;\n+        return other != null && this.getID() == other.getID() && (\"R\".equals(this.getCode()) || \"A\".equals(this.getCode()));\n     }\n \n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4OTU4MA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367389580", "body": "Remove TODO.", "bodyText": "Remove TODO.", "bodyHTML": "<p dir=\"auto\">Remove TODO.</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:24:49Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Message {\n+    /*\n+     * The code field is not part of OpenTherm specification, but added by OpenTherm Gateway.\n+     * It can be any of the following:\n+     *\n+     * T: Message received from the thermostat\n+     * B: Message received from the boiler\n+     * R: Request sent to the boiler\n+     * A: Response returned to the thermostat\n+     * E: Parity or stop bit error\n+     */\n+\n+    private String code;\n+    private MessageType messageType;\n+    private int id;\n+    private String data;\n+\n+    public String getCode() {\n+        return this.code;\n+    }\n+\n+    public MessageType getMessageType() {\n+        return messageType;\n+    }\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public @Nullable String getData(ByteType byteType) {\n+        if (this.data.length() == 4) {\n+            switch (byteType) {\n+                case HighByte:\n+                    return this.data.substring(0, 2);\n+                case LowByte:\n+                    return this.data.substring(2, 4);\n+                case Both:\n+                    return this.data;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean getBit(ByteType byteType, int pos) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            // First parse the hex value to an integer\n+            int parsed = Integer.parseInt(data, 16);\n+\n+            // Then right shift it pos positions so that the required bit is at the front\n+            // and then apply a bitmask of 00000001 (1)\n+            return ((parsed >> pos) & 1) == 1;\n+        }\n+\n+        return false;\n+    }\n+\n+    public int getUInt(ByteType byteType) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            return Integer.parseInt(data, 16);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public int getInt(ByteType byteType) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            return parseSignedInteger(data);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public float getFloat() {\n+        // f8.8, two's complement\n+        @Nullable\n+        String data = getData(ByteType.Both);\n+\n+        if (data != null) {\n+            long value = Long.parseLong(data, 16);\n+\n+            // left padded with zeros\n+            String binary = String.format(\"%16s\", Long.toBinaryString(value)).replace(' ', '0');\n+\n+            if (binary.charAt(0) == '1') {\n+                // negative value\n+\n+                String inverted = invertBinary(binary);\n+\n+                value = Long.parseLong(inverted, 2);\n+                value = value + 1;\n+                value = value * -1;\n+            }\n+\n+            // divide by 2^8 = 256\n+            return (float) value / 256;\n+        }\n+\n+        return 0;\n+    }\n+\n+    public boolean overrides(@Nullable Message other) {\n+        // If the message is a Request sent to the boiler or an Answer returned to the\n+        // thermostat, and it's ID is equal to the previous message, then this is an\n+        // override sent by the OpenTherm Gateway\n+        if (other != null && this.getID() == other.getID() && (this.getCode() == \"R\" || this.getCode() == \"A\")) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"%s - %s - %s\", this.code, this.id, this.data);\n+    }\n+\n+    public Message(String code, MessageType messageType, int id, String data) {\n+        this.code = code;\n+        this.messageType = messageType;\n+        this.id = id;\n+        this.data = data;\n+    }\n+\n+    public static @Nullable Message parse(String message) {\n+        if (message.matches(\"[TBRA]{1}[A-F0-9]{8}\")) {\n+\n+            // For now, only parse TBRA codes\n+            String code = message.substring(0, 1);\n+            MessageType messageType = getMessageType(message.substring(1, 3));\n+            int id = Integer.valueOf(message.substring(3, 5), 16);\n+            String data = message.substring(5);\n+\n+            return new Message(code, messageType, id, data);\n+        }\n+\n+        return null;\n+    }\n+\n+    private static MessageType getMessageType(String value) {\n+        // First parse the hex value to an integer\n+        int integer = Integer.parseInt(value, 16);\n+\n+        // Then right shift it 4 bits so that the message type bits are at the front\n+        int shifted = integer >> 4;\n+\n+        // Then mask it with 00000111 (7), so that we only get the first 3 bits,\n+        // effectively cutting off the parity bit.\n+        int cutoff = shifted & 7;\n+\n+        switch (cutoff) {\n+            case 0: // 000\n+                return MessageType.ReadData;\n+            case 1: // 001\n+                return MessageType.WriteData;\n+            case 2: // 010\n+                return MessageType.InvalidData;\n+            case 3: // 011\n+                return MessageType.Reserved;\n+            case 4: // 100\n+                return MessageType.ReadAck;\n+            case 5: // 101\n+                return MessageType.WriteAck;\n+            case 6: // 110\n+                return MessageType.DataInvalid;\n+            case 7: // 111\n+            default:\n+                return MessageType.UnknownDataId;\n+        }\n+    }\n+\n+    private int parseSignedInteger(String data) {\n+        // First parse the hex value to an unsigned integer value\n+        int result = Integer.parseInt(data, 16);\n+\n+        // TODO: more elegant way of determining the bitmask based on the parsed integer", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzM3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583372", "bodyText": "Removed", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4OTU4MA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\nindex 51eeb8ca7a..b2ff2dd69d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\n", "chunk": "@@ -180,22 +172,22 @@ public class Message {\n \n         switch (cutoff) {\n             case 0: // 000\n-                return MessageType.ReadData;\n+                return MessageType.READDATA;\n             case 1: // 001\n-                return MessageType.WriteData;\n+                return MessageType.WRITEDATA;\n             case 2: // 010\n-                return MessageType.InvalidData;\n+                return MessageType.INVALIDDATA;\n             case 3: // 011\n-                return MessageType.Reserved;\n+                return MessageType.RESERVED;\n             case 4: // 100\n-                return MessageType.ReadAck;\n+                return MessageType.READACK;\n             case 5: // 101\n-                return MessageType.WriteAck;\n+                return MessageType.WRITEACK;\n             case 6: // 110\n-                return MessageType.DataInvalid;\n+                return MessageType.DATAINVALID;\n             case 7: // 111\n             default:\n-                return MessageType.UnknownDataId;\n+                return MessageType.UNKNOWNDATAID;\n         }\n     }\n \n", "next_change": null}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\nindex 51eeb8ca7a..b2ff2dd69d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\n", "chunk": "@@ -203,9 +195,6 @@ public class Message {\n         // First parse the hex value to an unsigned integer value\n         int result = Integer.parseInt(data, 16);\n \n-        // TODO: more elegant way of determining the bitmask based on the parsed integer\n-        // value\n-\n         if (data.length() == 4) {\n             // This is a two byte value, apply a bitmask of 01111111 11111111 (32767) to cut\n             // off the sign bit\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4OTc4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367389786", "body": "Remove this enum see other comment about logging.", "bodyText": "Remove this enum see other comment about logging.", "bodyHTML": "<p dir=\"auto\">Remove this enum see other comment about logging.</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:25:22Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/LogLevel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum LogLevel {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NDA1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368284051", "bodyText": "Removed, see other comment about removing logging callback", "author": "ArjenKorevaar", "createdAt": "2020-01-19T10:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4OTc4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/LogLevel.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/LogLevel.java\nindex abd82d4463..be95b06d5a 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/LogLevel.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/LogLevel.java\n", "chunk": "@@ -16,9 +16,9 @@ package org.openhab.binding.openthermgateway.internal;\n  * @author Arjen Korevaar - Initial contribution\n  */\n public enum LogLevel {\n-    Trace,\n-    Debug,\n-    Info,\n-    Error,\n-    Warning,\n+    TRACE,\n+    DEBUG,\n+    INFO,\n+    ERROR,\n+    WARNING,\n }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/LogLevel.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/LogLevel.java\ndeleted file mode 100644\nindex be95b06d5a..0000000000\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/LogLevel.java\n+++ /dev/null\n", "chunk": "@@ -1,24 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.openthermgateway.internal;\n-\n-/**\n- * @author Arjen Korevaar - Initial contribution\n- */\n-public enum LogLevel {\n-    TRACE,\n-    DEBUG,\n-    INFO,\n-    ERROR,\n-    WARNING,\n-}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDEwNw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367390107", "body": "```suggestion\r\n        if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ((code == null || code == \"\") && message.length() > 2 && message.charAt(2) == '=') {\n          \n          \n            \n                    if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> ((code <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> code<span class=\"x x-first\"> </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"pl-pds x x-last\">\"</span></span>) <span class=\"pl-k\">&amp;&amp;</span> message<span class=\"pl-k\">.</span>length() <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">&amp;&amp;</span> message<span class=\"pl-k\">.</span>charAt(<span class=\"pl-c1\">2</span>) <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>=<span class=\"pl-pds\">'</span></span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> ((code <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> code<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">isEmpty()</span>) <span class=\"pl-k\">&amp;&amp;</span> message<span class=\"pl-k\">.</span>length() <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">&amp;&amp;</span> message<span class=\"pl-k\">.</span>charAt(<span class=\"pl-c1\">2</span>) <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>=<span class=\"pl-pds\">'</span></span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T12:26:10Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws Exception {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet == null || this.validationSet == \"\") {\n+            return true;\n+        }\n+\n+        String[] validations = this.validationSet.split(\",\");\n+\n+        for (int i = 0; i < validations.length; i++) {\n+            if (this.message.equals(validations[i])) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public static GatewayCommand parse(String code, String message) throws Exception {\n+        if ((code == null || code == \"\") && message.length() > 2 && message.charAt(2) == '=') {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzQ3OA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583478", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDEwNw=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex f5b40a317c..d7d5e06796 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -70,7 +70,7 @@ public class GatewayCommand {\n     }\n \n     public static GatewayCommand parse(String code, String message) throws Exception {\n-        if ((code == null || code == \"\") && message.length() > 2 && message.charAt(2) == '=') {\n+        if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n \n", "next_change": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex d7d5e06796..f59e4726b5 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -69,7 +68,7 @@ public class GatewayCommand {\n         return false;\n     }\n \n-    public static GatewayCommand parse(String code, String message) throws Exception {\n+    public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n         if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex f59e4726b5..88f4c2ae35 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -69,22 +70,28 @@ public class GatewayCommand {\n     }\n \n     public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n-        if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n+        if (code.isEmpty() && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n \n-        if (code != null && code.length() == 2) {\n+        if (code.length() == 2) {\n             String codeUpperCase = code.toUpperCase();\n \n             if (supportedCommands.containsKey(codeUpperCase)) {\n                 String validateSet = supportedCommands.get(codeUpperCase);\n+\n+                if (validateSet == null) {\n+                    validateSet = \"\";\n+                }\n+\n                 return new GatewayCommand(codeUpperCase, message, validateSet);\n             } else {\n                 throw new IllegalArgumentException(String.format(\"Unsupported gateway code '%s'\", code.toUpperCase()));\n             }\n         }\n \n-        throw new IllegalArgumentException(String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n+        throw new IllegalArgumentException(\n+                String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n     private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n", "next_change": {"commit": "37e483f0f41134d570904cf9b8da312f76faf2fb", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 88f4c2ae35..4cd2a7dfb2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -94,8 +96,6 @@ public class GatewayCommand {\n                 String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n-    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n-\n     private static HashMap<String, @Nullable String> getSupportedCommands() {\n         HashMap<String, @Nullable String> c = new HashMap<String, @Nullable String>();\n \n", "next_change": {"commit": "aa2be59b68ac09304a41aa72882ca2ff15e28129", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 4cd2a7dfb2..ba254294ac 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -96,8 +97,8 @@ public class GatewayCommand {\n                 String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n-    private static HashMap<String, @Nullable String> getSupportedCommands() {\n-        HashMap<String, @Nullable String> c = new HashMap<String, @Nullable String>();\n+    private static Map<String, @Nullable String> getSupportedCommands() {\n+        Map<String, @Nullable String> c = new HashMap<>();\n \n         c.put(GatewayCommandCode.TemperatureTemporary, null);\n         c.put(GatewayCommandCode.TemperatureConstant, null);\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDM3OA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367390378", "body": "Can you make the thrown exception more specific or does a method actual throw Exception?", "bodyText": "Can you make the thrown exception more specific or does a method actual throw Exception?", "bodyHTML": "<p dir=\"auto\">Can you make the thrown exception more specific or does a method actual throw Exception?</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:26:50Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws Exception {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet == null || this.validationSet == \"\") {\n+            return true;\n+        }\n+\n+        String[] validations = this.validationSet.split(\",\");\n+\n+        for (int i = 0; i < validations.length; i++) {\n+            if (this.message.equals(validations[i])) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public static GatewayCommand parse(String code, String message) throws Exception {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwMDMxMA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367800310", "bodyText": "Changed to IllegalArgumentException, and with that, also the try/catch in calling code", "author": "ArjenKorevaar", "createdAt": "2020-01-17T07:31:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDM3OA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex f5b40a317c..d7d5e06796 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -54,14 +54,14 @@ public class GatewayCommand {\n     }\n \n     private boolean validate() {\n-        if (this.validationSet == null || this.validationSet == \"\") {\n+        if (this.validationSet == null || this.validationSet.isEmpty()) {\n             return true;\n         }\n \n         String[] validations = this.validationSet.split(\",\");\n \n-        for (int i = 0; i < validations.length; i++) {\n-            if (this.message.equals(validations[i])) {\n+        for (String validation : validations) {\n+            if (this.message.equals(validation)) {\n                 return true;\n             }\n         }\n", "next_change": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex d7d5e06796..f59e4726b5 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -69,7 +68,7 @@ public class GatewayCommand {\n         return false;\n     }\n \n-    public static GatewayCommand parse(String code, String message) throws Exception {\n+    public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n         if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex f59e4726b5..88f4c2ae35 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -69,22 +70,28 @@ public class GatewayCommand {\n     }\n \n     public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n-        if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n+        if (code.isEmpty() && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n \n-        if (code != null && code.length() == 2) {\n+        if (code.length() == 2) {\n             String codeUpperCase = code.toUpperCase();\n \n             if (supportedCommands.containsKey(codeUpperCase)) {\n                 String validateSet = supportedCommands.get(codeUpperCase);\n+\n+                if (validateSet == null) {\n+                    validateSet = \"\";\n+                }\n+\n                 return new GatewayCommand(codeUpperCase, message, validateSet);\n             } else {\n                 throw new IllegalArgumentException(String.format(\"Unsupported gateway code '%s'\", code.toUpperCase()));\n             }\n         }\n \n-        throw new IllegalArgumentException(String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n+        throw new IllegalArgumentException(\n+                String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n     private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n", "next_change": {"commit": "37e483f0f41134d570904cf9b8da312f76faf2fb", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 88f4c2ae35..4cd2a7dfb2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -94,8 +96,6 @@ public class GatewayCommand {\n                 String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n-    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n-\n     private static HashMap<String, @Nullable String> getSupportedCommands() {\n         HashMap<String, @Nullable String> c = new HashMap<String, @Nullable String>();\n \n", "next_change": {"commit": "aa2be59b68ac09304a41aa72882ca2ff15e28129", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 4cd2a7dfb2..ba254294ac 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -96,8 +97,8 @@ public class GatewayCommand {\n                 String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n-    private static HashMap<String, @Nullable String> getSupportedCommands() {\n-        HashMap<String, @Nullable String> c = new HashMap<String, @Nullable String>();\n+    private static Map<String, @Nullable String> getSupportedCommands() {\n+        Map<String, @Nullable String> c = new HashMap<>();\n \n         c.put(GatewayCommandCode.TemperatureTemporary, null);\n         c.put(GatewayCommandCode.TemperatureConstant, null);\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex f5b40a317c..d7d5e06796 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -70,7 +70,7 @@ public class GatewayCommand {\n     }\n \n     public static GatewayCommand parse(String code, String message) throws Exception {\n-        if ((code == null || code == \"\") && message.length() > 2 && message.charAt(2) == '=') {\n+        if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n \n", "next_change": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex d7d5e06796..f59e4726b5 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -69,7 +68,7 @@ public class GatewayCommand {\n         return false;\n     }\n \n-    public static GatewayCommand parse(String code, String message) throws Exception {\n+    public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n         if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex f59e4726b5..88f4c2ae35 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -69,22 +70,28 @@ public class GatewayCommand {\n     }\n \n     public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n-        if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n+        if (code.isEmpty() && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n \n-        if (code != null && code.length() == 2) {\n+        if (code.length() == 2) {\n             String codeUpperCase = code.toUpperCase();\n \n             if (supportedCommands.containsKey(codeUpperCase)) {\n                 String validateSet = supportedCommands.get(codeUpperCase);\n+\n+                if (validateSet == null) {\n+                    validateSet = \"\";\n+                }\n+\n                 return new GatewayCommand(codeUpperCase, message, validateSet);\n             } else {\n                 throw new IllegalArgumentException(String.format(\"Unsupported gateway code '%s'\", code.toUpperCase()));\n             }\n         }\n \n-        throw new IllegalArgumentException(String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n+        throw new IllegalArgumentException(\n+                String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n     private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n", "next_change": {"commit": "37e483f0f41134d570904cf9b8da312f76faf2fb", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 88f4c2ae35..4cd2a7dfb2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -94,8 +96,6 @@ public class GatewayCommand {\n                 String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n-    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n-\n     private static HashMap<String, @Nullable String> getSupportedCommands() {\n         HashMap<String, @Nullable String> c = new HashMap<String, @Nullable String>();\n \n", "next_change": {"commit": "aa2be59b68ac09304a41aa72882ca2ff15e28129", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 4cd2a7dfb2..ba254294ac 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -96,8 +97,8 @@ public class GatewayCommand {\n                 String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n-    private static HashMap<String, @Nullable String> getSupportedCommands() {\n-        HashMap<String, @Nullable String> c = new HashMap<String, @Nullable String>();\n+    private static Map<String, @Nullable String> getSupportedCommands() {\n+        Map<String, @Nullable String> c = new HashMap<>();\n \n         c.put(GatewayCommandCode.TemperatureTemporary, null);\n         c.put(GatewayCommandCode.TemperatureConstant, null);\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDU3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367390576", "body": "```suggestion\r\n        for (String validation: validations) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (int i = 0; i < validations.length; i++) {\n          \n          \n            \n                    for (String validation: validations) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-k x x-first\">int</span><span class=\"x\"> i </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">0</span><span class=\"x\">; i </span><span class=\"pl-k x\">&lt;</span><span class=\"x x-last\"> </span>validations<span class=\"pl-k x x-first\">.</span><span class=\"x\">length; i</span><span class=\"pl-k x x-last\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi x x-first\">String</span><span class=\"x\"> validation</span><span class=\"pl-k x\">:</span><span class=\"x x-last\"> </span>validations) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T12:27:21Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws Exception {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet == null || this.validationSet == \"\") {\n+            return true;\n+        }\n+\n+        String[] validations = this.validationSet.split(\",\");\n+\n+        for (int i = 0; i < validations.length; i++) {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzU3MA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583570", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex f5b40a317c..d7d5e06796 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -54,14 +54,14 @@ public class GatewayCommand {\n     }\n \n     private boolean validate() {\n-        if (this.validationSet == null || this.validationSet == \"\") {\n+        if (this.validationSet == null || this.validationSet.isEmpty()) {\n             return true;\n         }\n \n         String[] validations = this.validationSet.split(\",\");\n \n-        for (int i = 0; i < validations.length; i++) {\n-            if (this.message.equals(validations[i])) {\n+        for (String validation : validations) {\n+            if (this.message.equals(validation)) {\n                 return true;\n             }\n         }\n", "next_change": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex d7d5e06796..f59e4726b5 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -69,7 +68,7 @@ public class GatewayCommand {\n         return false;\n     }\n \n-    public static GatewayCommand parse(String code, String message) throws Exception {\n+    public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n         if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex f59e4726b5..88f4c2ae35 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -69,22 +70,28 @@ public class GatewayCommand {\n     }\n \n     public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n-        if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n+        if (code.isEmpty() && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n \n-        if (code != null && code.length() == 2) {\n+        if (code.length() == 2) {\n             String codeUpperCase = code.toUpperCase();\n \n             if (supportedCommands.containsKey(codeUpperCase)) {\n                 String validateSet = supportedCommands.get(codeUpperCase);\n+\n+                if (validateSet == null) {\n+                    validateSet = \"\";\n+                }\n+\n                 return new GatewayCommand(codeUpperCase, message, validateSet);\n             } else {\n                 throw new IllegalArgumentException(String.format(\"Unsupported gateway code '%s'\", code.toUpperCase()));\n             }\n         }\n \n-        throw new IllegalArgumentException(String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n+        throw new IllegalArgumentException(\n+                String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n     private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n", "next_change": {"commit": "37e483f0f41134d570904cf9b8da312f76faf2fb", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 88f4c2ae35..4cd2a7dfb2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -94,8 +96,6 @@ public class GatewayCommand {\n                 String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n-    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n-\n     private static HashMap<String, @Nullable String> getSupportedCommands() {\n         HashMap<String, @Nullable String> c = new HashMap<String, @Nullable String>();\n \n", "next_change": {"commit": "aa2be59b68ac09304a41aa72882ca2ff15e28129", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 4cd2a7dfb2..ba254294ac 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -96,8 +97,8 @@ public class GatewayCommand {\n                 String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n-    private static HashMap<String, @Nullable String> getSupportedCommands() {\n-        HashMap<String, @Nullable String> c = new HashMap<String, @Nullable String>();\n+    private static Map<String, @Nullable String> getSupportedCommands() {\n+        Map<String, @Nullable String> c = new HashMap<>();\n \n         c.put(GatewayCommandCode.TemperatureTemporary, null);\n         c.put(GatewayCommandCode.TemperatureConstant, null);\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDcwMA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367390700", "body": "```suggestion\r\n        if (this.validationSet == null || this.validationSet.isEmpty()) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this.validationSet == null || this.validationSet == \"\") {\n          \n          \n            \n                    if (this.validationSet == null || this.validationSet.isEmpty()) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>validationSet <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>validationSet<span class=\"x x-first\"> </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"pl-pds x x-last\">\"</span></span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>validationSet <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>validationSet<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">isEmpty()</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T12:27:38Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws Exception {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet == null || this.validationSet == \"\") {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzY2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583669", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDcwMA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex f5b40a317c..d7d5e06796 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -54,14 +54,14 @@ public class GatewayCommand {\n     }\n \n     private boolean validate() {\n-        if (this.validationSet == null || this.validationSet == \"\") {\n+        if (this.validationSet == null || this.validationSet.isEmpty()) {\n             return true;\n         }\n \n         String[] validations = this.validationSet.split(\",\");\n \n-        for (int i = 0; i < validations.length; i++) {\n-            if (this.message.equals(validations[i])) {\n+        for (String validation : validations) {\n+            if (this.message.equals(validation)) {\n                 return true;\n             }\n         }\n", "next_change": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex d7d5e06796..f59e4726b5 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -69,7 +68,7 @@ public class GatewayCommand {\n         return false;\n     }\n \n-    public static GatewayCommand parse(String code, String message) throws Exception {\n+    public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n         if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex f59e4726b5..88f4c2ae35 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -69,22 +70,28 @@ public class GatewayCommand {\n     }\n \n     public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n-        if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n+        if (code.isEmpty() && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n \n-        if (code != null && code.length() == 2) {\n+        if (code.length() == 2) {\n             String codeUpperCase = code.toUpperCase();\n \n             if (supportedCommands.containsKey(codeUpperCase)) {\n                 String validateSet = supportedCommands.get(codeUpperCase);\n+\n+                if (validateSet == null) {\n+                    validateSet = \"\";\n+                }\n+\n                 return new GatewayCommand(codeUpperCase, message, validateSet);\n             } else {\n                 throw new IllegalArgumentException(String.format(\"Unsupported gateway code '%s'\", code.toUpperCase()));\n             }\n         }\n \n-        throw new IllegalArgumentException(String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n+        throw new IllegalArgumentException(\n+                String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n     private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n", "next_change": {"commit": "37e483f0f41134d570904cf9b8da312f76faf2fb", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 88f4c2ae35..4cd2a7dfb2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -94,8 +96,6 @@ public class GatewayCommand {\n                 String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n-    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n-\n     private static HashMap<String, @Nullable String> getSupportedCommands() {\n         HashMap<String, @Nullable String> c = new HashMap<String, @Nullable String>();\n \n", "next_change": {"commit": "aa2be59b68ac09304a41aa72882ca2ff15e28129", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 4cd2a7dfb2..ba254294ac 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -96,8 +97,8 @@ public class GatewayCommand {\n                 String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n-    private static HashMap<String, @Nullable String> getSupportedCommands() {\n-        HashMap<String, @Nullable String> c = new HashMap<String, @Nullable String>();\n+    private static Map<String, @Nullable String> getSupportedCommands() {\n+        Map<String, @Nullable String> c = new HashMap<>();\n \n         c.put(GatewayCommandCode.TemperatureTemporary, null);\n         c.put(GatewayCommandCode.TemperatureConstant, null);\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDk5OA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367390998", "body": "It looks like the fields and methods in the class are not used?", "bodyText": "It looks like the fields and methods in the class are not used?", "bodyHTML": "<p dir=\"auto\">It looks like the fields and methods in the class are not used?</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:28:25Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+    private int id;\n+    private DataItem[] dataItems;\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public void setID(int id) {\n+        this.id = id;\n+    }\n+\n+    public DataItem[] getDataItems() {\n+        return dataItems;\n+    }\n+\n+    public void setDataItem(DataItem[] dataItems) {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwMjMxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367802319", "bodyText": "It's a datastructure that represents the OpenTherm protocol specifications of data-id's, types and mapping of payload bytes. I created it to have a complete dataset of all the possible messages, but (after some refactoring) ended up not using everything.. Then again, it's very nice to be able to lookup the individual message types and relate them to the data-id's from the OT specification..", "author": "ArjenKorevaar", "createdAt": "2020-01-17T07:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5NjE2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368396162", "bodyText": "After taking another look.. there were indeed some attribute on DataItemGroup that were now nolonger needed. I also removed some setters from DataItem, since it's intention is to be a reference list of OpenTherm commands, and therefor not to be modified once created.", "author": "ArjenKorevaar", "createdAt": "2020-01-20T07:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "32ed6f49d518d700239461712b3b32ed1b81c86d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\nindex 31468ae20d..7cf52bd873 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n", "chunk": "@@ -15,174 +15,152 @@ package org.openhab.binding.openthermgateway.internal;\n import java.util.HashMap;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n \n /**\n  * @author Arjen Korevaar - Initial contribution\n  */\n @NonNullByDefault\n-public class DataItemGroup {\n-    private int id;\n-    private DataItem[] dataItems;\n-\n-    public int getID() {\n-        return id;\n-    }\n-\n-    public void setID(int id) {\n-        this.id = id;\n-    }\n-\n-    public DataItem[] getDataItems() {\n-        return dataItems;\n-    }\n-\n-    public void setDataItem(DataItem[] dataItems) {\n-        this.dataItems = dataItems;\n-    }\n-\n-    public DataItemGroup(int id, DataItem... dataItems) {\n-        this.id = id;\n-        this.dataItems = dataItems;\n-    }\n+public class DataItemGroup {    \n \n     public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\n \n     private static HashMap<Integer, DataItem[]> createDataItemGroups() {\n         HashMap<Integer, DataItem[]> g = new HashMap<Integer, DataItem[]>();\n \n-        g.put(0, new DataItem[] { new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"ch_enable\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"dhw_enable\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"cooling_enabled\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"otc_active\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"ch2_enable\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x00:5\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x00:6\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x00:7\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"fault\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"ch_mode\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"dhw_mode\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"flame\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"cooling\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"ch2E\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"diag\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x00:7\") });\n-        g.put(1, new DataItem[] { new DataItem(1, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint\") });\n-        g.put(2, new DataItem[] { new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 0, \"0x02:0\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 1, \"0x02:1\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 2, \"0x02:2\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 3, \"0x02:3\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 4, \"0x02:4\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 5, \"0x02:5\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 6, \"0x02:6\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 7, \"0x02:7\"),\n-                new DataItem(2, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"mastermemberid\") });\n-        g.put(3, new DataItem[] { new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"dhwpresent\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"controltype\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"coolingsupport\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"dhwconfig\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"masterlowoff\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"ch2present\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x03:6\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x03:7\"),\n-                new DataItem(3, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slavememberid\") });\n-        g.put(4, new DataItem[] { new DataItem(4, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"commandcode\"),\n-                new DataItem(4, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"commandresponse\") });\n-        g.put(5, new DataItem[] { new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"servicerequest\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"lockout-reset\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"lowwaterpress\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"gasflamefault\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"airpressfault\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"waterovtemp\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x05:6\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x05:7\"),\n-                new DataItem(5, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"oemfaultcode\") });\n-        g.put(6, new DataItem[] { new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"0x06:l0\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"0x06:l1\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"0x06:l2\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"0x06:l3\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"0x06:l4\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"0x06:l5\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"0x06:l6\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x06:l7\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"0x06:h0\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"0x06:h1\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"0x06:h2\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"0x06:h3\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"0x06:h4\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x06:h5\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x06:h6\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x06:h7\") });\n-        g.put(7, new DataItem[] { new DataItem(7, Msg.Write, ByteType.Both, DataType.Float, 0, \"0x07\") });\n-        g.put(8, new DataItem[] { new DataItem(8, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint2\") });\n-        g.put(9, new DataItem[] { new DataItem(9, Msg.Read, ByteType.Both, DataType.Float, 0, \"overridesetpoint\") });\n-        g.put(10, new DataItem[] { new DataItem(10, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"0x0a:h\"),\n-                new DataItem(10, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"0x0a:l\") });\n-        g.put(11, new DataItem[] { new DataItem(11, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"tspindex\"),\n-                new DataItem(11, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"tspvalue\") });\n-        g.put(12, new DataItem[] { new DataItem(12, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0c:h\"),\n-                new DataItem(12, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0c:l\") });\n-        g.put(13, new DataItem[] { new DataItem(13, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0d:h\"),\n-                new DataItem(13, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0d:l\") });\n-        g.put(14, new DataItem[] { new DataItem(14, Msg.Read, ByteType.LowByte, DataType.Float, 0, \"maxrelmdulevel\") });\n-        g.put(15, new DataItem[] { new DataItem(15, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"maxcapkw\"),\n-                new DataItem(15, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"maxcapprc\") });\n-        g.put(16, new DataItem[] { new DataItem(16, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomsetpoint\") });\n-        g.put(17, new DataItem[] { new DataItem(17, Msg.Read, ByteType.Both, DataType.Float, 0, \"modulevel\") });\n-        g.put(18, new DataItem[] { new DataItem(18, Msg.Read, ByteType.Both, DataType.Float, 0, \"waterpressure\") });\n-        g.put(19, new DataItem[] { new DataItem(19, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwflow\") });\n-        g.put(20, new DataItem[] { new DataItem(20, Msg.ReadWrite, ByteType.Both, DataType.DoWToD, 0, \"dowtod\") });\n-        g.put(21, new DataItem[] { new DataItem(21, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"month\"),\n-                new DataItem(21, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"dom\") });\n-        g.put(22, new DataItem[] { new DataItem(22, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"year\") });\n-        g.put(23, new DataItem[] { new DataItem(23, Msg.Write, ByteType.Both, DataType.Float, 0, \"setpointch2\") });\n-        g.put(24, new DataItem[] { new DataItem(24, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomtemp\") });\n-        g.put(25, new DataItem[] { new DataItem(25, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp\") });\n-        g.put(26, new DataItem[] { new DataItem(26, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwtemp\") });\n-        g.put(27, new DataItem[] { new DataItem(27, Msg.Read, ByteType.Both, DataType.Float, 0, \"outsidetemp\") });\n-        g.put(28, new DataItem[] { new DataItem(28, Msg.Read, ByteType.Both, DataType.Float, 0, \"returntemp\") });\n-        g.put(29, new DataItem[] { new DataItem(29, Msg.Read, ByteType.Both, DataType.Float, 0, \"solstortemp\") });\n-        g.put(30, new DataItem[] { new DataItem(30, Msg.Read, ByteType.Both, DataType.Float, 0, \"solcolltemp\") });\n-        g.put(31, new DataItem[] { new DataItem(31, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp2\") });\n-        g.put(32, new DataItem[] { new DataItem(32, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhw2temp\") });\n-        g.put(33, new DataItem[] { new DataItem(33, Msg.Read, ByteType.Both, DataType.Int16, 0, \"exhausttemp\") });\n-        g.put(48, new DataItem[] { new DataItem(48, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"tdhwsetu\"),\n-                new DataItem(48, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"tdhwsetl\") });\n-        g.put(49, new DataItem[] { new DataItem(49, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"maxchu\"),\n-                new DataItem(49, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"maxchl\") });\n-        g.put(50, new DataItem[] { new DataItem(50, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"otcu\"),\n-                new DataItem(50, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"otcl\") });\n-        g.put(56, new DataItem[] { new DataItem(56, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tdhwset\") });\n-        g.put(57, new DataItem[] { new DataItem(57, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tchmax\") });\n-        g.put(58, new DataItem[] { new DataItem(58, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"otchcratio\") });\n+        g.put(0, new DataItem[] { new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"ch_enable\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"dhw_enable\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"cooling_enabled\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"otc_active\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"ch2_enable\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x00:5\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x00:6\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x00:7\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"fault\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"ch_mode\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"dhw_mode\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"flame\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"cooling\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"ch2E\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"diag\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x00:7\") });\n+        g.put(1, new DataItem[] { new DataItem(1, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint\", SIUnits.CELSIUS) });\n+        g.put(2, new DataItem[] { new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x02:0\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x02:1\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x02:2\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x02:3\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x02:4\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x02:5\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x02:6\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x02:7\"),\n+                new DataItem(2, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"mastermemberid\") });\n+        g.put(3, new DataItem[] { new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"dhwpresent\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"controltype\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"coolingsupport\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"dhwconfig\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"masterlowoff\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"ch2present\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x03:6\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x03:7\"),\n+                new DataItem(3, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slavememberid\") });\n+        g.put(4, new DataItem[] { new DataItem(4, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"commandcode\"),\n+                new DataItem(4, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"commandresponse\") });\n+        g.put(5, new DataItem[] { new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"servicerequest\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"lockout-reset\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"lowwaterpress\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"gasflamefault\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"airpressfault\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"waterovtemp\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x05:6\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x05:7\"),\n+                new DataItem(5, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"oemfaultcode\") });\n+        g.put(6, new DataItem[] { new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"0x06:l0\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"0x06:l1\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"0x06:l2\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"0x06:l3\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"0x06:l4\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"0x06:l5\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"0x06:l6\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x06:l7\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x06:h0\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x06:h1\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x06:h2\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x06:h3\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x06:h4\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x06:h5\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x06:h6\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x06:h7\") });\n+        g.put(7, new DataItem[] { new DataItem(7, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"0x07\") });\n+        g.put(8, new DataItem[] { new DataItem(8, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint2\") });\n+        g.put(9, new DataItem[] { new DataItem(9, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"overridesetpoint\") });\n+        g.put(10, new DataItem[] { new DataItem(10, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0a:h\"),\n+                new DataItem(10, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0a:l\") });\n+        g.put(11, new DataItem[] { new DataItem(11, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"tspindex\"),\n+                new DataItem(11, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"tspvalue\") });\n+        g.put(12, new DataItem[] { new DataItem(12, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0c:h\"),\n+                new DataItem(12, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0c:l\") });\n+        g.put(13, new DataItem[] { new DataItem(13, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0d:h\"),\n+                new DataItem(13, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0d:l\") });\n+        g.put(14, new DataItem[] { new DataItem(14, Msg.READ, ByteType.LOWBYTE, DataType.FLOAT, 0, \"maxrelmdulevel\") });\n+        g.put(15, new DataItem[] { new DataItem(15, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"maxcapkw\"),\n+                new DataItem(15, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"maxcapprc\") });\n+        g.put(16, new DataItem[] { new DataItem(16, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomsetpoint\", SIUnits.CELSIUS) });\n+        g.put(17, new DataItem[] { new DataItem(17, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"modulevel\") });\n+        g.put(18, new DataItem[] { new DataItem(18, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"waterpressure\") });\n+        g.put(19, new DataItem[] { new DataItem(19, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwflow\") });\n+        g.put(20, new DataItem[] { new DataItem(20, Msg.READWRITE, ByteType.BOTH, DataType.DOWTOD, 0, \"dowtod\") });\n+        g.put(21, new DataItem[] { new DataItem(21, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"month\"),\n+                new DataItem(21, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"dom\") });\n+        g.put(22, new DataItem[] { new DataItem(22, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"year\") });\n+        g.put(23, new DataItem[] { new DataItem(23, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"setpointch2\") });\n+        g.put(24, new DataItem[] { new DataItem(24, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomtemp\", SIUnits.CELSIUS) });\n+        g.put(25, new DataItem[] { new DataItem(25, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp\", SIUnits.CELSIUS) });\n+        g.put(26, new DataItem[] { new DataItem(26, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwtemp\", SIUnits.CELSIUS) });\n+        g.put(27, new DataItem[] { new DataItem(27, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"outsidetemp\", SIUnits.CELSIUS) });\n+        g.put(28, new DataItem[] { new DataItem(28, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"returntemp\", SIUnits.CELSIUS) });\n+        g.put(29, new DataItem[] { new DataItem(29, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solstortemp\") });\n+        g.put(30, new DataItem[] { new DataItem(30, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solcolltemp\") });\n+        g.put(31, new DataItem[] { new DataItem(31, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp2\") });\n+        g.put(32, new DataItem[] { new DataItem(32, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhw2temp\") });\n+        g.put(33, new DataItem[] { new DataItem(33, Msg.READ, ByteType.BOTH, DataType.INT16, 0, \"exhausttemp\") });\n+        g.put(48, new DataItem[] { new DataItem(48, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"tdhwsetu\"),\n+                new DataItem(48, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"tdhwsetl\") });\n+        g.put(49, new DataItem[] { new DataItem(49, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"maxchu\"),\n+                new DataItem(49, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"maxchl\") });\n+        g.put(50, new DataItem[] { new DataItem(50, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"otcu\"),\n+                new DataItem(50, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"otcl\") });\n+        g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\", SIUnits.CELSIUS) });\n+        g.put(57, new DataItem[] { new DataItem(57, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tchmax\") });\n+        g.put(58, new DataItem[] { new DataItem(58, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"otchcratio\") });\n         g.put(100,\n-                new DataItem[] { new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"rof0\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"rof1\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"rof2\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"rof3\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"rof4\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"rof5\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"rof6\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"rof7\") });\n-        g.put(115, new DataItem[] { new DataItem(115, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"oemdiagcode\") });\n-        g.put(116, new DataItem[] { new DataItem(116, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerstarts\") });\n-        g.put(117, new DataItem[] { new DataItem(117, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumpstarts\") });\n-        g.put(118, new DataItem[] { new DataItem(118, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvstarts\") });\n+                new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n+        g.put(115, new DataItem[] { new DataItem(115, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"oemdiagcode\") });\n+        g.put(116, new DataItem[] { new DataItem(116, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerstarts\") });\n+        g.put(117, new DataItem[] { new DataItem(117, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumpstarts\") });\n+        g.put(118, new DataItem[] { new DataItem(118, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvstarts\") });\n         g.put(119,\n-                new DataItem[] { new DataItem(119, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerstarts\") });\n-        g.put(120, new DataItem[] { new DataItem(120, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerhours\") });\n-        g.put(121, new DataItem[] { new DataItem(121, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumphours\") });\n-        g.put(122, new DataItem[] { new DataItem(122, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvhours\") });\n-        g.put(123, new DataItem[] { new DataItem(123, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerhours\") });\n+                new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n+        g.put(120, new DataItem[] { new DataItem(120, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerhours\") });\n+        g.put(121, new DataItem[] { new DataItem(121, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumphours\") });\n+        g.put(122, new DataItem[] { new DataItem(122, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvhours\") });\n+        g.put(123, new DataItem[] { new DataItem(123, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerhours\") });\n         g.put(124,\n-                new DataItem[] { new DataItem(124, Msg.Write, ByteType.Both, DataType.Float, 0, \"masterotversion\") });\n-        g.put(125, new DataItem[] { new DataItem(125, Msg.Read, ByteType.Both, DataType.Float, 0, \"slaveotversion\") });\n+                new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n+        g.put(125, new DataItem[] { new DataItem(125, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"slaveotversion\") });\n         g.put(126,\n                 new DataItem[] {\n-                        new DataItem(126, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"masterproducttype\"),\n-                        new DataItem(126, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"masterproductversion\") });\n+                        new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n+                        new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n         g.put(127,\n-                new DataItem[] { new DataItem(127, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"slaveproducttype\"),\n-                        new DataItem(127, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slaveproductversion\") });\n+                new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n+                        new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n \n         return g;\n     }\n", "next_change": {"commit": "4a2f1cf990563ba11bb610e479f9cf8569116e56", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\nindex 7cf52bd873..ccef9a8a6b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n", "chunk": "@@ -132,35 +132,29 @@ public class DataItemGroup {\n         g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\", SIUnits.CELSIUS) });\n         g.put(57, new DataItem[] { new DataItem(57, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tchmax\") });\n         g.put(58, new DataItem[] { new DataItem(58, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"otchcratio\") });\n-        g.put(100,\n-                new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n+        g.put(100, new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n         g.put(115, new DataItem[] { new DataItem(115, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"oemdiagcode\") });\n         g.put(116, new DataItem[] { new DataItem(116, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerstarts\") });\n         g.put(117, new DataItem[] { new DataItem(117, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumpstarts\") });\n         g.put(118, new DataItem[] { new DataItem(118, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvstarts\") });\n-        g.put(119,\n-                new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n+        g.put(119, new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n         g.put(120, new DataItem[] { new DataItem(120, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerhours\") });\n         g.put(121, new DataItem[] { new DataItem(121, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumphours\") });\n         g.put(122, new DataItem[] { new DataItem(122, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvhours\") });\n         g.put(123, new DataItem[] { new DataItem(123, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerhours\") });\n-        g.put(124,\n-                new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n+        g.put(124, new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n         g.put(125, new DataItem[] { new DataItem(125, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"slaveotversion\") });\n-        g.put(126,\n-                new DataItem[] {\n-                        new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n-                        new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n-        g.put(127,\n-                new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n-                        new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n+        g.put(126, new DataItem[] { new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n+                new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n+        g.put(127, new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n+                new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n \n         return g;\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MTI2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367391269", "body": "Uppercase enum, see other comment.\r\n```suggestion\r\n    HIGH_BYTE,\r\n```", "bodyText": "Uppercase enum, see other comment.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                HighByte,\n          \n          \n            \n                HIGH_BYTE,", "bodyHTML": "<p dir=\"auto\">Uppercase enum, see other comment.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi x x-first x-last\">HighByte</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-c1 x x-first x-last\">HIGH_BYTE</span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T12:29:08Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/ByteType.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum ByteType {\n+    HighByte,", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4Mzc4NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583784", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MTI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/ByteType.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/ByteType.java\nindex 788fa673b4..da83c8d257 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/ByteType.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/ByteType.java\n", "chunk": "@@ -16,7 +16,7 @@ package org.openhab.binding.openthermgateway.internal;\n  * @author Arjen Korevaar - Initial contribution\n  */\n public enum ByteType {\n-    HighByte,\n-    LowByte,\n-    Both\n+    HIGHBYTE,\n+    LOWBYTE,\n+    BOTH\n }\n", "next_change": {"commit": "f7f77d72c7cf2073b87d1122331c5e0ca97dad26", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/ByteType.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/ByteType.java\nindex da83c8d257..301500051d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/ByteType.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/ByteType.java\n", "chunk": "@@ -13,6 +13,8 @@\n package org.openhab.binding.openthermgateway.internal;\n \n /**\n+ * The {@link ByteType} enum specifies whether the upper, lower or both bytes are used\n+ * \n  * @author Arjen Korevaar - Initial contribution\n  */\n public enum ByteType {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MTY5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367391692", "body": "This class doesn't seem to add much value. I suggest to remove it. `OnOffType` can be used as  `OnOffType.from(value)`\r\n", "bodyText": "This class doesn't seem to add much value. I suggest to remove it. OnOffType can be used as  OnOffType.from(value)", "bodyHTML": "<p dir=\"auto\">This class doesn't seem to add much value. I suggest to remove it. <code>OnOffType</code> can be used as  <code>OnOffType.from(value)</code></p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:30:19Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/TypeConverter.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+\n+/**\n+ * The {@link TypeConverter} is used to convert simple values to SmartHome types\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TypeConverter {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzkxNw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583917", "bodyText": "Removed", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MTY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/TypeConverter.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/TypeConverter.java\ndeleted file mode 100644\nindex 7b57dbad11..0000000000\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/TypeConverter.java\n+++ /dev/null\n", "chunk": "@@ -1,61 +0,0 @@\n-/**\n- * Copyright (c) 2010-2020 Contributors to the openHAB project\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- */\n-package org.openhab.binding.openthermgateway.handler;\n-\n-import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.types.DecimalType;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.eclipse.smarthome.core.library.types.PercentType;\n-import org.eclipse.smarthome.core.library.types.StringType;\n-\n-/**\n- * The {@link TypeConverter} is used to convert simple values to SmartHome types\n- * sent to one of the channels.\n- *\n- * @author Arjen Korevaar - Initial contribution\n- */\n-@NonNullByDefault\n-public class TypeConverter {\n-    /*\n-     * DateTimeType\n-     * DecimalType\n-     * HSBType\n-     * OnOffType\n-     * OpenClosedType\n-     * PercentType\n-     * PlayPauseType\n-     * PointType\n-     * RawType\n-     * RewindFastforwardType\n-     * StringListType\n-     * StringType\n-     * UnDefType\n-     * UpDownType\n-     */\n-\n-    public static DecimalType toDecimalType(float value) {\n-        return new DecimalType(value);\n-    }\n-\n-    public static OnOffType toOnOffType(boolean value) {\n-        return value ? OnOffType.ON : OnOffType.OFF;\n-    }\n-\n-    public static PercentType toPercentType(int value) {\n-        return new PercentType(value);\n-    }\n-\n-    public static StringType toStringType(String value) {\n-        return new StringType(value);\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MjE5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367392196", "body": "Please remove this. Don't add custom logging features.", "bodyText": "Please remove this. Don't add custom logging features.", "bodyHTML": "<p dir=\"auto\">Please remove this. Don't add custom logging features.</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:31:40Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n+                        break;\n+                    case DoWToD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String format, String arg) {\n+        String message = String.format(format, arg);\n+        log(loglevel, message);\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message, Throwable t) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message, t);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message, t);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message, t);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message, t);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message, t);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message);\n+                break;\n+            default:\n+                break;\n+        }\n+    }", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MDA3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367790073", "bodyText": "The thought behind this was that the connector running in a separate thread didn't have access to the logging framework. Therefor a mechanism was added that logs via a callback to the thinghandler, which in turns logs to logging framework. Will test to see if I can log from the thread, then this part of the callback interface can be removed.", "author": "ArjenKorevaar", "createdAt": "2020-01-17T06:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MjE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NDAxMg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368284012", "bodyText": "After running some tests, removed logging callback and let connector log directly to logging framework", "author": "ArjenKorevaar", "createdAt": "2020-01-19T10:43:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MjE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..b626d4cc2b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -211,19 +205,19 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void log(LogLevel loglevel, String message) {\n         switch (loglevel) {\n-            case Trace:\n+            case TRACE:\n                 logger.trace(\"{}\", message);\n                 break;\n-            case Debug:\n+            case DEBUG:\n                 logger.debug(\"{}\", message);\n                 break;\n-            case Info:\n+            case INFO:\n                 logger.info(\"{}\", message);\n                 break;\n-            case Warning:\n+            case WARNING:\n                 logger.warn(\"{}\", message);\n                 break;\n-            case Error:\n+            case ERROR:\n                 logger.error(\"{}\", message);\n                 break;\n             default:\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b626d4cc2b..0861edc52c 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -173,58 +168,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         }\n     }\n \n-    @Override\n-    public void log(LogLevel loglevel, String format, String arg) {\n-        String message = String.format(format, arg);\n-        log(loglevel, message);\n-    }\n-\n-    @Override\n-    public void log(LogLevel loglevel, String message, Throwable t) {\n-        switch (loglevel) {\n-            case TRACE:\n-                logger.trace(\"{}\", message, t);\n-                break;\n-            case DEBUG:\n-                logger.debug(\"{}\", message, t);\n-                break;\n-            case INFO:\n-                logger.info(\"{}\", message, t);\n-                break;\n-            case WARNING:\n-                logger.warn(\"{}\", message, t);\n-                break;\n-            case ERROR:\n-                logger.error(\"{}\", message, t);\n-                break;\n-            default:\n-                break;\n-        }\n-    }\n-\n-    @Override\n-    public void log(LogLevel loglevel, String message) {\n-        switch (loglevel) {\n-            case TRACE:\n-                logger.trace(\"{}\", message);\n-                break;\n-            case DEBUG:\n-                logger.debug(\"{}\", message);\n-                break;\n-            case INFO:\n-                logger.info(\"{}\", message);\n-                break;\n-            case WARNING:\n-                logger.warn(\"{}\", message);\n-                break;\n-            case ERROR:\n-                logger.error(\"{}\", message);\n-                break;\n-            default:\n-                break;\n-        }\n-    }\n-\n     @Override\n     public void handleRemoval() {\n         logger.debug(\"Removing OpenTherm Gateway handler\");\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5Mjc4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367392787", "body": "Put @Nullable annotations inline on fields:\r\n```suggestion\r\n    private @Nullable OpenThermGatewayConfiguration config;\r\n```", "bodyText": "Put @nullable annotations inline on fields:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private OpenThermGatewayConfiguration config;\n          \n          \n            \n                private @Nullable OpenThermGatewayConfiguration config;", "bodyHTML": "<p dir=\"auto\">Put <a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/nullable/hovercard\" href=\"https://github.com/nullable\">@nullable</a> annotations inline on fields:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">OpenThermGatewayConfiguration</span> config;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">@Nullable</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">OpenThermGatewayConfiguration</span> config;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T12:33:20Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4NDEyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367584121", "bodyText": "Removed newline after @nullable's", "author": "ArjenKorevaar", "createdAt": "2020-01-16T18:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5Mjc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..b626d4cc2b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -48,11 +50,9 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n \n-    @Nullable\n-    private OpenThermGatewayConfiguration config;\n+    @Nullable private OpenThermGatewayConfiguration config;\n \n-    @Nullable\n-    private OpenThermGatewayConnector connector;\n+    @Nullable private OpenThermGatewayConnector connector;\n \n     public OpenThermGatewayHandler(Thing thing) {\n         super(thing);\n", "next_change": {"commit": "e2e66bb9838bfc21ac4acf458c3b99391651ce63", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b626d4cc2b..ed4ad29992 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -54,6 +56,8 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Nullable private OpenThermGatewayConnector connector;\n \n+    boolean connecting = false;\n+\n     public OpenThermGatewayHandler(Thing thing) {\n         super(thing);\n     }\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex ed4ad29992..f80442a117 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -56,7 +57,9 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Nullable private OpenThermGatewayConnector connector;\n \n-    boolean connecting = false;\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n \n     public OpenThermGatewayHandler(Thing thing) {\n         super(thing);\n", "next_change": {"commit": "535f5d1227450b96137c1ceed5d6bd4f373c7592", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex f80442a117..668b120783 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -53,9 +53,9 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n \n-    @Nullable private OpenThermGatewayConfiguration config;\n+    private @Nullable OpenThermGatewayConfiguration config;\n \n-    @Nullable private OpenThermGatewayConnector connector;\n+    private @Nullable OpenThermGatewayConnector connector;\n \n     private boolean connecting = false;\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NDE5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367394195", "body": "Currently there are no channels that have a QuantityType so this check is not needed. However I would suggest to make some of the channels with unit UoM (see my other comment). In that case you can do this check. However you need to pass the correct unit to get the value of the command otherwise you might end up with a different unit you expect. For example if it's a temperature unit, but the command contains Fahrenheit you need to get the Celsius value probably. So you need to pass Celcius to get the double value.", "bodyText": "Currently there are no channels that have a QuantityType so this check is not needed. However I would suggest to make some of the channels with unit UoM (see my other comment). In that case you can do this check. However you need to pass the correct unit to get the value of the command otherwise you might end up with a different unit you expect. For example if it's a temperature unit, but the command contains Fahrenheit you need to get the Celsius value probably. So you need to pass Celcius to get the double value.", "bodyHTML": "<p dir=\"auto\">Currently there are no channels that have a QuantityType so this check is not needed. However I would suggest to make some of the channels with unit UoM (see my other comment). In that case you can do this check. However you need to pass the correct unit to get the value of the command otherwise you might end up with a different unit you expect. For example if it's a temperature unit, but the command contains Fahrenheit you need to get the Celsius value probably. So you need to pass Celcius to get the double value.</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:36:47Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI3MzY2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368273662", "bodyText": "Changed the temperature channels to UoM back and forth", "author": "ArjenKorevaar", "createdAt": "2020-01-19T07:59:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NDE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..4564dc9b5d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -73,25 +74,21 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n \n-        try {\n-            if (command.toFullString() != \"REFRESH\") {\n-                String channel = channelUID.getId();\n-                String code = getGatewayCodeFromChannel(channel);\n-\n-                GatewayCommand gatewayCommand;\n-                if (command instanceof QuantityType) {\n-                    gatewayCommand = GatewayCommand.parse(code,\n-                            Double.toString(((QuantityType) command).doubleValue()));\n-                } else {\n-                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n-                }\n+        if (command.toFullString() != \"REFRESH\") {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n \n-                if (gatewayCommand != null && checkConnection()) {\n-                    connector.sendCommand(gatewayCommand);\n-                }\n+            GatewayCommand gatewayCommand;\n+            if (command instanceof QuantityType) {\n+                gatewayCommand = GatewayCommand.parse(code,\n+                        Double.toString(((QuantityType) command).doubleValue()));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n             }\n-        } catch (Exception ex) {\n-            logger.error(\"error\", ex);\n         }\n     }\n \n", "next_change": {"commit": "e2e66bb9838bfc21ac4acf458c3b99391651ce63", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..ed4ad29992 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -92,8 +95,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         }\n     }\n \n-    boolean connecting = false;\n-\n     @Override\n     public void connecting() {\n         connecting = true;\n", "next_change": {"commit": "f4d2bfd2fcb3b29dd05b246a2c84bbe1e9f216c8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex ed4ad29992..dfa5b5495b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -98,7 +103,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n     }\n \n     @Override\n", "next_change": {"commit": "766a0e5159df21696dedf42c4c1f437fd19112e2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex dfa5b5495b..f812329e06 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -103,7 +114,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Connecting\");\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NTczNA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367395734", "body": "Can you catch the specific exception here or add `RuntimException`\r\n```suggestion\r\n        } catch (Exception e) {\r\n```", "bodyText": "Can you catch the specific exception here or add RuntimException\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                    } catch (Exception e) {", "bodyHTML": "<p dir=\"auto\">Can you catch the specific exception here or add <code>RuntimException</code></p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> e) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-01-16T12:40:51Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.handler.TypeConverter;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        try {\n+            callback.log(LogLevel.Info,\n+                    String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n+\n+            callback.connecting();\n+\n+            socket = new Socket();\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n+            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            writer = new PrintWriter(socket.getOutputStream(), true);\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector connected\");\n+\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+            // Set the OTGW to report every message it receives and transmits\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+            while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                @Nullable\n+                String message = reader.readLine();\n+\n+                if (message != null) {\n+                    handleMessage(message);\n+                } else {\n+                    callback.log(LogLevel.Info, \"Connection closed by OpenTherm Gateway\");\n+                    break;\n+                }\n+            }\n+\n+            callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n+        } catch (Exception e) {", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NzA1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368287051", "bodyText": "Removed catching generic exceptions", "author": "ArjenKorevaar", "createdAt": "2020-01-19T11:36:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NTczNA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -78,28 +79,27 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n             callback.connected();\n \n-            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector connected\");\n+            callback.log(LogLevel.DEBUG, \"OpenThermGatewaySocketConnector connected\");\n \n             sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n             // Set the OTGW to report every message it receives and transmits\n             sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n \n             while (!stopping && !Thread.currentThread().isInterrupted()) {\n-                @Nullable\n-                String message = reader.readLine();\n+                @Nullable String message = reader.readLine();\n \n                 if (message != null) {\n                     handleMessage(message);\n                 } else {\n-                    callback.log(LogLevel.Info, \"Connection closed by OpenTherm Gateway\");\n+                    callback.log(LogLevel.INFO, \"Connection closed by OpenTherm Gateway\");\n                     break;\n                 }\n             }\n \n-            callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+            callback.log(LogLevel.DEBUG, \"Stopping OpenThermGatewaySocketConnector\");\n \n         } catch (Exception e) {\n-            callback.log(LogLevel.Error, \"An error occured in OpenThermGatewaySocketConnector: %s\", e.getMessage());\n+            callback.log(LogLevel.ERROR, \"An error occured in OpenThermGatewaySocketConnector: %s\", e.getMessage());\n         } finally {\n \n             if (writer != null) {\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -91,15 +94,14 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                 if (message != null) {\n                     handleMessage(message);\n                 } else {\n-                    callback.log(LogLevel.INFO, \"Connection closed by OpenTherm Gateway\");\n+                    logger.info(\"Connection closed by OpenTherm Gateway\");\n                     break;\n                 }\n             }\n \n-            callback.log(LogLevel.DEBUG, \"Stopping OpenThermGatewaySocketConnector\");\n-\n+            logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n         } catch (Exception e) {\n-            callback.log(LogLevel.ERROR, \"An error occured in OpenThermGatewaySocketConnector: %s\", e.getMessage());\n+            logger.error(\"An error occured in OpenThermGatewaySocketConnector: {}\", e.getMessage());\n         } finally {\n \n             if (writer != null) {\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..8054bdf381 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -66,66 +63,59 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     public void run() {\n         stopping = false;\n         connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n \n-        try {            \n-            logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n-\n-            callback.connecting();\n-\n-            socket = new Socket();\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n             socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n             socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n-            writer = new PrintWriter(socket.getOutputStream(), true);\n-            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n-\n+    \n             connected = true;\n-\n+    \n             callback.connected();\n-\n+    \n             logger.debug(\"OpenThermGatewaySocketConnector connected\");\n-\n-            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n-            // Set the OTGW to report every message it receives and transmits\n-            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n-\n-            while (!stopping && !Thread.currentThread().isInterrupted()) {\n-                @Nullable String message = reader.readLine();\n-\n-                if (message != null) {\n-                    handleMessage(message);\n-                } else {\n-                    logger.info(\"Connection closed by OpenTherm Gateway\");\n-                    break;\n-                }\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n             }\n-\n-            logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n-        } catch (Exception e) {\n-            logger.error(\"An error occured in OpenThermGatewaySocketConnector: {}\", e.getMessage());\n-        } finally {\n-\n-            if (writer != null) {\n-                writer.flush();\n-                writer.close();\n+            finally {\n+                connected = false;\n+    \n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n             }\n-\n-            close(reader);\n-            close(writer);\n-\n-            connected = false;\n-\n-            logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n-            callback.disconnected();\n-        }\n+        }     \n+        catch (IOException ex) {\n+            logger.debug(\"Unable to connect to the OpenTherm Gateway: {}\" , ex);\n+        }        \n     }\n \n     @Override\n     public synchronized void stop() {\n         logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n-\n         stopping = true;\n-\n-        close(socket);\n     }\n \n     @Override\n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 8054bdf381..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -98,23 +98,23 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         }\n                     }\n         \n-                    logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n             }\n             finally {\n                 connected = false;\n     \n-                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n                 callback.disconnected();\n             }\n         }     \n         catch (IOException ex) {\n-            logger.debug(\"Unable to connect to the OpenTherm Gateway: {}\" , ex);\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n         }        \n     }\n \n     @Override\n     public synchronized void stop() {\n-        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n         stopping = true;\n     }\n \n", "next_change": {"commit": "f27de9d0833f113c5bdae57c5e9e60d356c6120e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..47c3871317 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -123,8 +124,6 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         return connected;\n     }\n \n-    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n-\n     @Override\n     public void sendCommand(GatewayCommand command) {\n         String msg = command.toFullString();\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 47c3871317..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -126,14 +126,20 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n     @Override\n     public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n         String msg = command.toFullString();\n \n-        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n \n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n-            writer.printf(\"%s\\r\\n\", msg);\n-            writer.flush();\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n         } else {\n             logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n", "next_change": {"commit": "d11097e996d6815e85de94ae28a50a7e61b53386", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..b3ca47d4ce 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -137,7 +137,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n             if (wrtr != null) {\n-                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.print(msg + \"\\r\\n\");\n                 wrtr.flush();\n             }\n         } else {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NjYyOA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367396628", "body": "Use try-with-resources:\r\n```\r\ntry (writer = new PrintWriter(socket.getOutputStream(), true);\r\n            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {\r\n```\r\nThen you don't have to call close.", "bodyText": "Use try-with-resources:\ntry (writer = new PrintWriter(socket.getOutputStream(), true);\n            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {\n\nThen you don't have to call close.", "bodyHTML": "<p dir=\"auto\">Use try-with-resources:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"try (writer = new PrintWriter(socket.getOutputStream(), true);\n            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {\n\"><pre><code>try (writer = new PrintWriter(socket.getOutputStream(), true);\n            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {\n</code></pre></div>\n<p dir=\"auto\">Then you don't have to call close.</p>", "author": "Hilbrand", "createdAt": "2020-01-16T12:43:12Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.handler.TypeConverter;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        try {\n+            callback.log(LogLevel.Info,\n+                    String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n+\n+            callback.connecting();\n+\n+            socket = new Socket();\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n+            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            writer = new PrintWriter(socket.getOutputStream(), true);\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));", "originalCommit": "7628cabf0067eac62ce763d8a3457d57685f7766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwMjg0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367802843", "bodyText": "Like the using statement from c#, didn't know Java had such a thing. Anyway, causes compiler errors on my machine, so need to look into this..", "author": "ArjenKorevaar", "createdAt": "2020-01-17T07:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NjYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NzAwNw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368287007", "bodyText": "Fixed compiler error with updating java, implemeted try-with-resources", "author": "ArjenKorevaar", "createdAt": "2020-01-19T11:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NjYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -63,14 +64,14 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         connected = false;\n \n         try {\n-            callback.log(LogLevel.Info,\n+            callback.log(LogLevel.INFO,\n                     String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n \n             callback.connecting();\n \n             socket = new Socket();\n-            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n-            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n             writer = new PrintWriter(socket.getOutputStream(), true);\n             reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n \n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -79,7 +82,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n             callback.connected();\n \n-            callback.log(LogLevel.DEBUG, \"OpenThermGatewaySocketConnector connected\");\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n \n             sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n             // Set the OTGW to report every message it receives and transmits\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..8054bdf381 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -66,66 +63,59 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     public void run() {\n         stopping = false;\n         connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n \n-        try {            \n-            logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n-\n-            callback.connecting();\n-\n-            socket = new Socket();\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n             socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n             socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n-            writer = new PrintWriter(socket.getOutputStream(), true);\n-            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n-\n+    \n             connected = true;\n-\n+    \n             callback.connected();\n-\n+    \n             logger.debug(\"OpenThermGatewaySocketConnector connected\");\n-\n-            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n-            // Set the OTGW to report every message it receives and transmits\n-            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n-\n-            while (!stopping && !Thread.currentThread().isInterrupted()) {\n-                @Nullable String message = reader.readLine();\n-\n-                if (message != null) {\n-                    handleMessage(message);\n-                } else {\n-                    logger.info(\"Connection closed by OpenTherm Gateway\");\n-                    break;\n-                }\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n             }\n-\n-            logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n-        } catch (Exception e) {\n-            logger.error(\"An error occured in OpenThermGatewaySocketConnector: {}\", e.getMessage());\n-        } finally {\n-\n-            if (writer != null) {\n-                writer.flush();\n-                writer.close();\n+            finally {\n+                connected = false;\n+    \n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n             }\n-\n-            close(reader);\n-            close(writer);\n-\n-            connected = false;\n-\n-            logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n-            callback.disconnected();\n-        }\n+        }     \n+        catch (IOException ex) {\n+            logger.debug(\"Unable to connect to the OpenTherm Gateway: {}\" , ex);\n+        }        \n     }\n \n     @Override\n     public synchronized void stop() {\n         logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n-\n         stopping = true;\n-\n-        close(socket);\n     }\n \n     @Override\n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 8054bdf381..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -98,23 +98,23 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         }\n                     }\n         \n-                    logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n             }\n             finally {\n                 connected = false;\n     \n-                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n                 callback.disconnected();\n             }\n         }     \n         catch (IOException ex) {\n-            logger.debug(\"Unable to connect to the OpenTherm Gateway: {}\" , ex);\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n         }        \n     }\n \n     @Override\n     public synchronized void stop() {\n-        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n         stopping = true;\n     }\n \n", "next_change": {"commit": "f27de9d0833f113c5bdae57c5e9e60d356c6120e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..47c3871317 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -123,8 +124,6 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         return connected;\n     }\n \n-    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n-\n     @Override\n     public void sendCommand(GatewayCommand command) {\n         String msg = command.toFullString();\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 47c3871317..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -126,14 +126,20 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n     @Override\n     public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n         String msg = command.toFullString();\n \n-        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n \n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n-            writer.printf(\"%s\\r\\n\", msg);\n-            writer.flush();\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n         } else {\n             logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n", "next_change": {"commit": "d11097e996d6815e85de94ae28a50a7e61b53386", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..b3ca47d4ce 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -137,7 +137,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n             if (wrtr != null) {\n-                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.print(msg + \"\\r\\n\");\n                 wrtr.flush();\n             }\n         } else {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MTcxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389091715", "body": "```suggestion\r\n     private @Nullable OpenThermGatewayConfiguration config;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable private OpenThermGatewayConfiguration config;\n          \n          \n            \n                 private @Nullable OpenThermGatewayConfiguration config;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first x-last\">@Nullable</span> <span class=\"pl-k\">private</span> <span class=\"pl-smi\">OpenThermGatewayConfiguration</span> config;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">private</span><span class=\"x x-first\"> </span><span class=\"pl-k x x-last\">@Nullable</span> <span class=\"pl-smi\">OpenThermGatewayConfiguration</span> config;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-03-06T19:15:49Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;", "originalCommit": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODc0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248749", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-03-07T11:39:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MTcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex f80442a117..354048d8d8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -53,13 +48,11 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n \n-    @Nullable private OpenThermGatewayConfiguration config;\n-\n-    @Nullable private OpenThermGatewayConnector connector;\n-\n-    private boolean connecting = false;\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n \n-    private boolean explicitDisconnect = false;\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n \n     public OpenThermGatewayHandler(Thing thing) {\n         super(thing);\n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..b626d4cc2b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -48,11 +50,9 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n \n-    @Nullable\n-    private OpenThermGatewayConfiguration config;\n+    @Nullable private OpenThermGatewayConfiguration config;\n \n-    @Nullable\n-    private OpenThermGatewayConnector connector;\n+    @Nullable private OpenThermGatewayConnector connector;\n \n     public OpenThermGatewayHandler(Thing thing) {\n         super(thing);\n", "next_change": {"commit": "e2e66bb9838bfc21ac4acf458c3b99391651ce63", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b626d4cc2b..ed4ad29992 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -54,6 +56,8 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Nullable private OpenThermGatewayConnector connector;\n \n+    boolean connecting = false;\n+\n     public OpenThermGatewayHandler(Thing thing) {\n         super(thing);\n     }\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex ed4ad29992..f80442a117 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -56,7 +57,9 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Nullable private OpenThermGatewayConnector connector;\n \n-    boolean connecting = false;\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n \n     public OpenThermGatewayHandler(Thing thing) {\n         super(thing);\n", "next_change": {"commit": "535f5d1227450b96137c1ceed5d6bd4f373c7592", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex f80442a117..668b120783 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -53,9 +53,9 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n \n-    @Nullable private OpenThermGatewayConfiguration config;\n+    private @Nullable OpenThermGatewayConfiguration config;\n \n-    @Nullable private OpenThermGatewayConnector connector;\n+    private @Nullable OpenThermGatewayConnector connector;\n \n     private boolean connecting = false;\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MTkxMg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389091912", "body": "```suggestion\r\n    private @Nullable OpenThermGatewayConnector connector;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable private OpenThermGatewayConnector connector;\n          \n          \n            \n                private @Nullable OpenThermGatewayConnector connector;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Nullable</span><span class=\"x x-first\"> </span><span class=\"pl-k x x-last\">private</span> <span class=\"pl-smi\">OpenThermGatewayConnector</span> connector;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first\">private</span><span class=\"x x-last\"> </span><span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">OpenThermGatewayConnector</span> connector;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-03-06T19:16:13Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;\n+\n+    @Nullable private OpenThermGatewayConnector connector;", "originalCommit": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODczMQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248731", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-03-07T11:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MTkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex f80442a117..354048d8d8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -53,13 +48,11 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n \n-    @Nullable private OpenThermGatewayConfiguration config;\n-\n-    @Nullable private OpenThermGatewayConnector connector;\n-\n-    private boolean connecting = false;\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n \n-    private boolean explicitDisconnect = false;\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n \n     public OpenThermGatewayHandler(Thing thing) {\n         super(thing);\n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..b626d4cc2b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -48,11 +50,9 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n \n-    @Nullable\n-    private OpenThermGatewayConfiguration config;\n+    @Nullable private OpenThermGatewayConfiguration config;\n \n-    @Nullable\n-    private OpenThermGatewayConnector connector;\n+    @Nullable private OpenThermGatewayConnector connector;\n \n     public OpenThermGatewayHandler(Thing thing) {\n         super(thing);\n", "next_change": {"commit": "e2e66bb9838bfc21ac4acf458c3b99391651ce63", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b626d4cc2b..ed4ad29992 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -54,6 +56,8 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Nullable private OpenThermGatewayConnector connector;\n \n+    boolean connecting = false;\n+\n     public OpenThermGatewayHandler(Thing thing) {\n         super(thing);\n     }\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex ed4ad29992..f80442a117 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -56,7 +57,9 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Nullable private OpenThermGatewayConnector connector;\n \n-    boolean connecting = false;\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n \n     public OpenThermGatewayHandler(Thing thing) {\n         super(thing);\n", "next_change": {"commit": "535f5d1227450b96137c1ceed5d6bd4f373c7592", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex f80442a117..668b120783 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -53,9 +53,9 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n \n-    @Nullable private OpenThermGatewayConfiguration config;\n+    private @Nullable OpenThermGatewayConfiguration config;\n \n-    @Nullable private OpenThermGatewayConnector connector;\n+    private @Nullable OpenThermGatewayConnector connector;\n \n     private boolean connecting = false;\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MjgyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389092825", "body": "I would suggest add a description to your OFFLINE status updates so that users know what is going on", "bodyText": "I would suggest add a description to your OFFLINE status updates so that users know what is going on", "bodyHTML": "<p dir=\"auto\">I would suggest add a description to your OFFLINE status updates so that users know what is going on</p>", "author": "cpmeister", "createdAt": "2020-03-06T19:17:58Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;\n+\n+    @Nullable private OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);", "originalCommit": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODcyMA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248720", "bodyText": "Added a description", "author": "ArjenKorevaar", "createdAt": "2020-03-07T11:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MjgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex f80442a117..354048d8d8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -80,25 +73,30 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n \n-        if (!(command instanceof RefreshType)) {\n-            String channel = channelUID.getId();\n-            String code = getGatewayCodeFromChannel(channel);\n-\n-            GatewayCommand gatewayCommand;\n-\n-            if (command instanceof QuantityType<?>) {\n-                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n-                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n-            } else {\n-                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n-            }\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n \n-            if (gatewayCommand != null && checkConnection()) {\n-                connector.sendCommand(gatewayCommand);\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n             }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n         }\n     }\n \n+    boolean connecting = false;\n+\n     @Override\n     public void connecting() {\n         connecting = true;\n", "next_change": {"commit": "e2e66bb9838bfc21ac4acf458c3b99391651ce63", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..ed4ad29992 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -73,30 +77,24 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n \n-        try {\n-            if (command.toFullString() != \"REFRESH\") {\n-                String channel = channelUID.getId();\n-                String code = getGatewayCodeFromChannel(channel);\n-\n-                GatewayCommand gatewayCommand;\n-                if (command instanceof QuantityType) {\n-                    gatewayCommand = GatewayCommand.parse(code,\n-                            Double.toString(((QuantityType) command).doubleValue()));\n-                } else {\n-                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n-                }\n+        if (command.toFullString() != \"REFRESH\") {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n \n-                if (gatewayCommand != null && checkConnection()) {\n-                    connector.sendCommand(gatewayCommand);\n-                }\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType) {\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(((QuantityType) command).doubleValue()));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n             }\n-        } catch (Exception ex) {\n-            logger.error(\"error\", ex);\n         }\n     }\n \n-    boolean connecting = false;\n-\n     @Override\n     public void connecting() {\n         connecting = true;\n", "next_change": {"commit": "f4d2bfd2fcb3b29dd05b246a2c84bbe1e9f216c8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex ed4ad29992..dfa5b5495b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -98,7 +103,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n     }\n \n     @Override\n", "next_change": {"commit": "766a0e5159df21696dedf42c4c1f437fd19112e2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex dfa5b5495b..f812329e06 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -103,7 +114,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Connecting\");\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5ODg4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389098889", "body": "Don't create unmanaged threads\r\n```suggestion\r\n        scheduler.execute(connector);\r\n```", "bodyText": "Don't create unmanaged threads\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    new Thread(connector).start();\n          \n          \n            \n                    scheduler.execute(connector);", "bodyHTML": "<p dir=\"auto\">Don't create unmanaged threads</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">Thread</span><span class=\"x\">(connector)</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">start(</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first\">scheduler</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">execute(connector</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-03-06T19:30:59Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;\n+\n+    @Nullable private OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        disconnect();\n+\n+        logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+        explicitDisconnect = false;\n+\n+        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+        new Thread(connector).start();", "originalCommit": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODY1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248659", "bodyText": "From what I understand, the scheduler is used to execute a particular task at a given time, optionally recurring at an interval. This would work perfectly for, let say, reading data from some REST API. This thread however is used to have a constant loop listening for incoming data on the TCP socket, for which (again from what I understand) the Scheduler would not be suitable.\nI have asked questions about this on the forum, but didn't get a helpful answer. I also looked at at implementations from other bindings that have a similar character (ie. the constant loop) and there a separate thread is also used. Also, previous reviews from Hilbrand and J-N-K (amongst others) have so far not commented on using a thread in this particular situation.\nAnyway, if you feel that this should really be solved using a Scheduler, I will try to find some time to furter investigate the options.", "author": "ArjenKorevaar", "createdAt": "2020-03-07T11:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5ODg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxODYxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389918615", "bodyText": "Alright I see your point. Then at the very least you need to make sure that the created thread is named and is daemon. Make sure the thread name includes the name of the binding and its purpose.", "author": "cpmeister", "createdAt": "2020-03-09T19:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5ODg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3ODExMQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r390378111", "bodyText": "Thanks again! Added the name and made the thread daemon", "author": "ArjenKorevaar", "createdAt": "2020-03-10T14:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5ODg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex f80442a117..354048d8d8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -192,20 +253,28 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     }\n \n     private synchronized boolean connect() {\n-        disconnect();\n+        try {\n+            disconnect();\n \n-        logger.info(\"Starting OpenTherm Gateway connector\");\n+            logger.info(\"Starting OpenTherm Gateway connector\");\n \n-        explicitDisconnect = false;\n+            explicitDisconnect = false;\n \n-        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n-        new Thread(connector).start();\n+            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            new Thread(connector).start();\n \n-        logger.info(\"OpenTherm Gateway connector started\");\n+            logger.info(\"OpenTherm Gateway connector started\");\n \n-        return true;\n+            return true;\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+\n+        return false;\n     }\n \n+    boolean explicitDisconnect = false;\n+\n     private synchronized void disconnect() {\n         if (connector != null) {\n             if (connector.isConnected()) {\n", "next_change": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..4564dc9b5d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -266,11 +250,12 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n             logger.info(\"OpenTherm Gateway connector started\");\n \n             return true;\n-        } catch (Exception ex) {\n-            logger.error(\"error\", ex);\n-        }\n+       }\n+       catch (Exception ex) {\n+            disconnected();\n+       }\n \n-        return false;\n+       return false;\n     }\n \n     boolean explicitDisconnect = false;\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..f80442a117 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -237,29 +192,20 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     }\n \n     private synchronized boolean connect() {\n-       try {\n-            disconnect();\n+        disconnect();\n \n-            logger.info(\"Starting OpenTherm Gateway connector\");\n+        logger.info(\"Starting OpenTherm Gateway connector\");\n \n-            explicitDisconnect = false;\n+        explicitDisconnect = false;\n \n-            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n-            new Thread(connector).start();\n+        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+        new Thread(connector).start();\n \n-            logger.info(\"OpenTherm Gateway connector started\");\n+        logger.info(\"OpenTherm Gateway connector started\");\n \n-            return true;\n-       }\n-       catch (Exception ex) {\n-            disconnected();\n-       }\n-\n-       return false;\n+        return true;\n     }\n \n-    boolean explicitDisconnect = false;\n-\n     private synchronized void disconnect() {\n         if (connector != null) {\n             if (connector.isConnected()) {\n", "next_change": {"commit": "550abf0f6ac5feafd97aba9a916d036e4aa5ead5", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex f80442a117..fa731111f6 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -191,25 +192,28 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         return connect();\n     }\n \n-    private synchronized boolean connect() {\n+    private boolean connect() {\n         disconnect();\n \n-        logger.info(\"Starting OpenTherm Gateway connector\");\n+        logger.debug(\"Starting OpenTherm Gateway connector\");\n \n         explicitDisconnect = false;\n \n         connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n-        new Thread(connector).start();\n \n-        logger.info(\"OpenTherm Gateway connector started\");\n+        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+        thread.setDaemon(true);\n+        thread.start();\n+\n+        logger.debug(\"OpenTherm Gateway connector started\");\n \n         return true;\n     }\n \n-    private synchronized void disconnect() {\n+    private void disconnect() {\n         if (connector != null) {\n             if (connector.isConnected()) {\n-                logger.info(\"Stopping OpenTherm Gateway connector\");\n+                logger.debug(\"Stopping OpenTherm Gateway connector\");\n \n                 explicitDisconnect = true;\n                 connector.stop();\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex fa731111f6..b5818019e7 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -193,30 +214,40 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     }\n \n     private boolean connect() {\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n         disconnect();\n \n-        logger.debug(\"Starting OpenTherm Gateway connector\");\n+        if (conf != null) {\n+            logger.debug(\"Starting OpenTherm Gateway connector\");\n \n-        explicitDisconnect = false;\n+            explicitDisconnect = false;\n \n-        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            connector = new OpenThermGatewaySocketConnector(this, conf.ipaddress, conf.port);\n \n-        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n-        thread.setDaemon(true);\n-        thread.start();\n+            Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+            thread.setDaemon(true);\n+            thread.start();\n \n-        logger.debug(\"OpenTherm Gateway connector started\");\n+            logger.debug(\"OpenTherm Gateway connector started\");\n \n-        return true;\n+            return true;\n+        }\n+\n+        return false;\n     }\n \n     private void disconnect() {\n-        if (connector != null) {\n-            if (connector.isConnected()) {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        if (conn != null) {\n+            if (conn.isConnected()) {\n                 logger.debug(\"Stopping OpenTherm Gateway connector\");\n \n                 explicitDisconnect = true;\n-                connector.stop();\n+                conn.stop();\n             }\n \n             connector = null;\n", "next_change": {"commit": "e84b7d1ec8a5b0a782b25f8c3101d85355823c3e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b5818019e7..866bd16690 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -254,7 +254,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         }\n     }\n \n-    private String getGatewayCodeFromChannel(String channel) throws IllegalArgumentException {\n+    private @Nullable String getGatewayCodeFromChannel(String channel) throws IllegalArgumentException {\n         switch (channel) {\n             case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_SETPOINT_TEMPORARY:\n                 return GatewayCommandCode.TemperatureTemporary;\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5OTYyOA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389099628", "body": "```suggestion\r\n        } catch (IOException ex) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }     \n          \n          \n            \n                    catch (IOException ex) {\n          \n          \n            \n                    } catch (IOException ex) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }     </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IOException</span> ex) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IOException</span> ex) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-03-06T19:32:39Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        }     \n+        catch (IOException ex) {", "originalCommit": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODIzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248235", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-03-07T11:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5OTYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -63,59 +61,69 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     public void run() {\n         stopping = false;\n         connected = false;\n-        \n-        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n-\n-        callback.connecting();\n-        \n-        try (Socket socket = new Socket()) {            \n-            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n-            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n-    \n+\n+        try {\n+            callback.log(LogLevel.Info,\n+                    String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n+\n+            callback.connecting();\n+\n+            socket = new Socket();\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n+            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            writer = new PrintWriter(socket.getOutputStream(), true);\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+\n             connected = true;\n-    \n+\n             callback.connected();\n-    \n-            logger.info(\"OpenThermGatewaySocketConnector connected\");\n-    \n-            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n-                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n-                    // Make writer accessible on class level\n-                    writer = wrt;\n-    \n-                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n-                    // Set the OTGW to report every message it receives and transmits\n-                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n-        \n-                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n-                        @Nullable String message = reader.readLine();\n-        \n-                        if (message != null) {\n-                            handleMessage(message);\n-                        } else {\n-                            logger.info(\"Connection closed by OpenTherm Gateway\");\n-                            break;\n-                        }\n-                    }\n-        \n-                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector connected\");\n+\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+            // Set the OTGW to report every message it receives and transmits\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+            while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                @Nullable\n+                String message = reader.readLine();\n+\n+                if (message != null) {\n+                    handleMessage(message);\n+                } else {\n+                    callback.log(LogLevel.Info, \"Connection closed by OpenTherm Gateway\");\n+                    break;\n+                }\n             }\n-            finally {\n-                connected = false;\n-    \n-                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n-                callback.disconnected();\n+\n+            callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n+        } catch (Exception e) {\n+            callback.log(LogLevel.Error, \"An error occured in OpenThermGatewaySocketConnector: %s\", e.getMessage());\n+        } finally {\n+\n+            if (writer != null) {\n+                writer.flush();\n+                writer.close();\n             }\n-        }     \n-        catch (IOException ex) {\n-            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n-        }        \n+\n+            close(reader);\n+            close(writer);\n+\n+            connected = false;\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector disconnected\");\n+            callback.disconnected();\n+        }\n     }\n \n     @Override\n     public synchronized void stop() {\n-        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n         stopping = true;\n+\n+        close(socket);\n     }\n \n     @Override\n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -112,14 +112,14 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n             connected = false;\n \n-            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector disconnected\");\n+            callback.log(LogLevel.DEBUG, \"OpenThermGatewaySocketConnector disconnected\");\n             callback.disconnected();\n         }\n     }\n \n     @Override\n     public synchronized void stop() {\n-        callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+        callback.log(LogLevel.DEBUG, \"Stopping OpenThermGatewaySocketConnector\");\n \n         stopping = true;\n \n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -112,14 +114,14 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n             connected = false;\n \n-            callback.log(LogLevel.DEBUG, \"OpenThermGatewaySocketConnector disconnected\");\n+            logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n             callback.disconnected();\n         }\n     }\n \n     @Override\n     public synchronized void stop() {\n-        callback.log(LogLevel.DEBUG, \"Stopping OpenThermGatewaySocketConnector\");\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n \n         stopping = true;\n \n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..8054bdf381 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -66,66 +63,59 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     public void run() {\n         stopping = false;\n         connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n \n-        try {            \n-            logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n-\n-            callback.connecting();\n-\n-            socket = new Socket();\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n             socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n             socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n-            writer = new PrintWriter(socket.getOutputStream(), true);\n-            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n-\n+    \n             connected = true;\n-\n+    \n             callback.connected();\n-\n+    \n             logger.debug(\"OpenThermGatewaySocketConnector connected\");\n-\n-            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n-            // Set the OTGW to report every message it receives and transmits\n-            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n-\n-            while (!stopping && !Thread.currentThread().isInterrupted()) {\n-                @Nullable String message = reader.readLine();\n-\n-                if (message != null) {\n-                    handleMessage(message);\n-                } else {\n-                    logger.info(\"Connection closed by OpenTherm Gateway\");\n-                    break;\n-                }\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n             }\n-\n-            logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n-        } catch (Exception e) {\n-            logger.error(\"An error occured in OpenThermGatewaySocketConnector: {}\", e.getMessage());\n-        } finally {\n-\n-            if (writer != null) {\n-                writer.flush();\n-                writer.close();\n+            finally {\n+                connected = false;\n+    \n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n             }\n-\n-            close(reader);\n-            close(writer);\n-\n-            connected = false;\n-\n-            logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n-            callback.disconnected();\n-        }\n+        }     \n+        catch (IOException ex) {\n+            logger.debug(\"Unable to connect to the OpenTherm Gateway: {}\" , ex);\n+        }        \n     }\n \n     @Override\n     public synchronized void stop() {\n         logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n-\n         stopping = true;\n-\n-        close(socket);\n     }\n \n     @Override\n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 8054bdf381..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -98,23 +98,23 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         }\n                     }\n         \n-                    logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n             }\n             finally {\n                 connected = false;\n     \n-                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n                 callback.disconnected();\n             }\n         }     \n         catch (IOException ex) {\n-            logger.debug(\"Unable to connect to the OpenTherm Gateway: {}\" , ex);\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n         }        \n     }\n \n     @Override\n     public synchronized void stop() {\n-        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n         stopping = true;\n     }\n \n", "next_change": {"commit": "f27de9d0833f113c5bdae57c5e9e60d356c6120e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..47c3871317 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -123,8 +124,6 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         return connected;\n     }\n \n-    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n-\n     @Override\n     public void sendCommand(GatewayCommand command) {\n         String msg = command.toFullString();\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 47c3871317..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -126,14 +126,20 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n     @Override\n     public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n         String msg = command.toFullString();\n \n-        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n \n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n-            writer.printf(\"%s\\r\\n\", msg);\n-            writer.flush();\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n         } else {\n             logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n", "next_change": {"commit": "d11097e996d6815e85de94ae28a50a7e61b53386", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..b3ca47d4ce 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -137,7 +137,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n             if (wrtr != null) {\n-                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.print(msg + \"\\r\\n\");\n                 wrtr.flush();\n             }\n         } else {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMDQ3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389110477", "body": "please put all fields at the top of the class, also make it private if possible", "bodyText": "please put all fields at the top of the class, also make it private if possible", "bodyHTML": "<p dir=\"auto\">please put all fields at the top of the class, also make it private if possible</p>", "author": "cpmeister", "createdAt": "2020-03-06T19:48:26Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        }     \n+        catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();", "originalCommit": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODAxOA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248018", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-03-07T11:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMDQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -63,59 +61,69 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     public void run() {\n         stopping = false;\n         connected = false;\n-        \n-        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n-\n-        callback.connecting();\n-        \n-        try (Socket socket = new Socket()) {            \n-            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n-            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n-    \n+\n+        try {\n+            callback.log(LogLevel.Info,\n+                    String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n+\n+            callback.connecting();\n+\n+            socket = new Socket();\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n+            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            writer = new PrintWriter(socket.getOutputStream(), true);\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+\n             connected = true;\n-    \n+\n             callback.connected();\n-    \n-            logger.info(\"OpenThermGatewaySocketConnector connected\");\n-    \n-            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n-                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n-                    // Make writer accessible on class level\n-                    writer = wrt;\n-    \n-                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n-                    // Set the OTGW to report every message it receives and transmits\n-                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n-        \n-                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n-                        @Nullable String message = reader.readLine();\n-        \n-                        if (message != null) {\n-                            handleMessage(message);\n-                        } else {\n-                            logger.info(\"Connection closed by OpenTherm Gateway\");\n-                            break;\n-                        }\n-                    }\n-        \n-                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector connected\");\n+\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+            // Set the OTGW to report every message it receives and transmits\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+            while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                @Nullable\n+                String message = reader.readLine();\n+\n+                if (message != null) {\n+                    handleMessage(message);\n+                } else {\n+                    callback.log(LogLevel.Info, \"Connection closed by OpenTherm Gateway\");\n+                    break;\n+                }\n             }\n-            finally {\n-                connected = false;\n-    \n-                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n-                callback.disconnected();\n+\n+            callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n+        } catch (Exception e) {\n+            callback.log(LogLevel.Error, \"An error occured in OpenThermGatewaySocketConnector: %s\", e.getMessage());\n+        } finally {\n+\n+            if (writer != null) {\n+                writer.flush();\n+                writer.close();\n             }\n-        }     \n-        catch (IOException ex) {\n-            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n-        }        \n+\n+            close(reader);\n+            close(writer);\n+\n+            connected = false;\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector disconnected\");\n+            callback.disconnected();\n+        }\n     }\n \n     @Override\n     public synchronized void stop() {\n-        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n         stopping = true;\n+\n+        close(socket);\n     }\n \n     @Override\n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -112,14 +112,14 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n             connected = false;\n \n-            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector disconnected\");\n+            callback.log(LogLevel.DEBUG, \"OpenThermGatewaySocketConnector disconnected\");\n             callback.disconnected();\n         }\n     }\n \n     @Override\n     public synchronized void stop() {\n-        callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+        callback.log(LogLevel.DEBUG, \"Stopping OpenThermGatewaySocketConnector\");\n \n         stopping = true;\n \n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -112,14 +114,14 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n             connected = false;\n \n-            callback.log(LogLevel.DEBUG, \"OpenThermGatewaySocketConnector disconnected\");\n+            logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n             callback.disconnected();\n         }\n     }\n \n     @Override\n     public synchronized void stop() {\n-        callback.log(LogLevel.DEBUG, \"Stopping OpenThermGatewaySocketConnector\");\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n \n         stopping = true;\n \n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..8054bdf381 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -66,66 +63,59 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     public void run() {\n         stopping = false;\n         connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n \n-        try {            \n-            logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n-\n-            callback.connecting();\n-\n-            socket = new Socket();\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n             socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n             socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n-            writer = new PrintWriter(socket.getOutputStream(), true);\n-            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n-\n+    \n             connected = true;\n-\n+    \n             callback.connected();\n-\n+    \n             logger.debug(\"OpenThermGatewaySocketConnector connected\");\n-\n-            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n-            // Set the OTGW to report every message it receives and transmits\n-            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n-\n-            while (!stopping && !Thread.currentThread().isInterrupted()) {\n-                @Nullable String message = reader.readLine();\n-\n-                if (message != null) {\n-                    handleMessage(message);\n-                } else {\n-                    logger.info(\"Connection closed by OpenTherm Gateway\");\n-                    break;\n-                }\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n             }\n-\n-            logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n-        } catch (Exception e) {\n-            logger.error(\"An error occured in OpenThermGatewaySocketConnector: {}\", e.getMessage());\n-        } finally {\n-\n-            if (writer != null) {\n-                writer.flush();\n-                writer.close();\n+            finally {\n+                connected = false;\n+    \n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n             }\n-\n-            close(reader);\n-            close(writer);\n-\n-            connected = false;\n-\n-            logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n-            callback.disconnected();\n-        }\n+        }     \n+        catch (IOException ex) {\n+            logger.debug(\"Unable to connect to the OpenTherm Gateway: {}\" , ex);\n+        }        \n     }\n \n     @Override\n     public synchronized void stop() {\n         logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n-\n         stopping = true;\n-\n-        close(socket);\n     }\n \n     @Override\n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 8054bdf381..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -98,23 +98,23 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         }\n                     }\n         \n-                    logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n             }\n             finally {\n                 connected = false;\n     \n-                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n                 callback.disconnected();\n             }\n         }     \n         catch (IOException ex) {\n-            logger.debug(\"Unable to connect to the OpenTherm Gateway: {}\" , ex);\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n         }        \n     }\n \n     @Override\n     public synchronized void stop() {\n-        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n         stopping = true;\n     }\n \n", "next_change": {"commit": "f27de9d0833f113c5bdae57c5e9e60d356c6120e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..47c3871317 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -123,8 +124,6 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         return connected;\n     }\n \n-    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n-\n     @Override\n     public void sendCommand(GatewayCommand command) {\n         String msg = command.toFullString();\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 47c3871317..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -126,14 +126,20 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n     @Override\n     public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n         String msg = command.toFullString();\n \n-        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n \n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n-            writer.printf(\"%s\\r\\n\", msg);\n-            writer.flush();\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n         } else {\n             logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n", "next_change": {"commit": "d11097e996d6815e85de94ae28a50a7e61b53386", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..b3ca47d4ce 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -137,7 +137,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n             if (wrtr != null) {\n-                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.print(msg + \"\\r\\n\");\n                 wrtr.flush();\n             }\n         } else {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMzQ1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389113459", "body": "I would also flush the writer here to make sure the data gets sent", "bodyText": "I would also flush the writer here to make sure the data gets sent", "bodyHTML": "<p dir=\"auto\">I would also flush the writer here to make sure the data gets sent</p>", "author": "cpmeister", "createdAt": "2020-03-06T19:55:03Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        }     \n+        catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            writer.printf(\"%s\\r\\n\", msg);", "originalCommit": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODAzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248031", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-03-07T11:27:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMzQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -129,13 +137,15 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     public void sendCommand(GatewayCommand command) {\n         String msg = command.toFullString();\n \n-        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n \n         if (connected) {\n-            logger.debug(\"Sending message: {}\", msg);\n+            callback.log(LogLevel.Debug, \"Sending message: %s\", msg);\n             writer.printf(\"%s\\r\\n\", msg);\n         } else {\n-            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+            callback.log(LogLevel.Debug,\n+                    \"Unable to send message: %s. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n     }\n \n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -141,10 +141,10 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                 new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n \n         if (connected) {\n-            callback.log(LogLevel.Debug, \"Sending message: %s\", msg);\n+            callback.log(LogLevel.DEBUG, \"Sending message: %s\", msg);\n             writer.printf(\"%s\\r\\n\", msg);\n         } else {\n-            callback.log(LogLevel.Debug,\n+            callback.log(LogLevel.DEBUG,\n                     \"Unable to send message: %s. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n     }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -137,15 +139,13 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     public void sendCommand(GatewayCommand command) {\n         String msg = command.toFullString();\n \n-        pendingCommands.put(command.getCode(),\n-                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n \n         if (connected) {\n-            callback.log(LogLevel.DEBUG, \"Sending message: %s\", msg);\n+            logger.debug(\"Sending message: {}\", msg);\n             writer.printf(\"%s\\r\\n\", msg);\n         } else {\n-            callback.log(LogLevel.DEBUG,\n-                    \"Unable to send message: %s. OpenThermGatewaySocketConnector is not connected.\", msg);\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n     }\n \n", "next_change": {"commit": "0d25f0d72e398529efc062d193eaedceec95ed96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..b8e794d306 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -144,6 +134,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n             writer.printf(\"%s\\r\\n\", msg);\n+            writer.flush();\n         } else {\n             logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex b8e794d306..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -123,18 +124,22 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         return connected;\n     }\n \n-    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n-\n     @Override\n     public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n         String msg = command.toFullString();\n \n-        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n \n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n-            writer.printf(\"%s\\r\\n\", msg);\n-            writer.flush();\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n         } else {\n             logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n", "next_change": {"commit": "d11097e996d6815e85de94ae28a50a7e61b53386", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..b3ca47d4ce 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -137,7 +137,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n             if (wrtr != null) {\n-                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.print(msg + \"\\r\\n\");\n                 wrtr.flush();\n             }\n         } else {\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -153,15 +153,15 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (message.length() > 2 && message.charAt(2) == ':') {\n             String code = message.substring(0, 2);\n             String value = message.substring(3);\n-            callback.log(LogLevel.DEBUG, String.format(\"Received command confirmation: %s: %s\", code, value));\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n             pendingCommands.remove(code);\n             return;\n         }\n \n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n             if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n-                callback.log(LogLevel.DEBUG,\n-                        String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n", "next_change": {"commit": "45441bad99587a2089460d5faca9a49686f5051c", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..0af14f79e8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -159,11 +155,16 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             return;\n         }\n \n+        long currentTime = System.currentTimeMillis();\n+\n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n-            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime < timeoutTime) {\n                 logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n-            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+            } else if (currentTime > timeoutTime) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n             }\n         }\n", "next_change": {"commit": "e493f47fd02a581b2acc5eb23bbb188eaecd196e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 0af14f79e8..6c7e4dd300 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -161,7 +161,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n             long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n \n-            if (currentTime > responseTime && currentTime < timeoutTime) {\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n                 logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (currentTime > timeoutTime) {\n", "next_change": {"commit": "f2f002c5f4d5d6d717c8a9ba7ee71088663e4478", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 6c7e4dd300..dd8d80b574 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -162,7 +162,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n \n             if (currentTime > responseTime && currentTime <= timeoutTime) {\n-                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (currentTime > timeoutTime) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -153,17 +153,17 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (message.length() > 2 && message.charAt(2) == ':') {\n             String code = message.substring(0, 2);\n             String value = message.substring(3);\n-            callback.log(LogLevel.Debug, String.format(\"Received command confirmation: %s: %s\", code, value));\n+            callback.log(LogLevel.DEBUG, String.format(\"Received command confirmation: %s: %s\", code, value));\n             pendingCommands.remove(code);\n             return;\n         }\n \n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n-            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME) {\n-                callback.log(LogLevel.Debug,\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+                callback.log(LogLevel.DEBUG,\n                         String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n                 sendCommand(timeAndCommand.getValue());\n-            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT) {\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n             }\n         }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -153,15 +153,15 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (message.length() > 2 && message.charAt(2) == ':') {\n             String code = message.substring(0, 2);\n             String value = message.substring(3);\n-            callback.log(LogLevel.DEBUG, String.format(\"Received command confirmation: %s: %s\", code, value));\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n             pendingCommands.remove(code);\n             return;\n         }\n \n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n             if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n-                callback.log(LogLevel.DEBUG,\n-                        String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n", "next_change": {"commit": "45441bad99587a2089460d5faca9a49686f5051c", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..0af14f79e8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -159,11 +155,16 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             return;\n         }\n \n+        long currentTime = System.currentTimeMillis();\n+\n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n-            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime < timeoutTime) {\n                 logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n-            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+            } else if (currentTime > timeoutTime) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n             }\n         }\n", "next_change": {"commit": "e493f47fd02a581b2acc5eb23bbb188eaecd196e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 0af14f79e8..6c7e4dd300 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -161,7 +161,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n             long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n \n-            if (currentTime > responseTime && currentTime < timeoutTime) {\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n                 logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (currentTime > timeoutTime) {\n", "next_change": {"commit": "f2f002c5f4d5d6d717c8a9ba7ee71088663e4478", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 6c7e4dd300..dd8d80b574 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -162,7 +162,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n \n             if (currentTime > responseTime && currentTime <= timeoutTime) {\n-                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (currentTime > timeoutTime) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -171,11 +171,10 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            callback.log(LogLevel.DEBUG, \"Received message: %s, (unknown)\", message);\n+            logger.debug(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            callback.log(LogLevel.DEBUG, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n-                    msg.getCode(), msg.getMessageType().toString()));\n+            logger.debug(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -171,10 +161,10 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            logger.debug(\"Received message: {}, (unknown)\", message);\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            logger.debug(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -164,7 +170,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             logger.trace(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n+                    msg.getMessageType().toString());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": {"commit": "16a5c94678bf41760ea84ef9232f728c75fb2954", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..82faecded4 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -170,8 +175,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             logger.trace(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n-                    msg.getMessageType().toString());\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNzE3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389117172", "body": "So all this code is just for trace logging? If this code is only for logging then separate it out into its own method.", "bodyText": "So all this code is just for trace logging? If this code is only for logging then separate it out into its own method.", "bodyHTML": "<p dir=\"auto\">So all this code is just for trace logging? If this code is only for logging then separate it out into its own method.</p>", "author": "cpmeister", "createdAt": "2020-03-06T20:03:26Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        }     \n+        catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            writer.printf(\"%s\\r\\n\", msg);\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n+            return;\n+        } else {\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+        }\n+\n+        if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+            }\n+        }", "originalCommit": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODE5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248196", "bodyText": "This code is used to convert the incoming message, based on it's derived datatype, to a SmartHome type (State variable). The logging is just added for tracing information", "author": "ArjenKorevaar", "createdAt": "2020-03-07T11:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNzE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -161,43 +171,46 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            logger.trace(\"Received message: {}, (unknown)\", message);\n+            callback.log(LogLevel.Debug, \"Received message: %s, (unknown)\", message);\n             return;\n         } else {\n-            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+            callback.log(LogLevel.Debug, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n+                    msg.getCode(), msg.getMessageType().toString()));\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n \n-            for (DataItem dataItem : dataItems) {\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case FLAGS:\n-                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case UINT8:\n-                    case UINT16:\n-                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(msg.getUInt(dataItem.getByteType()));\n                         break;\n-                    case INT8:\n-                    case INT16:\n-                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(msg.getInt(dataItem.getByteType()));\n                         break;\n-                    case FLOAT:\n-                        state = new DecimalType(msg.getFloat());\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(msg.getFloat());\n                         break;\n-                    case DOWTOD:\n+                    case DoWToD:\n                         break;\n                 }\n-\n-                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                callback.log(LogLevel.Trace,\n+                        String.format(\"  Data %d: %d %s %s %s\", i, dataItem.getID(), dataItem.getSubject(),\n+                                dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n             }\n         }\n \n-        if (msg.getMessageType() == MessageType.READACK || msg.getMessageType() == MessageType.WRITEDATA) {\n+        if (msg.getMessageType() == MessageType.ReadAck || msg.getMessageType() == MessageType.WriteData) {\n             receiveMessage(msg);\n         }\n     }\n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -171,46 +171,44 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            callback.log(LogLevel.Debug, \"Received message: %s, (unknown)\", message);\n+            callback.log(LogLevel.DEBUG, \"Received message: %s, (unknown)\", message);\n             return;\n         } else {\n-            callback.log(LogLevel.Debug, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n+            callback.log(LogLevel.DEBUG, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n                     msg.getCode(), msg.getMessageType().toString()));\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n \n-            for (int i = 0; i < dataItems.length; i++) {\n-                DataItem dataItem = dataItems[i];\n-\n+            for (DataItem dataItem : dataItems) {\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case Flags:\n-                        state = TypeConverter.toOnOffType(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case Uint8:\n-                    case Uint16:\n-                        state = TypeConverter.toDecimalType(msg.getUInt(dataItem.getByteType()));\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n                         break;\n-                    case Int8:\n-                    case Int16:\n-                        state = TypeConverter.toDecimalType(msg.getInt(dataItem.getByteType()));\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n                         break;\n-                    case Float:\n-                        state = TypeConverter.toDecimalType(msg.getFloat());\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n                         break;\n-                    case DoWToD:\n+                    case DOWTOD:\n                         break;\n                 }\n-                callback.log(LogLevel.Trace,\n-                        String.format(\"  Data %d: %d %s %s %s\", i, dataItem.getID(), dataItem.getSubject(),\n+                callback.log(LogLevel.DEBUG,\n+                        String.format(\"  Data: %d %s %s %s\", dataItem.getID(), dataItem.getSubject(),\n                                 dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n             }\n         }\n \n-        if (msg.getMessageType() == MessageType.ReadAck || msg.getMessageType() == MessageType.WriteData) {\n+        if (msg.getMessageType() == MessageType.READACK || msg.getMessageType() == MessageType.WRITEDATA) {\n             receiveMessage(msg);\n         }\n     }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -202,9 +201,9 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                     case DOWTOD:\n                         break;\n                 }\n-                callback.log(LogLevel.DEBUG,\n-                        String.format(\"  Data: %d %s %s %s\", dataItem.getID(), dataItem.getSubject(),\n-                                dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n+\n+                logger.debug(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n \n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -202,7 +192,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         break;\n                 }\n \n-                logger.debug(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n                     dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -193,7 +200,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                 }\n \n                 logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n \n", "next_change": {"commit": "16a5c94678bf41760ea84ef9232f728c75fb2954", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..82faecded4 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -199,8 +203,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         break;\n                 }\n \n-                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(), dataItem.getDataType(),\n+                        state == null ? \"\" : state);\n             }\n         }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ4OTE5NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r392489194", "body": "I'm pretty sure that a handler is disposed before it is removed. So I don't think this code is needed.", "bodyText": "I'm pretty sure that a handler is disposed before it is removed. So I don't think this code is needed.", "bodyHTML": "<p dir=\"auto\">I'm pretty sure that a handler is disposed before it is removed. So I don't think this code is needed.</p>", "author": "cpmeister", "createdAt": "2020-03-13T21:26:51Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }", "originalCommit": "d33464a4cd21f907708e5483463e3497bf2f3c3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyMjg3MA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r394322870", "bodyText": "I'm not worried about the handler itself, I'm calling disconnect() on the background thread when it happens.", "author": "ArjenKorevaar", "createdAt": "2020-03-18T12:53:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ4OTE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex cb3f870c49..354048d8d8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -143,34 +149,88 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case FLAGS:\n-                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case UINT8:\n-                    case UINT16:\n-                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n                         break;\n-                    case INT8:\n-                    case INT16:\n-                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n                         break;\n-                    case FLOAT:\n-                        float value = message.getFloat();\n-                        @Nullable Unit<?> unit = dataItem.getUnit();\n-                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n                         break;\n-                    case DOWTOD:\n+                    case DoWToD:\n                         break;\n                 }\n-          \n+\n                 if (state != null) {\n                     logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n-                    updateState(channelId, state);\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n+                    }\n                 }\n             }\n         }\n     }\n \n+    @Override\n+    public void log(LogLevel loglevel, String format, String arg) {\n+        String message = String.format(format, arg);\n+        log(loglevel, message);\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message, Throwable t) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message, t);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message, t);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message, t);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message, t);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message, t);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n     @Override\n     public void handleRemoval() {\n         logger.debug(\"Removing OpenTherm Gateway handler\");\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..0861edc52c 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -149,88 +140,34 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case Flags:\n-                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case Uint8:\n-                    case Uint16:\n-                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n                         break;\n-                    case Int8:\n-                    case Int16:\n-                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n                         break;\n-                    case Float:\n-                        state = TypeConverter.toDecimalType(message.getFloat());\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n                         break;\n-                    case DoWToD:\n+                    case DOWTOD:\n                         break;\n                 }\n-\n+          \n                 if (state != null) {\n                     logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n-                    try {\n-                        updateState(channelId, state);\n-                    } catch (IllegalStateException e) {\n-                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n-                    }\n+                    updateState(channelId, state);\n                 }\n             }\n         }\n     }\n \n-    @Override\n-    public void log(LogLevel loglevel, String format, String arg) {\n-        String message = String.format(format, arg);\n-        log(loglevel, message);\n-    }\n-\n-    @Override\n-    public void log(LogLevel loglevel, String message, Throwable t) {\n-        switch (loglevel) {\n-            case Trace:\n-                logger.trace(\"{}\", message, t);\n-                break;\n-            case Debug:\n-                logger.debug(\"{}\", message, t);\n-                break;\n-            case Info:\n-                logger.info(\"{}\", message, t);\n-                break;\n-            case Warning:\n-                logger.warn(\"{}\", message, t);\n-                break;\n-            case Error:\n-                logger.error(\"{}\", message, t);\n-                break;\n-            default:\n-                break;\n-        }\n-    }\n-\n-    @Override\n-    public void log(LogLevel loglevel, String message) {\n-        switch (loglevel) {\n-            case Trace:\n-                logger.trace(\"{}\", message);\n-                break;\n-            case Debug:\n-                logger.debug(\"{}\", message);\n-                break;\n-            case Info:\n-                logger.info(\"{}\", message);\n-                break;\n-            case Warning:\n-                logger.warn(\"{}\", message);\n-                break;\n-            case Error:\n-                logger.error(\"{}\", message);\n-                break;\n-            default:\n-                break;\n-        }\n-    }\n-\n     @Override\n     public void handleRemoval() {\n         logger.debug(\"Removing OpenTherm Gateway handler\");\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5MDc5MA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r392490790", "body": "```suggestion\r\n        logger.debug(\"OpenTherm Gateway connector started\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"OpenTherm Gateway connector started\");\n          \n          \n            \n                    logger.debug(\"OpenTherm Gateway connector started\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">info</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>OpenTherm Gateway connector started<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">debug</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>OpenTherm Gateway connector started<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-03-13T21:29:39Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        disconnect();\n+\n+        logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+        explicitDisconnect = false;\n+\n+        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+\n+        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+        thread.setDaemon(true);\n+        thread.start();\n+\n+        logger.info(\"OpenTherm Gateway connector started\");", "originalCommit": "d33464a4cd21f907708e5483463e3497bf2f3c3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNzIwMg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r394327202", "bodyText": "changed info to debug", "author": "ArjenKorevaar", "createdAt": "2020-03-18T13:00:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5MDc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex cb3f870c49..354048d8d8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -193,23 +253,28 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     }\n \n     private synchronized boolean connect() {\n-        disconnect();\n+        try {\n+            disconnect();\n \n-        logger.info(\"Starting OpenTherm Gateway connector\");\n+            logger.info(\"Starting OpenTherm Gateway connector\");\n \n-        explicitDisconnect = false;\n+            explicitDisconnect = false;\n \n-        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            new Thread(connector).start();\n \n-        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n-        thread.setDaemon(true);\n-        thread.start();\n+            logger.info(\"OpenTherm Gateway connector started\");\n \n-        logger.info(\"OpenTherm Gateway connector started\");\n+            return true;\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n \n-        return true;\n+        return false;\n     }\n \n+    boolean explicitDisconnect = false;\n+\n     private synchronized void disconnect() {\n         if (connector != null) {\n             if (connector.isConnected()) {\n", "next_change": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..4564dc9b5d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -266,11 +250,12 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n             logger.info(\"OpenTherm Gateway connector started\");\n \n             return true;\n-        } catch (Exception ex) {\n-            logger.error(\"error\", ex);\n-        }\n+       }\n+       catch (Exception ex) {\n+            disconnected();\n+       }\n \n-        return false;\n+       return false;\n     }\n \n     boolean explicitDisconnect = false;\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..f80442a117 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -237,29 +192,20 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     }\n \n     private synchronized boolean connect() {\n-       try {\n-            disconnect();\n+        disconnect();\n \n-            logger.info(\"Starting OpenTherm Gateway connector\");\n+        logger.info(\"Starting OpenTherm Gateway connector\");\n \n-            explicitDisconnect = false;\n+        explicitDisconnect = false;\n \n-            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n-            new Thread(connector).start();\n+        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+        new Thread(connector).start();\n \n-            logger.info(\"OpenTherm Gateway connector started\");\n+        logger.info(\"OpenTherm Gateway connector started\");\n \n-            return true;\n-       }\n-       catch (Exception ex) {\n-            disconnected();\n-       }\n-\n-       return false;\n+        return true;\n     }\n \n-    boolean explicitDisconnect = false;\n-\n     private synchronized void disconnect() {\n         if (connector != null) {\n             if (connector.isConnected()) {\n", "next_change": {"commit": "550abf0f6ac5feafd97aba9a916d036e4aa5ead5", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex f80442a117..fa731111f6 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -191,25 +192,28 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         return connect();\n     }\n \n-    private synchronized boolean connect() {\n+    private boolean connect() {\n         disconnect();\n \n-        logger.info(\"Starting OpenTherm Gateway connector\");\n+        logger.debug(\"Starting OpenTherm Gateway connector\");\n \n         explicitDisconnect = false;\n \n         connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n-        new Thread(connector).start();\n \n-        logger.info(\"OpenTherm Gateway connector started\");\n+        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+        thread.setDaemon(true);\n+        thread.start();\n+\n+        logger.debug(\"OpenTherm Gateway connector started\");\n \n         return true;\n     }\n \n-    private synchronized void disconnect() {\n+    private void disconnect() {\n         if (connector != null) {\n             if (connector.isConnected()) {\n-                logger.info(\"Stopping OpenTherm Gateway connector\");\n+                logger.debug(\"Stopping OpenTherm Gateway connector\");\n \n                 explicitDisconnect = true;\n                 connector.stop();\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex fa731111f6..b5818019e7 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -193,30 +214,40 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     }\n \n     private boolean connect() {\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n         disconnect();\n \n-        logger.debug(\"Starting OpenTherm Gateway connector\");\n+        if (conf != null) {\n+            logger.debug(\"Starting OpenTherm Gateway connector\");\n \n-        explicitDisconnect = false;\n+            explicitDisconnect = false;\n \n-        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            connector = new OpenThermGatewaySocketConnector(this, conf.ipaddress, conf.port);\n \n-        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n-        thread.setDaemon(true);\n-        thread.start();\n+            Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+            thread.setDaemon(true);\n+            thread.start();\n \n-        logger.debug(\"OpenTherm Gateway connector started\");\n+            logger.debug(\"OpenTherm Gateway connector started\");\n \n-        return true;\n+            return true;\n+        }\n+\n+        return false;\n     }\n \n     private void disconnect() {\n-        if (connector != null) {\n-            if (connector.isConnected()) {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        if (conn != null) {\n+            if (conn.isConnected()) {\n                 logger.debug(\"Stopping OpenTherm Gateway connector\");\n \n                 explicitDisconnect = true;\n-                connector.stop();\n+                conn.stop();\n             }\n \n             connector = null;\n", "next_change": {"commit": "e84b7d1ec8a5b0a782b25f8c3101d85355823c3e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b5818019e7..866bd16690 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -254,7 +254,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         }\n     }\n \n-    private String getGatewayCodeFromChannel(String channel) throws IllegalArgumentException {\n+    private @Nullable String getGatewayCodeFromChannel(String channel) throws IllegalArgumentException {\n         switch (channel) {\n             case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_SETPOINT_TEMPORARY:\n                 return GatewayCommandCode.TemperatureTemporary;\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5MTA4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r392491086", "body": "Please try to follow the openHab [coding guidlines](https://www.openhab.org/docs/developer/guidelines.html#f-logging). Info level logging should generally not be touched by bindings, instead you should use debug or trace. Please go through the other parts of your code and change the logging levels accordingly.\r\n\r\n```suggestion\r\n        logger.debug(\"Starting OpenTherm Gateway connector\");\r\n```", "bodyText": "Please try to follow the openHab coding guidlines. Info level logging should generally not be touched by bindings, instead you should use debug or trace. Please go through the other parts of your code and change the logging levels accordingly.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Starting OpenTherm Gateway connector\");\n          \n          \n            \n                    logger.debug(\"Starting OpenTherm Gateway connector\");", "bodyHTML": "<p dir=\"auto\">Please try to follow the openHab <a href=\"https://www.openhab.org/docs/developer/guidelines.html#f-logging\" rel=\"nofollow\">coding guidlines</a>. Info level logging should generally not be touched by bindings, instead you should use debug or trace. Please go through the other parts of your code and change the logging levels accordingly.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">info</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Starting OpenTherm Gateway connector<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">debug</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Starting OpenTherm Gateway connector<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-03-13T21:30:11Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        disconnect();\n+\n+        logger.info(\"Starting OpenTherm Gateway connector\");", "originalCommit": "d33464a4cd21f907708e5483463e3497bf2f3c3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNzA1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r394327053", "bodyText": "Changed all logger.info to logger.debug", "author": "ArjenKorevaar", "createdAt": "2020-03-18T13:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5MTA4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex cb3f870c49..354048d8d8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -193,23 +253,28 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     }\n \n     private synchronized boolean connect() {\n-        disconnect();\n+        try {\n+            disconnect();\n \n-        logger.info(\"Starting OpenTherm Gateway connector\");\n+            logger.info(\"Starting OpenTherm Gateway connector\");\n \n-        explicitDisconnect = false;\n+            explicitDisconnect = false;\n \n-        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            new Thread(connector).start();\n \n-        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n-        thread.setDaemon(true);\n-        thread.start();\n+            logger.info(\"OpenTherm Gateway connector started\");\n \n-        logger.info(\"OpenTherm Gateway connector started\");\n+            return true;\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n \n-        return true;\n+        return false;\n     }\n \n+    boolean explicitDisconnect = false;\n+\n     private synchronized void disconnect() {\n         if (connector != null) {\n             if (connector.isConnected()) {\n", "next_change": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..4564dc9b5d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -266,11 +250,12 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n             logger.info(\"OpenTherm Gateway connector started\");\n \n             return true;\n-        } catch (Exception ex) {\n-            logger.error(\"error\", ex);\n-        }\n+       }\n+       catch (Exception ex) {\n+            disconnected();\n+       }\n \n-        return false;\n+       return false;\n     }\n \n     boolean explicitDisconnect = false;\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 4564dc9b5d..f80442a117 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -237,29 +192,20 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     }\n \n     private synchronized boolean connect() {\n-       try {\n-            disconnect();\n+        disconnect();\n \n-            logger.info(\"Starting OpenTherm Gateway connector\");\n+        logger.info(\"Starting OpenTherm Gateway connector\");\n \n-            explicitDisconnect = false;\n+        explicitDisconnect = false;\n \n-            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n-            new Thread(connector).start();\n+        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+        new Thread(connector).start();\n \n-            logger.info(\"OpenTherm Gateway connector started\");\n+        logger.info(\"OpenTherm Gateway connector started\");\n \n-            return true;\n-       }\n-       catch (Exception ex) {\n-            disconnected();\n-       }\n-\n-       return false;\n+        return true;\n     }\n \n-    boolean explicitDisconnect = false;\n-\n     private synchronized void disconnect() {\n         if (connector != null) {\n             if (connector.isConnected()) {\n", "next_change": {"commit": "550abf0f6ac5feafd97aba9a916d036e4aa5ead5", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex f80442a117..fa731111f6 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -191,25 +192,28 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         return connect();\n     }\n \n-    private synchronized boolean connect() {\n+    private boolean connect() {\n         disconnect();\n \n-        logger.info(\"Starting OpenTherm Gateway connector\");\n+        logger.debug(\"Starting OpenTherm Gateway connector\");\n \n         explicitDisconnect = false;\n \n         connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n-        new Thread(connector).start();\n \n-        logger.info(\"OpenTherm Gateway connector started\");\n+        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+        thread.setDaemon(true);\n+        thread.start();\n+\n+        logger.debug(\"OpenTherm Gateway connector started\");\n \n         return true;\n     }\n \n-    private synchronized void disconnect() {\n+    private void disconnect() {\n         if (connector != null) {\n             if (connector.isConnected()) {\n-                logger.info(\"Stopping OpenTherm Gateway connector\");\n+                logger.debug(\"Stopping OpenTherm Gateway connector\");\n \n                 explicitDisconnect = true;\n                 connector.stop();\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex fa731111f6..b5818019e7 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -193,30 +214,40 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     }\n \n     private boolean connect() {\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n         disconnect();\n \n-        logger.debug(\"Starting OpenTherm Gateway connector\");\n+        if (conf != null) {\n+            logger.debug(\"Starting OpenTherm Gateway connector\");\n \n-        explicitDisconnect = false;\n+            explicitDisconnect = false;\n \n-        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            connector = new OpenThermGatewaySocketConnector(this, conf.ipaddress, conf.port);\n \n-        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n-        thread.setDaemon(true);\n-        thread.start();\n+            Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+            thread.setDaemon(true);\n+            thread.start();\n \n-        logger.debug(\"OpenTherm Gateway connector started\");\n+            logger.debug(\"OpenTherm Gateway connector started\");\n \n-        return true;\n+            return true;\n+        }\n+\n+        return false;\n     }\n \n     private void disconnect() {\n-        if (connector != null) {\n-            if (connector.isConnected()) {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        if (conn != null) {\n+            if (conn.isConnected()) {\n                 logger.debug(\"Stopping OpenTherm Gateway connector\");\n \n                 explicitDisconnect = true;\n-                connector.stop();\n+                conn.stop();\n             }\n \n             connector = null;\n", "next_change": {"commit": "e84b7d1ec8a5b0a782b25f8c3101d85355823c3e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b5818019e7..866bd16690 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -254,7 +254,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n         }\n     }\n \n-    private String getGatewayCodeFromChannel(String channel) throws IllegalArgumentException {\n+    private @Nullable String getGatewayCodeFromChannel(String channel) throws IllegalArgumentException {\n         switch (channel) {\n             case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_SETPOINT_TEMPORARY:\n                 return GatewayCommandCode.TemperatureTemporary;\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NTk4OA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r392495988", "body": "why is this synchronized?", "bodyText": "why is this synchronized?", "bodyHTML": "<p dir=\"auto\">why is this synchronized?</p>", "author": "cpmeister", "createdAt": "2020-03-13T21:38:41Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {", "originalCommit": "d33464a4cd21f907708e5483463e3497bf2f3c3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMDIwNA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r394330204", "bodyText": "Since i'm using callback methods and afaik dont have resources shared between threads.. it seems that synchronized isnt neccesary at all. Removed all occurences.", "author": "ArjenKorevaar", "createdAt": "2020-03-18T13:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NTk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 47c3871317..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -65,58 +61,69 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     public void run() {\n         stopping = false;\n         connected = false;\n-        \n-        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n-\n-        callback.connecting();\n-        \n-        try (Socket socket = new Socket()) {            \n-            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n-            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n-    \n+\n+        try {\n+            callback.log(LogLevel.Info,\n+                    String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n+\n+            callback.connecting();\n+\n+            socket = new Socket();\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n+            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            writer = new PrintWriter(socket.getOutputStream(), true);\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+\n             connected = true;\n-    \n+\n             callback.connected();\n-    \n-            logger.info(\"OpenThermGatewaySocketConnector connected\");\n-    \n-            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n-                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n-                    // Make writer accessible on class level\n-                    writer = wrt;\n-    \n-                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n-                    // Set the OTGW to report every message it receives and transmits\n-                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n-        \n-                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n-                        @Nullable String message = reader.readLine();\n-        \n-                        if (message != null) {\n-                            handleMessage(message);\n-                        } else {\n-                            logger.info(\"Connection closed by OpenTherm Gateway\");\n-                            break;\n-                        }\n-                    }\n-        \n-                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector connected\");\n+\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+            // Set the OTGW to report every message it receives and transmits\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+            while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                @Nullable\n+                String message = reader.readLine();\n+\n+                if (message != null) {\n+                    handleMessage(message);\n+                } else {\n+                    callback.log(LogLevel.Info, \"Connection closed by OpenTherm Gateway\");\n+                    break;\n+                }\n             }\n-            finally {\n-                connected = false;\n-    \n-                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n-                callback.disconnected();\n+\n+            callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n+        } catch (Exception e) {\n+            callback.log(LogLevel.Error, \"An error occured in OpenThermGatewaySocketConnector: %s\", e.getMessage());\n+        } finally {\n+\n+            if (writer != null) {\n+                writer.flush();\n+                writer.close();\n             }\n-        } catch (IOException ex) {\n-            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n-        }        \n+\n+            close(reader);\n+            close(writer);\n+\n+            connected = false;\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector disconnected\");\n+            callback.disconnected();\n+        }\n     }\n \n     @Override\n     public synchronized void stop() {\n-        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n         stopping = true;\n+\n+        close(socket);\n     }\n \n     @Override\n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -112,14 +112,14 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n             connected = false;\n \n-            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector disconnected\");\n+            callback.log(LogLevel.DEBUG, \"OpenThermGatewaySocketConnector disconnected\");\n             callback.disconnected();\n         }\n     }\n \n     @Override\n     public synchronized void stop() {\n-        callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+        callback.log(LogLevel.DEBUG, \"Stopping OpenThermGatewaySocketConnector\");\n \n         stopping = true;\n \n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -112,14 +114,14 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n             connected = false;\n \n-            callback.log(LogLevel.DEBUG, \"OpenThermGatewaySocketConnector disconnected\");\n+            logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n             callback.disconnected();\n         }\n     }\n \n     @Override\n     public synchronized void stop() {\n-        callback.log(LogLevel.DEBUG, \"Stopping OpenThermGatewaySocketConnector\");\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n \n         stopping = true;\n \n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..8054bdf381 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -66,66 +63,59 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     public void run() {\n         stopping = false;\n         connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n \n-        try {            \n-            logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n-\n-            callback.connecting();\n-\n-            socket = new Socket();\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n             socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n             socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n-            writer = new PrintWriter(socket.getOutputStream(), true);\n-            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n-\n+    \n             connected = true;\n-\n+    \n             callback.connected();\n-\n+    \n             logger.debug(\"OpenThermGatewaySocketConnector connected\");\n-\n-            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n-            // Set the OTGW to report every message it receives and transmits\n-            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n-\n-            while (!stopping && !Thread.currentThread().isInterrupted()) {\n-                @Nullable String message = reader.readLine();\n-\n-                if (message != null) {\n-                    handleMessage(message);\n-                } else {\n-                    logger.info(\"Connection closed by OpenTherm Gateway\");\n-                    break;\n-                }\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n             }\n-\n-            logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n-        } catch (Exception e) {\n-            logger.error(\"An error occured in OpenThermGatewaySocketConnector: {}\", e.getMessage());\n-        } finally {\n-\n-            if (writer != null) {\n-                writer.flush();\n-                writer.close();\n+            finally {\n+                connected = false;\n+    \n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n             }\n-\n-            close(reader);\n-            close(writer);\n-\n-            connected = false;\n-\n-            logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n-            callback.disconnected();\n-        }\n+        }     \n+        catch (IOException ex) {\n+            logger.debug(\"Unable to connect to the OpenTherm Gateway: {}\" , ex);\n+        }        \n     }\n \n     @Override\n     public synchronized void stop() {\n         logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n-\n         stopping = true;\n-\n-        close(socket);\n     }\n \n     @Override\n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 8054bdf381..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -98,23 +98,23 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         }\n                     }\n         \n-                    logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n             }\n             finally {\n                 connected = false;\n     \n-                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n                 callback.disconnected();\n             }\n         }     \n         catch (IOException ex) {\n-            logger.debug(\"Unable to connect to the OpenTherm Gateway: {}\" , ex);\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n         }        \n     }\n \n     @Override\n     public synchronized void stop() {\n-        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n         stopping = true;\n     }\n \n", "next_change": {"commit": "f27de9d0833f113c5bdae57c5e9e60d356c6120e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..47c3871317 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -123,8 +124,6 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         return connected;\n     }\n \n-    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n-\n     @Override\n     public void sendCommand(GatewayCommand command) {\n         String msg = command.toFullString();\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 47c3871317..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -126,14 +126,20 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n     @Override\n     public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n         String msg = command.toFullString();\n \n-        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n \n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n-            writer.printf(\"%s\\r\\n\", msg);\n-            writer.flush();\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n         } else {\n             logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n", "next_change": {"commit": "d11097e996d6815e85de94ae28a50a7e61b53386", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..b3ca47d4ce 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -137,7 +137,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n             if (wrtr != null) {\n-                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.print(msg + \"\\r\\n\");\n                 wrtr.flush();\n             }\n         } else {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5Nzg4MA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r392497880", "body": "How would `callback` be null here? Isn't `callback` a non-null field?", "bodyText": "How would callback be null here? Isn't callback a non-null field?", "bodyHTML": "<p dir=\"auto\">How would <code>callback</code> be null here? Isn't <code>callback</code> a non-null field?</p>", "author": "cpmeister", "createdAt": "2020-03-13T21:42:06Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            writer.printf(\"%s\\r\\n\", msg);\n+            writer.flush();\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n+            return;\n+        } else {\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+        }\n+\n+        if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+            }\n+        }\n+\n+        if (msg.getMessageType() == MessageType.READACK || msg.getMessageType() == MessageType.WRITEDATA) {\n+            receiveMessage(msg);\n+        }\n+    }\n+\n+    private void receiveMessage(Message message) {\n+        if (message != null && callback != null) {", "originalCommit": "d33464a4cd21f907708e5483463e3497bf2f3c3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNjM0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r394326341", "bodyText": "Leftover from before adding @NonNullByDefault. Removed.", "author": "ArjenKorevaar", "createdAt": "2020-03-18T12:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5Nzg4MA=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 47c3871317..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -161,43 +171,46 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            logger.trace(\"Received message: {}, (unknown)\", message);\n+            callback.log(LogLevel.Debug, \"Received message: %s, (unknown)\", message);\n             return;\n         } else {\n-            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+            callback.log(LogLevel.Debug, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n+                    msg.getCode(), msg.getMessageType().toString()));\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n \n-            for (DataItem dataItem : dataItems) {\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case FLAGS:\n-                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case UINT8:\n-                    case UINT16:\n-                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(msg.getUInt(dataItem.getByteType()));\n                         break;\n-                    case INT8:\n-                    case INT16:\n-                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(msg.getInt(dataItem.getByteType()));\n                         break;\n-                    case FLOAT:\n-                        state = new DecimalType(msg.getFloat());\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(msg.getFloat());\n                         break;\n-                    case DOWTOD:\n+                    case DoWToD:\n                         break;\n                 }\n-\n-                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                callback.log(LogLevel.Trace,\n+                        String.format(\"  Data %d: %d %s %s %s\", i, dataItem.getID(), dataItem.getSubject(),\n+                                dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n             }\n         }\n \n-        if (msg.getMessageType() == MessageType.READACK || msg.getMessageType() == MessageType.WRITEDATA) {\n+        if (msg.getMessageType() == MessageType.ReadAck || msg.getMessageType() == MessageType.WriteData) {\n             receiveMessage(msg);\n         }\n     }\n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -171,46 +171,44 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            callback.log(LogLevel.Debug, \"Received message: %s, (unknown)\", message);\n+            callback.log(LogLevel.DEBUG, \"Received message: %s, (unknown)\", message);\n             return;\n         } else {\n-            callback.log(LogLevel.Debug, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n+            callback.log(LogLevel.DEBUG, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n                     msg.getCode(), msg.getMessageType().toString()));\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n \n-            for (int i = 0; i < dataItems.length; i++) {\n-                DataItem dataItem = dataItems[i];\n-\n+            for (DataItem dataItem : dataItems) {\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case Flags:\n-                        state = TypeConverter.toOnOffType(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case Uint8:\n-                    case Uint16:\n-                        state = TypeConverter.toDecimalType(msg.getUInt(dataItem.getByteType()));\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n                         break;\n-                    case Int8:\n-                    case Int16:\n-                        state = TypeConverter.toDecimalType(msg.getInt(dataItem.getByteType()));\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n                         break;\n-                    case Float:\n-                        state = TypeConverter.toDecimalType(msg.getFloat());\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n                         break;\n-                    case DoWToD:\n+                    case DOWTOD:\n                         break;\n                 }\n-                callback.log(LogLevel.Trace,\n-                        String.format(\"  Data %d: %d %s %s %s\", i, dataItem.getID(), dataItem.getSubject(),\n+                callback.log(LogLevel.DEBUG,\n+                        String.format(\"  Data: %d %s %s %s\", dataItem.getID(), dataItem.getSubject(),\n                                 dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n             }\n         }\n \n-        if (msg.getMessageType() == MessageType.ReadAck || msg.getMessageType() == MessageType.WriteData) {\n+        if (msg.getMessageType() == MessageType.READACK || msg.getMessageType() == MessageType.WRITEDATA) {\n             receiveMessage(msg);\n         }\n     }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -202,9 +201,9 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                     case DOWTOD:\n                         break;\n                 }\n-                callback.log(LogLevel.DEBUG,\n-                        String.format(\"  Data: %d %s %s %s\", dataItem.getID(), dataItem.getSubject(),\n-                                dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n+\n+                logger.debug(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n \n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -202,7 +192,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         break;\n                 }\n \n-                logger.debug(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n                     dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -193,7 +200,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                 }\n \n                 logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n \n", "next_change": {"commit": "16a5c94678bf41760ea84ef9232f728c75fb2954", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..82faecded4 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -199,8 +203,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         break;\n                 }\n \n-                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(), dataItem.getDataType(),\n+                        state == null ? \"\" : state);\n             }\n         }\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 47c3871317..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -207,4 +220,13 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             callback.receiveMessage(message);\n         }\n     }\n+\n+    private void close(@Nullable Closeable closeable) {\n+        if (closeable != null) {\n+            try {\n+                closeable.close();\n+            } catch (IOException e) {\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..8054bdf381 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -220,13 +207,4 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             callback.receiveMessage(message);\n         }\n     }\n-\n-    private void close(@Nullable Closeable closeable) {\n-        if (closeable != null) {\n-            try {\n-                closeable.close();\n-            } catch (IOException e) {\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "550abf0f6ac5feafd97aba9a916d036e4aa5ead5", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 8054bdf381..64d94e7635 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -203,7 +203,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     }\n \n     private void receiveMessage(Message message) {\n-        if (message != null && callback != null) {\n+        if (message != null) {\n             callback.receiveMessage(message);\n         }\n     }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 64d94e7635..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -203,8 +210,6 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     }\n \n     private void receiveMessage(Message message) {\n-        if (message != null) {\n-            callback.receiveMessage(message);\n-        }\n+        callback.receiveMessage(message);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE3NTczOA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r415175738", "body": "Please move final fields above the non-final ones.", "bodyText": "Please move final fields above the non-final ones.", "bodyHTML": "<p dir=\"auto\">Please move final fields above the non-final ones.</p>", "author": "cpmeister", "createdAt": "2020-04-26T00:25:30Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);", "originalCommit": "b0e3aae47d72c05e1555409743adb681ba3cc485", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTU4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r415235587", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-04-26T06:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE3NTczOA=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 64d94e7635..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -39,22 +37,20 @@ import org.slf4j.LoggerFactory;\n  */\n @NonNullByDefault\n public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n-    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n-    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n \n     private OpenThermGatewayCallback callback;\n     private String ipaddress;\n     private int port;\n \n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n     private @Nullable PrintWriter writer;\n \n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n-\n-    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n-\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -51,6 +54,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private volatile boolean stopping;\n     private boolean connected;\n \n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "f27de9d0833f113c5bdae57c5e9e60d356c6120e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..47c3871317 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -56,6 +53,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n     private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n \n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "9303b87ad1b3fbf8d599a7133ade75cae35a04f0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 47c3871317..a8e5acf692 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -42,17 +42,17 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n     private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n \n-    private OpenThermGatewayCallback callback;\n-    private String ipaddress;\n-    private int port;\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n \n     private @Nullable PrintWriter writer;\n \n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n-\n     private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n \n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n", "next_change": {"commit": "e493f47fd02a581b2acc5eb23bbb188eaecd196e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex a8e5acf692..6c7e4dd300 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -53,7 +53,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n \n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE3NTkwNg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r415175906", "body": "Can you make these final?", "bodyText": "Can you make these final?", "bodyHTML": "<p dir=\"auto\">Can you make these final?</p>", "author": "cpmeister", "createdAt": "2020-04-26T00:26:17Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;", "originalCommit": "b0e3aae47d72c05e1555409743adb681ba3cc485", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTU2NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r415235564", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-04-26T06:57:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE3NTkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 64d94e7635..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -39,22 +37,20 @@ import org.slf4j.LoggerFactory;\n  */\n @NonNullByDefault\n public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n-    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n-    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n \n     private OpenThermGatewayCallback callback;\n     private String ipaddress;\n     private int port;\n \n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n     private @Nullable PrintWriter writer;\n \n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n-\n-    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n-\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -51,6 +54,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private volatile boolean stopping;\n     private boolean connected;\n \n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "f27de9d0833f113c5bdae57c5e9e60d356c6120e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..47c3871317 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -56,6 +53,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n     private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n \n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "9303b87ad1b3fbf8d599a7133ade75cae35a04f0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 47c3871317..a8e5acf692 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -42,17 +42,17 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n     private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n \n-    private OpenThermGatewayCallback callback;\n-    private String ipaddress;\n-    private int port;\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n \n     private @Nullable PrintWriter writer;\n \n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n-\n     private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n \n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n", "next_change": {"commit": "e493f47fd02a581b2acc5eb23bbb188eaecd196e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex a8e5acf692..6c7e4dd300 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -53,7 +53,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n \n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyOTk0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r419629941", "body": "Is `\"\"` a valid gateway code? If not maybe you should allow this method to return null instead.", "bodyText": "Is \"\" a valid gateway code? If not maybe you should allow this method to return null instead.", "bodyHTML": "<p dir=\"auto\">Is <code>\"\"</code> a valid gateway code? If not maybe you should allow this method to return null instead.</p>", "author": "cpmeister", "createdAt": "2020-05-04T18:12:42Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        connecting = false;\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (conn != null && !connecting && !conn.isConnected()) {\n+                    connect();\n+                }\n+            }, conf.connectionRetryInterval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable\n+                        Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        if (conn != null && conn.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private boolean connect() {\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        disconnect();\n+\n+        if (conf != null) {\n+            logger.debug(\"Starting OpenTherm Gateway connector\");\n+\n+            explicitDisconnect = false;\n+\n+            connector = new OpenThermGatewaySocketConnector(this, conf.ipaddress, conf.port);\n+\n+            Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+            thread.setDaemon(true);\n+            thread.start();\n+\n+            logger.debug(\"OpenTherm Gateway connector started\");\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    private void disconnect() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        if (conn != null) {\n+            if (conn.isConnected()) {\n+                logger.debug(\"Stopping OpenTherm Gateway connector\");\n+\n+                explicitDisconnect = true;\n+                conn.stop();\n+            }\n+\n+            connector = null;\n+        }\n+    }\n+\n+    private String getGatewayCodeFromChannel(String channel) throws IllegalArgumentException {\n+        switch (channel) {\n+            case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_SETPOINT_TEMPORARY:\n+                return GatewayCommandCode.TemperatureTemporary;\n+            case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_SETPOINT_CONSTANT:\n+                return GatewayCommandCode.TemperatureConstant;\n+            case OpenThermGatewayBindingConstants.CHANNEL_OUTSIDE_TEMPERATURE:\n+                return GatewayCommandCode.TemperatureOutside;\n+            case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_DHW_SETPOINT:\n+                return GatewayCommandCode.SetpointWater;\n+            case OpenThermGatewayBindingConstants.CHANNEL_SEND_COMMAND:\n+                return \"\";", "originalCommit": "72c5235f250106cb1957e92bf42fe74ec10b2e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwMTM3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r420801372", "bodyText": "Whether it's 'valid' is up to the code I guess.. it is possible to send raw commands instead of predefined commands. So either you send a predefined command based on a channel, in that case the channel is mapped to a particular command. Or you can send a raw command through the SendCommand channel, in which case you have to provide the command yourself.\nThe easiest way was to simple return \"\" so that it get's processed or concatenated as an empty string, followed by whatever the user had entered. The combination should produce a valid command, but that's up to the user. I changed it to null though, and added a check on the calling code.", "author": "ArjenKorevaar", "createdAt": "2020-05-06T13:44:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyOTk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e84b7d1ec8a5b0a782b25f8c3101d85355823c3e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex b5818019e7..866bd16690 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -265,7 +265,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n             case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_DHW_SETPOINT:\n                 return GatewayCommandCode.SetpointWater;\n             case OpenThermGatewayBindingConstants.CHANNEL_SEND_COMMAND:\n-                return \"\";\n+                return null;\n             default:\n                 throw new IllegalArgumentException(String.format(\"Unknown channel %s\", channel));\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzMDgwMw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r419630803", "body": "Please put static fields at the top of the class", "bodyText": "Please put static fields at the top of the class", "bodyHTML": "<p dir=\"auto\">Please put static fields at the top of the class</p>", "author": "cpmeister", "createdAt": "2020-05-04T18:14:01Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws IllegalArgumentException {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet.isEmpty()) {\n+            return true;\n+        }\n+\n+        String[] validations = this.validationSet.split(\",\");\n+\n+        for (String validation : validations) {\n+            if (this.message.equals(validation)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n+        if (code.isEmpty() && message.length() > 2 && message.charAt(2) == '=') {\n+            return parse(message.substring(0, 2), message.substring(3));\n+        }\n+\n+        if (code.length() == 2) {\n+            String codeUpperCase = code.toUpperCase();\n+\n+            if (supportedCommands.containsKey(codeUpperCase)) {\n+                String validateSet = supportedCommands.get(codeUpperCase);\n+\n+                if (validateSet == null) {\n+                    validateSet = \"\";\n+                }\n+\n+                return new GatewayCommand(codeUpperCase, message, validateSet);\n+            } else {\n+                throw new IllegalArgumentException(String.format(\"Unsupported gateway code '%s'\", code.toUpperCase()));\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(\n+                String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n+    }\n+\n+    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();", "originalCommit": "72c5235f250106cb1957e92bf42fe74ec10b2e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5NzUxMw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r420797513", "bodyText": "Moved to the top", "author": "ArjenKorevaar", "createdAt": "2020-05-06T13:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzMDgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "bc6b9387555d10202eb34ced0cd35e25564946f2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 88f4c2ae35..f59e4726b5 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -70,28 +69,22 @@ public class GatewayCommand {\n     }\n \n     public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n-        if (code.isEmpty() && message.length() > 2 && message.charAt(2) == '=') {\n+        if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n \n-        if (code.length() == 2) {\n+        if (code != null && code.length() == 2) {\n             String codeUpperCase = code.toUpperCase();\n \n             if (supportedCommands.containsKey(codeUpperCase)) {\n                 String validateSet = supportedCommands.get(codeUpperCase);\n-\n-                if (validateSet == null) {\n-                    validateSet = \"\";\n-                }\n-\n                 return new GatewayCommand(codeUpperCase, message, validateSet);\n             } else {\n                 throw new IllegalArgumentException(String.format(\"Unsupported gateway code '%s'\", code.toUpperCase()));\n             }\n         }\n \n-        throw new IllegalArgumentException(\n-                String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n+        throw new IllegalArgumentException(String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n     private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex f59e4726b5..88f4c2ae35 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -69,22 +70,28 @@ public class GatewayCommand {\n     }\n \n     public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n-        if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {\n+        if (code.isEmpty() && message.length() > 2 && message.charAt(2) == '=') {\n             return parse(message.substring(0, 2), message.substring(3));\n         }\n \n-        if (code != null && code.length() == 2) {\n+        if (code.length() == 2) {\n             String codeUpperCase = code.toUpperCase();\n \n             if (supportedCommands.containsKey(codeUpperCase)) {\n                 String validateSet = supportedCommands.get(codeUpperCase);\n+\n+                if (validateSet == null) {\n+                    validateSet = \"\";\n+                }\n+\n                 return new GatewayCommand(codeUpperCase, message, validateSet);\n             } else {\n                 throw new IllegalArgumentException(String.format(\"Unsupported gateway code '%s'\", code.toUpperCase()));\n             }\n         }\n \n-        throw new IllegalArgumentException(String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n+        throw new IllegalArgumentException(\n+                String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n     private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n", "next_change": {"commit": "37e483f0f41134d570904cf9b8da312f76faf2fb", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 88f4c2ae35..4cd2a7dfb2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -94,8 +96,6 @@ public class GatewayCommand {\n                 String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n-    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n-\n     private static HashMap<String, @Nullable String> getSupportedCommands() {\n         HashMap<String, @Nullable String> c = new HashMap<String, @Nullable String>();\n \n", "next_change": {"commit": "aa2be59b68ac09304a41aa72882ca2ff15e28129", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 4cd2a7dfb2..ba254294ac 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -96,8 +97,8 @@ public class GatewayCommand {\n                 String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n     }\n \n-    private static HashMap<String, @Nullable String> getSupportedCommands() {\n-        HashMap<String, @Nullable String> c = new HashMap<String, @Nullable String>();\n+    private static Map<String, @Nullable String> getSupportedCommands() {\n+        Map<String, @Nullable String> c = new HashMap<>();\n \n         c.put(GatewayCommandCode.TemperatureTemporary, null);\n         c.put(GatewayCommandCode.TemperatureConstant, null);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzOTE3NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r419639174", "body": "This code will never get called because you compare the time against the smallest value first.", "bodyText": "This code will never get called because you compare the time against the smallest value first.", "bodyHTML": "<p dir=\"auto\">This code will never get called because you compare the time against the smallest value first.</p>", "author": "cpmeister", "createdAt": "2020-05-04T18:28:04Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }", "originalCommit": "72c5235f250106cb1957e92bf42fe74ec10b2e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5ODE1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r420798151", "bodyText": "Changed the check", "author": "ArjenKorevaar", "createdAt": "2020-05-06T13:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzOTE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -149,17 +153,17 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (message.length() > 2 && message.charAt(2) == ':') {\n             String code = message.substring(0, 2);\n             String value = message.substring(3);\n-\n-            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            callback.log(LogLevel.Debug, String.format(\"Received command confirmation: %s: %s\", code, value));\n             pendingCommands.remove(code);\n             return;\n         }\n \n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n-            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n-                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME) {\n+                callback.log(LogLevel.Debug,\n+                        String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n                 sendCommand(timeAndCommand.getValue());\n-            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n             }\n         }\n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -153,17 +153,17 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (message.length() > 2 && message.charAt(2) == ':') {\n             String code = message.substring(0, 2);\n             String value = message.substring(3);\n-            callback.log(LogLevel.Debug, String.format(\"Received command confirmation: %s: %s\", code, value));\n+            callback.log(LogLevel.DEBUG, String.format(\"Received command confirmation: %s: %s\", code, value));\n             pendingCommands.remove(code);\n             return;\n         }\n \n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n-            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME) {\n-                callback.log(LogLevel.Debug,\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+                callback.log(LogLevel.DEBUG,\n                         String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n                 sendCommand(timeAndCommand.getValue());\n-            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT) {\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n             }\n         }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -153,15 +153,15 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (message.length() > 2 && message.charAt(2) == ':') {\n             String code = message.substring(0, 2);\n             String value = message.substring(3);\n-            callback.log(LogLevel.DEBUG, String.format(\"Received command confirmation: %s: %s\", code, value));\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n             pendingCommands.remove(code);\n             return;\n         }\n \n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n             if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n-                callback.log(LogLevel.DEBUG,\n-                        String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n", "next_change": {"commit": "45441bad99587a2089460d5faca9a49686f5051c", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..0af14f79e8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -159,11 +155,16 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             return;\n         }\n \n+        long currentTime = System.currentTimeMillis();\n+\n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n-            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime < timeoutTime) {\n                 logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n-            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+            } else if (currentTime > timeoutTime) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n             }\n         }\n", "next_change": {"commit": "e493f47fd02a581b2acc5eb23bbb188eaecd196e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 0af14f79e8..6c7e4dd300 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -161,7 +161,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n             long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n \n-            if (currentTime > responseTime && currentTime < timeoutTime) {\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n                 logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (currentTime > timeoutTime) {\n", "next_change": {"commit": "f2f002c5f4d5d6d717c8a9ba7ee71088663e4478", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 6c7e4dd300..dd8d80b574 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -162,7 +162,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n \n             if (currentTime > responseTime && currentTime <= timeoutTime) {\n-                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (currentTime > timeoutTime) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -171,11 +171,10 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            callback.log(LogLevel.DEBUG, \"Received message: %s, (unknown)\", message);\n+            logger.debug(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            callback.log(LogLevel.DEBUG, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n-                    msg.getCode(), msg.getMessageType().toString()));\n+            logger.debug(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -171,10 +161,10 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            logger.debug(\"Received message: {}, (unknown)\", message);\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            logger.debug(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -164,7 +170,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             logger.trace(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n+                    msg.getMessageType().toString());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": {"commit": "16a5c94678bf41760ea84ef9232f728c75fb2954", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..82faecded4 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -170,8 +175,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             logger.trace(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n-                    msg.getMessageType().toString());\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -171,46 +171,44 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            callback.log(LogLevel.Debug, \"Received message: %s, (unknown)\", message);\n+            callback.log(LogLevel.DEBUG, \"Received message: %s, (unknown)\", message);\n             return;\n         } else {\n-            callback.log(LogLevel.Debug, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n+            callback.log(LogLevel.DEBUG, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n                     msg.getCode(), msg.getMessageType().toString()));\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n \n-            for (int i = 0; i < dataItems.length; i++) {\n-                DataItem dataItem = dataItems[i];\n-\n+            for (DataItem dataItem : dataItems) {\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case Flags:\n-                        state = TypeConverter.toOnOffType(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case Uint8:\n-                    case Uint16:\n-                        state = TypeConverter.toDecimalType(msg.getUInt(dataItem.getByteType()));\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n                         break;\n-                    case Int8:\n-                    case Int16:\n-                        state = TypeConverter.toDecimalType(msg.getInt(dataItem.getByteType()));\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n                         break;\n-                    case Float:\n-                        state = TypeConverter.toDecimalType(msg.getFloat());\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n                         break;\n-                    case DoWToD:\n+                    case DOWTOD:\n                         break;\n                 }\n-                callback.log(LogLevel.Trace,\n-                        String.format(\"  Data %d: %d %s %s %s\", i, dataItem.getID(), dataItem.getSubject(),\n+                callback.log(LogLevel.DEBUG,\n+                        String.format(\"  Data: %d %s %s %s\", dataItem.getID(), dataItem.getSubject(),\n                                 dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n             }\n         }\n \n-        if (msg.getMessageType() == MessageType.ReadAck || msg.getMessageType() == MessageType.WriteData) {\n+        if (msg.getMessageType() == MessageType.READACK || msg.getMessageType() == MessageType.WRITEDATA) {\n             receiveMessage(msg);\n         }\n     }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -202,9 +201,9 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                     case DOWTOD:\n                         break;\n                 }\n-                callback.log(LogLevel.DEBUG,\n-                        String.format(\"  Data: %d %s %s %s\", dataItem.getID(), dataItem.getSubject(),\n-                                dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n+\n+                logger.debug(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n \n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -202,7 +192,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         break;\n                 }\n \n-                logger.debug(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n                     dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -193,7 +200,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                 }\n \n                 logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n \n", "next_change": {"commit": "16a5c94678bf41760ea84ef9232f728c75fb2954", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..82faecded4 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -199,8 +203,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         break;\n                 }\n \n-                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(), dataItem.getDataType(),\n+                        state == null ? \"\" : state);\n             }\n         }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0MjA1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r419642059", "body": "This field will be used by multiple threads, so make it thread-safe.\r\n```suggestion\r\n    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\r\n```", "bodyText": "This field will be used by multiple threads, so make it thread-safe.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n          \n          \n            \n                private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();", "bodyHTML": "<p dir=\"auto\">This field will be used by multiple threads, so make it thread-safe.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-k\">Entry&lt;<span class=\"pl-smi\">Long</span>, <span class=\"pl-smi\">GatewayCommand</span>&gt;</span>&gt;</span> pendingCommands <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\"><span class=\"x x-first x-last\">HashMap</span>&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-k\">Entry&lt;<span class=\"pl-smi\">Long</span>, <span class=\"pl-smi\">GatewayCommand</span>&gt;</span>&gt;</span> pendingCommands <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\"><span class=\"x x-first x-last\">ConcurrentHashMap</span>&lt;&gt;</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-05-04T18:32:45Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();", "originalCommit": "72c5235f250106cb1957e92bf42fe74ec10b2e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5ODM3OA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r420798378", "bodyText": "Changed to ConcurrentHashMap", "author": "ArjenKorevaar", "createdAt": "2020-05-06T13:40:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0MjA1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -39,22 +37,20 @@ import org.slf4j.LoggerFactory;\n  */\n @NonNullByDefault\n public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n-    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n-    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n \n-    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n-\n-    private final OpenThermGatewayCallback callback;\n-    private final String ipaddress;\n-    private final int port;\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n \n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n     private @Nullable PrintWriter writer;\n \n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n-\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -51,6 +54,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private volatile boolean stopping;\n     private boolean connected;\n \n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "f27de9d0833f113c5bdae57c5e9e60d356c6120e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..47c3871317 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -56,6 +53,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n     private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n \n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "9303b87ad1b3fbf8d599a7133ade75cae35a04f0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 47c3871317..a8e5acf692 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -42,17 +42,17 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n     private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n \n-    private OpenThermGatewayCallback callback;\n-    private String ipaddress;\n-    private int port;\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n \n     private @Nullable PrintWriter writer;\n \n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n-\n     private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n \n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n", "next_change": {"commit": "e493f47fd02a581b2acc5eb23bbb188eaecd196e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex a8e5acf692..6c7e4dd300 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -53,7 +53,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n \n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NTQ3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421165477", "body": "```suggestion\r\n                    msg.getMessageType());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                msg.getMessageType().toString());\n          \n          \n            \n                                msg.getMessageType());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    msg<span class=\"pl-k\">.</span>getMessageType()<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">toString()</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    msg<span class=\"pl-k\">.</span>getMessageType());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-05-07T00:17:38Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        long currentTime = System.currentTimeMillis();\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (currentTime > timeoutTime) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n+            return;\n+        } else {\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n+                    msg.getMessageType().toString());", "originalCommit": "a33f865e7aad7625f337fbb8f9f78f057f4d8180", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxOTg0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421319843", "bodyText": "Modified", "author": "ArjenKorevaar", "createdAt": "2020-05-07T08:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NTQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 6c7e4dd300..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -172,49 +171,62 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            logger.trace(\"Received message: {}, (unknown)\", message);\n+            callback.log(LogLevel.Debug, \"Received message: %s, (unknown)\", message);\n             return;\n         } else {\n-            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n-                    msg.getMessageType().toString());\n+            callback.log(LogLevel.Debug, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n+                    msg.getCode(), msg.getMessageType().toString()));\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n \n-            for (DataItem dataItem : dataItems) {\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case FLAGS:\n-                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case UINT8:\n-                    case UINT16:\n-                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(msg.getUInt(dataItem.getByteType()));\n                         break;\n-                    case INT8:\n-                    case INT16:\n-                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(msg.getInt(dataItem.getByteType()));\n                         break;\n-                    case FLOAT:\n-                        state = new DecimalType(msg.getFloat());\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(msg.getFloat());\n                         break;\n-                    case DOWTOD:\n+                    case DoWToD:\n                         break;\n                 }\n-\n-                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                callback.log(LogLevel.Trace,\n+                        String.format(\"  Data %d: %d %s %s %s\", i, dataItem.getID(), dataItem.getSubject(),\n+                                dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n             }\n         }\n \n-        if (msg.getMessageType() == MessageType.READACK || msg.getMessageType() == MessageType.WRITEDATA) {\n+        if (msg.getMessageType() == MessageType.ReadAck || msg.getMessageType() == MessageType.WriteData) {\n             receiveMessage(msg);\n         }\n     }\n \n     private void receiveMessage(Message message) {\n-        callback.receiveMessage(message);\n+        if (message != null && callback != null) {\n+            callback.receiveMessage(message);\n+        }\n+    }\n+\n+    private void close(@Nullable Closeable closeable) {\n+        if (closeable != null) {\n+            try {\n+                closeable.close();\n+            } catch (IOException e) {\n+            }\n+        }\n     }\n }\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..8054bdf381 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -220,13 +207,4 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             callback.receiveMessage(message);\n         }\n     }\n-\n-    private void close(@Nullable Closeable closeable) {\n-        if (closeable != null) {\n-            try {\n-                closeable.close();\n-            } catch (IOException e) {\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "550abf0f6ac5feafd97aba9a916d036e4aa5ead5", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 8054bdf381..64d94e7635 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -203,7 +203,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     }\n \n     private void receiveMessage(Message message) {\n-        if (message != null && callback != null) {\n+        if (message != null) {\n             callback.receiveMessage(message);\n         }\n     }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 64d94e7635..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -203,8 +210,6 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     }\n \n     private void receiveMessage(Message message) {\n-        if (message != null) {\n-            callback.receiveMessage(message);\n-        }\n+        callback.receiveMessage(message);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NTYyNg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421165626", "body": "```suggestion\r\n                        dataItem.getDataType(), state == null ? \"\" : state);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n          \n          \n            \n                                    dataItem.getDataType(), state == null ? \"\" : state);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        dataItem<span class=\"pl-k\">.</span>getDataType()<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">toString()</span>, state <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> state<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">toString()</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        dataItem<span class=\"pl-k\">.</span>getDataType(), state <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> state);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-05-07T00:18:05Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        long currentTime = System.currentTimeMillis();\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (currentTime > timeoutTime) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n+            return;\n+        } else {\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n+                    msg.getMessageType().toString());\n+        }\n+\n+        if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());", "originalCommit": "a33f865e7aad7625f337fbb8f9f78f057f4d8180", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxOTkyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421319921", "bodyText": "Modified", "author": "ArjenKorevaar", "createdAt": "2020-05-07T08:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NTYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 6c7e4dd300..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -172,49 +171,62 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            logger.trace(\"Received message: {}, (unknown)\", message);\n+            callback.log(LogLevel.Debug, \"Received message: %s, (unknown)\", message);\n             return;\n         } else {\n-            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n-                    msg.getMessageType().toString());\n+            callback.log(LogLevel.Debug, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n+                    msg.getCode(), msg.getMessageType().toString()));\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n \n-            for (DataItem dataItem : dataItems) {\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case FLAGS:\n-                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case UINT8:\n-                    case UINT16:\n-                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(msg.getUInt(dataItem.getByteType()));\n                         break;\n-                    case INT8:\n-                    case INT16:\n-                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(msg.getInt(dataItem.getByteType()));\n                         break;\n-                    case FLOAT:\n-                        state = new DecimalType(msg.getFloat());\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(msg.getFloat());\n                         break;\n-                    case DOWTOD:\n+                    case DoWToD:\n                         break;\n                 }\n-\n-                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                callback.log(LogLevel.Trace,\n+                        String.format(\"  Data %d: %d %s %s %s\", i, dataItem.getID(), dataItem.getSubject(),\n+                                dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n             }\n         }\n \n-        if (msg.getMessageType() == MessageType.READACK || msg.getMessageType() == MessageType.WRITEDATA) {\n+        if (msg.getMessageType() == MessageType.ReadAck || msg.getMessageType() == MessageType.WriteData) {\n             receiveMessage(msg);\n         }\n     }\n \n     private void receiveMessage(Message message) {\n-        callback.receiveMessage(message);\n+        if (message != null && callback != null) {\n+            callback.receiveMessage(message);\n+        }\n+    }\n+\n+    private void close(@Nullable Closeable closeable) {\n+        if (closeable != null) {\n+            try {\n+                closeable.close();\n+            } catch (IOException e) {\n+            }\n+        }\n     }\n }\n", "next_change": {"commit": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..8054bdf381 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -220,13 +207,4 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             callback.receiveMessage(message);\n         }\n     }\n-\n-    private void close(@Nullable Closeable closeable) {\n-        if (closeable != null) {\n-            try {\n-                closeable.close();\n-            } catch (IOException e) {\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "550abf0f6ac5feafd97aba9a916d036e4aa5ead5", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 8054bdf381..64d94e7635 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -203,7 +203,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     }\n \n     private void receiveMessage(Message message) {\n-        if (message != null && callback != null) {\n+        if (message != null) {\n             callback.receiveMessage(message);\n         }\n     }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 64d94e7635..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -203,8 +210,6 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     }\n \n     private void receiveMessage(Message message) {\n-        if (message != null) {\n-            callback.receiveMessage(message);\n-        }\n+        callback.receiveMessage(message);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyNzgyMg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421227822", "body": "The writer is synchronized under the hood so you can't really split this up into two method calls. That said, you don't need to use `printf` for something this simple.\r\n```suggestion\r\n                wrtr.print(msg+\"\\r\\n\");\r\n```", "bodyText": "The writer is synchronized under the hood so you can't really split this up into two method calls. That said, you don't need to use printf for something this simple.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            wrtr.printf(\"%s\\r\\n\", msg);\n          \n          \n            \n                            wrtr.print(msg+\"\\r\\n\");", "bodyHTML": "<p dir=\"auto\">The writer is synchronized under the hood so you can't really split this up into two method calls. That said, you don't need to use <code>printf</code> for something this simple.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                wrtr<span class=\"pl-k\">.</span><span class=\"x x-first\">printf(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x x-last\">%s</span><span class=\"pl-cce\">\\r\\n</span><span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\">, msg</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                wrtr<span class=\"pl-k\">.</span><span class=\"x x-first\">print(msg</span><span class=\"pl-k x\">+</span><span class=\"pl-s\"><span class=\"pl-pds x x-last\">\"</span><span class=\"pl-cce\">\\r\\n</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-05-07T04:10:37Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);", "originalCommit": "a33f865e7aad7625f337fbb8f9f78f057f4d8180", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMDU2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421320566", "bodyText": "Modified.. though I am not sure I understand your comment about splitting things up into two method calls.", "author": "ArjenKorevaar", "createdAt": "2020-05-07T08:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyNzgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2Mzk3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421663976", "bodyText": "Sorry about that, I was half mutter to myself while writing the suggested change.\nMy original suggestion that I changed before posting would be something like this:\nwrtr.print(msg);\nwrtr.print(\"\\r\\n\");\n\nBut I quickly realized that such a suggestion wouldn't be best since you could run into issues if that code was called by multiple threads at once. The PrintWriter will synchronize all method calls but that won't help you if you spread out your message across multiple method calls.\nThat is why I instead suggested doing the string concatenation before calling print.\nIt would have been better if I hadn't mentioned multiple method calls since it wasn't relevant to the suggestion so sorry for confusing you.", "author": "cpmeister", "createdAt": "2020-05-07T17:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyNzgyMg=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 6c7e4dd300..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -124,24 +131,21 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         return connected;\n     }\n \n+    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n     @Override\n     public void sendCommand(GatewayCommand command) {\n-        @Nullable\n-        PrintWriter wrtr = writer;\n-\n         String msg = command.toFullString();\n \n         pendingCommands.put(command.getCode(),\n                 new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n \n         if (connected) {\n-            logger.debug(\"Sending message: {}\", msg);\n-            if (wrtr != null) {\n-                wrtr.printf(\"%s\\r\\n\", msg);\n-                wrtr.flush();\n-            }\n+            callback.log(LogLevel.Debug, \"Sending message: %s\", msg);\n+            writer.printf(\"%s\\r\\n\", msg);\n         } else {\n-            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+            callback.log(LogLevel.Debug,\n+                    \"Unable to send message: %s. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n     }\n \n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -141,10 +141,10 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                 new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n \n         if (connected) {\n-            callback.log(LogLevel.Debug, \"Sending message: %s\", msg);\n+            callback.log(LogLevel.DEBUG, \"Sending message: %s\", msg);\n             writer.printf(\"%s\\r\\n\", msg);\n         } else {\n-            callback.log(LogLevel.Debug,\n+            callback.log(LogLevel.DEBUG,\n                     \"Unable to send message: %s. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n     }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -137,15 +139,13 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     public void sendCommand(GatewayCommand command) {\n         String msg = command.toFullString();\n \n-        pendingCommands.put(command.getCode(),\n-                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n \n         if (connected) {\n-            callback.log(LogLevel.DEBUG, \"Sending message: %s\", msg);\n+            logger.debug(\"Sending message: {}\", msg);\n             writer.printf(\"%s\\r\\n\", msg);\n         } else {\n-            callback.log(LogLevel.DEBUG,\n-                    \"Unable to send message: %s. OpenThermGatewaySocketConnector is not connected.\", msg);\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n     }\n \n", "next_change": {"commit": "0d25f0d72e398529efc062d193eaedceec95ed96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..b8e794d306 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -144,6 +134,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n             writer.printf(\"%s\\r\\n\", msg);\n+            writer.flush();\n         } else {\n             logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex b8e794d306..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -123,18 +124,22 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         return connected;\n     }\n \n-    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n-\n     @Override\n     public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n         String msg = command.toFullString();\n \n-        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n \n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n-            writer.printf(\"%s\\r\\n\", msg);\n-            writer.flush();\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n         } else {\n             logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n         }\n", "next_change": {"commit": "d11097e996d6815e85de94ae28a50a7e61b53386", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..b3ca47d4ce 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -137,7 +137,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (connected) {\n             logger.debug(\"Sending message: {}\", msg);\n             if (wrtr != null) {\n-                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.print(msg + \"\\r\\n\");\n                 wrtr.flush();\n             }\n         } else {\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -153,15 +153,15 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (message.length() > 2 && message.charAt(2) == ':') {\n             String code = message.substring(0, 2);\n             String value = message.substring(3);\n-            callback.log(LogLevel.DEBUG, String.format(\"Received command confirmation: %s: %s\", code, value));\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n             pendingCommands.remove(code);\n             return;\n         }\n \n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n             if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n-                callback.log(LogLevel.DEBUG,\n-                        String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n", "next_change": {"commit": "45441bad99587a2089460d5faca9a49686f5051c", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..0af14f79e8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -159,11 +155,16 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             return;\n         }\n \n+        long currentTime = System.currentTimeMillis();\n+\n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n-            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime < timeoutTime) {\n                 logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n-            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+            } else if (currentTime > timeoutTime) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n             }\n         }\n", "next_change": {"commit": "e493f47fd02a581b2acc5eb23bbb188eaecd196e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 0af14f79e8..6c7e4dd300 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -161,7 +161,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n             long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n \n-            if (currentTime > responseTime && currentTime < timeoutTime) {\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n                 logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (currentTime > timeoutTime) {\n", "next_change": {"commit": "f2f002c5f4d5d6d717c8a9ba7ee71088663e4478", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 6c7e4dd300..dd8d80b574 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -162,7 +162,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n \n             if (currentTime > responseTime && currentTime <= timeoutTime) {\n-                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (currentTime > timeoutTime) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -153,17 +153,17 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (message.length() > 2 && message.charAt(2) == ':') {\n             String code = message.substring(0, 2);\n             String value = message.substring(3);\n-            callback.log(LogLevel.Debug, String.format(\"Received command confirmation: %s: %s\", code, value));\n+            callback.log(LogLevel.DEBUG, String.format(\"Received command confirmation: %s: %s\", code, value));\n             pendingCommands.remove(code);\n             return;\n         }\n \n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n-            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME) {\n-                callback.log(LogLevel.Debug,\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+                callback.log(LogLevel.DEBUG,\n                         String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n                 sendCommand(timeAndCommand.getValue());\n-            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT) {\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n             }\n         }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -153,15 +153,15 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (message.length() > 2 && message.charAt(2) == ':') {\n             String code = message.substring(0, 2);\n             String value = message.substring(3);\n-            callback.log(LogLevel.DEBUG, String.format(\"Received command confirmation: %s: %s\", code, value));\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n             pendingCommands.remove(code);\n             return;\n         }\n \n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n             if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n-                callback.log(LogLevel.DEBUG,\n-                        String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n", "next_change": {"commit": "45441bad99587a2089460d5faca9a49686f5051c", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..0af14f79e8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -159,11 +155,16 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             return;\n         }\n \n+        long currentTime = System.currentTimeMillis();\n+\n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n-            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime < timeoutTime) {\n                 logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n-            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+            } else if (currentTime > timeoutTime) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n             }\n         }\n", "next_change": {"commit": "e493f47fd02a581b2acc5eb23bbb188eaecd196e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 0af14f79e8..6c7e4dd300 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -161,7 +161,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n             long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n \n-            if (currentTime > responseTime && currentTime < timeoutTime) {\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n                 logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (currentTime > timeoutTime) {\n", "next_change": {"commit": "f2f002c5f4d5d6d717c8a9ba7ee71088663e4478", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 6c7e4dd300..dd8d80b574 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -162,7 +162,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n \n             if (currentTime > responseTime && currentTime <= timeoutTime) {\n-                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (currentTime > timeoutTime) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -171,11 +171,10 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            callback.log(LogLevel.DEBUG, \"Received message: %s, (unknown)\", message);\n+            logger.debug(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            callback.log(LogLevel.DEBUG, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n-                    msg.getCode(), msg.getMessageType().toString()));\n+            logger.debug(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -171,10 +161,10 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            logger.debug(\"Received message: {}, (unknown)\", message);\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            logger.debug(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -164,7 +170,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             logger.trace(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n+                    msg.getMessageType().toString());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": {"commit": "16a5c94678bf41760ea84ef9232f728c75fb2954", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..82faecded4 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -170,8 +175,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             logger.trace(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n-                    msg.getMessageType().toString());\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODc4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422458781", "body": "I personally would write this as kind of a pre-condition check so that the rest of the method does not need that much indentation:\r\n\r\n```java\r\nif (command instanceof RefreshType) {\r\n   return;\r\n}\r\n\r\n... rest of the code\r\n", "bodyText": "I personally would write this as kind of a pre-condition check so that the rest of the method does not need that much indentation:\nif (command instanceof RefreshType) {\n   return;\n}\n\n... rest of the code", "bodyHTML": "<p dir=\"auto\">I personally would write this as kind of a pre-condition check so that the rest of the method does not need that much indentation:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (command instanceof RefreshType) {\n   return;\n}\n\n... rest of the code\"><pre><span class=\"pl-k\">if</span> (command <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">RefreshType</span>) {\n   <span class=\"pl-k\">return</span>;\n}\n\n<span class=\"pl-c1\">...</span> rest of the code</pre></div>", "author": "martinvw", "createdAt": "2020-05-09T06:23:55Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 866bd16690..354048d8d8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -81,40 +73,34 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n \n-        if (!(command instanceof RefreshType)) {\n-            String channel = channelUID.getId();\n-            String code = getGatewayCodeFromChannel(channel);\n-\n-            GatewayCommand gatewayCommand = null;\n-\n-            if (command instanceof QuantityType<?>) {\n-                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n-\n-                if (quantityType != null) {\n-                    double value = quantityType.doubleValue();\n-                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n                 }\n-            }\n-\n-            if (gatewayCommand == null) {\n-                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n-            }\n \n-            if (checkConnection()) {\n-                @Nullable\n-                OpenThermGatewayConnector conn = connector;\n-\n-                if (conn != null) {\n-                    conn.sendCommand(gatewayCommand);\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n                 }\n             }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n         }\n     }\n \n+    boolean connecting = false;\n+\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        updateStatus(ThingStatus.OFFLINE);\n     }\n \n     @Override\n", "next_change": {"commit": "e2e66bb9838bfc21ac4acf458c3b99391651ce63", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..ed4ad29992 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -73,30 +77,24 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n \n-        try {\n-            if (command.toFullString() != \"REFRESH\") {\n-                String channel = channelUID.getId();\n-                String code = getGatewayCodeFromChannel(channel);\n-\n-                GatewayCommand gatewayCommand;\n-                if (command instanceof QuantityType) {\n-                    gatewayCommand = GatewayCommand.parse(code,\n-                            Double.toString(((QuantityType) command).doubleValue()));\n-                } else {\n-                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n-                }\n+        if (command.toFullString() != \"REFRESH\") {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n \n-                if (gatewayCommand != null && checkConnection()) {\n-                    connector.sendCommand(gatewayCommand);\n-                }\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType) {\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(((QuantityType) command).doubleValue()));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n             }\n-        } catch (Exception ex) {\n-            logger.error(\"error\", ex);\n         }\n     }\n \n-    boolean connecting = false;\n-\n     @Override\n     public void connecting() {\n         connecting = true;\n", "next_change": {"commit": "f4d2bfd2fcb3b29dd05b246a2c84bbe1e9f216c8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex ed4ad29992..dfa5b5495b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -98,7 +103,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n     }\n \n     @Override\n", "next_change": {"commit": "766a0e5159df21696dedf42c4c1f437fd19112e2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex dfa5b5495b..f812329e06 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -103,7 +114,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Connecting\");\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTAwMg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459002", "body": "Does connecting mean that is not connected? Or should it just be UKNOWN? The status which we talk about is the status of actual thing not of the connection. \r\n\r\nSo if you connected you know its ONLINE, if you fail to connect you can assume its OFFLINE or that there is some configuration error. But if you haven't tried you can nog know whether the thing is OFFLINE.", "bodyText": "Does connecting mean that is not connected? Or should it just be UKNOWN? The status which we talk about is the status of actual thing not of the connection.\nSo if you connected you know its ONLINE, if you fail to connect you can assume its OFFLINE or that there is some configuration error. But if you haven't tried you can nog know whether the thing is OFFLINE.", "bodyHTML": "<p dir=\"auto\">Does connecting mean that is not connected? Or should it just be UKNOWN? The status which we talk about is the status of actual thing not of the connection.</p>\n<p dir=\"auto\">So if you connected you know its ONLINE, if you fail to connect you can assume its OFFLINE or that there is some configuration error. But if you haven't tried you can nog know whether the thing is OFFLINE.</p>", "author": "martinvw", "createdAt": "2020-05-09T06:26:46Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NDg2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426244863", "bodyText": "For your reference see also: https://www.openhab.org/docs/concepts/things.html#thing-status", "author": "martinvw", "createdAt": "2020-05-17T10:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MDYzNw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426250637", "bodyText": "Changed", "author": "ArjenKorevaar", "createdAt": "2020-05-17T11:34:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 866bd16690..354048d8d8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -81,40 +73,34 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n \n-        if (!(command instanceof RefreshType)) {\n-            String channel = channelUID.getId();\n-            String code = getGatewayCodeFromChannel(channel);\n-\n-            GatewayCommand gatewayCommand = null;\n-\n-            if (command instanceof QuantityType<?>) {\n-                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n-\n-                if (quantityType != null) {\n-                    double value = quantityType.doubleValue();\n-                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n                 }\n-            }\n-\n-            if (gatewayCommand == null) {\n-                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n-            }\n \n-            if (checkConnection()) {\n-                @Nullable\n-                OpenThermGatewayConnector conn = connector;\n-\n-                if (conn != null) {\n-                    conn.sendCommand(gatewayCommand);\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n                 }\n             }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n         }\n     }\n \n+    boolean connecting = false;\n+\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        updateStatus(ThingStatus.OFFLINE);\n     }\n \n     @Override\n", "next_change": {"commit": "e2e66bb9838bfc21ac4acf458c3b99391651ce63", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..ed4ad29992 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -73,30 +77,24 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     public void handleCommand(ChannelUID channelUID, Command command) {\n         logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n \n-        try {\n-            if (command.toFullString() != \"REFRESH\") {\n-                String channel = channelUID.getId();\n-                String code = getGatewayCodeFromChannel(channel);\n-\n-                GatewayCommand gatewayCommand;\n-                if (command instanceof QuantityType) {\n-                    gatewayCommand = GatewayCommand.parse(code,\n-                            Double.toString(((QuantityType) command).doubleValue()));\n-                } else {\n-                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n-                }\n+        if (command.toFullString() != \"REFRESH\") {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n \n-                if (gatewayCommand != null && checkConnection()) {\n-                    connector.sendCommand(gatewayCommand);\n-                }\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType) {\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(((QuantityType) command).doubleValue()));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n             }\n-        } catch (Exception ex) {\n-            logger.error(\"error\", ex);\n         }\n     }\n \n-    boolean connecting = false;\n-\n     @Override\n     public void connecting() {\n         connecting = true;\n", "next_change": {"commit": "f4d2bfd2fcb3b29dd05b246a2c84bbe1e9f216c8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex ed4ad29992..dfa5b5495b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -98,7 +103,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n     }\n \n     @Override\n", "next_change": {"commit": "766a0e5159df21696dedf42c4c1f437fd19112e2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex dfa5b5495b..f812329e06 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -103,7 +114,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     @Override\n     public void connecting() {\n         connecting = true;\n-        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Connecting\");\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTA1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459057", "body": "See below", "bodyText": "See below", "bodyHTML": "<p dir=\"auto\">See below</p>", "author": "martinvw", "createdAt": "2020-05-09T06:27:41Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 866bd16690..354048d8d8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -70,7 +62,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     public void initialize() {\n         logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n \n-        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+        updateStatus(ThingStatus.OFFLINE);\n \n         config = getConfigAs(OpenThermGatewayConfiguration.class);\n \n", "next_change": {"commit": "f4d2bfd2fcb3b29dd05b246a2c84bbe1e9f216c8", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..dfa5b5495b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -62,7 +70,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     public void initialize() {\n         logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n \n-        updateStatus(ThingStatus.OFFLINE);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n \n         config = getConfigAs(OpenThermGatewayConfiguration.class);\n \n", "next_change": {"commit": "766a0e5159df21696dedf42c4c1f437fd19112e2", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex dfa5b5495b..f812329e06 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -70,7 +70,7 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n     public void initialize() {\n         logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n \n-        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Initializing\");\n \n         config = getConfigAs(OpenThermGatewayConfiguration.class);\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTM1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459359", "body": "Is the normal String enough? If so please just pass the `state`. Otherways you will also call the `toFullString` when debug-levels do not apply.", "bodyText": "Is the normal String enough? If so please just pass the state. Otherways you will also call the toFullString when debug-levels do not apply.", "bodyHTML": "<p dir=\"auto\">Is the normal String enough? If so please just pass the <code>state</code>. Otherways you will also call the <code>toFullString</code> when debug-levels do not apply.</p>", "author": "martinvw", "createdAt": "2020-05-09T06:31:26Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        connecting = false;\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (conn != null && !connecting && !conn.isConnected()) {\n+                    connect();\n+                }\n+            }, conf.connectionRetryInterval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable\n+                        Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MDk3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426250975", "bodyText": "Removed toFullString", "author": "ArjenKorevaar", "createdAt": "2020-05-17T11:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 866bd16690..354048d8d8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -160,35 +149,88 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case FLAGS:\n-                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case UINT8:\n-                    case UINT16:\n-                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n                         break;\n-                    case INT8:\n-                    case INT16:\n-                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n                         break;\n-                    case FLOAT:\n-                        float value = message.getFloat();\n-                        @Nullable\n-                        Unit<?> unit = dataItem.getUnit();\n-                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n                         break;\n-                    case DOWTOD:\n+                    case DoWToD:\n                         break;\n                 }\n \n                 if (state != null) {\n                     logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n-                    updateState(channelId, state);\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n+                    }\n                 }\n             }\n         }\n     }\n \n+    @Override\n+    public void log(LogLevel loglevel, String format, String arg) {\n+        String message = String.format(format, arg);\n+        log(loglevel, message);\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message, Throwable t) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message, t);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message, t);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message, t);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message, t);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message, t);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n     @Override\n     public void handleRemoval() {\n         logger.debug(\"Removing OpenTherm Gateway handler\");\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 354048d8d8..0861edc52c 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -149,88 +140,34 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case Flags:\n-                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case Uint8:\n-                    case Uint16:\n-                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n                         break;\n-                    case Int8:\n-                    case Int16:\n-                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n                         break;\n-                    case Float:\n-                        state = TypeConverter.toDecimalType(message.getFloat());\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n                         break;\n-                    case DoWToD:\n+                    case DOWTOD:\n                         break;\n                 }\n-\n+          \n                 if (state != null) {\n                     logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n-                    try {\n-                        updateState(channelId, state);\n-                    } catch (IllegalStateException e) {\n-                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n-                    }\n+                    updateState(channelId, state);\n                 }\n             }\n         }\n     }\n \n-    @Override\n-    public void log(LogLevel loglevel, String format, String arg) {\n-        String message = String.format(format, arg);\n-        log(loglevel, message);\n-    }\n-\n-    @Override\n-    public void log(LogLevel loglevel, String message, Throwable t) {\n-        switch (loglevel) {\n-            case Trace:\n-                logger.trace(\"{}\", message, t);\n-                break;\n-            case Debug:\n-                logger.debug(\"{}\", message, t);\n-                break;\n-            case Info:\n-                logger.info(\"{}\", message, t);\n-                break;\n-            case Warning:\n-                logger.warn(\"{}\", message, t);\n-                break;\n-            case Error:\n-                logger.error(\"{}\", message, t);\n-                break;\n-            default:\n-                break;\n-        }\n-    }\n-\n-    @Override\n-    public void log(LogLevel loglevel, String message) {\n-        switch (loglevel) {\n-            case Trace:\n-                logger.trace(\"{}\", message);\n-                break;\n-            case Debug:\n-                logger.debug(\"{}\", message);\n-                break;\n-            case Info:\n-                logger.info(\"{}\", message);\n-                break;\n-            case Warning:\n-                logger.warn(\"{}\", message);\n-                break;\n-            case Error:\n-                logger.error(\"{}\", message);\n-                break;\n-            default:\n-                break;\n-        }\n-    }\n-\n     @Override\n     public void handleRemoval() {\n         logger.debug(\"Removing OpenTherm Gateway handler\");\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTUxNw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459517", "body": "It seems that a lot of these fields can be marked `final` I would always prefer to make class level fields explicitly final when possible.", "bodyText": "It seems that a lot of these fields can be marked final I would always prefer to make class level fields explicitly final when possible.", "bodyHTML": "<p dir=\"auto\">It seems that a lot of these fields can be marked <code>final</code> I would always prefer to make class level fields explicitly final when possible.</p>", "author": "martinvw", "createdAt": "2020-05-09T06:33:42Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItem {\n+    private int id;", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MTA5OA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426241098", "bodyText": "Prefer, or needed ?", "author": "ArjenKorevaar", "createdAt": "2020-05-17T09:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MzMyNw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426243327", "bodyText": "It will improve the code and ease future maintenance, it will thus benefit all of us. You will not find any maintainer who will object making fields final.", "author": "martinvw", "createdAt": "2020-05-17T10:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NzAxMg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426247012", "bodyText": "That's not really the question though.. it's about what is needed to get this code up to a level of standard set to approve the PR. I don't mind spending some of my valuable time to share this binding with others.. but with every reviewer, new considerations are brought in which are fine by itself but make this PR process a never ending story.\nAgain, if changes are required, based on set standards, I will be happy to put more time in.", "author": "ArjenKorevaar", "createdAt": "2020-05-17T10:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\nindex 12be3a747a..1c938ef1e8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\n", "chunk": "@@ -12,10 +12,7 @@\n  */\n package org.openhab.binding.openthermgateway.internal;\n \n-import javax.measure.Unit;\n-\n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n \n /**\n  * @author Arjen Korevaar - Initial contribution\n", "next_change": {"commit": "e2e66bb9838bfc21ac4acf458c3b99391651ce63", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\nindex 1c938ef1e8..b86f31b7c8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\n", "chunk": "@@ -12,7 +12,10 @@\n  */\n package org.openhab.binding.openthermgateway.internal;\n \n+import javax.measure.Unit;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n \n /**\n  * @author Arjen Korevaar - Initial contribution\n", "next_change": {"commit": "f7f77d72c7cf2073b87d1122331c5e0ca97dad26", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\nindex b86f31b7c8..4eb8ca3311 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\n", "chunk": "@@ -18,6 +18,8 @@ import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n \n /**\n+ * The {@link DataItem} holds the internal OpenTherm message and meta data.\n+ * \n  * @author Arjen Korevaar - Initial contribution\n  */\n @NonNullByDefault\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTU2MA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459560", "body": "Please make sure that you document for all classes their purpose, see also https://www.openhab.org/docs/developer/guidelines.html#c-documentation", "bodyText": "Please make sure that you document for all classes their purpose, see also https://www.openhab.org/docs/developer/guidelines.html#c-documentation", "bodyHTML": "<p dir=\"auto\">Please make sure that you document for all classes their purpose, see also <a href=\"https://www.openhab.org/docs/developer/guidelines.html#c-documentation\" rel=\"nofollow\">https://www.openhab.org/docs/developer/guidelines.html#c-documentation</a></p>", "author": "martinvw", "createdAt": "2020-05-09T06:34:25Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NTI2OA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426245268", "bodyText": "Added documentation where needed", "author": "ArjenKorevaar", "createdAt": "2020-05-17T10:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\nindex 12be3a747a..1c938ef1e8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\n", "chunk": "@@ -12,10 +12,7 @@\n  */\n package org.openhab.binding.openthermgateway.internal;\n \n-import javax.measure.Unit;\n-\n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.jdt.annotation.Nullable;\n \n /**\n  * @author Arjen Korevaar - Initial contribution\n", "next_change": {"commit": "e2e66bb9838bfc21ac4acf458c3b99391651ce63", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\nindex 1c938ef1e8..b86f31b7c8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\n", "chunk": "@@ -12,7 +12,10 @@\n  */\n package org.openhab.binding.openthermgateway.internal;\n \n+import javax.measure.Unit;\n+\n import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n \n /**\n  * @author Arjen Korevaar - Initial contribution\n", "next_change": {"commit": "f7f77d72c7cf2073b87d1122331c5e0ca97dad26", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\nindex b86f31b7c8..4eb8ca3311 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java\n", "chunk": "@@ -18,6 +18,8 @@ import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n \n /**\n+ * The {@link DataItem} holds the internal OpenTherm message and meta data.\n+ * \n  * @author Arjen Korevaar - Initial contribution\n  */\n @NonNullByDefault\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTY3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459677", "body": "Please use the interface instead of the actual implementation for declarations and return values. \r\n```suggestion\r\n    public static final Map<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\r\n```", "bodyText": "Please use the interface instead of the actual implementation for declarations and return values.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\n          \n          \n            \n                public static final Map<Integer, DataItem[]> dataItemGroups = createDataItemGroups();", "bodyHTML": "<p dir=\"auto\">Please use the interface instead of the actual implementation for declarations and return values.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\"><span class=\"x x-first x-last\">HashMap</span>&lt;<span class=\"pl-smi\">Integer</span>, <span class=\"pl-k\">DataItem</span>[]&gt;</span> dataItemGroups <span class=\"pl-k\">=</span> createDataItemGroups();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\"><span class=\"x x-first x-last\">Map</span>&lt;<span class=\"pl-smi\">Integer</span>, <span class=\"pl-k\">DataItem</span>[]&gt;</span> dataItemGroups <span class=\"pl-k\">=</span> createDataItemGroups();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "martinvw", "createdAt": "2020-05-09T06:35:46Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+\n+    public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0Mjc4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426242789", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-05-17T10:12:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\nindex ccef9a8a6b..31468ae20d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n", "chunk": "@@ -15,146 +15,174 @@ package org.openhab.binding.openthermgateway.internal;\n import java.util.HashMap;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.unit.SIUnits;\n \n /**\n  * @author Arjen Korevaar - Initial contribution\n  */\n @NonNullByDefault\n public class DataItemGroup {\n+    private int id;\n+    private DataItem[] dataItems;\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public void setID(int id) {\n+        this.id = id;\n+    }\n+\n+    public DataItem[] getDataItems() {\n+        return dataItems;\n+    }\n+\n+    public void setDataItem(DataItem[] dataItems) {\n+        this.dataItems = dataItems;\n+    }\n+\n+    public DataItemGroup(int id, DataItem... dataItems) {\n+        this.id = id;\n+        this.dataItems = dataItems;\n+    }\n \n     public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\n \n     private static HashMap<Integer, DataItem[]> createDataItemGroups() {\n         HashMap<Integer, DataItem[]> g = new HashMap<Integer, DataItem[]>();\n \n-        g.put(0, new DataItem[] { new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"ch_enable\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"dhw_enable\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"cooling_enabled\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"otc_active\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"ch2_enable\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x00:5\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x00:6\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x00:7\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"fault\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"ch_mode\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"dhw_mode\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"flame\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"cooling\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"ch2E\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"diag\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x00:7\") });\n-        g.put(1, new DataItem[] { new DataItem(1, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint\", SIUnits.CELSIUS) });\n-        g.put(2, new DataItem[] { new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x02:0\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x02:1\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x02:2\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x02:3\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x02:4\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x02:5\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x02:6\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x02:7\"),\n-                new DataItem(2, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"mastermemberid\") });\n-        g.put(3, new DataItem[] { new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"dhwpresent\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"controltype\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"coolingsupport\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"dhwconfig\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"masterlowoff\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"ch2present\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x03:6\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x03:7\"),\n-                new DataItem(3, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slavememberid\") });\n-        g.put(4, new DataItem[] { new DataItem(4, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"commandcode\"),\n-                new DataItem(4, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"commandresponse\") });\n-        g.put(5, new DataItem[] { new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"servicerequest\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"lockout-reset\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"lowwaterpress\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"gasflamefault\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"airpressfault\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"waterovtemp\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x05:6\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x05:7\"),\n-                new DataItem(5, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"oemfaultcode\") });\n-        g.put(6, new DataItem[] { new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"0x06:l0\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"0x06:l1\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"0x06:l2\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"0x06:l3\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"0x06:l4\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"0x06:l5\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"0x06:l6\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x06:l7\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x06:h0\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x06:h1\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x06:h2\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x06:h3\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x06:h4\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x06:h5\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x06:h6\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x06:h7\") });\n-        g.put(7, new DataItem[] { new DataItem(7, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"0x07\") });\n-        g.put(8, new DataItem[] { new DataItem(8, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint2\") });\n-        g.put(9, new DataItem[] { new DataItem(9, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"overridesetpoint\") });\n-        g.put(10, new DataItem[] { new DataItem(10, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0a:h\"),\n-                new DataItem(10, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0a:l\") });\n-        g.put(11, new DataItem[] { new DataItem(11, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"tspindex\"),\n-                new DataItem(11, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"tspvalue\") });\n-        g.put(12, new DataItem[] { new DataItem(12, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0c:h\"),\n-                new DataItem(12, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0c:l\") });\n-        g.put(13, new DataItem[] { new DataItem(13, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0d:h\"),\n-                new DataItem(13, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0d:l\") });\n-        g.put(14, new DataItem[] { new DataItem(14, Msg.READ, ByteType.LOWBYTE, DataType.FLOAT, 0, \"maxrelmdulevel\") });\n-        g.put(15, new DataItem[] { new DataItem(15, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"maxcapkw\"),\n-                new DataItem(15, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"maxcapprc\") });\n-        g.put(16, new DataItem[] { new DataItem(16, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomsetpoint\", SIUnits.CELSIUS) });\n-        g.put(17, new DataItem[] { new DataItem(17, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"modulevel\") });\n-        g.put(18, new DataItem[] { new DataItem(18, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"waterpressure\") });\n-        g.put(19, new DataItem[] { new DataItem(19, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwflow\") });\n-        g.put(20, new DataItem[] { new DataItem(20, Msg.READWRITE, ByteType.BOTH, DataType.DOWTOD, 0, \"dowtod\") });\n-        g.put(21, new DataItem[] { new DataItem(21, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"month\"),\n-                new DataItem(21, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"dom\") });\n-        g.put(22, new DataItem[] { new DataItem(22, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"year\") });\n-        g.put(23, new DataItem[] { new DataItem(23, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"setpointch2\") });\n-        g.put(24, new DataItem[] { new DataItem(24, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomtemp\", SIUnits.CELSIUS) });\n-        g.put(25, new DataItem[] { new DataItem(25, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp\", SIUnits.CELSIUS) });\n-        g.put(26, new DataItem[] { new DataItem(26, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwtemp\", SIUnits.CELSIUS) });\n-        g.put(27, new DataItem[] { new DataItem(27, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"outsidetemp\", SIUnits.CELSIUS) });\n-        g.put(28, new DataItem[] { new DataItem(28, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"returntemp\", SIUnits.CELSIUS) });\n-        g.put(29, new DataItem[] { new DataItem(29, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solstortemp\") });\n-        g.put(30, new DataItem[] { new DataItem(30, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solcolltemp\") });\n-        g.put(31, new DataItem[] { new DataItem(31, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp2\") });\n-        g.put(32, new DataItem[] { new DataItem(32, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhw2temp\") });\n-        g.put(33, new DataItem[] { new DataItem(33, Msg.READ, ByteType.BOTH, DataType.INT16, 0, \"exhausttemp\") });\n-        g.put(48, new DataItem[] { new DataItem(48, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"tdhwsetu\"),\n-                new DataItem(48, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"tdhwsetl\") });\n-        g.put(49, new DataItem[] { new DataItem(49, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"maxchu\"),\n-                new DataItem(49, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"maxchl\") });\n-        g.put(50, new DataItem[] { new DataItem(50, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"otcu\"),\n-                new DataItem(50, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"otcl\") });\n-        g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\", SIUnits.CELSIUS) });\n-        g.put(57, new DataItem[] { new DataItem(57, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tchmax\") });\n-        g.put(58, new DataItem[] { new DataItem(58, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"otchcratio\") });\n-        g.put(100, new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n-        g.put(115, new DataItem[] { new DataItem(115, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"oemdiagcode\") });\n-        g.put(116, new DataItem[] { new DataItem(116, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerstarts\") });\n-        g.put(117, new DataItem[] { new DataItem(117, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumpstarts\") });\n-        g.put(118, new DataItem[] { new DataItem(118, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvstarts\") });\n-        g.put(119, new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n-        g.put(120, new DataItem[] { new DataItem(120, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerhours\") });\n-        g.put(121, new DataItem[] { new DataItem(121, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumphours\") });\n-        g.put(122, new DataItem[] { new DataItem(122, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvhours\") });\n-        g.put(123, new DataItem[] { new DataItem(123, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerhours\") });\n-        g.put(124, new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n-        g.put(125, new DataItem[] { new DataItem(125, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"slaveotversion\") });\n-        g.put(126, new DataItem[] { new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n-                new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n-        g.put(127, new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n-                new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n+        g.put(0, new DataItem[] { new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"ch_enable\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"dhw_enable\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"cooling_enabled\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"otc_active\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"ch2_enable\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x00:5\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x00:6\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x00:7\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"fault\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"ch_mode\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"dhw_mode\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"flame\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"cooling\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"ch2E\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"diag\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x00:7\") });\n+        g.put(1, new DataItem[] { new DataItem(1, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint\") });\n+        g.put(2, new DataItem[] { new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 0, \"0x02:0\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 1, \"0x02:1\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 2, \"0x02:2\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 3, \"0x02:3\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 4, \"0x02:4\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 5, \"0x02:5\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 6, \"0x02:6\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 7, \"0x02:7\"),\n+                new DataItem(2, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"mastermemberid\") });\n+        g.put(3, new DataItem[] { new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"dhwpresent\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"controltype\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"coolingsupport\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"dhwconfig\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"masterlowoff\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"ch2present\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x03:6\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x03:7\"),\n+                new DataItem(3, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slavememberid\") });\n+        g.put(4, new DataItem[] { new DataItem(4, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"commandcode\"),\n+                new DataItem(4, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"commandresponse\") });\n+        g.put(5, new DataItem[] { new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"servicerequest\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"lockout-reset\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"lowwaterpress\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"gasflamefault\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"airpressfault\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"waterovtemp\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x05:6\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x05:7\"),\n+                new DataItem(5, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"oemfaultcode\") });\n+        g.put(6, new DataItem[] { new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"0x06:l0\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"0x06:l1\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"0x06:l2\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"0x06:l3\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"0x06:l4\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"0x06:l5\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"0x06:l6\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x06:l7\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"0x06:h0\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"0x06:h1\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"0x06:h2\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"0x06:h3\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"0x06:h4\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x06:h5\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x06:h6\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x06:h7\") });\n+        g.put(7, new DataItem[] { new DataItem(7, Msg.Write, ByteType.Both, DataType.Float, 0, \"0x07\") });\n+        g.put(8, new DataItem[] { new DataItem(8, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint2\") });\n+        g.put(9, new DataItem[] { new DataItem(9, Msg.Read, ByteType.Both, DataType.Float, 0, \"overridesetpoint\") });\n+        g.put(10, new DataItem[] { new DataItem(10, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"0x0a:h\"),\n+                new DataItem(10, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"0x0a:l\") });\n+        g.put(11, new DataItem[] { new DataItem(11, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"tspindex\"),\n+                new DataItem(11, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"tspvalue\") });\n+        g.put(12, new DataItem[] { new DataItem(12, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0c:h\"),\n+                new DataItem(12, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0c:l\") });\n+        g.put(13, new DataItem[] { new DataItem(13, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0d:h\"),\n+                new DataItem(13, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0d:l\") });\n+        g.put(14, new DataItem[] { new DataItem(14, Msg.Read, ByteType.LowByte, DataType.Float, 0, \"maxrelmdulevel\") });\n+        g.put(15, new DataItem[] { new DataItem(15, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"maxcapkw\"),\n+                new DataItem(15, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"maxcapprc\") });\n+        g.put(16, new DataItem[] { new DataItem(16, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomsetpoint\") });\n+        g.put(17, new DataItem[] { new DataItem(17, Msg.Read, ByteType.Both, DataType.Float, 0, \"modulevel\") });\n+        g.put(18, new DataItem[] { new DataItem(18, Msg.Read, ByteType.Both, DataType.Float, 0, \"waterpressure\") });\n+        g.put(19, new DataItem[] { new DataItem(19, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwflow\") });\n+        g.put(20, new DataItem[] { new DataItem(20, Msg.ReadWrite, ByteType.Both, DataType.DoWToD, 0, \"dowtod\") });\n+        g.put(21, new DataItem[] { new DataItem(21, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"month\"),\n+                new DataItem(21, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"dom\") });\n+        g.put(22, new DataItem[] { new DataItem(22, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"year\") });\n+        g.put(23, new DataItem[] { new DataItem(23, Msg.Write, ByteType.Both, DataType.Float, 0, \"setpointch2\") });\n+        g.put(24, new DataItem[] { new DataItem(24, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomtemp\") });\n+        g.put(25, new DataItem[] { new DataItem(25, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp\") });\n+        g.put(26, new DataItem[] { new DataItem(26, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwtemp\") });\n+        g.put(27, new DataItem[] { new DataItem(27, Msg.Read, ByteType.Both, DataType.Float, 0, \"outsidetemp\") });\n+        g.put(28, new DataItem[] { new DataItem(28, Msg.Read, ByteType.Both, DataType.Float, 0, \"returntemp\") });\n+        g.put(29, new DataItem[] { new DataItem(29, Msg.Read, ByteType.Both, DataType.Float, 0, \"solstortemp\") });\n+        g.put(30, new DataItem[] { new DataItem(30, Msg.Read, ByteType.Both, DataType.Float, 0, \"solcolltemp\") });\n+        g.put(31, new DataItem[] { new DataItem(31, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp2\") });\n+        g.put(32, new DataItem[] { new DataItem(32, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhw2temp\") });\n+        g.put(33, new DataItem[] { new DataItem(33, Msg.Read, ByteType.Both, DataType.Int16, 0, \"exhausttemp\") });\n+        g.put(48, new DataItem[] { new DataItem(48, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"tdhwsetu\"),\n+                new DataItem(48, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"tdhwsetl\") });\n+        g.put(49, new DataItem[] { new DataItem(49, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"maxchu\"),\n+                new DataItem(49, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"maxchl\") });\n+        g.put(50, new DataItem[] { new DataItem(50, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"otcu\"),\n+                new DataItem(50, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"otcl\") });\n+        g.put(56, new DataItem[] { new DataItem(56, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tdhwset\") });\n+        g.put(57, new DataItem[] { new DataItem(57, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tchmax\") });\n+        g.put(58, new DataItem[] { new DataItem(58, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"otchcratio\") });\n+        g.put(100,\n+                new DataItem[] { new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"rof0\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"rof1\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"rof2\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"rof3\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"rof4\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"rof5\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"rof6\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"rof7\") });\n+        g.put(115, new DataItem[] { new DataItem(115, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"oemdiagcode\") });\n+        g.put(116, new DataItem[] { new DataItem(116, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerstarts\") });\n+        g.put(117, new DataItem[] { new DataItem(117, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumpstarts\") });\n+        g.put(118, new DataItem[] { new DataItem(118, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvstarts\") });\n+        g.put(119,\n+                new DataItem[] { new DataItem(119, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerstarts\") });\n+        g.put(120, new DataItem[] { new DataItem(120, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerhours\") });\n+        g.put(121, new DataItem[] { new DataItem(121, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumphours\") });\n+        g.put(122, new DataItem[] { new DataItem(122, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvhours\") });\n+        g.put(123, new DataItem[] { new DataItem(123, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerhours\") });\n+        g.put(124,\n+                new DataItem[] { new DataItem(124, Msg.Write, ByteType.Both, DataType.Float, 0, \"masterotversion\") });\n+        g.put(125, new DataItem[] { new DataItem(125, Msg.Read, ByteType.Both, DataType.Float, 0, \"slaveotversion\") });\n+        g.put(126,\n+                new DataItem[] {\n+                        new DataItem(126, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"masterproducttype\"),\n+                        new DataItem(126, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"masterproductversion\") });\n+        g.put(127,\n+                new DataItem[] { new DataItem(127, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"slaveproducttype\"),\n+                        new DataItem(127, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slaveproductversion\") });\n \n         return g;\n     }\n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\nindex 31468ae20d..ef38c0af50 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n", "chunk": "@@ -50,139 +50,139 @@ public class DataItemGroup {\n     private static HashMap<Integer, DataItem[]> createDataItemGroups() {\n         HashMap<Integer, DataItem[]> g = new HashMap<Integer, DataItem[]>();\n \n-        g.put(0, new DataItem[] { new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"ch_enable\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"dhw_enable\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"cooling_enabled\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"otc_active\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"ch2_enable\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x00:5\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x00:6\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x00:7\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"fault\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"ch_mode\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"dhw_mode\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"flame\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"cooling\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"ch2E\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"diag\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x00:7\") });\n-        g.put(1, new DataItem[] { new DataItem(1, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint\") });\n-        g.put(2, new DataItem[] { new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 0, \"0x02:0\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 1, \"0x02:1\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 2, \"0x02:2\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 3, \"0x02:3\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 4, \"0x02:4\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 5, \"0x02:5\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 6, \"0x02:6\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 7, \"0x02:7\"),\n-                new DataItem(2, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"mastermemberid\") });\n-        g.put(3, new DataItem[] { new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"dhwpresent\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"controltype\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"coolingsupport\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"dhwconfig\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"masterlowoff\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"ch2present\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x03:6\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x03:7\"),\n-                new DataItem(3, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slavememberid\") });\n-        g.put(4, new DataItem[] { new DataItem(4, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"commandcode\"),\n-                new DataItem(4, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"commandresponse\") });\n-        g.put(5, new DataItem[] { new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"servicerequest\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"lockout-reset\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"lowwaterpress\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"gasflamefault\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"airpressfault\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"waterovtemp\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x05:6\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x05:7\"),\n-                new DataItem(5, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"oemfaultcode\") });\n-        g.put(6, new DataItem[] { new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"0x06:l0\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"0x06:l1\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"0x06:l2\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"0x06:l3\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"0x06:l4\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"0x06:l5\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"0x06:l6\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x06:l7\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"0x06:h0\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"0x06:h1\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"0x06:h2\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"0x06:h3\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"0x06:h4\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x06:h5\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x06:h6\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x06:h7\") });\n-        g.put(7, new DataItem[] { new DataItem(7, Msg.Write, ByteType.Both, DataType.Float, 0, \"0x07\") });\n-        g.put(8, new DataItem[] { new DataItem(8, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint2\") });\n-        g.put(9, new DataItem[] { new DataItem(9, Msg.Read, ByteType.Both, DataType.Float, 0, \"overridesetpoint\") });\n-        g.put(10, new DataItem[] { new DataItem(10, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"0x0a:h\"),\n-                new DataItem(10, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"0x0a:l\") });\n-        g.put(11, new DataItem[] { new DataItem(11, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"tspindex\"),\n-                new DataItem(11, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"tspvalue\") });\n-        g.put(12, new DataItem[] { new DataItem(12, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0c:h\"),\n-                new DataItem(12, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0c:l\") });\n-        g.put(13, new DataItem[] { new DataItem(13, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0d:h\"),\n-                new DataItem(13, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0d:l\") });\n-        g.put(14, new DataItem[] { new DataItem(14, Msg.Read, ByteType.LowByte, DataType.Float, 0, \"maxrelmdulevel\") });\n-        g.put(15, new DataItem[] { new DataItem(15, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"maxcapkw\"),\n-                new DataItem(15, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"maxcapprc\") });\n-        g.put(16, new DataItem[] { new DataItem(16, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomsetpoint\") });\n-        g.put(17, new DataItem[] { new DataItem(17, Msg.Read, ByteType.Both, DataType.Float, 0, \"modulevel\") });\n-        g.put(18, new DataItem[] { new DataItem(18, Msg.Read, ByteType.Both, DataType.Float, 0, \"waterpressure\") });\n-        g.put(19, new DataItem[] { new DataItem(19, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwflow\") });\n-        g.put(20, new DataItem[] { new DataItem(20, Msg.ReadWrite, ByteType.Both, DataType.DoWToD, 0, \"dowtod\") });\n-        g.put(21, new DataItem[] { new DataItem(21, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"month\"),\n-                new DataItem(21, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"dom\") });\n-        g.put(22, new DataItem[] { new DataItem(22, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"year\") });\n-        g.put(23, new DataItem[] { new DataItem(23, Msg.Write, ByteType.Both, DataType.Float, 0, \"setpointch2\") });\n-        g.put(24, new DataItem[] { new DataItem(24, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomtemp\") });\n-        g.put(25, new DataItem[] { new DataItem(25, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp\") });\n-        g.put(26, new DataItem[] { new DataItem(26, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwtemp\") });\n-        g.put(27, new DataItem[] { new DataItem(27, Msg.Read, ByteType.Both, DataType.Float, 0, \"outsidetemp\") });\n-        g.put(28, new DataItem[] { new DataItem(28, Msg.Read, ByteType.Both, DataType.Float, 0, \"returntemp\") });\n-        g.put(29, new DataItem[] { new DataItem(29, Msg.Read, ByteType.Both, DataType.Float, 0, \"solstortemp\") });\n-        g.put(30, new DataItem[] { new DataItem(30, Msg.Read, ByteType.Both, DataType.Float, 0, \"solcolltemp\") });\n-        g.put(31, new DataItem[] { new DataItem(31, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp2\") });\n-        g.put(32, new DataItem[] { new DataItem(32, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhw2temp\") });\n-        g.put(33, new DataItem[] { new DataItem(33, Msg.Read, ByteType.Both, DataType.Int16, 0, \"exhausttemp\") });\n-        g.put(48, new DataItem[] { new DataItem(48, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"tdhwsetu\"),\n-                new DataItem(48, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"tdhwsetl\") });\n-        g.put(49, new DataItem[] { new DataItem(49, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"maxchu\"),\n-                new DataItem(49, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"maxchl\") });\n-        g.put(50, new DataItem[] { new DataItem(50, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"otcu\"),\n-                new DataItem(50, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"otcl\") });\n-        g.put(56, new DataItem[] { new DataItem(56, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tdhwset\") });\n-        g.put(57, new DataItem[] { new DataItem(57, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tchmax\") });\n-        g.put(58, new DataItem[] { new DataItem(58, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"otchcratio\") });\n+        g.put(0, new DataItem[] { new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"ch_enable\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"dhw_enable\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"cooling_enabled\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"otc_active\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"ch2_enable\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x00:5\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x00:6\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x00:7\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"fault\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"ch_mode\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"dhw_mode\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"flame\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"cooling\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"ch2E\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"diag\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x00:7\") });\n+        g.put(1, new DataItem[] { new DataItem(1, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint\") });\n+        g.put(2, new DataItem[] { new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x02:0\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x02:1\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x02:2\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x02:3\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x02:4\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x02:5\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x02:6\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x02:7\"),\n+                new DataItem(2, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"mastermemberid\") });\n+        g.put(3, new DataItem[] { new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"dhwpresent\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"controltype\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"coolingsupport\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"dhwconfig\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"masterlowoff\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"ch2present\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x03:6\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x03:7\"),\n+                new DataItem(3, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slavememberid\") });\n+        g.put(4, new DataItem[] { new DataItem(4, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"commandcode\"),\n+                new DataItem(4, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"commandresponse\") });\n+        g.put(5, new DataItem[] { new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"servicerequest\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"lockout-reset\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"lowwaterpress\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"gasflamefault\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"airpressfault\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"waterovtemp\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x05:6\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x05:7\"),\n+                new DataItem(5, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"oemfaultcode\") });\n+        g.put(6, new DataItem[] { new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"0x06:l0\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"0x06:l1\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"0x06:l2\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"0x06:l3\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"0x06:l4\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"0x06:l5\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"0x06:l6\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x06:l7\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x06:h0\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x06:h1\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x06:h2\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x06:h3\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x06:h4\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x06:h5\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x06:h6\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x06:h7\") });\n+        g.put(7, new DataItem[] { new DataItem(7, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"0x07\") });\n+        g.put(8, new DataItem[] { new DataItem(8, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint2\") });\n+        g.put(9, new DataItem[] { new DataItem(9, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"overridesetpoint\") });\n+        g.put(10, new DataItem[] { new DataItem(10, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0a:h\"),\n+                new DataItem(10, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0a:l\") });\n+        g.put(11, new DataItem[] { new DataItem(11, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"tspindex\"),\n+                new DataItem(11, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"tspvalue\") });\n+        g.put(12, new DataItem[] { new DataItem(12, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0c:h\"),\n+                new DataItem(12, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0c:l\") });\n+        g.put(13, new DataItem[] { new DataItem(13, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0d:h\"),\n+                new DataItem(13, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0d:l\") });\n+        g.put(14, new DataItem[] { new DataItem(14, Msg.READ, ByteType.LOWBYTE, DataType.FLOAT, 0, \"maxrelmdulevel\") });\n+        g.put(15, new DataItem[] { new DataItem(15, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"maxcapkw\"),\n+                new DataItem(15, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"maxcapprc\") });\n+        g.put(16, new DataItem[] { new DataItem(16, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomsetpoint\") });\n+        g.put(17, new DataItem[] { new DataItem(17, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"modulevel\") });\n+        g.put(18, new DataItem[] { new DataItem(18, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"waterpressure\") });\n+        g.put(19, new DataItem[] { new DataItem(19, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwflow\") });\n+        g.put(20, new DataItem[] { new DataItem(20, Msg.READWRITE, ByteType.BOTH, DataType.DOWTOD, 0, \"dowtod\") });\n+        g.put(21, new DataItem[] { new DataItem(21, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"month\"),\n+                new DataItem(21, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"dom\") });\n+        g.put(22, new DataItem[] { new DataItem(22, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"year\") });\n+        g.put(23, new DataItem[] { new DataItem(23, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"setpointch2\") });\n+        g.put(24, new DataItem[] { new DataItem(24, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomtemp\") });\n+        g.put(25, new DataItem[] { new DataItem(25, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp\") });\n+        g.put(26, new DataItem[] { new DataItem(26, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwtemp\") });\n+        g.put(27, new DataItem[] { new DataItem(27, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"outsidetemp\") });\n+        g.put(28, new DataItem[] { new DataItem(28, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"returntemp\") });\n+        g.put(29, new DataItem[] { new DataItem(29, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solstortemp\") });\n+        g.put(30, new DataItem[] { new DataItem(30, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solcolltemp\") });\n+        g.put(31, new DataItem[] { new DataItem(31, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp2\") });\n+        g.put(32, new DataItem[] { new DataItem(32, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhw2temp\") });\n+        g.put(33, new DataItem[] { new DataItem(33, Msg.READ, ByteType.BOTH, DataType.INT16, 0, \"exhausttemp\") });\n+        g.put(48, new DataItem[] { new DataItem(48, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"tdhwsetu\"),\n+                new DataItem(48, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"tdhwsetl\") });\n+        g.put(49, new DataItem[] { new DataItem(49, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"maxchu\"),\n+                new DataItem(49, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"maxchl\") });\n+        g.put(50, new DataItem[] { new DataItem(50, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"otcu\"),\n+                new DataItem(50, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"otcl\") });\n+        g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\") });\n+        g.put(57, new DataItem[] { new DataItem(57, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tchmax\") });\n+        g.put(58, new DataItem[] { new DataItem(58, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"otchcratio\") });\n         g.put(100,\n-                new DataItem[] { new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"rof0\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"rof1\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"rof2\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"rof3\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"rof4\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"rof5\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"rof6\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"rof7\") });\n-        g.put(115, new DataItem[] { new DataItem(115, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"oemdiagcode\") });\n-        g.put(116, new DataItem[] { new DataItem(116, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerstarts\") });\n-        g.put(117, new DataItem[] { new DataItem(117, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumpstarts\") });\n-        g.put(118, new DataItem[] { new DataItem(118, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvstarts\") });\n+                new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n+        g.put(115, new DataItem[] { new DataItem(115, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"oemdiagcode\") });\n+        g.put(116, new DataItem[] { new DataItem(116, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerstarts\") });\n+        g.put(117, new DataItem[] { new DataItem(117, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumpstarts\") });\n+        g.put(118, new DataItem[] { new DataItem(118, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvstarts\") });\n         g.put(119,\n-                new DataItem[] { new DataItem(119, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerstarts\") });\n-        g.put(120, new DataItem[] { new DataItem(120, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerhours\") });\n-        g.put(121, new DataItem[] { new DataItem(121, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumphours\") });\n-        g.put(122, new DataItem[] { new DataItem(122, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvhours\") });\n-        g.put(123, new DataItem[] { new DataItem(123, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerhours\") });\n+                new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n+        g.put(120, new DataItem[] { new DataItem(120, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerhours\") });\n+        g.put(121, new DataItem[] { new DataItem(121, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumphours\") });\n+        g.put(122, new DataItem[] { new DataItem(122, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvhours\") });\n+        g.put(123, new DataItem[] { new DataItem(123, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerhours\") });\n         g.put(124,\n-                new DataItem[] { new DataItem(124, Msg.Write, ByteType.Both, DataType.Float, 0, \"masterotversion\") });\n-        g.put(125, new DataItem[] { new DataItem(125, Msg.Read, ByteType.Both, DataType.Float, 0, \"slaveotversion\") });\n+                new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n+        g.put(125, new DataItem[] { new DataItem(125, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"slaveotversion\") });\n         g.put(126,\n                 new DataItem[] {\n-                        new DataItem(126, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"masterproducttype\"),\n-                        new DataItem(126, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"masterproductversion\") });\n+                        new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n+                        new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n         g.put(127,\n-                new DataItem[] { new DataItem(127, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"slaveproducttype\"),\n-                        new DataItem(127, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slaveproductversion\") });\n+                new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n+                        new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n \n         return g;\n     }\n", "next_change": {"commit": "4a2f1cf990563ba11bb610e479f9cf8569116e56", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\nindex ef38c0af50..ccef9a8a6b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n", "chunk": "@@ -151,38 +129,32 @@ public class DataItemGroup {\n                 new DataItem(49, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"maxchl\") });\n         g.put(50, new DataItem[] { new DataItem(50, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"otcu\"),\n                 new DataItem(50, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"otcl\") });\n-        g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\") });\n+        g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\", SIUnits.CELSIUS) });\n         g.put(57, new DataItem[] { new DataItem(57, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tchmax\") });\n         g.put(58, new DataItem[] { new DataItem(58, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"otchcratio\") });\n-        g.put(100,\n-                new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n+        g.put(100, new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n         g.put(115, new DataItem[] { new DataItem(115, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"oemdiagcode\") });\n         g.put(116, new DataItem[] { new DataItem(116, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerstarts\") });\n         g.put(117, new DataItem[] { new DataItem(117, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumpstarts\") });\n         g.put(118, new DataItem[] { new DataItem(118, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvstarts\") });\n-        g.put(119,\n-                new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n+        g.put(119, new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n         g.put(120, new DataItem[] { new DataItem(120, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerhours\") });\n         g.put(121, new DataItem[] { new DataItem(121, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumphours\") });\n         g.put(122, new DataItem[] { new DataItem(122, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvhours\") });\n         g.put(123, new DataItem[] { new DataItem(123, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerhours\") });\n-        g.put(124,\n-                new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n+        g.put(124, new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n         g.put(125, new DataItem[] { new DataItem(125, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"slaveotversion\") });\n-        g.put(126,\n-                new DataItem[] {\n-                        new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n-                        new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n-        g.put(127,\n-                new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n-                        new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n+        g.put(126, new DataItem[] { new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n+                new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n+        g.put(127, new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n+                new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n \n         return g;\n     }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTcyMg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459722", "body": "```suggestion\r\n    private static Map<Integer, DataItem[]> createDataItemGroups() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static HashMap<Integer, DataItem[]> createDataItemGroups() {\n          \n          \n            \n                private static Map<Integer, DataItem[]> createDataItemGroups() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\"><span class=\"x x-first x-last\">HashMap</span>&lt;<span class=\"pl-smi\">Integer</span>, <span class=\"pl-k\">DataItem</span>[]&gt;</span> createDataItemGroups() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\"><span class=\"x x-first x-last\">Map</span>&lt;<span class=\"pl-smi\">Integer</span>, <span class=\"pl-k\">DataItem</span>[]&gt;</span> createDataItemGroups() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "martinvw", "createdAt": "2020-05-09T06:36:21Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+\n+    public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\n+\n+    private static HashMap<Integer, DataItem[]> createDataItemGroups() {", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0Mjc5NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426242794", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-05-17T10:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\nindex ccef9a8a6b..31468ae20d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n", "chunk": "@@ -15,146 +15,174 @@ package org.openhab.binding.openthermgateway.internal;\n import java.util.HashMap;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.unit.SIUnits;\n \n /**\n  * @author Arjen Korevaar - Initial contribution\n  */\n @NonNullByDefault\n public class DataItemGroup {\n+    private int id;\n+    private DataItem[] dataItems;\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public void setID(int id) {\n+        this.id = id;\n+    }\n+\n+    public DataItem[] getDataItems() {\n+        return dataItems;\n+    }\n+\n+    public void setDataItem(DataItem[] dataItems) {\n+        this.dataItems = dataItems;\n+    }\n+\n+    public DataItemGroup(int id, DataItem... dataItems) {\n+        this.id = id;\n+        this.dataItems = dataItems;\n+    }\n \n     public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\n \n     private static HashMap<Integer, DataItem[]> createDataItemGroups() {\n         HashMap<Integer, DataItem[]> g = new HashMap<Integer, DataItem[]>();\n \n-        g.put(0, new DataItem[] { new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"ch_enable\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"dhw_enable\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"cooling_enabled\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"otc_active\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"ch2_enable\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x00:5\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x00:6\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x00:7\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"fault\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"ch_mode\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"dhw_mode\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"flame\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"cooling\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"ch2E\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"diag\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x00:7\") });\n-        g.put(1, new DataItem[] { new DataItem(1, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint\", SIUnits.CELSIUS) });\n-        g.put(2, new DataItem[] { new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x02:0\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x02:1\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x02:2\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x02:3\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x02:4\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x02:5\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x02:6\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x02:7\"),\n-                new DataItem(2, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"mastermemberid\") });\n-        g.put(3, new DataItem[] { new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"dhwpresent\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"controltype\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"coolingsupport\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"dhwconfig\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"masterlowoff\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"ch2present\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x03:6\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x03:7\"),\n-                new DataItem(3, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slavememberid\") });\n-        g.put(4, new DataItem[] { new DataItem(4, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"commandcode\"),\n-                new DataItem(4, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"commandresponse\") });\n-        g.put(5, new DataItem[] { new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"servicerequest\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"lockout-reset\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"lowwaterpress\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"gasflamefault\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"airpressfault\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"waterovtemp\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x05:6\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x05:7\"),\n-                new DataItem(5, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"oemfaultcode\") });\n-        g.put(6, new DataItem[] { new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"0x06:l0\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"0x06:l1\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"0x06:l2\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"0x06:l3\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"0x06:l4\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"0x06:l5\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"0x06:l6\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x06:l7\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x06:h0\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x06:h1\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x06:h2\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x06:h3\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x06:h4\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x06:h5\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x06:h6\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x06:h7\") });\n-        g.put(7, new DataItem[] { new DataItem(7, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"0x07\") });\n-        g.put(8, new DataItem[] { new DataItem(8, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint2\") });\n-        g.put(9, new DataItem[] { new DataItem(9, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"overridesetpoint\") });\n-        g.put(10, new DataItem[] { new DataItem(10, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0a:h\"),\n-                new DataItem(10, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0a:l\") });\n-        g.put(11, new DataItem[] { new DataItem(11, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"tspindex\"),\n-                new DataItem(11, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"tspvalue\") });\n-        g.put(12, new DataItem[] { new DataItem(12, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0c:h\"),\n-                new DataItem(12, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0c:l\") });\n-        g.put(13, new DataItem[] { new DataItem(13, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0d:h\"),\n-                new DataItem(13, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0d:l\") });\n-        g.put(14, new DataItem[] { new DataItem(14, Msg.READ, ByteType.LOWBYTE, DataType.FLOAT, 0, \"maxrelmdulevel\") });\n-        g.put(15, new DataItem[] { new DataItem(15, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"maxcapkw\"),\n-                new DataItem(15, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"maxcapprc\") });\n-        g.put(16, new DataItem[] { new DataItem(16, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomsetpoint\", SIUnits.CELSIUS) });\n-        g.put(17, new DataItem[] { new DataItem(17, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"modulevel\") });\n-        g.put(18, new DataItem[] { new DataItem(18, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"waterpressure\") });\n-        g.put(19, new DataItem[] { new DataItem(19, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwflow\") });\n-        g.put(20, new DataItem[] { new DataItem(20, Msg.READWRITE, ByteType.BOTH, DataType.DOWTOD, 0, \"dowtod\") });\n-        g.put(21, new DataItem[] { new DataItem(21, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"month\"),\n-                new DataItem(21, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"dom\") });\n-        g.put(22, new DataItem[] { new DataItem(22, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"year\") });\n-        g.put(23, new DataItem[] { new DataItem(23, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"setpointch2\") });\n-        g.put(24, new DataItem[] { new DataItem(24, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomtemp\", SIUnits.CELSIUS) });\n-        g.put(25, new DataItem[] { new DataItem(25, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp\", SIUnits.CELSIUS) });\n-        g.put(26, new DataItem[] { new DataItem(26, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwtemp\", SIUnits.CELSIUS) });\n-        g.put(27, new DataItem[] { new DataItem(27, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"outsidetemp\", SIUnits.CELSIUS) });\n-        g.put(28, new DataItem[] { new DataItem(28, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"returntemp\", SIUnits.CELSIUS) });\n-        g.put(29, new DataItem[] { new DataItem(29, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solstortemp\") });\n-        g.put(30, new DataItem[] { new DataItem(30, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solcolltemp\") });\n-        g.put(31, new DataItem[] { new DataItem(31, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp2\") });\n-        g.put(32, new DataItem[] { new DataItem(32, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhw2temp\") });\n-        g.put(33, new DataItem[] { new DataItem(33, Msg.READ, ByteType.BOTH, DataType.INT16, 0, \"exhausttemp\") });\n-        g.put(48, new DataItem[] { new DataItem(48, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"tdhwsetu\"),\n-                new DataItem(48, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"tdhwsetl\") });\n-        g.put(49, new DataItem[] { new DataItem(49, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"maxchu\"),\n-                new DataItem(49, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"maxchl\") });\n-        g.put(50, new DataItem[] { new DataItem(50, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"otcu\"),\n-                new DataItem(50, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"otcl\") });\n-        g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\", SIUnits.CELSIUS) });\n-        g.put(57, new DataItem[] { new DataItem(57, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tchmax\") });\n-        g.put(58, new DataItem[] { new DataItem(58, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"otchcratio\") });\n-        g.put(100, new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n-        g.put(115, new DataItem[] { new DataItem(115, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"oemdiagcode\") });\n-        g.put(116, new DataItem[] { new DataItem(116, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerstarts\") });\n-        g.put(117, new DataItem[] { new DataItem(117, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumpstarts\") });\n-        g.put(118, new DataItem[] { new DataItem(118, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvstarts\") });\n-        g.put(119, new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n-        g.put(120, new DataItem[] { new DataItem(120, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerhours\") });\n-        g.put(121, new DataItem[] { new DataItem(121, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumphours\") });\n-        g.put(122, new DataItem[] { new DataItem(122, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvhours\") });\n-        g.put(123, new DataItem[] { new DataItem(123, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerhours\") });\n-        g.put(124, new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n-        g.put(125, new DataItem[] { new DataItem(125, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"slaveotversion\") });\n-        g.put(126, new DataItem[] { new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n-                new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n-        g.put(127, new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n-                new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n+        g.put(0, new DataItem[] { new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"ch_enable\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"dhw_enable\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"cooling_enabled\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"otc_active\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"ch2_enable\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x00:5\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x00:6\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x00:7\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"fault\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"ch_mode\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"dhw_mode\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"flame\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"cooling\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"ch2E\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"diag\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x00:7\") });\n+        g.put(1, new DataItem[] { new DataItem(1, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint\") });\n+        g.put(2, new DataItem[] { new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 0, \"0x02:0\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 1, \"0x02:1\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 2, \"0x02:2\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 3, \"0x02:3\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 4, \"0x02:4\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 5, \"0x02:5\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 6, \"0x02:6\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 7, \"0x02:7\"),\n+                new DataItem(2, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"mastermemberid\") });\n+        g.put(3, new DataItem[] { new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"dhwpresent\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"controltype\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"coolingsupport\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"dhwconfig\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"masterlowoff\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"ch2present\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x03:6\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x03:7\"),\n+                new DataItem(3, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slavememberid\") });\n+        g.put(4, new DataItem[] { new DataItem(4, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"commandcode\"),\n+                new DataItem(4, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"commandresponse\") });\n+        g.put(5, new DataItem[] { new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"servicerequest\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"lockout-reset\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"lowwaterpress\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"gasflamefault\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"airpressfault\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"waterovtemp\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x05:6\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x05:7\"),\n+                new DataItem(5, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"oemfaultcode\") });\n+        g.put(6, new DataItem[] { new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"0x06:l0\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"0x06:l1\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"0x06:l2\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"0x06:l3\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"0x06:l4\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"0x06:l5\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"0x06:l6\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x06:l7\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"0x06:h0\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"0x06:h1\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"0x06:h2\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"0x06:h3\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"0x06:h4\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x06:h5\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x06:h6\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x06:h7\") });\n+        g.put(7, new DataItem[] { new DataItem(7, Msg.Write, ByteType.Both, DataType.Float, 0, \"0x07\") });\n+        g.put(8, new DataItem[] { new DataItem(8, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint2\") });\n+        g.put(9, new DataItem[] { new DataItem(9, Msg.Read, ByteType.Both, DataType.Float, 0, \"overridesetpoint\") });\n+        g.put(10, new DataItem[] { new DataItem(10, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"0x0a:h\"),\n+                new DataItem(10, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"0x0a:l\") });\n+        g.put(11, new DataItem[] { new DataItem(11, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"tspindex\"),\n+                new DataItem(11, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"tspvalue\") });\n+        g.put(12, new DataItem[] { new DataItem(12, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0c:h\"),\n+                new DataItem(12, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0c:l\") });\n+        g.put(13, new DataItem[] { new DataItem(13, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0d:h\"),\n+                new DataItem(13, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0d:l\") });\n+        g.put(14, new DataItem[] { new DataItem(14, Msg.Read, ByteType.LowByte, DataType.Float, 0, \"maxrelmdulevel\") });\n+        g.put(15, new DataItem[] { new DataItem(15, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"maxcapkw\"),\n+                new DataItem(15, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"maxcapprc\") });\n+        g.put(16, new DataItem[] { new DataItem(16, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomsetpoint\") });\n+        g.put(17, new DataItem[] { new DataItem(17, Msg.Read, ByteType.Both, DataType.Float, 0, \"modulevel\") });\n+        g.put(18, new DataItem[] { new DataItem(18, Msg.Read, ByteType.Both, DataType.Float, 0, \"waterpressure\") });\n+        g.put(19, new DataItem[] { new DataItem(19, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwflow\") });\n+        g.put(20, new DataItem[] { new DataItem(20, Msg.ReadWrite, ByteType.Both, DataType.DoWToD, 0, \"dowtod\") });\n+        g.put(21, new DataItem[] { new DataItem(21, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"month\"),\n+                new DataItem(21, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"dom\") });\n+        g.put(22, new DataItem[] { new DataItem(22, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"year\") });\n+        g.put(23, new DataItem[] { new DataItem(23, Msg.Write, ByteType.Both, DataType.Float, 0, \"setpointch2\") });\n+        g.put(24, new DataItem[] { new DataItem(24, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomtemp\") });\n+        g.put(25, new DataItem[] { new DataItem(25, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp\") });\n+        g.put(26, new DataItem[] { new DataItem(26, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwtemp\") });\n+        g.put(27, new DataItem[] { new DataItem(27, Msg.Read, ByteType.Both, DataType.Float, 0, \"outsidetemp\") });\n+        g.put(28, new DataItem[] { new DataItem(28, Msg.Read, ByteType.Both, DataType.Float, 0, \"returntemp\") });\n+        g.put(29, new DataItem[] { new DataItem(29, Msg.Read, ByteType.Both, DataType.Float, 0, \"solstortemp\") });\n+        g.put(30, new DataItem[] { new DataItem(30, Msg.Read, ByteType.Both, DataType.Float, 0, \"solcolltemp\") });\n+        g.put(31, new DataItem[] { new DataItem(31, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp2\") });\n+        g.put(32, new DataItem[] { new DataItem(32, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhw2temp\") });\n+        g.put(33, new DataItem[] { new DataItem(33, Msg.Read, ByteType.Both, DataType.Int16, 0, \"exhausttemp\") });\n+        g.put(48, new DataItem[] { new DataItem(48, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"tdhwsetu\"),\n+                new DataItem(48, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"tdhwsetl\") });\n+        g.put(49, new DataItem[] { new DataItem(49, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"maxchu\"),\n+                new DataItem(49, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"maxchl\") });\n+        g.put(50, new DataItem[] { new DataItem(50, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"otcu\"),\n+                new DataItem(50, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"otcl\") });\n+        g.put(56, new DataItem[] { new DataItem(56, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tdhwset\") });\n+        g.put(57, new DataItem[] { new DataItem(57, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tchmax\") });\n+        g.put(58, new DataItem[] { new DataItem(58, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"otchcratio\") });\n+        g.put(100,\n+                new DataItem[] { new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"rof0\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"rof1\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"rof2\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"rof3\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"rof4\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"rof5\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"rof6\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"rof7\") });\n+        g.put(115, new DataItem[] { new DataItem(115, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"oemdiagcode\") });\n+        g.put(116, new DataItem[] { new DataItem(116, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerstarts\") });\n+        g.put(117, new DataItem[] { new DataItem(117, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumpstarts\") });\n+        g.put(118, new DataItem[] { new DataItem(118, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvstarts\") });\n+        g.put(119,\n+                new DataItem[] { new DataItem(119, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerstarts\") });\n+        g.put(120, new DataItem[] { new DataItem(120, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerhours\") });\n+        g.put(121, new DataItem[] { new DataItem(121, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumphours\") });\n+        g.put(122, new DataItem[] { new DataItem(122, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvhours\") });\n+        g.put(123, new DataItem[] { new DataItem(123, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerhours\") });\n+        g.put(124,\n+                new DataItem[] { new DataItem(124, Msg.Write, ByteType.Both, DataType.Float, 0, \"masterotversion\") });\n+        g.put(125, new DataItem[] { new DataItem(125, Msg.Read, ByteType.Both, DataType.Float, 0, \"slaveotversion\") });\n+        g.put(126,\n+                new DataItem[] {\n+                        new DataItem(126, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"masterproducttype\"),\n+                        new DataItem(126, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"masterproductversion\") });\n+        g.put(127,\n+                new DataItem[] { new DataItem(127, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"slaveproducttype\"),\n+                        new DataItem(127, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slaveproductversion\") });\n \n         return g;\n     }\n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\nindex 31468ae20d..ef38c0af50 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n", "chunk": "@@ -50,139 +50,139 @@ public class DataItemGroup {\n     private static HashMap<Integer, DataItem[]> createDataItemGroups() {\n         HashMap<Integer, DataItem[]> g = new HashMap<Integer, DataItem[]>();\n \n-        g.put(0, new DataItem[] { new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"ch_enable\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"dhw_enable\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"cooling_enabled\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"otc_active\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"ch2_enable\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x00:5\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x00:6\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x00:7\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"fault\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"ch_mode\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"dhw_mode\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"flame\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"cooling\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"ch2E\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"diag\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x00:7\") });\n-        g.put(1, new DataItem[] { new DataItem(1, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint\") });\n-        g.put(2, new DataItem[] { new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 0, \"0x02:0\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 1, \"0x02:1\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 2, \"0x02:2\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 3, \"0x02:3\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 4, \"0x02:4\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 5, \"0x02:5\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 6, \"0x02:6\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 7, \"0x02:7\"),\n-                new DataItem(2, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"mastermemberid\") });\n-        g.put(3, new DataItem[] { new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"dhwpresent\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"controltype\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"coolingsupport\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"dhwconfig\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"masterlowoff\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"ch2present\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x03:6\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x03:7\"),\n-                new DataItem(3, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slavememberid\") });\n-        g.put(4, new DataItem[] { new DataItem(4, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"commandcode\"),\n-                new DataItem(4, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"commandresponse\") });\n-        g.put(5, new DataItem[] { new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"servicerequest\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"lockout-reset\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"lowwaterpress\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"gasflamefault\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"airpressfault\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"waterovtemp\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x05:6\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x05:7\"),\n-                new DataItem(5, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"oemfaultcode\") });\n-        g.put(6, new DataItem[] { new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"0x06:l0\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"0x06:l1\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"0x06:l2\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"0x06:l3\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"0x06:l4\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"0x06:l5\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"0x06:l6\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x06:l7\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"0x06:h0\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"0x06:h1\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"0x06:h2\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"0x06:h3\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"0x06:h4\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x06:h5\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x06:h6\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x06:h7\") });\n-        g.put(7, new DataItem[] { new DataItem(7, Msg.Write, ByteType.Both, DataType.Float, 0, \"0x07\") });\n-        g.put(8, new DataItem[] { new DataItem(8, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint2\") });\n-        g.put(9, new DataItem[] { new DataItem(9, Msg.Read, ByteType.Both, DataType.Float, 0, \"overridesetpoint\") });\n-        g.put(10, new DataItem[] { new DataItem(10, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"0x0a:h\"),\n-                new DataItem(10, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"0x0a:l\") });\n-        g.put(11, new DataItem[] { new DataItem(11, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"tspindex\"),\n-                new DataItem(11, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"tspvalue\") });\n-        g.put(12, new DataItem[] { new DataItem(12, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0c:h\"),\n-                new DataItem(12, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0c:l\") });\n-        g.put(13, new DataItem[] { new DataItem(13, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0d:h\"),\n-                new DataItem(13, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0d:l\") });\n-        g.put(14, new DataItem[] { new DataItem(14, Msg.Read, ByteType.LowByte, DataType.Float, 0, \"maxrelmdulevel\") });\n-        g.put(15, new DataItem[] { new DataItem(15, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"maxcapkw\"),\n-                new DataItem(15, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"maxcapprc\") });\n-        g.put(16, new DataItem[] { new DataItem(16, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomsetpoint\") });\n-        g.put(17, new DataItem[] { new DataItem(17, Msg.Read, ByteType.Both, DataType.Float, 0, \"modulevel\") });\n-        g.put(18, new DataItem[] { new DataItem(18, Msg.Read, ByteType.Both, DataType.Float, 0, \"waterpressure\") });\n-        g.put(19, new DataItem[] { new DataItem(19, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwflow\") });\n-        g.put(20, new DataItem[] { new DataItem(20, Msg.ReadWrite, ByteType.Both, DataType.DoWToD, 0, \"dowtod\") });\n-        g.put(21, new DataItem[] { new DataItem(21, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"month\"),\n-                new DataItem(21, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"dom\") });\n-        g.put(22, new DataItem[] { new DataItem(22, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"year\") });\n-        g.put(23, new DataItem[] { new DataItem(23, Msg.Write, ByteType.Both, DataType.Float, 0, \"setpointch2\") });\n-        g.put(24, new DataItem[] { new DataItem(24, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomtemp\") });\n-        g.put(25, new DataItem[] { new DataItem(25, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp\") });\n-        g.put(26, new DataItem[] { new DataItem(26, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwtemp\") });\n-        g.put(27, new DataItem[] { new DataItem(27, Msg.Read, ByteType.Both, DataType.Float, 0, \"outsidetemp\") });\n-        g.put(28, new DataItem[] { new DataItem(28, Msg.Read, ByteType.Both, DataType.Float, 0, \"returntemp\") });\n-        g.put(29, new DataItem[] { new DataItem(29, Msg.Read, ByteType.Both, DataType.Float, 0, \"solstortemp\") });\n-        g.put(30, new DataItem[] { new DataItem(30, Msg.Read, ByteType.Both, DataType.Float, 0, \"solcolltemp\") });\n-        g.put(31, new DataItem[] { new DataItem(31, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp2\") });\n-        g.put(32, new DataItem[] { new DataItem(32, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhw2temp\") });\n-        g.put(33, new DataItem[] { new DataItem(33, Msg.Read, ByteType.Both, DataType.Int16, 0, \"exhausttemp\") });\n-        g.put(48, new DataItem[] { new DataItem(48, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"tdhwsetu\"),\n-                new DataItem(48, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"tdhwsetl\") });\n-        g.put(49, new DataItem[] { new DataItem(49, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"maxchu\"),\n-                new DataItem(49, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"maxchl\") });\n-        g.put(50, new DataItem[] { new DataItem(50, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"otcu\"),\n-                new DataItem(50, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"otcl\") });\n-        g.put(56, new DataItem[] { new DataItem(56, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tdhwset\") });\n-        g.put(57, new DataItem[] { new DataItem(57, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tchmax\") });\n-        g.put(58, new DataItem[] { new DataItem(58, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"otchcratio\") });\n+        g.put(0, new DataItem[] { new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"ch_enable\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"dhw_enable\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"cooling_enabled\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"otc_active\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"ch2_enable\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x00:5\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x00:6\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x00:7\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"fault\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"ch_mode\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"dhw_mode\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"flame\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"cooling\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"ch2E\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"diag\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x00:7\") });\n+        g.put(1, new DataItem[] { new DataItem(1, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint\") });\n+        g.put(2, new DataItem[] { new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x02:0\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x02:1\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x02:2\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x02:3\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x02:4\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x02:5\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x02:6\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x02:7\"),\n+                new DataItem(2, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"mastermemberid\") });\n+        g.put(3, new DataItem[] { new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"dhwpresent\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"controltype\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"coolingsupport\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"dhwconfig\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"masterlowoff\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"ch2present\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x03:6\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x03:7\"),\n+                new DataItem(3, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slavememberid\") });\n+        g.put(4, new DataItem[] { new DataItem(4, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"commandcode\"),\n+                new DataItem(4, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"commandresponse\") });\n+        g.put(5, new DataItem[] { new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"servicerequest\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"lockout-reset\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"lowwaterpress\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"gasflamefault\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"airpressfault\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"waterovtemp\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x05:6\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x05:7\"),\n+                new DataItem(5, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"oemfaultcode\") });\n+        g.put(6, new DataItem[] { new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"0x06:l0\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"0x06:l1\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"0x06:l2\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"0x06:l3\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"0x06:l4\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"0x06:l5\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"0x06:l6\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x06:l7\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x06:h0\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x06:h1\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x06:h2\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x06:h3\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x06:h4\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x06:h5\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x06:h6\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x06:h7\") });\n+        g.put(7, new DataItem[] { new DataItem(7, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"0x07\") });\n+        g.put(8, new DataItem[] { new DataItem(8, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint2\") });\n+        g.put(9, new DataItem[] { new DataItem(9, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"overridesetpoint\") });\n+        g.put(10, new DataItem[] { new DataItem(10, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0a:h\"),\n+                new DataItem(10, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0a:l\") });\n+        g.put(11, new DataItem[] { new DataItem(11, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"tspindex\"),\n+                new DataItem(11, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"tspvalue\") });\n+        g.put(12, new DataItem[] { new DataItem(12, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0c:h\"),\n+                new DataItem(12, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0c:l\") });\n+        g.put(13, new DataItem[] { new DataItem(13, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0d:h\"),\n+                new DataItem(13, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0d:l\") });\n+        g.put(14, new DataItem[] { new DataItem(14, Msg.READ, ByteType.LOWBYTE, DataType.FLOAT, 0, \"maxrelmdulevel\") });\n+        g.put(15, new DataItem[] { new DataItem(15, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"maxcapkw\"),\n+                new DataItem(15, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"maxcapprc\") });\n+        g.put(16, new DataItem[] { new DataItem(16, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomsetpoint\") });\n+        g.put(17, new DataItem[] { new DataItem(17, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"modulevel\") });\n+        g.put(18, new DataItem[] { new DataItem(18, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"waterpressure\") });\n+        g.put(19, new DataItem[] { new DataItem(19, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwflow\") });\n+        g.put(20, new DataItem[] { new DataItem(20, Msg.READWRITE, ByteType.BOTH, DataType.DOWTOD, 0, \"dowtod\") });\n+        g.put(21, new DataItem[] { new DataItem(21, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"month\"),\n+                new DataItem(21, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"dom\") });\n+        g.put(22, new DataItem[] { new DataItem(22, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"year\") });\n+        g.put(23, new DataItem[] { new DataItem(23, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"setpointch2\") });\n+        g.put(24, new DataItem[] { new DataItem(24, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomtemp\") });\n+        g.put(25, new DataItem[] { new DataItem(25, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp\") });\n+        g.put(26, new DataItem[] { new DataItem(26, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwtemp\") });\n+        g.put(27, new DataItem[] { new DataItem(27, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"outsidetemp\") });\n+        g.put(28, new DataItem[] { new DataItem(28, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"returntemp\") });\n+        g.put(29, new DataItem[] { new DataItem(29, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solstortemp\") });\n+        g.put(30, new DataItem[] { new DataItem(30, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solcolltemp\") });\n+        g.put(31, new DataItem[] { new DataItem(31, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp2\") });\n+        g.put(32, new DataItem[] { new DataItem(32, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhw2temp\") });\n+        g.put(33, new DataItem[] { new DataItem(33, Msg.READ, ByteType.BOTH, DataType.INT16, 0, \"exhausttemp\") });\n+        g.put(48, new DataItem[] { new DataItem(48, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"tdhwsetu\"),\n+                new DataItem(48, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"tdhwsetl\") });\n+        g.put(49, new DataItem[] { new DataItem(49, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"maxchu\"),\n+                new DataItem(49, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"maxchl\") });\n+        g.put(50, new DataItem[] { new DataItem(50, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"otcu\"),\n+                new DataItem(50, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"otcl\") });\n+        g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\") });\n+        g.put(57, new DataItem[] { new DataItem(57, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tchmax\") });\n+        g.put(58, new DataItem[] { new DataItem(58, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"otchcratio\") });\n         g.put(100,\n-                new DataItem[] { new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"rof0\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"rof1\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"rof2\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"rof3\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"rof4\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"rof5\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"rof6\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"rof7\") });\n-        g.put(115, new DataItem[] { new DataItem(115, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"oemdiagcode\") });\n-        g.put(116, new DataItem[] { new DataItem(116, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerstarts\") });\n-        g.put(117, new DataItem[] { new DataItem(117, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumpstarts\") });\n-        g.put(118, new DataItem[] { new DataItem(118, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvstarts\") });\n+                new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n+        g.put(115, new DataItem[] { new DataItem(115, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"oemdiagcode\") });\n+        g.put(116, new DataItem[] { new DataItem(116, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerstarts\") });\n+        g.put(117, new DataItem[] { new DataItem(117, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumpstarts\") });\n+        g.put(118, new DataItem[] { new DataItem(118, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvstarts\") });\n         g.put(119,\n-                new DataItem[] { new DataItem(119, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerstarts\") });\n-        g.put(120, new DataItem[] { new DataItem(120, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerhours\") });\n-        g.put(121, new DataItem[] { new DataItem(121, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumphours\") });\n-        g.put(122, new DataItem[] { new DataItem(122, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvhours\") });\n-        g.put(123, new DataItem[] { new DataItem(123, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerhours\") });\n+                new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n+        g.put(120, new DataItem[] { new DataItem(120, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerhours\") });\n+        g.put(121, new DataItem[] { new DataItem(121, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumphours\") });\n+        g.put(122, new DataItem[] { new DataItem(122, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvhours\") });\n+        g.put(123, new DataItem[] { new DataItem(123, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerhours\") });\n         g.put(124,\n-                new DataItem[] { new DataItem(124, Msg.Write, ByteType.Both, DataType.Float, 0, \"masterotversion\") });\n-        g.put(125, new DataItem[] { new DataItem(125, Msg.Read, ByteType.Both, DataType.Float, 0, \"slaveotversion\") });\n+                new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n+        g.put(125, new DataItem[] { new DataItem(125, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"slaveotversion\") });\n         g.put(126,\n                 new DataItem[] {\n-                        new DataItem(126, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"masterproducttype\"),\n-                        new DataItem(126, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"masterproductversion\") });\n+                        new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n+                        new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n         g.put(127,\n-                new DataItem[] { new DataItem(127, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"slaveproducttype\"),\n-                        new DataItem(127, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slaveproductversion\") });\n+                new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n+                        new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n \n         return g;\n     }\n", "next_change": {"commit": "4a2f1cf990563ba11bb610e479f9cf8569116e56", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\nindex ef38c0af50..ccef9a8a6b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n", "chunk": "@@ -151,38 +129,32 @@ public class DataItemGroup {\n                 new DataItem(49, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"maxchl\") });\n         g.put(50, new DataItem[] { new DataItem(50, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"otcu\"),\n                 new DataItem(50, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"otcl\") });\n-        g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\") });\n+        g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\", SIUnits.CELSIUS) });\n         g.put(57, new DataItem[] { new DataItem(57, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tchmax\") });\n         g.put(58, new DataItem[] { new DataItem(58, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"otchcratio\") });\n-        g.put(100,\n-                new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n+        g.put(100, new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n         g.put(115, new DataItem[] { new DataItem(115, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"oemdiagcode\") });\n         g.put(116, new DataItem[] { new DataItem(116, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerstarts\") });\n         g.put(117, new DataItem[] { new DataItem(117, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumpstarts\") });\n         g.put(118, new DataItem[] { new DataItem(118, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvstarts\") });\n-        g.put(119,\n-                new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n+        g.put(119, new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n         g.put(120, new DataItem[] { new DataItem(120, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerhours\") });\n         g.put(121, new DataItem[] { new DataItem(121, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumphours\") });\n         g.put(122, new DataItem[] { new DataItem(122, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvhours\") });\n         g.put(123, new DataItem[] { new DataItem(123, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerhours\") });\n-        g.put(124,\n-                new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n+        g.put(124, new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n         g.put(125, new DataItem[] { new DataItem(125, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"slaveotversion\") });\n-        g.put(126,\n-                new DataItem[] {\n-                        new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n-                        new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n-        g.put(127,\n-                new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n-                        new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n+        g.put(126, new DataItem[] { new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n+                new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n+        g.put(127, new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n+                new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n \n         return g;\n     }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTczOA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459738", "body": "```suggestion\r\n        Map<Integer, DataItem[]> g = new HashMap<>();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HashMap<Integer, DataItem[]> g = new HashMap<Integer, DataItem[]>();\n          \n          \n            \n                    Map<Integer, DataItem[]> g = new HashMap<>();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\"><span class=\"x x-first x-last\">HashMap</span>&lt;<span class=\"pl-smi\">Integer</span>, <span class=\"pl-k\">DataItem</span>[]&gt;</span> g <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;<span class=\"pl-smi x x-first\">Integer</span><span class=\"x\">, </span><span class=\"pl-k x\">DataItem</span><span class=\"x x-last\">[]</span>&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\"><span class=\"x x-first x-last\">Map</span>&lt;<span class=\"pl-smi\">Integer</span>, <span class=\"pl-k\">DataItem</span>[]&gt;</span> g <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "martinvw", "createdAt": "2020-05-09T06:36:35Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+\n+    public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\n+\n+    private static HashMap<Integer, DataItem[]> createDataItemGroups() {\n+        HashMap<Integer, DataItem[]> g = new HashMap<Integer, DataItem[]>();", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTc3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459777", "bodyText": "Please use the diamond operator, ie replace the second occurrence of the same generic by <> please also check for other occurrences.", "author": "martinvw", "createdAt": "2020-05-09T06:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MjgxMw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426242813", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-05-17T10:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTczOA=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\nindex ccef9a8a6b..31468ae20d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n", "chunk": "@@ -15,146 +15,174 @@ package org.openhab.binding.openthermgateway.internal;\n import java.util.HashMap;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n-import org.eclipse.smarthome.core.library.unit.SIUnits;\n \n /**\n  * @author Arjen Korevaar - Initial contribution\n  */\n @NonNullByDefault\n public class DataItemGroup {\n+    private int id;\n+    private DataItem[] dataItems;\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public void setID(int id) {\n+        this.id = id;\n+    }\n+\n+    public DataItem[] getDataItems() {\n+        return dataItems;\n+    }\n+\n+    public void setDataItem(DataItem[] dataItems) {\n+        this.dataItems = dataItems;\n+    }\n+\n+    public DataItemGroup(int id, DataItem... dataItems) {\n+        this.id = id;\n+        this.dataItems = dataItems;\n+    }\n \n     public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\n \n     private static HashMap<Integer, DataItem[]> createDataItemGroups() {\n         HashMap<Integer, DataItem[]> g = new HashMap<Integer, DataItem[]>();\n \n-        g.put(0, new DataItem[] { new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"ch_enable\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"dhw_enable\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"cooling_enabled\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"otc_active\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"ch2_enable\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x00:5\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x00:6\"),\n-                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x00:7\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"fault\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"ch_mode\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"dhw_mode\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"flame\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"cooling\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"ch2E\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"diag\"),\n-                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x00:7\") });\n-        g.put(1, new DataItem[] { new DataItem(1, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint\", SIUnits.CELSIUS) });\n-        g.put(2, new DataItem[] { new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x02:0\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x02:1\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x02:2\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x02:3\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x02:4\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x02:5\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x02:6\"),\n-                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x02:7\"),\n-                new DataItem(2, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"mastermemberid\") });\n-        g.put(3, new DataItem[] { new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"dhwpresent\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"controltype\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"coolingsupport\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"dhwconfig\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"masterlowoff\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"ch2present\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x03:6\"),\n-                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x03:7\"),\n-                new DataItem(3, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slavememberid\") });\n-        g.put(4, new DataItem[] { new DataItem(4, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"commandcode\"),\n-                new DataItem(4, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"commandresponse\") });\n-        g.put(5, new DataItem[] { new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"servicerequest\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"lockout-reset\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"lowwaterpress\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"gasflamefault\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"airpressfault\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"waterovtemp\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x05:6\"),\n-                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x05:7\"),\n-                new DataItem(5, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"oemfaultcode\") });\n-        g.put(6, new DataItem[] { new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"0x06:l0\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"0x06:l1\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"0x06:l2\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"0x06:l3\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"0x06:l4\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"0x06:l5\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"0x06:l6\"),\n-                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x06:l7\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x06:h0\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x06:h1\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x06:h2\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x06:h3\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x06:h4\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x06:h5\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x06:h6\"),\n-                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x06:h7\") });\n-        g.put(7, new DataItem[] { new DataItem(7, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"0x07\") });\n-        g.put(8, new DataItem[] { new DataItem(8, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint2\") });\n-        g.put(9, new DataItem[] { new DataItem(9, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"overridesetpoint\") });\n-        g.put(10, new DataItem[] { new DataItem(10, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0a:h\"),\n-                new DataItem(10, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0a:l\") });\n-        g.put(11, new DataItem[] { new DataItem(11, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"tspindex\"),\n-                new DataItem(11, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"tspvalue\") });\n-        g.put(12, new DataItem[] { new DataItem(12, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0c:h\"),\n-                new DataItem(12, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0c:l\") });\n-        g.put(13, new DataItem[] { new DataItem(13, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0d:h\"),\n-                new DataItem(13, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0d:l\") });\n-        g.put(14, new DataItem[] { new DataItem(14, Msg.READ, ByteType.LOWBYTE, DataType.FLOAT, 0, \"maxrelmdulevel\") });\n-        g.put(15, new DataItem[] { new DataItem(15, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"maxcapkw\"),\n-                new DataItem(15, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"maxcapprc\") });\n-        g.put(16, new DataItem[] { new DataItem(16, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomsetpoint\", SIUnits.CELSIUS) });\n-        g.put(17, new DataItem[] { new DataItem(17, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"modulevel\") });\n-        g.put(18, new DataItem[] { new DataItem(18, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"waterpressure\") });\n-        g.put(19, new DataItem[] { new DataItem(19, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwflow\") });\n-        g.put(20, new DataItem[] { new DataItem(20, Msg.READWRITE, ByteType.BOTH, DataType.DOWTOD, 0, \"dowtod\") });\n-        g.put(21, new DataItem[] { new DataItem(21, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"month\"),\n-                new DataItem(21, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"dom\") });\n-        g.put(22, new DataItem[] { new DataItem(22, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"year\") });\n-        g.put(23, new DataItem[] { new DataItem(23, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"setpointch2\") });\n-        g.put(24, new DataItem[] { new DataItem(24, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomtemp\", SIUnits.CELSIUS) });\n-        g.put(25, new DataItem[] { new DataItem(25, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp\", SIUnits.CELSIUS) });\n-        g.put(26, new DataItem[] { new DataItem(26, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwtemp\", SIUnits.CELSIUS) });\n-        g.put(27, new DataItem[] { new DataItem(27, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"outsidetemp\", SIUnits.CELSIUS) });\n-        g.put(28, new DataItem[] { new DataItem(28, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"returntemp\", SIUnits.CELSIUS) });\n-        g.put(29, new DataItem[] { new DataItem(29, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solstortemp\") });\n-        g.put(30, new DataItem[] { new DataItem(30, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solcolltemp\") });\n-        g.put(31, new DataItem[] { new DataItem(31, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp2\") });\n-        g.put(32, new DataItem[] { new DataItem(32, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhw2temp\") });\n-        g.put(33, new DataItem[] { new DataItem(33, Msg.READ, ByteType.BOTH, DataType.INT16, 0, \"exhausttemp\") });\n-        g.put(48, new DataItem[] { new DataItem(48, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"tdhwsetu\"),\n-                new DataItem(48, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"tdhwsetl\") });\n-        g.put(49, new DataItem[] { new DataItem(49, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"maxchu\"),\n-                new DataItem(49, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"maxchl\") });\n-        g.put(50, new DataItem[] { new DataItem(50, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"otcu\"),\n-                new DataItem(50, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"otcl\") });\n-        g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\", SIUnits.CELSIUS) });\n-        g.put(57, new DataItem[] { new DataItem(57, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tchmax\") });\n-        g.put(58, new DataItem[] { new DataItem(58, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"otchcratio\") });\n-        g.put(100, new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n-                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n-        g.put(115, new DataItem[] { new DataItem(115, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"oemdiagcode\") });\n-        g.put(116, new DataItem[] { new DataItem(116, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerstarts\") });\n-        g.put(117, new DataItem[] { new DataItem(117, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumpstarts\") });\n-        g.put(118, new DataItem[] { new DataItem(118, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvstarts\") });\n-        g.put(119, new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n-        g.put(120, new DataItem[] { new DataItem(120, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerhours\") });\n-        g.put(121, new DataItem[] { new DataItem(121, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumphours\") });\n-        g.put(122, new DataItem[] { new DataItem(122, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvhours\") });\n-        g.put(123, new DataItem[] { new DataItem(123, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerhours\") });\n-        g.put(124, new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n-        g.put(125, new DataItem[] { new DataItem(125, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"slaveotversion\") });\n-        g.put(126, new DataItem[] { new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n-                new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n-        g.put(127, new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n-                new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n+        g.put(0, new DataItem[] { new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"ch_enable\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"dhw_enable\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"cooling_enabled\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"otc_active\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"ch2_enable\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x00:5\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x00:6\"),\n+                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x00:7\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"fault\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"ch_mode\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"dhw_mode\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"flame\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"cooling\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"ch2E\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"diag\"),\n+                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x00:7\") });\n+        g.put(1, new DataItem[] { new DataItem(1, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint\") });\n+        g.put(2, new DataItem[] { new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 0, \"0x02:0\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 1, \"0x02:1\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 2, \"0x02:2\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 3, \"0x02:3\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 4, \"0x02:4\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 5, \"0x02:5\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 6, \"0x02:6\"),\n+                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 7, \"0x02:7\"),\n+                new DataItem(2, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"mastermemberid\") });\n+        g.put(3, new DataItem[] { new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"dhwpresent\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"controltype\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"coolingsupport\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"dhwconfig\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"masterlowoff\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"ch2present\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x03:6\"),\n+                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x03:7\"),\n+                new DataItem(3, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slavememberid\") });\n+        g.put(4, new DataItem[] { new DataItem(4, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"commandcode\"),\n+                new DataItem(4, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"commandresponse\") });\n+        g.put(5, new DataItem[] { new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"servicerequest\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"lockout-reset\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"lowwaterpress\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"gasflamefault\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"airpressfault\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"waterovtemp\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x05:6\"),\n+                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x05:7\"),\n+                new DataItem(5, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"oemfaultcode\") });\n+        g.put(6, new DataItem[] { new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"0x06:l0\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"0x06:l1\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"0x06:l2\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"0x06:l3\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"0x06:l4\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"0x06:l5\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"0x06:l6\"),\n+                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x06:l7\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"0x06:h0\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"0x06:h1\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"0x06:h2\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"0x06:h3\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"0x06:h4\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x06:h5\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x06:h6\"),\n+                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x06:h7\") });\n+        g.put(7, new DataItem[] { new DataItem(7, Msg.Write, ByteType.Both, DataType.Float, 0, \"0x07\") });\n+        g.put(8, new DataItem[] { new DataItem(8, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint2\") });\n+        g.put(9, new DataItem[] { new DataItem(9, Msg.Read, ByteType.Both, DataType.Float, 0, \"overridesetpoint\") });\n+        g.put(10, new DataItem[] { new DataItem(10, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"0x0a:h\"),\n+                new DataItem(10, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"0x0a:l\") });\n+        g.put(11, new DataItem[] { new DataItem(11, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"tspindex\"),\n+                new DataItem(11, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"tspvalue\") });\n+        g.put(12, new DataItem[] { new DataItem(12, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0c:h\"),\n+                new DataItem(12, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0c:l\") });\n+        g.put(13, new DataItem[] { new DataItem(13, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0d:h\"),\n+                new DataItem(13, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0d:l\") });\n+        g.put(14, new DataItem[] { new DataItem(14, Msg.Read, ByteType.LowByte, DataType.Float, 0, \"maxrelmdulevel\") });\n+        g.put(15, new DataItem[] { new DataItem(15, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"maxcapkw\"),\n+                new DataItem(15, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"maxcapprc\") });\n+        g.put(16, new DataItem[] { new DataItem(16, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomsetpoint\") });\n+        g.put(17, new DataItem[] { new DataItem(17, Msg.Read, ByteType.Both, DataType.Float, 0, \"modulevel\") });\n+        g.put(18, new DataItem[] { new DataItem(18, Msg.Read, ByteType.Both, DataType.Float, 0, \"waterpressure\") });\n+        g.put(19, new DataItem[] { new DataItem(19, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwflow\") });\n+        g.put(20, new DataItem[] { new DataItem(20, Msg.ReadWrite, ByteType.Both, DataType.DoWToD, 0, \"dowtod\") });\n+        g.put(21, new DataItem[] { new DataItem(21, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"month\"),\n+                new DataItem(21, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"dom\") });\n+        g.put(22, new DataItem[] { new DataItem(22, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"year\") });\n+        g.put(23, new DataItem[] { new DataItem(23, Msg.Write, ByteType.Both, DataType.Float, 0, \"setpointch2\") });\n+        g.put(24, new DataItem[] { new DataItem(24, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomtemp\") });\n+        g.put(25, new DataItem[] { new DataItem(25, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp\") });\n+        g.put(26, new DataItem[] { new DataItem(26, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwtemp\") });\n+        g.put(27, new DataItem[] { new DataItem(27, Msg.Read, ByteType.Both, DataType.Float, 0, \"outsidetemp\") });\n+        g.put(28, new DataItem[] { new DataItem(28, Msg.Read, ByteType.Both, DataType.Float, 0, \"returntemp\") });\n+        g.put(29, new DataItem[] { new DataItem(29, Msg.Read, ByteType.Both, DataType.Float, 0, \"solstortemp\") });\n+        g.put(30, new DataItem[] { new DataItem(30, Msg.Read, ByteType.Both, DataType.Float, 0, \"solcolltemp\") });\n+        g.put(31, new DataItem[] { new DataItem(31, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp2\") });\n+        g.put(32, new DataItem[] { new DataItem(32, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhw2temp\") });\n+        g.put(33, new DataItem[] { new DataItem(33, Msg.Read, ByteType.Both, DataType.Int16, 0, \"exhausttemp\") });\n+        g.put(48, new DataItem[] { new DataItem(48, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"tdhwsetu\"),\n+                new DataItem(48, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"tdhwsetl\") });\n+        g.put(49, new DataItem[] { new DataItem(49, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"maxchu\"),\n+                new DataItem(49, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"maxchl\") });\n+        g.put(50, new DataItem[] { new DataItem(50, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"otcu\"),\n+                new DataItem(50, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"otcl\") });\n+        g.put(56, new DataItem[] { new DataItem(56, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tdhwset\") });\n+        g.put(57, new DataItem[] { new DataItem(57, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tchmax\") });\n+        g.put(58, new DataItem[] { new DataItem(58, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"otchcratio\") });\n+        g.put(100,\n+                new DataItem[] { new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"rof0\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"rof1\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"rof2\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"rof3\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"rof4\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"rof5\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"rof6\"),\n+                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"rof7\") });\n+        g.put(115, new DataItem[] { new DataItem(115, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"oemdiagcode\") });\n+        g.put(116, new DataItem[] { new DataItem(116, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerstarts\") });\n+        g.put(117, new DataItem[] { new DataItem(117, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumpstarts\") });\n+        g.put(118, new DataItem[] { new DataItem(118, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvstarts\") });\n+        g.put(119,\n+                new DataItem[] { new DataItem(119, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerstarts\") });\n+        g.put(120, new DataItem[] { new DataItem(120, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerhours\") });\n+        g.put(121, new DataItem[] { new DataItem(121, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumphours\") });\n+        g.put(122, new DataItem[] { new DataItem(122, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvhours\") });\n+        g.put(123, new DataItem[] { new DataItem(123, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerhours\") });\n+        g.put(124,\n+                new DataItem[] { new DataItem(124, Msg.Write, ByteType.Both, DataType.Float, 0, \"masterotversion\") });\n+        g.put(125, new DataItem[] { new DataItem(125, Msg.Read, ByteType.Both, DataType.Float, 0, \"slaveotversion\") });\n+        g.put(126,\n+                new DataItem[] {\n+                        new DataItem(126, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"masterproducttype\"),\n+                        new DataItem(126, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"masterproductversion\") });\n+        g.put(127,\n+                new DataItem[] { new DataItem(127, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"slaveproducttype\"),\n+                        new DataItem(127, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slaveproductversion\") });\n \n         return g;\n     }\n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\nindex 31468ae20d..ef38c0af50 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n", "chunk": "@@ -50,139 +50,139 @@ public class DataItemGroup {\n     private static HashMap<Integer, DataItem[]> createDataItemGroups() {\n         HashMap<Integer, DataItem[]> g = new HashMap<Integer, DataItem[]>();\n \n-        g.put(0, new DataItem[] { new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"ch_enable\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"dhw_enable\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"cooling_enabled\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"otc_active\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"ch2_enable\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x00:5\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x00:6\"),\n-                new DataItem(0, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x00:7\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"fault\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"ch_mode\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"dhw_mode\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"flame\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"cooling\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"ch2E\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"diag\"),\n-                new DataItem(0, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x00:7\") });\n-        g.put(1, new DataItem[] { new DataItem(1, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint\") });\n-        g.put(2, new DataItem[] { new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 0, \"0x02:0\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 1, \"0x02:1\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 2, \"0x02:2\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 3, \"0x02:3\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 4, \"0x02:4\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 5, \"0x02:5\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 6, \"0x02:6\"),\n-                new DataItem(2, Msg.Write, ByteType.HighByte, DataType.Flags, 7, \"0x02:7\"),\n-                new DataItem(2, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"mastermemberid\") });\n-        g.put(3, new DataItem[] { new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"dhwpresent\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"controltype\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"coolingsupport\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"dhwconfig\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"masterlowoff\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"ch2present\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x03:6\"),\n-                new DataItem(3, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x03:7\"),\n-                new DataItem(3, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slavememberid\") });\n-        g.put(4, new DataItem[] { new DataItem(4, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"commandcode\"),\n-                new DataItem(4, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"commandresponse\") });\n-        g.put(5, new DataItem[] { new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"servicerequest\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"lockout-reset\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"lowwaterpress\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"gasflamefault\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"airpressfault\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"waterovtemp\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x05:6\"),\n-                new DataItem(5, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x05:7\"),\n-                new DataItem(5, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"oemfaultcode\") });\n-        g.put(6, new DataItem[] { new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 0, \"0x06:l0\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 1, \"0x06:l1\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 2, \"0x06:l2\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 3, \"0x06:l3\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 4, \"0x06:l4\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 5, \"0x06:l5\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 6, \"0x06:l6\"),\n-                new DataItem(6, Msg.Read, ByteType.LowByte, DataType.Flags, 7, \"0x06:l7\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"0x06:h0\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"0x06:h1\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"0x06:h2\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"0x06:h3\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"0x06:h4\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"0x06:h5\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"0x06:h6\"),\n-                new DataItem(6, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"0x06:h7\") });\n-        g.put(7, new DataItem[] { new DataItem(7, Msg.Write, ByteType.Both, DataType.Float, 0, \"0x07\") });\n-        g.put(8, new DataItem[] { new DataItem(8, Msg.Write, ByteType.Both, DataType.Float, 0, \"controlsetpoint2\") });\n-        g.put(9, new DataItem[] { new DataItem(9, Msg.Read, ByteType.Both, DataType.Float, 0, \"overridesetpoint\") });\n-        g.put(10, new DataItem[] { new DataItem(10, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"0x0a:h\"),\n-                new DataItem(10, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"0x0a:l\") });\n-        g.put(11, new DataItem[] { new DataItem(11, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"tspindex\"),\n-                new DataItem(11, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"tspvalue\") });\n-        g.put(12, new DataItem[] { new DataItem(12, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0c:h\"),\n-                new DataItem(12, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0c:l\") });\n-        g.put(13, new DataItem[] { new DataItem(13, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"0x0d:h\"),\n-                new DataItem(13, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"0x0d:l\") });\n-        g.put(14, new DataItem[] { new DataItem(14, Msg.Read, ByteType.LowByte, DataType.Float, 0, \"maxrelmdulevel\") });\n-        g.put(15, new DataItem[] { new DataItem(15, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"maxcapkw\"),\n-                new DataItem(15, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"maxcapprc\") });\n-        g.put(16, new DataItem[] { new DataItem(16, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomsetpoint\") });\n-        g.put(17, new DataItem[] { new DataItem(17, Msg.Read, ByteType.Both, DataType.Float, 0, \"modulevel\") });\n-        g.put(18, new DataItem[] { new DataItem(18, Msg.Read, ByteType.Both, DataType.Float, 0, \"waterpressure\") });\n-        g.put(19, new DataItem[] { new DataItem(19, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwflow\") });\n-        g.put(20, new DataItem[] { new DataItem(20, Msg.ReadWrite, ByteType.Both, DataType.DoWToD, 0, \"dowtod\") });\n-        g.put(21, new DataItem[] { new DataItem(21, Msg.ReadWrite, ByteType.HighByte, DataType.Uint8, 0, \"month\"),\n-                new DataItem(21, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"dom\") });\n-        g.put(22, new DataItem[] { new DataItem(22, Msg.ReadWrite, ByteType.LowByte, DataType.Uint8, 0, \"year\") });\n-        g.put(23, new DataItem[] { new DataItem(23, Msg.Write, ByteType.Both, DataType.Float, 0, \"setpointch2\") });\n-        g.put(24, new DataItem[] { new DataItem(24, Msg.Write, ByteType.Both, DataType.Float, 0, \"roomtemp\") });\n-        g.put(25, new DataItem[] { new DataItem(25, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp\") });\n-        g.put(26, new DataItem[] { new DataItem(26, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhwtemp\") });\n-        g.put(27, new DataItem[] { new DataItem(27, Msg.Read, ByteType.Both, DataType.Float, 0, \"outsidetemp\") });\n-        g.put(28, new DataItem[] { new DataItem(28, Msg.Read, ByteType.Both, DataType.Float, 0, \"returntemp\") });\n-        g.put(29, new DataItem[] { new DataItem(29, Msg.Read, ByteType.Both, DataType.Float, 0, \"solstortemp\") });\n-        g.put(30, new DataItem[] { new DataItem(30, Msg.Read, ByteType.Both, DataType.Float, 0, \"solcolltemp\") });\n-        g.put(31, new DataItem[] { new DataItem(31, Msg.Read, ByteType.Both, DataType.Float, 0, \"flowtemp2\") });\n-        g.put(32, new DataItem[] { new DataItem(32, Msg.Read, ByteType.Both, DataType.Float, 0, \"dhw2temp\") });\n-        g.put(33, new DataItem[] { new DataItem(33, Msg.Read, ByteType.Both, DataType.Int16, 0, \"exhausttemp\") });\n-        g.put(48, new DataItem[] { new DataItem(48, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"tdhwsetu\"),\n-                new DataItem(48, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"tdhwsetl\") });\n-        g.put(49, new DataItem[] { new DataItem(49, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"maxchu\"),\n-                new DataItem(49, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"maxchl\") });\n-        g.put(50, new DataItem[] { new DataItem(50, Msg.Read, ByteType.HighByte, DataType.Int8, 0, \"otcu\"),\n-                new DataItem(50, Msg.Read, ByteType.LowByte, DataType.Int8, 0, \"otcl\") });\n-        g.put(56, new DataItem[] { new DataItem(56, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tdhwset\") });\n-        g.put(57, new DataItem[] { new DataItem(57, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"tchmax\") });\n-        g.put(58, new DataItem[] { new DataItem(58, Msg.ReadWrite, ByteType.Both, DataType.Float, 0, \"otchcratio\") });\n+        g.put(0, new DataItem[] { new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"ch_enable\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"dhw_enable\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"cooling_enabled\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"otc_active\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"ch2_enable\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x00:5\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x00:6\"),\n+                new DataItem(0, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x00:7\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"fault\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"ch_mode\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"dhw_mode\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"flame\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"cooling\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"ch2E\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"diag\"),\n+                new DataItem(0, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x00:7\") });\n+        g.put(1, new DataItem[] { new DataItem(1, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint\") });\n+        g.put(2, new DataItem[] { new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x02:0\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x02:1\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x02:2\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x02:3\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x02:4\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x02:5\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x02:6\"),\n+                new DataItem(2, Msg.WRITE, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x02:7\"),\n+                new DataItem(2, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"mastermemberid\") });\n+        g.put(3, new DataItem[] { new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"dhwpresent\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"controltype\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"coolingsupport\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"dhwconfig\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"masterlowoff\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"ch2present\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x03:6\"),\n+                new DataItem(3, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x03:7\"),\n+                new DataItem(3, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slavememberid\") });\n+        g.put(4, new DataItem[] { new DataItem(4, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"commandcode\"),\n+                new DataItem(4, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"commandresponse\") });\n+        g.put(5, new DataItem[] { new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"servicerequest\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"lockout-reset\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"lowwaterpress\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"gasflamefault\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"airpressfault\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"waterovtemp\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x05:6\"),\n+                new DataItem(5, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x05:7\"),\n+                new DataItem(5, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"oemfaultcode\") });\n+        g.put(6, new DataItem[] { new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 0, \"0x06:l0\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 1, \"0x06:l1\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 2, \"0x06:l2\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 3, \"0x06:l3\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 4, \"0x06:l4\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 5, \"0x06:l5\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 6, \"0x06:l6\"),\n+                new DataItem(6, Msg.READ, ByteType.LOWBYTE, DataType.FLAGS, 7, \"0x06:l7\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"0x06:h0\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"0x06:h1\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"0x06:h2\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"0x06:h3\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"0x06:h4\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"0x06:h5\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"0x06:h6\"),\n+                new DataItem(6, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"0x06:h7\") });\n+        g.put(7, new DataItem[] { new DataItem(7, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"0x07\") });\n+        g.put(8, new DataItem[] { new DataItem(8, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"controlsetpoint2\") });\n+        g.put(9, new DataItem[] { new DataItem(9, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"overridesetpoint\") });\n+        g.put(10, new DataItem[] { new DataItem(10, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0a:h\"),\n+                new DataItem(10, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0a:l\") });\n+        g.put(11, new DataItem[] { new DataItem(11, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"tspindex\"),\n+                new DataItem(11, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"tspvalue\") });\n+        g.put(12, new DataItem[] { new DataItem(12, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0c:h\"),\n+                new DataItem(12, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0c:l\") });\n+        g.put(13, new DataItem[] { new DataItem(13, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"0x0d:h\"),\n+                new DataItem(13, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"0x0d:l\") });\n+        g.put(14, new DataItem[] { new DataItem(14, Msg.READ, ByteType.LOWBYTE, DataType.FLOAT, 0, \"maxrelmdulevel\") });\n+        g.put(15, new DataItem[] { new DataItem(15, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"maxcapkw\"),\n+                new DataItem(15, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"maxcapprc\") });\n+        g.put(16, new DataItem[] { new DataItem(16, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomsetpoint\") });\n+        g.put(17, new DataItem[] { new DataItem(17, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"modulevel\") });\n+        g.put(18, new DataItem[] { new DataItem(18, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"waterpressure\") });\n+        g.put(19, new DataItem[] { new DataItem(19, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwflow\") });\n+        g.put(20, new DataItem[] { new DataItem(20, Msg.READWRITE, ByteType.BOTH, DataType.DOWTOD, 0, \"dowtod\") });\n+        g.put(21, new DataItem[] { new DataItem(21, Msg.READWRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"month\"),\n+                new DataItem(21, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"dom\") });\n+        g.put(22, new DataItem[] { new DataItem(22, Msg.READWRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"year\") });\n+        g.put(23, new DataItem[] { new DataItem(23, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"setpointch2\") });\n+        g.put(24, new DataItem[] { new DataItem(24, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"roomtemp\") });\n+        g.put(25, new DataItem[] { new DataItem(25, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp\") });\n+        g.put(26, new DataItem[] { new DataItem(26, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhwtemp\") });\n+        g.put(27, new DataItem[] { new DataItem(27, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"outsidetemp\") });\n+        g.put(28, new DataItem[] { new DataItem(28, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"returntemp\") });\n+        g.put(29, new DataItem[] { new DataItem(29, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solstortemp\") });\n+        g.put(30, new DataItem[] { new DataItem(30, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"solcolltemp\") });\n+        g.put(31, new DataItem[] { new DataItem(31, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"flowtemp2\") });\n+        g.put(32, new DataItem[] { new DataItem(32, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"dhw2temp\") });\n+        g.put(33, new DataItem[] { new DataItem(33, Msg.READ, ByteType.BOTH, DataType.INT16, 0, \"exhausttemp\") });\n+        g.put(48, new DataItem[] { new DataItem(48, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"tdhwsetu\"),\n+                new DataItem(48, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"tdhwsetl\") });\n+        g.put(49, new DataItem[] { new DataItem(49, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"maxchu\"),\n+                new DataItem(49, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"maxchl\") });\n+        g.put(50, new DataItem[] { new DataItem(50, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"otcu\"),\n+                new DataItem(50, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"otcl\") });\n+        g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\") });\n+        g.put(57, new DataItem[] { new DataItem(57, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tchmax\") });\n+        g.put(58, new DataItem[] { new DataItem(58, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"otchcratio\") });\n         g.put(100,\n-                new DataItem[] { new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 0, \"rof0\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 1, \"rof1\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 2, \"rof2\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 3, \"rof3\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 4, \"rof4\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 5, \"rof5\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 6, \"rof6\"),\n-                        new DataItem(100, Msg.Read, ByteType.HighByte, DataType.Flags, 7, \"rof7\") });\n-        g.put(115, new DataItem[] { new DataItem(115, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"oemdiagcode\") });\n-        g.put(116, new DataItem[] { new DataItem(116, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerstarts\") });\n-        g.put(117, new DataItem[] { new DataItem(117, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumpstarts\") });\n-        g.put(118, new DataItem[] { new DataItem(118, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvstarts\") });\n+                new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n+                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n+        g.put(115, new DataItem[] { new DataItem(115, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"oemdiagcode\") });\n+        g.put(116, new DataItem[] { new DataItem(116, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerstarts\") });\n+        g.put(117, new DataItem[] { new DataItem(117, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumpstarts\") });\n+        g.put(118, new DataItem[] { new DataItem(118, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvstarts\") });\n         g.put(119,\n-                new DataItem[] { new DataItem(119, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerstarts\") });\n-        g.put(120, new DataItem[] { new DataItem(120, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"burnerhours\") });\n-        g.put(121, new DataItem[] { new DataItem(121, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"chpumphours\") });\n-        g.put(122, new DataItem[] { new DataItem(122, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwpvhours\") });\n-        g.put(123, new DataItem[] { new DataItem(123, Msg.Read, ByteType.Both, DataType.Uint16, 0, \"dhwburnerhours\") });\n+                new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n+        g.put(120, new DataItem[] { new DataItem(120, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerhours\") });\n+        g.put(121, new DataItem[] { new DataItem(121, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumphours\") });\n+        g.put(122, new DataItem[] { new DataItem(122, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvhours\") });\n+        g.put(123, new DataItem[] { new DataItem(123, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerhours\") });\n         g.put(124,\n-                new DataItem[] { new DataItem(124, Msg.Write, ByteType.Both, DataType.Float, 0, \"masterotversion\") });\n-        g.put(125, new DataItem[] { new DataItem(125, Msg.Read, ByteType.Both, DataType.Float, 0, \"slaveotversion\") });\n+                new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n+        g.put(125, new DataItem[] { new DataItem(125, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"slaveotversion\") });\n         g.put(126,\n                 new DataItem[] {\n-                        new DataItem(126, Msg.Write, ByteType.HighByte, DataType.Uint8, 0, \"masterproducttype\"),\n-                        new DataItem(126, Msg.Write, ByteType.LowByte, DataType.Uint8, 0, \"masterproductversion\") });\n+                        new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n+                        new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n         g.put(127,\n-                new DataItem[] { new DataItem(127, Msg.Read, ByteType.HighByte, DataType.Uint8, 0, \"slaveproducttype\"),\n-                        new DataItem(127, Msg.Read, ByteType.LowByte, DataType.Uint8, 0, \"slaveproductversion\") });\n+                new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n+                        new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n \n         return g;\n     }\n", "next_change": {"commit": "4a2f1cf990563ba11bb610e479f9cf8569116e56", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\nindex ef38c0af50..ccef9a8a6b 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java\n", "chunk": "@@ -151,38 +129,32 @@ public class DataItemGroup {\n                 new DataItem(49, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"maxchl\") });\n         g.put(50, new DataItem[] { new DataItem(50, Msg.READ, ByteType.HIGHBYTE, DataType.INT8, 0, \"otcu\"),\n                 new DataItem(50, Msg.READ, ByteType.LOWBYTE, DataType.INT8, 0, \"otcl\") });\n-        g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\") });\n+        g.put(56, new DataItem[] { new DataItem(56, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tdhwset\", SIUnits.CELSIUS) });\n         g.put(57, new DataItem[] { new DataItem(57, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"tchmax\") });\n         g.put(58, new DataItem[] { new DataItem(58, Msg.READWRITE, ByteType.BOTH, DataType.FLOAT, 0, \"otchcratio\") });\n-        g.put(100,\n-                new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n-                        new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n+        g.put(100, new DataItem[] { new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 0, \"rof0\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 1, \"rof1\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 2, \"rof2\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 3, \"rof3\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 4, \"rof4\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 5, \"rof5\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 6, \"rof6\"),\n+                new DataItem(100, Msg.READ, ByteType.HIGHBYTE, DataType.FLAGS, 7, \"rof7\") });\n         g.put(115, new DataItem[] { new DataItem(115, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"oemdiagcode\") });\n         g.put(116, new DataItem[] { new DataItem(116, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerstarts\") });\n         g.put(117, new DataItem[] { new DataItem(117, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumpstarts\") });\n         g.put(118, new DataItem[] { new DataItem(118, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvstarts\") });\n-        g.put(119,\n-                new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n+        g.put(119, new DataItem[] { new DataItem(119, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerstarts\") });\n         g.put(120, new DataItem[] { new DataItem(120, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"burnerhours\") });\n         g.put(121, new DataItem[] { new DataItem(121, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"chpumphours\") });\n         g.put(122, new DataItem[] { new DataItem(122, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwpvhours\") });\n         g.put(123, new DataItem[] { new DataItem(123, Msg.READ, ByteType.BOTH, DataType.UINT16, 0, \"dhwburnerhours\") });\n-        g.put(124,\n-                new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n+        g.put(124, new DataItem[] { new DataItem(124, Msg.WRITE, ByteType.BOTH, DataType.FLOAT, 0, \"masterotversion\") });\n         g.put(125, new DataItem[] { new DataItem(125, Msg.READ, ByteType.BOTH, DataType.FLOAT, 0, \"slaveotversion\") });\n-        g.put(126,\n-                new DataItem[] {\n-                        new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n-                        new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n-        g.put(127,\n-                new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n-                        new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n+        g.put(126, new DataItem[] { new DataItem(126, Msg.WRITE, ByteType.HIGHBYTE, DataType.UINT8, 0, \"masterproducttype\"),\n+                new DataItem(126, Msg.WRITE, ByteType.LOWBYTE, DataType.UINT8, 0, \"masterproductversion\") });\n+        g.put(127, new DataItem[] { new DataItem(127, Msg.READ, ByteType.HIGHBYTE, DataType.UINT8, 0, \"slaveproducttype\"),\n+                new DataItem(127, Msg.READ, ByteType.LOWBYTE, DataType.UINT8, 0, \"slaveproductversion\") });\n \n         return g;\n     }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTgxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459815", "body": "Please check for other occurrences", "bodyText": "Please check for other occurrences", "bodyHTML": "<p dir=\"auto\">Please check for other occurrences</p>", "author": "martinvw", "createdAt": "2020-05-09T06:37:42Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MjgzMg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426242832", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-05-17T10:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 6cf7f4566b..f5b40a317c 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -22,8 +22,6 @@ import org.eclipse.jdt.annotation.Nullable;\n  */\n @NonNullByDefault\n public class GatewayCommand {\n-    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n-\n     private String code;\n     private String validationSet;\n     private String message;\n", "next_change": {"commit": "37e483f0f41134d570904cf9b8da312f76faf2fb", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex f5b40a317c..4cd2a7dfb2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -22,6 +22,8 @@ import org.eclipse.jdt.annotation.Nullable;\n  */\n @NonNullByDefault\n public class GatewayCommand {\n+    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n+\n     private String code;\n     private String validationSet;\n     private String message;\n", "next_change": {"commit": "aa2be59b68ac09304a41aa72882ca2ff15e28129", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 4cd2a7dfb2..ba254294ac 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -22,7 +23,7 @@ import org.eclipse.jdt.annotation.Nullable;\n  */\n @NonNullByDefault\n public class GatewayCommand {\n-    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n+    private static final Map<String, @Nullable String> supportedCommands = getSupportedCommands();\n \n     private String code;\n     private String validationSet;\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTg3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459875", "body": "Consider marking these fields `final`", "bodyText": "Consider marking these fields final", "bodyHTML": "<p dir=\"auto\">Consider marking these fields <code>final</code></p>", "author": "martinvw", "createdAt": "2020-05-09T06:38:28Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n+\n+    private String code;", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 6cf7f4566b..f5b40a317c 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -22,8 +22,6 @@ import org.eclipse.jdt.annotation.Nullable;\n  */\n @NonNullByDefault\n public class GatewayCommand {\n-    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n-\n     private String code;\n     private String validationSet;\n     private String message;\n", "next_change": {"commit": "37e483f0f41134d570904cf9b8da312f76faf2fb", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex f5b40a317c..4cd2a7dfb2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -22,6 +22,8 @@ import org.eclipse.jdt.annotation.Nullable;\n  */\n @NonNullByDefault\n public class GatewayCommand {\n+    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n+\n     private String code;\n     private String validationSet;\n     private String message;\n", "next_change": {"commit": "aa2be59b68ac09304a41aa72882ca2ff15e28129", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\nindex 4cd2a7dfb2..ba254294ac 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java\n", "chunk": "@@ -22,7 +23,7 @@ import org.eclipse.jdt.annotation.Nullable;\n  */\n @NonNullByDefault\n public class GatewayCommand {\n-    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n+    private static final Map<String, @Nullable String> supportedCommands = getSupportedCommands();\n \n     private String code;\n     private String validationSet;\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTkwMg==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459902", "body": "Please check others", "bodyText": "Please check others", "bodyHTML": "<p dir=\"auto\">Please check others</p>", "author": "martinvw", "createdAt": "2020-05-09T06:38:53Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Message {\n+    /*\n+     * The code field is not part of OpenTherm specification, but added by OpenTherm Gateway.\n+     * It can be any of the following:\n+     *\n+     * T: Message received from the thermostat\n+     * B: Message received from the boiler\n+     * R: Request sent to the boiler\n+     * A: Response returned to the thermostat\n+     * E: Parity or stop bit error\n+     */\n+\n+    private String code;", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36f8a910cccfa07c24bd2fe36fc529bde9432502", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\nindex b2ff2dd69d..73d5aa1e5e 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\n", "chunk": "@@ -30,7 +35,6 @@ public class Message {\n      * A: Response returned to the thermostat\n      * E: Parity or stop bit error\n      */\n-\n     private String code;\n     private MessageType messageType;\n     private int id;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDAyMA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422460020", "body": "If this part of the code is used often it might make sense to compile a pattern once (and store as a static field) and re-use this every time, see also https://stackoverflow.com/a/2469275/3656774", "bodyText": "If this part of the code is used often it might make sense to compile a pattern once (and store as a static field) and re-use this every time, see also https://stackoverflow.com/a/2469275/3656774", "bodyHTML": "<p dir=\"auto\">If this part of the code is used often it might make sense to compile a pattern once (and store as a static field) and re-use this every time, see also <a href=\"https://stackoverflow.com/a/2469275/3656774\" rel=\"nofollow\">https://stackoverflow.com/a/2469275/3656774</a></p>", "author": "martinvw", "createdAt": "2020-05-09T06:40:45Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Message {\n+    /*\n+     * The code field is not part of OpenTherm specification, but added by OpenTherm Gateway.\n+     * It can be any of the following:\n+     *\n+     * T: Message received from the thermostat\n+     * B: Message received from the boiler\n+     * R: Request sent to the boiler\n+     * A: Response returned to the thermostat\n+     * E: Parity or stop bit error\n+     */\n+\n+    private String code;\n+    private MessageType messageType;\n+    private int id;\n+    private String data;\n+\n+    public String getCode() {\n+        return this.code;\n+    }\n+\n+    public MessageType getMessageType() {\n+        return messageType;\n+    }\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public @Nullable String getData(ByteType byteType) {\n+        if (this.data.length() == 4) {\n+            switch (byteType) {\n+                case HIGHBYTE:\n+                    return this.data.substring(0, 2);\n+                case LOWBYTE:\n+                    return this.data.substring(2, 4);\n+                case BOTH:\n+                    return this.data;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean getBit(ByteType byteType, int pos) {\n+        @Nullable String data = getData(byteType);\n+\n+        if (data != null) {\n+            // First parse the hex value to an integer\n+            int parsed = Integer.parseInt(data, 16);\n+\n+            // Then right shift it pos positions so that the required bit is at the front\n+            // and then apply a bitmask of 00000001 (1)\n+            return ((parsed >> pos) & 1) == 1;\n+        }\n+\n+        return false;\n+    }\n+\n+    public int getUInt(ByteType byteType) {\n+        @Nullable String data = getData(byteType);\n+\n+        if (data != null) {\n+            return Integer.parseInt(data, 16);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public int getInt(ByteType byteType) {\n+        @Nullable String data = getData(byteType);\n+\n+        if (data != null) {\n+            return parseSignedInteger(data);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public float getFloat() {\n+        // f8.8, two's complement\n+        @Nullable String data = getData(ByteType.BOTH);\n+\n+        if (data != null) {\n+            long value = Long.parseLong(data, 16);\n+\n+            // left padded with zeros\n+            String binary = String.format(\"%16s\", Long.toBinaryString(value)).replace(' ', '0');\n+\n+            if (binary.charAt(0) == '1') {\n+                // negative value\n+\n+                String inverted = invertBinary(binary);\n+\n+                value = Long.parseLong(inverted, 2);\n+                value = value + 1;\n+                value = value * -1;\n+            }\n+\n+            // divide by 2^8 = 256\n+            return (float) value / 256;\n+        }\n+\n+        return 0;\n+    }\n+\n+    public boolean overrides(@Nullable Message other) {\n+        // If the message is a Request sent to the boiler or an Answer returned to the\n+        // thermostat, and it's ID is equal to the previous message, then this is an\n+        // override sent by the OpenTherm Gateway\n+        return other != null && this.getID() == other.getID() && (\"R\".equals(this.getCode()) || \"A\".equals(this.getCode()));\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"%s - %s - %s\", this.code, this.id, this.data);\n+    }\n+\n+    public Message(String code, MessageType messageType, int id, String data) {\n+        this.code = code;\n+        this.messageType = messageType;\n+        this.id = id;\n+        this.data = data;\n+    }\n+\n+    public static @Nullable Message parse(String message) {\n+        if (message.matches(\"[TBRA]{1}[A-F0-9]{8}\")) {", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0Mzc3NA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426243774", "bodyText": "Adjusted", "author": "ArjenKorevaar", "createdAt": "2020-05-17T10:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "36f8a910cccfa07c24bd2fe36fc529bde9432502", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\nindex b2ff2dd69d..73d5aa1e5e 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java\n", "chunk": "@@ -144,9 +148,9 @@ public class Message {\n         this.data = data;\n     }\n \n-    public static @Nullable Message parse(String message) {\n-        if (message.matches(\"[TBRA]{1}[A-F0-9]{8}\")) {\n \n+    public static @Nullable Message parse(String message) {\n+        if (messagePattern.matcher(message).matches()) {\n             // For now, only parse TBRA codes\n             String code = message.substring(0, 1);\n             MessageType messageType = getMessageType(message.substring(1, 3));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDIzMw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422460233", "body": "You could consider the following to make the second boundary more explicit.\r\n\r\n```suggestion\r\n    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5_000;\r\n```\r\n\r\nOr even more explicit, however for such a small value both are optional.\r\n\r\n```suggestion\r\n    private static final int COMMAND_TIMEOUT_MILLISECONDS = TimeUnit.SECONDS.toMillis(5);\r\n```", "bodyText": "You could consider the following to make the second boundary more explicit.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n          \n          \n            \n                private static final int COMMAND_TIMEOUT_MILLISECONDS = 5_000;\n          \n      \n    \n    \n  \n\nOr even more explicit, however for such a small value both are optional.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n          \n          \n            \n                private static final int COMMAND_TIMEOUT_MILLISECONDS = TimeUnit.SECONDS.toMillis(5);", "bodyHTML": "<p dir=\"auto\">You could consider the following to make the second boundary more explicit.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"43\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1\">COMMAND_TIMEOUT_MILLISECONDS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1 x x-first x-last\">5000</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"43\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1\">COMMAND_TIMEOUT_MILLISECONDS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1 x x-first x-last\">5_000</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Or even more explicit, however for such a small value both are optional.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"43\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1\">COMMAND_TIMEOUT_MILLISECONDS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1 x x-first x-last\">5000</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"43\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1\">COMMAND_TIMEOUT_MILLISECONDS</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi x x-first\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x\">SECONDS</span></span><span class=\"pl-k x\">.</span><span class=\"x\">toMillis(</span><span class=\"pl-c1 x\">5</span><span class=\"x x-last\">)</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "martinvw", "createdAt": "2020-05-09T06:43:49Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex b3ca47d4ce..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -39,22 +37,20 @@ import org.slf4j.LoggerFactory;\n  */\n @NonNullByDefault\n public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n-    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n-    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n \n-    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n-\n-    private final OpenThermGatewayCallback callback;\n-    private final String ipaddress;\n-    private final int port;\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n \n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n     private @Nullable PrintWriter writer;\n \n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n-\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -51,6 +54,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private volatile boolean stopping;\n     private boolean connected;\n \n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "f27de9d0833f113c5bdae57c5e9e60d356c6120e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..47c3871317 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -56,6 +53,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n \n     private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n \n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n         this.ipaddress = ipaddress;\n", "next_change": {"commit": "9303b87ad1b3fbf8d599a7133ade75cae35a04f0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 47c3871317..a8e5acf692 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -42,17 +42,17 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n     private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n \n-    private OpenThermGatewayCallback callback;\n-    private String ipaddress;\n-    private int port;\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n \n     private @Nullable PrintWriter writer;\n \n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n-\n     private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n \n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n", "next_change": {"commit": "e493f47fd02a581b2acc5eb23bbb188eaecd196e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex a8e5acf692..6c7e4dd300 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -53,7 +53,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n     private volatile boolean stopping;\n     private boolean connected;\n \n-    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n \n     public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n         this.callback = callback;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDM4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422460386", "body": "You don't have to call `toString` it will be called automatically, but only when the logging-level actually applies.", "bodyText": "You don't have to call toString it will be called automatically, but only when the logging-level actually applies.", "bodyHTML": "<p dir=\"auto\">You don't have to call <code>toString</code> it will be called automatically, but only when the logging-level actually applies.</p>", "author": "martinvw", "createdAt": "2020-05-09T06:46:00Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.print(msg + \"\\r\\n\");\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        long currentTime = System.currentTimeMillis();\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());", "originalCommit": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MDkwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426240905", "bodyText": "I am not calling toString(), but toFullString() which takes care of formatting.", "author": "ArjenKorevaar", "createdAt": "2020-05-17T09:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0Mjg4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426242885", "bodyText": "Yes, but now that method will also be called while debugging is not enabled, the question is whether that is desirable. Leaving it out might make the formatting a little bit more ugly but it will not execute formatting of a String intended for debugging while the system is not being executed with debugging enabled.", "author": "martinvw", "createdAt": "2020-05-17T10:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MDk2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426250963", "bodyText": "removed toFullString()", "author": "ArjenKorevaar", "createdAt": "2020-05-17T11:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex b3ca47d4ce..216bd01a1d 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -149,22 +153,17 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (message.length() > 2 && message.charAt(2) == ':') {\n             String code = message.substring(0, 2);\n             String value = message.substring(3);\n-\n-            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            callback.log(LogLevel.Debug, String.format(\"Received command confirmation: %s: %s\", code, value));\n             pendingCommands.remove(code);\n             return;\n         }\n \n-        long currentTime = System.currentTimeMillis();\n-\n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n-            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n-            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n-\n-            if (currentTime > responseTime && currentTime <= timeoutTime) {\n-                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME) {\n+                callback.log(LogLevel.Debug,\n+                        String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n                 sendCommand(timeAndCommand.getValue());\n-            } else if (currentTime > timeoutTime) {\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n             }\n         }\n", "next_change": {"commit": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -153,17 +153,17 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (message.length() > 2 && message.charAt(2) == ':') {\n             String code = message.substring(0, 2);\n             String value = message.substring(3);\n-            callback.log(LogLevel.Debug, String.format(\"Received command confirmation: %s: %s\", code, value));\n+            callback.log(LogLevel.DEBUG, String.format(\"Received command confirmation: %s: %s\", code, value));\n             pendingCommands.remove(code);\n             return;\n         }\n \n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n-            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME) {\n-                callback.log(LogLevel.Debug,\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+                callback.log(LogLevel.DEBUG,\n                         String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n                 sendCommand(timeAndCommand.getValue());\n-            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT) {\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n             }\n         }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -153,15 +153,15 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         if (message.length() > 2 && message.charAt(2) == ':') {\n             String code = message.substring(0, 2);\n             String value = message.substring(3);\n-            callback.log(LogLevel.DEBUG, String.format(\"Received command confirmation: %s: %s\", code, value));\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n             pendingCommands.remove(code);\n             return;\n         }\n \n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n             if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n-                callback.log(LogLevel.DEBUG,\n-                        String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n", "next_change": {"commit": "45441bad99587a2089460d5faca9a49686f5051c", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..0af14f79e8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -159,11 +155,16 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             return;\n         }\n \n+        long currentTime = System.currentTimeMillis();\n+\n         for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n-            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime < timeoutTime) {\n                 logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n-            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+            } else if (currentTime > timeoutTime) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n             }\n         }\n", "next_change": {"commit": "e493f47fd02a581b2acc5eb23bbb188eaecd196e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 0af14f79e8..6c7e4dd300 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -161,7 +161,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n             long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n \n-            if (currentTime > responseTime && currentTime < timeoutTime) {\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n                 logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (currentTime > timeoutTime) {\n", "next_change": {"commit": "f2f002c5f4d5d6d717c8a9ba7ee71088663e4478", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 6c7e4dd300..dd8d80b574 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -162,7 +162,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n \n             if (currentTime > responseTime && currentTime <= timeoutTime) {\n-                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue());\n                 sendCommand(timeAndCommand.getValue());\n             } else if (currentTime > timeoutTime) {\n                 pendingCommands.remove(timeAndCommand.getValue().getCode());\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -171,11 +171,10 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            callback.log(LogLevel.DEBUG, \"Received message: %s, (unknown)\", message);\n+            logger.debug(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            callback.log(LogLevel.DEBUG, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n-                    msg.getCode(), msg.getMessageType().toString()));\n+            logger.debug(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -171,10 +161,10 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            logger.debug(\"Received message: {}, (unknown)\", message);\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            logger.debug(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -164,7 +170,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             logger.trace(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n+                    msg.getMessageType().toString());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": {"commit": "16a5c94678bf41760ea84ef9232f728c75fb2954", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..82faecded4 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -170,8 +175,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n             logger.trace(\"Received message: {}, (unknown)\", message);\n             return;\n         } else {\n-            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n-                    msg.getMessageType().toString());\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType());\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 216bd01a1d..247bc769b2 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -171,46 +171,44 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n         Message msg = Message.parse(message);\n \n         if (msg == null) {\n-            callback.log(LogLevel.Debug, \"Received message: %s, (unknown)\", message);\n+            callback.log(LogLevel.DEBUG, \"Received message: %s, (unknown)\", message);\n             return;\n         } else {\n-            callback.log(LogLevel.Debug, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n+            callback.log(LogLevel.DEBUG, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n                     msg.getCode(), msg.getMessageType().toString()));\n         }\n \n         if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n \n-            for (int i = 0; i < dataItems.length; i++) {\n-                DataItem dataItem = dataItems[i];\n-\n+            for (DataItem dataItem : dataItems) {\n                 State state = null;\n \n                 switch (dataItem.getDataType()) {\n-                    case Flags:\n-                        state = TypeConverter.toOnOffType(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n                         break;\n-                    case Uint8:\n-                    case Uint16:\n-                        state = TypeConverter.toDecimalType(msg.getUInt(dataItem.getByteType()));\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n                         break;\n-                    case Int8:\n-                    case Int16:\n-                        state = TypeConverter.toDecimalType(msg.getInt(dataItem.getByteType()));\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n                         break;\n-                    case Float:\n-                        state = TypeConverter.toDecimalType(msg.getFloat());\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n                         break;\n-                    case DoWToD:\n+                    case DOWTOD:\n                         break;\n                 }\n-                callback.log(LogLevel.Trace,\n-                        String.format(\"  Data %d: %d %s %s %s\", i, dataItem.getID(), dataItem.getSubject(),\n+                callback.log(LogLevel.DEBUG,\n+                        String.format(\"  Data: %d %s %s %s\", dataItem.getID(), dataItem.getSubject(),\n                                 dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n             }\n         }\n \n-        if (msg.getMessageType() == MessageType.ReadAck || msg.getMessageType() == MessageType.WriteData) {\n+        if (msg.getMessageType() == MessageType.READACK || msg.getMessageType() == MessageType.WRITEDATA) {\n             receiveMessage(msg);\n         }\n     }\n", "next_change": {"commit": "d2e1c958545549a866caa688f123d1fbe5e63a96", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 247bc769b2..2d6f8b204f 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -202,9 +201,9 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                     case DOWTOD:\n                         break;\n                 }\n-                callback.log(LogLevel.DEBUG,\n-                        String.format(\"  Data: %d %s %s %s\", dataItem.getID(), dataItem.getSubject(),\n-                                dataItem.getDataType().toString(), state == null ? \"\" : state.toString()));\n+\n+                logger.debug(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n \n", "next_change": {"commit": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 2d6f8b204f..74f0261915 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -202,7 +192,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         break;\n                 }\n \n-                logger.debug(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n                     dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n", "next_change": {"commit": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 74f0261915..58e6514cd8 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -193,7 +200,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                 }\n \n                 logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n             }\n         }\n \n", "next_change": {"commit": "16a5c94678bf41760ea84ef9232f728c75fb2954", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 58e6514cd8..82faecded4 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -199,8 +203,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                         break;\n                 }\n \n-                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n-                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(), dataItem.getDataType(),\n+                        state == null ? \"\" : state);\n             }\n         }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"oid": "3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "url": "https://github.com/openhab/openhab-addons/commit/3f4ff85ec82f7cd045cbc7afa5ad7d6c7dbceeb0", "message": "Initial contribution\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:43Z", "type": "commit"}, {"oid": "cbfa86beb01e2ed4acd7969cdbf0ea9d7d82f8ef", "url": "https://github.com/openhab/openhab-addons/commit/cbfa86beb01e2ed4acd7969cdbf0ea9d7d82f8ef", "message": "Update parent module version to 2.5.2-SNAPSHOT\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:43Z", "type": "commit"}, {"oid": "0b1ede2a6450cf02d5e64592a847ca3662c3b53c", "url": "https://github.com/openhab/openhab-addons/commit/0b1ede2a6450cf02d5e64592a847ca3662c3b53c", "message": "Added openthermgateway\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:43Z", "type": "commit"}, {"oid": "1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "url": "https://github.com/openhab/openhab-addons/commit/1f7cbc8efe2cbb8c78fd80474ef38769f8032a3d", "message": "Review (#1)\n\n* Each sentence on a new line\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Removed newline added by code formatter\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Every word of label Uppercase\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Changed enums to uppercase\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Changed milliseconds to seconds\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Removed try catch on updating channel\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Changed for to foreach\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Removed public from interface methods\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Removed immediate\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Added MILLISECONDS to time interval statics\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Changed for to foreach\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Typo\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Changed == to equals on string comparison\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Removed TODO\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Changed == \"\" to isEmpty()\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Changed for to foreach\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Removed TypeConverter\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>\n\n* Removed newline after @Nullable\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:43Z", "type": "commit"}, {"oid": "21ba1500b317c036d39b160ba29578d05848a715", "url": "https://github.com/openhab/openhab-addons/commit/21ba1500b317c036d39b160ba29578d05848a715", "message": "Changed List to Set\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:43Z", "type": "commit"}, {"oid": "2dd2016c926678c7d6b858a4347265a7583b36c4", "url": "https://github.com/openhab/openhab-addons/commit/2dd2016c926678c7d6b858a4347265a7583b36c4", "message": "Changed notation to start runnable\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:43Z", "type": "commit"}, {"oid": "bc6b9387555d10202eb34ced0cd35e25564946f2", "url": "https://github.com/openhab/openhab-addons/commit/bc6b9387555d10202eb34ced0cd35e25564946f2", "message": "Removed (some occurences of) catching generic exceptions\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:43Z", "type": "commit"}, {"oid": "99dff96d2e1cf66082bd2067b209abec3cd7af06", "url": "https://github.com/openhab/openhab-addons/commit/99dff96d2e1cf66082bd2067b209abec3cd7af06", "message": "Removed some unused import statements\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:43Z", "type": "commit"}, {"oid": "6003d49c7acd8b937eb8b642417a2512738b94ff", "url": "https://github.com/openhab/openhab-addons/commit/6003d49c7acd8b937eb8b642417a2512738b94ff", "message": "Removed newline from feature.xml\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:44Z", "type": "commit"}, {"oid": "e2e66bb9838bfc21ac4acf458c3b99391651ce63", "url": "https://github.com/openhab/openhab-addons/commit/e2e66bb9838bfc21ac4acf458c3b99391651ce63", "message": "Applies UoM to temperature and pressure channels\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:44Z", "type": "commit"}, {"oid": "5d15bc601f60337e8f81e11c965632495ef8490c", "url": "https://github.com/openhab/openhab-addons/commit/5d15bc601f60337e8f81e11c965632495ef8490c", "message": "Changes to UoM\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:44Z", "type": "commit"}, {"oid": "d2e1c958545549a866caa688f123d1fbe5e63a96", "url": "https://github.com/openhab/openhab-addons/commit/d2e1c958545549a866caa688f123d1fbe5e63a96", "message": "Removed logging callback and let connector log directly\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:44Z", "type": "commit"}, {"oid": "a3a9b8067d301665a627dddb447ceb4e440a1c44", "url": "https://github.com/openhab/openhab-addons/commit/a3a9b8067d301665a627dddb447ceb4e440a1c44", "message": "Added tr-with-resources and removed throwing and catching generic exceptions\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:44Z", "type": "commit"}, {"oid": "7826ccfc22ab7175f0d30ae1df356b3960cf6fd4", "url": "https://github.com/openhab/openhab-addons/commit/7826ccfc22ab7175f0d30ae1df356b3960cf6fd4", "message": "Removed placeholder from logging string\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:44Z", "type": "commit"}, {"oid": "32ed6f49d518d700239461712b3b32ed1b81c86d", "url": "https://github.com/openhab/openhab-addons/commit/32ed6f49d518d700239461712b3b32ed1b81c86d", "message": "Removed unused attributes and setters from DataItem and DataItemGroup\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:44Z", "type": "commit"}, {"oid": "4a2f1cf990563ba11bb610e479f9cf8569116e56", "url": "https://github.com/openhab/openhab-addons/commit/4a2f1cf990563ba11bb610e479f9cf8569116e56", "message": "Formatting\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:44Z", "type": "commit"}, {"oid": "40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "url": "https://github.com/openhab/openhab-addons/commit/40bcd2646c5e8bbd8da7bdfe228eecdc50630c0e", "message": "Changed some log levels\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:44Z", "type": "commit"}, {"oid": "0d25f0d72e398529efc062d193eaedceec95ed96", "url": "https://github.com/openhab/openhab-addons/commit/0d25f0d72e398529efc062d193eaedceec95ed96", "message": "Added explicit call to flush\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:44Z", "type": "commit"}, {"oid": "535f5d1227450b96137c1ceed5d6bd4f373c7592", "url": "https://github.com/openhab/openhab-addons/commit/535f5d1227450b96137c1ceed5d6bd4f373c7592", "message": "Fixed some layout errors\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:44Z", "type": "commit"}, {"oid": "f4d2bfd2fcb3b29dd05b246a2c84bbe1e9f216c8", "url": "https://github.com/openhab/openhab-addons/commit/f4d2bfd2fcb3b29dd05b246a2c84bbe1e9f216c8", "message": "Added description to ThingStatus offline\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:44Z", "type": "commit"}, {"oid": "f27de9d0833f113c5bdae57c5e9e60d356c6120e", "url": "https://github.com/openhab/openhab-addons/commit/f27de9d0833f113c5bdae57c5e9e60d356c6120e", "message": "Moved pendingCommands field to top and made private\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:44Z", "type": "commit"}, {"oid": "940c0985b939261f81c772f677ea829a4b41a83a", "url": "https://github.com/openhab/openhab-addons/commit/940c0985b939261f81c772f677ea829a4b41a83a", "message": "Updated pom to 2.5.3\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:45Z", "type": "commit"}, {"oid": "7d314b59d0c6708fadfd0576aa20eca3cce2e105", "url": "https://github.com/openhab/openhab-addons/commit/7d314b59d0c6708fadfd0576aa20eca3cce2e105", "message": "Named socket listener thread and set to daemon mode\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:45Z", "type": "commit"}, {"oid": "550abf0f6ac5feafd97aba9a916d036e4aa5ead5", "url": "https://github.com/openhab/openhab-addons/commit/550abf0f6ac5feafd97aba9a916d036e4aa5ead5", "message": "Changed info to debug logging, removed synchronized\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:45Z", "type": "commit"}, {"oid": "244fdbfbfefc89cd95747c83c529acf7a1d216aa", "url": "https://github.com/openhab/openhab-addons/commit/244fdbfbfefc89cd95747c83c529acf7a1d216aa", "message": "Updated pom.xml to 2.5.5-SNAPSHOT\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:45Z", "type": "commit"}, {"oid": "9303b87ad1b3fbf8d599a7133ade75cae35a04f0", "url": "https://github.com/openhab/openhab-addons/commit/9303b87ad1b3fbf8d599a7133ade75cae35a04f0", "message": "Made variables final and moved them above non-final\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:45Z", "type": "commit"}, {"oid": "f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "url": "https://github.com/openhab/openhab-addons/commit/f7a9ef7fbfbb0b88ede6d3c8a464b084a66e65e6", "message": "Fixed potential null warnings\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:45Z", "type": "commit"}, {"oid": "37e483f0f41134d570904cf9b8da312f76faf2fb", "url": "https://github.com/openhab/openhab-addons/commit/37e483f0f41134d570904cf9b8da312f76faf2fb", "message": "Moved static field to top of the class\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:45Z", "type": "commit"}, {"oid": "e84b7d1ec8a5b0a782b25f8c3101d85355823c3e", "url": "https://github.com/openhab/openhab-addons/commit/e84b7d1ec8a5b0a782b25f8c3101d85355823c3e", "message": "Return null instead of empty string\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:45Z", "type": "commit"}, {"oid": "45441bad99587a2089460d5faca9a49686f5051c", "url": "https://github.com/openhab/openhab-addons/commit/45441bad99587a2089460d5faca9a49686f5051c", "message": "Changed check on resend and timeout commands\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:46Z", "type": "commit"}, {"oid": "e493f47fd02a581b2acc5eb23bbb188eaecd196e", "url": "https://github.com/openhab/openhab-addons/commit/e493f47fd02a581b2acc5eb23bbb188eaecd196e", "message": "Made pendingCommands hashmap thread-safe\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:46Z", "type": "commit"}, {"oid": "16a5c94678bf41760ea84ef9232f728c75fb2954", "url": "https://github.com/openhab/openhab-addons/commit/16a5c94678bf41760ea84ef9232f728c75fb2954", "message": "Removed explicit calls to toString()\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:46Z", "type": "commit"}, {"oid": "d11097e996d6815e85de94ae28a50a7e61b53386", "url": "https://github.com/openhab/openhab-addons/commit/d11097e996d6815e85de94ae28a50a7e61b53386", "message": "Changed printf() to print()\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:46Z", "type": "commit"}, {"oid": "aa2be59b68ac09304a41aa72882ca2ff15e28129", "url": "https://github.com/openhab/openhab-addons/commit/aa2be59b68ac09304a41aa72882ca2ff15e28129", "message": "Changed to use interface instead of implementation\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:46Z", "type": "commit"}, {"oid": "76d785df55f12efb62d88d8c6971ab54bda4f57e", "url": "https://github.com/openhab/openhab-addons/commit/76d785df55f12efb62d88d8c6971ab54bda4f57e", "message": "Changed readme\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:46Z", "type": "commit"}, {"oid": "36f8a910cccfa07c24bd2fe36fc529bde9432502", "url": "https://github.com/openhab/openhab-addons/commit/36f8a910cccfa07c24bd2fe36fc529bde9432502", "message": "Precompile matching pattern\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:46Z", "type": "commit"}, {"oid": "f7f77d72c7cf2073b87d1122331c5e0ca97dad26", "url": "https://github.com/openhab/openhab-addons/commit/f7f77d72c7cf2073b87d1122331c5e0ca97dad26", "message": "Added JavaDoc\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:46Z", "type": "commit"}, {"oid": "766a0e5159df21696dedf42c4c1f437fd19112e2", "url": "https://github.com/openhab/openhab-addons/commit/766a0e5159df21696dedf42c4c1f437fd19112e2", "message": "Changed OFFLINE to UNKNOWN status upon connecting\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:46Z", "type": "commit"}, {"oid": "f2f002c5f4d5d6d717c8a9ba7ee71088663e4478", "url": "https://github.com/openhab/openhab-addons/commit/f2f002c5f4d5d6d717c8a9ba7ee71088663e4478", "message": "Removed toFullString() to prevent unnecessary calls depending on loglevel\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:44:46Z", "type": "commit"}, {"oid": "b58f2ac460fdeade42b65b3858f15510c3bce7b1", "url": "https://github.com/openhab/openhab-addons/commit/b58f2ac460fdeade42b65b3858f15510c3bce7b1", "message": "Changed parent version to 2.5.6\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T11:46:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MjEwOA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426252108", "body": "This status might not be correct, because it's about the binding status being disconnected instead of the thing being OFFLINE.\r\n\r\nAlso, it is indirectly called from the `dispose` which will also be called when updating configuration, so better leave this one out and replace it by some way to update status when `IOException` are caught.", "bodyText": "This status might not be correct, because it's about the binding status being disconnected instead of the thing being OFFLINE.\nAlso, it is indirectly called from the dispose which will also be called when updating configuration, so better leave this one out and replace it by some way to update status when IOException are caught.", "bodyHTML": "<p dir=\"auto\">This status might not be correct, because it's about the binding status being disconnected instead of the thing being OFFLINE.</p>\n<p dir=\"auto\">Also, it is indirectly called from the <code>dispose</code> which will also be called when updating configuration, so better leave this one out and replace it by some way to update status when <code>IOException</code> are caught.</p>", "author": "martinvw", "createdAt": "2020-05-17T11:50:17Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        connecting = false;\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");", "originalCommit": "b58f2ac460fdeade42b65b3858f15510c3bce7b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3NDEzOA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426274138", "bodyText": "Removed Thing status update, added it to the IOException catch.", "author": "ArjenKorevaar", "createdAt": "2020-05-17T15:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MjEwOA=="}], "type": "inlineReview", "revised_code": {"commit": "8822e46eb435f89bdd4f1b31fdf79d2a7227cb42", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 1a1e88ccdc..aaa6ba3552 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -133,8 +133,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n         connecting = false;\n \n-        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n-\n         // retry connection if disconnect is not explicitly requested\n         if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n             scheduler.schedule(() -> {\n", "next_change": {"commit": "eb1bb1de0e9d893eb1c7a23660f3d56a9eec9849", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex aaa6ba3552..1a1e88ccdc 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -133,6 +133,8 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n         connecting = false;\n \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n         // retry connection if disconnect is not explicitly requested\n         if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n             scheduler.schedule(() -> {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MjQwMw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426252403", "body": "This is location where can you be sure that the device is ONLINE, if you are unsure that the status is currently sufficiently synchronized this could be the location to mark the thing ONLINE.", "bodyText": "This is location where can you be sure that the device is ONLINE, if you are unsure that the status is currently sufficiently synchronized this could be the location to mark the thing ONLINE.", "bodyHTML": "<p dir=\"auto\">This is location where can you be sure that the device is ONLINE, if you are unsure that the status is currently sufficiently synchronized this could be the location to mark the thing ONLINE.</p>", "author": "martinvw", "createdAt": "2020-05-17T11:53:33Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        connecting = false;\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (conn != null && !connecting && !conn.isConnected()) {\n+                    connect();\n+                }\n+            }, conf.connectionRetryInterval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {", "originalCommit": "b58f2ac460fdeade42b65b3858f15510c3bce7b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3NDAzMA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426274030", "bodyText": "Not every incoming message causes the receiveMessage callback function to be called. But ok, if it does get called, the Thing is clearly online. Added a Thing status update.", "author": "ArjenKorevaar", "createdAt": "2020-05-17T15:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MjQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "8822e46eb435f89bdd4f1b31fdf79d2a7227cb42", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex 1a1e88ccdc..aaa6ba3552 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -147,6 +145,8 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n+        updateStatus(ThingStatus.ONLINE);\n+\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": {"commit": "eb1bb1de0e9d893eb1c7a23660f3d56a9eec9849", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\nindex aaa6ba3552..1a1e88ccdc 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java\n", "chunk": "@@ -145,8 +147,6 @@ public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThe\n \n     @Override\n     public void receiveMessage(Message message) {\n-        updateStatus(ThingStatus.ONLINE);\n-\n         if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n             DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1Njk5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426256995", "body": "I would expect an update of status from this `IOException` because now disconnect is called but the proper details of the problem are lacking. See also: `https://www.openhab.org/docs/developer/guidelines.html#f-logging`\r\n\r\n> In general bindings should NOT log to error/warn if e.g. connections are dropped - this is considered to be an external problem and from a system perspective to be a normal and expected situation. The correct way to inform users about such events is to update the Thing status accordingl", "bodyText": "I would expect an update of status from this IOException because now disconnect is called but the proper details of the problem are lacking. See also: https://www.openhab.org/docs/developer/guidelines.html#f-logging\n\nIn general bindings should NOT log to error/warn if e.g. connections are dropped - this is considered to be an external problem and from a system perspective to be a normal and expected situation. The correct way to inform users about such events is to update the Thing status accordingl", "bodyHTML": "<p dir=\"auto\">I would expect an update of status from this <code>IOException</code> because now disconnect is called but the proper details of the problem are lacking. See also: <code>https://www.openhab.org/docs/developer/guidelines.html#f-logging</code></p>\n<blockquote>\n<p dir=\"auto\">In general bindings should NOT log to error/warn if e.g. connections are dropped - this is considered to be an external problem and from a system perspective to be a normal and expected situation. The correct way to inform users about such events is to update the Thing status accordingl</p>\n</blockquote>", "author": "martinvw", "createdAt": "2020-05-17T12:41:44Z", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {", "originalCommit": "b58f2ac460fdeade42b65b3858f15510c3bce7b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3NDA5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426274091", "bodyText": "Added calling callback on IOException to update Thing status, and changed logging to debug.", "author": "ArjenKorevaar", "createdAt": "2020-05-17T15:31:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1Njk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3NjQ5OA==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426276498", "bodyText": "You removed the status update from the disconnected callback so the thing will not go OFFLINE when this exception is caught.\nAlso, there is no context/message provided to the user, it would make sense to have a dedicated handler which passes the exception so that the message can be include when setting the thing status OFFLINE with a COMMUNICATION_ERROR. These statuses are described in the documentation.\nI can also imagine that the host is completely wrong (empty?) or the configuration is wrong in other ways, bindings should set the status than to CONFIGURATION_ERROR. I suppose in the old code the binding would just set it to OFFLINE without context or warning for the user which is not that user-friendly. Given it seems to be the first time that we mention this it can be a follow-up PR whenever have you time.\nBTW: follow-up PR's of the original contributor do not require a second reviewer.", "author": "martinvw", "createdAt": "2020-05-17T15:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1Njk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MjE0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426282145", "bodyText": "Reverted last commit. I should probably redesign the Thing status code, though it's unclear as to what this status should represent. If it's about being able to communicate with the OpenTherm gateway device, then having a connection or not should be enough to indicate an online or offline status. Configuration errors are not that relevant, because the host is a required field and whether the host is valid or not is not something the binding would hardly be able to verify. It is either able to connect or not. The hostname itself can be anything, a simple hostname, an ip address, an fqdn.", "author": "ArjenKorevaar", "createdAt": "2020-05-17T16:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1Njk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MjY3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426282677", "bodyText": "@ArjenKorevaar shall we keep the status handling for a separate PR?", "author": "martinvw", "createdAt": "2020-05-17T17:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1Njk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8822e46eb435f89bdd4f1b31fdf79d2a7227cb42", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex dd8d80b574..34909db000 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -109,7 +109,8 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                 callback.disconnected();\n             }\n         } catch (IOException ex) {\n-            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+            logger.debug(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+            callback.disconnected();\n         }\n     }\n \n", "next_change": {"commit": "eb1bb1de0e9d893eb1c7a23660f3d56a9eec9849", "changed_code": [{"header": "diff --git a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\nindex 34909db000..dd8d80b574 100644\n--- a/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n+++ b/bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java\n", "chunk": "@@ -109,8 +109,7 @@ public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnecto\n                 callback.disconnected();\n             }\n         } catch (IOException ex) {\n-            logger.debug(\"Unable to connect to the OpenTherm Gateway.\", ex);\n-            callback.disconnected();\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n         }\n     }\n \n", "next_change": null}]}}]}}, {"oid": "8822e46eb435f89bdd4f1b31fdf79d2a7227cb42", "url": "https://github.com/openhab/openhab-addons/commit/8822e46eb435f89bdd4f1b31fdf79d2a7227cb42", "message": "Changed Thing status updates\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T15:28:49Z", "type": "commit"}, {"oid": "eb1bb1de0e9d893eb1c7a23660f3d56a9eec9849", "url": "https://github.com/openhab/openhab-addons/commit/eb1bb1de0e9d893eb1c7a23660f3d56a9eec9849", "message": "Revert \"Changed Thing status updates\"\n\nThis reverts commit 8822e46eb435f89bdd4f1b31fdf79d2a7227cb42.\n\nSigned-off-by: Arjen Korevaar <a.korevaar@mephix.com>", "committedDate": "2020-05-17T16:41:09Z", "type": "commit"}]}