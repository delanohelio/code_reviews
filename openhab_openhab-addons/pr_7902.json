{"pr_number": 7902, "pr_title": "[homematic] Solves stability issues with HmIP devices", "pr_author": "MHerbst", "pr_createdAt": "2020-06-12T08:37:08Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7902", "timeline": [{"oid": "9a4a5e406588376b20d89d468481ed40c9c699b7", "url": "https://github.com/openhab/openhab-addons/commit/9a4a5e406588376b20d89d468481ed40c9c699b7", "message": "Solves stability issues with HmIP devices\n\nThe CCU gets unresponsive if several HmIP devices are installed and\nalways \"non-blocking\" requests are used. By reducing the use to what is\nabsolutely necessary, the problem can be avoide.\n\nFixes #7762\n\nSigned-off-by: Martin Herbst <develop@mherbst.de>", "committedDate": "2020-06-12T08:35:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMTA0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7902#discussion_r439521048", "body": "Is it absolutely necessary to catch `Exception` here?", "bodyText": "Is it absolutely necessary to catch Exception here?", "bodyHTML": "<p dir=\"auto\">Is it absolutely necessary to catch <code>Exception</code> here?</p>", "author": "J-N-K", "createdAt": "2020-06-12T16:25:34Z", "path": "bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/XmlRpcClient.java", "diffHunk": "@@ -68,57 +69,67 @@ protected String getRpcCallbackUrl() {\n         if (logger.isTraceEnabled()) {\n             logger.trace(\"Client XmlRpcRequest (port {}):\\n{}\", port, request);\n         }\n-        return sendMessage(port, request, 0);\n+        Exception reason = null;\n+        for (int rpcRetryCounter = 1; rpcRetryCounter <= MAX_RPC_RETRY; rpcRetryCounter++) {\n+            try {\n+                byte[] response = send(port, request);\n+                Object[] data = new XmlRpcResponse(new ByteArrayInputStream(response), config.getEncoding())\n+                        .getResponseData();\n+                return new RpcResponseParser(request).parse(data);\n+            } catch (UnknownRpcFailureException | UnknownParameterSetException ex) {\n+                throw ex;\n+            } catch (Exception ex) {", "originalCommit": "9a4a5e406588376b20d89d468481ed40c9c699b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMjg1NA==", "url": "https://github.com/openhab/openhab-addons/pull/7902#discussion_r439522854", "body": "Please do not throw `Exception`, either define your own like `HomematicException extends Exception` or use something like `IllegalStateException` (or what fits best) and catch only that one. The problem with catchin `Exception` is that it hides programming errors like NPE.", "bodyText": "Please do not throw Exception, either define your own like HomematicException extends Exception or use something like IllegalStateException (or what fits best) and catch only that one. The problem with catchin Exception is that it hides programming errors like NPE.", "bodyHTML": "<p dir=\"auto\">Please do not throw <code>Exception</code>, either define your own like <code>HomematicException extends Exception</code> or use something like <code>IllegalStateException</code> (or what fits best) and catch only that one. The problem with catchin <code>Exception</code> is that it hides programming errors like NPE.</p>", "author": "J-N-K", "createdAt": "2020-06-12T16:29:09Z", "path": "bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/XmlRpcClient.java", "diffHunk": "@@ -68,57 +69,67 @@ protected String getRpcCallbackUrl() {\n         if (logger.isTraceEnabled()) {\n             logger.trace(\"Client XmlRpcRequest (port {}):\\n{}\", port, request);\n         }\n-        return sendMessage(port, request, 0);\n+        Exception reason = null;\n+        for (int rpcRetryCounter = 1; rpcRetryCounter <= MAX_RPC_RETRY; rpcRetryCounter++) {\n+            try {\n+                byte[] response = send(port, request);\n+                Object[] data = new XmlRpcResponse(new ByteArrayInputStream(response), config.getEncoding())\n+                        .getResponseData();\n+                return new RpcResponseParser(request).parse(data);\n+            } catch (UnknownRpcFailureException | UnknownParameterSetException ex) {\n+                throw ex;\n+            } catch (Exception ex) {\n+                reason = ex;\n+                if (\"init\".equals(request.getMethodName())) { // no retries for \"init\" request\n+                    break;\n+                }\n+                logger.debug(\"XmlRpcMessage failure, sending message again {}/{}\", rpcRetryCounter, MAX_RPC_RETRY);\n+            }\n+        }\n+        throw new IOException(reason.getMessage(), reason); // can't be null here because logic in for loop\n     }\n \n-    /**\n-     * Sends the message, retries if there was an error.\n-     */\n-    private synchronized Object[] sendMessage(int port, RpcRequest<String> request, int rpcRetryCounter)\n-            throws IOException {\n+    private byte[] send(int port, RpcRequest<String> request) throws Exception {", "originalCommit": "9a4a5e406588376b20d89d468481ed40c9c699b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MTkyMw==", "url": "https://github.com/openhab/openhab-addons/pull/7902#discussion_r439561923", "bodyText": "I agree with you regarding the catching and throwing of \"Exception\", but I tried to stay close to the original implementation and Jetty throws a lot of different exceptions. Will try to get rid of the Exception.", "author": "MHerbst", "createdAt": "2020-06-12T17:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMjg1NA=="}], "type": "inlineReview"}, {"oid": "713cf01e6c5fe20a689f858b5b2d4e6ecd015d24", "url": "https://github.com/openhab/openhab-addons/commit/713cf01e6c5fe20a689f858b5b2d4e6ecd015d24", "message": "Modified exception handling\n\nSigned-off-by: Martin Herbst <develop@mherbst.de>", "committedDate": "2020-06-12T18:30:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NTcyMw==", "url": "https://github.com/openhab/openhab-addons/pull/7902#discussion_r439585723", "body": "```suggestion\r\n                    resp.abort(new IOException());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                resp.abort(new Exception());\n          \n          \n            \n                                resp.abort(new IOException());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    resp<span class=\"pl-k\">.</span>abort(<span class=\"pl-k\">new</span> <span class=\"pl-smi x x-first x-last\">Exception</span>());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    resp<span class=\"pl-k\">.</span>abort(<span class=\"pl-k\">new</span> <span class=\"pl-smi x x-first x-last\">IOException</span>());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-06-12T18:42:39Z", "path": "bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/XmlRpcClient.java", "diffHunk": "@@ -78,57 +84,64 @@ protected String getRpcCallbackUrl() {\n                 return new RpcResponseParser(request).parse(data);\n             } catch (UnknownRpcFailureException | UnknownParameterSetException ex) {\n                 throw ex;\n-            } catch (Exception ex) {\n+            } catch (SAXException | ParserConfigurationException ex) {\n+                throw new IOException(ex);\n+            } catch (IOException ex) {\n                 reason = ex;\n                 if (\"init\".equals(request.getMethodName())) { // no retries for \"init\" request\n                     break;\n                 }\n-                logger.debug(\"XmlRpcMessage failure, sending message again {}/{}\", rpcRetryCounter, MAX_RPC_RETRY);\n+                logger.debug(\"XmlRpcMessage failed, sending message again {}/{}\", rpcRetryCounter, MAX_RPC_RETRY);\n             }\n         }\n-        throw new IOException(reason.getMessage(), reason); // can't be null here because logic in for loop\n+        throw reason;\n     }\n \n-    private byte[] send(int port, RpcRequest<String> request) throws Exception {\n+    private byte[] send(int port, RpcRequest<String> request) throws IOException {\n         byte[] ret = new byte[0];\n-        BytesContentProvider content = new BytesContentProvider(request.createMessage().getBytes(config.getEncoding()));\n-        String url = String.format(\"http://%s:%s\", config.getGatewayAddress(), port);\n-        if (port == config.getGroupPort()) {\n-            url += \"/groups\";\n-        }\n-        Request req = httpClient.POST(url).content(content).timeout(config.getTimeout(), TimeUnit.SECONDS)\n-                .header(HttpHeader.CONTENT_TYPE, \"text/xml;charset=\" + config.getEncoding());\n         try {\n-            ret = req.send().getContent();\n-        } catch (IllegalArgumentException e) { // Returned buffer too large\n-            logger.info(\"Blocking XmlRpcRequest failed: {}, trying non-blocking request\", e.getMessage());\n-            InputStreamResponseListener respListener = new InputStreamResponseListener();\n-            req.send(respListener);\n-            Response resp = respListener.get(config.getTimeout(), TimeUnit.SECONDS);\n-            ByteArrayOutputStream respData = new ByteArrayOutputStream(RESP_BUFFER_SIZE);\n+            BytesContentProvider content = new BytesContentProvider(\n+                    request.createMessage().getBytes(config.getEncoding()));\n+            String url = String.format(\"http://%s:%s\", config.getGatewayAddress(), port);\n+            if (port == config.getGroupPort()) {\n+                url += \"/groups\";\n+            }\n+            Request req = httpClient.POST(url).content(content).timeout(config.getTimeout(), TimeUnit.SECONDS)\n+                    .header(HttpHeader.CONTENT_TYPE, \"text/xml;charset=\" + config.getEncoding());\n+            try {\n+                ret = req.send().getContent();\n+            } catch (IllegalArgumentException e) { // Returned buffer too large\n+                logger.info(\"Blocking XmlRpcRequest failed: {}, trying non-blocking request\", e.getMessage());\n+                InputStreamResponseListener respListener = new InputStreamResponseListener();\n+                req.send(respListener);\n+                Response resp = respListener.get(config.getTimeout(), TimeUnit.SECONDS);\n+                ByteArrayOutputStream respData = new ByteArrayOutputStream(RESP_BUFFER_SIZE);\n \n-            int httpStatus = resp.getStatus();\n-            if (httpStatus == HttpStatus.OK_200) {\n-                byte[] recvBuffer = new byte[RESP_BUFFER_SIZE];\n-                try (InputStream input = respListener.getInputStream()) {\n-                    while (true) {\n-                        int read = input.read(recvBuffer);\n-                        if (read == -1) {\n-                            break;\n+                int httpStatus = resp.getStatus();\n+                if (httpStatus == HttpStatus.OK_200) {\n+                    byte[] recvBuffer = new byte[RESP_BUFFER_SIZE];\n+                    try (InputStream input = respListener.getInputStream()) {\n+                        while (true) {\n+                            int read = input.read(recvBuffer);\n+                            if (read == -1) {\n+                                break;\n+                            }\n+                            respData.write(recvBuffer, 0, read);\n                         }\n-                        respData.write(recvBuffer, 0, read);\n+                        ret = respData.toByteArray();\n                     }\n-                    ret = respData.toByteArray();\n+                } else {\n+                    logger.warn(\"Non-blocking XmlRpcRequest failed, status code: {} / request: {}\", httpStatus,\n+                            request);\n+                    resp.abort(new Exception());", "originalCommit": "713cf01e6c5fe20a689f858b5b2d4e6ecd015d24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4OTA2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7902#discussion_r439589065", "bodyText": "Done", "author": "MHerbst", "createdAt": "2020-06-12T18:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NTcyMw=="}], "type": "inlineReview"}, {"oid": "47de837cf16d85ea6d5765ec8b15f8a82cdef743", "url": "https://github.com/openhab/openhab-addons/commit/47de837cf16d85ea6d5765ec8b15f8a82cdef743", "message": "Changed type of exception\n\nSigned-off-by: Martin Herbst <develop@mherbst.de>", "committedDate": "2020-06-12T18:49:44Z", "type": "commit"}]}