{"pr_number": 7068, "pr_title": "[goecharger] Initial contribution", "pr_author": "SamuelBrucksch", "pr_createdAt": "2020-02-26T16:40:31Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7068", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3Nzg3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387877872", "body": "```suggestion\r\n@NonNullByDefault\r\npublic class GoEChargerBindingConstants {\r\n```\r\n\r\nplease also annotate the other classes", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GoEChargerBindingConstants {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public class GoEChargerBindingConstants {\n          \n      \n    \n    \n  \n\nplease also annotate the other classes", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"25\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k x x-first\">public</span><span class=\"x\"> </span><span class=\"pl-k x\">class</span><span class=\"x\"> </span><span class=\"pl-en x\">GoEChargerBindingConstants</span><span class=\"x x-last\"> {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"25\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k x x-first x-last\">@NonNullByDefault</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"26\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">GoEChargerBindingConstants</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">please also annotate the other classes</p>", "author": "J-N-K", "createdAt": "2020-03-04T19:15:58Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerBindingConstants.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link GoEChargerBindingConstants} class defines common constants, which\n+ * are used across the whole binding.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerBindingConstants {", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3ODI5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387878291", "body": "No need to add that here. Add it in the configuration class.", "bodyText": "No need to add that here. Add it in the configuration class.", "bodyHTML": "<p dir=\"auto\">No need to add that here. Add it in the configuration class.</p>", "author": "J-N-K", "createdAt": "2020-03-04T19:16:40Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerBindingConstants.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link GoEChargerBindingConstants} class defines common constants, which\n+ * are used across the whole binding.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerBindingConstants {\n+\n+    private static final String BINDING_ID = \"goecharger\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_GOE = new ThingTypeUID(BINDING_ID, \"goe\");\n+\n+    // List of all Channel ids\n+    public static final String MAX_AMPERE       = \"maxAmpere\";\n+    public static final String ACCESS_STATE       = \"accessState\";\n+    public static final String PWM_SIGNAL       = \"pwmSignal\";\n+    public static final String ERROR            = \"error\";\n+    public static final String VOLTAGE_L1       = \"voltageL1\";\n+    public static final String VOLTAGE_L2       = \"voltageL2\";\n+    public static final String VOLTAGE_L3       = \"voltageL3\";\n+    public static final String CURRENT_L1       = \"currentL1\";\n+    public static final String CURRENT_L2       = \"currentL2\";\n+    public static final String CURRENT_L3       = \"currentL3\";\n+    public static final String POWER_L1         = \"powerL1\";\n+    public static final String POWER_L2         = \"powerL2\";\n+    public static final String POWER_L3         = \"powerL3\";\n+    public static final String ALLOW_CHARGING   = \"allowCharging\";\n+    public static final String CABLE_ENCODING   = \"cableEncoding\";\n+    public static final String PHASES           = \"phases\";\n+    public static final String TEMPERATURE      = \"temperature\";\n+    public static final String SESSION_CHARGE_CONSUMPTION = \"sessionChargeConsumption\";\n+    public static final String SESSION_CHARGE_CONSUMPTION_LIMIT = \"sessionChargeConsumptionLimit\";\n+    public static final String TOTAL_CONSUMPTION = \"totalConsumption\";\n+    public static final String FIRMWARE         = \"firmware\";\n+\n+    // default values\n+    public static final int DEFAULT_REFRESH_INTERVAL = 5;", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3ODQwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387878400", "body": "```suggestion\r\n    public Integer refreshInterval = 5;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Integer refreshInterval;\n          \n          \n            \n                public Integer refreshInterval = 5;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Integer</span> refreshInterval;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Integer</span> refreshInterval<span class=\"x x-first\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">5</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-04T19:16:53Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+/**\n+ * The {@link GoEChargerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerConfiguration {\n+\n+    public String ip;\n+    public Integer refreshInterval;", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3ODcxNg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387878716", "body": "```suggestion\r\n@NonNullByDefault\r\npublic class GoEChargerHandlerFactory extends BaseThingHandlerFactory {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GoEChargerHandlerFactory extends BaseThingHandlerFactory {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public class GoEChargerHandlerFactory extends BaseThingHandlerFactory {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"42\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k x x-first\">public</span><span class=\"x\"> </span><span class=\"pl-k x\">class</span><span class=\"x\"> </span><span class=\"pl-en x\">GoEChargerHandlerFactory</span><span class=\"x\"> </span><span class=\"pl-k x\">extends</span><span class=\"x\"> </span><span class=\"pl-e x\">BaseThingHandlerFactory</span><span class=\"x x-last\"> {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"42\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k x x-first x-last\">@NonNullByDefault</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"43\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">GoEChargerHandlerFactory</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">BaseThingHandlerFactory</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-04T19:17:27Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerHandlerFactory.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.goecharger.internal.handler.GoEChargerHandler;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link GoEChargerHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@Component(configurationPid = \"binding.goecharger\", service = ThingHandlerFactory.class)\n+public class GoEChargerHandlerFactory extends BaseThingHandlerFactory {", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3ODkxMA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387878910", "body": "```suggestion\r\n@NonNullByDefault\r\npublic class GoEChargerConfiguration {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GoEChargerConfiguration {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public class GoEChargerConfiguration {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"24\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k x x-first\">public</span><span class=\"x\"> </span><span class=\"pl-k x\">class</span><span class=\"x\"> </span><span class=\"pl-en x\">GoEChargerConfiguration</span><span class=\"x x-last\"> {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"24\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k x x-first x-last\">@NonNullByDefault</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"25\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">GoEChargerConfiguration</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-04T19:17:46Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+/**\n+ * The {@link GoEChargerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerConfiguration {", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3OTE2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387879167", "body": "Either provide a default or add `@Nullable`.", "bodyText": "Either provide a default or add @Nullable.", "bodyHTML": "<p dir=\"auto\">Either provide a default or add <code>@Nullable</code>.</p>", "author": "J-N-K", "createdAt": "2020-03-04T19:18:14Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+/**\n+ * The {@link GoEChargerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerConfiguration {\n+\n+    public String ip;", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MjUyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387882520", "body": "```suggestion\r\n    public State getValue(String channelId) {\r\n```\r\n\r\nThat makes it easier to use UoM", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Object getValue(String channelId) {\n          \n          \n            \n                public State getValue(String channelId) {\n          \n      \n    \n    \n  \n\nThat makes it easier to use UoM", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi x x-first x-last\">Object</span> getValue(<span class=\"pl-smi\">String</span> channelId) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi x x-first x-last\">State</span> getValue(<span class=\"pl-smi\">String</span> channelId) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">That makes it easier to use UoM</p>", "author": "J-N-K", "createdAt": "2020-03-04T19:24:22Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NDExMg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387884112", "body": "```suggestion\r\n                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmarthomeUnits.AMPERE);\r\n```\r\n\r\nI only added some examples. For additional information check https://www.openhab.org/docs/concepts/units-of-measurement.html", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return goeResponse.getMaxChargeAmps();\n          \n          \n            \n                                return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmarthomeUnits.AMPERE);\n          \n      \n    \n    \n  \n\nI only added some examples. For additional information check https://www.openhab.org/docs/concepts/units-of-measurement.html", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">return</span> goeResponse<span class=\"pl-k\">.</span>getMaxChargeAmps();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">return</span> <span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-k x\">QuantityType&lt;&gt;</span><span class=\"x x-last\">(</span>goeResponse<span class=\"pl-k\">.</span>getMaxChargeAmps(<span class=\"x x-first\">), </span><span class=\"pl-smi x\">SmarthomeUnits</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">AMPERE</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">I only added some examples. For additional information check <a href=\"https://www.openhab.org/docs/concepts/units-of-measurement.html\" rel=\"nofollow\">https://www.openhab.org/docs/concepts/units-of-measurement.html</a></p>", "author": "J-N-K", "createdAt": "2020-03-04T19:27:15Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NTM5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387885393", "body": "```suggestion\r\n                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return goeResponse.getTemperature();\n          \n          \n            \n                                return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">return</span> goeResponse<span class=\"pl-k\">.</span>getTemperature();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">return</span> <span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-k x\">QuantityType&lt;&gt;</span><span class=\"x x-last\">(</span>goeResponse<span class=\"pl-k\">.</span>getTemperature(<span class=\"x x-first\">), </span><span class=\"pl-smi x\">SIUnits</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">CELSIUS</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-04T19:29:31Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODEwNA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387888104", "body": "```suggestion\r\n        State value = getValue(channelId);\r\n```\r\n\r\nand remove the conversion below", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Object value = getValue(channelId);\n          \n          \n            \n                    State value = getValue(channelId);\n          \n      \n    \n    \n  \n\nand remove the conversion below", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi x x-first x-last\">Object</span> value <span class=\"pl-k\">=</span> getValue(channelId);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi x x-first x-last\">State</span> value <span class=\"pl-k\">=</span> getValue(channelId);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">and remove the conversion below</p>", "author": "J-N-K", "createdAt": "2020-03-04T19:34:17Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODQyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387888424", "body": "Not needed", "bodyText": "Not needed", "bodyHTML": "<p dir=\"auto\">Not needed</p>", "author": "J-N-K", "createdAt": "2020-03-04T19:34:54Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODgxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387888811", "body": "The framework makes sure that this is non-null if you set the paramater to required", "bodyText": "The framework makes sure that this is non-null if you set the paramater to required", "bodyHTML": "<p dir=\"auto\">The framework makes sure that this is non-null if you set the paramater to required</p>", "author": "J-N-K", "createdAt": "2020-03-04T19:35:37Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NjE2MA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387896160", "body": "Please use our shared HttpClient \"jetty\". You get it in the `HandlerFactory` as injected service (see e.g. the darksky binding) and for usage https://github.com/openhab/openhab-addons/blob/a99e2096b1c9afd8a00fb9aac763a3754be98d71/bundles/org.openhab.binding.darksky/src/main/java/org/openhab/binding/darksky/internal/connection/DarkSkyConnection.java#L179", "bodyText": "Please use our shared HttpClient \"jetty\". You get it in the HandlerFactory as injected service (see e.g. the darksky binding) and for usage \n  \n    \n      openhab-addons/bundles/org.openhab.binding.darksky/src/main/java/org/openhab/binding/darksky/internal/connection/DarkSkyConnection.java\n    \n    \n         Line 179\n      in\n      a99e209\n    \n    \n    \n    \n\n        \n          \n           ContentResponse contentResponse = httpClient.newRequest(url).method(GET).timeout(10, TimeUnit.SECONDS)", "bodyHTML": "<p dir=\"auto\">Please use our shared HttpClient \"jetty\". You get it in the <code>HandlerFactory</code> as injected service (see e.g. the darksky binding) and for usage <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/openhab/openhab-addons/blob/a99e2096b1c9afd8a00fb9aac763a3754be98d71/bundles/org.openhab.binding.darksky/src/main/java/org/openhab/binding/darksky/internal/connection/DarkSkyConnection.java#L179\">openhab-addons/bundles/org.openhab.binding.darksky/src/main/java/org/openhab/binding/darksky/internal/connection/DarkSkyConnection.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 179\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/openhab/openhab-addons/commit/a99e2096b1c9afd8a00fb9aac763a3754be98d71\">a99e209</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L179\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"179\"></td>\n          <td id=\"LC179\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-smi\">ContentResponse</span> contentResponse <span class=\"pl-k\">=</span> httpClient<span class=\"pl-k\">.</span>newRequest(url)<span class=\"pl-k\">.</span>method(<span class=\"pl-c1\">GET</span>)<span class=\"pl-k\">.</span>timeout(<span class=\"pl-c1\">10</span>, <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>SECONDS</span>) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "J-N-K", "createdAt": "2020-03-04T19:48:55Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NjkyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387896927", "body": "Please make this `Runnable` a method (e.g. `private void refresh() {...}`) and reference that below", "bodyText": "Please make this Runnable a method (e.g. private void refresh() {...}) and reference that below", "bodyHTML": "<p dir=\"auto\">Please make this <code>Runnable</code> a method (e.g. <code>private void refresh() {...}</code>) and reference that below</p>", "author": "J-N-K", "createdAt": "2020-03-04T19:50:19Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NzQ0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387897441", "body": "```suggestion\r\n                    getThing().getChannels().forEach(channel -> updateChannel(channel.getUID().getId()));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                for (Channel channel : getThing().getChannels()) {\n          \n          \n            \n                                    updateChannel(channel.getUID().getId());\n          \n          \n            \n                                }\n          \n          \n            \n                                getThing().getChannels().forEach(channel -> updateChannel(channel.getUID().getId()));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Channel</span> channel <span class=\"pl-k\">:</span> getThing()<span class=\"pl-k\">.</span>getChannels()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        updateChannel(channel<span class=\"pl-k\">.</span>getUID()<span class=\"pl-k\">.</span>getId());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    getThing()<span class=\"pl-k\">.</span>getChannels()<span class=\"pl-k\">.</span>forEach(channel <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> updateChannel(channel<span class=\"pl-k\">.</span>getUID()<span class=\"pl-k\">.</span>getId()));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-04T19:51:14Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NzcxOA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387897718", "body": "Please do not catch `Exception`. What exceptions do you expect here?", "bodyText": "Please do not catch Exception. What exceptions do you expect here?", "bodyHTML": "<p dir=\"auto\">Please do not catch <code>Exception</code>. What exceptions do you expect here?</p>", "author": "J-N-K", "createdAt": "2020-03-04T19:51:38Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1NTM2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387955366", "bodyText": "guess this was a leftover from copying it somewhere else", "author": "SamuelBrucksch", "createdAt": "2020-03-04T21:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NzcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5Nzg0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387897840", "body": "```suggestion\r\n                    logger.warn(\"Exception occurred during execution: {}\", e.getMessage(), e);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n          \n          \n            \n                                logger.warn(\"Exception occurred during execution: {}\", e.getMessage(), e);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Exception occurred during execution: {}<span class=\"pl-pds\">\"</span></span>, e<span class=\"pl-k\">.</span>getMessage(), e);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    logger<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">warn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Exception occurred during execution: {}<span class=\"pl-pds\">\"</span></span>, e<span class=\"pl-k\">.</span>getMessage(), e);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-04T19:51:49Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5ODIyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387898221", "body": "not needed if you set the default in the configuration class", "bodyText": "not needed if you set the default in the configuration class", "bodyHTML": "<p dir=\"auto\">not needed if you set the default in the configuration class</p>", "author": "J-N-K", "createdAt": "2020-03-04T19:52:30Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n+                }\n+            };\n+\n+            GoEChargerConfiguration config = getConfigAs(GoEChargerConfiguration.class);\n+            int delay = (config.refreshInterval != null) ? config.refreshInterval.intValue() : DEFAULT_REFRESH_INTERVAL;", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5ODM5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387898397", "body": "```suggestion\r\n            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, delay, TimeUnit.SECONDS);\r\n```\r\n\r\nafter you move the runnable to a method", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, delay, TimeUnit.SECONDS);\n          \n          \n            \n                        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, delay, TimeUnit.SECONDS);\n          \n      \n    \n    \n  \n\nafter you move the runnable to a method", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            refreshJob <span class=\"pl-k\">=</span> scheduler<span class=\"pl-k\">.</span>scheduleWithFixedDelay(<span class=\"x x-first x-last\">runnable</span>, <span class=\"pl-c1\">0</span>, delay, <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>SECONDS</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            refreshJob <span class=\"pl-k\">=</span> scheduler<span class=\"pl-k\">.</span>scheduleWithFixedDelay(<span class=\"pl-c1 x x-first\">this</span><span class=\"pl-k x\">::</span><span class=\"x x-last\">refresh</span>, <span class=\"pl-c1\">0</span>, delay, <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>SECONDS</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">after you move the runnable to a method</p>", "author": "J-N-K", "createdAt": "2020-03-04T19:52:50Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n+                }\n+            };\n+\n+            GoEChargerConfiguration config = getConfigAs(GoEChargerConfiguration.class);\n+            int delay = (config.refreshInterval != null) ? config.refreshInterval.intValue() : DEFAULT_REFRESH_INTERVAL;\n+            logger.debug(\"Running refresh job with delay {} s\", delay);\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, delay, TimeUnit.SECONDS);", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMTIwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387901209", "body": "```suggestion\r\n        final ScheduledFuture<?> refreshJob = this.refreshJob;\r\n        if (refreshJob != null && !refreshJob.isCancelled()) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (refreshJob != null && !refreshJob.isCancelled()) {\n          \n          \n            \n                    final ScheduledFuture<?> refreshJob = this.refreshJob;\n          \n          \n            \n                    if (refreshJob != null && !refreshJob.isCancelled()) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"352\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k x x-first\">if</span><span class=\"x x-last\"> (</span>refreshJob <span class=\"pl-k x x-first\">!=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">null</span><span class=\"x\"> </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x\"> </span><span class=\"pl-k x\">!</span><span class=\"x\">refreshJob</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isCancelled()) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"352\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k x x-first\">final</span><span class=\"x\"> </span><span class=\"pl-k x\">ScheduledFuture&lt;?&gt;</span><span class=\"x x-last\"> </span>refreshJob <span class=\"pl-k x x-first\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">this</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">refreshJob;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"353\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (refreshJob <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>refreshJob<span class=\"pl-k\">.</span>isCancelled()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-04T19:58:07Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n+                }\n+            };\n+\n+            GoEChargerConfiguration config = getConfigAs(GoEChargerConfiguration.class);\n+            int delay = (config.refreshInterval != null) ? config.refreshInterval.intValue() : DEFAULT_REFRESH_INTERVAL;\n+            logger.debug(\"Running refresh job with delay {} s\", delay);\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, delay, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the Go-E Charger handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMTMxMA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387901310", "body": "```suggestion\r\n            this.refreshJob = null;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        refreshJob = null;\n          \n          \n            \n                        this.refreshJob = null;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            refreshJob <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c1 x x-first\">this</span><span class=\"pl-k x x-last\">.</span>refreshJob <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-04T19:58:17Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n+                }\n+            };\n+\n+            GoEChargerConfiguration config = getConfigAs(GoEChargerConfiguration.class);\n+            int delay = (config.refreshInterval != null) ? config.refreshInterval.intValue() : DEFAULT_REFRESH_INTERVAL;\n+            logger.debug(\"Running refresh job with delay {} s\", delay);\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, delay, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the Go-E Charger handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;", "originalCommit": "35f5255052b21ad4743da85577740e3288ff2f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2a23ffe853f0159da82d70892d4cae65866fd03a", "url": "https://github.com/openhab/openhab-addons/commit/2a23ffe853f0159da82d70892d4cae65866fd03a", "message": "fix updating presence channel (#7050)\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:39Z", "type": "commit"}, {"oid": "01956b0e7bc11b50afcdf8d074f43f4fc59613e2", "url": "https://github.com/openhab/openhab-addons/commit/01956b0e7bc11b50afcdf8d074f43f4fc59613e2", "message": "[nanoleaf] Fixed: Http 400 handling / NPE in logging. Reduced logging. (#7058)\n\n* [nanoleaf] Fixed: Http 400 handling / NPE in logging. Reduced logging.\r\n\r\nSigned-off-by: Stefan H\u00f6hn <stefan@andreaundstefanhoehn.de>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:39Z", "type": "commit"}, {"oid": "aa8beba4c0c864ff2a0573b59ee0ee5e276e0abf", "url": "https://github.com/openhab/openhab-addons/commit/aa8beba4c0c864ff2a0573b59ee0ee5e276e0abf", "message": "[enocean] Added support for Smoke Detectors (#6929) (#6930)\n\n* [enocean] Added support for Smoke Detectors (#6929)\r\n\r\n * Implemented EEP F6_05_02 and D2_14_30\r\n * Added new thing MultiFunctionSmokeDetector\r\n * Added new smoke detector specific channels\r\n\r\nFixes #6929\r\n\r\nSigned-off-by: Daniel Weber <uni@fruggy.de>\r\n\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:39Z", "type": "commit"}, {"oid": "704a4165f3f4832055ca5c9e56ab75ef7c33a026", "url": "https://github.com/openhab/openhab-addons/commit/704a4165f3f4832055ca5c9e56ab75ef7c33a026", "message": "[satel] Event log changes (#7027)\n\nSigned-off-by: Krzysztof Goworek <krzysztof.goworek@gmail.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:39Z", "type": "commit"}, {"oid": "611d36483307d76772146c37fd950325cff4186c", "url": "https://github.com/openhab/openhab-addons/commit/611d36483307d76772146c37fd950325cff4186c", "message": "[velux] Initial contribution (#2531)\n\nInitial contribution\r\n\r\nSigned-off-by: Guenther Schreiner <guenther.schreiner@smile.de>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:39Z", "type": "commit"}, {"oid": "7186dfdc7f242ecebd40a4950879ba399f57b373", "url": "https://github.com/openhab/openhab-addons/commit/7186dfdc7f242ecebd40a4950879ba399f57b373", "message": "[mqtt.homeassistant] Bugfix in ComponentLight (#7033)\n\n* Fixed bugs in ComponentLight\r\n\r\nSigned-off-by: Matt Hoekstra <matthew.e.hoekstra@gmail.com>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:39Z", "type": "commit"}, {"oid": "13c187c8c9c646c0d81db03f5512635ba37fbb08", "url": "https://github.com/openhab/openhab-addons/commit/13c187c8c9c646c0d81db03f5512635ba37fbb08", "message": "[bluetooth.bluez] Fix for bluez discovery scheduler death (#7072) (#7073)\n\n* Fix for issue #7072\r\n\r\nSigned-off-by: Connor Petty <cpmeister@users.noreply.github.com>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:39Z", "type": "commit"}, {"oid": "e2593d70019d0494e04a7ace096cd34a93609084", "url": "https://github.com/openhab/openhab-addons/commit/e2593d70019d0494e04a7ace096cd34a93609084", "message": "[yeelight] Add support for yeelight 650 with ambient light (Closes #6\u2026 (#6749)\n\n* [yeelight] Add support for yeelight 650 with ambient light (Closes #6227)\r\n\r\nSigned-off-by: Viktor Koop <viktor.koop@googlemail.com>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:39Z", "type": "commit"}, {"oid": "cbc92dd26aa803b0027c6917f985e4100cf3745e", "url": "https://github.com/openhab/openhab-addons/commit/cbc92dd26aa803b0027c6917f985e4100cf3745e", "message": "[modbus] Log more information on unexpected (uncatched) exceptions (#7085)\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "16b6441e05f6808b8d8568ea11c2c43e078b401e", "url": "https://github.com/openhab/openhab-addons/commit/16b6441e05f6808b8d8568ea11c2c43e078b401e", "message": "[miio] Prevent unneeded pings (#7083)\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "8220e0d62676a3911dfcc3fa7cb480ef8c177930", "url": "https://github.com/openhab/openhab-addons/commit/8220e0d62676a3911dfcc3fa7cb480ef8c177930", "message": "[tradfri] correct sitemap example (#7084)\n\nsitemap does not seem to support \"Rollershutter\" element types (at least not for me, gives me an error \"mismatched input\"), suggesting to replace it with \"Switch\" and displaying the position value\r\n\r\nSigned-off-by: Guido Wimmel <guido_99@gmx.de>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "869fe8bbbd43436e70092b73c05bc4b226403d0e", "url": "https://github.com/openhab/openhab-addons/commit/869fe8bbbd43436e70092b73c05bc4b226403d0e", "message": "[icloud] Fix NPE in AccountBridgeHandler (#7087)\n\n* Fix NPE in AccountBridgeHandler\r\n\r\nSigned-off-by: Kristof Rado <rado.krisi@gmail.com>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "11cfd454f429bbb68044f7c8d85a0145f663622e", "url": "https://github.com/openhab/openhab-addons/commit/11cfd454f429bbb68044f7c8d85a0145f663622e", "message": "[bluetooth.bluez] disable discovery service by default (#6965)\n\nDiscovery for bluez adapter should be disabled by default to prevent\r\noverwhelming users when they first add a bluez thing. Since the user can\r\ndo manual scans when they need to there is no reason for discovery to be\r\nenabled all the time.\r\n\r\nSigned-off-by: Connor Petty <cpmeister@users.noreply.github.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "73245bed0cf9fbbdc95b4f8905c5a3f47a54bc66", "url": "https://github.com/openhab/openhab-addons/commit/73245bed0cf9fbbdc95b4f8905c5a3f47a54bc66", "message": "Fix wind speed units and clean up compiler warnings (#7078)\n\nSigned-off-by: 9037568 <namraccr@gmail.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "b456b1321e0be18e058e300e7c18adc6b72cacbb", "url": "https://github.com/openhab/openhab-addons/commit/b456b1321e0be18e058e300e7c18adc6b72cacbb", "message": "Initial commit\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "184a585abc46d79de56640f7402281cf34f5e5be", "url": "https://github.com/openhab/openhab-addons/commit/184a585abc46d79de56640f7402281cf34f5e5be", "message": "header and docs\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "0764d75658dd6af746626658c2b98887f679fda7", "url": "https://github.com/openhab/openhab-addons/commit/0764d75658dd6af746626658c2b98887f679fda7", "message": "added nrg property\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "bf593cec02fe25d35ee7d44ef892069c33729d91", "url": "https://github.com/openhab/openhab-addons/commit/bf593cec02fe25d35ee7d44ef892069c33729d91", "message": "Added energy readings\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "c0ca2c403db5c1db7c38ad6530838fc483fe16a2", "url": "https://github.com/openhab/openhab-addons/commit/c0ca2c403db5c1db7c38ad6530838fc483fe16a2", "message": "Added channels and modified API\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "0b97a0255c51a9290497a6f16e67e09495053956", "url": "https://github.com/openhab/openhab-addons/commit/0b97a0255c51a9290497a6f16e67e09495053956", "message": "added more thing types\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "f3fdf4141ad8a039f63a23021d58d353491144e6", "url": "https://github.com/openhab/openhab-addons/commit/f3fdf4141ad8a039f63a23021d58d353491144e6", "message": "more thing channels\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "3fb7e0189b5a54530d42be9dc07bbea8b10f7402", "url": "https://github.com/openhab/openhab-addons/commit/3fb7e0189b5a54530d42be9dc07bbea8b10f7402", "message": "fixed xml\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "e33ec1165bdd58e97b18dd94e5c0b6a8f3a9a9c8", "url": "https://github.com/openhab/openhab-addons/commit/e33ec1165bdd58e97b18dd94e5c0b6a8f3a9a9c8", "message": "fixed xml\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "e3c17124ec85274d942b0e0e2e98fa6d4e6d949c", "url": "https://github.com/openhab/openhab-addons/commit/e3c17124ec85274d942b0e0e2e98fa6d4e6d949c", "message": "fixed xml (final)\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "a1ed32386b3ea42fe0b010268b09e1dce04f1cd0", "url": "https://github.com/openhab/openhab-addons/commit/a1ed32386b3ea42fe0b010268b09e1dce04f1cd0", "message": "fixed gson types\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "1cefc5fd9c0b0b626469f5d8143421705539bc1a", "url": "https://github.com/openhab/openhab-addons/commit/1cefc5fd9c0b0b626469f5d8143421705539bc1a", "message": "fixed xml type id\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "6a7a44b08d837dc543bfeb642208dd026e990c75", "url": "https://github.com/openhab/openhab-addons/commit/6a7a44b08d837dc543bfeb642208dd026e990c75", "message": "fixed bool values\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "9cd50860510216938b4eead600ee7057eed5f923", "url": "https://github.com/openhab/openhab-addons/commit/9cd50860510216938b4eead600ee7057eed5f923", "message": "formatting\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "96e44e5406f48d135c104bda65be89aa3253ecb2", "url": "https://github.com/openhab/openhab-addons/commit/96e44e5406f48d135c104bda65be89aa3253ecb2", "message": "cleaned up\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "55689b6ef201e2f133f80dad50302fa34bb3f8b3", "url": "https://github.com/openhab/openhab-addons/commit/55689b6ef201e2f133f80dad50302fa34bb3f8b3", "message": "removed error messages from debugging\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "f746262be5519fb835dddb31f89338e692fe1fe4", "url": "https://github.com/openhab/openhab-addons/commit/f746262be5519fb835dddb31f89338e692fe1fe4", "message": "added post implementation\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "f7d08c102ec09fc9095f9f34aedbfaf36558e539", "url": "https://github.com/openhab/openhab-addons/commit/f7d08c102ec09fc9095f9f34aedbfaf36558e539", "message": "added more fields to update command\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "29a72294f765f6ad474fe378cfd33af52d954be4", "url": "https://github.com/openhab/openhab-addons/commit/29a72294f765f6ad474fe378cfd33af52d954be4", "message": "more fixes\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:40Z", "type": "commit"}, {"oid": "215e1a7b5f8303d190bb25c4cf01c1a4cdd6b491", "url": "https://github.com/openhab/openhab-addons/commit/215e1a7b5f8303d190bb25c4cf01c1a4cdd6b491", "message": "fix cast\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "5c944042f56a28ff4a784391de161e22497b268c", "url": "https://github.com/openhab/openhab-addons/commit/5c944042f56a28ff4a784391de161e22497b268c", "message": "fixed key for stop state\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "313f66e0e921abeea514dc735c8ccdcbb5e2cda3", "url": "https://github.com/openhab/openhab-addons/commit/313f66e0e921abeea514dc735c8ccdcbb5e2cda3", "message": "fixed sent value for stop state\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "e60c40a991b607c20674526ed9d397bcda508459", "url": "https://github.com/openhab/openhab-addons/commit/e60c40a991b607c20674526ed9d397bcda508459", "message": "more documentation\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "a6a33d8b5fee1388cbf2dacf7101925fa8b33ec1", "url": "https://github.com/openhab/openhab-addons/commit/a6a33d8b5fee1388cbf2dacf7101925fa8b33ec1", "message": "added goecharger to pom.xml\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "c81e6df5fdf4067dba5c277085bc34c573767cbe", "url": "https://github.com/openhab/openhab-addons/commit/c81e6df5fdf4067dba5c277085bc34c573767cbe", "message": "fixed docs\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "b6f7eb3457f1bf1e616c621837ddbf81c99b28a3", "url": "https://github.com/openhab/openhab-addons/commit/b6f7eb3457f1bf1e616c621837ddbf81c99b28a3", "message": "formatting\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "8f9d1cc5a9fbe53824c15d1b0c06af2ee41c7d1e", "url": "https://github.com/openhab/openhab-addons/commit/8f9d1cc5a9fbe53824c15d1b0c06af2ee41c7d1e", "message": "more docs\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "9ba5a2d15a3ffa59389d263558f3c05ec35aed14", "url": "https://github.com/openhab/openhab-addons/commit/9ba5a2d15a3ffa59389d263558f3c05ec35aed14", "message": "adopted writing of Go-eCharger\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "87f7c4c4a55b39e69e5fe2a67ee11f316ec6ddf0", "url": "https://github.com/openhab/openhab-addons/commit/87f7c4c4a55b39e69e5fe2a67ee11f316ec6ddf0", "message": "project and classpath file\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "3a53389e0cbf8cc0589417970ee04fabba546b72", "url": "https://github.com/openhab/openhab-addons/commit/3a53389e0cbf8cc0589417970ee04fabba546b72", "message": "Timeout and nulling values\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "149ea358fe206e368e1dc0b6d8b2ecd905eff382", "url": "https://github.com/openhab/openhab-addons/commit/149ea358fe206e368e1dc0b6d8b2ecd905eff382", "message": "Calculated phases based on voltage\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "f26e75ef3a430e772555d20196bf556bc1bf3799", "url": "https://github.com/openhab/openhab-addons/commit/f26e75ef3a430e772555d20196bf556bc1bf3799", "message": "Adjustments of API and code after testing\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "414006205dadc90dfb8f0ea3ba7a59469b5bc2a1", "url": "https://github.com/openhab/openhab-addons/commit/414006205dadc90dfb8f0ea3ba7a59469b5bc2a1", "message": "Fixed readme\n\nSigned-off-by: Samuel Brucksch <samuel.brucksch@sap.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "bbeb1112bb61ff2881b8fe6a3677822a5b203ffb", "url": "https://github.com/openhab/openhab-addons/commit/bbeb1112bb61ff2881b8fe6a3677822a5b203ffb", "message": "Added access state\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "6f50ab99bf72fcd058723e236bb4ec8a4cb81624", "url": "https://github.com/openhab/openhab-addons/commit/6f50ab99bf72fcd058723e236bb4ec8a4cb81624", "message": "[weathercompany] Increase decimal precision for PWS Observations (#7070)\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "b4568945fc92d4afe5373f34d388498836a49def", "url": "https://github.com/openhab/openhab-addons/commit/b4568945fc92d4afe5373f34d388498836a49def", "message": "Prevent going offline for \"in progress\" exceptions (#7091)\n\nSigned-off-by: Connor Petty <cpmeister@users.noreply.github.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "f254b602bf51dcd2e46f098ec161a185710ffcf6", "url": "https://github.com/openhab/openhab-addons/commit/f254b602bf51dcd2e46f098ec161a185710ffcf6", "message": "[mqtt.homeassistant] Bugfix in HomeAssistantThingHandler (#7035)\n\n* fixed bugs in ComponentLight and HomeAssistantThingHandler\r\n\r\nSigned-off-by: Matt Hoekstra <matthew.e.hoekstra@gmail.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "05ec1846016794f4f0fede6dbc1e50298e863377", "url": "https://github.com/openhab/openhab-addons/commit/05ec1846016794f4f0fede6dbc1e50298e863377", "message": "[bluetooth.am43] AM43 Binding initial contribution (#6979)\n\n* Initial commit of AM43 Binding\r\n\r\nSigned-off-by: Connor Petty <cpmeister@users.noreply.github.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "38707462bf6db50d5777f889ab38ef8f07343886", "url": "https://github.com/openhab/openhab-addons/commit/38707462bf6db50d5777f889ab38ef8f07343886", "message": "[hueemulation] Consider property discoveryIps if configured (#6662) (#6967)\n\n* [hueemulation] Consider property discoveryIps if configured (#6662)\r\n\r\nSigned-off-by: Mark Bonnekessel <bonnekessel@mailbox.org>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "e51fb0c4f69ec1b557d2d5b98504740c589e64e3", "url": "https://github.com/openhab/openhab-addons/commit/e51fb0c4f69ec1b557d2d5b98504740c589e64e3", "message": "[satel] Command and events refactoring, communication improvements (#7086)\n\nSigned-off-by: Krzysztof Goworek <krzysztof.goworek@gmail.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "f946585a68195b99800268eb09526984ed346768", "url": "https://github.com/openhab/openhab-addons/commit/f946585a68195b99800268eb09526984ed346768", "message": "[somfytahoma] added dynamic RSSI and status channels (#6993)\n\n* [somfytahoma] added dynamic rssi channel\r\n* [somfytahoma] added extra channels for sensor things\r\n\r\nSigned-off-by: Ondrej Pecta <opecta@gmail.com>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "55dba381009c384c07cdaabfe48084508b9cddab", "url": "https://github.com/openhab/openhab-addons/commit/55dba381009c384c07cdaabfe48084508b9cddab", "message": "removed jsonfile\n\nSigned-off-by: Samuel Brucksch <samuel.brucksch@sap.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "5569ef110456ed2c4d9457322b3b2707a294b612", "url": "https://github.com/openhab/openhab-addons/commit/5569ef110456ed2c4d9457322b3b2707a294b612", "message": "Don't treat the ActiveLow setting as if it's required (#7092)\n\nSigned-off-by: 9037568 <namraccr@gmail.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:41Z", "type": "commit"}, {"oid": "86126182002f60c66a112c1049f5ca655b117b79", "url": "https://github.com/openhab/openhab-addons/commit/86126182002f60c66a112c1049f5ca655b117b79", "message": "fixed version in pom.xml (#7094)\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:42Z", "type": "commit"}, {"oid": "2920a54e2aaf6d6b3a37648525abde1ce3af646f", "url": "https://github.com/openhab/openhab-addons/commit/2920a54e2aaf6d6b3a37648525abde1ce3af646f", "message": "[mcp23017] Allow choosing I2C bus numbers other than 0 and 1 (#6825)\n\nIf additional I2C bit banging busses are used, those addtional bus numbers are nescessary\r\n\r\nSigned-off-by: Jockra <59808296+Jockra@users.noreply.github.com>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:42Z", "type": "commit"}, {"oid": "d1c94eecafffe2ee01f398bc2fd98f1afd2c8086", "url": "https://github.com/openhab/openhab-addons/commit/d1c94eecafffe2ee01f398bc2fd98f1afd2c8086", "message": "[volvooncall] Add missing channels and update documentation (#6880) (#6934)\n\n* [volvooncall] Added channels to the VolvoOnCall binding (#6880)\r\n\r\nAdded:\r\n- Tyre pressure\r\n- Plugin Hybrid (PHEV) / Twin engine data\r\n- Preclimatization next to Remote heater\r\n- Average speed\r\n- Brake fluid level\r\n\r\nAlso updated the readme file\r\n\r\nSigned-off-by: Arie van der Lee <arie@soleetions.nl>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:42Z", "type": "commit"}, {"oid": "c228512191598720284cbfd1624e6e16260bff65", "url": "https://github.com/openhab/openhab-addons/commit/c228512191598720284cbfd1624e6e16260bff65", "message": "fixed connection problem on post\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:42Z", "type": "commit"}, {"oid": "6d08261c4324c1d07dc9b012a141256a992b1508", "url": "https://github.com/openhab/openhab-addons/commit/6d08261c4324c1d07dc9b012a141256a992b1508", "message": "First set of changes for review\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:42Z", "type": "commit"}, {"oid": "fc8acca45267da8a72d1c759cd70c9a74e0e6c48", "url": "https://github.com/openhab/openhab-addons/commit/fc8acca45267da8a72d1c759cd70c9a74e0e6c48", "message": "removed catching exception\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:42Z", "type": "commit"}, {"oid": "5b3203802c68d9eaf2f631de703cefd66d35188b", "url": "https://github.com/openhab/openhab-addons/commit/5b3203802c68d9eaf2f631de703cefd66d35188b", "message": "changes related to refresh\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:42Z", "type": "commit"}, {"oid": "f53c4b8258167d411f7a61f268b802b74faca58d", "url": "https://github.com/openhab/openhab-addons/commit/f53c4b8258167d411f7a61f268b802b74faca58d", "message": "fixed some nullable annotations\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:42Z", "type": "commit"}, {"oid": "fb7494d54d6f15010c8f307c73dda61bd68f1cd1", "url": "https://github.com/openhab/openhab-addons/commit/fb7494d54d6f15010c8f307c73dda61bd68f1cd1", "message": "[pjlinkdevice] Apply spotless codestyle plugin (#7100)\n\nSigned-off-by: Nils Schnabel <github@to.nilsschnabel.de>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:42Z", "type": "commit"}, {"oid": "2f71a3831b74dc69f92c2b10f3301b4fd41103fe", "url": "https://github.com/openhab/openhab-addons/commit/2f71a3831b74dc69f92c2b10f3301b4fd41103fe", "message": "http client and final remarks from review\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:42Z", "type": "commit"}, {"oid": "638efcda6a72205c7fc0478e3ef1711127718da4", "url": "https://github.com/openhab/openhab-addons/commit/638efcda6a72205c7fc0478e3ef1711127718da4", "message": "UoM in demo.items\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:42Z", "type": "commit"}, {"oid": "6099df97cd109a691ed70e2c693d7308b4f61c15", "url": "https://github.com/openhab/openhab-addons/commit/6099df97cd109a691ed70e2c693d7308b4f61c15", "message": "Update README.md\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:42Z", "type": "commit"}, {"oid": "7a21b93b9c1022e8672b27741595ed7e1903c18d", "url": "https://github.com/openhab/openhab-addons/commit/7a21b93b9c1022e8672b27741595ed7e1903c18d", "message": "Update README.md\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-05T20:37:42Z", "type": "commit"}, {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "url": "https://github.com/openhab/openhab-addons/commit/dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "message": "Merge branch '2.5.x' into goecharger", "committedDate": "2020-03-06T05:38:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzNDE1NA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389034154", "body": "```suggestion\r\n    public @Nullable String ip;\r\n```\r\n\r\nwe use the inline style", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                public String ip;\n          \n          \n            \n                public @Nullable String ip;\n          \n      \n    \n    \n  \n\nwe use the inline style", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Nullable</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> ip;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">String</span> ip;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">we use the inline style</p>", "author": "J-N-K", "createdAt": "2020-03-06T17:16:49Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link GoEChargerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerConfiguration {\n+\n+    @Nullable\n+    public String ip;", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzNDU2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389034567", "body": "```suggestion\r\n    public GoEChargerHandlerFactory(final @Reference HttpClientFactory httpClientFactory) {\r\n```\r\n\r\nsince you don't need the other providers, you don't need to wait for them to be available", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public GoEChargerHandlerFactory(final @Reference HttpClientFactory httpClientFactory,\n          \n          \n            \n                        final @Reference LocaleProvider localeProvider, final @Reference LocationProvider locationProvider,\n          \n          \n            \n                        final @Reference TranslationProvider i18nProvider) {\n          \n          \n            \n                public GoEChargerHandlerFactory(final @Reference HttpClientFactory httpClientFactory) {\n          \n      \n    \n    \n  \n\nsince you don't need the other providers, you don't need to wait for them to be available", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> GoEChargerHandlerFactory(<span class=\"pl-k\">final</span> <span class=\"pl-k\">@Reference</span> <span class=\"pl-smi\">HttpClientFactory</span> httpClientFactory,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">final</span> <span class=\"pl-k\">@Reference</span> <span class=\"pl-smi\">LocaleProvider</span> localeProvider, <span class=\"pl-k\">final</span> <span class=\"pl-k\">@Reference</span> <span class=\"pl-smi\">LocationProvider</span> locationProvider,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">final</span> <span class=\"pl-k\">@Reference</span> <span class=\"pl-smi\">TranslationProvider</span> i18nProvider) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> GoEChargerHandlerFactory(<span class=\"pl-k\">final</span> <span class=\"pl-k\">@Reference</span> <span class=\"pl-smi\">HttpClientFactory</span> httpClientFactory) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">since you don't need the other providers, you don't need to wait for them to be available</p>", "author": "J-N-K", "createdAt": "2020-03-06T17:17:42Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerHandlerFactory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.i18n.LocaleProvider;\n+import org.eclipse.smarthome.core.i18n.LocationProvider;\n+import org.eclipse.smarthome.core.i18n.TranslationProvider;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.goecharger.internal.handler.GoEChargerHandler;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link GoEChargerHandlerFactory} is responsible for creating things and\n+ * thing handlers.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.goecharger\", service = ThingHandlerFactory.class)\n+public class GoEChargerHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_GOE);\n+    private HttpClient httpClient;\n+\n+    @Activate\n+    public GoEChargerHandlerFactory(final @Reference HttpClientFactory httpClientFactory,\n+            final @Reference LocaleProvider localeProvider, final @Reference LocationProvider locationProvider,\n+            final @Reference TranslationProvider i18nProvider) {", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzOTA3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389039079", "body": "I have a questions here. This is only used for de-serialization of the response, right? GSON does not use setters and if it's a DTO anyway, we allow using `public` fields and you could omit the getters, too.\r\n\r\nIf you name it `GoEStatusResponseDTO`, teher will be no warning regarding the null-annotation. WDYT`?", "bodyText": "I have a questions here. This is only used for de-serialization of the response, right? GSON does not use setters and if it's a DTO anyway, we allow using public fields and you could omit the getters, too.\nIf you name it GoEStatusResponseDTO, teher will be no warning regarding the null-annotation. WDYT`?", "bodyHTML": "<p dir=\"auto\">I have a questions here. This is only used for de-serialization of the response, right? GSON does not use setters and if it's a DTO anyway, we allow using <code>public</code> fields and you could omit the getters, too.</p>\n<p dir=\"auto\">If you name it <code>GoEStatusResponseDTO</code>, teher will be no warning regarding the null-annotation. WDYT`?</p>", "author": "J-N-K", "createdAt": "2020-03-06T17:26:30Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponse.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.api;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+\n+/**\n+ * The {@link GoEStatusResponse} class represents a json response from the\n+ * charger.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEStatusResponse {", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMzk0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389233948", "bodyText": "I'm not so familiar with gson, i thought it needs setter/getters to work. but it works fine if i remove them", "author": "SamuelBrucksch", "createdAt": "2020-03-07T06:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzOTA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzOTkyMw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389039923", "body": "I guess this is never used. At least I didn't find a hint in your code and GSON is not using that. That aside, if you want to keep it, please check the array size before you access fields, this is a food candidate for `IndexOutOfBoundsException` otherwise.", "bodyText": "I guess this is never used. At least I didn't find a hint in your code and GSON is not using that. That aside, if you want to keep it, please check the array size before you access fields, this is a food candidate for IndexOutOfBoundsException otherwise.", "bodyHTML": "<p dir=\"auto\">I guess this is never used. At least I didn't find a hint in your code and GSON is not using that. That aside, if you want to keep it, please check the array size before you access fields, this is a food candidate for <code>IndexOutOfBoundsException</code> otherwise.</p>", "author": "J-N-K", "createdAt": "2020-03-06T17:28:04Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponse.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.api;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+\n+/**\n+ * The {@link GoEStatusResponse} class represents a json response from the\n+ * charger.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEStatusResponse {\n+\n+  \n+  @SerializedName(\"version\")\n+  private String version;\n+\n+  \n+  @SerializedName(\"car\")\n+  private Integer pwmSignal;\n+\n+  \n+  @SerializedName(\"ast\")\n+  private Integer accessState;\n+\n+  \n+  @SerializedName(\"amp\")\n+  private Integer maxChargeAmps;\n+\n+  \n+  @SerializedName(\"nrg\")\n+  private Integer[] energy;\n+\n+  \n+  @SerializedName(\"err\")\n+  private Integer errorCode;\n+\n+  \n+  @SerializedName(\"alw\")\n+  private Integer allowCharging;\n+\n+  \n+  @SerializedName(\"cbl\")\n+  private Integer cableEncoding;\n+\n+  \n+  @SerializedName(\"pha\")\n+  private Integer phases;\n+\n+  \n+  @SerializedName(\"tmp\")\n+  private Integer temperature;\n+\n+  \n+  @SerializedName(\"dws\")\n+  private Long sessionChargeConsumption;\n+\n+  \n+  @SerializedName(\"dwo\")\n+  private Integer sessionChargeConsumptionLimit;\n+\n+  \n+  @SerializedName(\"eto\")\n+  private Long totalChargeConsumption;\n+\n+  \n+  @SerializedName(\"fwv\")\n+  private String firmware;\n+\n+  public  String getVersion() {\n+    return version;\n+  }\n+\n+  public void setVersion( String version) {\n+    this.version = version;\n+  }\n+\n+  public  Integer getPwmSignal() {\n+    return pwmSignal;\n+  }\n+\n+  public void setPwmSignal( Integer pwmSignal) {\n+    this.pwmSignal = pwmSignal;\n+  }\n+\n+  public  Integer getMaxChargeAmps() {\n+    return maxChargeAmps;\n+  }\n+\n+  public void setMaxChargeAmps( Integer maxChargeAmps) {\n+    this.maxChargeAmps = maxChargeAmps;\n+  }\n+\n+  public  Integer getErrorCode() {\n+    return errorCode;\n+  }\n+\n+  public void setErrorCode( Integer errorCode) {\n+    this.errorCode = errorCode;\n+  }\n+\n+  public  Integer getAllowCharging() {\n+    return allowCharging;\n+  }\n+\n+  public void setAllowCharging( Integer allowCharging) {\n+    this.allowCharging = allowCharging;\n+  }\n+\n+  public  Integer getCableEncoding() {\n+    return cableEncoding;\n+  }\n+\n+  public void setCableEncoding( Integer cableEncoding) {\n+    this.cableEncoding = cableEncoding;\n+  }\n+\n+  public  Integer getPhases() {\n+    return phases;\n+  }\n+\n+  public void setPhases( Integer phases) {\n+    this.phases = phases;\n+  }\n+\n+  public  Integer getTemperature() {\n+    return temperature;\n+  }\n+\n+  public void setTemperature( Integer temperature) {\n+    this.temperature = temperature;\n+  }\n+\n+  public  Long getSessionChargeConsumption() {\n+    return sessionChargeConsumption;\n+  }\n+\n+  public void setSessionChargeConsumption( Long sessionChargeConsumption) {\n+    this.sessionChargeConsumption = sessionChargeConsumption;\n+  }\n+\n+  public  Integer getSessionChargeConsumptionLimit() {\n+    return sessionChargeConsumptionLimit;\n+  }\n+\n+  public void setSessionChargeConsumptionLimit( Integer sessionChargeConsumptionLimit) {\n+    this.sessionChargeConsumptionLimit = sessionChargeConsumptionLimit;\n+  }\n+\n+  public  Long getTotalChargeConsumption() {\n+    return totalChargeConsumption;\n+  }\n+\n+  public void setTotalChargeConsumption( Long totalChargeConsumption) {\n+    this.totalChargeConsumption = totalChargeConsumption;\n+  }\n+\n+  public  String getFirmware() {\n+    return firmware;\n+  }\n+\n+  public void setFirmware( String firmware) {\n+    this.firmware = firmware;\n+  }\n+\n+  public  Integer[] getEnergy() {\n+    return energy;\n+  }\n+\n+  public void setEnergy( Integer[] energy) {\n+    this.energy = energy;", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMzk4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389233982", "bodyText": "It is used for voltage, current and power. however its either null and there is no connection or it is always there", "author": "SamuelBrucksch", "createdAt": "2020-03-07T06:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzOTkyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MDExOA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389040118", "body": "```suggestion\r\n    private final HttpClient httpClient;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private HttpClient httpClient;\n          \n          \n            \n                private final HttpClient httpClient;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">HttpClient</span> httpClient;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">HttpClient</span> httpClient;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-06T17:28:24Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MDMzOA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389040338", "body": "```suggestion\r\n    private final Gson gson = new Gson();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Gson gson;\n          \n          \n            \n                private final Gson gson = new Gson();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Gson</span> gson;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">Gson</span> gson<span class=\"x x-first\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">Gson</span><span class=\"x x-last\">()</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-06T17:28:50Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MTY1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389041657", "body": "Why do you split here? If you don't use channel groups there should be no `#` in the channel id\r\n\r\nI would also suggest to add a check if the array returned by `getEnergy()` (the array if you go the way with the public fields) has the correct size (see above for reason). ", "bodyText": "Why do you split here? If you don't use channel groups there should be no # in the channel id\nI would also suggest to add a check if the array returned by getEnergy() (the array if you go the way with the public fields) has the correct size (see above for reason).", "bodyHTML": "<p dir=\"auto\">Why do you split here? If you don't use channel groups there should be no <code>#</code> in the channel id</p>\n<p dir=\"auto\">I would also suggest to add a check if the array returned by <code>getEnergy()</code> (the array if you go the way with the public fields) has the correct size (see above for reason).</p>", "author": "J-N-K", "createdAt": "2020-03-06T17:31:32Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNDEzOA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389234138", "bodyText": "This is a leftover from copying stuff from other bindings, guess i will spend some time and clean up fronius binding after this, where i took most of the code from.", "author": "SamuelBrucksch", "createdAt": "2020-03-07T06:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MTY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MjcxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389042717", "body": "You can skip the return here, two lines later you return `UndefType.NULL` anyway. Why did you decide to use `NULL` instead of `UNDEF`?", "bodyText": "You can skip the return here, two lines later you return UndefType.NULL anyway. Why did you decide to use NULL instead of UNDEF?", "bodyHTML": "<p dir=\"auto\">You can skip the return here, two lines later you return <code>UndefType.NULL</code> anyway. Why did you decide to use <code>NULL</code> instead of <code>UNDEF</code>?</p>", "author": "J-N-K", "createdAt": "2020-03-06T17:33:38Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNDE2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389234162", "bodyText": "In the openhablog i always saw values getting NULL if device is not available, so i thought NULL is the right choice here. Will change to UNDEF if that is the normal way.", "author": "SamuelBrucksch", "createdAt": "2020-03-07T06:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MjcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0ODI5OA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389048298", "body": "`isLinked` is very expensive, `getValue` is cheap, so I would suggest to remove that check for performance reasons.", "bodyText": "isLinked is very expensive, getValue is cheap, so I would suggest to remove that check for performance reasons.", "bodyHTML": "<p dir=\"auto\"><code>isLinked</code> is very expensive, <code>getValue</code> is cheap, so I would suggest to remove that check for performance reasons.</p>", "author": "J-N-K", "createdAt": "2020-03-06T17:43:53Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNDI1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389234251", "bodyText": "Also leftover from copying code ;) Guess it really is necessary to clean up some other bindings as well.", "author": "SamuelBrucksch", "createdAt": "2020-03-07T07:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0ODI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MDI4NA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389050284", "body": "```suggestion\r\n    @SuppressWarnings(\"unchecked\")\r\n    public void handleCommand(ChannelUID channelUID, Command command) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {\n          \n          \n            \n                @SuppressWarnings(\"unchecked\")\n          \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"215\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first\">public</span><span class=\"x\"> </span><span class=\"pl-k x\">void</span><span class=\"x\"> handleCommand(</span><span class=\"pl-smi x\">ChannelUID</span><span class=\"x\"> channelUID, </span><span class=\"pl-smi x\">Command</span><span class=\"x x-last\"> command) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"215\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first\">@SuppressWarnings</span><span class=\"x\">(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">unchecked</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">)</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"216\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> handleCommand(<span class=\"pl-smi\">ChannelUID</span> channelUID, <span class=\"pl-smi\">Command</span> command) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-06T17:47:47Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MDUyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389050529", "body": "You don't need to break on default", "bodyText": "You don't need to break on default", "bodyHTML": "<p dir=\"auto\">You don't need to break on default</p>", "author": "J-N-K", "createdAt": "2020-03-06T17:48:17Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjU5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236596", "bodyText": "the default case is needed,only the break is not needed.", "author": "J-N-K", "createdAt": "2020-03-07T07:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MDUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1NTA2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389055066", "body": "```suggestion\r\n        } catch (InterruptedException | TimeoutException | ExecutionException e) {\r\n            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\r\n            return;\r\n        }\r\n```\r\n\r\nTwo remarks: no need to log a warning, thing status updates are already logged and do not catch `Exception` if you can be more specific.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                        errorMsg = e.getMessage();\n          \n          \n            \n                    }\n          \n          \n            \n                    } catch (InterruptedException | TimeoutException | ExecutionException e) {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nTwo remarks: no need to log a warning, thing status updates are already logged and do not catch Exception if you can be more specific.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            errorMsg <span class=\"pl-k\">=</span> e<span class=\"pl-k\">.</span>getMessage();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">InterruptedException</span> <span class=\"pl-k\">|</span> <span class=\"pl-smi\">TimeoutException</span> <span class=\"pl-k\">|</span> <span class=\"pl-smi\">ExecutionException</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE<span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>, e<span class=\"pl-k\">.</span>getMessage());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Two remarks: no need to log a warning, thing status updates are already logged and do not catch <code>Exception</code> if you can be more specific.</p>", "author": "J-N-K", "createdAt": "2020-03-06T17:57:56Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1NjUzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389056531", "body": "see above", "bodyText": "see above", "bodyHTML": "<p dir=\"auto\">see above</p>", "author": "J-N-K", "createdAt": "2020-03-06T18:01:10Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponse.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (Exception e) {", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1NjkxMg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389056912", "body": "can be removed", "bodyText": "can be removed", "bodyHTML": "<p dir=\"auto\">can be removed</p>", "author": "J-N-K", "createdAt": "2020-03-06T18:01:56Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1NzIwNg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389057206", "body": "```suggestion\r\n        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"no response received on command\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n          \n          \n            \n                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n          \n          \n            \n                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"no response received on command\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span>warn(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Error in Go-eCharger request: {}<span class=\"pl-pds\">\"</span></span>, errorMsg);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE<span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>, errorMsg);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE<span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>no response received on command<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-06T18:02:36Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MDM1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389060356", "body": "```suggestion\r\n        getThing().getChannels().map(channel -> channel.getUID().getId()).forEach(id -> updateState(id, getValue(id)));\r\n```\r\n\r\nYou can the remove the updateState method. If you check null on `goeReponse` (and return if empty) above and add it as parameter to `getValue` (making it `private State getValue(String id, GoEStatusResponse goeResponse)`, you can also remove the field, making the whole thing a bit more thread-safe.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    getThing().getChannels().forEach(channel -> updateChannel(channel.getUID().getId()));\n          \n          \n            \n                    getThing().getChannels().map(channel -> channel.getUID().getId()).forEach(id -> updateState(id, getValue(id)));\n          \n      \n    \n    \n  \n\nYou can the remove the updateState method. If you check null on goeReponse (and return if empty) above and add it as parameter to getValue (making it private State getValue(String id, GoEStatusResponse goeResponse), you can also remove the field, making the whole thing a bit more thread-safe.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        getThing()<span class=\"pl-k\">.</span>getChannels()<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">forEach</span>(channel <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"x x-first x-last\">updateChannel(</span>channel<span class=\"pl-k\">.</span>getUID()<span class=\"pl-k\">.</span>getId()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        getThing()<span class=\"pl-k\">.</span>getChannels()<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">map</span>(channel <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> channel<span class=\"pl-k\">.</span>getUID()<span class=\"pl-k\">.</span>getId(<span class=\"x x-first\">))</span><span class=\"pl-k x\">.</span><span class=\"x\">forEach(id </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> updateState(id, getValue(id</span>)));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">You can the remove the updateState method. If you check null on <code>goeReponse</code> (and return if empty) above and add it as parameter to <code>getValue</code> (making it <code>private State getValue(String id, GoEStatusResponse goeResponse)</code>, you can also remove the field, making the whole thing a bit more thread-safe.</p>", "author": "J-N-K", "createdAt": "2020-03-06T18:09:25Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponse.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        retryCounter++;\n+        if (retryCounter == 1) {\n+            logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+            return getGoEData();\n+        }\n+        logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void refresh() {\n+        // Request new GoE data\n+        retryCounter = 0;\n+        goeResponse = getGoEData();\n+\n+        // Update all channels from the updated GoE data\n+        getThing().getChannels().forEach(channel -> updateChannel(channel.getUID().getId()));", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNDc2NA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389234764", "bodyText": "goeResponse is also used for RefreshCommand, can i ignore the refresh command? then this could work.", "author": "SamuelBrucksch", "createdAt": "2020-03-07T07:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MDM1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4NTA4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389085082", "body": "I might be wrong, but I think the purpose of this command is to retrieve current value for given channel directly from the device, so I would call `refresh()` here.\r\n@J-N-K  WDYT?", "bodyText": "I might be wrong, but I think the purpose of this command is to retrieve current value for given channel directly from the device, so I would call refresh() here.\n@J-N-K  WDYT?", "bodyHTML": "<p dir=\"auto\">I might be wrong, but I think the purpose of this command is to retrieve current value for given channel directly from the device, so I would call <code>refresh()</code> here.<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/J-N-K/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/J-N-K\">@J-N-K</a>  WDYT?</p>", "author": "druciak", "createdAt": "2020-03-06T19:01:28Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNDkzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389234937", "bodyText": "good catch, this also works well together with the review remark a few comments above to change\ngetThing().getChannels().forEach(channel -> updateChannel(channel.getUID().getId()));\n\nto\ngetThing().getChannels().map(channel -> channel.getUID().getId()).forEach(id -> updateState(id, getValue(id)));\n\nHow often is this refresh command triggered? in the end i already refresh like every 5 seconds by default, if there is an additional refresh inbetween i dont think that gives you more/better data. Can i also ignore this?", "author": "SamuelBrucksch", "createdAt": "2020-03-07T07:19:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4NTA4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjU2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236562", "bodyText": "REFRESH is only triggered once when the channel is linked. Bindings should support REFRESH but in this case I think we can ignore it. There is no additional benefit of refreshing and you can't refresh a single channel anyway. This would require quite some logic to get it right, so better remove it.", "author": "J-N-K", "createdAt": "2020-03-07T07:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4NTA4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MzM0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389093343", "body": "I don't think you need this. Just pass response data from `GetGoEData` to other methods as a parameter.", "bodyText": "I don't think you need this. Just pass response data from GetGoEData to other methods as a parameter.", "bodyHTML": "<p dir=\"auto\">I don't think you need this. Just pass response data from <code>GetGoEData</code> to other methods as a parameter.</p>", "author": "druciak", "createdAt": "2020-03-06T19:19:07Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMTg1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389121859", "body": "```suggestion\r\n                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n          \n          \n            \n                            value = command == OnOffType.ON ? \"1\" : \"0\";", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                value <span class=\"pl-k\">=</span> <span class=\"x x-first\">(</span><span class=\"pl-smi x\">OnOffType</span><span class=\"x x-last\">)</span>command <span class=\"pl-k\">==</span> <span class=\"pl-smi\">OnOffType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ON</span> <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                value <span class=\"pl-k\">=</span> command <span class=\"pl-k\">==</span> <span class=\"pl-smi\">OnOffType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ON</span> <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-03-06T20:14:08Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNTI4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389215289", "body": "Why would you need to retry immediately? Your refreshJob does retries just by virtue that it is periodic.", "bodyText": "Why would you need to retry immediately? Your refreshJob does retries just by virtue that it is periodic.", "bodyHTML": "<p dir=\"auto\">Why would you need to retry immediately? Your refreshJob does retries just by virtue that it is periodic.</p>", "author": "cpmeister", "createdAt": "2020-03-07T01:44:00Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponse.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        retryCounter++;\n+        if (retryCounter == 1) {\n+            logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+            return getGoEData();\n+        }", "originalCommit": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTI4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389235285", "bodyText": "The idea is to not set null values immediately but try again in case there was just a short connection issue. So only after the next retry values are set to null/undef. Took this over from fronius binding. I guess the values are a bit more stable like this in shaky wifi connections.", "author": "SamuelBrucksch", "createdAt": "2020-03-07T07:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNTI4OQ=="}], "type": "inlineReview"}, {"oid": "026b0183894bb412ca07272a67f6d873ed384af5", "url": "https://github.com/openhab/openhab-addons/commit/026b0183894bb412ca07272a67f6d873ed384af5", "message": "remarks from review\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-07T07:37:58Z", "type": "commit"}, {"oid": "18638888322ded97c886da6c7fbfd21591f938fe", "url": "https://github.com/openhab/openhab-addons/commit/18638888322ded97c886da6c7fbfd21591f938fe", "message": "Merge branch 'goecharger' of https://github.com/SamuelBrucksch/openhab-addons into goecharger", "committedDate": "2020-03-07T07:38:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjM3MA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236370", "body": "remove at least one empty line", "bodyText": "remove at least one empty line", "bodyHTML": "<p dir=\"auto\">remove at least one empty line</p>", "author": "J-N-K", "createdAt": "2020-03-07T07:52:13Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponseDTO.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.api;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+\n+/**\n+ * The {@link GoEStatusResponse} class represents a json response from the\n+ * charger.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEStatusResponseDTO {\n+", "originalCommit": "18638888322ded97c886da6c7fbfd21591f938fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjM5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236395", "body": "```suggestion\r\n    private final Gson gson = new Gson();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Gson gson;\n          \n          \n            \n                private final Gson gson = new Gson();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Gson</span> gson;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Gson</span> gson<span class=\"x x-first\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">Gson</span><span class=\"x x-last\">()</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-07T07:52:57Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;", "originalCommit": "18638888322ded97c886da6c7fbfd21591f938fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjQxMw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236413", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    gson = new Gson();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        gson </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">Gson</span><span class=\"x x-last\">();</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-07T07:53:11Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();", "originalCommit": "18638888322ded97c886da6c7fbfd21591f938fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjQ1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236457", "body": "Cannot be `null` here", "bodyText": "Cannot be null here", "bodyHTML": "<p dir=\"auto\">Cannot be <code>null</code> here</p>", "author": "J-N-K", "createdAt": "2020-03-07T07:53:51Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {", "originalCommit": "18638888322ded97c886da6c7fbfd21591f938fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTIxMg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389239212", "bodyText": "How to set Null/Undef for each channel then? Does openhab do that automatically when the device goes offline? Or is it best practice to keep the last known values?", "author": "SamuelBrucksch", "createdAt": "2020-03-07T08:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjczMg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236732", "body": "check for null here, this has two benefits: the null-check is only done once (not everytime `getValue` is called) and second the null-annotation is correct (non-null for the parameter of `getValue`)", "bodyText": "check for null here, this has two benefits: the null-check is only done once (not everytime getValue is called) and second the null-annotation is correct (non-null for the parameter of getValue)", "bodyHTML": "<p dir=\"auto\">check for null here, this has two benefits: the null-check is only done once (not everytime <code>getValue</code> is called) and second the null-annotation is correct (non-null for the parameter of <code>getValue</code>)</p>", "author": "J-N-K", "createdAt": "2020-03-07T07:59:51Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");\n+            result = null;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        return null;\n+    }\n+\n+    private void refresh() {\n+        // Request new GoE data\n+        retryCounter = 0;\n+        GoEStatusResponseDTO goeResponse = getGoEData();", "originalCommit": "18638888322ded97c886da6c7fbfd21591f938fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTQ4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389239489", "bodyText": "I think in a switch you can ommit default, if there is no reason to have a default.", "author": "SamuelBrucksch", "createdAt": "2020-03-07T08:53:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjczMg=="}], "type": "inlineReview"}, {"oid": "ef0bb9615896e13007653167d842d3872d31c355", "url": "https://github.com/openhab/openhab-addons/commit/ef0bb9615896e13007653167d842d3872d31c355", "message": "removed unused imports\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-07T08:58:03Z", "type": "commit"}, {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e", "url": "https://github.com/openhab/openhab-addons/commit/911db7af5bde18d6a297da971ee775d94c29d01e", "message": "removed empty lines\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-07T08:58:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTcxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389239715", "body": "```suggestion\r\nprivate List<String> allChannels = new ArrayList<>();\r\n\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            private List<String> allChannels = new ArrayList<>();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"89\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"89\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k x x-first\">private</span><span class=\"x\"> </span><span class=\"pl-k\"><span class=\"x\">List&lt;</span><span class=\"pl-smi x\">String</span><span class=\"x\">&gt;</span></span><span class=\"x\"> allChannels </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-k x\">ArrayList&lt;&gt;</span><span class=\"x x-last\">();</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"90\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-07T08:56:50Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+", "originalCommit": "18638888322ded97c886da6c7fbfd21591f938fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTQ5OA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241498", "bodyText": "I would use Collections.emptyList() here.", "author": "druciak", "createdAt": "2020-03-07T09:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTgwNw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389239807", "body": "```suggestion\r\nallChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId()).collect(Collectors.toList());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId()).collect(Collectors.toList());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"269\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"269\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"x x-first\">allChannels </span><span class=\"pl-k x\">=</span><span class=\"x\"> getThing()</span><span class=\"pl-k x\">.</span><span class=\"x\">getChannels()</span><span class=\"pl-k x\">.</span><span class=\"x\">stream()</span><span class=\"pl-k x\">.</span><span class=\"x\">map(channel </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> channel</span><span class=\"pl-k x\">.</span><span class=\"x\">getUID()</span><span class=\"pl-k x\">.</span><span class=\"x\">getId())</span><span class=\"pl-k x\">.</span><span class=\"x\">collect(</span><span class=\"pl-smi x\">Collectors</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toList());</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-07T08:58:37Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+", "originalCommit": "18638888322ded97c886da6c7fbfd21591f938fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MDAwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389240009", "body": "```suggestion\r\nif (goeResponse == null) {\r\n    allChannels.forEach(channel -> updateState(channel, UndefType.UNDEF));\r\n} else {\r\n   allChannels.forEach(channel -> updateState(channel, getValue(channel, goeResponse)));\r\n}\r\n\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            if (goeResponse == null) {\n          \n          \n            \n                allChannels.forEach(channel -> updateState(channel, UndefType.UNDEF));\n          \n          \n            \n            } else {\n          \n          \n            \n               allChannels.forEach(channel -> updateState(channel, getValue(channel, goeResponse)));\n          \n          \n            \n            }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"328\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"328\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k x x-first\">if</span><span class=\"x\"> (goeResponse </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-c1 x\">null</span><span class=\"x x-last\">) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"329\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    allChannels<span class=\"pl-k\">.</span>forEach(channel <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> updateState(channel, <span class=\"pl-smi\">UndefType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>UNDEF</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"330\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">} <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"331\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   allChannels<span class=\"pl-k\">.</span>forEach(channel <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> updateState(channel, getValue(channel, goeResponse)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"332\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">}</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"333\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-07T09:03:04Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");\n+            result = null;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        return null;\n+    }\n+\n+    private void refresh() {\n+        // Request new GoE data\n+        retryCounter = 0;\n+        GoEStatusResponseDTO goeResponse = getGoEData();\n+", "originalCommit": "18638888322ded97c886da6c7fbfd21591f938fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MDU3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389240579", "bodyText": "Seems to work, will do it like this than. Thanks for your input.", "author": "SamuelBrucksch", "createdAt": "2020-03-07T09:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MDAwOQ=="}], "type": "inlineReview"}, {"oid": "0e1e2a9b724d7b9ca764c196e71479c830772218", "url": "https://github.com/openhab/openhab-addons/commit/0e1e2a9b724d7b9ca764c196e71479c830772218", "message": "final changes to updateState\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-07T09:15:28Z", "type": "commit"}, {"oid": "6758e5d2c726637b2c7d869e9429312d5455bead", "url": "https://github.com/openhab/openhab-addons/commit/6758e5d2c726637b2c7d869e9429312d5455bead", "message": "codestyle fixes\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-07T09:22:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241748", "body": "Can you be sure the command here will be always of QuantityType type? I would split this switch into two `if` checks: `if (command instanceof QuantityType)` and `if (command instanceof OnOffType)`.", "bodyText": "Can you be sure the command here will be always of QuantityType type? I would split this switch into two if checks: if (command instanceof QuantityType) and if (command instanceof OnOffType).", "bodyHTML": "<p dir=\"auto\">Can you be sure the command here will be always of QuantityType type? I would split this switch into two <code>if</code> checks: <code>if (command instanceof QuantityType)</code> and <code>if (command instanceof OnOffType)</code>.</p>", "author": "druciak", "createdAt": "2020-03-07T09:35:37Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "originalCommit": "911db7af5bde18d6a297da971ee775d94c29d01e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjYzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389242635", "bodyText": "max amps is always quantity type, yes. How could it be something differentif i check for the ID beforehand?", "author": "SamuelBrucksch", "createdAt": "2020-03-07T09:52:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0Mjc3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389242774", "bodyText": "The channel is of QuantityType, but I am talking about passed command. I believe you can send whatever command you want using rules. Also, when there is new command introduced, something similar to REFRESH command, you will get cast exception here.", "author": "druciak", "createdAt": "2020-03-07T09:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MzIxMA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389243210", "bodyText": "Ok i get it. But then it gets quite complicated, command can be either string, or number or whatever. If you send StringType \"6\" or  DecimalType 6 it could both work. Guess i have to write a wrapper method that checks for the command and returns something.", "author": "SamuelBrucksch", "createdAt": "2020-03-07T10:01:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0Mzc4MA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389243780", "bodyText": "No. Commands are strongly typed in openHAB. Checking for instanceof QuantityType is enough. Commands send from rules are correctly casted before.", "author": "J-N-K", "createdAt": "2020-03-07T10:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NDE4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389244182", "bodyText": "Ok so i do not have to do anything here? Will quickly check with a custom rule...", "author": "SamuelBrucksch", "createdAt": "2020-03-07T10:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NTA0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389245045", "bodyText": "java.lang.ClassCastException: org.eclipse.smarthome.core.library.types.DecimalType cannot be cast to org.eclipse.smarthome.core.library.types.QuantityType\n\nSo i guess i have the wrong type here anyway.", "author": "SamuelBrucksch", "createdAt": "2020-03-07T10:35:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NTM0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389245346", "bodyText": "However if i send a string in the rule instead of an int value it still says decimaltype in the exception, so i guess no need to check for different types.", "author": "SamuelBrucksch", "createdAt": "2020-03-07T10:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NTcwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389245700", "bodyText": "Changed type to decimaltype and tested a rule with string and number and both worked.", "author": "SamuelBrucksch", "createdAt": "2020-03-07T10:47:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MjI0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389252249", "bodyText": "This is what I do: check type before casting, because the value comes fron the outside and there is no guarantee it will be of proper type. It happened to my binding (satel) when REFRESH command had been introduced - the binding was crashing on this command because there wasn't type checking in one handler.\nBut if you feel that this is not needed here, just leave as it is.", "author": "druciak", "createdAt": "2020-03-07T12:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc2MA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241760", "body": "I would remove that `if` and check the type for each channel. See my comment below.", "bodyText": "I would remove that if and check the type for each channel. See my comment below.", "bodyHTML": "<p dir=\"auto\">I would remove that <code>if</code> and check the type for each channel. See my comment below.</p>", "author": "druciak", "createdAt": "2020-03-07T09:35:50Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {", "originalCommit": "911db7af5bde18d6a297da971ee775d94c29d01e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTk1NA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241954", "body": "I really don't like this. Just return `null` value in case an error and handle retry in `refresh` method. Also I wouldn't do a retry in case of `InterruptedException`. And remove `retryCounter` completely.", "bodyText": "I really don't like this. Just return null value in case an error and handle retry in refresh method. Also I wouldn't do a retry in case of InterruptedException. And remove retryCounter completely.", "bodyHTML": "<p dir=\"auto\">I really don't like this. Just return <code>null</code> value in case an error and handle retry in <code>refresh</code> method. Also I wouldn't do a retry in case of <code>InterruptedException</code>. And remove <code>retryCounter</code> completely.</p>", "author": "druciak", "createdAt": "2020-03-07T09:39:27Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }", "originalCommit": "911db7af5bde18d6a297da971ee775d94c29d01e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjkwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389242901", "bodyText": "I guess you are right, its not up to the binding to fix bad wifi", "author": "SamuelBrucksch", "createdAt": "2020-03-07T09:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTk5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241992", "body": "Imo better would be to move it to `refresh` method.", "bodyText": "Imo better would be to move it to refresh method.", "bodyHTML": "<p dir=\"auto\">Imo better would be to move it to <code>refresh</code> method.</p>", "author": "druciak", "createdAt": "2020-03-07T09:40:40Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");\n+            result = null;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;", "originalCommit": "911db7af5bde18d6a297da971ee775d94c29d01e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjAwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389242001", "body": "Imo better would be to move it to `refresh` method.", "bodyText": "Imo better would be to move it to refresh method.", "bodyHTML": "<p dir=\"auto\">Imo better would be to move it to <code>refresh</code> method.</p>", "author": "druciak", "createdAt": "2020-03-07T09:40:51Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");", "originalCommit": "911db7af5bde18d6a297da971ee775d94c29d01e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b3d4633d276d2deb201a155c80b9be901780435e", "url": "https://github.com/openhab/openhab-addons/commit/b3d4633d276d2deb201a155c80b9be901780435e", "message": "removed retry\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-07T10:08:41Z", "type": "commit"}, {"oid": "f77c8aa6dca02e2994c3fa105659abf60ad1a123", "url": "https://github.com/openhab/openhab-addons/commit/f77c8aa6dca02e2994c3fa105659abf60ad1a123", "message": "cleanup counter variable\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-07T10:09:55Z", "type": "commit"}, {"oid": "df0c21359f3e4636138c752782ec83a9bc0a6681", "url": "https://github.com/openhab/openhab-addons/commit/df0c21359f3e4636138c752782ec83a9bc0a6681", "message": "correct command type cast\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-07T10:41:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MzI5MA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389253290", "body": "```suggestion\r\n    @Override\r\n    public void handleCommand(ChannelUID channelUID, Command command) {\r\n        String key = null;\r\n        String value = null;\r\n        switch (channelUID.getId()) {\r\n            case MAX_AMPERE:\r\n                key = \"amp\";\r\n                if (command instanceof DecimalType) {\r\n                    value = String.valueOf(((DecimalType) command).intValue());\r\n                } else if (command instanceof QuantityType<?>) {\r\n                    value = String.valueOf((QuantityType<ElectricalCurrent>) command).toUnit(SmarthomeUnits.AMPERE).intValue());\r\n                }\r\n                break;\r\n```\r\n\r\nSomething like this would be the correct way to do it. This also makes sure that QuantityType commands have the correct unit. Imagine someone sends a command  `10000 mA` (makes no sense, but you never now). You would probably send something like 10 for 10 amps instead of 10000 (which would happen if you take the intValue before conversion.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n          \n            \n                @SuppressWarnings(\"unchecked\")\n          \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {\n          \n          \n            \n                    if (command instanceof RefreshType) {\n          \n          \n            \n                        refresh();\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    String key = null;\n          \n          \n            \n                    String value = null;\n          \n          \n            \n                    switch (channelUID.getId()) {\n          \n          \n            \n                        case MAX_AMPERE:\n          \n          \n            \n                            key = \"amp\";\n          \n          \n            \n                            value = ((QuantityType<?>)command).intValue() + \"\";\n          \n          \n            \n                            break;\n          \n          \n            \n                @Override\n          \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {\n          \n          \n            \n                    String key = null;\n          \n          \n            \n                    String value = null;\n          \n          \n            \n                    switch (channelUID.getId()) {\n          \n          \n            \n                        case MAX_AMPERE:\n          \n          \n            \n                            key = \"amp\";\n          \n          \n            \n                            if (command instanceof DecimalType) {\n          \n          \n            \n                                value = String.valueOf(((DecimalType) command).intValue());\n          \n          \n            \n                            } else if (command instanceof QuantityType<?>) {\n          \n          \n            \n                                value = String.valueOf((QuantityType<ElectricalCurrent>) command).toUnit(SmarthomeUnits.AMPERE).intValue());\n          \n          \n            \n                            }\n          \n          \n            \n                            break;\n          \n      \n    \n    \n  \n\nSomething like this would be the correct way to do it. This also makes sure that QuantityType commands have the correct unit. Imagine someone sends a command  10000 mA (makes no sense, but you never now). You would probably send something like 10 for 10 amps instead of 10000 (which would happen if you take the intValue before conversion.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"233\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Override</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"234\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@SuppressWarnings</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>unchecked<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"235\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> handleCommand(<span class=\"pl-smi\">ChannelUID</span> channelUID, <span class=\"pl-smi\">Command</span> command) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"236\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (command <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">RefreshType</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"237\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            refresh();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"238\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">return</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"239\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"240\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"241\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">String</span> key <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"242\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">String</span> value <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"243\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">switch</span> (channelUID<span class=\"pl-k\">.</span>getId()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"244\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">case</span> <span class=\"pl-c1\">MAX_AMPERE</span><span class=\"pl-k\">:</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"245\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                key <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>amp<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"246\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                value <span class=\"pl-k\">=</span> ((<span class=\"pl-k\">QuantityType&lt;?&gt;</span>)command)<span class=\"pl-k\">.</span>intValue() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"247\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">break</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"233\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Override</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"234\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> handleCommand(<span class=\"pl-smi\">ChannelUID</span> channelUID, <span class=\"pl-smi\">Command</span> command) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"235\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">String</span> key <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"236\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">String</span> value <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"237\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">switch</span> (channelUID<span class=\"pl-k\">.</span>getId()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"238\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">case</span> <span class=\"pl-c1\">MAX_AMPERE</span><span class=\"pl-k\">:</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"239\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                key <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>amp<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"240\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">if</span> (command <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">DecimalType</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"241\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    value <span class=\"pl-k\">=</span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>valueOf(((<span class=\"pl-smi\">DecimalType</span>) command)<span class=\"pl-k\">.</span>intValue());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"242\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (command <span class=\"pl-k\">instanceof</span> <span class=\"pl-k\">QuantityType&lt;?&gt;</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"243\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    value <span class=\"pl-k\">=</span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>valueOf((<span class=\"pl-k\">QuantityType&lt;<span class=\"pl-smi\">ElectricalCurrent</span>&gt;</span>) command)<span class=\"pl-k\">.</span>toUnit(<span class=\"pl-smi\">SmarthomeUnits</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>AMPERE</span>)<span class=\"pl-k\">.</span>intValue());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"244\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"245\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">break</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Something like this would be the correct way to do it. This also makes sure that QuantityType commands have the correct unit. Imagine someone sends a command  <code>10000 mA</code> (makes no sense, but you never now). You would probably send something like 10 for 10 amps instead of 10000 (which would happen if you take the intValue before conversion.</p>", "author": "J-N-K", "createdAt": "2020-03-07T13:02:24Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "originalCommit": "911db7af5bde18d6a297da971ee775d94c29d01e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NDI3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389254279", "bodyText": "Fine for me, I can do that later. Guess this makes it more stable.", "author": "SamuelBrucksch", "createdAt": "2020-03-07T13:19:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MzI5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NDMzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389254331", "bodyText": "Thanks. I really like working with you.", "author": "J-N-K", "createdAt": "2020-03-07T13:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MzI5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NjM2NA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389266364", "bodyText": "I just found how to define UoM in rules here:\nhttps://www.openhab.org/docs/configuration/rules-dsl.html#number-item\nSo i wrote this code in a rule to test it:\nvar current = 5|A\nvar mA = current.toUnit(\"mA\")\nGoEChargerBindingThingMaxAmpere.sendCommand(mA)\n\nThis causes an error, however GoEChargerBindingThingMaxAmpere.sendCommand(mA.intValue) works, GoEChargerBindingThingMaxAmpere.sendCommand(\"5000\") also works and both are converted to DecimalType.\nSo to me it looks like it is not possible to send a QuantityType as command. Or am i doing anything wrong here?", "author": "SamuelBrucksch", "createdAt": "2020-03-07T16:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MzI5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI3NTMwMw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389275303", "bodyText": "var current = 5|A\nvar mA = current.toUnit(\"mA\")\nGoEChargerBindingThingMaxAmpere.sendCommand(mA.toString)\n\nEdit: at least works. I must admit I didn't check if the command is quantiytype then.", "author": "J-N-K", "createdAt": "2020-03-07T17:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MzI5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMDM3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389300377", "bodyText": "Yeah that one works. It's of type QuantityType. Will upload the changes in a sec.", "author": "SamuelBrucksch", "createdAt": "2020-03-07T17:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MzI5MA=="}], "type": "inlineReview"}, {"oid": "e24b37c67c94c7e97e509d66cc2720962374f24b", "url": "https://github.com/openhab/openhab-addons/commit/e24b37c67c94c7e97e509d66cc2720962374f24b", "message": "added instance of checks for commands\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-07T18:03:55Z", "type": "commit"}, {"oid": "1eacc122159fc59a7b8c86f45018dbe0de153538", "url": "https://github.com/openhab/openhab-addons/commit/1eacc122159fc59a7b8c86f45018dbe0de153538", "message": "checkstyle corrections\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-07T18:05:52Z", "type": "commit"}, {"oid": "8ce222935670593bd7546637b4034bb1fcf38f4d", "url": "https://github.com/openhab/openhab-addons/commit/8ce222935670593bd7546637b4034bb1fcf38f4d", "message": "fixed wrong quantity type\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-07T18:08:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTI3OA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389301278", "body": "I think you can remove this comment. If you did not receive an error, you can assume that it worked.  And the next refresh will show the updated state.\r\n```suggestion\r\n```", "bodyText": "I think you can remove this comment. If you did not receive an error, you can assume that it worked.  And the next refresh will show the updated state.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // TODO check if value really changed", "bodyHTML": "<p dir=\"auto\">I think you can remove this comment. If you did not receive an error, you can assume that it worked.  And the next refresh will show the updated state.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">            </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\"> TODO check if value really changed</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-07T18:13:24Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed", "originalCommit": "8ce222935670593bd7546637b4034bb1fcf38f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMzExOA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389303118", "bodyText": "Guess you are right here...", "author": "SamuelBrucksch", "createdAt": "2020-03-07T18:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTI3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTMyMw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389301323", "body": "Can be removed since you now check the instance\r\n```suggestion\r\n```", "bodyText": "Can be removed since you now check the instance\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @SuppressWarnings(\"unchecked\")", "bodyHTML": "<p dir=\"auto\">Can be removed since you now check the instance</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">    </span><span class=\"pl-k x\">@SuppressWarnings</span><span class=\"x\">(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">unchecked</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">)</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-03-07T18:13:54Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")", "originalCommit": "8ce222935670593bd7546637b4034bb1fcf38f4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTM0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389301343", "body": "```suggestion\r\n    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\r\n```\r\n\r\nno need to have this public", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n          \n          \n            \n                private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n          \n      \n    \n    \n  \n\nno need to have this public", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first x-last\">public</span> <span class=\"pl-smi\">State</span> getValue(<span class=\"pl-smi\">String</span> channelId, <span class=\"pl-smi\">GoEStatusResponseDTO</span> goeResponse) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first x-last\">private</span> <span class=\"pl-smi\">State</span> getValue(<span class=\"pl-smi\">String</span> channelId, <span class=\"pl-smi\">GoEStatusResponseDTO</span> goeResponse) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">no need to have this public</p>", "author": "J-N-K", "createdAt": "2020-03-07T18:14:20Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {", "originalCommit": "8ce222935670593bd7546637b4034bb1fcf38f4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8", "url": "https://github.com/openhab/openhab-addons/commit/16a9bfdb35e750d3fa2f9f64e20d13d587476bf8", "message": "last changesfrom PR review\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-07T19:03:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTAyMw==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389355023", "body": "Is this TODO still relevant?", "bodyText": "Is this TODO still relevant?", "bodyHTML": "<p dir=\"auto\">Is this TODO still relevant?</p>", "author": "wborn", "createdAt": "2020-03-08T10:17:25Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?", "originalCommit": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2ODA2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389368062", "bodyText": "Yes, i guess i will output strings instead. The values represent these states:\n1: READY_NO_CAR\n2: CHARGING\n3: WAITING_FOR_CAR\n4: CHARGING_DONE_CAR_CONNECTED", "author": "SamuelBrucksch", "createdAt": "2020-03-08T13:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTI1MA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389355250", "body": "You can use the `type` parameter straight away instead of first assigning it to `urlStr` or rename it from `type` to `urlStr`.\r\n\r\n```suggestion\r\n        return type.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\r\n```", "bodyText": "You can use the type parameter straight away instead of first assigning it to urlStr or rename it from type to urlStr.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n          \n          \n            \n                    return type.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));", "bodyHTML": "<p dir=\"auto\">You can use the <code>type</code> parameter straight away instead of first assigning it to <code>urlStr</code> or rename it from <code>type</code> to <code>urlStr</code>.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"x x-first x-last\">urlStr</span><span class=\"pl-k\">.</span>replace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%IP%<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">.</span>trimToEmpty(config<span class=\"pl-k\">.</span>ip));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"x x-first x-last\">type</span><span class=\"pl-k\">.</span>replace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%IP%<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">.</span>trimToEmpty(config<span class=\"pl-k\">.</span>ip));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "wborn", "createdAt": "2020-03-08T10:20:54Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));", "originalCommit": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2ODE1MA==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389368150", "bodyText": "Good catch, i think i did something else before and in the end forgot to remove it when i did not need it anymore.", "author": "SamuelBrucksch", "createdAt": "2020-03-08T13:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTM5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389355391", "body": "Please remove commented code or uncomment it and make it conditional `logger.isDebugEnabled()` ", "bodyText": "Please remove commented code or uncomment it and make it conditional logger.isDebugEnabled()", "bodyHTML": "<p dir=\"auto\">Please remove commented code or uncomment it and make it conditional <code>logger.isDebugEnabled()</code></p>", "author": "wborn", "createdAt": "2020-03-08T10:23:02Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());", "originalCommit": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NjUzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389356531", "body": "The TODO is still there. Looks like `result` is only used for logging and `getContentAsString` could be relatively expensive. The code would be more compact when you move everything into the try block, e.g.:\r\n\r\n```java\r\n        try {\r\n            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\r\n                    .timeout(5, TimeUnit.SECONDS).send();\r\n            if (logger.isDebugEnabled()) {\r\n                logger.debug(\"Response: {}\", contentResponse.getContentAsString());\r\n            }\r\n            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\r\n        } catch (InterruptedException | TimeoutException | ExecutionException e) {\r\n            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\r\n                    \"No response received on command\");\r\n        }\r\n```\r\n\r\n", "bodyText": "The TODO is still there. Looks like result is only used for logging and getContentAsString could be relatively expensive. The code would be more compact when you move everything into the try block, e.g.:\n        try {\n            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n                    .timeout(5, TimeUnit.SECONDS).send();\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n            }\n            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                    \"No response received on command\");\n        }", "bodyHTML": "<p dir=\"auto\">The TODO is still there. Looks like <code>result</code> is only used for logging and <code>getContentAsString</code> could be relatively expensive. The code would be more compact when you move everything into the try block, e.g.:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        try {\n            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n                    .timeout(5, TimeUnit.SECONDS).send();\n            if (logger.isDebugEnabled()) {\n                logger.debug(&quot;Response: {}&quot;, contentResponse.getContentAsString());\n            }\n            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                    &quot;No response received on command&quot;);\n        }\"><pre>        <span class=\"pl-k\">try</span> {\n            <span class=\"pl-smi\">ContentResponse</span> contentResponse <span class=\"pl-k\">=</span> httpClient<span class=\"pl-k\">.</span>newRequest(urlStr)<span class=\"pl-k\">.</span>method(<span class=\"pl-smi\">HttpMethod</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>POST</span>)\n                    .timeout(<span class=\"pl-c1\">5</span>, <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>SECONDS</span>)<span class=\"pl-k\">.</span>send();\n            <span class=\"pl-k\">if</span> (logger<span class=\"pl-k\">.</span>isDebugEnabled()) {\n                logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Response: {}<span class=\"pl-pds\">\"</span></span>, contentResponse<span class=\"pl-k\">.</span>getContentAsString());\n            }\n            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ONLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>NONE</span>);\n        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">InterruptedException</span> <span class=\"pl-k\">|</span> <span class=\"pl-smi\">TimeoutException</span> <span class=\"pl-k\">|</span> <span class=\"pl-smi\">ExecutionException</span> e) {\n            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>, <span class=\"pl-smi\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE<span class=\"pl-k\">.</span>COMMUNICATION_ERROR</span>,\n                    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No response received on command<span class=\"pl-pds\">\"</span></span>);\n        }</pre></div>", "author": "wborn", "createdAt": "2020-03-08T10:40:28Z", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();", "originalCommit": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2ODMyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389368325", "bodyText": "Guess the result is not needed at the moment, might be better to just check the response code.", "author": "SamuelBrucksch", "createdAt": "2020-03-08T13:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NjUzMQ=="}], "type": "inlineReview"}, {"oid": "a35df76a0907c36e8b9e372e9983983ab42a5621", "url": "https://github.com/openhab/openhab-addons/commit/a35df76a0907c36e8b9e372e9983983ab42a5621", "message": "renaming and review adoptions\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-08T19:51:26Z", "type": "commit"}, {"oid": "2480f64648dc7fa847b0ea9f916ffd65705b1a41", "url": "https://github.com/openhab/openhab-addons/commit/2480f64648dc7fa847b0ea9f916ffd65705b1a41", "message": "fixed readme\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>", "committedDate": "2020-03-08T19:56:42Z", "type": "commit"}, {"oid": "69b2ea12ad24435d635a317d7b2c5acde77ef399", "url": "https://github.com/openhab/openhab-addons/commit/69b2ea12ad24435d635a317d7b2c5acde77ef399", "message": "improved thing-types and accessState\n\nSigned-off-by: Samuel Brucksch <samuel.brucksch@sap.com>", "committedDate": "2020-03-10T08:03:04Z", "type": "commit"}]}