{"pr_number": 944, "pr_title": "feat(engine): add configurable cleanup of historyCleanupJob logs", "pr_author": "mboskamp", "pr_createdAt": "2020-08-27T09:32:42Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/944", "timeline": [{"oid": "2c189d26de12e4f44e345f5b874e19cad693142f", "url": "https://github.com/camunda/camunda-bpm-platform/commit/2c189d26de12e4f44e345f5b874e19cad693142f", "message": "feat(engine): add configurable cleanup of historyCleanupJob logs\n\nRelated to CAM-11695", "committedDate": "2020-08-27T09:26:55Z", "type": "commit"}, {"oid": "f302d21faa9e9e5e8e8d205c0a567cb8acdeda19", "url": "https://github.com/camunda/camunda-bpm-platform/commit/f302d21faa9e9e5e8e8d205c0a567cb8acdeda19", "message": "fix(engine): add null check\n\nRelated to CAM-11695", "committedDate": "2020-08-27T12:11:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIwNjQ0Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/944#discussion_r481206443", "body": "Let's only change a file if it is really necessary. Such a change does not bring much value and makes it harder to find the original commit in which the method was introduced.", "bodyText": "Let's only change a file if it is really necessary. Such a change does not bring much value and makes it harder to find the original commit in which the method was introduced.", "bodyHTML": "<p dir=\"auto\">Let's only change a file if it is really necessary. Such a change does not bring much value and makes it harder to find the original commit in which the method was introduced.</p>", "author": "tasso94", "createdAt": "2020-09-01T15:01:02Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/history/DefaultHistoryRemovalTimeProvider.java", "diffHunk": "@@ -31,6 +31,14 @@\n  */\n public class DefaultHistoryRemovalTimeProvider implements HistoryRemovalTimeProvider {\n \n+  public static Date determineRemovalTime(Date initTime, Integer timeToLive) {\n+    Calendar removalTime = Calendar.getInstance();\n+    removalTime.setTime(initTime);\n+    removalTime.add(Calendar.DATE, timeToLive);\n+    \n+    return removalTime.getTime();\n+  }\n+", "originalCommit": "f302d21faa9e9e5e8e8d205c0a567cb8acdeda19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MzAzMg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/944#discussion_r481993032", "bodyText": "I agree, it was automatically put at the top by my IDE when I made it public static. I moved it back down and switched off that option in the IDE (should have already been off...).", "author": "mboskamp", "createdAt": "2020-09-02T11:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIwNjQ0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyNTAwOA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/944#discussion_r481225008", "body": "```suggestion\r\n    if (HistoryCleanupJobHandler.TYPE.equals(jobEntity.getJobHandlerType())) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (jobEntity.getJobHandlerType() != null && jobEntity.getJobHandlerType().equals(HistoryCleanupJobHandler.TYPE)) {\n          \n          \n            \n                if (HistoryCleanupJobHandler.TYPE.equals(jobEntity.getJobHandlerType())) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">if</span> (<span class=\"x x-first\">jobEntity</span><span class=\"pl-k x\">.</span><span class=\"x\">getJobHandlerType() </span><span class=\"pl-k x\">!=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">null</span><span class=\"x\"> </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x x-last\"> </span>jobEntity<span class=\"pl-k\">.</span>getJobHandlerType()<span class=\"pl-k x x-first\">.</span><span class=\"x\">equals(</span><span class=\"pl-smi x\">HistoryCleanupJobHandler</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">TYPE</span></span>)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">if</span> (<span class=\"pl-smi x x-first\">HistoryCleanupJobHandler</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x\">TYPE</span></span><span class=\"pl-k x\">.</span><span class=\"x x-last\">equals(</span>jobEntity<span class=\"pl-k\">.</span>getJobHandlerType())) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tasso94", "createdAt": "2020-09-01T15:19:37Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java", "diffHunk": "@@ -1098,6 +1101,15 @@ protected void initHistoricJobLogEvent(HistoricJobLogEventEntity evt, Job job, H\n     String hostName = Context.getCommandContext().getProcessEngineConfiguration().getHostname();\n     evt.setHostname(hostName);\n \n+    if (jobEntity.getJobHandlerType() != null && jobEntity.getJobHandlerType().equals(HistoryCleanupJobHandler.TYPE)) {", "originalCommit": "f302d21faa9e9e5e8e8d205c0a567cb8acdeda19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0MzYzMw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/944#discussion_r481243633", "body": "We should handle (probably log) the potential exceptions and write no removal time in case the TTL cannot be parsed. Even though the property was parsed on engine start, it can be changed to an invalid value via plugin on post init.", "bodyText": "We should handle (probably log) the potential exceptions and write no removal time in case the TTL cannot be parsed. Even though the property was parsed on engine start, it can be changed to an invalid value via plugin on post init.", "bodyHTML": "<p dir=\"auto\">We should handle (probably log) the potential exceptions and write no removal time in case the TTL cannot be parsed. Even though the property was parsed on engine start, it can be changed to an invalid value via plugin on post init.</p>", "author": "tasso94", "createdAt": "2020-09-01T15:46:43Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java", "diffHunk": "@@ -1098,6 +1101,15 @@ protected void initHistoricJobLogEvent(HistoricJobLogEventEntity evt, Job job, H\n     String hostName = Context.getCommandContext().getProcessEngineConfiguration().getHostname();\n     evt.setHostname(hostName);\n \n+    if (jobEntity.getJobHandlerType() != null && jobEntity.getJobHandlerType().equals(HistoryCleanupJobHandler.TYPE)) {\n+      String timeToLive = Context.getProcessEngineConfiguration().getHistoryCleanupJobLogTimeToLive();\n+      if(timeToLive != null) {\n+        Integer timeToLiveDays = ParseUtil.parseHistoryTimeToLive(timeToLive);", "originalCommit": "f302d21faa9e9e5e8e8d205c0a567cb8acdeda19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5MDg1MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/944#discussion_r481790851", "body": "At the beginning of the method, we already call `ClockUtil#getCurrentTime` to set the timestamp. Let's reuse the value and not have a difference of some milliseconds between log creation and removal time.", "bodyText": "At the beginning of the method, we already call ClockUtil#getCurrentTime to set the timestamp. Let's reuse the value and not have a difference of some milliseconds between log creation and removal time.", "bodyHTML": "<p dir=\"auto\">At the beginning of the method, we already call <code>ClockUtil#getCurrentTime</code> to set the timestamp. Let's reuse the value and not have a difference of some milliseconds between log creation and removal time.</p>", "author": "tasso94", "createdAt": "2020-09-02T06:38:09Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java", "diffHunk": "@@ -1098,6 +1101,15 @@ protected void initHistoricJobLogEvent(HistoricJobLogEventEntity evt, Job job, H\n     String hostName = Context.getCommandContext().getProcessEngineConfiguration().getHostname();\n     evt.setHostname(hostName);\n \n+    if (jobEntity.getJobHandlerType() != null && jobEntity.getJobHandlerType().equals(HistoryCleanupJobHandler.TYPE)) {\n+      String timeToLive = Context.getProcessEngineConfiguration().getHistoryCleanupJobLogTimeToLive();\n+      if(timeToLive != null) {\n+        Integer timeToLiveDays = ParseUtil.parseHistoryTimeToLive(timeToLive);\n+        Date removalTime = DefaultHistoryRemovalTimeProvider.determineRemovalTime(ClockUtil.getCurrentTime(), timeToLiveDays);", "originalCommit": "f302d21faa9e9e5e8e8d205c0a567cb8acdeda19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5MjYxNQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/944#discussion_r481792615", "body": "We should reset the config in the `tearDownAfterAll` method.", "bodyText": "We should reset the config in the tearDownAfterAll method.", "bodyHTML": "<p dir=\"auto\">We should reset the config in the <code>tearDownAfterAll</code> method.</p>", "author": "tasso94", "createdAt": "2020-09-02T06:40:30Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/HistoryCleanupRemovalTimeTest.java", "diffHunk": "@@ -878,6 +881,43 @@ public void shouldCleanupJobLog() {\n     assertThat(jobLogs.size(), is(0));\n   }\n \n+  @Test\n+  public void shouldCleanupHistoryCleanupJobsFromHistoricJobLog() {\n+    // given\n+    engineConfiguration.setHistoryCleanupJobLogTimeToLive(\"P5D\");", "originalCommit": "f302d21faa9e9e5e8e8d205c0a567cb8acdeda19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc5NDEzNg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/944#discussion_r481794136", "body": "According to our code style guide:\r\n\r\n> Add Javadoc comments to new ProcessEngineConfigurationImpl and ProcessEngineConfiguration properties to make the purpose of the property visible to users and developers without the need of diving into code.", "bodyText": "According to our code style guide:\n\nAdd Javadoc comments to new ProcessEngineConfigurationImpl and ProcessEngineConfiguration properties to make the purpose of the property visible to users and developers without the need of diving into code.", "bodyHTML": "<p dir=\"auto\">According to our code style guide:</p>\n<blockquote>\n<p dir=\"auto\">Add Javadoc comments to new ProcessEngineConfigurationImpl and ProcessEngineConfiguration properties to make the purpose of the property visible to users and developers without the need of diving into code.</p>\n</blockquote>", "author": "tasso94", "createdAt": "2020-09-02T06:42:34Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "diffHunk": "@@ -832,6 +832,8 @@\n   protected Map<String, String> batchOperationsForHistoryCleanup;\n   protected Map<String, Integer> parsedBatchOperationsForHistoryCleanup;\n \n+  protected String historyCleanupJobLogTimeToLive;", "originalCommit": "f302d21faa9e9e5e8e8d205c0a567cb8acdeda19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a8d1ff7f95ffcf900e8a87bddaff0ca6aa7b828d", "url": "https://github.com/camunda/camunda-bpm-platform/commit/a8d1ff7f95ffcf900e8a87bddaff0ca6aa7b828d", "message": "chore(engine): apply suggestions from code review\n\nRelated to CAM-11695", "committedDate": "2020-09-02T13:05:38Z", "type": "commit"}]}