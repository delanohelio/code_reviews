{"pr_number": 943, "pr_title": "feat(engine): add batch operation to set variables", "pr_author": "tasso94", "pr_createdAt": "2020-08-25T16:20:29Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/943", "timeline": [{"oid": "91aad8071df8ae1dcdaefc9ef74ec9293b107008", "url": "https://github.com/camunda/camunda-bpm-platform/commit/91aad8071df8ae1dcdaefc9ef74ec9293b107008", "message": "feat(engine): add batch operation to set variables\n\nrelated to CAM-12301", "committedDate": "2020-08-26T11:37:22Z", "type": "forcePushed"}, {"oid": "ea304f33b9dba22d18936919a9bd662cd9296fc7", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ea304f33b9dba22d18936919a9bd662cd9296fc7", "message": "feat(engine): add batch operation to set variables\n\nrelated to CAM-12301", "committedDate": "2020-08-26T13:13:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1MTAwMQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/943#discussion_r478251001", "body": "can we move this up to the other operation type constants to keep this clean?", "bodyText": "can we move this up to the other operation type constants to keep this clean?", "bodyHTML": "<p dir=\"auto\">can we move this up to the other operation type constants to keep this clean?</p>", "author": "tmetzke", "createdAt": "2020-08-27T08:35:39Z", "path": "engine/src/main/java/org/camunda/bpm/engine/history/UserOperationLogEntry.java", "diffHunk": "@@ -134,6 +134,8 @@\n   public static String CATEGORY_OPERATOR = \"Operator\";\n   public static String CATEGORY_TASK_WORKER = \"TaskWorker\";\n \n+  String OPERATION_TYPE_SET_VARIABLES_BATCH = \"SetVariablesBatch\";", "originalCommit": "ea304f33b9dba22d18936919a9bd662cd9296fc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0MDExMQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/943#discussion_r478340111", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-08-27T11:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1MTAwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NDE2Ng==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/943#discussion_r478254166", "body": "I could imagine it would be nicer to create only one DELETE statement by adding a \"deleteVariableInstancesByBatchId\" method in the VariableInstanceManager and a prepared SQL mapping in the respective MyBatis mapping file?", "bodyText": "I could imagine it would be nicer to create only one DELETE statement by adding a \"deleteVariableInstancesByBatchId\" method in the VariableInstanceManager and a prepared SQL mapping in the respective MyBatis mapping file?", "bodyHTML": "<p dir=\"auto\">I could imagine it would be nicer to create only one DELETE statement by adding a \"deleteVariableInstancesByBatchId\" method in the VariableInstanceManager and a prepared SQL mapping in the respective MyBatis mapping file?</p>", "author": "tmetzke", "createdAt": "2020-08-27T08:40:46Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/batch/BatchEntity.java", "diffHunk": "@@ -368,6 +374,15 @@ public void delete(boolean cascadeToHistory, boolean deleteJobs) {\n     }\n   }\n \n+  protected void deleteVariables(CommandContext commandContext) {\n+    VariableInstanceManager variableInstanceManager = commandContext.getVariableInstanceManager();\n+\n+    List<VariableInstanceEntity> variableInstances =\n+        variableInstanceManager.selectByBatchId(id);\n+\n+    variableInstances.forEach(VariableInstanceEntity::delete);\n+  }\n+", "originalCommit": "ea304f33b9dba22d18936919a9bd662cd9296fc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQwNDg0NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/943#discussion_r478404844", "bodyText": "I already thought about this but discarded the idea since one delete statement is not enough. We need to delete the variable instances AND the associated byte arrays. While the variable instance delete statement would be relatively simple, the delete statement for the byte arrays needs to subselect over the variables table. Some databases (like MySQL) might perform poorly with subselects, and the performance improvement we would gain for this specific use case is probably neglectable.", "author": "tasso94", "createdAt": "2020-08-27T13:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NDE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQwNTY1Nw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/943#discussion_r478405657", "bodyText": "Agree \ud83d\udc4d Let's keep it as-is then. Thanks for the input!", "author": "tmetzke", "createdAt": "2020-08-27T13:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1NDE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1ODE0Nw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/943#discussion_r478258147", "body": "How about we use the fancy map collector? \ud83d\ude03\r\n```suggestion\r\n    Map<String, Object> variables = variableInstances.stream()\r\n        .collect(Collectors.toMap(VariableInstanceEntity::getName, VariableInstanceEntity::getTypedValue));\r\n```", "bodyText": "How about we use the fancy map collector? \ud83d\ude03\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Map<String, Object> variables = new HashMap<>();\n          \n          \n            \n                variableInstances.forEach(variableInstance -> {\n          \n          \n            \n                  String variableName = variableInstance.getName();\n          \n          \n            \n                  TypedValue variableValue = variableInstance.getTypedValue();\n          \n          \n            \n            \n          \n          \n            \n                  variables.put(variableName, variableValue);\n          \n          \n            \n                });\n          \n          \n            \n                Map<String, Object> variables = variableInstances.stream()\n          \n          \n            \n                    .collect(Collectors.toMap(VariableInstanceEntity::getName, VariableInstanceEntity::getTypedValue));", "bodyHTML": "<p dir=\"auto\">How about we use the fancy map collector? <g-emoji class=\"g-emoji\" alias=\"smiley\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f603.png\">\ud83d\ude03</g-emoji></p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt;</span> variables <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    variableInstances<span class=\"pl-k\">.</span>forEach(variableInstance <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">String</span> variableName <span class=\"pl-k\">=</span> variableInstance<span class=\"pl-k\">.</span>getName();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">TypedValue</span> variableValue <span class=\"pl-k\">=</span> variableInstance<span class=\"pl-k\">.</span>getTypedValue();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      variables<span class=\"pl-k\">.</span>put(variableName, variableValue);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    });</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt;</span> variables <span class=\"pl-k\">=</span> variableInstances<span class=\"pl-k\">.</span>stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toMap(<span class=\"pl-smi\">VariableInstanceEntity</span><span class=\"pl-k\">::</span>getName, <span class=\"pl-smi\">VariableInstanceEntity</span><span class=\"pl-k\">::</span>getTypedValue));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tmetzke", "createdAt": "2020-08-27T08:47:20Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/batch/variables/BatchSetVariablesHandler.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.batch.variables;\n+\n+import org.camunda.bpm.engine.batch.Batch;\n+import org.camunda.bpm.engine.impl.batch.AbstractBatchJobHandler;\n+import org.camunda.bpm.engine.impl.batch.BatchConfiguration;\n+import org.camunda.bpm.engine.impl.batch.BatchJobConfiguration;\n+import org.camunda.bpm.engine.impl.batch.BatchJobContext;\n+import org.camunda.bpm.engine.impl.batch.BatchJobDeclaration;\n+import org.camunda.bpm.engine.impl.interceptor.CommandContext;\n+import org.camunda.bpm.engine.impl.jobexecutor.JobDeclaration;\n+import org.camunda.bpm.engine.impl.json.JsonObjectConverter;\n+import org.camunda.bpm.engine.impl.persistence.entity.ByteArrayEntity;\n+import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;\n+import org.camunda.bpm.engine.impl.persistence.entity.MessageEntity;\n+import org.camunda.bpm.engine.impl.persistence.entity.VariableInstanceEntity;\n+import org.camunda.bpm.engine.variable.value.TypedValue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class BatchSetVariablesHandler extends AbstractBatchJobHandler<BatchConfiguration> {\n+\n+  public static final BatchJobDeclaration JOB_DECLARATION =\n+      new BatchJobDeclaration(Batch.TYPE_SET_VARIABLES);\n+\n+  @Override\n+  public void execute(BatchJobConfiguration configuration,\n+                      ExecutionEntity execution,\n+                      CommandContext commandContext,\n+                      String tenantId) {\n+\n+    String byteArrayId = configuration.getConfigurationByteArrayId();\n+    ByteArrayEntity byteArray = findByteArrayById(byteArrayId, commandContext);\n+\n+    byte[] configurationByteArray = byteArray.getBytes();\n+    BatchConfiguration batchConfiguration = readConfiguration(configurationByteArray);\n+\n+    String batchId = batchConfiguration.getBatchId();\n+    List<VariableInstanceEntity> variableInstances = commandContext.getVariableInstanceManager()\n+        .selectByBatchId(batchId);\n+\n+    Map<String, Object> variables = new HashMap<>();\n+    variableInstances.forEach(variableInstance -> {\n+      String variableName = variableInstance.getName();\n+      TypedValue variableValue = variableInstance.getTypedValue();\n+\n+      variables.put(variableName, variableValue);\n+    });", "originalCommit": "ea304f33b9dba22d18936919a9bd662cd9296fc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0MDQ1Ng==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/943#discussion_r478340456", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-08-27T11:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1ODE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwMjM2Ng==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/943#discussion_r478302366", "body": "Could we handle the context outside of the loop, so we don't do this for every instance?", "bodyText": "Could we handle the context outside of the loop, so we don't do this for every instance?", "bodyHTML": "<p dir=\"auto\">Could we handle the context outside of the loop, so we don't do this for every instance?</p>", "author": "tmetzke", "createdAt": "2020-08-27T10:01:44Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/batch/variables/BatchSetVariablesHandler.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.batch.variables;\n+\n+import org.camunda.bpm.engine.batch.Batch;\n+import org.camunda.bpm.engine.impl.batch.AbstractBatchJobHandler;\n+import org.camunda.bpm.engine.impl.batch.BatchConfiguration;\n+import org.camunda.bpm.engine.impl.batch.BatchJobConfiguration;\n+import org.camunda.bpm.engine.impl.batch.BatchJobContext;\n+import org.camunda.bpm.engine.impl.batch.BatchJobDeclaration;\n+import org.camunda.bpm.engine.impl.interceptor.CommandContext;\n+import org.camunda.bpm.engine.impl.jobexecutor.JobDeclaration;\n+import org.camunda.bpm.engine.impl.json.JsonObjectConverter;\n+import org.camunda.bpm.engine.impl.persistence.entity.ByteArrayEntity;\n+import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;\n+import org.camunda.bpm.engine.impl.persistence.entity.MessageEntity;\n+import org.camunda.bpm.engine.impl.persistence.entity.VariableInstanceEntity;\n+import org.camunda.bpm.engine.variable.value.TypedValue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class BatchSetVariablesHandler extends AbstractBatchJobHandler<BatchConfiguration> {\n+\n+  public static final BatchJobDeclaration JOB_DECLARATION =\n+      new BatchJobDeclaration(Batch.TYPE_SET_VARIABLES);\n+\n+  @Override\n+  public void execute(BatchJobConfiguration configuration,\n+                      ExecutionEntity execution,\n+                      CommandContext commandContext,\n+                      String tenantId) {\n+\n+    String byteArrayId = configuration.getConfigurationByteArrayId();\n+    ByteArrayEntity byteArray = findByteArrayById(byteArrayId, commandContext);\n+\n+    byte[] configurationByteArray = byteArray.getBytes();\n+    BatchConfiguration batchConfiguration = readConfiguration(configurationByteArray);\n+\n+    String batchId = batchConfiguration.getBatchId();\n+    List<VariableInstanceEntity> variableInstances = commandContext.getVariableInstanceManager()\n+        .selectByBatchId(batchId);\n+\n+    Map<String, Object> variables = new HashMap<>();\n+    variableInstances.forEach(variableInstance -> {\n+      String variableName = variableInstance.getName();\n+      TypedValue variableValue = variableInstance.getTypedValue();\n+\n+      variables.put(variableName, variableValue);\n+    });\n+\n+    List<String> processInstanceIds = batchConfiguration.getIds();\n+    for (String processInstanceId : processInstanceIds) {\n+      boolean initialLegacyRestrictions =\n+          commandContext.isRestrictUserOperationLogToAuthenticatedUsers();\n+\n+      commandContext.disableUserOperationLog();\n+      commandContext.setRestrictUserOperationLogToAuthenticatedUsers(true);\n+\n+      try {\n+        commandContext.getProcessEngineConfiguration()\n+            .getRuntimeService()\n+            .setVariables(processInstanceId, variables);\n+\n+      } finally {\n+        commandContext.enableUserOperationLog();\n+        commandContext.setRestrictUserOperationLogToAuthenticatedUsers(initialLegacyRestrictions);", "originalCommit": "ea304f33b9dba22d18936919a9bd662cd9296fc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0MDUwNQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/943#discussion_r478340505", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-08-27T11:17:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwMjM2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwNjcxNQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/943#discussion_r478306715", "body": "To stay consistent here, maybe\r\n```suggestion\r\n  public List<VariableInstanceEntity> findVariableInstancesByBatchId(String batchId) {\r\n```", "bodyText": "To stay consistent here, maybe\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public List<VariableInstanceEntity> selectByBatchId(String batchId) {\n          \n          \n            \n              public List<VariableInstanceEntity> findVariableInstancesByBatchId(String batchId) {", "bodyHTML": "<p dir=\"auto\">To stay consistent here, maybe</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">VariableInstanceEntity</span>&gt;</span> <span class=\"x x-first x-last\">selectByBatchId</span>(<span class=\"pl-smi\">String</span> batchId) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">VariableInstanceEntity</span>&gt;</span> <span class=\"x x-first x-last\">findVariableInstancesByBatchId</span>(<span class=\"pl-smi\">String</span> batchId) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tmetzke", "createdAt": "2020-08-27T10:08:43Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceManager.java", "diffHunk": "@@ -96,4 +97,10 @@ protected void configureQuery(VariableInstanceQueryImpl query) {\n     getTenantManager().configureQuery(query);\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n+  public List<VariableInstanceEntity> selectByBatchId(String batchId) {", "originalCommit": "ea304f33b9dba22d18936919a9bd662cd9296fc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0MDU2Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/943#discussion_r478340563", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-08-27T11:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwNjcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMDQzOA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/943#discussion_r478310438", "body": "It might be useful to use this here, in case there are instances no deployment can be found for\r\n```suggestion\r\n      elementConfiguration.addDeploymentMappings(mappings, processInstanceIds);\r\n```", "bodyText": "It might be useful to use this here, in case there are instances no deployment can be found for\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  elementConfiguration.addDeploymentMappings(mappings);\n          \n          \n            \n                  elementConfiguration.addDeploymentMappings(mappings, processInstanceIds);", "bodyHTML": "<p dir=\"auto\">It might be useful to use this here, in case there are instances no deployment can be found for</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"147\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      elementConfiguration<span class=\"pl-k\">.</span>addDeploymentMappings(mappings);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"147\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      elementConfiguration<span class=\"pl-k\">.</span>addDeploymentMappings(mappings<span class=\"x x-first x-last\">, processInstanceIds</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tmetzke", "createdAt": "2020-08-27T10:15:46Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/batch/variables/SetVariablesToProcessInstancesBatchCmd.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd.batch.variables;\n+\n+import org.camunda.bpm.engine.BadUserRequestException;\n+import org.camunda.bpm.engine.ProcessEngineException;\n+import org.camunda.bpm.engine.authorization.BatchPermissions;\n+import org.camunda.bpm.engine.batch.Batch;\n+import org.camunda.bpm.engine.history.HistoricProcessInstanceQuery;\n+import org.camunda.bpm.engine.history.UserOperationLogEntry;\n+import org.camunda.bpm.engine.impl.HistoricProcessInstanceQueryImpl;\n+import org.camunda.bpm.engine.impl.ProcessInstanceQueryImpl;\n+import org.camunda.bpm.engine.impl.batch.BatchConfiguration;\n+import org.camunda.bpm.engine.impl.batch.BatchElementConfiguration;\n+import org.camunda.bpm.engine.impl.batch.DeploymentMappings;\n+import org.camunda.bpm.engine.impl.batch.builder.BatchBuilder;\n+import org.camunda.bpm.engine.impl.cmd.CommandLogger;\n+import org.camunda.bpm.engine.impl.core.variable.VariableUtil;\n+import org.camunda.bpm.engine.impl.interceptor.Command;\n+import org.camunda.bpm.engine.impl.interceptor.CommandContext;\n+import org.camunda.bpm.engine.impl.persistence.entity.PropertyChange;\n+import org.camunda.bpm.engine.impl.persistence.entity.VariableInstanceEntity;\n+import org.camunda.bpm.engine.impl.util.CollectionUtil;\n+import org.camunda.bpm.engine.impl.util.EnsureUtil;\n+import org.camunda.bpm.engine.impl.util.ImmutablePair;\n+import org.camunda.bpm.engine.runtime.ProcessInstanceQuery;\n+import org.camunda.bpm.engine.variable.Variables;\n+import org.camunda.bpm.engine.variable.value.TypedValue;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureAtLeastOneNotNull;\n+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotEmpty;\n+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;\n+\n+public class SetVariablesToProcessInstancesBatchCmd implements Command<Batch> {\n+\n+  protected static final CommandLogger LOGGER = CommandLogger.CMD_LOGGER;\n+\n+  protected List<String> processInstanceIds;\n+  protected ProcessInstanceQuery processInstanceQuery;\n+  protected HistoricProcessInstanceQuery historicProcessInstanceQuery;\n+  protected Map<String, ?> variables;\n+\n+  public SetVariablesToProcessInstancesBatchCmd(List<String> processInstanceIds,\n+                                                ProcessInstanceQuery processInstanceQuery,\n+                                                HistoricProcessInstanceQuery historicProcessInstanceQuery,\n+                                                Map<String, ?> variables) {\n+    this.processInstanceIds = processInstanceIds;\n+    this.processInstanceQuery = processInstanceQuery;\n+    this.historicProcessInstanceQuery = historicProcessInstanceQuery;\n+    this.variables = variables;\n+\n+  }\n+\n+  @Override\n+  public Batch execute(CommandContext commandContext) {\n+    ensureNotNull(\"variables\", variables);\n+    ensureNotEmpty(BadUserRequestException.class, \"variables\", variables);\n+    ensureAtLeastOneNotNull(\n+        \"No process instances found.\",\n+        processInstanceIds,\n+        processInstanceQuery,\n+        historicProcessInstanceQuery\n+    );\n+\n+    BatchElementConfiguration elementConfiguration = collectProcessInstanceIds(commandContext);\n+\n+    List<String> ids = elementConfiguration.getIds();\n+    ensureNotEmpty(BadUserRequestException.class, \"processInstanceIds\", ids);\n+\n+    BatchConfiguration configuration = getConfiguration(elementConfiguration);\n+    Batch batch = new BatchBuilder(commandContext)\n+        .type(Batch.TYPE_SET_VARIABLES)\n+        .config(configuration)\n+        .permission(BatchPermissions.CREATE_BATCH_SET_VARIABLES)\n+        .operationLogHandler(this::writeUserOperationLog)\n+        .build();\n+\n+    String batchId = batch.getId();\n+    VariableUtil.setVariables(variables, (name, value) -> setVariable(batchId, name, value));\n+\n+    return batch;\n+  }\n+\n+  protected void writeUserOperationLog(CommandContext commandContext, int instancesCount) {\n+    List<PropertyChange> propChanges = new ArrayList<>();\n+\n+    int variablesCount = variables.size();\n+    propChanges.add(new PropertyChange(\"nrOfInstances\", null, instancesCount));\n+    propChanges.add(new PropertyChange(\"nrOfVariables\", null, variablesCount));\n+    propChanges.add(new PropertyChange(\"async\", null, true));\n+\n+    commandContext.getOperationLogManager()\n+        .logBatchOperation(UserOperationLogEntry.OPERATION_TYPE_SET_VARIABLES_BATCH, propChanges);\n+  }\n+\n+  protected void setVariable(String batchId, String variableName, Object variableValue) {\n+    TypedValue variableTypedValue = Variables.untypedValue(variableValue);\n+\n+    boolean isTransient = variableTypedValue.isTransient();\n+    if (isTransient) {\n+      throw LOGGER.exceptionSettingTransientVariablesAsyncNotSupported(variableName);\n+    }\n+\n+    VariableUtil.checkJavaSerialization(variableName, variableTypedValue);\n+\n+    VariableInstanceEntity variableInstance =\n+        VariableInstanceEntity.createAndInsert(variableName, variableTypedValue);\n+\n+    variableInstance.setVariableScopeId(batchId);\n+  }\n+\n+  public BatchConfiguration getConfiguration(BatchElementConfiguration elementConfiguration) {\n+    DeploymentMappings mappings = elementConfiguration.getMappings();\n+    List<String> ids = elementConfiguration.getIds();\n+\n+    return new BatchConfiguration(ids, mappings);\n+  }\n+\n+\n+  protected BatchElementConfiguration collectProcessInstanceIds(CommandContext commandContext) {\n+    BatchElementConfiguration elementConfiguration = new BatchElementConfiguration();\n+\n+    if (!CollectionUtil.isEmpty(processInstanceIds)) {\n+      ProcessInstanceQueryImpl query = new ProcessInstanceQueryImpl();\n+      query.processInstanceIds(new HashSet<>(processInstanceIds));\n+      List<ImmutablePair<String, String>> mappings =\n+          commandContext.runWithoutAuthorization(query::listDeploymentIdMappings);\n+      elementConfiguration.addDeploymentMappings(mappings);", "originalCommit": "ea304f33b9dba22d18936919a9bd662cd9296fc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM5OTQ4Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/943#discussion_r478399483", "bodyText": "We don't need this here since a running process instance cannot exist without a deployment.", "author": "tasso94", "createdAt": "2020-08-27T12:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMDQzOA=="}], "type": "inlineReview"}, {"oid": "dbeb59d1e969d2f78d30e22effcc64a3a04aec7b", "url": "https://github.com/camunda/camunda-bpm-platform/commit/dbeb59d1e969d2f78d30e22effcc64a3a04aec7b", "message": "feat(engine): add batch operation to set variables\n\nrelated to CAM-12301", "committedDate": "2020-08-27T14:07:56Z", "type": "commit"}, {"oid": "dbeb59d1e969d2f78d30e22effcc64a3a04aec7b", "url": "https://github.com/camunda/camunda-bpm-platform/commit/dbeb59d1e969d2f78d30e22effcc64a3a04aec7b", "message": "feat(engine): add batch operation to set variables\n\nrelated to CAM-12301", "committedDate": "2020-08-27T14:07:56Z", "type": "forcePushed"}]}