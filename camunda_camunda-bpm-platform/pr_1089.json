{"pr_number": 1089, "pr_title": "CAM-12651: feat(engine): lock external task without fetch", "pr_author": "koevskinikola", "pr_createdAt": "2020-10-27T15:58:22Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/1089", "timeline": [{"oid": "b443ede93c3d2380f32e53525b8d86fdcb2dc7b1", "url": "https://github.com/camunda/camunda-bpm-platform/commit/b443ede93c3d2380f32e53525b8d86fdcb2dc7b1", "message": "feat(engine): lock external task without fetch\n\n* Allow for an External Task to be locked without a fetch operation.\n\nRelated to CAM-12651, CAM-7170", "committedDate": "2020-10-29T13:29:00Z", "type": "forcePushed"}, {"oid": "3a16ce0a9cf088caa86a78b5fd025f57f9f788ed", "url": "https://github.com/camunda/camunda-bpm-platform/commit/3a16ce0a9cf088caa86a78b5fd025f57f9f788ed", "message": "feat(engine): lock external task without fetch\n\n* Allow for an External Task to be locked without a fetch operation.\n\nRelated to CAM-12651, CAM-7170", "committedDate": "2020-10-30T11:36:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0MzE2MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1089#discussion_r515843161", "body": "Move to validate method that is called in #execute where we usually make the validation of the fields?", "bodyText": "Move to validate method that is called in #execute where we usually make the validation of the fields?", "bodyHTML": "<p dir=\"auto\">Move to validate method that is called in #execute where we usually make the validation of the fields?</p>", "author": "yanavasileva", "createdAt": "2020-11-02T09:34:05Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/LockExternalTaskCmd.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd;\n+\n+import java.util.Date;\n+\n+import org.camunda.bpm.engine.BadUserRequestException;\n+import org.camunda.bpm.engine.impl.persistence.entity.ExternalTaskEntity;\n+import org.camunda.bpm.engine.impl.util.ClockUtil;\n+import org.camunda.bpm.engine.impl.util.EnsureUtil;\n+\n+public class LockExternalTaskCmd extends HandleExternalTaskCmd {\n+\n+  protected long lockDuration;\n+\n+  public LockExternalTaskCmd(String externalTaskId, String workerId, long lockDuration) {\n+    super(externalTaskId, workerId);\n+    EnsureUtil.ensurePositive(BadUserRequestException.class, \"lockDuration\", lockDuration);", "originalCommit": "3a16ce0a9cf088caa86a78b5fd025f57f9f788ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ4MTkyMw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1089#discussion_r517481923", "body": "I checked that ensurePositive already checks for ensure not null, so we can simplify it to:\r\n```suggestion\r\n    EnsureUtil.ensurePositive(BadUserRequestException.class, \"lockDuration\", lockDuration);\r\n```", "bodyText": "I checked that ensurePositive already checks for ensure not null, so we can simplify it to:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                EnsureUtil.ensureNotNull(\"lockDuration\", lockDuration);\n          \n          \n            \n                EnsureUtil.ensurePositive(BadUserRequestException.class, \"lockDuration\", lockDuration);\n          \n          \n            \n                EnsureUtil.ensurePositive(BadUserRequestException.class, \"lockDuration\", lockDuration);", "bodyHTML": "<p dir=\"auto\">I checked that ensurePositive already checks for ensure not null, so we can simplify it to:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"66\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">EnsureUtil</span><span class=\"pl-k\">.</span>ensureNotNull(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lockDuration<span class=\"pl-pds\">\"</span></span>, lockDuration);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"67\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">EnsureUtil</span><span class=\"pl-k\">.</span>ensurePositive(<span class=\"pl-smi\">BadUserRequestException</span><span class=\"pl-k\">.</span>class, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lockDuration<span class=\"pl-pds\">\"</span></span>, lockDuration);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"66\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-smi\">EnsureUtil</span><span class=\"pl-k\">.</span>ensurePositive(<span class=\"pl-smi\">BadUserRequestException</span><span class=\"pl-k\">.</span>class, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lockDuration<span class=\"pl-pds\">\"</span></span>, lockDuration);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "yanavasileva", "createdAt": "2020-11-04T16:43:21Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/LockExternalTaskCmd.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd;\n+\n+import java.util.Date;\n+\n+import org.camunda.bpm.engine.BadUserRequestException;\n+import org.camunda.bpm.engine.impl.persistence.entity.ExternalTaskEntity;\n+import org.camunda.bpm.engine.impl.util.ClockUtil;\n+import org.camunda.bpm.engine.impl.util.EnsureUtil;\n+\n+public class LockExternalTaskCmd extends HandleExternalTaskCmd {\n+\n+  protected long lockDuration;\n+\n+  public LockExternalTaskCmd(String externalTaskId, String workerId, long lockDuration) {\n+    super(externalTaskId, workerId);\n+    this.lockDuration = lockDuration;\n+  }\n+\n+  @Override\n+  protected void execute(ExternalTaskEntity externalTask) {\n+    externalTask.lock(workerId, lockDuration);\n+  }\n+\n+  @Override\n+  public String getErrorMessageOnWrongWorkerAccess() {\n+    return \"External Task \" + externalTaskId + \" cannot be locked by worker '\" + workerId;\n+  }\n+\n+  /*\n+    Report a worker violation only if another worker has locked the task,\n+    and the lock expiration time is still not expired.\n+   */\n+  @Override\n+  protected boolean validateWorkerViolation(ExternalTaskEntity externalTask) {\n+    String existingWorkerId = externalTask.getWorkerId();\n+    Date existingLockExpirationTime = externalTask.getLockExpirationTime();\n+\n+    // check if another worker is attempting to lock the same task\n+    boolean workerValidation = existingWorkerId != null && !workerId.equals(existingWorkerId);\n+    // and check if an existing lock is already expired\n+    boolean lockValidation = existingLockExpirationTime != null\n+        && !ClockUtil.getCurrentTime().after(existingLockExpirationTime);\n+\n+    return workerValidation && lockValidation;\n+  }\n+\n+  @Override\n+  protected void validateInput() {\n+    super.validateInput();\n+    EnsureUtil.ensureNotNull(\"lockDuration\", lockDuration);\n+    EnsureUtil.ensurePositive(BadUserRequestException.class, \"lockDuration\", lockDuration);", "originalCommit": "e2e2dabd75209515006dfabbfa966b743cdbd511", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "004cb8c93a4a29022edfa1739e1a2feb3058a714", "url": "https://github.com/camunda/camunda-bpm-platform/commit/004cb8c93a4a29022edfa1739e1a2feb3058a714", "message": "feat(engine): lock external task without fetch\n\n* Allow for an External Task to be locked without a fetch operation.\n* Add ExternalTaskService test cases;\n* Add Authorization test cases;\n* Reduce code duplication in external task authorization tests.\n\nRelated to CAM-12651, CAM-7170", "committedDate": "2020-11-05T17:10:48Z", "type": "commit"}, {"oid": "004cb8c93a4a29022edfa1739e1a2feb3058a714", "url": "https://github.com/camunda/camunda-bpm-platform/commit/004cb8c93a4a29022edfa1739e1a2feb3058a714", "message": "feat(engine): lock external task without fetch\n\n* Allow for an External Task to be locked without a fetch operation.\n* Add ExternalTaskService test cases;\n* Add Authorization test cases;\n* Reduce code duplication in external task authorization tests.\n\nRelated to CAM-12651, CAM-7170", "committedDate": "2020-11-05T17:10:48Z", "type": "forcePushed"}, {"oid": "4e46a67dcdafafdc06aeffb6c0d35a03306e95ea", "url": "https://github.com/camunda/camunda-bpm-platform/commit/4e46a67dcdafafdc06aeffb6c0d35a03306e95ea", "message": "feat(rest): lock external task without fetch\n\n* Allow for an External Task to be locked without a fetch operation through the Rest API.\n* Document the new External Task Lock Rest API endpoint in the OpenAPI documentation.\n* Refactor the ExternalTask DTOs, and add a base class that contains the\n  workerId.\n\nRelated to CAM-12652, CAM-7170", "committedDate": "2020-11-05T17:18:10Z", "type": "commit"}]}