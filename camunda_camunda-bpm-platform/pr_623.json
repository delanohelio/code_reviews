{"pr_number": 623, "pr_title": "CAM-11250: correct history event on instance migration", "pr_author": "ThorbenLindhauer", "pr_createdAt": "2020-01-17T13:58:15Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/623", "timeline": [{"oid": "6c554eaafc9f4b6b62ddb7ff147f2de0f635d249", "url": "https://github.com/camunda/camunda-bpm-platform/commit/6c554eaafc9f4b6b62ddb7ff147f2de0f635d249", "message": "fix(engine): correct history event on instance migration\n\n- fixes that a migrate event is fired for the history of a process\n  instance (instead of an update event)\n- adds tests for all migrate events\n\nrelated to CAM-11250", "committedDate": "2020-01-17T13:56:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTMzNg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/623#discussion_r369995336", "body": "I don't think we really need the `@Before` annotation. The `recorderHandler` will get cleared after every test.\r\n```suggestion\r\n```", "bodyText": "I don't think we really need the @Before annotation. The recorderHandler will get cleared after every test.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Before", "bodyHTML": "<p dir=\"auto\">I don't think we really need the <code>@Before</code> annotation. The <code>recorderHandler</code> will get cleared after every test.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">  </span><span class=\"pl-k x x-last\">@Before</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "koevskinikola", "createdAt": "2020-01-23T08:58:03Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/history/CustomHistoryEventHandlerTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.test.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.camunda.bpm.engine.ProcessEngineConfiguration;\n+import org.camunda.bpm.engine.RuntimeService;\n+import org.camunda.bpm.engine.TaskService;\n+import org.camunda.bpm.engine.impl.history.event.HistoryEvent;\n+import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;\n+import org.camunda.bpm.engine.impl.history.handler.HistoryEventHandler;\n+import org.camunda.bpm.engine.impl.util.CollectionUtil;\n+import org.camunda.bpm.engine.migration.MigrationPlan;\n+import org.camunda.bpm.engine.runtime.ActivityInstance;\n+import org.camunda.bpm.engine.runtime.Incident;\n+import org.camunda.bpm.engine.runtime.ProcessInstance;\n+import org.camunda.bpm.engine.task.Task;\n+import org.camunda.bpm.engine.test.Deployment;\n+import org.camunda.bpm.engine.test.RequiredHistoryLevel;\n+import org.camunda.bpm.engine.test.util.ProcessEngineBootstrapRule;\n+import org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule;\n+import org.camunda.bpm.engine.variable.VariableMap;\n+import org.camunda.bpm.engine.variable.Variables;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+@RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)\n+public class CustomHistoryEventHandlerTest {\n+\n+  protected static RecorderHistoryEventHandler recorderHandler = new RecorderHistoryEventHandler();\n+\n+  @ClassRule\n+  public static ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule(c -> {\n+    c.setHistoryEventHandler(recorderHandler);\n+  });\n+\n+  @Rule\n+  public ProvidedProcessEngineRule engineRule = new ProvidedProcessEngineRule(bootstrapRule);\n+\n+  private RuntimeService runtimeService;\n+  private TaskService taskService;\n+\n+  @Before", "originalCommit": "6c554eaafc9f4b6b62ddb7ff147f2de0f635d249", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "af3523ad4dccf8bb2fbf909ad472de4490cdac07", "url": "https://github.com/camunda/camunda-bpm-platform/commit/af3523ad4dccf8bb2fbf909ad472de4490cdac07", "message": "squash me", "committedDate": "2020-01-23T08:59:39Z", "type": "commit"}]}