{"pr_number": 797, "pr_title": "Enforce Historic Task Authorizations for User Operation Log Query", "pr_author": "tasso94", "pr_createdAt": "2020-04-23T08:18:55Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/797", "timeline": [{"oid": "e910197ac2fec3dfa7c27f3148eab4f547f99c25", "url": "https://github.com/camunda/camunda-bpm-platform/commit/e910197ac2fec3dfa7c27f3148eab4f547f99c25", "message": "feat(engine): enforce hist task auth for op log query\n\nrelated to CAM-11628", "committedDate": "2020-04-24T13:25:03Z", "type": "commit"}, {"oid": "e910197ac2fec3dfa7c27f3148eab4f547f99c25", "url": "https://github.com/camunda/camunda-bpm-platform/commit/e910197ac2fec3dfa7c27f3148eab4f547f99c25", "message": "feat(engine): enforce hist task auth for op log query\n\nrelated to CAM-11628", "committedDate": "2020-04-24T13:25:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNDU2OQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/797#discussion_r415714569", "body": "```suggestion\r\n        taskId, userId, HistoricTaskPermissions.READ);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    taskId, userId, HistoricTaskPermissions.NONE);\n          \n          \n            \n                    taskId, userId, HistoricTaskPermissions.READ);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"679\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        taskId, userId, <span class=\"pl-smi\">HistoricTaskPermissions</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">NONE</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"679\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        taskId, userId, <span class=\"pl-smi\">HistoricTaskPermissions</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">READ</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mboskamp", "createdAt": "2020-04-27T10:58:04Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/UserOperationLogAuthorizationTest.java", "diffHunk": "@@ -504,6 +513,223 @@ public void testHistoricProcessInstancePermissionsAuthorizationDisabled() {\n         .containsExactly(processInstanceId, processInstanceId);\n   }\n \n+  public void testCheckNonePermissionOnHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId);\n+  }\n+\n+  public void testCheckReadPermissionOnStandaloneHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    taskId = \"aTaskId\";\n+    createTask(taskId);\n+\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId, taskId);\n+  }\n+\n+  public void testCheckNonePermissionOnStandaloneHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    taskId = \"aTaskId\";\n+    createTask(taskId);\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnCompletedHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId, taskId);\n+  }\n+\n+  public void testCheckNonePermissionOnHistoricTaskAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY,\n+        userId, ProcessDefinitionPermissions.READ_HISTORY);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactlyInAnyOrder(taskId, null);\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricTaskAndNonePermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId,\n+        ProcessDefinitionPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId);\n+  }\n+\n+  public void testCheckNoneOnHistoricTaskAndTaskWorkerCategory() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_TASK,\n+        taskId, userId, HistoricTaskPermissions.NONE);", "originalCommit": "e910197ac2fec3dfa7c27f3148eab4f547f99c25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNjEyNA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/797#discussion_r415716124", "bodyText": "I am not sure about this change. The set permissions are not in line with your usual method naming pattern. What should be the goal of the test?", "author": "mboskamp", "createdAt": "2020-04-27T11:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNDU2OQ=="}], "type": "inlineReview"}]}