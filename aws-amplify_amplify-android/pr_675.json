{"pr_number": 675, "pr_title": "Store logs to be retrieved by developer menu", "pr_author": "eeatonaws", "pr_createdAt": "2020-07-27T22:58:31Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/675", "timeline": [{"oid": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "url": "https://github.com/aws-amplify/amplify-android/commit/2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "message": "modified AndroidLogger and AndroidLoggingPlugin to store logs for dev menu", "committedDate": "2020-07-27T22:52:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzNjMyMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461236322", "body": "Isn't `Logging` category automatically constructed with `AndroidLoggingPlugin` as its default plugin?\r\n\r\nhttps://github.com/aws-amplify/amplify-android/blob/12ec8e9819228f63bd677a0431a5ab191f79d9e1/core/src/main/java/com/amplifyframework/logging/LoggingCategory.java#L37-L39", "bodyText": "Isn't Logging category automatically constructed with AndroidLoggingPlugin as its default plugin?\n\n  \n    \n      amplify-android/core/src/main/java/com/amplifyframework/logging/LoggingCategory.java\n    \n    \n        Lines 37 to 39\n      in\n      12ec8e9\n    \n    \n    \n    \n\n        \n          \n           public LoggingCategory() { \n        \n\n        \n          \n               this(new AndroidLoggingPlugin()); \n        \n\n        \n          \n           }", "bodyHTML": "<p dir=\"auto\">Isn't <code>Logging</code> category automatically constructed with <code>AndroidLoggingPlugin</code> as its default plugin?</p>\n<p dir=\"auto\"><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/aws-amplify/amplify-android/blob/12ec8e9819228f63bd677a0431a5ab191f79d9e1/core/src/main/java/com/amplifyframework/logging/LoggingCategory.java#L37-L39\">amplify-android/core/src/main/java/com/amplifyframework/logging/LoggingCategory.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 37 to 39\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/aws-amplify/amplify-android/commit/12ec8e9819228f63bd677a0431a5ab191f79d9e1\">12ec8e9</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L37\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"37\"></td>\n          <td id=\"LC37\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">public</span> <span class=\"pl-en\">LoggingCategory</span>() { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L38\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"38\"></td>\n          <td id=\"LC38\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-c1\">this</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">AndroidLoggingPlugin</span>()); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L39\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"39\"></td>\n          <td id=\"LC39\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "raphkim", "createdAt": "2020-07-27T23:55:22Z", "path": "core/src/main/java/com/amplifyframework/core/Amplify.java", "diffHunk": "@@ -127,6 +128,11 @@ public static void configure(@NonNull final AmplifyConfiguration configuration,\n                 );\n             }\n \n+            boolean debuggableApp = isDebuggableApplication(context);\n+            if (debuggableApp && Logging.getPlugins().isEmpty()) {\n+                addPlugin(new AndroidLoggingPlugin());\n+            }", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzODMyMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461238322", "body": "How about saving assigning `final` keyword to `logs` and always assigning it a new list instance? It would be better to make it guaranteed to be non-null rather than checking whether it's null. \r\nThe null-check can be replaced by also having `private final boolean shouldStoreLogs;` variable.", "bodyText": "How about saving assigning final keyword to logs and always assigning it a new list instance? It would be better to make it guaranteed to be non-null rather than checking whether it's null.\nThe null-check can be replaced by also having private final boolean shouldStoreLogs; variable.", "bodyHTML": "<p dir=\"auto\">How about saving assigning <code>final</code> keyword to <code>logs</code> and always assigning it a new list instance? It would be better to make it guaranteed to be non-null rather than checking whether it's null.<br>\nThe null-check can be replaced by also having <code>private final boolean shouldStoreLogs;</code> variable.</p>", "author": "raphkim", "createdAt": "2020-07-28T00:01:40Z", "path": "core/src/main/java/com/amplifyframework/logging/AndroidLogger.java", "diffHunk": "@@ -20,15 +20,27 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.amplifyframework.util.Immutable;\n+\n+import java.time.LocalDateTime;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.Objects;\n \n final class AndroidLogger implements Logger {\n+    // Maximum number of logs to store.\n+    private static final int MAX_NUM_LOGS = 500;\n     private final LogLevel threshold;\n     private final String namespace;\n+    // The logs stored by this logger.\n+    private List<LogEntry> logs;\n \n-    AndroidLogger(@NonNull String namespace, @NonNull LogLevel threshold) {\n+    AndroidLogger(@NonNull String namespace, @NonNull LogLevel threshold, boolean storeLogs) {\n         this.threshold = Objects.requireNonNull(threshold);\n         this.namespace = Objects.requireNonNull(namespace);\n+        if (storeLogs) {\n+            logs = new LinkedList<>();\n+        }", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxMzc5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461313790", "body": "these can be `final`", "bodyText": "these can be final", "bodyHTML": "<p dir=\"auto\">these can be <code>final</code></p>", "author": "raphkim", "createdAt": "2020-07-28T04:41:29Z", "path": "core/src/main/java/com/amplifyframework/logging/LogEntry.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.util.Log;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry {\n+    // The format for the log's date and time.\n+    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+    // The date and time of the log.\n+    private LocalDateTime dateTime;\n+    // The namespace of the logger that emitted the log.\n+    private String namespace;\n+    // The message for the log.\n+    private String message;\n+    // The Throwable (if any) associated with the log.\n+    private Throwable throwable;\n+    // The level the log was logged at.\n+    private LogLevel logLevel;", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNDQ0NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461314444", "body": "Since this is a public constructor, it would be helpful to specify `@NonNull` vs `@Nullable` for each of them and enforce it with `Objects.requireNonNull()`. Otherwise, `toString()` will throw NPE for either `logLevel` or `dateTime` being null.", "bodyText": "Since this is a public constructor, it would be helpful to specify @NonNull vs @Nullable for each of them and enforce it with Objects.requireNonNull(). Otherwise, toString() will throw NPE for either logLevel or dateTime being null.", "bodyHTML": "<p dir=\"auto\">Since this is a public constructor, it would be helpful to specify <code>@NonNull</code> vs <code>@Nullable</code> for each of them and enforce it with <code>Objects.requireNonNull()</code>. Otherwise, <code>toString()</code> will throw NPE for either <code>logLevel</code> or <code>dateTime</code> being null.</p>", "author": "raphkim", "createdAt": "2020-07-28T04:44:02Z", "path": "core/src/main/java/com/amplifyframework/logging/LogEntry.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.util.Log;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry {\n+    // The format for the log's date and time.\n+    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+    // The date and time of the log.\n+    private LocalDateTime dateTime;\n+    // The namespace of the logger that emitted the log.\n+    private String namespace;\n+    // The message for the log.\n+    private String message;\n+    // The Throwable (if any) associated with the log.\n+    private Throwable throwable;\n+    // The level the log was logged at.\n+    private LogLevel logLevel;\n+\n+    /**\n+     * Creates a new LogEntry representing a log with the given time, tag,\n+     * and message that was logged at the given level.\n+     * @param dateTime the date and time of the log.\n+     * @param namespace the namespace of the logger that emitted the log.\n+     * @param message the message for the log.\n+     * @param logLevel the level the log was logged at.\n+     */\n+    public LogEntry(LocalDateTime dateTime, String namespace, String message, LogLevel logLevel) {\n+        this(dateTime, namespace, message, null, logLevel);\n+    }\n+\n+    /**\n+     * Creates a new LogEntry representing a log with the given time, tag, message,\n+     * and throwable that was logged at the given level.\n+     * @param dateTime the date and time of the log.\n+     * @param namespace the namespace of the logger that emitted the log.\n+     * @param message the message for the log.\n+     * @param throwable the Throwable associated with the log.\n+     * @param logLevel the level the log was logged at.\n+     */\n+    public LogEntry(LocalDateTime dateTime, String namespace, String message, Throwable throwable, LogLevel logLevel) {", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNDkzNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461314937", "body": "Nit: It would be a stronger test to assert that the content of the log matches what you expect after the size assertion", "bodyText": "Nit: It would be a stronger test to assert that the content of the log matches what you expect after the size assertion", "bodyHTML": "<p dir=\"auto\">Nit: It would be a stronger test to assert that the content of the log matches what you expect after the size assertion</p>", "author": "raphkim", "createdAt": "2020-07-28T04:45:40Z", "path": "core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java", "diffHunk": "@@ -131,6 +137,39 @@ public void noContentLoggedAtThresholdNone() {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n+    /**\n+     * When the application is not in a debuggable build, logs are not stored.\n+     */\n+    @Test\n+    public void noLogsStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = 0;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n+        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n+        plugin.configure(new JSONObject(), mockContext);\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        logger.info(\"Info log\");\n+        assertNull(plugin.getLogs());\n+    }\n+\n+    /**\n+     * When the application is in a debuggable build, logs are stored.\n+     */\n+    @Test\n+    public void logsAreStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = ApplicationInfo.FLAG_DEBUGGABLE;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n+        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n+        plugin.configure(new JSONObject(), mockContext);\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        logger.info(\"Info log\");\n+        assertNotNull(plugin.getLogs());\n+        assertEquals(plugin.getLogs().size(), 1);", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNTEwMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461315101", "body": "I think it defaults to 0 :)", "bodyText": "I think it defaults to 0 :)", "bodyHTML": "<p dir=\"auto\">I think it defaults to 0 :)</p>", "author": "raphkim", "createdAt": "2020-07-28T04:46:26Z", "path": "core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java", "diffHunk": "@@ -131,6 +137,39 @@ public void noContentLoggedAtThresholdNone() {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n+    /**\n+     * When the application is not in a debuggable build, logs are not stored.\n+     */\n+    @Test\n+    public void noLogsStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = 0;", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxNjgxNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461316817", "body": "Should these variables be readable? Maybe you should create getters for each of these, and move the comments to an actual javadoc for each method", "bodyText": "Should these variables be readable? Maybe you should create getters for each of these, and move the comments to an actual javadoc for each method", "bodyHTML": "<p dir=\"auto\">Should these variables be readable? Maybe you should create getters for each of these, and move the comments to an actual javadoc for each method</p>", "author": "raphkim", "createdAt": "2020-07-28T04:52:43Z", "path": "core/src/main/java/com/amplifyframework/logging/LogEntry.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.util.Log;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry {\n+    // The format for the log's date and time.", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0MTM0NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461341345", "body": "`Amplify` is a \"fa\u00e7ade.\" A downside to the fa\u00e7ade as a pattern is that it can become a god object coupled to all classes of an app. [ref](https://refactoring.guru/design-patterns/facade).\r\n\r\nWe want to \"fan out\" quickly. Strive for a ~one-line integration of your Dev Menu code.\r\n\r\nWould it be possible to have your entire integration be a single line?\r\n```java\r\nDevMenu.attach(this);\r\n```\r\n\r\nAll of your logic, like whether or not its a debug build, whether or not you need a logging plugin, etc. etc. would then be in your `DevMenu`, not in `Amplify`.\r\n", "bodyText": "Amplify is a \"fa\u00e7ade.\" A downside to the fa\u00e7ade as a pattern is that it can become a god object coupled to all classes of an app. ref.\nWe want to \"fan out\" quickly. Strive for a ~one-line integration of your Dev Menu code.\nWould it be possible to have your entire integration be a single line?\nDevMenu.attach(this);\nAll of your logic, like whether or not its a debug build, whether or not you need a logging plugin, etc. etc. would then be in your DevMenu, not in Amplify.", "bodyHTML": "<p dir=\"auto\"><code>Amplify</code> is a \"fa\u00e7ade.\" A downside to the fa\u00e7ade as a pattern is that it can become a god object coupled to all classes of an app. <a href=\"https://refactoring.guru/design-patterns/facade\" rel=\"nofollow\">ref</a>.</p>\n<p dir=\"auto\">We want to \"fan out\" quickly. Strive for a ~one-line integration of your Dev Menu code.</p>\n<p dir=\"auto\">Would it be possible to have your entire integration be a single line?</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"DevMenu.attach(this);\n\"><pre><span class=\"pl-smi\">DevMenu</span><span class=\"pl-k\">.</span>attach(<span class=\"pl-c1\">this</span>);</pre></div>\n<p dir=\"auto\">All of your logic, like whether or not its a debug build, whether or not you need a logging plugin, etc. etc. would then be in your <code>DevMenu</code>, not in <code>Amplify</code>.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-28T06:12:52Z", "path": "core/src/main/java/com/amplifyframework/core/Amplify.java", "diffHunk": "@@ -127,6 +128,11 @@ public static void configure(@NonNull final AmplifyConfiguration configuration,\n                 );\n             }\n \n+            boolean debuggableApp = isDebuggableApplication(context);\n+            if (debuggableApp && Logging.getPlugins().isEmpty()) {\n+                addPlugin(new AndroidLoggingPlugin());\n+            }\n+", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0Mjk4OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461342989", "body": "Can you centralize this check into some helper class? I think you perform this check in a couple places now.\r\n```java\r\nfinal class IsDebuggable {\r\n    private IsDebuggable() {}\r\n\r\n    boolean check(Context context) {\r\n        return context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE != 0;\r\n    }\r\n}\r\n```\r\n(You can get creative with the naming, this is just one idea.)", "bodyText": "Can you centralize this check into some helper class? I think you perform this check in a couple places now.\nfinal class IsDebuggable {\n    private IsDebuggable() {}\n\n    boolean check(Context context) {\n        return context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE != 0;\n    }\n}\n(You can get creative with the naming, this is just one idea.)", "bodyHTML": "<p dir=\"auto\">Can you centralize this check into some helper class? I think you perform this check in a couple places now.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final class IsDebuggable {\n    private IsDebuggable() {}\n\n    boolean check(Context context) {\n        return context.getApplicationInfo().flags &amp; ApplicationInfo.FLAG_DEBUGGABLE != 0;\n    }\n}\n\"><pre><span class=\"pl-k\">final</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">IsDebuggable</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-en\">IsDebuggable</span>() {}\n\n    <span class=\"pl-k\">boolean</span> <span class=\"pl-en\">check</span>(<span class=\"pl-smi\">Context</span> <span class=\"pl-v\">context</span>) {\n        <span class=\"pl-k\">return</span> context<span class=\"pl-k\">.</span>getApplicationInfo()<span class=\"pl-k\">.</span>flags <span class=\"pl-k\">&amp;</span> <span class=\"pl-smi\">ApplicationInfo</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FLAG_DEBUGGABLE</span> <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">0</span>;\n    }\n}</pre></div>\n<p dir=\"auto\">(You can get creative with the naming, this is just one idea.)</p>", "author": "jamesonwilliams", "createdAt": "2020-07-28T06:17:33Z", "path": "core/src/main/java/com/amplifyframework/logging/AndroidLoggingPlugin.java", "diffHunk": "@@ -66,6 +77,7 @@ public String getPluginKey() {\n     public void configure(\n             JSONObject pluginConfiguration,\n             @NonNull Context context) {\n+        storeLogs = (context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0ODE3Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461348173", "body": "Do you need a mock for this one, or can you just create a real instance?\r\n\r\nYou probably do need a mock for the `context`.", "bodyText": "Do you need a mock for this one, or can you just create a real instance?\nYou probably do need a mock for the context.", "bodyHTML": "<p dir=\"auto\">Do you need a mock for this one, or can you just create a real instance?</p>\n<p dir=\"auto\">You probably do need a mock for the <code>context</code>.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-28T06:30:44Z", "path": "core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java", "diffHunk": "@@ -131,6 +137,39 @@ public void noContentLoggedAtThresholdNone() {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n+    /**\n+     * When the application is not in a debuggable build, logs are not stored.\n+     */\n+    @Test\n+    public void noLogsStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0ODc2MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461348761", "body": "Better to return an empty collection than null \r\n```\r\nassertEquals(Collections.emptyList(), plugin.getLogs())\r\n```\r\n\r\nhttps://www.thefinestartist.com/effective-java/43", "bodyText": "Better to return an empty collection than null\nassertEquals(Collections.emptyList(), plugin.getLogs())\n\nhttps://www.thefinestartist.com/effective-java/43", "bodyHTML": "<p dir=\"auto\">Better to return an empty collection than null</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertEquals(Collections.emptyList(), plugin.getLogs())\n\"><pre><code>assertEquals(Collections.emptyList(), plugin.getLogs())\n</code></pre></div>\n<p dir=\"auto\"><a href=\"https://www.thefinestartist.com/effective-java/43\" rel=\"nofollow\">https://www.thefinestartist.com/effective-java/43</a></p>", "author": "jamesonwilliams", "createdAt": "2020-07-28T06:32:12Z", "path": "core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java", "diffHunk": "@@ -131,6 +137,39 @@ public void noContentLoggedAtThresholdNone() {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n+    /**\n+     * When the application is not in a debuggable build, logs are not stored.\n+     */\n+    @Test\n+    public void noLogsStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = 0;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n+        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n+        plugin.configure(new JSONObject(), mockContext);\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        logger.info(\"Info log\");\n+        assertNull(plugin.getLogs());", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0OTA2MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461349060", "body": "These are backwards --\r\n\r\n```java\r\n// It should be ...\r\nassertEquals(expectedValue, actualValue);\r\n```", "bodyText": "These are backwards --\n// It should be ...\nassertEquals(expectedValue, actualValue);", "bodyHTML": "<p dir=\"auto\">These are backwards --</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// It should be ...\nassertEquals(expectedValue, actualValue);\n\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> It should be ...</span>\nassertEquals(expectedValue, actualValue);</pre></div>", "author": "jamesonwilliams", "createdAt": "2020-07-28T06:32:57Z", "path": "core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java", "diffHunk": "@@ -131,6 +137,39 @@ public void noContentLoggedAtThresholdNone() {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n+    /**\n+     * When the application is not in a debuggable build, logs are not stored.\n+     */\n+    @Test\n+    public void noLogsStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = 0;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n+        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n+        plugin.configure(new JSONObject(), mockContext);\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        logger.info(\"Info log\");\n+        assertNull(plugin.getLogs());\n+    }\n+\n+    /**\n+     * When the application is in a debuggable build, logs are stored.\n+     */\n+    @Test\n+    public void logsAreStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = ApplicationInfo.FLAG_DEBUGGABLE;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n+        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n+        plugin.configure(new JSONObject(), mockContext);\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        logger.info(\"Info log\");\n+        assertNotNull(plugin.getLogs());\n+        assertEquals(plugin.getLogs().size(), 1);", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MDQzOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461350438", "body": "Elsewhere, I suggest making a utility to tell whether or not the app is debuggable. When I wrote it, I had it as a static utility class. However, it might simplify your test code if it is just package-local, open-for-extension, regular class:\r\n```java\r\nclass AmplifyApp {\r\n    private final WeakReference<Context> context;\r\n\r\n    AmplifyApp(WeakReference<Context> context) {\r\n        this.context = context;\r\n    }\r\n\r\n    boolean isDebuggable() {\r\n        Context currentContext = context.get();\r\n        return currentContext.blahblah();\r\n    }\r\n}\r\n```\r\nOr its test form:\r\n```java\r\nAmplifyApp amplifyApp = mock(AmplifyApp.class);\r\nwhen(amplifyApp.isDebuggable()).thenReturn(true);\r\n```\r\n", "bodyText": "Elsewhere, I suggest making a utility to tell whether or not the app is debuggable. When I wrote it, I had it as a static utility class. However, it might simplify your test code if it is just package-local, open-for-extension, regular class:\nclass AmplifyApp {\n    private final WeakReference<Context> context;\n\n    AmplifyApp(WeakReference<Context> context) {\n        this.context = context;\n    }\n\n    boolean isDebuggable() {\n        Context currentContext = context.get();\n        return currentContext.blahblah();\n    }\n}\nOr its test form:\nAmplifyApp amplifyApp = mock(AmplifyApp.class);\nwhen(amplifyApp.isDebuggable()).thenReturn(true);", "bodyHTML": "<p dir=\"auto\">Elsewhere, I suggest making a utility to tell whether or not the app is debuggable. When I wrote it, I had it as a static utility class. However, it might simplify your test code if it is just package-local, open-for-extension, regular class:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class AmplifyApp {\n    private final WeakReference&lt;Context&gt; context;\n\n    AmplifyApp(WeakReference&lt;Context&gt; context) {\n        this.context = context;\n    }\n\n    boolean isDebuggable() {\n        Context currentContext = context.get();\n        return currentContext.blahblah();\n    }\n}\n\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">AmplifyApp</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">WeakReference&lt;<span class=\"pl-smi\">Context</span>&gt;</span> context;\n\n    <span class=\"pl-en\">AmplifyApp</span>(<span class=\"pl-k\">WeakReference&lt;<span class=\"pl-smi\">Context</span>&gt;</span> <span class=\"pl-v\">context</span>) {\n        <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>context <span class=\"pl-k\">=</span> context;\n    }\n\n    <span class=\"pl-k\">boolean</span> <span class=\"pl-en\">isDebuggable</span>() {\n        <span class=\"pl-smi\">Context</span> currentContext <span class=\"pl-k\">=</span> context<span class=\"pl-k\">.</span>get();\n        <span class=\"pl-k\">return</span> currentContext<span class=\"pl-k\">.</span>blahblah();\n    }\n}</pre></div>\n<p dir=\"auto\">Or its test form:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"AmplifyApp amplifyApp = mock(AmplifyApp.class);\nwhen(amplifyApp.isDebuggable()).thenReturn(true);\n\"><pre><span class=\"pl-smi\">AmplifyApp</span> amplifyApp <span class=\"pl-k\">=</span> mock(<span class=\"pl-smi\">AmplifyApp</span><span class=\"pl-k\">.</span>class);\nwhen(amplifyApp<span class=\"pl-k\">.</span>isDebuggable())<span class=\"pl-k\">.</span>thenReturn(<span class=\"pl-c1\">true</span>);</pre></div>", "author": "jamesonwilliams", "createdAt": "2020-07-28T06:36:27Z", "path": "core/src/test/java/com/amplifyframework/logging/AndroidLoggingPluginTest.java", "diffHunk": "@@ -131,6 +137,39 @@ public void noContentLoggedAtThresholdNone() {\n         assertTrue(systemLog.getLines().isEmpty());\n     }\n \n+    /**\n+     * When the application is not in a debuggable build, logs are not stored.\n+     */\n+    @Test\n+    public void noLogsStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = 0;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);\n+        AndroidLoggingPlugin plugin = new AndroidLoggingPlugin();\n+        plugin.configure(new JSONObject(), mockContext);\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        logger.info(\"Info log\");\n+        assertNull(plugin.getLogs());\n+    }\n+\n+    /**\n+     * When the application is in a debuggable build, logs are stored.\n+     */\n+    @Test\n+    public void logsAreStored() {\n+        Context mockContext = mock(Context.class);\n+        ApplicationInfo mockAppInfo = mock(ApplicationInfo.class);\n+        mockAppInfo.flags = ApplicationInfo.FLAG_DEBUGGABLE;\n+        when(mockContext.getApplicationInfo()).thenReturn(mockAppInfo);", "originalCommit": "2dfa80a9631d352777d237ce0e6f6bd723c5bd25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4NDQ5Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461884496", "bodyText": "After changing the code to add a BroadcastLogger and manage the loggers inside of LoggingCategory, I now only check if the app is in a debuggable build inside DeveloperMenuManager.enableDeveloperMenu, so I did not add a utility class for this.", "author": "eeatonaws", "createdAt": "2020-07-28T21:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM1MDQzOA=="}], "type": "inlineReview"}, {"oid": "fd06088b05e4be010a988489bf06576034517208", "url": "https://github.com/aws-amplify/amplify-android/commit/fd06088b05e4be010a988489bf06576034517208", "message": "use a BroadcastLogger and LoggingCategory to store logs", "committedDate": "2020-07-28T21:05:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4NDk3OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461884979", "body": "This is way cleaner, thanks!\r\n\r\nI'd ditch the `Manager` part, you could just call it a `DeveloperMenu`. (Ref: https://blog.codinghorror.com/i-shall-call-it-somethingmanager/)\r\n\r\nThe `sharedInstance` verbiage is idiomatic to the iOS platform, but not to Android. On Android, this would probably be expressed as just `instance` (if you can have multiple) or `singleton`, or `singletonInstance`, if the code internally prevents multiple instances from being created.\r\n", "bodyText": "This is way cleaner, thanks!\nI'd ditch the Manager part, you could just call it a DeveloperMenu. (Ref: https://blog.codinghorror.com/i-shall-call-it-somethingmanager/)\nThe sharedInstance verbiage is idiomatic to the iOS platform, but not to Android. On Android, this would probably be expressed as just instance (if you can have multiple) or singleton, or singletonInstance, if the code internally prevents multiple instances from being created.", "bodyHTML": "<p dir=\"auto\">This is way cleaner, thanks!</p>\n<p dir=\"auto\">I'd ditch the <code>Manager</code> part, you could just call it a <code>DeveloperMenu</code>. (Ref: <a href=\"https://blog.codinghorror.com/i-shall-call-it-somethingmanager/\" rel=\"nofollow\">https://blog.codinghorror.com/i-shall-call-it-somethingmanager/</a>)</p>\n<p dir=\"auto\">The <code>sharedInstance</code> verbiage is idiomatic to the iOS platform, but not to Android. On Android, this would probably be expressed as just <code>instance</code> (if you can have multiple) or <code>singleton</code>, or <code>singletonInstance</code>, if the code internally prevents multiple instances from being created.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-28T21:17:18Z", "path": "core/src/main/java/com/amplifyframework/core/Amplify.java", "diffHunk": "@@ -142,9 +135,7 @@ public static void configure(@NonNull final AmplifyConfiguration configuration,\n                 }\n             }\n \n-            if (debuggableApp) {\n-                DeveloperMenuManager.sharedInstance(context).startListening();\n-            }\n+            DeveloperMenuManager.sharedInstance(context).enableDeveloperMenu();", "originalCommit": "fd06088b05e4be010a988489bf06576034517208", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4NTgxOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461885819", "body": "I think you still want to strive to have the category not know about log storage. This is leaking your dev menu logic into the category API.\r\n\r\nInstead, I would aim to express this as:\r\n```java\r\nAmplify.addPlugin(new PersistentLogStoragePlugin());\r\n```\r\n", "bodyText": "I think you still want to strive to have the category not know about log storage. This is leaking your dev menu logic into the category API.\nInstead, I would aim to express this as:\nAmplify.addPlugin(new PersistentLogStoragePlugin());", "bodyHTML": "<p dir=\"auto\">I think you still want to strive to have the category not know about log storage. This is leaking your dev menu logic into the category API.</p>\n<p dir=\"auto\">Instead, I would aim to express this as:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Amplify.addPlugin(new PersistentLogStoragePlugin());\n\"><pre><span class=\"pl-smi\">Amplify</span><span class=\"pl-k\">.</span>addPlugin(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">PersistentLogStoragePlugin</span>());</pre></div>", "author": "jamesonwilliams", "createdAt": "2020-07-28T21:19:00Z", "path": "core/src/main/java/com/amplifyframework/core/DeveloperMenuManager.java", "diffHunk": "@@ -52,6 +53,16 @@ public static DeveloperMenuManager sharedInstance(Context context) {\n         return sInstance;\n     }\n \n+    /**\n+     * Allows the developer menu to be activated if the app is in a debuggable build.\n+     */\n+    public void enableDeveloperMenu() {\n+        if ((context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {\n+            Amplify.Logging.shouldStoreLogs(true);", "originalCommit": "fd06088b05e4be010a988489bf06576034517208", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4ODAwNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461888006", "body": "Create the broadcast logger inside of `LoggingCategory`:\r\n\r\n```java\r\n@NonNull\r\n@Override\r\npublic Logger forNamespace(@NonNull String namespace) {\r\n    List<Logger> delegates = new ArrayList<>();\r\n    for (LoggingPlugin plugin : pluginsAddedViaApi) {\r\n        delegates.add(plugin.forNamespace(namespace));\r\n    }\r\n    return new BroadcastLogger(delegates);\r\n}\r\n```\r\n\r\nwith:\r\n```java\r\npublic final class BroadcastLogger {\r\n    private final List<Logger> delegates;\r\n   \r\n    public BroadcastLogger(@Nullable List<Logger> delegates) {\r\n        this.delegates = new ArrayList<>();\r\n        if (delegates != null) {\r\n            this.delegates.addAll(delegates);\r\n        }\r\n    }\r\n\r\n    void info(String message) {\r\n        log(LogLevel.INFO, message);\r\n    }\r\n\r\n    ...\r\n\r\n    void log(LogLevel level, String message) {\r\n        for (Logger delegate : delegates) {\r\n            delegate.log(level, message);\r\n        }\r\n    }\r\n}\r\n```", "bodyText": "Create the broadcast logger inside of LoggingCategory:\n@NonNull\n@Override\npublic Logger forNamespace(@NonNull String namespace) {\n    List<Logger> delegates = new ArrayList<>();\n    for (LoggingPlugin plugin : pluginsAddedViaApi) {\n        delegates.add(plugin.forNamespace(namespace));\n    }\n    return new BroadcastLogger(delegates);\n}\nwith:\npublic final class BroadcastLogger {\n    private final List<Logger> delegates;\n   \n    public BroadcastLogger(@Nullable List<Logger> delegates) {\n        this.delegates = new ArrayList<>();\n        if (delegates != null) {\n            this.delegates.addAll(delegates);\n        }\n    }\n\n    void info(String message) {\n        log(LogLevel.INFO, message);\n    }\n\n    ...\n\n    void log(LogLevel level, String message) {\n        for (Logger delegate : delegates) {\n            delegate.log(level, message);\n        }\n    }\n}", "bodyHTML": "<p dir=\"auto\">Create the broadcast logger inside of <code>LoggingCategory</code>:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@NonNull\n@Override\npublic Logger forNamespace(@NonNull String namespace) {\n    List&lt;Logger&gt; delegates = new ArrayList&lt;&gt;();\n    for (LoggingPlugin plugin : pluginsAddedViaApi) {\n        delegates.add(plugin.forNamespace(namespace));\n    }\n    return new BroadcastLogger(delegates);\n}\n\"><pre><span class=\"pl-k\">@NonNull</span>\n<span class=\"pl-k\">@Override</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">Logger</span> forNamespace(<span class=\"pl-k\">@NonNull</span> <span class=\"pl-smi\">String</span> namespace) {\n    <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">Logger</span>&gt;</span> delegates <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ArrayList&lt;&gt;</span>();\n    <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">LoggingPlugin</span> plugin <span class=\"pl-k\">:</span> pluginsAddedViaApi) {\n        delegates<span class=\"pl-k\">.</span>add(plugin<span class=\"pl-k\">.</span>forNamespace(namespace));\n    }\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">BroadcastLogger</span>(delegates);\n}</pre></div>\n<p dir=\"auto\">with:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public final class BroadcastLogger {\n    private final List&lt;Logger&gt; delegates;\n   \n    public BroadcastLogger(@Nullable List&lt;Logger&gt; delegates) {\n        this.delegates = new ArrayList&lt;&gt;();\n        if (delegates != null) {\n            this.delegates.addAll(delegates);\n        }\n    }\n\n    void info(String message) {\n        log(LogLevel.INFO, message);\n    }\n\n    ...\n\n    void log(LogLevel level, String message) {\n        for (Logger delegate : delegates) {\n            delegate.log(level, message);\n        }\n    }\n}\n\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">BroadcastLogger</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">Logger</span>&gt;</span> delegates;\n   \n    <span class=\"pl-k\">public</span> <span class=\"pl-en\">BroadcastLogger</span>(<span class=\"pl-k\">@Nullable</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">Logger</span>&gt;</span> <span class=\"pl-v\">delegates</span>) {\n        <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>delegates <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ArrayList&lt;&gt;</span>();\n        <span class=\"pl-k\">if</span> (delegates <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {\n            <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>delegates<span class=\"pl-k\">.</span>addAll(delegates);\n        }\n    }\n\n    <span class=\"pl-k\">void</span> <span class=\"pl-en\">info</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-v\">message</span>) {\n        log(<span class=\"pl-smi\">LogLevel</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>INFO</span>, message);\n    }\n\n    <span class=\"pl-c1\">...</span>\n\n    <span class=\"pl-k\">void</span> <span class=\"pl-en\">log</span>(<span class=\"pl-smi\">LogLevel</span> <span class=\"pl-v\">level</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-v\">message</span>) {\n        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Logger</span> delegate <span class=\"pl-k\">:</span> delegates) {\n            delegate<span class=\"pl-k\">.</span>log(level, message);\n        }\n    }\n}</pre></div>", "author": "jamesonwilliams", "createdAt": "2020-07-28T21:23:28Z", "path": "core/src/main/java/com/amplifyframework/logging/AndroidLoggingPlugin.java", "diffHunk": "@@ -55,16 +49,14 @@ public AndroidLoggingPlugin() {\n     @SuppressWarnings(\"WeakerAccess\") // This is a a public API\n     public AndroidLoggingPlugin(@NonNull LogLevel defaultLoggerThreshold) {\n         this.defaultLoggerThreshold = defaultLoggerThreshold;\n-        loggers = new ArrayList<>();\n     }\n \n     @NonNull\n     @Override\n     public Logger forNamespace(@Nullable String namespace) {\n         String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n-        AndroidLogger newLogger = new AndroidLogger(usedNamespace, defaultLoggerThreshold, storeLogs);\n-        loggers.add(newLogger);\n-        return newLogger;\n+        AndroidLogger androidLogger = new AndroidLogger(usedNamespace, defaultLoggerThreshold);\n+        return Amplify.Logging.createBroadcastLogger(androidLogger);", "originalCommit": "fd06088b05e4be010a988489bf06576034517208", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4ODkyOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461888929", "body": "This is logic that you'll put in your `PersistentLogger`.\r\n\r\nThe `BroadcastLogger` just farms work out to an `AndroidLogger` (that emits to logcat) and a `PersistentLogger`, which buffers content for display in the dev menu.", "bodyText": "This is logic that you'll put in your PersistentLogger.\nThe BroadcastLogger just farms work out to an AndroidLogger (that emits to logcat) and a PersistentLogger, which buffers content for display in the dev menu.", "bodyHTML": "<p dir=\"auto\">This is logic that you'll put in your <code>PersistentLogger</code>.</p>\n<p dir=\"auto\">The <code>BroadcastLogger</code> just farms work out to an <code>AndroidLogger</code> (that emits to logcat) and a <code>PersistentLogger</code>, which buffers content for display in the dev menu.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-28T21:25:22Z", "path": "core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.util.Immutable;\n+\n+import java.time.LocalDateTime;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * An implementation of {@link Logger} that can store logs and\n+ * uses a provided logger to emit logs.\n+ */\n+final class BroadcastLogger implements Logger {\n+    // Maximum number of logs to store.\n+    private static final int MAX_NUM_LOGS = 500;", "originalCommit": "fd06088b05e4be010a988489bf06576034517208", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MDExMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461890111", "body": "You could bundle together all of your code for the dev menu into `core/src/main/java/com/amplifyframework/devmenu`. This `LogEntry` is more a thing that's used by the dev menu, I'd say, than it is part of the core spec of the logger.\r\n\r\n`core/src/main/java/com/amplifyframework/logging` is meant to be a core spec for the logger category.\r\n\r\nIt does also include the default Android implementations of the plugin and logger. Which isn't 100% architecturally pure, true. In other categories, those plugins would be separate Gradle modules entirely.", "bodyText": "You could bundle together all of your code for the dev menu into core/src/main/java/com/amplifyframework/devmenu. This LogEntry is more a thing that's used by the dev menu, I'd say, than it is part of the core spec of the logger.\ncore/src/main/java/com/amplifyframework/logging is meant to be a core spec for the logger category.\nIt does also include the default Android implementations of the plugin and logger. Which isn't 100% architecturally pure, true. In other categories, those plugins would be separate Gradle modules entirely.", "bodyHTML": "<p dir=\"auto\">You could bundle together all of your code for the dev menu into <code>core/src/main/java/com/amplifyframework/devmenu</code>. This <code>LogEntry</code> is more a thing that's used by the dev menu, I'd say, than it is part of the core spec of the logger.</p>\n<p dir=\"auto\"><code>core/src/main/java/com/amplifyframework/logging</code> is meant to be a core spec for the logger category.</p>\n<p dir=\"auto\">It does also include the default Android implementations of the plugin and logger. Which isn't 100% architecturally pure, true. In other categories, those plugins would be separate Gradle modules entirely.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-28T21:27:42Z", "path": "core/src/main/java/com/amplifyframework/logging/LogEntry.java", "diffHunk": "@@ -16,26 +16,24 @@\n package com.amplifyframework.logging;\n \n import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n \n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n \n /**\n  * A representation of a log.\n  */\n public final class LogEntry {", "originalCommit": "fd06088b05e4be010a988489bf06576034517208", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkzMzIzMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461933232", "bodyText": "Would PersistentLogStoragePlugin and PersistentLogger go in the devmenu package or logging package?", "author": "eeatonaws", "createdAt": "2020-07-28T22:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MDExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNzY1MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462627651", "bodyText": "/md One could argue either way. I'd say devmenu, since its the only consumer we currently expect for the plugin.\nIf we find another use for it, we can always move it back to the more general location, later.", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:31:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MDExMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MDQ4Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r461890487", "body": "If you have a Persistent logging plugin included, then this should be implicitly true, based on the presence of the plugin. In other words, you wouldn't need this state boolean.", "bodyText": "If you have a Persistent logging plugin included, then this should be implicitly true, based on the presence of the plugin. In other words, you wouldn't need this state boolean.", "bodyHTML": "<p dir=\"auto\">If you have a Persistent logging plugin included, then this should be implicitly true, based on the presence of the plugin. In other words, you wouldn't need this state boolean.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-28T21:28:31Z", "path": "core/src/main/java/com/amplifyframework/logging/LoggingCategory.java", "diffHunk": "@@ -30,6 +34,10 @@\n  */\n public final class LoggingCategory extends Category<LoggingPlugin<?>> implements LoggingCategoryBehavior {\n     private final LoggingPlugin<?> defaultPlugin;\n+    // List of BroadcastLoggers created.\n+    private final List<BroadcastLogger> loggers;\n+    // Indicates whether the logs from all loggers should be stored.\n+    private boolean storeLogs;", "originalCommit": "fd06088b05e4be010a988489bf06576034517208", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aa4cf5878eb0b1a31f4d61d895cd9874435cb7c0", "url": "https://github.com/aws-amplify/amplify-android/commit/aa4cf5878eb0b1a31f4d61d895cd9874435cb7c0", "message": "created devmenu package and persistent logger and plugin", "committedDate": "2020-07-29T14:51:39Z", "type": "commit"}, {"oid": "6df493418162cc1b994d8dfbfce1d773f62f4774", "url": "https://github.com/aws-amplify/amplify-android/commit/6df493418162cc1b994d8dfbfce1d773f62f4774", "message": "created devmenu package in androidTest", "committedDate": "2020-07-29T14:56:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5NjE2MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462396161", "body": "Does it make sense to align the behavior to `getNamespace()`? Maybe,\r\n```java\r\nif (delegates.isEmpty()) {\r\n    throw ...\r\n} else {\r\n    return delegates.get(0).getThresholdLevel();\r\n}\r\n```\r\n\r\nAn alternative is that you enforce all of the delegates  in the `BroadcastLogger` to have the same namespace and threshold level, and then you can just return them as normal.", "bodyText": "Does it make sense to align the behavior to getNamespace()? Maybe,\nif (delegates.isEmpty()) {\n    throw ...\n} else {\n    return delegates.get(0).getThresholdLevel();\n}\nAn alternative is that you enforce all of the delegates  in the BroadcastLogger to have the same namespace and threshold level, and then you can just return them as normal.", "bodyHTML": "<p dir=\"auto\">Does it make sense to align the behavior to <code>getNamespace()</code>? Maybe,</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (delegates.isEmpty()) {\n    throw ...\n} else {\n    return delegates.get(0).getThresholdLevel();\n}\n\"><pre><span class=\"pl-k\">if</span> (delegates<span class=\"pl-k\">.</span>isEmpty()) {\n    <span class=\"pl-k\">throw</span> <span class=\"pl-c1\">...</span>\n} <span class=\"pl-k\">else</span> {\n    <span class=\"pl-k\">return</span> delegates<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>)<span class=\"pl-k\">.</span>getThresholdLevel();\n}</pre></div>\n<p dir=\"auto\">An alternative is that you enforce all of the delegates  in the <code>BroadcastLogger</code> to have the same namespace and threshold level, and then you can just return them as normal.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-29T15:39:12Z", "path": "core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * An implementation of {@link Logger} that emits logs to all loggers.\n+ */\n+public final class BroadcastLogger implements Logger {\n+    // List of loggers to emit logs to.\n+    private final List<Logger> delegates;\n+\n+    /**\n+     * Creates a new BroadcastLogger.\n+     * @param delegates the list of loggers to emit logs to\n+     */\n+    public BroadcastLogger(@Nullable List<Logger> delegates) {\n+        this.delegates = new ArrayList<>();\n+        if (delegates != null) {\n+            this.delegates.addAll(delegates);\n+        }\n+    }\n+\n+    @NonNull\n+    @Override\n+    public LogLevel getThresholdLevel() {\n+        throw new UnsupportedOperationException(\"Cannot get threshold level for BroadcastLogger.\");", "originalCommit": "6df493418162cc1b994d8dfbfce1d773f62f4774", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5ODAyMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462398023", "body": "If you use a `Set`, you might be able to avoid the need to record this state boolean. You could add a plugin twice, and the Set should be able to ignore the duplicate, on the basis of its `hashCode()` value.", "bodyText": "If you use a Set, you might be able to avoid the need to record this state boolean. You could add a plugin twice, and the Set should be able to ignore the duplicate, on the basis of its hashCode() value.", "bodyHTML": "<p dir=\"auto\">If you use a <code>Set</code>, you might be able to avoid the need to record this state boolean. You could add a plugin twice, and the Set should be able to ignore the duplicate, on the basis of its <code>hashCode()</code> value.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-29T15:41:47Z", "path": "core/src/main/java/com/amplifyframework/logging/LoggingCategory.java", "diffHunk": "@@ -53,15 +56,23 @@ public CategoryType getCategoryType() {\n     @NonNull\n     @Override\n     public Logger forNamespace(@Nullable String namespace) {\n-        return getLoggingPlugin().forNamespace(namespace);\n+        List<Logger> delegates = new ArrayList<>();\n+        boolean defaultPluginAdded = false;", "originalCommit": "6df493418162cc1b994d8dfbfce1d773f62f4774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQzNzQ5Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462437493", "bodyText": "Using a Set does not work as Loggers of the same type and namespace as well as LoggingPlugins of the same type have different hash codes (these classes don't override the hashCode method and I think the default one only guarantees that the hash codes for two objects will be equal if they represent the same instance).", "author": "eeatonaws", "createdAt": "2020-07-29T16:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5ODAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyODExOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462628119", "bodyText": "Ah yes true. But, you could add the equals and hashCode implementations! I think they didn't exist before, since there was only ever one of each, and they didn't need to be \"collection safe.\"", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5ODAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMDQwOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462400409", "body": "Do you want to use a `Map<String, PersistentLogger>`, that way you can check:\r\n```java\r\nPersistentLogger preExistingLogger = map.get(usedNamespace);\r\nif (preExistingLogger != null) {\r\n    return preExistingLogger;\r\n} else {\r\n   PersistentLogger newLogger = new PeristentLogger(usedNamespace);\r\n   map.put(usedNamespace, newLogger);\r\n   return newLogger;\r\n}\r\n```\r\n", "bodyText": "Do you want to use a Map<String, PersistentLogger>, that way you can check:\nPersistentLogger preExistingLogger = map.get(usedNamespace);\nif (preExistingLogger != null) {\n    return preExistingLogger;\n} else {\n   PersistentLogger newLogger = new PeristentLogger(usedNamespace);\n   map.put(usedNamespace, newLogger);\n   return newLogger;\n}", "bodyHTML": "<p dir=\"auto\">Do you want to use a <code>Map&lt;String, PersistentLogger&gt;</code>, that way you can check:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"PersistentLogger preExistingLogger = map.get(usedNamespace);\nif (preExistingLogger != null) {\n    return preExistingLogger;\n} else {\n   PersistentLogger newLogger = new PeristentLogger(usedNamespace);\n   map.put(usedNamespace, newLogger);\n   return newLogger;\n}\n\"><pre><span class=\"pl-smi\">PersistentLogger</span> preExistingLogger <span class=\"pl-k\">=</span> map<span class=\"pl-k\">.</span>get(usedNamespace);\n<span class=\"pl-k\">if</span> (preExistingLogger <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {\n    <span class=\"pl-k\">return</span> preExistingLogger;\n} <span class=\"pl-k\">else</span> {\n   <span class=\"pl-smi\">PersistentLogger</span> newLogger <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">PeristentLogger</span>(usedNamespace);\n   map<span class=\"pl-k\">.</span>put(usedNamespace, newLogger);\n   <span class=\"pl-k\">return</span> newLogger;\n}</pre></div>", "author": "jamesonwilliams", "createdAt": "2020-07-29T15:45:11Z", "path": "core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.devmenu.LogEntry;\n+\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Implementation of the {@link LoggingCategoryBehavior} that stores logs.\n+ */\n+public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n+    private static final String AMPLIFY_NAMESPACE = \"amplify\";\n+    // List of PersistentLoggers created.\n+    private final List<PersistentLogger> loggers;\n+\n+    /**\n+     * Creates a new PersistentLogStoragePlugin.\n+     */\n+    public PersistentLogStoragePlugin() {\n+        loggers = new ArrayList<>();\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Logger forNamespace(@Nullable String namespace) {\n+        String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n+        PersistentLogger logger = new PersistentLogger(usedNamespace);", "originalCommit": "6df493418162cc1b994d8dfbfce1d773f62f4774", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMDc0Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462400746", "body": "```suggestion\r\n        return PersistentLogStoragePlugin.class.getSimpleName();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"PersistentLogStoragePlugin\";\n          \n          \n            \n                    return PersistentLogStoragePlugin.class.getSimpleName();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds x x-first x-last\">\"</span>PersistentLogStoragePlugin<span class=\"pl-pds x x-first x-last\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">PersistentLogStoragePlugin</span><span class=\"pl-k x x-first\">.</span><span class=\"x\">class</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getSimpleName()</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jamesonwilliams", "createdAt": "2020-07-29T15:45:39Z", "path": "core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.devmenu.LogEntry;\n+\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Implementation of the {@link LoggingCategoryBehavior} that stores logs.\n+ */\n+public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n+    private static final String AMPLIFY_NAMESPACE = \"amplify\";\n+    // List of PersistentLoggers created.\n+    private final List<PersistentLogger> loggers;\n+\n+    /**\n+     * Creates a new PersistentLogStoragePlugin.\n+     */\n+    public PersistentLogStoragePlugin() {\n+        loggers = new ArrayList<>();\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Logger forNamespace(@Nullable String namespace) {\n+        String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n+        PersistentLogger logger = new PersistentLogger(usedNamespace);\n+        loggers.add(logger);\n+        return logger;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return \"PersistentLogStoragePlugin\";", "originalCommit": "6df493418162cc1b994d8dfbfce1d773f62f4774", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjA5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462402090", "body": "Hm. I think you'll need to sort these by timestamp somehow, right? Right now, they are grouped into chunks by namespace.\r\n\r\nYou can add like:\r\n```java\r\nCollections.sort(logs, (left, right) ->\r\n    left.getTimestamp().compareTo(right.getTimestamp()));\r\n```\r\nbefore you return.", "bodyText": "Hm. I think you'll need to sort these by timestamp somehow, right? Right now, they are grouped into chunks by namespace.\nYou can add like:\nCollections.sort(logs, (left, right) ->\n    left.getTimestamp().compareTo(right.getTimestamp()));\nbefore you return.", "bodyHTML": "<p dir=\"auto\">Hm. I think you'll need to sort these by timestamp somehow, right? Right now, they are grouped into chunks by namespace.</p>\n<p dir=\"auto\">You can add like:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Collections.sort(logs, (left, right) -&gt;\n    left.getTimestamp().compareTo(right.getTimestamp()));\n\"><pre><span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>sort(logs, (left, right) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span>\n    left<span class=\"pl-k\">.</span>getTimestamp()<span class=\"pl-k\">.</span>compareTo(right<span class=\"pl-k\">.</span>getTimestamp()));</pre></div>\n<p dir=\"auto\">before you return.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-29T15:47:35Z", "path": "core/src/main/java/com/amplifyframework/logging/PersistentLogStoragePlugin.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.devmenu.LogEntry;\n+\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Implementation of the {@link LoggingCategoryBehavior} that stores logs.\n+ */\n+public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n+    private static final String AMPLIFY_NAMESPACE = \"amplify\";\n+    // List of PersistentLoggers created.\n+    private final List<PersistentLogger> loggers;\n+\n+    /**\n+     * Creates a new PersistentLogStoragePlugin.\n+     */\n+    public PersistentLogStoragePlugin() {\n+        loggers = new ArrayList<>();\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Logger forNamespace(@Nullable String namespace) {\n+        String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n+        PersistentLogger logger = new PersistentLogger(usedNamespace);\n+        loggers.add(logger);\n+        return logger;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return \"PersistentLogStoragePlugin\";\n+    }\n+\n+    @Override\n+    public void configure(\n+            JSONObject pluginConfiguration,\n+            @NonNull Context context) {\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Void getEscapeHatch() {\n+        return null;\n+    }\n+\n+    /**\n+     * Returns the logs stored by all of the {@link PersistentLogger}s.\n+     * @return a list of LogEntry.\n+     */\n+    public List<LogEntry> getLogs() {\n+        List<LogEntry> logs = new ArrayList<>();\n+        for (PersistentLogger logger : loggers) {\n+            logs.addAll(logger.getLogs());", "originalCommit": "6df493418162cc1b994d8dfbfce1d773f62f4774", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjQ5OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462402499", "body": "I'd put this one with the `.devmenu` stuff.", "bodyText": "I'd put this one with the .devmenu stuff.", "bodyHTML": "<p dir=\"auto\">I'd put this one with the <code>.devmenu</code> stuff.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-29T15:48:12Z", "path": "core/src/main/java/com/amplifyframework/logging/PersistentLogger.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;", "originalCommit": "6df493418162cc1b994d8dfbfce1d773f62f4774", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "eec029dd332eb8208991b95ce6296940e9c37b12", "url": "https://github.com/aws-amplify/amplify-android/commit/eec029dd332eb8208991b95ce6296940e9c37b12", "message": "defined getThresholdLevel for BroadcastLogger and moved persistent logger and plugin to devmenu package", "committedDate": "2020-07-29T16:51:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyOTA5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462629090", "body": "Ah crap, actually. In my last round of feedback, I suggested you do:\r\n```java\r\nCollection.sort(listOfLogEntry, (left, right) -> { /* blah balh */ });\r\n```\r\nWith the comparator specified at the call site.\r\n\r\nHowever, cleaner and better encapsulated would be to have `public final class LogEntry implements Comparable<LogEntry> {`. Then, you would only need to do `Collections.sort(listOfLogEntry)`, and it would Just Work\u2122.", "bodyText": "Ah crap, actually. In my last round of feedback, I suggested you do:\nCollection.sort(listOfLogEntry, (left, right) -> { /* blah balh */ });\nWith the comparator specified at the call site.\nHowever, cleaner and better encapsulated would be to have public final class LogEntry implements Comparable<LogEntry> {. Then, you would only need to do Collections.sort(listOfLogEntry), and it would Just Work\u2122.", "bodyHTML": "<p dir=\"auto\">Ah crap, actually. In my last round of feedback, I suggested you do:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Collection.sort(listOfLogEntry, (left, right) -&gt; { /* blah balh */ });\n\"><pre><span class=\"pl-smi\">Collection</span><span class=\"pl-k\">.</span>sort(listOfLogEntry, (left, right) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> { <span class=\"pl-c\"><span class=\"pl-c\">/*</span> blah balh <span class=\"pl-c\">*/</span></span> });</pre></div>\n<p dir=\"auto\">With the comparator specified at the call site.</p>\n<p dir=\"auto\">However, cleaner and better encapsulated would be to have <code>public final class LogEntry implements Comparable&lt;LogEntry&gt; {</code>. Then, you would only need to do <code>Collections.sort(listOfLogEntry)</code>, and it would Just Work\u2122.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:35:06Z", "path": "core/src/main/java/com/amplifyframework/devmenu/LogEntry.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.LogLevel;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry {", "originalCommit": "eec029dd332eb8208991b95ce6296940e9c37b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyOTc4MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462629780", "body": "```suggestion\r\n        String dateString = dateTime.format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT));\r\n        String exceptionTrace = throwable == null ? \"\" : Log.getStackTraceString(throwable);\r\n        return String.format(Locale.US,\r\n            \"[%s] %s %s: %s \\n%s\",\r\n            logLevel.name(), dateString, namespace, message, exceptionTrace\r\n        );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return String.format(\"[%s] %s %s: %s \\n%s\", logLevel.name(),\n          \n          \n            \n                            dateTime.format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)), namespace, message,\n          \n          \n            \n                            throwable == null ? \"\" : Log.getStackTraceString(throwable));\n          \n          \n            \n                    String dateString = dateTime.format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT));\n          \n          \n            \n                    String exceptionTrace = throwable == null ? \"\" : Log.getStackTraceString(throwable);\n          \n          \n            \n                    return String.format(Locale.US,\n          \n          \n            \n                        \"[%s] %s %s: %s \\n%s\",\n          \n          \n            \n                        logLevel.name(), dateString, namespace, message, exceptionTrace\n          \n          \n            \n                    );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[%s] %s %s: %s <span class=\"pl-cce\">\\n</span>%s<span class=\"pl-pds\">\"</span></span>, logLevel<span class=\"pl-k\">.</span>name(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                dateTime<span class=\"pl-k\">.</span>format(<span class=\"pl-smi\">DateTimeFormatter</span><span class=\"pl-k\">.</span>ofPattern(<span class=\"pl-c1\">DATE_TIME_FORMAT</span>)), namespace, message,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                throwable <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-smi\">Log</span><span class=\"pl-k\">.</span>getStackTraceString(throwable));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">String</span> dateString <span class=\"pl-k\">=</span> dateTime<span class=\"pl-k\">.</span>format(<span class=\"pl-smi\">DateTimeFormatter</span><span class=\"pl-k\">.</span>ofPattern(<span class=\"pl-c1\">DATE_TIME_FORMAT</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">String</span> exceptionTrace <span class=\"pl-k\">=</span> throwable <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-smi\">Log</span><span class=\"pl-k\">.</span>getStackTraceString(throwable);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-smi\">Locale</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>US</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[%s] %s %s: %s <span class=\"pl-cce\">\\n</span>%s<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logLevel<span class=\"pl-k\">.</span>name(), dateString, namespace, message, exceptionTrace</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        );</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:37:03Z", "path": "core/src/main/java/com/amplifyframework/devmenu/LogEntry.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.LogLevel;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry {\n+    // The format for the log's date and time.\n+    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+    private final LocalDateTime dateTime;\n+    private final String namespace;\n+    private final String message;\n+    private final Throwable throwable;\n+    private final LogLevel logLevel;\n+\n+    /**\n+     * Creates a new LogEntry representing a log with the given time, tag, message,\n+     * and throwable that was logged at the given level.\n+     * @param dateTime the date and time of the log.\n+     * @param namespace the namespace of the logger that emitted the log.\n+     * @param message the message for the log.\n+     * @param throwable the Throwable associated with the log.\n+     * @param logLevel the level the log was logged at.\n+     */\n+    public LogEntry(@NonNull LocalDateTime dateTime, @Nullable String namespace, @Nullable String message,\n+                    @Nullable Throwable throwable, @NonNull LogLevel logLevel) {\n+        this.dateTime = Objects.requireNonNull(dateTime);\n+        this.logLevel = Objects.requireNonNull(logLevel);\n+        this.namespace = namespace;\n+        this.message = message;\n+        this.throwable = throwable;\n+    }\n+\n+    /**\n+     * Gets the date and time of the log.\n+     * @return the date and time of the log.\n+     */\n+    public LocalDateTime getDateTime() {\n+        return dateTime;\n+    }\n+\n+    /**\n+     * Gets the namespace of the logger that emitted the log.\n+     * @return the namespace of the logger that emitted the log.\n+     */\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    /**\n+     * Gets the message for the log.\n+     * @return the message for the log.\n+     */\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Gets the throwable for the log.\n+     * @return the throwable for the log, or null if there is no throwable for the log.\n+     */\n+    public Throwable getThrowable() {\n+        return throwable;\n+    }\n+\n+    /**\n+     * Gets the level the log was logged at.\n+     * @return the level the log was logged at.\n+     */\n+    public LogLevel getLogLevel() {\n+        return logLevel;\n+    }\n+\n+    /**\n+     * Returns a String representation of this log.\n+     * @return a String representing this log.\n+     */\n+    public String toString() {\n+        return String.format(\"[%s] %s %s: %s \\n%s\", logLevel.name(),\n+                dateTime.format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)), namespace, message,\n+                throwable == null ? \"\" : Log.getStackTraceString(throwable));", "originalCommit": "eec029dd332eb8208991b95ce6296940e9c37b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMDU3MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462630570", "body": "Another strategy here, which I prefer, is to compare the top-level types with a single `assertEquals` statement. That is:\r\n```java\r\nassertEquals(\r\n    Collections.singletonList(new LogLine(\r\n        yourExcpected,\r\n        valuesHere\r\n    )),\r\n    plugin.getLogs()\r\n)\r\n```", "bodyText": "Another strategy here, which I prefer, is to compare the top-level types with a single assertEquals statement. That is:\nassertEquals(\n    Collections.singletonList(new LogLine(\n        yourExcpected,\n        valuesHere\n    )),\n    plugin.getLogs()\n)", "bodyHTML": "<p dir=\"auto\">Another strategy here, which I prefer, is to compare the top-level types with a single <code>assertEquals</code> statement. That is:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertEquals(\n    Collections.singletonList(new LogLine(\n        yourExcpected,\n        valuesHere\n    )),\n    plugin.getLogs()\n)\n\"><pre>assertEquals(\n    <span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>singletonList(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">LogLine</span>(\n        yourExcpected,\n        valuesHere\n    )),\n    plugin<span class=\"pl-k\">.</span>getLogs()\n)</pre></div>", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:39:18Z", "path": "core/src/test/java/com/amplifyframework/devmenu/PersistentLogStoragePluginTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import com.amplifyframework.logging.LogLevel;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests the {@link PersistentLogStoragePlugin}.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class PersistentLogStoragePluginTest {\n+\n+    /**\n+     * Tests that a log emitted by a PersistentLogger is stored.\n+     */\n+    @Test\n+    public void logsAreStored() {\n+        PersistentLogStoragePlugin plugin = new PersistentLogStoragePlugin();\n+        Logger logger = plugin.forNamespace(\"logging-test\");\n+        String message = \"Error log\";\n+        Throwable throwable = new Throwable(\"error message\");\n+        logger.error(message, throwable);\n+        List<LogEntry> logs = plugin.getLogs();\n+        assertEquals(1, logs.size());\n+        LogEntry log = logs.get(0);\n+        assertEquals(logger.getNamespace(), log.getNamespace());\n+        assertEquals(message, log.getMessage());\n+        Assert.assertEquals(LogLevel.ERROR, log.getLogLevel());\n+        assertEquals(throwable, log.getThrowable());", "originalCommit": "eec029dd332eb8208991b95ce6296940e9c37b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMTE3OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462631179", "body": "Hm. Actually, you could refuse to create a `BroadcastLogger` if `delegates.size() < 1`. That'd remove the need for your `if (delegates.isEmpty())` checks, anyway.", "bodyText": "Hm. Actually, you could refuse to create a BroadcastLogger if delegates.size() < 1. That'd remove the need for your if (delegates.isEmpty()) checks, anyway.", "bodyHTML": "<p dir=\"auto\">Hm. Actually, you could refuse to create a <code>BroadcastLogger</code> if <code>delegates.size() &lt; 1</code>. That'd remove the need for your <code>if (delegates.isEmpty())</code> checks, anyway.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:40:59Z", "path": "core/src/main/java/com/amplifyframework/logging/BroadcastLogger.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * An implementation of {@link Logger} that emits logs to all loggers.\n+ */\n+public final class BroadcastLogger implements Logger {\n+    // List of loggers to emit logs to.\n+    private final List<Logger> delegates;\n+\n+    /**\n+     * Creates a new BroadcastLogger.\n+     * @param delegates the list of loggers to emit logs to\n+     */\n+    public BroadcastLogger(@Nullable List<Logger> delegates) {\n+        this.delegates = new ArrayList<>();\n+        if (delegates != null) {\n+            this.delegates.addAll(delegates);\n+        }", "originalCommit": "eec029dd332eb8208991b95ce6296940e9c37b12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNDg4NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462634884", "bodyText": "Good point. Also, delegates.size() should never be less than 1 since a logger from the defaultPlugin is always added.", "author": "eeatonaws", "createdAt": "2020-07-29T22:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMTE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMTM3Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462631377", "body": "trivial nit: would join this up onto a single line", "bodyText": "trivial nit: would join this up onto a single line", "bodyHTML": "<p dir=\"auto\">trivial nit: would join this up onto a single line</p>", "author": "jamesonwilliams", "createdAt": "2020-07-29T22:41:37Z", "path": "core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.Logger;\n+import com.amplifyframework.logging.LoggingCategoryBehavior;\n+import com.amplifyframework.logging.LoggingPlugin;\n+\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Implementation of the {@link LoggingCategoryBehavior} that stores logs.\n+ */\n+public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n+    private static final String AMPLIFY_NAMESPACE = \"amplify\";\n+    // Map from namespace to the PersistentLogger for that namespace.\n+    private final Map<String, PersistentLogger> loggers;\n+\n+    /**\n+     * Creates a new PersistentLogStoragePlugin.\n+     */\n+    public PersistentLogStoragePlugin() {\n+        loggers = new HashMap<>();\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Logger forNamespace(@Nullable String namespace) {\n+        String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n+        PersistentLogger preExistingLogger = loggers.get(usedNamespace);\n+        if (preExistingLogger != null) {\n+            return preExistingLogger;\n+        } else {\n+            PersistentLogger newLogger = new PersistentLogger(usedNamespace);\n+            loggers.put(usedNamespace, newLogger);\n+            return newLogger;\n+        }\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return PersistentLogStoragePlugin.class.getSimpleName();\n+    }\n+\n+    @Override\n+    public void configure(\n+            JSONObject pluginConfiguration,\n+            @NonNull Context context) {", "originalCommit": "eec029dd332eb8208991b95ce6296940e9c37b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e535bf326e4c3d842c688e00add748afb80570c1", "url": "https://github.com/aws-amplify/amplify-android/commit/e535bf326e4c3d842c688e00add748afb80570c1", "message": "added equals and hashCode methods for LogEntry and LoggingPlugin", "committedDate": "2020-07-29T23:35:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0OTgxMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462649813", "body": "Since some of these can be `null`, you risk throwing `NullPointerException` from this code. The `ObjectsCompat.equals(foo, bar)` performs a `null`-safe check, and will return `true` when both args are `null`.", "bodyText": "Since some of these can be null, you risk throwing NullPointerException from this code. The ObjectsCompat.equals(foo, bar) performs a null-safe check, and will return true when both args are null.", "bodyHTML": "<p dir=\"auto\">Since some of these can be <code>null</code>, you risk throwing <code>NullPointerException</code> from this code. The <code>ObjectsCompat.equals(foo, bar)</code> performs a <code>null</code>-safe check, and will return <code>true</code> when both args are <code>null</code>.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-29T23:38:03Z", "path": "core/src/main/java/com/amplifyframework/devmenu/LogEntry.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.LogLevel;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry implements Comparable<LogEntry> {\n+    // The format for the log's date and time.\n+    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+    private final LocalDateTime dateTime;\n+    private final String namespace;\n+    private final String message;\n+    private final Throwable throwable;\n+    private final LogLevel logLevel;\n+\n+    /**\n+     * Creates a new LogEntry representing a log with the given time, tag, message,\n+     * and throwable that was logged at the given level.\n+     * @param dateTime the date and time of the log.\n+     * @param namespace the namespace of the logger that emitted the log.\n+     * @param message the message for the log.\n+     * @param throwable the Throwable associated with the log.\n+     * @param logLevel the level the log was logged at.\n+     */\n+    public LogEntry(@NonNull LocalDateTime dateTime, @Nullable String namespace, @Nullable String message,\n+                    @Nullable Throwable throwable, @NonNull LogLevel logLevel) {\n+        this.dateTime = Objects.requireNonNull(dateTime);\n+        this.logLevel = Objects.requireNonNull(logLevel);\n+        this.namespace = namespace;\n+        this.message = message;\n+        this.throwable = throwable;\n+    }\n+\n+    /**\n+     * Gets the date and time of the log.\n+     * @return the date and time of the log.\n+     */\n+    public LocalDateTime getDateTime() {\n+        return dateTime;\n+    }\n+\n+    /**\n+     * Gets the namespace of the logger that emitted the log.\n+     * @return the namespace of the logger that emitted the log.\n+     */\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    /**\n+     * Gets the message for the log.\n+     * @return the message for the log.\n+     */\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Gets the throwable for the log.\n+     * @return the throwable for the log, or null if there is no throwable for the log.\n+     */\n+    public Throwable getThrowable() {\n+        return throwable;\n+    }\n+\n+    /**\n+     * Gets the level the log was logged at.\n+     * @return the level the log was logged at.\n+     */\n+    public LogLevel getLogLevel() {\n+        return logLevel;\n+    }\n+\n+    @Override\n+    public int compareTo(LogEntry logEntry) {\n+        return getDateTime().compareTo(logEntry.getDateTime());\n+    }\n+\n+    @Override\n+    public boolean equals(Object object) {\n+        if (!(object instanceof LogEntry)) {\n+            return false;\n+        }\n+        LogEntry otherEntry = (LogEntry) object;\n+        return dateTime.equals(otherEntry.getDateTime()) && logLevel.equals(otherEntry.getLogLevel())\n+                && namespace.equals(otherEntry.getNamespace()) && message.equals(otherEntry.getMessage())\n+                && throwable.equals(otherEntry.getThrowable());", "originalCommit": "e535bf326e4c3d842c688e00add748afb80570c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MDYzMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462650633", "body": "For both `equals()` and `hashCode()`, you can have the IDE generate them for you. There's a standard recipe for `hashCode()` in Java which involves offsetting individual component hash codes with a prime.\r\n\r\nIn Android Studio, right click in the main document of the `LogEntry` class, and click \"Generate...\" then select \"equals() and hashCode().\" For \"Template,\" I use \"IntelliJ Default.\" The next page will ask you which values can be null or non-null, and you can follow along with what you put in your constructor params.\r\n", "bodyText": "For both equals() and hashCode(), you can have the IDE generate them for you. There's a standard recipe for hashCode() in Java which involves offsetting individual component hash codes with a prime.\nIn Android Studio, right click in the main document of the LogEntry class, and click \"Generate...\" then select \"equals() and hashCode().\" For \"Template,\" I use \"IntelliJ Default.\" The next page will ask you which values can be null or non-null, and you can follow along with what you put in your constructor params.", "bodyHTML": "<p dir=\"auto\">For both <code>equals()</code> and <code>hashCode()</code>, you can have the IDE generate them for you. There's a standard recipe for <code>hashCode()</code> in Java which involves offsetting individual component hash codes with a prime.</p>\n<p dir=\"auto\">In Android Studio, right click in the main document of the <code>LogEntry</code> class, and click \"Generate...\" then select \"equals() and hashCode().\" For \"Template,\" I use \"IntelliJ Default.\" The next page will ask you which values can be null or non-null, and you can follow along with what you put in your constructor params.</p>", "author": "jamesonwilliams", "createdAt": "2020-07-29T23:40:46Z", "path": "core/src/main/java/com/amplifyframework/devmenu/LogEntry.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.LogLevel;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+/**\n+ * A representation of a log.\n+ */\n+public final class LogEntry implements Comparable<LogEntry> {\n+    // The format for the log's date and time.\n+    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+    private final LocalDateTime dateTime;\n+    private final String namespace;\n+    private final String message;\n+    private final Throwable throwable;\n+    private final LogLevel logLevel;\n+\n+    /**\n+     * Creates a new LogEntry representing a log with the given time, tag, message,\n+     * and throwable that was logged at the given level.\n+     * @param dateTime the date and time of the log.\n+     * @param namespace the namespace of the logger that emitted the log.\n+     * @param message the message for the log.\n+     * @param throwable the Throwable associated with the log.\n+     * @param logLevel the level the log was logged at.\n+     */\n+    public LogEntry(@NonNull LocalDateTime dateTime, @Nullable String namespace, @Nullable String message,\n+                    @Nullable Throwable throwable, @NonNull LogLevel logLevel) {\n+        this.dateTime = Objects.requireNonNull(dateTime);\n+        this.logLevel = Objects.requireNonNull(logLevel);\n+        this.namespace = namespace;\n+        this.message = message;\n+        this.throwable = throwable;\n+    }\n+\n+    /**\n+     * Gets the date and time of the log.\n+     * @return the date and time of the log.\n+     */\n+    public LocalDateTime getDateTime() {\n+        return dateTime;\n+    }\n+\n+    /**\n+     * Gets the namespace of the logger that emitted the log.\n+     * @return the namespace of the logger that emitted the log.\n+     */\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    /**\n+     * Gets the message for the log.\n+     * @return the message for the log.\n+     */\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Gets the throwable for the log.\n+     * @return the throwable for the log, or null if there is no throwable for the log.\n+     */\n+    public Throwable getThrowable() {\n+        return throwable;\n+    }\n+\n+    /**\n+     * Gets the level the log was logged at.\n+     * @return the level the log was logged at.\n+     */\n+    public LogLevel getLogLevel() {\n+        return logLevel;\n+    }\n+\n+    @Override\n+    public int compareTo(LogEntry logEntry) {\n+        return getDateTime().compareTo(logEntry.getDateTime());\n+    }\n+\n+    @Override\n+    public boolean equals(Object object) {\n+        if (!(object instanceof LogEntry)) {\n+            return false;\n+        }\n+        LogEntry otherEntry = (LogEntry) object;\n+        return dateTime.equals(otherEntry.getDateTime()) && logLevel.equals(otherEntry.getLogLevel())\n+                && namespace.equals(otherEntry.getNamespace()) && message.equals(otherEntry.getMessage())\n+                && throwable.equals(otherEntry.getThrowable());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return dateTime.hashCode() + logLevel.hashCode() + namespace.hashCode() + message.hashCode()\n+                + throwable.hashCode();", "originalCommit": "e535bf326e4c3d842c688e00add748afb80570c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MDgyOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462650828", "body": "`return Immutable.of(logs)` ?", "bodyText": "return Immutable.of(logs) ?", "bodyHTML": "<p dir=\"auto\"><code>return Immutable.of(logs)</code> ?</p>", "author": "jamesonwilliams", "createdAt": "2020-07-29T23:41:21Z", "path": "core/src/main/java/com/amplifyframework/devmenu/PersistentLogStoragePlugin.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.Logger;\n+import com.amplifyframework.logging.LoggingCategoryBehavior;\n+import com.amplifyframework.logging.LoggingPlugin;\n+\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Implementation of the {@link LoggingCategoryBehavior} that stores logs.\n+ */\n+public final class PersistentLogStoragePlugin extends LoggingPlugin<Void> {\n+    private static final String AMPLIFY_NAMESPACE = \"amplify\";\n+    // Map from namespace to the PersistentLogger for that namespace.\n+    private final Map<String, PersistentLogger> loggers;\n+\n+    /**\n+     * Creates a new PersistentLogStoragePlugin.\n+     */\n+    public PersistentLogStoragePlugin() {\n+        loggers = new HashMap<>();\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Logger forNamespace(@Nullable String namespace) {\n+        String usedNamespace = namespace == null ? AMPLIFY_NAMESPACE : namespace;\n+        PersistentLogger preExistingLogger = loggers.get(usedNamespace);\n+        if (preExistingLogger != null) {\n+            return preExistingLogger;\n+        } else {\n+            PersistentLogger newLogger = new PersistentLogger(usedNamespace);\n+            loggers.put(usedNamespace, newLogger);\n+            return newLogger;\n+        }\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return PersistentLogStoragePlugin.class.getSimpleName();\n+    }\n+\n+    @Override\n+    public void configure(JSONObject pluginConfiguration, @NonNull Context context) {\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Void getEscapeHatch() {\n+        return null;\n+    }\n+\n+    /**\n+     * Returns the logs stored by all of the {@link PersistentLogger}s\n+     * in order from oldest to newest in terms of timestamp.\n+     * @return a sorted list of LogEntry.\n+     */\n+    public List<LogEntry> getLogs() {\n+        List<LogEntry> logs = new ArrayList<>();\n+        for (PersistentLogger logger : loggers.values()) {\n+            logs.addAll(logger.getLogs());\n+        }\n+        Collections.sort(logs);\n+        return logs;", "originalCommit": "e535bf326e4c3d842c688e00add748afb80570c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MDg5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/675#discussion_r462650890", "body": "```suggestion\r\n        this.logs = new LinkedList<>();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logs = new LinkedList<>();\n          \n          \n            \n                    this.logs = new LinkedList<>();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logs <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">LinkedList&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1 x x-first\">this</span><span class=\"pl-k x x-last\">.</span>logs <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">LinkedList&lt;&gt;</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jamesonwilliams", "createdAt": "2020-07-29T23:41:35Z", "path": "core/src/main/java/com/amplifyframework/devmenu/PersistentLogger.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.devmenu;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.logging.LogLevel;\n+import com.amplifyframework.logging.Logger;\n+import com.amplifyframework.util.Immutable;\n+\n+import java.time.LocalDateTime;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * An implementation of {@link Logger} that stores logs.\n+ */\n+final class PersistentLogger implements Logger {\n+    // Maximum number of logs to store.\n+    private static final int MAX_NUM_LOGS = 500;\n+    // Namespace for this logger.\n+    private final String namespace;\n+    // The logs stored by this logger.\n+    private final List<LogEntry> logs;\n+\n+    PersistentLogger(@NonNull String namespace) {\n+        this.namespace = Objects.requireNonNull(namespace);\n+        logs = new LinkedList<>();", "originalCommit": "e535bf326e4c3d842c688e00add748afb80570c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "96c4a2b8c379c583e60a4a785fce9db4a607ca5c", "url": "https://github.com/aws-amplify/amplify-android/commit/96c4a2b8c379c583e60a4a785fce9db4a607ca5c", "message": "changed equals and hashCode implementations in LogEntry", "committedDate": "2020-07-30T14:35:05Z", "type": "commit"}]}