{"pr_number": 433, "pr_title": "Refactors methods to match design and adds unit tests", "pr_author": "TrekSoft", "pr_createdAt": "2020-05-06T19:48:18Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/433", "timeline": [{"oid": "4d22f75534a70bbd3ad380bee3b1cf7059cfd097", "url": "https://github.com/aws-amplify/amplify-android/commit/4d22f75534a70bbd3ad380bee3b1cf7059cfd097", "message": "Refactors methods to design and adds unit tests", "committedDate": "2020-05-06T19:14:30Z", "type": "commit"}, {"oid": "c920abdf1eef49684114347a4703feaf8e664985", "url": "https://github.com/aws-amplify/amplify-android/commit/c920abdf1eef49684114347a4703feaf8e664985", "message": "Adds NonNull/Nullable annotation", "committedDate": "2020-05-06T19:45:26Z", "type": "commit"}, {"oid": "560463f9ddede2126b8bb036f153723a96adb69e", "url": "https://github.com/aws-amplify/amplify-android/commit/560463f9ddede2126b8bb036f153723a96adb69e", "message": "Corrects minor spacing", "committedDate": "2020-05-06T20:29:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMjU4Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421232582", "body": "It's impossible to know what this means, without going to look it up.\r\n\r\nMy usual suggestion here is to replace a boolean flag with an enum, which is plenty more semantic:\r\n```\r\nenum PerformMoonLaunch {\r\n    YEA_DO_IT,\r\n    NAH_CHIEF_NO_THANKS;\r\n}\r\n```\r\nHow it looks when being passed as a flag:\r\n```\r\n// Oh! it's time to go to the moon...\r\nnasa.runHoustonOperations(PerformMoonLaunch.YEA_DO_IT);\r\n```\r\nvs. the original with a `boolean` flag:\r\n```\r\n// Oh okay, we should run the operations, for real? Or... wait, why is there a bool?\r\nnasa.runHoustonOperations(true);\r\n```", "bodyText": "It's impossible to know what this means, without going to look it up.\nMy usual suggestion here is to replace a boolean flag with an enum, which is plenty more semantic:\nenum PerformMoonLaunch {\n    YEA_DO_IT,\n    NAH_CHIEF_NO_THANKS;\n}\n\nHow it looks when being passed as a flag:\n// Oh! it's time to go to the moon...\nnasa.runHoustonOperations(PerformMoonLaunch.YEA_DO_IT);\n\nvs. the original with a boolean flag:\n// Oh okay, we should run the operations, for real? Or... wait, why is there a bool?\nnasa.runHoustonOperations(true);", "bodyHTML": "<p dir=\"auto\">It's impossible to know what this means, without going to look it up.</p>\n<p dir=\"auto\">My usual suggestion here is to replace a boolean flag with an enum, which is plenty more semantic:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"enum PerformMoonLaunch {\n    YEA_DO_IT,\n    NAH_CHIEF_NO_THANKS;\n}\n\"><pre><code>enum PerformMoonLaunch {\n    YEA_DO_IT,\n    NAH_CHIEF_NO_THANKS;\n}\n</code></pre></div>\n<p dir=\"auto\">How it looks when being passed as a flag:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Oh! it's time to go to the moon...\nnasa.runHoustonOperations(PerformMoonLaunch.YEA_DO_IT);\n\"><pre><code>// Oh! it's time to go to the moon...\nnasa.runHoustonOperations(PerformMoonLaunch.YEA_DO_IT);\n</code></pre></div>\n<p dir=\"auto\">vs. the original with a <code>boolean</code> flag:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Oh okay, we should run the operations, for real? Or... wait, why is there a bool?\nnasa.runHoustonOperations(true);\n\"><pre><code>// Oh okay, we should run the operations, for real? Or... wait, why is there a bool?\nnasa.runHoustonOperations(true);\n</code></pre></div>", "author": "jamesonwilliams", "createdAt": "2020-05-07T04:30:31Z", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -452,16 +414,23 @@ public void onError(Exception exception) {\n     }\n \n     @Override\n-    public void forgotPassword(\n+    public void resetPassword(\n             @NonNull String username,\n-            @NonNull Consumer<AuthCodeDeliveryDetails> onSuccess,\n+            @NonNull Consumer<AuthResetPasswordResult> onSuccess,\n             @NonNull Consumer<AuthException> onException\n     ) {\n-        AWSMobileClient.getInstance().forgotPassword(username, new Callback<ForgotPasswordResult>() {\n+        awsMobileClient.forgotPassword(username, new Callback<ForgotPasswordResult>() {\n             @Override\n             public void onResult(ForgotPasswordResult result) {\n                 if (result.getState().equals(ForgotPasswordState.CONFIRMATION_CODE)) {\n-                    onSuccess.accept(convertCodeDeliveryDetails(result.getParameters()));\n+                    onSuccess.accept(new AuthResetPasswordResult(\n+                            false,", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3ODYwMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421478601", "bodyText": "The thing about this is that we do want the value being accessed by the customer to be a boolean vs. an enum and a customer would never need to construct this result object so in this case, I think the extra complexity this would introduce isn't justified.", "author": "TrekSoft", "createdAt": "2020-05-07T12:51:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMjU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1MTMzNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421951336", "bodyText": "It isn't much extra complexity, really:\nboolean someFlag;\n\nvs.\nenum SomeFlag {\n    TRUE,\n    FALSE\n}\n\n3 lines more --- none more, if you cheat:\nenum SomeFlag { TRUE, FALSE }\n\n:-)", "author": "jamesonwilliams", "createdAt": "2020-05-08T05:46:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMjU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0OTk0Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r422149947", "bodyText": "Per the design meeting, the value the customer is interacting with should be a boolean (in this case isPasswordReset) so given that plugin developers are constructing this as a result object, I think it's more straightforward for them to construct it with the raw values they intend the customer to receive rather than having to check the implementation of isPasswordReset() to see that while it's constructed with an ENUM, it ends up being converted to a boolean result.", "author": "TrekSoft", "createdAt": "2020-05-08T13:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMjU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMzUwMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421233501", "body": "Instead of having a constructor which allows a null field, provide an overloaded constructor that doesn't require the field. This way, the class _never_ accepts _null_. (You might use one internally, but that's your own business.)\r\n\r\ne.g.\r\n```\r\n// Huh? What's null?\r\nnasa.fuelUp(rockets, null, fuelSequences);\r\n```\r\nvs.\r\n```\r\nnasa.fuelUp(rockets, fuelSequences);\r\n```\r\nOr:\r\n```\r\nnasa.fuelUp(rockets, fuelContainers, fuelSequences);\r\n```", "bodyText": "Instead of having a constructor which allows a null field, provide an overloaded constructor that doesn't require the field. This way, the class never accepts null. (You might use one internally, but that's your own business.)\ne.g.\n// Huh? What's null?\nnasa.fuelUp(rockets, null, fuelSequences);\n\nvs.\nnasa.fuelUp(rockets, fuelSequences);\n\nOr:\nnasa.fuelUp(rockets, fuelContainers, fuelSequences);", "bodyHTML": "<p dir=\"auto\">Instead of having a constructor which allows a null field, provide an overloaded constructor that doesn't require the field. This way, the class <em>never</em> accepts <em>null</em>. (You might use one internally, but that's your own business.)</p>\n<p dir=\"auto\">e.g.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Huh? What's null?\nnasa.fuelUp(rockets, null, fuelSequences);\n\"><pre><code>// Huh? What's null?\nnasa.fuelUp(rockets, null, fuelSequences);\n</code></pre></div>\n<p dir=\"auto\">vs.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"nasa.fuelUp(rockets, fuelSequences);\n\"><pre><code>nasa.fuelUp(rockets, fuelSequences);\n</code></pre></div>\n<p dir=\"auto\">Or:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"nasa.fuelUp(rockets, fuelContainers, fuelSequences);\n\"><pre><code>nasa.fuelUp(rockets, fuelContainers, fuelSequences);\n</code></pre></div>", "author": "jamesonwilliams", "createdAt": "2020-05-07T04:34:21Z", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -452,16 +414,23 @@ public void onError(Exception exception) {\n     }\n \n     @Override\n-    public void forgotPassword(\n+    public void resetPassword(\n             @NonNull String username,\n-            @NonNull Consumer<AuthCodeDeliveryDetails> onSuccess,\n+            @NonNull Consumer<AuthResetPasswordResult> onSuccess,\n             @NonNull Consumer<AuthException> onException\n     ) {\n-        AWSMobileClient.getInstance().forgotPassword(username, new Callback<ForgotPasswordResult>() {\n+        awsMobileClient.forgotPassword(username, new Callback<ForgotPasswordResult>() {\n             @Override\n             public void onResult(ForgotPasswordResult result) {\n                 if (result.getState().equals(ForgotPasswordState.CONFIRMATION_CODE)) {\n-                    onSuccess.accept(convertCodeDeliveryDetails(result.getParameters()));\n+                    onSuccess.accept(new AuthResetPasswordResult(\n+                            false,\n+                            new AuthNextResetPasswordStep(\n+                                    AuthResetPasswordStep.CONFIRM_RESET_PASSWORD_WITH_CODE,\n+                                    null,", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3ODk2MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421478960", "bodyText": "This is also a class which is only constructed internally when creating the result to pass back so I don't think the extra complexity is warranted - definitely understand if this was something we were expecting customers to construct.", "author": "TrekSoft", "createdAt": "2020-05-07T12:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMzUwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1MjI3Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421952276", "bodyText": "Ah this one is the \"additional info\" field (I had to go look it up.) You could at least do Collections.emptyMap() to visually indicate the type of the param, even if it won't be utilized in any significant way. Also, means you don't have to add an if (thing is null) do special ops branch. It actually reduces complexity.", "author": "jamesonwilliams", "createdAt": "2020-05-08T05:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMzUwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1MDI3NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r422150275", "bodyText": "ok", "author": "TrekSoft", "createdAt": "2020-05-08T13:43:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMzUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMzk5OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421233999", "body": "Not for this PR --\r\n\r\nMaybe we should only _require_ the recovery suggestion if there is no `cause`. That is to say, we could create amplify exceptions from just a message and a cause", "bodyText": "Not for this PR --\nMaybe we should only require the recovery suggestion if there is no cause. That is to say, we could create amplify exceptions from just a message and a cause", "bodyHTML": "<p dir=\"auto\">Not for this PR --</p>\n<p dir=\"auto\">Maybe we should only <em>require</em> the recovery suggestion if there is no <code>cause</code>. That is to say, we could create amplify exceptions from just a message and a cause</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T04:36:19Z", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -517,14 +486,34 @@ public void onError(Exception exception) {\n         );\n     }\n \n+    @Override\n+    public void updatePassword(\n+            @NonNull String oldPassword,\n+            @NonNull String newPassword,\n+            @Nullable Action onSuccess,\n+            @Nullable Consumer<AuthException> onError\n+    ) {\n+        awsMobileClient.changePassword(oldPassword, newPassword, new Callback<Void>() {\n+            @Override\n+            public void onResult(Void result) {\n+                onSuccess.call();\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onError.accept(new AuthException(\n+                        \"Failed to change password\",\n+                        error,\n+                        \"See attached exception for more details\"", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3OTczMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421479733", "bodyText": "Hmm, I think we still want to force developers to think about whether there is a helpful explanation they can give even with a cause - there are many cases where there's going to be an underlying exception where a helpful suggestion is still needed.", "author": "TrekSoft", "createdAt": "2020-05-07T12:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMzk5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1MjYxMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421952613", "bodyText": "I feel like 50% of our recovery suggestions right now are either the TODO or a \"see attached exception\" or a \"file a bug,\" right now. We should streamline these, if they're going to be so prevalent.", "author": "jamesonwilliams", "createdAt": "2020-05-08T05:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMzk5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1MDkwNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r422150904", "bodyText": "I agree - per my other comment, this is a framework wide discussion we should have about the proper way to do this on Android.", "author": "TrekSoft", "createdAt": "2020-05-08T13:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMzk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzNTg4OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421235888", "body": "If you have to call `get` immediately after `containsKey`, it's usually better to just call `get`, and check if the result is not `null`. This way, you perform the check once, atomically, and don't get into a race condition between the two (very closely ocurring calls.)\r\n\r\nThat is, this is \"racy\":\r\n```\r\nif (map.containsKey(key)) { // It does!! Neat.\r\n    // Right in here, some other thread goes and deleted key from the map.\r\n    Value value = map.get(key);  // It doesn't. Ugh!!\r\n    // Here, value might be null anyway. So, to be 100% safe, you'd have to check it _anyway_\r\n    if (value != null) {\r\n    }\r\n}\r\n```\r\nVs.\r\n```\r\nValue value = map.get(key);\r\n// key is removed from map on a different thread.\r\nif (value != null) {\r\n    // Meanwhile, we have a snapshot of the value and can continue\r\n}\r\n```\r\nNow, if a cache-coherent view of the value is necessary across threads, the above still doesn't solve _that_ issue.", "bodyText": "If you have to call get immediately after containsKey, it's usually better to just call get, and check if the result is not null. This way, you perform the check once, atomically, and don't get into a race condition between the two (very closely ocurring calls.)\nThat is, this is \"racy\":\nif (map.containsKey(key)) { // It does!! Neat.\n    // Right in here, some other thread goes and deleted key from the map.\n    Value value = map.get(key);  // It doesn't. Ugh!!\n    // Here, value might be null anyway. So, to be 100% safe, you'd have to check it _anyway_\n    if (value != null) {\n    }\n}\n\nVs.\nValue value = map.get(key);\n// key is removed from map on a different thread.\nif (value != null) {\n    // Meanwhile, we have a snapshot of the value and can continue\n}\n\nNow, if a cache-coherent view of the value is necessary across threads, the above still doesn't solve that issue.", "bodyHTML": "<p dir=\"auto\">If you have to call <code>get</code> immediately after <code>containsKey</code>, it's usually better to just call <code>get</code>, and check if the result is not <code>null</code>. This way, you perform the check once, atomically, and don't get into a race condition between the two (very closely ocurring calls.)</p>\n<p dir=\"auto\">That is, this is \"racy\":</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (map.containsKey(key)) { // It does!! Neat.\n    // Right in here, some other thread goes and deleted key from the map.\n    Value value = map.get(key);  // It doesn't. Ugh!!\n    // Here, value might be null anyway. So, to be 100% safe, you'd have to check it _anyway_\n    if (value != null) {\n    }\n}\n\"><pre><code>if (map.containsKey(key)) { // It does!! Neat.\n    // Right in here, some other thread goes and deleted key from the map.\n    Value value = map.get(key);  // It doesn't. Ugh!!\n    // Here, value might be null anyway. So, to be 100% safe, you'd have to check it _anyway_\n    if (value != null) {\n    }\n}\n</code></pre></div>\n<p dir=\"auto\">Vs.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Value value = map.get(key);\n// key is removed from map on a different thread.\nif (value != null) {\n    // Meanwhile, we have a snapshot of the value and can continue\n}\n\"><pre><code>Value value = map.get(key);\n// key is removed from map on a different thread.\nif (value != null) {\n    // Meanwhile, we have a snapshot of the value and can continue\n}\n</code></pre></div>\n<p dir=\"auto\">Now, if a cache-coherent view of the value is necessary across threads, the above still doesn't solve <em>that</em> issue.</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T04:44:12Z", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/SignInStateConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito.util;\n+\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+\n+import com.amazonaws.mobile.client.results.SignInState;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Helpful util class to convert AWSMobileClient sign in state enum to the Amplify equivalent.\n+ */\n+public final class SignInStateConverter {\n+    private static final Map<SignInState, AuthSignInStep> CONVERT_SIGN_IN_STATE;\n+\n+    /**\n+     * Dis-allows instantiation of this class.\n+     */\n+    private SignInStateConverter() { }\n+\n+    static {\n+        Map<SignInState, AuthSignInStep> convertSignInStateInit = new HashMap<>();\n+        convertSignInStateInit.put(SignInState.SMS_MFA, AuthSignInStep.CONFIRM_SIGN_IN_WITH_SMS_MFA_CODE);\n+        convertSignInStateInit.put(SignInState.CUSTOM_CHALLENGE, AuthSignInStep.CONFIRM_SIGN_IN_WITH_CUSTOM_CHALLENGE);\n+        convertSignInStateInit.put(SignInState.NEW_PASSWORD_REQUIRED, AuthSignInStep.CONFIRM_SIGN_IN_WITH_NEW_PASSWORD);\n+        convertSignInStateInit.put(SignInState.DONE, AuthSignInStep.DONE);\n+        CONVERT_SIGN_IN_STATE = Collections.unmodifiableMap(convertSignInStateInit);\n+    }\n+\n+    public static AuthSignInStep getAuthSignInStep(SignInState fromState) throws AuthException {\n+        if (CONVERT_SIGN_IN_STATE.containsKey(fromState)) {\n+            return CONVERT_SIGN_IN_STATE.get(fromState);", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MDM3Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421480373", "bodyText": "Yup yup, makes sense", "author": "TrekSoft", "createdAt": "2020-05-07T12:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzNTg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzNjIxNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421236217", "body": "We should make this a default recovery option type, and include a link to our GitHub issues in this message. To raise the bar, we could use an `amzn.to` or something like that, to keep it short (and under our control.)", "bodyText": "We should make this a default recovery option type, and include a link to our GitHub issues in this message. To raise the bar, we could use an amzn.to or something like that, to keep it short (and under our control.)", "bodyHTML": "<p dir=\"auto\">We should make this a default recovery option type, and include a link to our GitHub issues in this message. To raise the bar, we could use an <code>amzn.to</code> or something like that, to keep it short (and under our control.)</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T04:45:19Z", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/SignInStateConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito.util;\n+\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+\n+import com.amazonaws.mobile.client.results.SignInState;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Helpful util class to convert AWSMobileClient sign in state enum to the Amplify equivalent.\n+ */\n+public final class SignInStateConverter {\n+    private static final Map<SignInState, AuthSignInStep> CONVERT_SIGN_IN_STATE;\n+\n+    /**\n+     * Dis-allows instantiation of this class.\n+     */\n+    private SignInStateConverter() { }\n+\n+    static {\n+        Map<SignInState, AuthSignInStep> convertSignInStateInit = new HashMap<>();\n+        convertSignInStateInit.put(SignInState.SMS_MFA, AuthSignInStep.CONFIRM_SIGN_IN_WITH_SMS_MFA_CODE);\n+        convertSignInStateInit.put(SignInState.CUSTOM_CHALLENGE, AuthSignInStep.CONFIRM_SIGN_IN_WITH_CUSTOM_CHALLENGE);\n+        convertSignInStateInit.put(SignInState.NEW_PASSWORD_REQUIRED, AuthSignInStep.CONFIRM_SIGN_IN_WITH_NEW_PASSWORD);\n+        convertSignInStateInit.put(SignInState.DONE, AuthSignInStep.DONE);\n+        CONVERT_SIGN_IN_STATE = Collections.unmodifiableMap(convertSignInStateInit);\n+    }\n+\n+    public static AuthSignInStep getAuthSignInStep(SignInState fromState) throws AuthException {\n+        if (CONVERT_SIGN_IN_STATE.containsKey(fromState)) {\n+            return CONVERT_SIGN_IN_STATE.get(fromState);\n+        } else {\n+            throw new AuthException(\"Unsupported sign in state\",\n+                \"We currently do not support the \" + fromState + \" state from AWSMobileClient. \" +\n+                    \"If this error is reached, please report it as a bug\");", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MTIzMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421481230", "bodyText": "Yep it's one of the things I have on our platform wide discussion topics list since this is something we should align on across Amplify Android.", "author": "TrekSoft", "createdAt": "2020-05-07T12:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzNjIxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzNjU5NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421236595", "body": "For the various `*Step` enums --\r\n\r\nMaybe this should be named `AuthSignUpState`, since these appear to be different states that flow from one to another? What's the name of hte starting state? does that need to be in here, too? (If you use a `null` to mean \"no step,\" then just add a `NOT_SIGNED_UP` or something, so you can stop using `null` to mean that.)", "bodyText": "For the various *Step enums --\nMaybe this should be named AuthSignUpState, since these appear to be different states that flow from one to another? What's the name of hte starting state? does that need to be in here, too? (If you use a null to mean \"no step,\" then just add a NOT_SIGNED_UP or something, so you can stop using null to mean that.)", "bodyHTML": "<p dir=\"auto\">For the various <code>*Step</code> enums --</p>\n<p dir=\"auto\">Maybe this should be named <code>AuthSignUpState</code>, since these appear to be different states that flow from one to another? What's the name of hte starting state? does that need to be in here, too? (If you use a <code>null</code> to mean \"no step,\" then just add a <code>NOT_SIGNED_UP</code> or something, so you can stop using <code>null</code> to mean that.)</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T04:46:45Z", "path": "core/src/main/java/com/amplifyframework/auth/result/step/AuthSignUpStep.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.result.step;\n+\n+public enum AuthSignUpStep {", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MjY5Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421482693", "bodyText": "We debated this quite a bit in the naming meeting and landed on this because this is used to indicate what the next step in a flow is, not what state the plugin is in. We explicitly don't want plugins to be designed with a persistent state for a flow like this or customers thinking about it like that. When someone calls a method which could start a flow, they will receive a boolean indicating if the operation is successful and a nextStep variable indicating what the next step is (or if there is no next step in which case nextStep is not null but DONE).", "author": "TrekSoft", "createdAt": "2020-05-07T12:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzNjU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzNzM0Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421237347", "body": "These names are confusing. You've got an enum named `AuthSignInStep`, but then a class named `AuthNextSignInStep`. I'm not sure what they're for, immediately. I would at least add an ELI5 class-level JavaDoc, `This repreents <foo>, it is used for <bar>. It is different than the <other similarly named things> for the <baz rationale>.`", "bodyText": "These names are confusing. You've got an enum named AuthSignInStep, but then a class named AuthNextSignInStep. I'm not sure what they're for, immediately. I would at least add an ELI5 class-level JavaDoc, This repreents <foo>, it is used for <bar>. It is different than the <other similarly named things> for the <baz rationale>.", "bodyHTML": "<p dir=\"auto\">These names are confusing. You've got an enum named <code>AuthSignInStep</code>, but then a class named <code>AuthNextSignInStep</code>. I'm not sure what they're for, immediately. I would at least add an ELI5 class-level JavaDoc, <code>This repreents &lt;foo&gt;, it is used for &lt;bar&gt;. It is different than the &lt;other similarly named things&gt; for the &lt;baz rationale&gt;.</code></p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T04:49:38Z", "path": "core/src/main/java/com/amplifyframework/auth/result/step/AuthNextSignInStep.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.result.step;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public final class AuthNextSignInStep {\n+    private final AuthSignInStep signInStep;", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MzA5Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421483096", "bodyText": "Yeah this is what the naming meetings landed on - will add a comment.", "author": "TrekSoft", "createdAt": "2020-05-07T12:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzNzM0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzODQ3Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421238472", "body": "Cool! This is a nice simplification. Glad we found another way to achieve this.", "bodyText": "Cool! This is a nice simplification. Glad we found another way to achieve this.", "bodyHTML": "<p dir=\"auto\">Cool! This is a nice simplification. Glad we found another way to achieve this.</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T04:54:13Z", "path": "core/src/main/java/com/amplifyframework/auth/AuthUser.java", "diffHunk": "@@ -55,24 +52,6 @@ public String getUsername() {\n         return username;\n     }\n \n-    /**\n-     * Interface for changing the password of an existing user.\n-     * @param oldPassword The user's existing password\n-     * @param newPassword The new password desired on the user account\n-     * @param onSuccess Success callback\n-     * @param onError Error callback\n-     */\n-    public abstract void changePassword(", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzODc0MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421238741", "body": "In the rest of the code base, these are `@NonNull`. Maybe it makes sense to allow a user to ignore results. But, to stay consistent, I think we should apply that change globally instead of to individual methods.", "bodyText": "In the rest of the code base, these are @NonNull. Maybe it makes sense to allow a user to ignore results. But, to stay consistent, I think we should apply that change globally instead of to individual methods.", "bodyHTML": "<p dir=\"auto\">In the rest of the code base, these are <code>@NonNull</code>. Maybe it makes sense to allow a user to ignore results. But, to stay consistent, I think we should apply that change globally instead of to individual methods.</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T04:55:24Z", "path": "core/src/main/java/com/amplifyframework/auth/AuthCategoryBehavior.java", "diffHunk": "@@ -176,12 +163,26 @@ void forgotPassword(\n      * @param onSuccess Success callback\n      * @param onError Error callback\n      */\n-    void confirmForgotPassword(\n+    void confirmResetPassword(\n             @NonNull String newPassword,\n             @NonNull String confirmationCode,\n             @NonNull Action onSuccess,\n             @NonNull Consumer<AuthException> onError);\n \n+    /**\n+     * Update the password of an existing user - must be signed in to perform this action.\n+     * @param oldPassword The user's existing password\n+     * @param newPassword The new password desired on the user account\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void updatePassword(\n+            @NonNull String oldPassword,\n+            @NonNull String newPassword,\n+            @Nullable Action onSuccess,\n+            @Nullable Consumer<AuthException> onError", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NDQ3MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421484470", "bodyText": "Yes - this was actually something I wanted to ask you about. Will try to catch up with you on this today.", "author": "TrekSoft", "createdAt": "2020-05-07T13:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzODc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzODkwMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421238901", "body": "Huh. What happened with this one? We're not doing this anymore? Or just not for now?", "bodyText": "Huh. What happened with this one? We're not doing this anymore? Or just not for now?", "bodyHTML": "<p dir=\"auto\">Huh. What happened with this one? We're not doing this anymore? Or just not for now?</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T04:56:03Z", "path": "core/src/main/java/com/amplifyframework/auth/AuthCategoryBehavior.java", "diffHunk": "@@ -132,19 +132,6 @@ void signInWithUI(\n      */\n     void handleSignInWithUIResponse(Intent intent);\n \n-    /**\n-     * Allows a user to sign in to your app using their credentials from another provider (e.g. Facebook, Google, etc).\n-     * @param provider The provider you are signing in with (e.g. Facebook, Google, etc.)\n-     * @param token Token retrieved from the social provider's authentication code.\n-     * @param onSuccess Success callback\n-     * @param onError Error callback\n-     */\n-    void signInWithSocial(", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NDgzMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421484830", "bodyText": "Yeah it was decided to scratch this for P0 since they don't want a method which doesn't create a user in the user pool.", "author": "TrekSoft", "createdAt": "2020-05-07T13:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzODkwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTM2MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421239360", "body": "Don't use this repackaged version, just use `java.util.Collections`, directly. ", "bodyText": "Don't use this repackaged version, just use java.util.Collections, directly.", "bodyHTML": "<p dir=\"auto\">Don't use this repackaged version, just use <code>java.util.Collections</code>, directly.</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T04:57:51Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NTA3NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421485074", "bodyText": "Riiiip - I don't know how that happened. Thanks for the callout.", "author": "TrekSoft", "createdAt": "2020-05-07T13:01:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MDAwMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421240002", "body": "Can you add a `// Where do they come from?` explanation after it?", "bodyText": "Can you add a // Where do they come from? explanation after it?", "bodyHTML": "<p dir=\"auto\">Can you add a <code>// Where do they come from?</code> explanation after it?</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:00:11Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NTI0Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421485242", "bodyText": "Sure", "author": "TrekSoft", "createdAt": "2020-05-07T13:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MDAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNzIwNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421737204", "bodyText": "It was actually from the generics issue which you commented on below so I was able to just remove it altogether after addressing that.", "author": "TrekSoft", "createdAt": "2020-05-07T19:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MDAwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MDQ3Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421240473", "body": "At least `private static final String SCREAMING_SNAKE_VAR` -- but, do you have some data models that you can put these in, so that there aren't just a heap of `String`? Like maybe an `new SomeCognitoType(\"username\", \"email@foo.tld\");`, etc?\r\n\r\nLastly, the non-final fields should appear _after_ these constants (L76, L77.)\r\n\r\nIn unit tests, I prefer _not_ to store constants at the class level. This is because, often, the values are only used in individual tests. There are still a lot of good reasons to label your constants, though.\r\n\r\n```\r\n@Test(expected = FrickinMurdersItException.class)\r\npublic void testCookieMonsterWillPower() {\r\n    final String temptation = \"Cookie\";\r\n    CookieMonster monster = new CookieMonster();\r\n    monster.temp(temptation);\r\n    // Well, what did we expect, sigh.\r\n}\r\n```", "bodyText": "At least private static final String SCREAMING_SNAKE_VAR -- but, do you have some data models that you can put these in, so that there aren't just a heap of String? Like maybe an new SomeCognitoType(\"username\", \"email@foo.tld\");, etc?\nLastly, the non-final fields should appear after these constants (L76, L77.)\nIn unit tests, I prefer not to store constants at the class level. This is because, often, the values are only used in individual tests. There are still a lot of good reasons to label your constants, though.\n@Test(expected = FrickinMurdersItException.class)\npublic void testCookieMonsterWillPower() {\n    final String temptation = \"Cookie\";\n    CookieMonster monster = new CookieMonster();\n    monster.temp(temptation);\n    // Well, what did we expect, sigh.\n}", "bodyHTML": "<p dir=\"auto\">At least <code>private static final String SCREAMING_SNAKE_VAR</code> -- but, do you have some data models that you can put these in, so that there aren't just a heap of <code>String</code>? Like maybe an <code>new SomeCognitoType(\"username\", \"email@foo.tld\");</code>, etc?</p>\n<p dir=\"auto\">Lastly, the non-final fields should appear <em>after</em> these constants (L76, L77.)</p>\n<p dir=\"auto\">In unit tests, I prefer <em>not</em> to store constants at the class level. This is because, often, the values are only used in individual tests. There are still a lot of good reasons to label your constants, though.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Test(expected = FrickinMurdersItException.class)\npublic void testCookieMonsterWillPower() {\n    final String temptation = &quot;Cookie&quot;;\n    CookieMonster monster = new CookieMonster();\n    monster.temp(temptation);\n    // Well, what did we expect, sigh.\n}\n\"><pre><code>@Test(expected = FrickinMurdersItException.class)\npublic void testCookieMonsterWillPower() {\n    final String temptation = \"Cookie\";\n    CookieMonster monster = new CookieMonster();\n    monster.temp(temptation);\n    // Well, what did we expect, sigh.\n}\n</code></pre></div>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:01:46Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4Njc3Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421486773", "bodyText": "Metadata is an open ended map in a number of our methods which we decided to keep open because it's meant for sending custom data. Also, I put these at the class level because these same values are used throughout the various methods so figured it would be better to have them defined once rather than redefining the same dummy values in each test.", "author": "TrekSoft", "createdAt": "2020-05-07T13:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MDQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MjI0Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421242247", "body": "Were you able to do:\r\n```\r\nAuthCategory auth = new AuthCategory();\r\nauth.addPlugin(new AWSCognitoAuthPlugin());\r\nCategoryConfiguration config = // blah blach\r\nauth.configure(config, getApplicationContext());\r\nauth.initialize(getApplicationContext());\r\n```\r\nAnd then test against the category? You'd get more coverage that way.\r\n\r\nTesting a thin veneer of invocation verifications on just the plugin is going to be a little brittle.", "bodyText": "Were you able to do:\nAuthCategory auth = new AuthCategory();\nauth.addPlugin(new AWSCognitoAuthPlugin());\nCategoryConfiguration config = // blah blach\nauth.configure(config, getApplicationContext());\nauth.initialize(getApplicationContext());\n\nAnd then test against the category? You'd get more coverage that way.\nTesting a thin veneer of invocation verifications on just the plugin is going to be a little brittle.", "bodyHTML": "<p dir=\"auto\">Were you able to do:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"AuthCategory auth = new AuthCategory();\nauth.addPlugin(new AWSCognitoAuthPlugin());\nCategoryConfiguration config = // blah blach\nauth.configure(config, getApplicationContext());\nauth.initialize(getApplicationContext());\n\"><pre><code>AuthCategory auth = new AuthCategory();\nauth.addPlugin(new AWSCognitoAuthPlugin());\nCategoryConfiguration config = // blah blach\nauth.configure(config, getApplicationContext());\nauth.initialize(getApplicationContext());\n</code></pre></div>\n<p dir=\"auto\">And then test against the category? You'd get more coverage that way.</p>\n<p dir=\"auto\">Testing a thin veneer of invocation verifications on just the plugin is going to be a little brittle.</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:08:31Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NzQzOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421487439", "bodyText": "Oh yeah, I was going to update later to try that - let me see.", "author": "TrekSoft", "createdAt": "2020-05-07T13:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MjI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MjM5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421242390", "body": "Can you provide a version of this constructor which does not require the `null` value?", "bodyText": "Can you provide a version of this constructor which does not require the null value?", "bodyHTML": "<p dir=\"auto\">Can you provide a version of this constructor which does not require the <code>null</code> value?</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:09:01Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4ODYzNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421488635", "bodyText": "This is an old AWSMobileClient object", "author": "TrekSoft", "createdAt": "2020-05-07T13:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MjM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MzA1Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421243056", "body": "You shouldn't need to check this. This is guaranteed, based on the matching you do in your `.when(...)`.\r\n\r\nThe way this construct usually fails is if `.when` does not match, when you expect it to. In this case, the `doAnswer` part never gets called. So the problem isn't what happens inside of the lambda, rather that it's tricky to know if the lambda even got called (without checking for _that_.)", "bodyText": "You shouldn't need to check this. This is guaranteed, based on the matching you do in your .when(...).\nThe way this construct usually fails is if .when does not match, when you expect it to. In this case, the doAnswer part never gets called. So the problem isn't what happens inside of the lambda, rather that it's tricky to know if the lambda even got called (without checking for that.)", "bodyHTML": "<p dir=\"auto\">You shouldn't need to check this. This is guaranteed, based on the matching you do in your <code>.when(...)</code>.</p>\n<p dir=\"auto\">The way this construct usually fails is if <code>.when</code> does not match, when you expect it to. In this case, the <code>doAnswer</code> part never gets called. So the problem isn't what happens inside of the lambda, rather that it's tricky to know if the lambda even got called (without checking for <em>that</em>.)</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:11:28Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MjIwMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421562203", "bodyText": "Soo... the actual issue here is that we're passing in a JSON Object (testConfig) and that then gets wrapped in an AWSConfiguration object (invocation.getArgument(1)). The AWSConfiguration object returns the JSON object in its toString method so I'm using that to make sure it's wrapping the original JSON object passed in. I should probably add another validation here though to ensure that invocation.getArgument(1) is indeed an AWSConfiguration object.", "author": "TrekSoft", "createdAt": "2020-05-07T14:44:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MzA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MzM1NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421243354", "body": "`times(1)` is the default, I believe. So you can just say `verify(foo).gotFooed()`. The `times(int)` comes into play when the value is _not_ `1`.", "bodyText": "times(1) is the default, I believe. So you can just say verify(foo).gotFooed(). The times(int) comes into play when the value is not 1.", "bodyHTML": "<p dir=\"auto\"><code>times(1)</code> is the default, I believe. So you can just say <code>verify(foo).gotFooed()</code>. The <code>times(int)</code> comes into play when the value is <em>not</em> <code>1</code>.</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:12:37Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MjM4NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421562385", "bodyText": "Aha, good to know", "author": "TrekSoft", "createdAt": "2020-05-07T14:45:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MzM1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NDAzMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421244032", "body": "> If {@link AWSMobileClient} emits an error during initialization, the {@link Auth#configure(...)} method should throw that same exception on its calling thread.", "bodyText": "If {@link AWSMobileClient} emits an error during initialization, the {@link Auth#configure(...)} method should throw that same exception on its calling thread.", "bodyHTML": "<blockquote>\n<p dir=\"auto\">If {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/link/hovercard\" href=\"https://github.com/link\">@link</a> AWSMobileClient} emits an error during initialization, the {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/link/hovercard\" href=\"https://github.com/link\">@link</a> Auth#configure(...)} method should throw that same exception on its calling thread.</p>\n</blockquote>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:15:00Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MjYzNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421562635", "bodyText": "Ok", "author": "TrekSoft", "createdAt": "2020-05-07T14:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NDAzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NDc1Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421244753", "body": "These are basically just testing your test. The `doAnswer` for faking a behavior on a a component. You'd want to make assertions on the final state, after your test. But here, it's sort of intermediate, before you do `callback.onResult(amcResult)`.\r\n\r\nOutside of this `doAnswer().when()` constrcut, later, I'd expect some like `assertTrue(hasSomePropertyOfInterest(amcResult))`.\r\n", "bodyText": "These are basically just testing your test. The doAnswer for faking a behavior on a a component. You'd want to make assertions on the final state, after your test. But here, it's sort of intermediate, before you do callback.onResult(amcResult).\nOutside of this doAnswer().when() constrcut, later, I'd expect some like assertTrue(hasSomePropertyOfInterest(amcResult)).", "bodyHTML": "<p dir=\"auto\">These are basically just testing your test. The <code>doAnswer</code> for faking a behavior on a a component. You'd want to make assertions on the final state, after your test. But here, it's sort of intermediate, before you do <code>callback.onResult(amcResult)</code>.</p>\n<p dir=\"auto\">Outside of this <code>doAnswer().when()</code> constrcut, later, I'd expect some like <code>assertTrue(hasSomePropertyOfInterest(amcResult))</code>.</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:17:40Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2Mzk4Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421563982", "bodyText": "No so what's happening here is I'm testing that AWSMobileClient is being called with the right parameters. The whole point of these tests, per my comments on them, is to ensure that the parameters the user is passing in are then being properly routed to the AWSMobileClient method we're wrapping and that the result which comes back from that method is properly wrapped / converted into the right Amplify result object.", "author": "TrekSoft", "createdAt": "2020-05-07T14:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NDc1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NTAwNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421245005", "body": "Indentation here is -4 from where it ought to be, I believe. It's not clearly indented from the `username`, `password,` etc.", "bodyText": "Indentation here is -4 from where it ought to be, I believe. It's not clearly indented from the username, password, etc.", "bodyHTML": "<p dir=\"auto\">Indentation here is -4 from where it ought to be, I believe. It's not clearly indented from the <code>username</code>, <code>password,</code> etc.</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:18:38Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signUp(\n+            username,\n+            password,\n+            AWSCognitoAuthSignUpOptions.builder()\n+            .userAttributes(\n+                Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), attributeVal))\n+            )\n+            .validationData(metadata)\n+            .build(),", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2NTMxNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421565314", "bodyText": "Ok", "author": "TrekSoft", "createdAt": "2020-05-07T14:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NTAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NTU0Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421245542", "body": "If this callback occurs on a different thread, `fail()` may not do what you think it will. `fail()` needs to be called on the _test runner_ thread, to halt the test. If a background thread crashes, but the `@Test` has already moved on, jUnit won't catch it.\r\n\r\nTLDR: use something like `Await.result` to pull the exception back into your calling thread, and then do something with it, from that thread. `Completable.fromAction(() -> {}).blockingAwait()` is another way to achieve the same.", "bodyText": "If this callback occurs on a different thread, fail() may not do what you think it will. fail() needs to be called on the test runner thread, to halt the test. If a background thread crashes, but the @Test has already moved on, jUnit won't catch it.\nTLDR: use something like Await.result to pull the exception back into your calling thread, and then do something with it, from that thread. Completable.fromAction(() -> {}).blockingAwait() is another way to achieve the same.", "bodyHTML": "<p dir=\"auto\">If this callback occurs on a different thread, <code>fail()</code> may not do what you think it will. <code>fail()</code> needs to be called on the <em>test runner</em> thread, to halt the test. If a background thread crashes, but the <code>@Test</code> has already moved on, jUnit won't catch it.</p>\n<p dir=\"auto\">TLDR: use something like <code>Await.result</code> to pull the exception back into your calling thread, and then do something with it, from that thread. <code>Completable.fromAction(() -&gt; {}).blockingAwait()</code> is another way to achieve the same.</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:20:36Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signUp(\n+            username,\n+            password,\n+            AWSCognitoAuthSignUpOptions.builder()\n+            .userAttributes(\n+                Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), attributeVal))\n+            )\n+            .validationData(metadata)\n+            .build(),\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2NjY1OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421566658", "bodyText": "Ok, I may need to sync up with you on this", "author": "TrekSoft", "createdAt": "2020-05-07T14:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NTU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NTgwMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421245802", "body": "You can do these `any` in a way that respects the type system:\r\n\r\n```\r\nMockito.<Map<Key, Value>>any()\r\n```\r\nInstead of:\r\n```\r\nMockito.any(/* rawtypes */ Map.class)\r\n```", "bodyText": "You can do these any in a way that respects the type system:\nMockito.<Map<Key, Value>>any()\n\nInstead of:\nMockito.any(/* rawtypes */ Map.class)", "bodyHTML": "<p dir=\"auto\">You can do these <code>any</code> in a way that respects the type system:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Mockito.&lt;Map&lt;Key, Value&gt;&gt;any()\n\"><pre><code>Mockito.&lt;Map&lt;Key, Value&gt;&gt;any()\n</code></pre></div>\n<p dir=\"auto\">Instead of:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Mockito.any(/* rawtypes */ Map.class)\n\"><pre><code>Mockito.any(/* rawtypes */ Map.class)\n</code></pre></div>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:21:34Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signUp(\n+            username,\n+            password,\n+            AWSCognitoAuthSignUpOptions.builder()\n+            .userAttributes(\n+                Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), attributeVal))\n+            )\n+            .validationData(metadata)\n+            .build(),\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2NjcyNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421566726", "bodyText": "Ok", "author": "TrekSoft", "createdAt": "2020-05-07T14:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NTgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2MDA1NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421760054", "bodyText": "Turns out that with Java 8 the type is redundant and the best practice is to just use any() which infers the proper type", "author": "TrekSoft", "createdAt": "2020-05-07T20:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NTgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NjQ4OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421246489", "body": "To my earlier point about needing to make these calls synchronous -- this is why our other components all have a corresponding test utility called like `SynchronousWhatever`. It allows us to write easy jUnit tests that perform actions in a serial way. I would suggest you make like a `SynchronousAuth` utility, which wraps the `AuthCategoryBehavior`. Then, you could either do `SynchronousAuth.delegatingTo(authCategory)`, or `SynchronousAuth.delegatingTo(authPlugin)`, since both are examples of the `AuthCategoryBehavior`.", "bodyText": "To my earlier point about needing to make these calls synchronous -- this is why our other components all have a corresponding test utility called like SynchronousWhatever. It allows us to write easy jUnit tests that perform actions in a serial way. I would suggest you make like a SynchronousAuth utility, which wraps the AuthCategoryBehavior. Then, you could either do SynchronousAuth.delegatingTo(authCategory), or SynchronousAuth.delegatingTo(authPlugin), since both are examples of the AuthCategoryBehavior.", "bodyHTML": "<p dir=\"auto\">To my earlier point about needing to make these calls synchronous -- this is why our other components all have a corresponding test utility called like <code>SynchronousWhatever</code>. It allows us to write easy jUnit tests that perform actions in a serial way. I would suggest you make like a <code>SynchronousAuth</code> utility, which wraps the <code>AuthCategoryBehavior</code>. Then, you could either do <code>SynchronousAuth.delegatingTo(authCategory)</code>, or <code>SynchronousAuth.delegatingTo(authPlugin)</code>, since both are examples of the <code>AuthCategoryBehavior</code>.</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:24:00Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signUp(\n+            username,\n+            password,\n+            AWSCognitoAuthSignUpOptions.builder()\n+            .userAttributes(\n+                Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), attributeVal))\n+            )\n+            .validationData(metadata)\n+            .build(),\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmSignUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.confirmSignUp with\n+     * the username and confirmation code it received.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void confirmSignUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+                true,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                ),\n+                null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(confirmationCode, invocation.getArgument(1));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(2);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmSignUp(any(String.class), any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmSignUp(\n+            username,\n+            confirmationCode,\n+            result -> validateSignUpResult(result, AuthSignUpStep.DONE),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .confirmSignUp(any(String.class), any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the resendSignUpCode method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.resendSignUp with\n+     * the username it received .\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void resendSignUpCode() {\n+        SignUpResult amcResult = new SignUpResult(\n+                false,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                ),\n+                null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .resendSignUp(any(String.class), any(Callback.class));\n+\n+        authPlugin.resendSignUpCode(\n+            username,\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .resendSignUp(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the signIn method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signIn with\n+     * the username, password it received, and, if included, the metadata sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignInResult.\n+     */\n+    @Test\n+    public void signIn() {\n+        SignInResult amcResult = new SignInResult(\n+            SignInState.SMS_MFA,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            )\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            assertEquals(metadata, invocation.getArgument(2));\n+\n+            Callback<SignInResult> callback = invocation.getArgument(3);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signIn(any(String.class), any(String.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signIn(\n+            username,\n+            password,\n+            AWSCognitoAuthSignInOptions.builder().metadata(metadata).build(),\n+            result -> validateSignInResult(\n+                result,\n+                false,\n+                AuthSignInStep.CONFIRM_SIGN_IN_WITH_SMS_MFA_CODE\n+            ),\n+            error -> fail());", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2NzIzMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421567233", "bodyText": "Will sync up with you", "author": "TrekSoft", "createdAt": "2020-05-07T14:51:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NjQ4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NjY4Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421246682", "body": "nit empty line", "bodyText": "nit empty line", "bodyHTML": "<p dir=\"auto\">nit empty line</p>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:24:40Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signUp(\n+            username,\n+            password,\n+            AWSCognitoAuthSignUpOptions.builder()\n+            .userAttributes(\n+                Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), attributeVal))\n+            )\n+            .validationData(metadata)\n+            .build(),\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmSignUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.confirmSignUp with\n+     * the username and confirmation code it received.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void confirmSignUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+                true,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                ),\n+                null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(confirmationCode, invocation.getArgument(1));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(2);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmSignUp(any(String.class), any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmSignUp(\n+            username,\n+            confirmationCode,\n+            result -> validateSignUpResult(result, AuthSignUpStep.DONE),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .confirmSignUp(any(String.class), any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the resendSignUpCode method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.resendSignUp with\n+     * the username it received .\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void resendSignUpCode() {\n+        SignUpResult amcResult = new SignUpResult(\n+                false,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                ),\n+                null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .resendSignUp(any(String.class), any(Callback.class));\n+\n+        authPlugin.resendSignUpCode(\n+            username,\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .resendSignUp(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the signIn method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signIn with\n+     * the username, password it received, and, if included, the metadata sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignInResult.\n+     */\n+    @Test\n+    public void signIn() {\n+        SignInResult amcResult = new SignInResult(\n+            SignInState.SMS_MFA,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            )\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            assertEquals(metadata, invocation.getArgument(2));\n+\n+            Callback<SignInResult> callback = invocation.getArgument(3);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signIn(any(String.class), any(String.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signIn(\n+            username,\n+            password,\n+            AWSCognitoAuthSignInOptions.builder().metadata(metadata).build(),\n+            result -> validateSignInResult(\n+                result,\n+                false,\n+                AuthSignInStep.CONFIRM_SIGN_IN_WITH_SMS_MFA_CODE\n+            ),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .signIn(any(String.class), any(String.class), any(Map.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmSignIn method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.confirmSignIn with\n+     * the confirmation code it received and the success callback receives a valid AuthSignInResult.\n+     */\n+    @Test\n+    public void confirmSignIn() {\n+        SignInResult amcResult = new SignInResult(\n+                SignInState.DONE,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                )\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(confirmationCode, invocation.getArgument(0));\n+\n+            Callback<SignInResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmSignIn(any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmSignIn(\n+            confirmationCode,\n+            result -> validateSignInResult(\n+                result,\n+                true,\n+                AuthSignInStep.DONE\n+            ),\n+            error -> fail()\n+        );\n+\n+        verify(mobileClient, times(1))\n+                .confirmSignIn(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the resetPassword method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.forgotPassword with\n+     * the username it received.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthResetPasswordResult and in\n+     * the onError case, the error call back receives an AuthException with the root cause attached.\n+     */\n+    @Test\n+    public void resetPassword() {\n+        ForgotPasswordResult amcResult = new ForgotPasswordResult(ForgotPasswordState.CONFIRMATION_CODE);\n+        amcResult.setParameters(new UserCodeDeliveryDetails(\n+                destination,\n+                deliveryMedium,\n+                attributeName\n+        ));\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+\n+            Callback<ForgotPasswordResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .forgotPassword(any(String.class), any(Callback.class));\n+\n+        authPlugin.resetPassword(\n+            username,\n+            result -> {\n+                assertFalse(result.isPasswordReset());\n+                assertEquals(\n+                    AuthResetPasswordStep.CONFIRM_RESET_PASSWORD_WITH_CODE,\n+                    result.getNextStep().getResetPasswordStep()\n+                );\n+                validateCodeDeliveryDetails(result.getNextStep().getCodeDeliveryDetails());\n+            },\n+            error -> fail()\n+        );\n+\n+        verify(mobileClient, times(1))\n+                .forgotPassword(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmResetPassword method of the Auth wrapper of AWSMobileClient (AMC) calls\n+     * AMC.confirmForgotPassword with the new password and confirmation code it received.\n+     * Also ensures that in the onResult case, the success callback is triggered and in the onError case,\n+     * the error call back receives an AuthException with the root cause attached.\n+     */\n+    @Test\n+    public void confirmResetPassword() {\n+        ForgotPasswordResult amcResult = new ForgotPasswordResult(ForgotPasswordState.DONE);\n+\n+        doAnswer(invocation -> {\n+            assertEquals(newPassword, invocation.getArgument(0));\n+            assertEquals(confirmationCode, invocation.getArgument(1));\n+\n+            Callback<ForgotPasswordResult> callback = invocation.getArgument(2);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmForgotPassword(any(String.class), any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmResetPassword(\n+            newPassword,\n+            confirmationCode,\n+            () -> { },\n+            error -> fail()\n+        );\n+\n+        verify(mobileClient, times(1))\n+                .confirmForgotPassword(any(String.class), any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the getCurrentUser method of the Auth wrapper of AWSMobileClient (AMC) returns a new\n+     * AWSCognitoAuthUser object containing the userId property in the plugin and the username from AMC.getUsername().\n+     */\n+    @Test\n+    public void getCurrentUser() {\n+        doAnswer(invocation -> username).when(mobileClient).getUsername();\n+        AuthUser user = authPlugin.getCurrentUser();\n+\n+        assertEquals(userId, user.getUserId());\n+        assertEquals(username, user.getUsername());\n+    }\n+\n+    /**\n+     * Tests that the getEscapeHatch method of the Auth wrapper of AWSMobileClient (AMC) returns the instance of\n+     * AWSMobileClient held by the plugin.\n+     */\n+    @Test\n+    public void getEscapeHatch() {\n+        AWSMobileClient client = authPlugin.getEscapeHatch();\n+        assertEquals(mobileClient, client);\n+    }\n+\n+    /**\n+     * Validate the sign up result is what was expected.\n+     * @param result The received result\n+     * @param targetStep The correct value for the next step (the only part of the response that varies in these tests)\n+     */\n+    private void validateSignUpResult(AuthSignUpResult result, AuthSignUpStep targetStep) {\n+        AuthNextSignUpStep nextStep = result.getNextStep();\n+        validateCodeDeliveryDetails(nextStep.getCodeDeliveryDetails());\n+        assertTrue(result.isSignUpComplete());\n+        assertEquals(targetStep, nextStep.getSignUpStep());\n+", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0ODAyMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421248020", "body": "Instead of this, you can usually do like:\r\n```\r\norg.junit.Assert.assertEquals(highLevelExpectedObj, highLevelActualObj)\r\n```\r\n\r\nThis works if the high level object has a sane `equals()` implementation.\r\n\r\nSeems likely that `AWSMobileClient` (and its associated classes) may not.\r\n\r\nIf that's the case, the next best you can do is like:\r\n```\r\nprivate static void assertEquals(HighLevelType expected, HighLevelType actual) {\r\n    // Assert field-by-field equality\r\n}\r\n```", "bodyText": "Instead of this, you can usually do like:\norg.junit.Assert.assertEquals(highLevelExpectedObj, highLevelActualObj)\n\nThis works if the high level object has a sane equals() implementation.\nSeems likely that AWSMobileClient (and its associated classes) may not.\nIf that's the case, the next best you can do is like:\nprivate static void assertEquals(HighLevelType expected, HighLevelType actual) {\n    // Assert field-by-field equality\n}", "bodyHTML": "<p dir=\"auto\">Instead of this, you can usually do like:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"org.junit.Assert.assertEquals(highLevelExpectedObj, highLevelActualObj)\n\"><pre><code>org.junit.Assert.assertEquals(highLevelExpectedObj, highLevelActualObj)\n</code></pre></div>\n<p dir=\"auto\">This works if the high level object has a sane <code>equals()</code> implementation.</p>\n<p dir=\"auto\">Seems likely that <code>AWSMobileClient</code> (and its associated classes) may not.</p>\n<p dir=\"auto\">If that's the case, the next best you can do is like:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private static void assertEquals(HighLevelType expected, HighLevelType actual) {\n    // Assert field-by-field equality\n}\n\"><pre><code>private static void assertEquals(HighLevelType expected, HighLevelType actual) {\n    // Assert field-by-field equality\n}\n</code></pre></div>", "author": "jamesonwilliams", "createdAt": "2020-05-07T05:29:38Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signUp(\n+            username,\n+            password,\n+            AWSCognitoAuthSignUpOptions.builder()\n+            .userAttributes(\n+                Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), attributeVal))\n+            )\n+            .validationData(metadata)\n+            .build(),\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmSignUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.confirmSignUp with\n+     * the username and confirmation code it received.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void confirmSignUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+                true,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                ),\n+                null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(confirmationCode, invocation.getArgument(1));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(2);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmSignUp(any(String.class), any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmSignUp(\n+            username,\n+            confirmationCode,\n+            result -> validateSignUpResult(result, AuthSignUpStep.DONE),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .confirmSignUp(any(String.class), any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the resendSignUpCode method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.resendSignUp with\n+     * the username it received .\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void resendSignUpCode() {\n+        SignUpResult amcResult = new SignUpResult(\n+                false,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                ),\n+                null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .resendSignUp(any(String.class), any(Callback.class));\n+\n+        authPlugin.resendSignUpCode(\n+            username,\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .resendSignUp(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the signIn method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signIn with\n+     * the username, password it received, and, if included, the metadata sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignInResult.\n+     */\n+    @Test\n+    public void signIn() {\n+        SignInResult amcResult = new SignInResult(\n+            SignInState.SMS_MFA,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            )\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            assertEquals(metadata, invocation.getArgument(2));\n+\n+            Callback<SignInResult> callback = invocation.getArgument(3);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signIn(any(String.class), any(String.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signIn(\n+            username,\n+            password,\n+            AWSCognitoAuthSignInOptions.builder().metadata(metadata).build(),\n+            result -> validateSignInResult(\n+                result,\n+                false,\n+                AuthSignInStep.CONFIRM_SIGN_IN_WITH_SMS_MFA_CODE\n+            ),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .signIn(any(String.class), any(String.class), any(Map.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmSignIn method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.confirmSignIn with\n+     * the confirmation code it received and the success callback receives a valid AuthSignInResult.\n+     */\n+    @Test\n+    public void confirmSignIn() {\n+        SignInResult amcResult = new SignInResult(\n+                SignInState.DONE,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                )\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(confirmationCode, invocation.getArgument(0));\n+\n+            Callback<SignInResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmSignIn(any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmSignIn(\n+            confirmationCode,\n+            result -> validateSignInResult(\n+                result,\n+                true,\n+                AuthSignInStep.DONE\n+            ),\n+            error -> fail()\n+        );\n+\n+        verify(mobileClient, times(1))\n+                .confirmSignIn(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the resetPassword method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.forgotPassword with\n+     * the username it received.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthResetPasswordResult and in\n+     * the onError case, the error call back receives an AuthException with the root cause attached.\n+     */\n+    @Test\n+    public void resetPassword() {\n+        ForgotPasswordResult amcResult = new ForgotPasswordResult(ForgotPasswordState.CONFIRMATION_CODE);\n+        amcResult.setParameters(new UserCodeDeliveryDetails(\n+                destination,\n+                deliveryMedium,\n+                attributeName\n+        ));\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+\n+            Callback<ForgotPasswordResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .forgotPassword(any(String.class), any(Callback.class));\n+\n+        authPlugin.resetPassword(\n+            username,\n+            result -> {\n+                assertFalse(result.isPasswordReset());\n+                assertEquals(\n+                    AuthResetPasswordStep.CONFIRM_RESET_PASSWORD_WITH_CODE,\n+                    result.getNextStep().getResetPasswordStep()\n+                );\n+                validateCodeDeliveryDetails(result.getNextStep().getCodeDeliveryDetails());\n+            },\n+            error -> fail()\n+        );\n+\n+        verify(mobileClient, times(1))\n+                .forgotPassword(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmResetPassword method of the Auth wrapper of AWSMobileClient (AMC) calls\n+     * AMC.confirmForgotPassword with the new password and confirmation code it received.\n+     * Also ensures that in the onResult case, the success callback is triggered and in the onError case,\n+     * the error call back receives an AuthException with the root cause attached.\n+     */\n+    @Test\n+    public void confirmResetPassword() {\n+        ForgotPasswordResult amcResult = new ForgotPasswordResult(ForgotPasswordState.DONE);\n+\n+        doAnswer(invocation -> {\n+            assertEquals(newPassword, invocation.getArgument(0));\n+            assertEquals(confirmationCode, invocation.getArgument(1));\n+\n+            Callback<ForgotPasswordResult> callback = invocation.getArgument(2);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmForgotPassword(any(String.class), any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmResetPassword(\n+            newPassword,\n+            confirmationCode,\n+            () -> { },\n+            error -> fail()\n+        );\n+\n+        verify(mobileClient, times(1))\n+                .confirmForgotPassword(any(String.class), any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the getCurrentUser method of the Auth wrapper of AWSMobileClient (AMC) returns a new\n+     * AWSCognitoAuthUser object containing the userId property in the plugin and the username from AMC.getUsername().\n+     */\n+    @Test\n+    public void getCurrentUser() {\n+        doAnswer(invocation -> username).when(mobileClient).getUsername();\n+        AuthUser user = authPlugin.getCurrentUser();\n+\n+        assertEquals(userId, user.getUserId());\n+        assertEquals(username, user.getUsername());\n+    }\n+\n+    /**\n+     * Tests that the getEscapeHatch method of the Auth wrapper of AWSMobileClient (AMC) returns the instance of\n+     * AWSMobileClient held by the plugin.\n+     */\n+    @Test\n+    public void getEscapeHatch() {\n+        AWSMobileClient client = authPlugin.getEscapeHatch();\n+        assertEquals(mobileClient, client);\n+    }\n+\n+    /**\n+     * Validate the sign up result is what was expected.\n+     * @param result The received result\n+     * @param targetStep The correct value for the next step (the only part of the response that varies in these tests)\n+     */\n+    private void validateSignUpResult(AuthSignUpResult result, AuthSignUpStep targetStep) {", "originalCommit": "560463f9ddede2126b8bb036f153723a96adb69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2OTYxNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421569616", "bodyText": "Yeah they aren't compatible and in this case I'm using default dummy values so while I could do it that second way, it'd just be less efficient code wise.", "author": "TrekSoft", "createdAt": "2020-05-07T14:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0ODAyMA=="}], "type": "inlineReview"}, {"oid": "1c7831a2a7a329a4a719184dae0379be77581f8c", "url": "https://github.com/aws-amplify/amplify-android/commit/1c7831a2a7a329a4a719184dae0379be77581f8c", "message": "Addresses PR comment", "committedDate": "2020-05-07T23:11:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1MzYwMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421953601", "body": "This feels like a heavy weight way to get a string -- you could hard code it? In theory, people shouldn't be changing the plugin key, ever. So if they do, it'd almost be preferable for all of the tests to go up in uproarious flames.", "bodyText": "This feels like a heavy weight way to get a string -- you could hard code it? In theory, people shouldn't be changing the plugin key, ever. So if they do, it'd almost be preferable for all of the tests to go up in uproarious flames.", "bodyHTML": "<p dir=\"auto\">This feels like a heavy weight way to get a string -- you could hard code it? In theory, people shouldn't be changing the plugin key, ever. So if they do, it'd almost be preferable for all of the tests to go up in uproarious flames.</p>", "author": "jamesonwilliams", "createdAt": "2020-05-08T05:54:48Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCategory;\n+import com.amplifyframework.auth.AuthCategoryConfiguration;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthResetPasswordResult;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+import com.amplifyframework.testutils.sync.SynchronousAuth;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.Tokens;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class AuthComponentTest {\n+    private static final String USER_ID = \"myId\";\n+    private static final String DESTINATION = \"e***@email.com\";\n+    private static final String DELIVERY_MEDIUM = \"sms\";\n+    private static final String ATTRIBUTE_NAME = \"email\";\n+    private static final String USERNAME = \"username\";\n+    private static final String PASSWORD = \"password123\";\n+    private static final String NEW_PASSWORD = \"newPassword123\";\n+    private static final String ATTRIBUTE_KEY = AuthUserAttributeKey.email().getKeyString();\n+    private static final String ATTRIBUTE_VAL = \"email@email.com\";\n+    private static final String CONFIRMATION_CODE = \"confirm\";\n+    private static final Map<String, String> METADATA = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+    private AWSMobileClient mobileClient;\n+    private AuthCategory authCategory;\n+    private SynchronousAuth synchronousAuth;\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authCategory = new AuthCategory();\n+        authCategory.addPlugin(new AWSCognitoAuthPlugin(mobileClient, USER_ID));\n+        synchronousAuth = SynchronousAuth.delegatingTo(authCategory);\n+\n+        doAnswer(invocation -> {\n+            Callback<Tokens> callback = invocation.getArgument(0);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).getTokens(any());\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject pluginConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+        JSONObject json = new JSONObject().put(\"plugins\",\n+                new JSONObject().put(\n+                    new AWSCognitoAuthPlugin().getPluginKey(),", "originalCommit": "1c7831a2a7a329a4a719184dae0379be77581f8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0Mjg1MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r422142850", "bodyText": "Fair enough - definitely felt dirty doing this", "author": "TrekSoft", "createdAt": "2020-05-08T13:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1MzYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NDU2Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421954562", "body": "Previously, you had `eq()` matchers, and then made assertions inside, which more or less just verified that the `eq` test matchers worked.\r\n\r\nThe way you have this now, with the `any()` matches, and the assertions on the value of the `any()`-thing -- this is more of a valid test. However, the mechanism is unusual.\r\n\r\nIf you are trying to see what values were passed into the `initialize()` call, the standard way to achieve this is with an `ArgumentCaptor`. The `doAnswer` is really for behavior mocking_, not for behavioral _verification_.\r\n\r\nTLDR for `ArgumentCaptor`:\r\n```\r\nArgumentCaptor<FooType> fooCaptor = ArgumentCaptor.forClass(FooType.class);\r\nverify(gizmo).initialize(fooCaptor.capture());\r\nFooType capturedValue = fooCaptor.value();\r\nassertTrue(idealFoo, capturedValue);\r\n```", "bodyText": "Previously, you had eq() matchers, and then made assertions inside, which more or less just verified that the eq test matchers worked.\nThe way you have this now, with the any() matches, and the assertions on the value of the any()-thing -- this is more of a valid test. However, the mechanism is unusual.\nIf you are trying to see what values were passed into the initialize() call, the standard way to achieve this is with an ArgumentCaptor. The doAnswer is really for behavior mocking_, not for behavioral verification.\nTLDR for ArgumentCaptor:\nArgumentCaptor<FooType> fooCaptor = ArgumentCaptor.forClass(FooType.class);\nverify(gizmo).initialize(fooCaptor.capture());\nFooType capturedValue = fooCaptor.value();\nassertTrue(idealFoo, capturedValue);", "bodyHTML": "<p dir=\"auto\">Previously, you had <code>eq()</code> matchers, and then made assertions inside, which more or less just verified that the <code>eq</code> test matchers worked.</p>\n<p dir=\"auto\">The way you have this now, with the <code>any()</code> matches, and the assertions on the value of the <code>any()</code>-thing -- this is more of a valid test. However, the mechanism is unusual.</p>\n<p dir=\"auto\">If you are trying to see what values were passed into the <code>initialize()</code> call, the standard way to achieve this is with an <code>ArgumentCaptor</code>. The <code>doAnswer</code> is really for behavior mocking_, not for behavioral <em>verification</em>.</p>\n<p dir=\"auto\">TLDR for <code>ArgumentCaptor</code>:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ArgumentCaptor&lt;FooType&gt; fooCaptor = ArgumentCaptor.forClass(FooType.class);\nverify(gizmo).initialize(fooCaptor.capture());\nFooType capturedValue = fooCaptor.value();\nassertTrue(idealFoo, capturedValue);\n\"><pre><code>ArgumentCaptor&lt;FooType&gt; fooCaptor = ArgumentCaptor.forClass(FooType.class);\nverify(gizmo).initialize(fooCaptor.capture());\nFooType capturedValue = fooCaptor.value();\nassertTrue(idealFoo, capturedValue);\n</code></pre></div>", "author": "jamesonwilliams", "createdAt": "2020-05-08T05:58:00Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCategory;\n+import com.amplifyframework.auth.AuthCategoryConfiguration;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthResetPasswordResult;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+import com.amplifyframework.testutils.sync.SynchronousAuth;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.Tokens;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class AuthComponentTest {\n+    private static final String USER_ID = \"myId\";\n+    private static final String DESTINATION = \"e***@email.com\";\n+    private static final String DELIVERY_MEDIUM = \"sms\";\n+    private static final String ATTRIBUTE_NAME = \"email\";\n+    private static final String USERNAME = \"username\";\n+    private static final String PASSWORD = \"password123\";\n+    private static final String NEW_PASSWORD = \"newPassword123\";\n+    private static final String ATTRIBUTE_KEY = AuthUserAttributeKey.email().getKeyString();\n+    private static final String ATTRIBUTE_VAL = \"email@email.com\";\n+    private static final String CONFIRMATION_CODE = \"confirm\";\n+    private static final Map<String, String> METADATA = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+    private AWSMobileClient mobileClient;\n+    private AuthCategory authCategory;\n+    private SynchronousAuth synchronousAuth;\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authCategory = new AuthCategory();\n+        authCategory.addPlugin(new AWSCognitoAuthPlugin(mobileClient, USER_ID));\n+        synchronousAuth = SynchronousAuth.delegatingTo(authCategory);\n+\n+        doAnswer(invocation -> {\n+            Callback<Tokens> callback = invocation.getArgument(0);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).getTokens(any());\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject pluginConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+        JSONObject json = new JSONObject().put(\"plugins\",\n+                new JSONObject().put(\n+                    new AWSCognitoAuthPlugin().getPluginKey(),\n+                    pluginConfig\n+                )\n+        );\n+        AuthCategoryConfiguration authConfig = new AuthCategoryConfiguration();\n+        authConfig.populateFromJSON(json);\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(pluginConfig.toString(), invocation.getArgument(1).toString());\n+            assertTrue(invocation.getArgument(1) instanceof AWSConfiguration);", "originalCommit": "1c7831a2a7a329a4a719184dae0379be77581f8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2MTQxOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r422161419", "bodyText": "Ok", "author": "TrekSoft", "createdAt": "2020-05-08T14:03:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NDU2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NTgxNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421955814", "body": "Feels like a lot of boilerplate for the user to add a dang attribute, no?\r\n\r\nCan we achieve soemthing more like:\r\n\r\n```\r\nAWSCognitoAuthSignUpOptions.builder()\r\n    .userAttribute(AuthUserAttributeKey.email(), ATTRIBUTE_VAL)\r\n    .build();\r\n```", "bodyText": "Feels like a lot of boilerplate for the user to add a dang attribute, no?\nCan we achieve soemthing more like:\nAWSCognitoAuthSignUpOptions.builder()\n    .userAttribute(AuthUserAttributeKey.email(), ATTRIBUTE_VAL)\n    .build();", "bodyHTML": "<p dir=\"auto\">Feels like a lot of boilerplate for the user to add a dang attribute, no?</p>\n<p dir=\"auto\">Can we achieve soemthing more like:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"AWSCognitoAuthSignUpOptions.builder()\n    .userAttribute(AuthUserAttributeKey.email(), ATTRIBUTE_VAL)\n    .build();\n\"><pre><code>AWSCognitoAuthSignUpOptions.builder()\n    .userAttribute(AuthUserAttributeKey.email(), ATTRIBUTE_VAL)\n    .build();\n</code></pre></div>", "author": "jamesonwilliams", "createdAt": "2020-05-08T06:01:53Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCategory;\n+import com.amplifyframework.auth.AuthCategoryConfiguration;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthResetPasswordResult;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+import com.amplifyframework.testutils.sync.SynchronousAuth;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.Tokens;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class AuthComponentTest {\n+    private static final String USER_ID = \"myId\";\n+    private static final String DESTINATION = \"e***@email.com\";\n+    private static final String DELIVERY_MEDIUM = \"sms\";\n+    private static final String ATTRIBUTE_NAME = \"email\";\n+    private static final String USERNAME = \"username\";\n+    private static final String PASSWORD = \"password123\";\n+    private static final String NEW_PASSWORD = \"newPassword123\";\n+    private static final String ATTRIBUTE_KEY = AuthUserAttributeKey.email().getKeyString();\n+    private static final String ATTRIBUTE_VAL = \"email@email.com\";\n+    private static final String CONFIRMATION_CODE = \"confirm\";\n+    private static final Map<String, String> METADATA = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+    private AWSMobileClient mobileClient;\n+    private AuthCategory authCategory;\n+    private SynchronousAuth synchronousAuth;\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authCategory = new AuthCategory();\n+        authCategory.addPlugin(new AWSCognitoAuthPlugin(mobileClient, USER_ID));\n+        synchronousAuth = SynchronousAuth.delegatingTo(authCategory);\n+\n+        doAnswer(invocation -> {\n+            Callback<Tokens> callback = invocation.getArgument(0);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).getTokens(any());\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject pluginConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+        JSONObject json = new JSONObject().put(\"plugins\",\n+                new JSONObject().put(\n+                    new AWSCognitoAuthPlugin().getPluginKey(),\n+                    pluginConfig\n+                )\n+        );\n+        AuthCategoryConfiguration authConfig = new AuthCategoryConfiguration();\n+        authConfig.populateFromJSON(json);\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(pluginConfig.toString(), invocation.getArgument(1).toString());\n+            assertTrue(invocation.getArgument(1) instanceof AWSConfiguration);\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(), any(), any());\n+\n+        authCategory.configure(authConfig, context);\n+        verify(mobileClient).initialize(any(), any(), any());\n+    }\n+\n+    /**\n+     * If {@link AWSMobileClient} emits an error during initialization, the\n+     * {@link com.amplifyframework.auth.AuthPlugin#configure(JSONObject, Context)} method should wrap that exception\n+     * in an {@link AuthException} and throw it on its calling thread.\n+     * @throws AmplifyException the exception expected to be thrown when configuration fails.\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AmplifyException, JSONException {\n+        JSONObject pluginConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+        JSONObject json = new JSONObject().put(\"plugins\",\n+                new JSONObject().put(\n+                        new AWSCognitoAuthPlugin().getPluginKey(),\n+                        pluginConfig\n+                )\n+        );\n+        AuthCategoryConfiguration authConfig = new AuthCategoryConfiguration();\n+        authConfig.populateFromJSON(json);\n+\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(), any(), any());\n+\n+        authCategory.configure(authConfig, getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     * @throws AuthException test fails if this gets thrown since method should succeed\n+     */\n+    @Test\n+    public void signUp() throws AuthException {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    DESTINATION,\n+                    DELIVERY_MEDIUM,\n+                    ATTRIBUTE_NAME\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(USERNAME, invocation.getArgument(0));\n+            assertEquals(PASSWORD, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertEquals(ATTRIBUTE_VAL, attributeMap.get(ATTRIBUTE_KEY));\n+            assertEquals(METADATA, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient).signUp(any(), any(), any(), any(), any());\n+\n+        AuthSignUpResult result = synchronousAuth.signUp(\n+                USERNAME,\n+                PASSWORD,\n+                AWSCognitoAuthSignUpOptions.builder()\n+                    .userAttributes(\n+                        Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), ATTRIBUTE_VAL))\n+                    )", "originalCommit": "1c7831a2a7a329a4a719184dae0379be77581f8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1MjU5Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r422152593", "bodyText": "Yeah it is - the options object stores a list of attributes but I guess I could write some logic in the builder to handle taking a single attribute. Would just have to handle the case properly where someone uses both like builder().userAttribute(...).userAttributes(...)", "author": "TrekSoft", "createdAt": "2020-05-08T13:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NTgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwODYyNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r422208624", "bodyText": "Haha so this was pretty neat - I'd made a slight error when refactoring this and my unit test caught it. :D", "author": "TrekSoft", "createdAt": "2020-05-08T15:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NTgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NzIzOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421957238", "body": "You can probably skip the `doAnswer` stuff, and then just use `eq` to check what is passed in.\r\n\r\nMost of these tests should just be like:\r\n```\r\n// Arrange some options foo, bar, baz\r\nFoo foo = new Foo();\r\nBar bar = mock(Bar.class);\r\nBaz baz = getABaz();\r\n\r\n// Act by calling Auth API\r\nauth.signUp(foo, bar, baz, whatever);\r\n\r\n// veriify that the mobile client was called in a certain way...\r\nverfiy(mobileClient).signUp(eq(foo), eq(baz));\r\n```\r\n\r\nOr, in some cases you might not be able to use`eq`, directly. In which case you can do:\r\n```\r\nauth.signUo(\"foo\", \"bar\", \"baz\");\r\n\r\nArgumentCaptor<TypeYouCantMake> whatDidItGiveMe = ArgumentCaptor.forClass(TypeYouCantMake.class);\r\nverify(mobileClient).signUp(whatDidItGiveMe.capture(), eq(bar), eq(baz));\r\n\r\nFoo foo = whatDidItGiveMe.value().getSomeContainedField();\r\nassertEquals(expectedFoo, foo); // Ah!!  the thing it gave us _contained_ an expected foo.\r\n```", "bodyText": "You can probably skip the doAnswer stuff, and then just use eq to check what is passed in.\nMost of these tests should just be like:\n// Arrange some options foo, bar, baz\nFoo foo = new Foo();\nBar bar = mock(Bar.class);\nBaz baz = getABaz();\n\n// Act by calling Auth API\nauth.signUp(foo, bar, baz, whatever);\n\n// veriify that the mobile client was called in a certain way...\nverfiy(mobileClient).signUp(eq(foo), eq(baz));\n\nOr, in some cases you might not be able to useeq, directly. In which case you can do:\nauth.signUo(\"foo\", \"bar\", \"baz\");\n\nArgumentCaptor<TypeYouCantMake> whatDidItGiveMe = ArgumentCaptor.forClass(TypeYouCantMake.class);\nverify(mobileClient).signUp(whatDidItGiveMe.capture(), eq(bar), eq(baz));\n\nFoo foo = whatDidItGiveMe.value().getSomeContainedField();\nassertEquals(expectedFoo, foo); // Ah!!  the thing it gave us _contained_ an expected foo.", "bodyHTML": "<p dir=\"auto\">You can probably skip the <code>doAnswer</code> stuff, and then just use <code>eq</code> to check what is passed in.</p>\n<p dir=\"auto\">Most of these tests should just be like:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Arrange some options foo, bar, baz\nFoo foo = new Foo();\nBar bar = mock(Bar.class);\nBaz baz = getABaz();\n\n// Act by calling Auth API\nauth.signUp(foo, bar, baz, whatever);\n\n// veriify that the mobile client was called in a certain way...\nverfiy(mobileClient).signUp(eq(foo), eq(baz));\n\"><pre><code>// Arrange some options foo, bar, baz\nFoo foo = new Foo();\nBar bar = mock(Bar.class);\nBaz baz = getABaz();\n\n// Act by calling Auth API\nauth.signUp(foo, bar, baz, whatever);\n\n// veriify that the mobile client was called in a certain way...\nverfiy(mobileClient).signUp(eq(foo), eq(baz));\n</code></pre></div>\n<p dir=\"auto\">Or, in some cases you might not be able to use<code>eq</code>, directly. In which case you can do:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"auth.signUo(&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;);\n\nArgumentCaptor&lt;TypeYouCantMake&gt; whatDidItGiveMe = ArgumentCaptor.forClass(TypeYouCantMake.class);\nverify(mobileClient).signUp(whatDidItGiveMe.capture(), eq(bar), eq(baz));\n\nFoo foo = whatDidItGiveMe.value().getSomeContainedField();\nassertEquals(expectedFoo, foo); // Ah!!  the thing it gave us _contained_ an expected foo.\n\"><pre><code>auth.signUo(\"foo\", \"bar\", \"baz\");\n\nArgumentCaptor&lt;TypeYouCantMake&gt; whatDidItGiveMe = ArgumentCaptor.forClass(TypeYouCantMake.class);\nverify(mobileClient).signUp(whatDidItGiveMe.capture(), eq(bar), eq(baz));\n\nFoo foo = whatDidItGiveMe.value().getSomeContainedField();\nassertEquals(expectedFoo, foo); // Ah!!  the thing it gave us _contained_ an expected foo.\n</code></pre></div>", "author": "jamesonwilliams", "createdAt": "2020-05-08T06:06:39Z", "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCategory;\n+import com.amplifyframework.auth.AuthCategoryConfiguration;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthResetPasswordResult;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+import com.amplifyframework.testutils.sync.SynchronousAuth;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.Tokens;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class AuthComponentTest {\n+    private static final String USER_ID = \"myId\";\n+    private static final String DESTINATION = \"e***@email.com\";\n+    private static final String DELIVERY_MEDIUM = \"sms\";\n+    private static final String ATTRIBUTE_NAME = \"email\";\n+    private static final String USERNAME = \"username\";\n+    private static final String PASSWORD = \"password123\";\n+    private static final String NEW_PASSWORD = \"newPassword123\";\n+    private static final String ATTRIBUTE_KEY = AuthUserAttributeKey.email().getKeyString();\n+    private static final String ATTRIBUTE_VAL = \"email@email.com\";\n+    private static final String CONFIRMATION_CODE = \"confirm\";\n+    private static final Map<String, String> METADATA = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+    private AWSMobileClient mobileClient;\n+    private AuthCategory authCategory;\n+    private SynchronousAuth synchronousAuth;\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authCategory = new AuthCategory();\n+        authCategory.addPlugin(new AWSCognitoAuthPlugin(mobileClient, USER_ID));\n+        synchronousAuth = SynchronousAuth.delegatingTo(authCategory);\n+\n+        doAnswer(invocation -> {\n+            Callback<Tokens> callback = invocation.getArgument(0);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).getTokens(any());\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject pluginConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+        JSONObject json = new JSONObject().put(\"plugins\",\n+                new JSONObject().put(\n+                    new AWSCognitoAuthPlugin().getPluginKey(),\n+                    pluginConfig\n+                )\n+        );\n+        AuthCategoryConfiguration authConfig = new AuthCategoryConfiguration();\n+        authConfig.populateFromJSON(json);\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(pluginConfig.toString(), invocation.getArgument(1).toString());\n+            assertTrue(invocation.getArgument(1) instanceof AWSConfiguration);\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(), any(), any());\n+\n+        authCategory.configure(authConfig, context);\n+        verify(mobileClient).initialize(any(), any(), any());\n+    }\n+\n+    /**\n+     * If {@link AWSMobileClient} emits an error during initialization, the\n+     * {@link com.amplifyframework.auth.AuthPlugin#configure(JSONObject, Context)} method should wrap that exception\n+     * in an {@link AuthException} and throw it on its calling thread.\n+     * @throws AmplifyException the exception expected to be thrown when configuration fails.\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AmplifyException, JSONException {\n+        JSONObject pluginConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+        JSONObject json = new JSONObject().put(\"plugins\",\n+                new JSONObject().put(\n+                        new AWSCognitoAuthPlugin().getPluginKey(),\n+                        pluginConfig\n+                )\n+        );\n+        AuthCategoryConfiguration authConfig = new AuthCategoryConfiguration();\n+        authConfig.populateFromJSON(json);\n+\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(), any(), any());\n+\n+        authCategory.configure(authConfig, getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     * @throws AuthException test fails if this gets thrown since method should succeed\n+     */\n+    @Test\n+    public void signUp() throws AuthException {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    DESTINATION,\n+                    DELIVERY_MEDIUM,\n+                    ATTRIBUTE_NAME\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(USERNAME, invocation.getArgument(0));\n+            assertEquals(PASSWORD, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertEquals(ATTRIBUTE_VAL, attributeMap.get(ATTRIBUTE_KEY));\n+            assertEquals(METADATA, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient).signUp(any(), any(), any(), any(), any());\n+\n+        AuthSignUpResult result = synchronousAuth.signUp(\n+                USERNAME,\n+                PASSWORD,\n+                AWSCognitoAuthSignUpOptions.builder()\n+                    .userAttributes(\n+                        Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), ATTRIBUTE_VAL))\n+                    )\n+                    .validationData(METADATA)\n+                    .build()\n+        );\n+\n+        validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP);\n+        verify(mobileClient).signUp(any(), any(), any(), any(), any());", "originalCommit": "1c7831a2a7a329a4a719184dae0379be77581f8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2MTQ4MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r422161480", "bodyText": "Ok", "author": "TrekSoft", "createdAt": "2020-05-08T14:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NzIzOA=="}], "type": "inlineReview"}, {"oid": "3fd48c7da886304ba4b2b3f3f811cb40cc8a9829", "url": "https://github.com/aws-amplify/amplify-android/commit/3fd48c7da886304ba4b2b3f3f811cb40cc8a9829", "message": "Round 2 of PR feedback", "committedDate": "2020-05-08T15:42:20Z", "type": "commit"}, {"oid": "436c3bdd2dce0643148f2440e8d28af3390fba03", "url": "https://github.com/aws-amplify/amplify-android/commit/436c3bdd2dce0643148f2440e8d28af3390fba03", "message": "Merge branch 'AuthCategory' into ddaudeli/AuthCategory", "committedDate": "2020-05-08T17:42:05Z", "type": "commit"}, {"oid": "0af699ae8cc92ee180ffa8698c2154c72bed9680", "url": "https://github.com/aws-amplify/amplify-android/commit/0af699ae8cc92ee180ffa8698c2154c72bed9680", "message": "Adds additional JavaDocs to meet new rule", "committedDate": "2020-05-08T18:04:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTQ4MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r422431480", "body": "Blech, we're gonna need Javadocs on this, now that we have the new Checkstyle rule.", "bodyText": "Blech, we're gonna need Javadocs on this, now that we have the new Checkstyle rule.", "bodyHTML": "<p dir=\"auto\">Blech, we're gonna need Javadocs on this, now that we have the new Checkstyle rule.</p>", "author": "jamesonwilliams", "createdAt": "2020-05-09T00:37:41Z", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -58,18 +64,33 @@\n import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+/**\n+ * A Cognito implementation of the Auth Plugin.\n+ */\n public final class AWSCognitoAuthPlugin extends AuthPlugin<AWSMobileClient> {\n     private static final String AWS_COGNITO_AUTH_PLUGIN_KEY = \"awsCognitoAuthPlugin\";\n     private static final long SECONDS_BEFORE_TIMEOUT = 10;\n     private static final String COGNITO_USER_ID_ATTRIBUTE = \"sub\";\n     private static final String MOBILE_CLIENT_TOKEN_KEY = \"token\";\n     private String userId;\n+    private AWSMobileClient awsMobileClient;\n+\n+    public AWSCognitoAuthPlugin() {", "originalCommit": "0af699ae8cc92ee180ffa8698c2154c72bed9680", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA2MjE0Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r423062143", "bodyText": "Done", "author": "TrekSoft", "createdAt": "2020-05-11T14:02:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTQ4MA=="}], "type": "inlineReview"}, {"oid": "076e1d72fa3b71b6b168622233b474897c8b7337", "url": "https://github.com/aws-amplify/amplify-android/commit/076e1d72fa3b71b6b168622233b474897c8b7337", "message": "Merge branch 'AuthCategory' into ddaudeli/AuthCategory", "committedDate": "2020-05-11T13:36:03Z", "type": "commit"}, {"oid": "b1d1eb002e0bcae3e92d27c2b901e99ac7909c49", "url": "https://github.com/aws-amplify/amplify-android/commit/b1d1eb002e0bcae3e92d27c2b901e99ac7909c49", "message": "Updates Javadocs", "committedDate": "2020-05-11T13:59:00Z", "type": "commit"}]}