{"pr_number": 920, "pr_title": "chore(aws-api): move owner-based auth logic out of plugin", "pr_author": "raphkim", "pr_createdAt": "2020-10-21T17:05:03Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/920", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1MTI5Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/920#discussion_r509551292", "body": "```suggestion\r\n        GraphQLRequest<R> authDecoratedRequest = graphQLRequest;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    GraphQLRequest<R> request = graphQLRequest;\n          \n          \n            \n                    GraphQLRequest<R> authDecoratedRequest = graphQLRequest;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">GraphQLRequest&lt;<span class=\"pl-smi\">R</span>&gt;</span> <span class=\"x x-first x-last\">request</span> <span class=\"pl-k\">=</span> graphQLRequest;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">GraphQLRequest&lt;<span class=\"pl-smi\">R</span>&gt;</span> <span class=\"x x-first x-last\">authDecoratedRequest</span> <span class=\"pl-k\">=</span> graphQLRequest;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jamesonwilliams", "createdAt": "2020-10-21T18:25:27Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/AWSApiPlugin.java", "diffHunk": "@@ -276,68 +267,23 @@ public String getVersion() {\n             @NonNull Action onSubscriptionComplete) {\n         final ClientDetails clientDetails = apiDetails.get(apiName);\n         if (clientDetails == null) {\n-            onSubscriptionFailure.accept(\n-                    new ApiException(\n-                            \"No client information for API named \" + apiName,\n-                            \"Check your amplify configuration to make sure there \" +\n-                                    \"is a correctly configured section for \" + apiName\n-                    )\n-            );\n+            onSubscriptionFailure.accept(new ApiException(\n+                    \"No client information for API named \" + apiName,\n+                    \"Check your amplify configuration to make sure there \" +\n+                            \"is a correctly configured section for \" + apiName\n+            ));\n             return null;\n         }\n \n         GraphQLRequest<R> request = graphQLRequest;", "originalCommit": "9c572796c62f7741c486f7632d28c4706ac78a6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1Mzg1MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/920#discussion_r509553851", "body": "Should this say something about like `\"@auth is only supported when suing Cognito User Pools or OpenID connect?\"`", "bodyText": "Should this say something about like \"@auth is only supported when suing Cognito User Pools or OpenID connect?\"", "bodyHTML": "<p dir=\"auto\">Should this say something about like <code>\"@auth is only supported when suing Cognito User Pools or OpenID connect?\"</code></p>", "author": "jamesonwilliams", "createdAt": "2020-10-21T18:28:37Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.AuthorizationType;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.core.model.AuthRule;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.ModelOperation;\n+\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoJWTParser;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+/**\n+ * Processor that can decorate an AppSync-compliant GraphQL request with additional variables\n+ * that are required for owner-based or group-based authorization.\n+ */\n+public final class AuthRuleProcessor {\n+    private final ApiAuthProviders authProvider;\n+\n+    /**\n+     * Constructs a new instance of GraphQL request's auth rule processor.\n+     * @param authProvider the auth providers to authorize requests\n+     */\n+    public AuthRuleProcessor(@NonNull ApiAuthProviders authProvider) {\n+        this.authProvider = Objects.requireNonNull(authProvider);\n+    }\n+\n+    /**\n+     * Decorate given GraphQL request instance with additional variables for owner-based or\n+     * group-based authorization.\n+     *\n+     * This will only work if the request is compliant with the AppSync specifications.\n+     * @param request an instance of {@link GraphQLRequest}.\n+     * @param authType the mode of authorization being used to authorize the request\n+     * @param <R> The type of data contained in the GraphQLResponse expected from this request.\n+     * @return the input request with additional variables that specify model's owner and/or\n+     *          groups\n+     * @throws ApiException If an error is encountered while processing the auth rules associated\n+     *          with the request or if the authorization fails\n+     */\n+    public <R> GraphQLRequest<R> process(\n+            @NonNull GraphQLRequest<R> request,\n+            @NonNull AuthorizationType authType\n+    ) throws ApiException {\n+        if (!(request instanceof AppSyncGraphQLRequest)) {\n+            return request;\n+        }\n+\n+        AppSyncGraphQLRequest<R> appSyncRequest = (AppSyncGraphQLRequest<R>) request;\n+        AuthRule ownerRuleWithReadRestriction = null;\n+        ArrayList<String> readAuthorizedGroups = new ArrayList<>();\n+\n+        // Note that we are intentionally supporting only one owner rule with a READ operation at this time.\n+        // If there is more than one, the operation will fail because AppSync generates a parameter for each\n+        // one. The question then is which one do we pass. JavaScript currently doesn't support this use case\n+        // and it's not clear what a good solution would be until AppSync supports real time filters.\n+        for (AuthRule authRule : appSyncRequest.getModelSchema().getAuthRules()) {\n+            if (isReadRestrictingOwner(authRule)) {\n+                if (ownerRuleWithReadRestriction == null) {\n+                    ownerRuleWithReadRestriction = authRule;\n+                } else {\n+                    throw new ApiException(\n+                            \"Detected multiple owner type auth rules with a READ operation\",\n+                            \"We currently do not support this use case. Please limit your type to just one \" +\n+                                    \"owner auth rule with a READ operation restriction.\"\n+                    );\n+                }\n+            } else if (isReadRestrictingStaticGroup(authRule)) {\n+                readAuthorizedGroups.addAll(authRule.getGroups());\n+            }\n+        }\n+\n+        // We only add the owner parameter to the subscription if there is an owner rule with a READ restriction\n+        // and either there are no group auth rules with read access or there are but the user isn't in any of\n+        // them.\n+        if (ownerRuleWithReadRestriction != null\n+                && (readAuthorizedGroups.isEmpty()\n+                || Collections.disjoint(readAuthorizedGroups, getUserGroups(authType)))\n+        ) {\n+            String idClaim = ownerRuleWithReadRestriction.getIdentityClaimOrDefault();\n+            String key = ownerRuleWithReadRestriction.getOwnerFieldOrDefault();\n+            String value = getIdentityValue(idClaim, authType);\n+\n+            try {\n+                return appSyncRequest.newBuilder()\n+                        .variable(key, \"String!\", value)\n+                        .build();\n+            } catch (AmplifyException exception) {\n+                throw new ApiException(\n+                        \"Failed to set owner field on AppSyncGraphQLRequest\", exception,\n+                        \"See attached exception for details.\");\n+            }\n+        }\n+\n+        return request;\n+    }\n+\n+    private boolean isReadRestrictingOwner(AuthRule authRule) {\n+        return AuthStrategy.OWNER.equals(authRule.getAuthStrategy())\n+                && authRule.getOperationsOrDefault().contains(ModelOperation.READ);\n+    }\n+\n+    private boolean isReadRestrictingStaticGroup(AuthRule authRule) {\n+        return AuthStrategy.GROUPS.equals(authRule.getAuthStrategy())\n+                && authRule.getGroups() != null && !authRule.getGroups().isEmpty()\n+                && authRule.getOperationsOrDefault().contains(ModelOperation.READ);\n+    }\n+\n+    private String getIdentityValue(String identityClaim, AuthorizationType authType) throws ApiException {\n+        String identityValue = null;\n+\n+        try {\n+            identityValue = CognitoJWTParser\n+                    .getPayload(getAuthToken(authType))\n+                    .getString(identityClaim);\n+        } catch (JSONException | CognitoParameterInvalidException error) {\n+            // Could not read identity value from the token...\n+            // Exception will be thrown so do nothing for now\n+        }\n+\n+        if (identityValue == null || identityValue.isEmpty()) {\n+            throw new ApiException(\n+                    \"Attempted to subscribe to a model with owner based authorization without \" + identityClaim + \" \" +\n+                            \"which was specified (or defaulted to) as the identity claim.\",\n+                    \"If you did not specify a custom identityClaim in your schema, make sure you are logged in. If \" +\n+                            \"you did, check that the value you specified in your schema is present in the access key.\"\n+            );\n+        }\n+\n+        return identityValue;\n+    }\n+\n+    private ArrayList<String> getUserGroups(AuthorizationType authType) throws ApiException {\n+        // Custom groups claim isn't supported yet.\n+        if (!AuthorizationType.AMAZON_COGNITO_USER_POOLS.equals(authType)) {\n+            throw new ApiException(\"Custom groups claim is not supported yet.\",\n+                    \"Please use Amazon Cognito User Pools to authorize your API.\");\n+        }\n+\n+        ArrayList<String> groups = new ArrayList<>();\n+        final String GROUPS_KEY = \"cognito:groups\";\n+\n+        try {\n+            JSONObject accessToken = CognitoJWTParser.getPayload(getAuthToken(authType));\n+\n+            if (accessToken.has(GROUPS_KEY)) {\n+                JSONArray jsonGroups = accessToken.getJSONArray(GROUPS_KEY);\n+\n+                for (int i = 0; i < jsonGroups.length(); i++) {\n+                    groups.add(jsonGroups.getString(i));\n+                }\n+            }\n+        } catch (JSONException | CognitoParameterInvalidException error) {\n+            throw new ApiException(\n+                    \"Failed to parse groups from auth rule.\",\n+                    error,\n+                    \"This should never happen - see attached exception for more details and report to us on GitHub.\"\n+            );\n+        }\n+\n+        return groups;\n+    }\n+\n+    private String getAuthToken(AuthorizationType authType) throws ApiException {\n+        switch (authType) {\n+            case AMAZON_COGNITO_USER_POOLS:\n+                CognitoUserPoolsAuthProvider cognitoProvider = authProvider.getCognitoUserPoolsAuthProvider();\n+                if (cognitoProvider == null) {\n+                    cognitoProvider = new DefaultCognitoUserPoolsAuthProvider();\n+                }\n+                return cognitoProvider.getLatestAuthToken();\n+            case OPENID_CONNECT:\n+                OidcAuthProvider oidcProvider = authProvider.getOidcAuthProvider();\n+                if (oidcProvider == null) {\n+                    throw new ApiException(\n+                            \"OidcAuthProvider interface is not implemented.\",\n+                            \"Configure AWSApiPlugin with ApiAuthProviders containing an implementation of \" +\n+                                    \"OidcAuthProvider interface that can vend a valid JWT token.\"\n+                    );\n+                }\n+                return oidcProvider.getLatestAuthToken();\n+            case API_KEY:\n+            case AWS_IAM:\n+            case NONE:\n+            default:\n+                throw new ApiException(\n+                        \"Failed to obtain access token from the configured auth provider.\",\n+                        \"Verify that the API is configured with either Cognito User Pools or OpenID Connect.\"", "originalCommit": "9c572796c62f7741c486f7632d28c4706ac78a6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1NDc5Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/920#discussion_r509554793", "body": "There is the `REPORT_TO_AWS` (or whatever) message constant, can you use that?", "bodyText": "There is the REPORT_TO_AWS (or whatever) message constant, can you use that?", "bodyHTML": "<p dir=\"auto\">There is the <code>REPORT_TO_AWS</code> (or whatever) message constant, can you use that?</p>", "author": "jamesonwilliams", "createdAt": "2020-10-21T18:29:24Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.AuthorizationType;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.core.model.AuthRule;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.ModelOperation;\n+\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoJWTParser;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+/**\n+ * Processor that can decorate an AppSync-compliant GraphQL request with additional variables\n+ * that are required for owner-based or group-based authorization.\n+ */\n+public final class AuthRuleProcessor {\n+    private final ApiAuthProviders authProvider;\n+\n+    /**\n+     * Constructs a new instance of GraphQL request's auth rule processor.\n+     * @param authProvider the auth providers to authorize requests\n+     */\n+    public AuthRuleProcessor(@NonNull ApiAuthProviders authProvider) {\n+        this.authProvider = Objects.requireNonNull(authProvider);\n+    }\n+\n+    /**\n+     * Decorate given GraphQL request instance with additional variables for owner-based or\n+     * group-based authorization.\n+     *\n+     * This will only work if the request is compliant with the AppSync specifications.\n+     * @param request an instance of {@link GraphQLRequest}.\n+     * @param authType the mode of authorization being used to authorize the request\n+     * @param <R> The type of data contained in the GraphQLResponse expected from this request.\n+     * @return the input request with additional variables that specify model's owner and/or\n+     *          groups\n+     * @throws ApiException If an error is encountered while processing the auth rules associated\n+     *          with the request or if the authorization fails\n+     */\n+    public <R> GraphQLRequest<R> process(\n+            @NonNull GraphQLRequest<R> request,\n+            @NonNull AuthorizationType authType\n+    ) throws ApiException {\n+        if (!(request instanceof AppSyncGraphQLRequest)) {\n+            return request;\n+        }\n+\n+        AppSyncGraphQLRequest<R> appSyncRequest = (AppSyncGraphQLRequest<R>) request;\n+        AuthRule ownerRuleWithReadRestriction = null;\n+        ArrayList<String> readAuthorizedGroups = new ArrayList<>();\n+\n+        // Note that we are intentionally supporting only one owner rule with a READ operation at this time.\n+        // If there is more than one, the operation will fail because AppSync generates a parameter for each\n+        // one. The question then is which one do we pass. JavaScript currently doesn't support this use case\n+        // and it's not clear what a good solution would be until AppSync supports real time filters.\n+        for (AuthRule authRule : appSyncRequest.getModelSchema().getAuthRules()) {\n+            if (isReadRestrictingOwner(authRule)) {\n+                if (ownerRuleWithReadRestriction == null) {\n+                    ownerRuleWithReadRestriction = authRule;\n+                } else {\n+                    throw new ApiException(\n+                            \"Detected multiple owner type auth rules with a READ operation\",\n+                            \"We currently do not support this use case. Please limit your type to just one \" +\n+                                    \"owner auth rule with a READ operation restriction.\"\n+                    );\n+                }\n+            } else if (isReadRestrictingStaticGroup(authRule)) {\n+                readAuthorizedGroups.addAll(authRule.getGroups());\n+            }\n+        }\n+\n+        // We only add the owner parameter to the subscription if there is an owner rule with a READ restriction\n+        // and either there are no group auth rules with read access or there are but the user isn't in any of\n+        // them.\n+        if (ownerRuleWithReadRestriction != null\n+                && (readAuthorizedGroups.isEmpty()\n+                || Collections.disjoint(readAuthorizedGroups, getUserGroups(authType)))\n+        ) {\n+            String idClaim = ownerRuleWithReadRestriction.getIdentityClaimOrDefault();\n+            String key = ownerRuleWithReadRestriction.getOwnerFieldOrDefault();\n+            String value = getIdentityValue(idClaim, authType);\n+\n+            try {\n+                return appSyncRequest.newBuilder()\n+                        .variable(key, \"String!\", value)\n+                        .build();\n+            } catch (AmplifyException exception) {\n+                throw new ApiException(\n+                        \"Failed to set owner field on AppSyncGraphQLRequest\", exception,\n+                        \"See attached exception for details.\");\n+            }\n+        }\n+\n+        return request;\n+    }\n+\n+    private boolean isReadRestrictingOwner(AuthRule authRule) {\n+        return AuthStrategy.OWNER.equals(authRule.getAuthStrategy())\n+                && authRule.getOperationsOrDefault().contains(ModelOperation.READ);\n+    }\n+\n+    private boolean isReadRestrictingStaticGroup(AuthRule authRule) {\n+        return AuthStrategy.GROUPS.equals(authRule.getAuthStrategy())\n+                && authRule.getGroups() != null && !authRule.getGroups().isEmpty()\n+                && authRule.getOperationsOrDefault().contains(ModelOperation.READ);\n+    }\n+\n+    private String getIdentityValue(String identityClaim, AuthorizationType authType) throws ApiException {\n+        String identityValue = null;\n+\n+        try {\n+            identityValue = CognitoJWTParser\n+                    .getPayload(getAuthToken(authType))\n+                    .getString(identityClaim);\n+        } catch (JSONException | CognitoParameterInvalidException error) {\n+            // Could not read identity value from the token...\n+            // Exception will be thrown so do nothing for now\n+        }\n+\n+        if (identityValue == null || identityValue.isEmpty()) {\n+            throw new ApiException(\n+                    \"Attempted to subscribe to a model with owner based authorization without \" + identityClaim + \" \" +\n+                            \"which was specified (or defaulted to) as the identity claim.\",\n+                    \"If you did not specify a custom identityClaim in your schema, make sure you are logged in. If \" +\n+                            \"you did, check that the value you specified in your schema is present in the access key.\"\n+            );\n+        }\n+\n+        return identityValue;\n+    }\n+\n+    private ArrayList<String> getUserGroups(AuthorizationType authType) throws ApiException {\n+        // Custom groups claim isn't supported yet.\n+        if (!AuthorizationType.AMAZON_COGNITO_USER_POOLS.equals(authType)) {\n+            throw new ApiException(\"Custom groups claim is not supported yet.\",\n+                    \"Please use Amazon Cognito User Pools to authorize your API.\");\n+        }\n+\n+        ArrayList<String> groups = new ArrayList<>();\n+        final String GROUPS_KEY = \"cognito:groups\";\n+\n+        try {\n+            JSONObject accessToken = CognitoJWTParser.getPayload(getAuthToken(authType));\n+\n+            if (accessToken.has(GROUPS_KEY)) {\n+                JSONArray jsonGroups = accessToken.getJSONArray(GROUPS_KEY);\n+\n+                for (int i = 0; i < jsonGroups.length(); i++) {\n+                    groups.add(jsonGroups.getString(i));\n+                }\n+            }\n+        } catch (JSONException | CognitoParameterInvalidException error) {\n+            throw new ApiException(\n+                    \"Failed to parse groups from auth rule.\",\n+                    error,\n+                    \"This should never happen - see attached exception for more details and report to us on GitHub.\"", "originalCommit": "9c572796c62f7741c486f7632d28c4706ac78a6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1NTg3MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/920#discussion_r509555870", "body": "Impossible to find single letter variables. I suggest:\r\n```suggestion\r\n                for (int index = 0; index < jsonGroups.length(); index++) {\r\n                    groups.add(jsonGroups.getString(index));\r\n```\r\n", "bodyText": "Impossible to find single letter variables. I suggest:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            for (int i = 0; i < jsonGroups.length(); i++) {\n          \n          \n            \n                                groups.add(jsonGroups.getString(i));\n          \n          \n            \n                            for (int index = 0; index < jsonGroups.length(); index++) {\n          \n          \n            \n                                groups.add(jsonGroups.getString(index));", "bodyHTML": "<p dir=\"auto\">Impossible to find single letter variables. I suggest:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">i</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; <span class=\"x x-first x-last\">i</span> <span class=\"pl-k\">&lt;</span> jsonGroups<span class=\"pl-k\">.</span>length(); <span class=\"x x-first x-last\">i</span><span class=\"pl-k\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    groups<span class=\"pl-k\">.</span>add(jsonGroups<span class=\"pl-k\">.</span>getString(<span class=\"x x-first x-last\">i</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">index</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; <span class=\"x x-first x-last\">index</span> <span class=\"pl-k\">&lt;</span> jsonGroups<span class=\"pl-k\">.</span>length(); <span class=\"x x-first x-last\">index</span><span class=\"pl-k\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    groups<span class=\"pl-k\">.</span>add(jsonGroups<span class=\"pl-k\">.</span>getString(<span class=\"x x-first x-last\">index</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jamesonwilliams", "createdAt": "2020-10-21T18:30:18Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.AuthorizationType;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.core.model.AuthRule;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.ModelOperation;\n+\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoJWTParser;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+/**\n+ * Processor that can decorate an AppSync-compliant GraphQL request with additional variables\n+ * that are required for owner-based or group-based authorization.\n+ */\n+public final class AuthRuleProcessor {\n+    private final ApiAuthProviders authProvider;\n+\n+    /**\n+     * Constructs a new instance of GraphQL request's auth rule processor.\n+     * @param authProvider the auth providers to authorize requests\n+     */\n+    public AuthRuleProcessor(@NonNull ApiAuthProviders authProvider) {\n+        this.authProvider = Objects.requireNonNull(authProvider);\n+    }\n+\n+    /**\n+     * Decorate given GraphQL request instance with additional variables for owner-based or\n+     * group-based authorization.\n+     *\n+     * This will only work if the request is compliant with the AppSync specifications.\n+     * @param request an instance of {@link GraphQLRequest}.\n+     * @param authType the mode of authorization being used to authorize the request\n+     * @param <R> The type of data contained in the GraphQLResponse expected from this request.\n+     * @return the input request with additional variables that specify model's owner and/or\n+     *          groups\n+     * @throws ApiException If an error is encountered while processing the auth rules associated\n+     *          with the request or if the authorization fails\n+     */\n+    public <R> GraphQLRequest<R> process(\n+            @NonNull GraphQLRequest<R> request,\n+            @NonNull AuthorizationType authType\n+    ) throws ApiException {\n+        if (!(request instanceof AppSyncGraphQLRequest)) {\n+            return request;\n+        }\n+\n+        AppSyncGraphQLRequest<R> appSyncRequest = (AppSyncGraphQLRequest<R>) request;\n+        AuthRule ownerRuleWithReadRestriction = null;\n+        ArrayList<String> readAuthorizedGroups = new ArrayList<>();\n+\n+        // Note that we are intentionally supporting only one owner rule with a READ operation at this time.\n+        // If there is more than one, the operation will fail because AppSync generates a parameter for each\n+        // one. The question then is which one do we pass. JavaScript currently doesn't support this use case\n+        // and it's not clear what a good solution would be until AppSync supports real time filters.\n+        for (AuthRule authRule : appSyncRequest.getModelSchema().getAuthRules()) {\n+            if (isReadRestrictingOwner(authRule)) {\n+                if (ownerRuleWithReadRestriction == null) {\n+                    ownerRuleWithReadRestriction = authRule;\n+                } else {\n+                    throw new ApiException(\n+                            \"Detected multiple owner type auth rules with a READ operation\",\n+                            \"We currently do not support this use case. Please limit your type to just one \" +\n+                                    \"owner auth rule with a READ operation restriction.\"\n+                    );\n+                }\n+            } else if (isReadRestrictingStaticGroup(authRule)) {\n+                readAuthorizedGroups.addAll(authRule.getGroups());\n+            }\n+        }\n+\n+        // We only add the owner parameter to the subscription if there is an owner rule with a READ restriction\n+        // and either there are no group auth rules with read access or there are but the user isn't in any of\n+        // them.\n+        if (ownerRuleWithReadRestriction != null\n+                && (readAuthorizedGroups.isEmpty()\n+                || Collections.disjoint(readAuthorizedGroups, getUserGroups(authType)))\n+        ) {\n+            String idClaim = ownerRuleWithReadRestriction.getIdentityClaimOrDefault();\n+            String key = ownerRuleWithReadRestriction.getOwnerFieldOrDefault();\n+            String value = getIdentityValue(idClaim, authType);\n+\n+            try {\n+                return appSyncRequest.newBuilder()\n+                        .variable(key, \"String!\", value)\n+                        .build();\n+            } catch (AmplifyException exception) {\n+                throw new ApiException(\n+                        \"Failed to set owner field on AppSyncGraphQLRequest\", exception,\n+                        \"See attached exception for details.\");\n+            }\n+        }\n+\n+        return request;\n+    }\n+\n+    private boolean isReadRestrictingOwner(AuthRule authRule) {\n+        return AuthStrategy.OWNER.equals(authRule.getAuthStrategy())\n+                && authRule.getOperationsOrDefault().contains(ModelOperation.READ);\n+    }\n+\n+    private boolean isReadRestrictingStaticGroup(AuthRule authRule) {\n+        return AuthStrategy.GROUPS.equals(authRule.getAuthStrategy())\n+                && authRule.getGroups() != null && !authRule.getGroups().isEmpty()\n+                && authRule.getOperationsOrDefault().contains(ModelOperation.READ);\n+    }\n+\n+    private String getIdentityValue(String identityClaim, AuthorizationType authType) throws ApiException {\n+        String identityValue = null;\n+\n+        try {\n+            identityValue = CognitoJWTParser\n+                    .getPayload(getAuthToken(authType))\n+                    .getString(identityClaim);\n+        } catch (JSONException | CognitoParameterInvalidException error) {\n+            // Could not read identity value from the token...\n+            // Exception will be thrown so do nothing for now\n+        }\n+\n+        if (identityValue == null || identityValue.isEmpty()) {\n+            throw new ApiException(\n+                    \"Attempted to subscribe to a model with owner based authorization without \" + identityClaim + \" \" +\n+                            \"which was specified (or defaulted to) as the identity claim.\",\n+                    \"If you did not specify a custom identityClaim in your schema, make sure you are logged in. If \" +\n+                            \"you did, check that the value you specified in your schema is present in the access key.\"\n+            );\n+        }\n+\n+        return identityValue;\n+    }\n+\n+    private ArrayList<String> getUserGroups(AuthorizationType authType) throws ApiException {\n+        // Custom groups claim isn't supported yet.\n+        if (!AuthorizationType.AMAZON_COGNITO_USER_POOLS.equals(authType)) {\n+            throw new ApiException(\"Custom groups claim is not supported yet.\",\n+                    \"Please use Amazon Cognito User Pools to authorize your API.\");\n+        }\n+\n+        ArrayList<String> groups = new ArrayList<>();\n+        final String GROUPS_KEY = \"cognito:groups\";\n+\n+        try {\n+            JSONObject accessToken = CognitoJWTParser.getPayload(getAuthToken(authType));\n+\n+            if (accessToken.has(GROUPS_KEY)) {\n+                JSONArray jsonGroups = accessToken.getJSONArray(GROUPS_KEY);\n+\n+                for (int i = 0; i < jsonGroups.length(); i++) {\n+                    groups.add(jsonGroups.getString(i));", "originalCommit": "9c572796c62f7741c486f7632d28c4706ac78a6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1NzU4Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/920#discussion_r509557587", "body": "Meh", "bodyText": "Meh", "bodyHTML": "<p dir=\"auto\">Meh</p>", "author": "jamesonwilliams", "createdAt": "2020-10-21T18:31:30Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.AuthorizationType;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.core.model.AuthRule;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.ModelOperation;\n+\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoJWTParser;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+/**\n+ * Processor that can decorate an AppSync-compliant GraphQL request with additional variables\n+ * that are required for owner-based or group-based authorization.\n+ */\n+public final class AuthRuleProcessor {\n+    private final ApiAuthProviders authProvider;\n+\n+    /**\n+     * Constructs a new instance of GraphQL request's auth rule processor.\n+     * @param authProvider the auth providers to authorize requests\n+     */\n+    public AuthRuleProcessor(@NonNull ApiAuthProviders authProvider) {\n+        this.authProvider = Objects.requireNonNull(authProvider);\n+    }\n+\n+    /**\n+     * Decorate given GraphQL request instance with additional variables for owner-based or\n+     * group-based authorization.\n+     *\n+     * This will only work if the request is compliant with the AppSync specifications.\n+     * @param request an instance of {@link GraphQLRequest}.\n+     * @param authType the mode of authorization being used to authorize the request\n+     * @param <R> The type of data contained in the GraphQLResponse expected from this request.\n+     * @return the input request with additional variables that specify model's owner and/or\n+     *          groups\n+     * @throws ApiException If an error is encountered while processing the auth rules associated\n+     *          with the request or if the authorization fails\n+     */\n+    public <R> GraphQLRequest<R> process(\n+            @NonNull GraphQLRequest<R> request,\n+            @NonNull AuthorizationType authType\n+    ) throws ApiException {\n+        if (!(request instanceof AppSyncGraphQLRequest)) {\n+            return request;\n+        }\n+\n+        AppSyncGraphQLRequest<R> appSyncRequest = (AppSyncGraphQLRequest<R>) request;\n+        AuthRule ownerRuleWithReadRestriction = null;\n+        ArrayList<String> readAuthorizedGroups = new ArrayList<>();\n+\n+        // Note that we are intentionally supporting only one owner rule with a READ operation at this time.\n+        // If there is more than one, the operation will fail because AppSync generates a parameter for each\n+        // one. The question then is which one do we pass. JavaScript currently doesn't support this use case\n+        // and it's not clear what a good solution would be until AppSync supports real time filters.\n+        for (AuthRule authRule : appSyncRequest.getModelSchema().getAuthRules()) {\n+            if (isReadRestrictingOwner(authRule)) {\n+                if (ownerRuleWithReadRestriction == null) {\n+                    ownerRuleWithReadRestriction = authRule;\n+                } else {\n+                    throw new ApiException(\n+                            \"Detected multiple owner type auth rules with a READ operation\",\n+                            \"We currently do not support this use case. Please limit your type to just one \" +\n+                                    \"owner auth rule with a READ operation restriction.\"\n+                    );\n+                }\n+            } else if (isReadRestrictingStaticGroup(authRule)) {\n+                readAuthorizedGroups.addAll(authRule.getGroups());\n+            }\n+        }\n+\n+        // We only add the owner parameter to the subscription if there is an owner rule with a READ restriction\n+        // and either there are no group auth rules with read access or there are but the user isn't in any of\n+        // them.\n+        if (ownerRuleWithReadRestriction != null\n+                && (readAuthorizedGroups.isEmpty()\n+                || Collections.disjoint(readAuthorizedGroups, getUserGroups(authType)))\n+        ) {\n+            String idClaim = ownerRuleWithReadRestriction.getIdentityClaimOrDefault();\n+            String key = ownerRuleWithReadRestriction.getOwnerFieldOrDefault();\n+            String value = getIdentityValue(idClaim, authType);\n+\n+            try {\n+                return appSyncRequest.newBuilder()\n+                        .variable(key, \"String!\", value)\n+                        .build();\n+            } catch (AmplifyException exception) {\n+                throw new ApiException(\n+                        \"Failed to set owner field on AppSyncGraphQLRequest\", exception,\n+                        \"See attached exception for details.\");", "originalCommit": "9c572796c62f7741c486f7632d28c4706ac78a6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1OTYwMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/920#discussion_r509559602", "body": "maybe \r\n```suggestion\r\n    public <R> GraphQLRequest<R> addAuthorizationFields(\r\n```\r\nor: \r\n```suggestion\r\n    public <R> GraphQLRequest<R> decorate(\r\n```\r\n?\r\n\r\nShould this be a `AuthRuleRequestDecorator`?", "bodyText": "maybe\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <R> GraphQLRequest<R> process(\n          \n          \n            \n                public <R> GraphQLRequest<R> addAuthorizationFields(\n          \n      \n    \n    \n  \n\nor:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <R> GraphQLRequest<R> process(\n          \n          \n            \n                public <R> GraphQLRequest<R> decorate(\n          \n      \n    \n    \n  \n\n?\nShould this be a AuthRuleRequestDecorator?", "bodyHTML": "<p dir=\"auto\">maybe</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">R</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">GraphQLRequest&lt;<span class=\"pl-smi\">R</span>&gt;</span> <span class=\"x x-first x-last\">process</span>(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">R</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">GraphQLRequest&lt;<span class=\"pl-smi\">R</span>&gt;</span> <span class=\"x x-first x-last\">addAuthorizationFields</span>(</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">or:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">R</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">GraphQLRequest&lt;<span class=\"pl-smi\">R</span>&gt;</span> <span class=\"x x-first x-last\">process</span>(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">R</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">GraphQLRequest&lt;<span class=\"pl-smi\">R</span>&gt;</span> <span class=\"x x-first x-last\">decorate</span>(</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">?</p>\n<p dir=\"auto\">Should this be a <code>AuthRuleRequestDecorator</code>?</p>", "author": "jamesonwilliams", "createdAt": "2020-10-21T18:33:01Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.AuthorizationType;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.core.model.AuthRule;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.ModelOperation;\n+\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoJWTParser;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+/**\n+ * Processor that can decorate an AppSync-compliant GraphQL request with additional variables\n+ * that are required for owner-based or group-based authorization.\n+ */\n+public final class AuthRuleProcessor {\n+    private final ApiAuthProviders authProvider;\n+\n+    /**\n+     * Constructs a new instance of GraphQL request's auth rule processor.\n+     * @param authProvider the auth providers to authorize requests\n+     */\n+    public AuthRuleProcessor(@NonNull ApiAuthProviders authProvider) {\n+        this.authProvider = Objects.requireNonNull(authProvider);\n+    }\n+\n+    /**\n+     * Decorate given GraphQL request instance with additional variables for owner-based or\n+     * group-based authorization.\n+     *\n+     * This will only work if the request is compliant with the AppSync specifications.\n+     * @param request an instance of {@link GraphQLRequest}.\n+     * @param authType the mode of authorization being used to authorize the request\n+     * @param <R> The type of data contained in the GraphQLResponse expected from this request.\n+     * @return the input request with additional variables that specify model's owner and/or\n+     *          groups\n+     * @throws ApiException If an error is encountered while processing the auth rules associated\n+     *          with the request or if the authorization fails\n+     */\n+    public <R> GraphQLRequest<R> process(", "originalCommit": "9c572796c62f7741c486f7632d28c4706ac78a6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3905b11e827bee4e39965f99f8f662d71dd2dbe4", "url": "https://github.com/aws-amplify/amplify-android/commit/3905b11e827bee4e39965f99f8f662d71dd2dbe4", "message": "chore(aws-api): move owner-based auth logic out of plugin", "committedDate": "2020-10-28T21:29:58Z", "type": "commit"}, {"oid": "3905b11e827bee4e39965f99f8f662d71dd2dbe4", "url": "https://github.com/aws-amplify/amplify-android/commit/3905b11e827bee4e39965f99f8f662d71dd2dbe4", "message": "chore(aws-api): move owner-based auth logic out of plugin", "committedDate": "2020-10-28T21:29:58Z", "type": "forcePushed"}, {"oid": "cc21ee58dc84ad42469867c1253bdcb0dbef90dc", "url": "https://github.com/aws-amplify/amplify-android/commit/cc21ee58dc84ad42469867c1253bdcb0dbef90dc", "message": "refactor to support custom group claim", "committedDate": "2020-10-28T21:48:12Z", "type": "commit"}, {"oid": "4288ea4548e9789d7f385bfbe72846d93a1984ec", "url": "https://github.com/aws-amplify/amplify-android/commit/4288ea4548e9789d7f385bfbe72846d93a1984ec", "message": "address pr comments", "committedDate": "2020-10-28T21:53:19Z", "type": "commit"}, {"oid": "397a86c2edc49ba0bf954efbb861f3180b56edd6", "url": "https://github.com/aws-amplify/amplify-android/commit/397a86c2edc49ba0bf954efbb861f3180b56edd6", "message": "give more detailed error", "committedDate": "2020-10-28T22:13:47Z", "type": "commit"}, {"oid": "17b14e0b4cae2614203ea71eca9039800eca6688", "url": "https://github.com/aws-amplify/amplify-android/commit/17b14e0b4cae2614203ea71eca9039800eca6688", "message": "minor fixup on setting fake token payload", "committedDate": "2020-10-29T02:30:30Z", "type": "commit"}, {"oid": "f8b9384c00e2f1e9e817a5c22dc2e94a5ab88220", "url": "https://github.com/aws-amplify/amplify-android/commit/f8b9384c00e2f1e9e817a5c22dc2e94a5ab88220", "message": "unit-test auth rule request decorator", "committedDate": "2020-10-29T02:30:48Z", "type": "commit"}]}