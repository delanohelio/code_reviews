{"pr_number": 6778, "pr_title": "Ensure that all dangling consumers are cleaned up during failures", "pr_author": "srkukarni", "pr_createdAt": "2020-04-20T16:00:27Z", "pr_url": "https://github.com/apache/pulsar/pull/6778", "timeline": [{"oid": "c454d6287e631b446da85c3ad8629b06a3a555c6", "url": "https://github.com/apache/pulsar/commit/c454d6287e631b446da85c3ad8629b06a3a555c6", "message": "Ensure that all dangling consumers are cleaned up during failures", "committedDate": "2020-04-20T15:58:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNjE3MA==", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r411506170", "body": "The assignment is not needed, the builder would update in-place", "bodyText": "The assignment is not needed, the builder would update in-place", "bodyHTML": "<p dir=\"auto\">The assignment is not needed, the builder would update in-place</p>", "author": "merlimat", "createdAt": "2020-04-20T16:11:31Z", "path": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java", "diffHunk": "@@ -80,17 +80,17 @@ public void open(Map<String, Object> config, SourceContext sourceContext) throws\n                     .messageListener(this);\n \n             if (conf.isRegexPattern) {\n-                cb.topicsPattern(topic);\n+                cb = cb.topicsPattern(topic);", "originalCommit": "c454d6287e631b446da85c3ad8629b06a3a555c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwMjk2Mw==", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r411602963", "bodyText": "This is needed for test, since otherwise the mock would return null", "author": "srkukarni", "createdAt": "2020-04-20T18:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNjE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNzIzOQ==", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r411507239", "body": "This could be simplified into:\r\n```suggestion\r\n            Consumer<T> consumer = cb.subscribe();\r\n```\r\n\r\nIn any case, I think we should be catching any exception thrown over the loop and close down all the consumers that were already created and added to the list.", "bodyText": "This could be simplified into:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Consumer<T> consumer = cb.subscribeAsync().join();\n          \n          \n            \n                        Consumer<T> consumer = cb.subscribe();\n          \n      \n    \n    \n  \n\nIn any case, I think we should be catching any exception thrown over the loop and close down all the consumers that were already created and added to the list.", "bodyHTML": "<p dir=\"auto\">This could be simplified into:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"105\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">Consumer&lt;<span class=\"pl-smi\">T</span>&gt;</span> consumer <span class=\"pl-k\">=</span> cb<span class=\"pl-k\">.</span><span class=\"x x-first\">subscribeAsync()</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">join</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"105\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">Consumer&lt;<span class=\"pl-smi\">T</span>&gt;</span> consumer <span class=\"pl-k\">=</span> cb<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">subscribe</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">In any case, I think we should be catching any exception thrown over the loop and close down all the consumers that were already created and added to the list.</p>", "author": "merlimat", "createdAt": "2020-04-20T16:12:58Z", "path": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java", "diffHunk": "@@ -99,11 +99,12 @@ public void open(Map<String, Object> config, SourceContext sourceContext) throws\n                 if (pulsarSourceConfig.getDeadLetterTopic() != null && !pulsarSourceConfig.getDeadLetterTopic().isEmpty()) {\n                     deadLetterPolicyBuilder.deadLetterTopic(pulsarSourceConfig.getDeadLetterTopic());\n                 }\n-                cb.deadLetterPolicy(deadLetterPolicyBuilder.build());\n+                cb = cb.deadLetterPolicy(deadLetterPolicyBuilder.build());\n             }\n \n-            return cb.subscribeAsync();\n-        }).collect(Collectors.toList()).stream().map(CompletableFuture::join).collect(Collectors.toList());\n+            Consumer<T> consumer = cb.subscribeAsync().join();", "originalCommit": "c454d6287e631b446da85c3ad8629b06a3a555c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwMzczMQ==", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r411603731", "bodyText": "The current philosophy is that all cleaning up logic is inside the close which will get called as soon as there is an error. Shouldn't that suffice?", "author": "srkukarni", "createdAt": "2020-04-20T18:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNzIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU5OTgzOA==", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r412599838", "bodyText": "The client close? What wouldn't work when running in the thread mode, since the PulsarClient is shared.", "author": "merlimat", "createdAt": "2020-04-22T01:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNzIzOQ=="}], "type": "inlineReview"}]}