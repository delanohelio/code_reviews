{"pr_number": 1333, "pr_title": "[#1210] Throws AxonException for concurrent Aggregate creation", "pr_author": "lfgcampos", "pr_createdAt": "2020-01-30T12:22:36Z", "pr_url": "https://github.com/AxonFramework/AxonFramework/pull/1333", "timeline": [{"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5", "url": "https://github.com/AxonFramework/AxonFramework/commit/d541502e33d54dd22c010793c66c8a39c7e25fd5", "message": "Throws AggregateAlreadyExistsException when an Aggregate is created with an ID for which there is already an Aggregate", "committedDate": "2020-01-30T12:17:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk0OTkyNA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r372949924", "body": "Awww, this is so nice, javadoc on private method. But you're missing doc for parameter :P", "bodyText": "Awww, this is so nice, javadoc on private method. But you're missing doc for parameter :P", "bodyHTML": "<p dir=\"auto\">Awww, this is so nice, javadoc on private method. But you're missing doc for parameter :P</p>", "author": "m1l4n54v1c", "createdAt": "2020-01-30T13:36:03Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "diffHunk": "@@ -106,20 +112,51 @@ public void storeSnapshot(DomainEventMessage<?> snapshot) {\n      * @param failedEvent The EventMessage that could not be persisted\n      */\n     protected void handlePersistenceException(Exception exception, EventMessage<?> failedEvent) {\n-        String eventDescription;\n-        if (failedEvent instanceof DomainEventMessage<?>) {\n-            DomainEventMessage<?> failedDomainEvent = (DomainEventMessage<?>) failedEvent;\n-            eventDescription =\n-                    format(\"An event for aggregate [%s] at sequence [%d]\", failedDomainEvent.getAggregateIdentifier(),\n-                           failedDomainEvent.getSequenceNumber());\n-        } else {\n-            eventDescription = format(\"An event with identifier [%s]\", failedEvent.getIdentifier());\n-        }\n+        String eventDescription = buildExceptionMessage(failedEvent);\n         if (persistenceExceptionResolver != null && persistenceExceptionResolver.isDuplicateKeyViolation(exception)) {\n-            throw new ConcurrencyException(eventDescription + \" was already inserted\", exception);\n+            if (isFirstDomainEvent(failedEvent)) {\n+                throw new AggregateAlreadyExistsException(eventDescription, exception);\n+            }\n+            throw new ConcurrencyException(eventDescription, exception);\n         } else {\n-            throw new EventStoreException(eventDescription + \" could not be persisted\", exception);\n+            throw new EventStoreException(eventDescription, exception);\n+        }\n+    }\n+\n+    /**\n+     * Check whether or not this is the first event, which means we are trying to create the aggregate.\n+     *\n+     * @param failedEvent the event to be checked\n+     * @return true in case of first event, false otherwise\n+     */\n+    private boolean isFirstDomainEvent(EventMessage failedEvent) {\n+        if (failedEvent instanceof DomainEventMessage<?>) {\n+            return ((DomainEventMessage) failedEvent).getSequenceNumber() == 0L;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Build an exception message based on an EventMessage.\n+     *\n+     * @param failedEvent\n+     * @return the created exception message\n+     */\n+    private String buildExceptionMessage(EventMessage failedEvent) {", "originalCommit": "d541502e33d54dd22c010793c66c8a39c7e25fd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3ODAxMw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373378013", "body": "```suggestion\r\n     * Check whether or not this is the first event, which means we tried to create an aggregate through the given {@code failedEvent}.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Check whether or not this is the first event, which means we are trying to create the aggregate.\n          \n          \n            \n                 * Check whether or not this is the first event, which means we tried to create an aggregate through the given {@code failedEvent}.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Check</span> whether or not <span class=\"pl-c1\">this</span> is the first event, which means we <span class=\"x x-first x-last\">are trying </span>to create <span class=\"x x-first x-last\">the</span> aggregate.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Check</span> whether or not <span class=\"pl-c1\">this</span> is the first event, which means we <span class=\"x x-first x-last\">tried </span>to create <span class=\"x x-first x-last\">an</span> aggregate<span class=\"x x-first\"> through the given {</span><span class=\"pl-k x\">@code</span><span class=\"x x-last\"> failedEvent}</span><span class=\"pl-c1\">.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "smcvb", "createdAt": "2020-01-31T09:10:08Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "diffHunk": "@@ -106,20 +112,51 @@ public void storeSnapshot(DomainEventMessage<?> snapshot) {\n      * @param failedEvent The EventMessage that could not be persisted\n      */\n     protected void handlePersistenceException(Exception exception, EventMessage<?> failedEvent) {\n-        String eventDescription;\n-        if (failedEvent instanceof DomainEventMessage<?>) {\n-            DomainEventMessage<?> failedDomainEvent = (DomainEventMessage<?>) failedEvent;\n-            eventDescription =\n-                    format(\"An event for aggregate [%s] at sequence [%d]\", failedDomainEvent.getAggregateIdentifier(),\n-                           failedDomainEvent.getSequenceNumber());\n-        } else {\n-            eventDescription = format(\"An event with identifier [%s]\", failedEvent.getIdentifier());\n-        }\n+        String eventDescription = buildExceptionMessage(failedEvent);\n         if (persistenceExceptionResolver != null && persistenceExceptionResolver.isDuplicateKeyViolation(exception)) {\n-            throw new ConcurrencyException(eventDescription + \" was already inserted\", exception);\n+            if (isFirstDomainEvent(failedEvent)) {\n+                throw new AggregateAlreadyExistsException(eventDescription, exception);\n+            }\n+            throw new ConcurrencyException(eventDescription, exception);\n         } else {\n-            throw new EventStoreException(eventDescription + \" could not be persisted\", exception);\n+            throw new EventStoreException(eventDescription, exception);\n+        }\n+    }\n+\n+    /**\n+     * Check whether or not this is the first event, which means we are trying to create the aggregate.", "originalCommit": "d541502e33d54dd22c010793c66c8a39c7e25fd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3ODY2Nw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373378667", "body": "```suggestion\r\n    public void testUniqueKeyConstraintOnFirstEventIdentifierThrowsAggregateIdentifierAlreadyExistsException() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testUniqueKeyConstraintOnFirstEventIdentifier() {\n          \n          \n            \n                public void testUniqueKeyConstraintOnFirstEventIdentifierThrowsAggregateIdentifierAlreadyExistsException() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">testUniqueKeyConstraintOnFirstEventIdentifier</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">testUniqueKeyConstraintOnFirstEventIdentifierThrowsAggregateIdentifierAlreadyExistsException</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "smcvb", "createdAt": "2020-01-31T09:11:41Z", "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngineTest.java", "diffHunk": "@@ -44,12 +45,21 @@\n \n     private AbstractEventStorageEngine testSubject;\n \n+    @DirtiesContext\n+    @Test\n+    public void testUniqueKeyConstraintOnFirstEventIdentifier() {", "originalCommit": "d541502e33d54dd22c010793c66c8a39c7e25fd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MTU1OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373381559", "body": "Darn, of course, an aggregate's  uniqueness is guaranteed through the aggregate id and sequence number, meaning that the aggregate type does not matter at all. Hence, the exception message (which I suggested...) which adds the aggregate type is incorrect since you cannot be certain the event you are inserting is for the same aggregate type. \r\n\r\nI'll suggest a different message in the previous file, sorry for the inconvenience.", "bodyText": "Darn, of course, an aggregate's  uniqueness is guaranteed through the aggregate id and sequence number, meaning that the aggregate type does not matter at all. Hence, the exception message (which I suggested...) which adds the aggregate type is incorrect since you cannot be certain the event you are inserting is for the same aggregate type.\nI'll suggest a different message in the previous file, sorry for the inconvenience.", "bodyHTML": "<p dir=\"auto\">Darn, of course, an aggregate's  uniqueness is guaranteed through the aggregate id and sequence number, meaning that the aggregate type does not matter at all. Hence, the exception message (which I suggested...) which adds the aggregate type is incorrect since you cannot be certain the event you are inserting is for the same aggregate type.</p>\n<p dir=\"auto\">I'll suggest a different message in the previous file, sorry for the inconvenience.</p>", "author": "smcvb", "createdAt": "2020-01-31T09:18:33Z", "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngineTest.java", "diffHunk": "@@ -44,12 +45,21 @@\n \n     private AbstractEventStorageEngine testSubject;\n \n+    @DirtiesContext\n+    @Test\n+    public void testUniqueKeyConstraintOnFirstEventIdentifier() {", "originalCommit": "d541502e33d54dd22c010793c66c8a39c7e25fd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MzA3OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373383079", "bodyText": "This also means the exception should be named slightly different, as it's not the aggregate which already exists, it's the aggregate identifier.", "author": "smcvb", "createdAt": "2020-01-31T09:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MTU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MjQ5Mw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373382493", "body": "```suggestion\r\n            eventDescription = format(\"Cannot reuse aggregate identifier [%s] to create aggregate [%s] since identifiers need to be unique.\",\r\n```\r\n\r\nThis also means the parameters to the `format()` method should be switched by the way.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        eventDescription = format(\"An aggregate of type [%s] with id [%s] was already created.\",\n          \n          \n            \n                        eventDescription = format(\"Cannot reuse aggregate identifier [%s] to create aggregate [%s] since identifiers need to be unique.\",\n          \n      \n    \n    \n  \n\nThis also means the parameters to the format() method should be switched by the way.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            eventDescription <span class=\"pl-k\">=</span> format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">An </span>aggregate <span class=\"x x-first x-last\">of type </span>[%s] <span class=\"x x-first x-last\">with id </span>[%s] <span class=\"x x-first x-last\">was already created</span>.<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            eventDescription <span class=\"pl-k\">=</span> format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Cannot reuse </span>aggregate <span class=\"x x-first x-last\">identifier </span>[%s] <span class=\"x x-first x-last\">to create aggregate </span>[%s] <span class=\"x x-first x-last\">since identifiers need to be unique</span>.<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">This also means the parameters to the <code>format()</code> method should be switched by the way.</p>", "author": "smcvb", "createdAt": "2020-01-31T09:20:54Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "diffHunk": "@@ -106,20 +112,51 @@ public void storeSnapshot(DomainEventMessage<?> snapshot) {\n      * @param failedEvent The EventMessage that could not be persisted\n      */\n     protected void handlePersistenceException(Exception exception, EventMessage<?> failedEvent) {\n-        String eventDescription;\n-        if (failedEvent instanceof DomainEventMessage<?>) {\n-            DomainEventMessage<?> failedDomainEvent = (DomainEventMessage<?>) failedEvent;\n-            eventDescription =\n-                    format(\"An event for aggregate [%s] at sequence [%d]\", failedDomainEvent.getAggregateIdentifier(),\n-                           failedDomainEvent.getSequenceNumber());\n-        } else {\n-            eventDescription = format(\"An event with identifier [%s]\", failedEvent.getIdentifier());\n-        }\n+        String eventDescription = buildExceptionMessage(failedEvent);\n         if (persistenceExceptionResolver != null && persistenceExceptionResolver.isDuplicateKeyViolation(exception)) {\n-            throw new ConcurrencyException(eventDescription + \" was already inserted\", exception);\n+            if (isFirstDomainEvent(failedEvent)) {\n+                throw new AggregateAlreadyExistsException(eventDescription, exception);\n+            }\n+            throw new ConcurrencyException(eventDescription, exception);\n         } else {\n-            throw new EventStoreException(eventDescription + \" could not be persisted\", exception);\n+            throw new EventStoreException(eventDescription, exception);\n+        }\n+    }\n+\n+    /**\n+     * Check whether or not this is the first event, which means we are trying to create the aggregate.\n+     *\n+     * @param failedEvent the event to be checked\n+     * @return true in case of first event, false otherwise\n+     */\n+    private boolean isFirstDomainEvent(EventMessage failedEvent) {\n+        if (failedEvent instanceof DomainEventMessage<?>) {\n+            return ((DomainEventMessage) failedEvent).getSequenceNumber() == 0L;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Build an exception message based on an EventMessage.\n+     *\n+     * @param failedEvent\n+     * @return the created exception message\n+     */\n+    private String buildExceptionMessage(EventMessage failedEvent) {\n+        String eventDescription = format(\"An event with identifier [%s] could not be persisted\",\n+                                         failedEvent.getIdentifier());\n+        if (isFirstDomainEvent(failedEvent)) {\n+            DomainEventMessage failedDomainEvent = (DomainEventMessage) failedEvent;\n+            eventDescription = format(\"An aggregate of type [%s] with id [%s] was already created.\",", "originalCommit": "d541502e33d54dd22c010793c66c8a39c7e25fd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MzIyMA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373383220", "body": "I think we should rename the exception to `AggregateIdentifierAlreadyExistsException`", "bodyText": "I think we should rename the exception to AggregateIdentifierAlreadyExistsException", "bodyHTML": "<p dir=\"auto\">I think we should rename the exception to <code>AggregateIdentifierAlreadyExistsException</code></p>", "author": "smcvb", "createdAt": "2020-01-31T09:22:46Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/AggregateAlreadyExistsException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.axonframework.modelling.command;\n+\n+import org.axonframework.common.AxonNonTransientException;\n+\n+/**\n+ * Exception indicating that concurrent access to a repository was detected. Most likely, two threads were creating the\n+ * same aggregate.\n+ *\n+ * @author Lucas Campos\n+ * @since 4.3\n+ */\n+public class AggregateAlreadyExistsException extends AxonNonTransientException {", "originalCommit": "d541502e33d54dd22c010793c66c8a39c7e25fd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MzQ3NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373383474", "bodyText": "I'd also change the javadoc accordingly to be specific it's not about an exact aggregate type which has been duplicated, but purely the identifier which is required to be unique.", "author": "smcvb", "createdAt": "2020-01-31T09:23:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MzIyMA=="}], "type": "inlineReview"}, {"oid": "664ba4a876581cd9af3c867fa4c89a6363a7a5e4", "url": "https://github.com/AxonFramework/AxonFramework/commit/664ba4a876581cd9af3c867fa4c89a6363a7a5e4", "message": "Renamed exception, added missing javadoc and other small changes based on reviews.", "committedDate": "2020-01-31T10:24:17Z", "type": "commit"}, {"oid": "4a04e5f0794a11a6756d26664ebc0b3012776883", "url": "https://github.com/AxonFramework/AxonFramework/commit/4a04e5f0794a11a6756d26664ebc0b3012776883", "message": "Renamed exception and made it just AxonException because of loadOrCreate use case", "committedDate": "2020-02-03T14:05:33Z", "type": "commit"}]}