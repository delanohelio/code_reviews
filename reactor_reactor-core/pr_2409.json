{"pr_number": 2409, "pr_title": "fix #2408 VoidProcessor is now a pure empty sink", "pr_author": "aneveu", "pr_createdAt": "2020-09-29T16:21:29Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2409", "timeline": [{"oid": "108957158cb3d5cf16cf177a26ec8e2b38969ddc", "url": "https://github.com/reactor/reactor-core/commit/108957158cb3d5cf16cf177a26ec8e2b38969ddc", "message": "fix #2408 VoidProcessor becomes a pure empty sink", "committedDate": "2020-09-29T16:19:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3MzIzMw==", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r496873233", "body": "the license header is missing (was also missing in `VoidProcessor.java`... oops!)", "bodyText": "the license header is missing (was also missing in VoidProcessor.java... oops!)", "bodyHTML": "<p dir=\"auto\">the license header is missing (was also missing in <code>VoidProcessor.java</code>... oops!)</p>", "author": "bsideup", "createdAt": "2020-09-29T16:24:20Z", "path": "reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java", "diffHunk": "@@ -1,28 +1,24 @@\n package reactor.core.publisher;", "originalCommit": "108957158cb3d5cf16cf177a26ec8e2b38969ddc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3MzU0Ng==", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r496873546", "body": "```suggestion\r\n * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2011-2018 Pivotal Software Inc, All Rights Reserved.\n          \n          \n            \n             * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Copyright</span> (c) <span class=\"pl-c1\">2011</span><span class=\"pl-k\">-</span><span class=\"pl-c1 x x-first\">2018</span><span class=\"x\"> </span><span class=\"pl-smi x\">Pivotal</span><span class=\"x\"> </span><span class=\"pl-smi x\">Software</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">Inc</span>, <span class=\"pl-smi\">All</span> <span class=\"pl-smi\">Rights</span> <span class=\"pl-smi\">Reserved</span>.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Copyright</span> (c) <span class=\"pl-c1\">2011</span><span class=\"pl-k\">-</span><span class=\"pl-smi x x-first\">Present</span><span class=\"x\"> </span><span class=\"pl-smi x\">VMware</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">Inc</span><span class=\"x x-first x-last\">. or its affiliates</span>, <span class=\"pl-smi\">All</span> <span class=\"pl-smi\">Rights</span> <span class=\"pl-smi\">Reserved</span>.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "bsideup", "createdAt": "2020-09-29T16:24:39Z", "path": "reactor-core/src/test/java/reactor/core/publisher/SinkEmptyMulticastTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) 2011-2018 Pivotal Software Inc, All Rights Reserved.", "originalCommit": "108957158cb3d5cf16cf177a26ec8e2b38969ddc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3NTU1OA==", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r496875558", "body": "love it! \ud83d\udcaf ", "bodyText": "love it! \ud83d\udcaf", "bodyHTML": "<p dir=\"auto\">love it! <g-emoji class=\"g-emoji\" alias=\"100\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png\">\ud83d\udcaf</g-emoji></p>", "author": "bsideup", "createdAt": "2020-09-29T16:26:34Z", "path": "reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java", "diffHunk": "@@ -1,28 +1,24 @@\n package reactor.core.publisher;\n \n-import java.time.Duration;\n import java.util.Objects;\n-import java.util.concurrent.CancellationException;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n import java.util.stream.Stream;\n \n import org.reactivestreams.Subscription;\n \n import reactor.core.CoreSubscriber;\n-import reactor.core.Exceptions;\n import reactor.core.Scannable;\n import reactor.core.publisher.Sinks.Emission;\n-import reactor.util.annotation.Nullable;\n import reactor.util.context.Context;\n \n-final class VoidProcessor<T> extends MonoProcessor<T> implements Sinks.One<T> {\n+final class SinkEmptyMulticast<T> extends Mono<T> implements Sinks.Empty<T>, ContextHolder {", "originalCommit": "108957158cb3d5cf16cf177a26ec8e2b38969ddc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3NjkzMw==", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r496876933", "body": "does `RUN_STYLE` make any sense here, actually?", "bodyText": "does RUN_STYLE make any sense here, actually?", "bodyHTML": "<p dir=\"auto\">does <code>RUN_STYLE</code> make any sense here, actually?</p>", "author": "bsideup", "createdAt": "2020-09-29T16:28:31Z", "path": "reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java", "diffHunk": "@@ -317,11 +177,20 @@ public void subscribe(final CoreSubscriber<? super T> actual) {\n \t\treturn Stream.of(subscribers);\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\tif (key == Attr.TERMINATED) return subscribers == TERMINATED;\n+\t\tif (key == Attr.ERROR) return error;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "originalCommit": "108957158cb3d5cf16cf177a26ec8e2b38969ddc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4NjU0NQ==", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r496886545", "bodyText": "indeed, removed in latest commit", "author": "aneveu", "createdAt": "2020-09-29T16:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3NjkzMw=="}], "type": "inlineReview"}, {"oid": "a98e08cfd53a2529329e0c1cd6c4c835c58a68c4", "url": "https://github.com/reactor/reactor-core/commit/a98e08cfd53a2529329e0c1cd6c4c835c58a68c4", "message": "add missing tests", "committedDate": "2020-09-29T16:39:50Z", "type": "commit"}, {"oid": "8c5abcc44cb132a749a6e76f324e7f2ec2eb608e", "url": "https://github.com/reactor/reactor-core/commit/8c5abcc44cb132a749a6e76f324e7f2ec2eb608e", "message": "add missing headers and remove RunStyle attribute from scan", "committedDate": "2020-09-29T16:42:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw==", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497384243", "body": "why not `StepVerifier`?", "bodyText": "why not StepVerifier?", "bodyHTML": "<p dir=\"auto\">why not <code>StepVerifier</code>?</p>", "author": "bsideup", "createdAt": "2020-09-30T09:50:57Z", "path": "reactor-core/src/test/java/reactor/core/publisher/SinkEmptyMulticastTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Subscriber;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Scannable;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+import static org.assertj.core.api.Assertions.*;\n+import static reactor.core.Scannable.Attr.RUN_STYLE;\n+import static reactor.core.Scannable.Attr.RunStyle.SYNC;\n+\n+class SinkEmptyMulticastTest {\n+\n+\t@Test\n+\tvoid currentSubscriberCount() {\n+\t\tSinks.Empty<Integer> sink = new SinkEmptyMulticast<>();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isZero();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isOne();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isEqualTo(2);\n+\t}\n+\n+\t@Test\n+\tvoid currentSubscriberCountReflectsCancellation() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\t\tStepVerifier.create(mp)\n+\t\t\t\t.thenCancel()\n+\t\t\t\t.verify();\n+\n+\t\tassertThat(mp.currentSubscriberCount()).isEqualTo(0);\n+\t}\n+\n+\t@Test\n+\tvoid blockReturnsNullOnTryEmitEmpty() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\n+\t\tSchedulers.parallel().schedule(() -> mp.tryEmitEmpty(), 50L, TimeUnit.MILLISECONDS);\n+\t\tassertThat(mp.block(Duration.ofSeconds(1))).isNull();", "originalCommit": "8c5abcc44cb132a749a6e76f324e7f2ec2eb608e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5Mjg3OA==", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497392878", "bodyText": "this is testing that the behavior of block() is consistent, especially since the processor-specific implementation was removed in the commit.", "author": "simonbasle", "createdAt": "2020-09-30T10:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5ODg0MQ==", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497398841", "bodyText": "perhaps it should be a dedicated test then? Not a big deal but I was first confused to see block() used given that it is an empty processor that should not emit anything, and only then I noticed isNull(), so it is a bit counterintuitive when you read the test :)", "author": "bsideup", "createdAt": "2020-09-30T10:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQxMTkxMw==", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497411913", "bodyText": "test is named blockReturnsNullOnTryEmitEmpty... \ud83d\ude15", "author": "simonbasle", "createdAt": "2020-09-30T10:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQxNjI0Mw==", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497416243", "bodyText": "ooops, sorry, I missed that! Although then we miss tests for \"normal\" subscribe on asMono() :)", "author": "bsideup", "createdAt": "2020-09-30T10:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1NDE2Nw==", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497454167", "bodyText": "ah, yeah we tried to improve the test coverage but that fell through I guess", "author": "simonbasle", "createdAt": "2020-09-30T12:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ4NjA0OA==", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497486048", "bodyText": "test added :)", "author": "aneveu", "createdAt": "2020-09-30T12:55:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw=="}], "type": "inlineReview"}, {"oid": "f5edf8810b719a481bc22595e8dc5fd55d92d05e", "url": "https://github.com/reactor/reactor-core/commit/f5edf8810b719a481bc22595e8dc5fd55d92d05e", "message": "add missing test on regular subscribe", "committedDate": "2020-09-30T12:54:24Z", "type": "commit"}]}