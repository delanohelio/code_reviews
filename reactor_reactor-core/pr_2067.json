{"pr_number": 2067, "pr_title": "fix #2055 Flux#from and Mono#flux apply onAssembly hooks", "pr_author": "simonbasle", "pr_createdAt": "2020-03-09T15:57:20Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2067", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg3MDM4Ng==", "url": "https://github.com/reactor/reactor-core/pull/2067#discussion_r390870386", "body": "WDYT about splitting it into multiple tests (maybe with some parameterization)? \r\nIt will be a bit weird when we break one to not know which one exactly :)", "bodyText": "WDYT about splitting it into multiple tests (maybe with some parameterization)?\nIt will be a bit weird when we break one to not know which one exactly :)", "bodyHTML": "<p dir=\"auto\">WDYT about splitting it into multiple tests (maybe with some parameterization)?<br>\nIt will be a bit weird when we break one to not know which one exactly :)</p>", "author": "bsideup", "createdAt": "2020-03-11T10:20:13Z", "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java", "diffHunk": "@@ -1591,6 +1593,48 @@ public void splitBugEventuallyHappens() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void fluxFromCallsAssemblyHook() {", "originalCommit": "eca636e5a66bcad7211ad9c0cc8e307d13ec1d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkwNjU0OQ==", "url": "https://github.com/reactor/reactor-core/pull/2067#discussion_r390906549", "bodyText": "I could split and do the whole onEachOperator ceremony in multiple shorter tests, but note that we'll know which case breaks exactly thanks to the as description of each assert...", "author": "simonbasle", "createdAt": "2020-03-11T11:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg3MDM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkxNjk2Mw==", "url": "https://github.com/reactor/reactor-core/pull/2067#discussion_r390916963", "bodyText": "btw resetOnEachOperator can to go @AfterTest, so that the test becomes a 2-3 liner\nas is nice, but I have bad memory about debugging sequential tests (at least without soft assertions) \ud83d\ude05", "author": "bsideup", "createdAt": "2020-03-11T11:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg3MDM4Ng=="}], "type": "inlineReview"}, {"oid": "28bebd02482f36161955392ed69c0959f0503da4", "url": "https://github.com/reactor/reactor-core/commit/28bebd02482f36161955392ed69c0959f0503da4", "message": "fix #2055 Flux#from and Mono#flux apply onAssembly hooks + wrap API\n\nThis commit streamlines the from vs wrap semantics of conversions,\nwhere `wrap` is introduced in `Mono` (also as a package private method).\n\nAdditionally the `from` methods delegates a maximum to `wrap`, and the\n`wrap` semantics are exposed in the public API in `Hooks`. This is\nbecause the differentiator is that these methods don't apply hooks,\nwhich makes them potentially valuable in setting up simple assembly\nhooks.\n\nWe also take that commit as an opportunity to improve the lift operators\n`stepName()` method, which delegates to the lifted publisher.", "committedDate": "2020-03-13T15:39:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA5MzI2NA==", "url": "https://github.com/reactor/reactor-core/pull/2067#discussion_r397093264", "body": "```suggestion\r\n\t\tif(source instanceof Fuseable) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif(source instanceof Fuseable){\n          \n          \n            \n            \t\tif(source instanceof Fuseable) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-k\">if</span>(source <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">Fuseable</span>){</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-k\">if</span>(source <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">Fuseable</span>)<span class=\"x x-first x-last\"> </span>{</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "bsideup", "createdAt": "2020-03-24T11:49:56Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "diffHunk": "@@ -4532,6 +4529,57 @@ public String toString() {\n \t\t\t\tonCancel));\n \t}\n \n+\t/**\n+\t * Unchecked wrap of {@link Publisher} as {@link Mono}, supporting {@link Fuseable} sources.\n+\t * When converting a {@link Mono} or {@link Mono Monos} that have been converted to a {@link Flux} and back,\n+\t * the original {@link Mono} is returned unwrapped.\n+\t * Note that this bypasses {@link Hooks#onEachOperator(String, Function) assembly hooks}.\n+\t *\n+\t * @param source the {@link Publisher} to wrap\n+\t * @param enforceMonoContract {@code} true to wrap publishers without assumption about their cardinality\n+\t * (first {@link Subscriber#onNext(Object)} will cancel the source), {@code false} to behave like {@link #fromDirect(Publisher)}.\n+\t * @param <T> input upstream type\n+\t * @return a wrapped {@link Mono}\n+\t */\n+\tstatic <T> Mono<T> wrap(Publisher<T> source, boolean enforceMonoContract) {\n+\t\t//some sources can be considered already assembled monos\n+\t\t//all conversion methods (from, fromDirect, wrap) must accommodate for this\n+\t\tif (source instanceof Mono) {\n+\t\t\treturn (Mono<T>) source;\n+\t\t}\n+\t\tif (source instanceof FluxSourceMono\n+\t\t\t\t|| source instanceof FluxSourceMonoFuseable) {\n+\t\t\tFluxFromMonoOperator<T, T> wrapper = (FluxFromMonoOperator<T,T>) source;\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\tMono<T> extracted = (Mono<T>) wrapper.source;\n+\t\t\treturn extracted;\n+\t\t}\n+\n+\t\t//equivalent to what from used to be, without assembly hooks\n+\t\tif (enforceMonoContract) {\n+\t\t\tif (source instanceof Flux && source instanceof Callable) {\n+\t\t\t\t\t@SuppressWarnings(\"unchecked\") Callable<T> m = (Callable<T>) source;\n+\t\t\t\t\treturn Flux.wrapToMono(m);\n+\t\t\t}\n+\t\t\tif (source instanceof Flux) {\n+\t\t\t\treturn new MonoNext<>((Flux<T>) source);\n+\t\t\t}\n+\t\t\treturn new MonoFromPublisher<>(source);\n+\t\t}\n+\n+\t\t//equivalent to what fromDirect used to be without onAssembly\n+\t\tif(source instanceof Flux && source instanceof Fuseable) {\n+\t\t\treturn new MonoSourceFluxFuseable<>((Flux<T>) source);\n+\t\t}\n+\t\tif (source instanceof Flux) {\n+\t\t\treturn new MonoSourceFlux<>((Flux<T>) source);\n+\t\t}\n+\t\tif(source instanceof Fuseable){", "originalCommit": "28bebd02482f36161955392ed69c0959f0503da4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA5NTMwOA==", "url": "https://github.com/reactor/reactor-core/pull/2067#discussion_r397095308", "body": "May I ask why not parameterized? :)", "bodyText": "May I ask why not parameterized? :)", "bodyHTML": "<p dir=\"auto\">May I ask why not parameterized? :)</p>", "author": "bsideup", "createdAt": "2020-03-24T11:53:45Z", "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/MonoTests.java", "diffHunk": "@@ -304,4 +314,156 @@ public void monoCacheContextHistory() {\n \t\tAssertions.assertThat(cacheHit3).as(\"cacheHit3\").isEqualTo(\"GOOD1\");\n \t\tAssertions.assertThat(contextFillCount).as(\"cacheHit3\").hasValue(4);\n \t}\n+\n+\t@Test\n+\tpublic void monoFromMonoDoesntCallAssemblyHook() {\n+\t\tfinal Mono<Integer> source = Mono.just(1);", "originalCommit": "28bebd02482f36161955392ed69c0959f0503da4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE0Nzc4MQ==", "url": "https://github.com/reactor/reactor-core/pull/2067#discussion_r397147781", "bodyText": "didn't go through the trouble, as splitting the test was enough vs changing the test runner and dealing with the boilerplate of providing params (plus with independent tests the name can reflect the style of source, not the concrete name of the operator used)", "author": "simonbasle", "createdAt": "2020-03-24T13:24:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA5NTMwOA=="}], "type": "inlineReview"}, {"oid": "06c9ec87297aea14723b652aa103d70db5567c04", "url": "https://github.com/reactor/reactor-core/commit/06c9ec87297aea14723b652aa103d70db5567c04", "message": "fix #2055 Flux#from and Mono#flux apply onAssembly hooks + wrap API\n\nThis commit streamlines the from vs wrap semantics of conversions,\nwhere `wrap` is introduced in `Mono` (also as a package private method).\n\nAdditionally the `from` methods delegates a maximum to `wrap`, and the\n`wrap` semantics are exposed in the public API in `Hooks`. This is\nbecause the differentiator is that these methods don't apply hooks,\nwhich makes them potentially valuable in setting up simple assembly\nhooks.\n\nWe also take that commit as an opportunity to improve the lift operators\n`stepName()` method, which delegates to the lifted publisher.", "committedDate": "2020-03-31T18:01:23Z", "type": "commit"}, {"oid": "226abf213a7713ce082ad55e0aa2b96260d9f52c", "url": "https://github.com/reactor/reactor-core/commit/226abf213a7713ce082ad55e0aa2b96260d9f52c", "message": "formatting: add missing space\n\nCo-Authored-By: Sergei Egorov <1050762+bsideup@users.noreply.github.com>", "committedDate": "2020-03-31T18:01:23Z", "type": "commit"}, {"oid": "226abf213a7713ce082ad55e0aa2b96260d9f52c", "url": "https://github.com/reactor/reactor-core/commit/226abf213a7713ce082ad55e0aa2b96260d9f52c", "message": "formatting: add missing space\n\nCo-Authored-By: Sergei Egorov <1050762+bsideup@users.noreply.github.com>", "committedDate": "2020-03-31T18:01:23Z", "type": "forcePushed"}]}