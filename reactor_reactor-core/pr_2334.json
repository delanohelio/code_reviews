{"pr_number": 2334, "pr_title": "fix #2317 Add examples to deprecation notes of processors", "pr_author": "aneveu", "pr_createdAt": "2020-08-17T11:31:14Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2334", "timeline": [{"oid": "201f09887f1f10cc07a2b1c5ad6d34463aa4a248", "url": "https://github.com/reactor/reactor-core/commit/201f09887f1f10cc07a2b1c5ad6d34463aa4a248", "message": "fix #2317 deprecate note with example for processors", "committedDate": "2020-08-17T11:26:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE1NTY4MA==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r472155680", "body": "I think `Sinks.empty()` isn't a valid replacement for `DirectProcessor` since it can only signal error or complete.\r\n\r\nAlthough I am not sure what would be the replacement :D Let me have a look and get back to you...", "bodyText": "I think Sinks.empty() isn't a valid replacement for DirectProcessor since it can only signal error or complete.\nAlthough I am not sure what would be the replacement :D Let me have a look and get back to you...", "bodyHTML": "<p dir=\"auto\">I think <code>Sinks.empty()</code> isn't a valid replacement for <code>DirectProcessor</code> since it can only signal error or complete.</p>\n<p dir=\"auto\">Although I am not sure what would be the replacement :D Let me have a look and get back to you...</p>", "author": "bsideup", "createdAt": "2020-08-18T12:47:36Z", "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -79,7 +79,8 @@\n  * </p>\n  *\n  * @param <T> the input and output value type\n- * @deprecated Prefer clear cut usage of {@link Sinks}, to be removed in 3.5\n+ * @deprecated To be removed in 3.5, prefer clear cut usage of {@link Sinks}:\n+ * <pre>Sinks.empty();</pre> for example.", "originalCommit": "201f09887f1f10cc07a2b1c5ad6d34463aa4a248", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE2NzIyOQ==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r472167229", "bodyText": "I wasn't sure neither, thanks for your help \ud83d\ude05", "author": "aneveu", "createdAt": "2020-08-18T12:59:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE1NTY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIxMDExMQ==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r472210111", "bodyText": "DirectProcessor is Sinks.many().multicast().onBackpressureError()", "author": "simonbasle", "createdAt": "2020-08-18T13:47:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE1NTY4MA=="}], "type": "inlineReview"}, {"oid": "a6a163b4f45de245026dd59b3047eeffb0dadbe4", "url": "https://github.com/reactor/reactor-core/commit/a6a163b4f45de245026dd59b3047eeffb0dadbe4", "message": "fix DirectProcessor following code review", "committedDate": "2020-08-18T13:55:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2ODYwOA==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r472268608", "body": "Consider also mentioning that `EmitterProcessor` was/is blocking on `emitNext`, while with the new API one can use `tryEmitNext` + `while` with `parkNanos` or similar waiting strategy to achieve the same", "bodyText": "Consider also mentioning that EmitterProcessor was/is blocking on emitNext, while with the new API one can use tryEmitNext + while with parkNanos or similar waiting strategy to achieve the same", "bodyHTML": "<p dir=\"auto\">Consider also mentioning that <code>EmitterProcessor</code> was/is blocking on <code>emitNext</code>, while with the new API one can use <code>tryEmitNext</code> + <code>while</code> with <code>parkNanos</code> or similar waiting strategy to achieve the same</p>", "author": "bsideup", "createdAt": "2020-08-18T15:06:01Z", "path": "reactor-core/src/main/java/reactor/core/publisher/EmitterProcessor.java", "diffHunk": "@@ -51,7 +51,8 @@\n  * @param <T> the input and output value type\n  *\n  * @author Stephane Maldini\n- * @deprecated Prefer clear cut usage of {@link Sinks}, to be removed in 3.5\n+ * @deprecated To be removed in 3.5. Prefer clear cut usage of {@link Sinks}:", "originalCommit": "a6a163b4f45de245026dd59b3047eeffb0dadbe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2OTEwOA==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r472269108", "body": "@simonbasle I need your opinion on this one", "bodyText": "@simonbasle I need your opinion on this one", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/simonbasle/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/simonbasle\">@simonbasle</a> I need your opinion on this one</p>", "author": "bsideup", "createdAt": "2020-08-18T15:06:43Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxProcessor.java", "diffHunk": "@@ -226,7 +226,12 @@ public Context currentContext() {\n \t * </ul>\n \t *\n \t * @return a serializing {@link FluxSink}\n-\t * @deprecated Prefer clear cut usage of {@link Sinks}, to be removed in 3.5\n+\t * @deprecated To be removed in 3.5, prefer clear cut usage of {@link Sinks}:\n+\t * <pre>\n+\t *     final Sinks.Many<String> sink = Sinks.many().replay().latest();", "originalCommit": "a6a163b4f45de245026dd59b3047eeffb0dadbe4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzMTY3OA==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r472331678", "bodyText": "since there is no \"flavor\" to the sink method itself (it is driven by the concrete implementation on which it is called), I'd remove the mention of any specific full builder and just say usage of {@code Sinks} through the {@link Sinks#many()} spec (and remove the pre block)", "author": "simonbasle", "createdAt": "2020-08-18T16:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2OTEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzMTc5OA==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r472331798", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "simonbasle", "createdAt": "2020-08-18T16:38:20Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxProcessor.java", "diffHunk": "@@ -252,7 +257,12 @@ public Context currentContext() {\n \t * for the\n \t * available strategies\n \t * @return a serializing {@link FluxSink}\n-\t * @deprecated Prefer clear cut usage of {@link Sinks}, to be removed in 3.5\n+\t * @deprecated To be removed in 3.5, prefer clear cut usage of {@link Sinks}:", "originalCommit": "a6a163b4f45de245026dd59b3047eeffb0dadbe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzMjM3NA==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r472332374", "body": "consider just mentioning `Sinks.many().unicast()` rather than giving a more precise example?", "bodyText": "consider just mentioning Sinks.many().unicast() rather than giving a more precise example?", "bodyHTML": "<p dir=\"auto\">consider just mentioning <code>Sinks.many().unicast()</code> rather than giving a more precise example?</p>", "author": "simonbasle", "createdAt": "2020-08-18T16:39:13Z", "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastProcessor.java", "diffHunk": "@@ -84,7 +84,8 @@\n  * </p>\n  *\n  * @param <T> the input and output type\n- * @deprecated Prefer clear cut usage of {@link Sinks}, to be removed in 3.5\n+ * @deprecated to be removed in 3.5, prefer clear cut usage of {@link Sinks}:\n+ * <pre>Sinks.many().unicast().onBackpressureBuffer()</pre> for example.", "originalCommit": "a6a163b4f45de245026dd59b3047eeffb0dadbe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzMjgyOA==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r472332828", "body": "consider just mentioning `Sinks.many().replay()` rather than giving a more precise example?", "bodyText": "consider just mentioning Sinks.many().replay() rather than giving a more precise example?", "bodyHTML": "<p dir=\"auto\">consider just mentioning <code>Sinks.many().replay()</code> rather than giving a more precise example?</p>", "author": "simonbasle", "createdAt": "2020-08-18T16:39:57Z", "path": "reactor-core/src/main/java/reactor/core/publisher/ReplayProcessor.java", "diffHunk": "@@ -48,7 +48,8 @@\n  * <p>\n  *\n  * @param <T> the value type\n- * @deprecated Prefer clear cut usage of {@link Sinks}, to be removed in 3.5\n+ * @deprecated To be removed in 3.5, prefer clear cut usage of {@link Sinks}:\n+ * <pre>Sinks.many().replay().all()</pre> or <pre>Sinks.many().replay().latest()</pre> for example.", "originalCommit": "a6a163b4f45de245026dd59b3047eeffb0dadbe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzMzcyNA==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r472333724", "body": "rather than \"for example\": `variations of Sinks.many().multicast().onBackpressureBuffer()` (since the only other alternative IIRC is `onBackpressureError()`, which is the `DirectProcessor`)", "bodyText": "rather than \"for example\": variations of Sinks.many().multicast().onBackpressureBuffer() (since the only other alternative IIRC is onBackpressureError(), which is the DirectProcessor)", "bodyHTML": "<p dir=\"auto\">rather than \"for example\": <code>variations of Sinks.many().multicast().onBackpressureBuffer()</code> (since the only other alternative IIRC is <code>onBackpressureError()</code>, which is the <code>DirectProcessor</code>)</p>", "author": "simonbasle", "createdAt": "2020-08-18T16:41:14Z", "path": "reactor-core/src/main/java/reactor/core/publisher/EmitterProcessor.java", "diffHunk": "@@ -51,7 +51,8 @@\n  * @param <T> the input and output value type\n  *\n  * @author Stephane Maldini\n- * @deprecated Prefer clear cut usage of {@link Sinks}, to be removed in 3.5\n+ * @deprecated To be removed in 3.5. Prefer clear cut usage of {@link Sinks}:\n+ * <pre>Sinks.many().multicast().onBackpressureBuffer();</pre> for example.", "originalCommit": "a6a163b4f45de245026dd59b3047eeffb0dadbe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNDA4Nw==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r472334087", "body": "remove the `for example`, `onBackpressureError()` is the one and only way to get a `DirectProcessor`.", "bodyText": "remove the for example, onBackpressureError() is the one and only way to get a DirectProcessor.", "bodyHTML": "<p dir=\"auto\">remove the <code>for example</code>, <code>onBackpressureError()</code> is the one and only way to get a <code>DirectProcessor</code>.</p>", "author": "simonbasle", "createdAt": "2020-08-18T16:41:44Z", "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -79,7 +79,8 @@\n  * </p>\n  *\n  * @param <T> the input and output value type\n- * @deprecated Prefer clear cut usage of {@link Sinks}, to be removed in 3.5\n+ * @deprecated To be removed in 3.5, prefer clear cut usage of {@link Sinks}:\n+ * <pre>Sinks.many().multicast().onBackpressureError();</pre> for example.", "originalCommit": "a6a163b4f45de245026dd59b3047eeffb0dadbe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a9bf71dbc3e6532905f31d88aa6f04c34079bd9f", "url": "https://github.com/reactor/reactor-core/commit/a9bf71dbc3e6532905f31d88aa6f04c34079bd9f", "message": "code review", "committedDate": "2020-08-19T13:07:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4MDQ5OA==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r473780498", "body": "huh?", "bodyText": "huh?", "bodyHTML": "<p dir=\"auto\">huh?</p>", "author": "bsideup", "createdAt": "2020-08-20T08:52:01Z", "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -59,7 +59,7 @@\n  * </p>\n  *\n  * </br>\n- * </br>\n+ * </br>`", "originalCommit": "a9bf71dbc3e6532905f31d88aa6f04c34079bd9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1NTgzMQ==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r474055831", "bodyText": "cat contribution \ud83d\ude3c", "author": "aneveu", "createdAt": "2020-08-20T15:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4MDQ5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4MzQ2NA==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r473783464", "body": "`xWhile`? :)\r\n\r\nWDYT about something like:\r\n```suggestion\r\n * with the {@link Sinks} API by calling {@link Sinks#many()#tryEmitNext(T)} and retrying, e.g.:\r\n * <pre><code>while (sink.tryEmitNext(v).hasFailed()) LockSupport.parkNanos(10);</code></pre>\r\n```", "bodyText": "xWhile? :)\nWDYT about something like:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * with the {@link Sinks} API by calling {@link Sinks#many()#tryEmitNext(T)} and one of the xWhile method.\n          \n          \n            \n             * with the {@link Sinks} API by calling {@link Sinks#many()#tryEmitNext(T)} and retrying, e.g.:\n          \n          \n            \n             * <pre><code>while (sink.tryEmitNext(v).hasFailed()) LockSupport.parkNanos(10);</code></pre>", "bodyHTML": "<p dir=\"auto\"><code>xWhile</code>? :)</p>\n<p dir=\"auto\">WDYT about something like:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> with the {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">Sinks</span>} <span class=\"pl-c1\">API</span> by calling {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">Sinks</span>#many()#tryEmitNext(<span class=\"pl-smi\">T</span>)} and <span class=\"x x-first x-last\">one of the xWhile method.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> with the {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">Sinks</span>} <span class=\"pl-c1\">API</span> by calling {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">Sinks</span>#many()#tryEmitNext(<span class=\"pl-smi\">T</span>)} and <span class=\"x x-first\">retrying, e</span><span class=\"pl-k x\">.</span><span class=\"x\">g</span><span class=\"pl-k x\">.</span><span class=\"pl-k x x-last\">:</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span>pre<span class=\"pl-k\">&gt;&lt;</span>code<span class=\"pl-k\">&gt;</span><span class=\"pl-k\">while</span> (sink<span class=\"pl-k\">.</span>tryEmitNext(v)<span class=\"pl-k\">.</span>hasFailed()) <span class=\"pl-smi\">LockSupport</span><span class=\"pl-k\">.</span>parkNanos(<span class=\"pl-c1\">10</span>);<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>code<span class=\"pl-k\">&gt;&lt;</span><span class=\"pl-k\">/</span>pre<span class=\"pl-k\">&gt;</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "bsideup", "createdAt": "2020-08-20T08:55:15Z", "path": "reactor-core/src/main/java/reactor/core/publisher/EmitterProcessor.java", "diffHunk": "@@ -51,7 +52,11 @@\n  * @param <T> the input and output value type\n  *\n  * @author Stephane Maldini\n- * @deprecated Prefer clear cut usage of {@link Sinks}, to be removed in 3.5\n+ * @deprecated To be removed in 3.5. Prefer clear cut usage of {@link Sinks} through\n+ * variations of <pre><code>Sinks.many().multicast().onBackpressureBuffer()</code></pre>.\n+ *\n+ * This processor is blocking on {@link EmitterProcessor#emitNext(T)}. This behaviour can be implemented\n+ * with the {@link Sinks} API by calling {@link Sinks#many()#tryEmitNext(T)} and one of the xWhile method.", "originalCommit": "a9bf71dbc3e6532905f31d88aa6f04c34079bd9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1MjkzMw==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r474052933", "bodyText": "yeeah I wasn't sure about how to express it, thanks for your suggestion!", "author": "aneveu", "createdAt": "2020-08-20T15:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4MzQ2NA=="}], "type": "inlineReview"}, {"oid": "5b8dd7b69a28f11d7e2dfadda7eca00ca86c3c00", "url": "https://github.com/reactor/reactor-core/commit/5b8dd7b69a28f11d7e2dfadda7eca00ca86c3c00", "message": "fix DirectProcessor documentation following latest code review", "committedDate": "2020-08-20T15:08:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3MTE0Nw==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r481071147", "body": "nitpick: generally in javadocs oneliners like that are added through a `{@code xxx}` tag rather than html `<pre><code>`.", "bodyText": "nitpick: generally in javadocs oneliners like that are added through a {@code xxx} tag rather than html <pre><code>.", "bodyHTML": "<p dir=\"auto\">nitpick: generally in javadocs oneliners like that are added through a <code>{@code xxx}</code> tag rather than html <code>&lt;pre&gt;&lt;code&gt;</code>.</p>", "author": "simonbasle", "createdAt": "2020-09-01T11:35:28Z", "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -80,7 +80,7 @@\n  *\n  * @param <T> the input and output value type\n  * @deprecated To be removed in 3.5, prefer clear cut usage of {@link Sinks}:\n- * <pre>Sinks.many().multicast().onBackpressureError();</pre> for example.\n+ * <pre><code>Sinks.many().multicast().onBackpressureError();</code></pre>.", "originalCommit": "5b8dd7b69a28f11d7e2dfadda7eca00ca86c3c00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4NTQ1NA==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r482885454", "bodyText": "actually, now that I've looked into the actual rendering the blocks make it add a newline, which is kinda good. I'll just edit the PR to remove the dot at the end (which also causes a newline, less desirable)", "author": "simonbasle", "createdAt": "2020-09-03T10:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3MTE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3Mjc3Nw==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r481072777", "body": "this one I'd keep as a `<pre><code>` indeed, but maybe add newlines and indentation for readability?", "bodyText": "this one I'd keep as a <pre><code> indeed, but maybe add newlines and indentation for readability?", "bodyHTML": "<p dir=\"auto\">this one I'd keep as a <code>&lt;pre&gt;&lt;code&gt;</code> indeed, but maybe add newlines and indentation for readability?</p>", "author": "simonbasle", "createdAt": "2020-09-01T11:38:44Z", "path": "reactor-core/src/main/java/reactor/core/publisher/EmitterProcessor.java", "diffHunk": "@@ -51,7 +52,14 @@\n  * @param <T> the input and output value type\n  *\n  * @author Stephane Maldini\n- * @deprecated Prefer clear cut usage of {@link Sinks}, to be removed in 3.5\n+ * @deprecated To be removed in 3.5. Prefer clear cut usage of {@link Sinks} through\n+ * variations of <pre><code>Sinks.many().multicast().onBackpressureBuffer()</code></pre>.\n+ *\n+ * This processor is blocking on {@link EmitterProcessor#emitNext(T)}. This behaviour can be implemented\n+ * with the {@link Sinks} API by calling {@link Sinks#many()#tryEmitNext(T)} and retrying, e.g.:\n+ *  <pre><code>", "originalCommit": "5b8dd7b69a28f11d7e2dfadda7eca00ca86c3c00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4OTc5Nw==", "url": "https://github.com/reactor/reactor-core/pull/2334#discussion_r482889797", "bodyText": "working on it. using <pre>{@code ...}</pre> seems to be the best solution here (see https://reflectoring.io/howto-format-code-snippets-in-javadoc/)", "author": "simonbasle", "createdAt": "2020-09-03T10:56:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3Mjc3Nw=="}], "type": "inlineReview"}, {"oid": "b3bce7bfb949c73ac3443c03929ceabd513ad156", "url": "https://github.com/reactor/reactor-core/commit/b3bce7bfb949c73ac3443c03929ceabd513ad156", "message": "Polish code snippets and add links as well", "committedDate": "2020-09-03T12:01:36Z", "type": "commit"}]}