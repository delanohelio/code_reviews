{"pr_number": 2898, "pr_title": "Core - Duplicate candidates", "pr_author": "HejdaJakub", "pr_createdAt": "2020-09-11T11:31:34Z", "pr_url": "https://github.com/CESNET/perun/pull/2898", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NDQ4Ng==", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486994486", "body": "```suggestion\r\n\t\t\t\tif (!allUsersIds.contains(userId)) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tif(! allUsersIds.contains(userId)) {\n          \n          \n            \n            \t\t\t\tif (!allUsersIds.contains(userId)) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-k\">if</span><span class=\"x x-first\">(</span><span class=\"pl-k x\">!</span><span class=\"x x-last\"> </span>allUsersIds<span class=\"pl-k\">.</span>contains(userId)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t<span class=\"pl-k\">if</span><span class=\"x x-first\"> (</span><span class=\"pl-k x x-last\">!</span>allUsersIds<span class=\"pl-k\">.</span>contains(userId)) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Vojtech-Sassmann", "createdAt": "2020-09-11T11:53:37Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/VosManagerBlImpl.java", "diffHunk": "@@ -753,24 +753,33 @@ private void removeSponsorFromSponsoredMembers(PerunSession sess, Vo vo, User us\n \t * @return list of MemberCandidates for given RichUsers, group and candidates\n \t * @throws InternalErrorException internal error\n \t */\n-\tprivate List<MemberCandidate> createMemberCandidates(PerunSession sess, List<RichUser> users, Vo vo, Group group, List<Candidate> candidates, List<String> attrNames) {\n+\tpublic List<MemberCandidate> createMemberCandidates(PerunSession sess, List<RichUser> users, Vo vo, Group group, List<Candidate> candidates, List<String> attrNames) {\n \t\tList<MemberCandidate> memberCandidates = new ArrayList<>();\n+\t\tSet<Integer> allUsersIds = new HashSet<>();\n+\t\tint userId;\n \n \t\t// try to find matching RichUser for candidates\n \t\tfor (Candidate candidate : candidates) {\n \t\t\tMemberCandidate mc = new MemberCandidate();\n-\t\t\tmc.setCandidate(candidate);\n \n \t\t\ttry {\n \t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByUserExtSources(sess, candidate.getUserExtSources());\n-\t\t\t\tRichUser richUser = getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(sess, user, attrNames);\n+\t\t\t\tuserId = user.getId();\n+\n+\t\t\t\t// check if user already exists in the list\n+\t\t\t\tif(! allUsersIds.contains(userId)) {", "originalCommit": "fed8b6489c1d64670d131fd085b17012ee76fffd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NDkwOA==", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486994908", "body": "Please, try to keep the code as much formatted as possible. Try to avoid these empty lines.", "bodyText": "Please, try to keep the code as much formatted as possible. Try to avoid these empty lines.", "bodyHTML": "<p dir=\"auto\">Please, try to keep the code as much formatted as possible. Try to avoid these empty lines.</p>", "author": "Vojtech-Sassmann", "createdAt": "2020-09-11T11:54:36Z", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+", "originalCommit": "fed8b6489c1d64670d131fd085b17012ee76fffd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NDk2OA==", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486994968", "body": "Same here.", "bodyText": "Same here.", "bodyHTML": "<p dir=\"auto\">Same here.</p>", "author": "Vojtech-Sassmann", "createdAt": "2020-09-11T11:54:43Z", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsOnlyOneMemberCandidateForDuplicateUsers() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(candidate2.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+", "originalCommit": "fed8b6489c1d64670d131fd085b17012ee76fffd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTA2NA==", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486995064", "body": "Same here.", "bodyText": "Same here.", "bodyHTML": "<p dir=\"auto\">Same here.</p>", "author": "Vojtech-Sassmann", "createdAt": "2020-09-11T11:54:55Z", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsOnlyOneMemberCandidateForDuplicateUsers() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(candidate2.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsCandidate() throws Exception {\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenThrow(UserNotExistsException.class);\n+\t\twhen(candidate1.getUserExtSources())\n+\t\t\t.thenReturn(Collections.emptyList());\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\t\tassertThat(memberCandidates.get(0).getCandidate()).isEqualTo(candidate1);\n+\t\tassertThat(memberCandidates.get(0).getRichUser()).isNull();\n+", "originalCommit": "fed8b6489c1d64670d131fd085b17012ee76fffd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTExMw==", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486995113", "body": "Same here.", "bodyText": "Same here.", "bodyHTML": "<p dir=\"auto\">Same here.</p>", "author": "Vojtech-Sassmann", "createdAt": "2020-09-11T11:55:00Z", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsOnlyOneMemberCandidateForDuplicateUsers() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(candidate2.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsCandidate() throws Exception {\n+", "originalCommit": "fed8b6489c1d64670d131fd085b17012ee76fffd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTE3MQ==", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486995171", "body": "Same here.", "bodyText": "Same here.", "bodyHTML": "<p dir=\"auto\">Same here.</p>", "author": "Vojtech-Sassmann", "createdAt": "2020-09-11T11:55:07Z", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsOnlyOneMemberCandidateForDuplicateUsers() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(candidate2.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsCandidate() throws Exception {\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenThrow(UserNotExistsException.class);\n+\t\twhen(candidate1.getUserExtSources())\n+\t\t\t.thenReturn(Collections.emptyList());\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\t\tassertThat(memberCandidates.get(0).getCandidate()).isEqualTo(candidate1);\n+\t\tassertThat(memberCandidates.get(0).getRichUser()).isNull();\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsUser() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\t\tassertThat(memberCandidates.get(0).getRichUser()).isEqualTo(candidate1);\n+\t\tassertThat(memberCandidates.get(0).getCandidate()).isNull();\n+", "originalCommit": "fed8b6489c1d64670d131fd085b17012ee76fffd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTIxNg==", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486995216", "body": "Same here.", "bodyText": "Same here.", "bodyHTML": "<p dir=\"auto\">Same here.</p>", "author": "Vojtech-Sassmann", "createdAt": "2020-09-11T11:55:13Z", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsOnlyOneMemberCandidateForDuplicateUsers() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(candidate2.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsCandidate() throws Exception {\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenThrow(UserNotExistsException.class);\n+\t\twhen(candidate1.getUserExtSources())\n+\t\t\t.thenReturn(Collections.emptyList());\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\t\tassertThat(memberCandidates.get(0).getCandidate()).isEqualTo(candidate1);\n+\t\tassertThat(memberCandidates.get(0).getRichUser()).isNull();\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsUser() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\t\tassertThat(memberCandidates.get(0).getRichUser()).isEqualTo(candidate1);\n+\t\tassertThat(memberCandidates.get(0).getCandidate()).isNull();\n+\n+\t}\n+", "originalCommit": "fed8b6489c1d64670d131fd085b17012ee76fffd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTYzMQ==", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486995631", "body": "We don't want to use wildcard imports. Please, try to adjust your IDE's settings.", "bodyText": "We don't want to use wildcard imports. Please, try to adjust your IDE's settings.", "bodyHTML": "<p dir=\"auto\">We don't want to use wildcard imports. Please, try to adjust your IDE's settings.</p>", "author": "Vojtech-Sassmann", "createdAt": "2020-09-11T11:55:58Z", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;", "originalCommit": "fed8b6489c1d64670d131fd085b17012ee76fffd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTcyNQ==", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486995725", "body": "Same for these two.", "bodyText": "Same for these two.", "bodyHTML": "<p dir=\"auto\">Same for these two.</p>", "author": "Vojtech-Sassmann", "createdAt": "2020-09-11T11:56:07Z", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;", "originalCommit": "fed8b6489c1d64670d131fd085b17012ee76fffd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5Njg2NA==", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486996864", "body": "You can pass here only the first candidate.\r\n```suggestion\r\n\t\t\tvo, group, Arrays.asList(candidate1), Collections.emptyList());\r\n```", "bodyText": "You can pass here only the first candidate.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n          \n          \n            \n            \t\t\tvo, group, Arrays.asList(candidate1), Collections.emptyList());", "bodyHTML": "<p dir=\"auto\">You can pass here only the first candidate.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\tvo, group, <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>asList(candidate1<span class=\"x x-first x-last\">, candidate2</span>), <span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>emptyList());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\tvo, group, <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>asList(candidate1), <span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>emptyList());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Vojtech-Sassmann", "createdAt": "2020-09-11T11:58:39Z", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsOnlyOneMemberCandidateForDuplicateUsers() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(candidate2.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsCandidate() throws Exception {\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenThrow(UserNotExistsException.class);\n+\t\twhen(candidate1.getUserExtSources())\n+\t\t\t.thenReturn(Collections.emptyList());\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\t\tassertThat(memberCandidates.get(0).getCandidate()).isEqualTo(candidate1);\n+\t\tassertThat(memberCandidates.get(0).getRichUser()).isNull();\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsUser() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());", "originalCommit": "fed8b6489c1d64670d131fd085b17012ee76fffd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a63ebecf1db03ea00e7a6c16bad47f0855cbc23c", "url": "https://github.com/CESNET/perun/commit/a63ebecf1db03ea00e7a6c16bad47f0855cbc23c", "message": "Core - Duplicate candidates\n\n* In old implementation method 'createMemberCandidate' could find duplicate\ncandidates for the same user and it was confusing for our users.\n* If the method finds user for some  candidate now, then returns only user.\nIf method finds more users, then returns only one of them. If method does not\nfind any user for the candidate, then returns only the candidate.", "committedDate": "2020-09-11T13:12:06Z", "type": "commit"}, {"oid": "a63ebecf1db03ea00e7a6c16bad47f0855cbc23c", "url": "https://github.com/CESNET/perun/commit/a63ebecf1db03ea00e7a6c16bad47f0855cbc23c", "message": "Core - Duplicate candidates\n\n* In old implementation method 'createMemberCandidate' could find duplicate\ncandidates for the same user and it was confusing for our users.\n* If the method finds user for some  candidate now, then returns only user.\nIf method finds more users, then returns only one of them. If method does not\nfind any user for the candidate, then returns only the candidate.", "committedDate": "2020-09-11T13:12:06Z", "type": "forcePushed"}]}