{"pr_number": 1514, "pr_title": "[dsl] Model loading improvements", "pr_author": "kaikreuzer", "pr_createdAt": "2020-06-07T21:47:25Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1514", "timeline": [{"oid": "876496f09409a831d3e94ebd13181ed211af9257", "url": "https://github.com/openhab/openhab-core/commit/876496f09409a831d3e94ebd13181ed211af9257", "message": "Model loading improvements\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-06-07T21:42:20Z", "type": "commit"}, {"oid": "ca095b5d940543c0681482d197ad00c47d698cad", "url": "https://github.com/openhab/openhab-core/commit/ca095b5d940543c0681482d197ad00c47d698cad", "message": "fixed test\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-06-07T22:06:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYwNjUyNg==", "url": "https://github.com/openhab/openhab-core/pull/1514#discussion_r436606526", "body": "The `FolderObserver` already uses constructor injection? Can we use it for the `ReadyService` too?", "bodyText": "The FolderObserver already uses constructor injection? Can we use it for the ReadyService too?", "bodyHTML": "<p dir=\"auto\">The <code>FolderObserver</code> already uses constructor injection? Can we use it for the <code>ReadyService</code> too?</p>", "author": "cweitkamp", "createdAt": "2020-06-08T10:42:57Z", "path": "bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/folder/FolderObserver.java", "diffHunk": "@@ -60,6 +62,12 @@\n \n     /* the model repository is provided as a service */\n     private final ModelRepository modelRepository;\n+    private static final String READYMARKER_TYPE = \"dsl\";\n+\n+    @Reference\n+    /* default */ ReadyService readyService;", "originalCommit": "ca095b5d940543c0681482d197ad00c47d698cad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYwODQ1MA==", "url": "https://github.com/openhab/openhab-core/pull/1514#discussion_r436608450", "body": "Combine nested `if`s and consider new condition in method `removeAllModelsOfType()`.", "bodyText": "Combine nested ifs and consider new condition in method removeAllModelsOfType().", "bodyHTML": "<p dir=\"auto\">Combine nested <code>if</code>s and consider new condition in method <code>removeAllModelsOfType()</code>.</p>", "author": "cweitkamp", "createdAt": "2020-06-08T10:46:56Z", "path": "bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java", "diffHunk": "@@ -203,8 +189,9 @@ public void reloadAllModelsOfType(final String modelType) {\n             // Make a copy to avoid ConcurrentModificationException\n             List<Resource> resourceListCopy = new ArrayList<>(resourceSet.getResources());\n             for (Resource resource : resourceListCopy) {\n-                if (resource != null && resource.getURI().lastSegment().contains(\".\") && resource.isLoaded()) {\n-                    if (modelType.equalsIgnoreCase(resource.getURI().fileExtension())) {\n+                if (resource.getURI().lastSegment().contains(\".\") && resource.isLoaded()) {\n+                    if (modelType.equalsIgnoreCase(resource.getURI().fileExtension())\n+                            && !resource.getURI().lastSegment().startsWith(\"tmp_\")) {", "originalCommit": "ca095b5d940543c0681482d197ad00c47d698cad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxMDA1MA==", "url": "https://github.com/openhab/openhab-core/pull/1514#discussion_r436610050", "body": "This is a nice improvement. With absence of these ugly nestings we can use a try-with-resources statement on the `inputStream` declaration and get rid of the `finally` introduced in #1423.", "bodyText": "This is a nice improvement. With absence of these ugly nestings we can use a try-with-resources statement on the inputStream declaration and get rid of the finally introduced in #1423.", "bodyHTML": "<p dir=\"auto\">This is a nice improvement. With absence of these ugly nestings we can use a try-with-resources statement on the <code>inputStream</code> declaration and get rid of the <code>finally</code> introduced in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"599863372\" data-permission-text=\"Title is private\" data-url=\"https://github.com/openhab/openhab-core/issues/1423\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/openhab/openhab-core/pull/1423/hovercard\" href=\"https://github.com/openhab/openhab-core/pull/1423\">#1423</a>.</p>", "author": "cweitkamp", "createdAt": "2020-06-08T10:50:29Z", "path": "bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java", "diffHunk": "@@ -98,20 +98,18 @@ public ModelRepositoryImpl(final @Reference SafeEMF safeEmf) {\n \n     @Override\n     public boolean addOrRefreshModel(String name, final InputStream originalInputStream) {\n+        logger.info(\"Loading model '{}'\", name);\n         Resource resource = null;\n         InputStream inputStream = null;\n         try {\n-            if (originalInputStream != null) {\n-                byte[] bytes = originalInputStream.readAllBytes();\n-                String validationResult = validateModel(name, new ByteArrayInputStream(bytes));\n-                if (validationResult != null) {\n-                    logger.warn(\"Configuration model '{}' has errors, therefore ignoring it: {}\", name,\n-                            validationResult);\n-                    removeModel(name);\n-                    return false;\n-                }\n-                inputStream = new ByteArrayInputStream(bytes);\n+            byte[] bytes = originalInputStream.readAllBytes();\n+            String validationResult = validateModel(name, new ByteArrayInputStream(bytes));\n+            if (validationResult != null) {\n+                logger.warn(\"Configuration model '{}' has errors, therefore ignoring it: {}\", name, validationResult);\n+                removeModel(name);\n+                return false;\n             }\n+            inputStream = new ByteArrayInputStream(bytes);", "originalCommit": "ca095b5d940543c0681482d197ad00c47d698cad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d11447e204ab268956b419b4ed06f000861d0315", "url": "https://github.com/openhab/openhab-core/commit/d11447e204ab268956b419b4ed06f000861d0315", "message": "addressed review comments\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-06-08T19:23:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE5NTUxNg==", "url": "https://github.com/openhab/openhab-core/pull/1514#discussion_r437195516", "body": "ftr: This is probably not necessary as the `FolderObserver` handles the passed `InputStream` (`originalInputStream`), but I do not think that it will hurt:\r\n\r\nhttps://github.com/openhab/openhab-core/blob/b7ab8070789079a9a9cbd1091ea7b9152f1a04e1/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/folder/FolderObserver.java#L233-L238", "bodyText": "ftr: This is probably not necessary as the FolderObserver handles the passed InputStream (originalInputStream), but I do not think that it will hurt:\n\n  \n    \n      openhab-core/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/folder/FolderObserver.java\n    \n    \n        Lines 233 to 238\n      in\n      b7ab807\n    \n    \n    \n    \n\n        \n          \n           try (InputStream inputStream = Files.newInputStream(file.toPath())) { \n        \n\n        \n          \n               nameFileMap.put(file.getName(), file); \n        \n\n        \n          \n               modelRepository.addOrRefreshModel(file.getName(), inputStream); \n        \n\n        \n          \n           } catch (IOException e) { \n        \n\n        \n          \n               logger.warn(\"Error while opening file during update: {}\", file.getAbsolutePath()); \n        \n\n        \n          \n           }", "bodyHTML": "<p dir=\"auto\">ftr: This is probably not necessary as the <code>FolderObserver</code> handles the passed <code>InputStream</code> (<code>originalInputStream</code>), but I do not think that it will hurt:</p>\n<p dir=\"auto\"><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/openhab/openhab-core/blob/b7ab8070789079a9a9cbd1091ea7b9152f1a04e1/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/folder/FolderObserver.java#L233-L238\">openhab-core/bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/folder/FolderObserver.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 233 to 238\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/openhab/openhab-core/commit/b7ab8070789079a9a9cbd1091ea7b9152f1a04e1\">b7ab807</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L233\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"233\"></td>\n          <td id=\"LC233\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">try</span> (<span class=\"pl-smi\">InputStream</span> inputStream <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Files</span><span class=\"pl-k\">.</span>newInputStream(file<span class=\"pl-k\">.</span>toPath())) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L234\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"234\"></td>\n          <td id=\"LC234\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     nameFileMap<span class=\"pl-k\">.</span>put(file<span class=\"pl-k\">.</span>getName(), file); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L235\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"235\"></td>\n          <td id=\"LC235\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     modelRepository<span class=\"pl-k\">.</span>addOrRefreshModel(file<span class=\"pl-k\">.</span>getName(), inputStream); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L236\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"236\"></td>\n          <td id=\"LC236\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IOException</span> e) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L237\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"237\"></td>\n          <td id=\"LC237\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     logger<span class=\"pl-k\">.</span>warn(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Error while opening file during update: {}<span class=\"pl-pds\">\"</span></span>, file<span class=\"pl-k\">.</span>getAbsolutePath()); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L238\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"238\"></td>\n          <td id=\"LC238\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "cweitkamp", "createdAt": "2020-06-09T07:32:45Z", "path": "bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java", "diffHunk": "@@ -98,20 +98,22 @@ public ModelRepositoryImpl(final @Reference SafeEMF safeEmf) {\n \n     @Override\n     public boolean addOrRefreshModel(String name, final InputStream originalInputStream) {\n+        logger.info(\"Loading model '{}'\", name);\n         Resource resource = null;\n-        InputStream inputStream = null;\n-        try {\n-            if (originalInputStream != null) {\n-                byte[] bytes = originalInputStream.readAllBytes();\n-                String validationResult = validateModel(name, new ByteArrayInputStream(bytes));\n-                if (validationResult != null) {\n-                    logger.warn(\"Configuration model '{}' has errors, therefore ignoring it: {}\", name,\n-                            validationResult);\n-                    removeModel(name);\n-                    return false;\n-                }\n-                inputStream = new ByteArrayInputStream(bytes);\n+        byte[] bytes = null;\n+        try (InputStream inputStream = originalInputStream) {", "originalCommit": "d11447e204ab268956b419b4ed06f000861d0315", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NDc3Mg==", "url": "https://github.com/openhab/openhab-core/pull/1514#discussion_r437674772", "bodyText": "True, I didn't see that. But imho it is better to explicitly make sure that the stream is closed within the method. One should not rely on the caller to do it.", "author": "kaikreuzer", "createdAt": "2020-06-09T19:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE5NTUxNg=="}], "type": "inlineReview"}]}