{"pr_number": 1387, "pr_title": "Allow persistence services to define default strategies", "pr_author": "kaikreuzer", "pr_createdAt": "2020-03-06T22:57:56Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1387", "timeline": [{"oid": "4b99a226200771c82c1e4edddea7687e5d950098", "url": "https://github.com/openhab/openhab-core/commit/4b99a226200771c82c1e4edddea7687e5d950098", "message": "Allow persistence services to define default strategies\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-03-06T22:56:41Z", "type": "commit"}, {"oid": "da4f3b99f2c858a62dfe54442bd92b4a0183a044", "url": "https://github.com/openhab/openhab-core/commit/da4f3b99f2c858a62dfe54442bd92b4a0183a044", "message": "fixed test\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-03-06T23:26:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1ODI3Mw==", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389358273", "body": "I know that this PR is APIBreaking anyways but you also can add the default method implementation here:\r\n```suggestion\r\n    default List<PersistenceStrategy> getDefaultStrategies() {\r\n        return Collections.emptyList();\r\n    }\r\n```\r\nBe aware of an eventually missing import.", "bodyText": "I know that this PR is APIBreaking anyways but you also can add the default method implementation here:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                List<PersistenceStrategy> getDefaultStrategies();\n          \n          \n            \n                default List<PersistenceStrategy> getDefaultStrategies() {\n          \n          \n            \n                    return Collections.emptyList();\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nBe aware of an eventually missing import.", "bodyHTML": "<p dir=\"auto\">I know that this PR is APIBreaking anyways but you also can add the default method implementation here:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"81\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">PersistenceStrategy</span>&gt;</span> getDefaultStrategies()<span class=\"x x-first x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"81\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first\">default</span><span class=\"x x-last\"> </span><span class=\"pl-k\">List&lt;<span class=\"pl-smi\">PersistenceStrategy</span>&gt;</span> getDefaultStrategies()<span class=\"x x-first x-last\"> {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"82\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>emptyList();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"83\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Be aware of an eventually missing import.</p>", "author": "cweitkamp", "createdAt": "2020-03-08T11:04:02Z", "path": "bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/PersistenceService.java", "diffHunk": "@@ -70,4 +72,11 @@\n      * @param alias the alias under which the item should be persisted.\n      */\n     void store(Item item, String alias);\n+\n+    /**\n+     * Provides default persistence strategies that are used for all items if no user defined configuration is found.\n+     *\n+     * @return The default persistence strategies\n+     */\n+    List<PersistenceStrategy> getDefaultStrategies();", "originalCommit": "da4f3b99f2c858a62dfe54442bd92b4a0183a044", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwMTc4Mw==", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389401783", "bodyText": "I thought about this, but I decided against it. Problem with the default methods is that no method skeleton is created in implementing classes, so that developers are not aware that they should actually think about implementing the method.", "author": "kaikreuzer", "createdAt": "2020-03-08T20:19:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1ODI3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1ODMwNA==", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389358304", "body": "Should we add nullness annotations and other touched interfaces / classes?", "bodyText": "Should we add nullness annotations and other touched interfaces / classes?", "bodyHTML": "<p dir=\"auto\">Should we add nullness annotations and other touched interfaces / classes?</p>", "author": "cweitkamp", "createdAt": "2020-03-08T11:04:50Z", "path": "bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/PersistenceFilter.java", "diffHunk": "@@ -17,6 +17,6 @@\n  *\n  * @author Markus Rathgeb - Initial contribution\n  */\n-public class SimpleFilter {\n+public class PersistenceFilter {", "originalCommit": "da4f3b99f2c858a62dfe54442bd92b4a0183a044", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwMjk0OQ==", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389402949", "bodyText": "Added.", "author": "kaikreuzer", "createdAt": "2020-03-08T20:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1ODMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1OTEzOA==", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389359138", "body": "Minor spelling improvement:\r\n\r\n```suggestion\r\n                                            \"Failed to restore item states as persistence service '{}' cannot be queried.\",\r\n```", "bodyText": "Minor spelling improvement:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                        \"Failed to restore item states as persistence service '{}' can not be queried.\",\n          \n          \n            \n                                                        \"Failed to restore item states as persistence service '{}' cannot be queried.\",", "bodyHTML": "<p dir=\"auto\">Minor spelling improvement:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Failed to restore item states as persistence service '{}' <span class=\"x x-first x-last\">can not</span> be queried.<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Failed to restore item states as persistence service '{}' <span class=\"x x-first x-last\">cannot</span> be queried.<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cweitkamp", "createdAt": "2020-03-08T11:16:55Z", "path": "bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManagerImpl.java", "diffHunk": "@@ -256,46 +261,50 @@ private boolean appliesToItem(SimpleItemConfiguration config, Item item) {\n     private void initialize(Item item) {\n         // get the last persisted state from the persistence service if no state is yet set\n         if (item.getState().equals(UnDefType.NULL) && item instanceof GenericItem) {\n-            for (Entry<String, PersistenceServiceConfiguration> entry : persistenceServiceConfigs.entrySet()) {\n+            for (Entry<String, @Nullable PersistenceServiceConfiguration> entry : persistenceServiceConfigs\n+                    .entrySet()) {\n                 final String serviceName = entry.getKey();\n                 final PersistenceServiceConfiguration config = entry.getValue();\n-                for (SimpleItemConfiguration itemConfig : config.getConfigs()) {\n-                    if (hasStrategy(config, itemConfig, SimpleStrategy.Globals.RESTORE)) {\n-                        if (appliesToItem(itemConfig, item)) {\n-                            PersistenceService service = persistenceServices.get(serviceName);\n-                            if (service instanceof QueryablePersistenceService) {\n-                                QueryablePersistenceService queryService = (QueryablePersistenceService) service;\n-                                FilterCriteria filter = new FilterCriteria().setItemName(item.getName()).setPageSize(1);\n-                                Iterable<HistoricItem> result = safeCaller\n-                                        .create(queryService, QueryablePersistenceService.class).onTimeout(() -> {\n-                                            logger.warn(\"Querying persistence service '{}' takes more than {}ms.\",\n-                                                    queryService.getId(), SafeCaller.DEFAULT_TIMEOUT);\n-                                        }).onException(e -> {\n-                                            logger.error(\n-                                                    \"Exception occurred while querying persistence service '{}': {}\",\n-                                                    queryService.getId(), e.getMessage(), e);\n-                                        }).build().query(filter);\n-                                if (result != null) {\n-                                    Iterator<HistoricItem> it = result.iterator();\n-                                    if (it.hasNext()) {\n-                                        HistoricItem historicItem = it.next();\n-                                        GenericItem genericItem = (GenericItem) item;\n-                                        genericItem.removeStateChangeListener(this);\n-                                        genericItem.setState(historicItem.getState());\n-                                        genericItem.addStateChangeListener(this);\n-                                        if (logger.isDebugEnabled()) {\n-                                            logger.debug(\"Restored item state from '{}' for item '{}' -> '{}'\",\n-                                                    DateFormat.getDateTimeInstance()\n-                                                            .format(historicItem.getTimestamp()),\n-                                                    item.getName(), historicItem.getState());\n+                if (config != null) {\n+                    for (PersistenceItemConfiguration itemConfig : config.getConfigs()) {\n+                        if (hasStrategy(config, itemConfig, PersistenceStrategy.Globals.RESTORE)) {\n+                            if (appliesToItem(itemConfig, item)) {\n+                                PersistenceService service = persistenceServices.get(serviceName);\n+                                if (service instanceof QueryablePersistenceService) {\n+                                    QueryablePersistenceService queryService = (QueryablePersistenceService) service;\n+                                    FilterCriteria filter = new FilterCriteria().setItemName(item.getName())\n+                                            .setPageSize(1);\n+                                    Iterable<HistoricItem> result = safeCaller\n+                                            .create(queryService, QueryablePersistenceService.class).onTimeout(() -> {\n+                                                logger.warn(\"Querying persistence service '{}' takes more than {}ms.\",\n+                                                        queryService.getId(), SafeCaller.DEFAULT_TIMEOUT);\n+                                            }).onException(e -> {\n+                                                logger.error(\n+                                                        \"Exception occurred while querying persistence service '{}': {}\",\n+                                                        queryService.getId(), e.getMessage(), e);\n+                                            }).build().query(filter);\n+                                    if (result != null) {\n+                                        Iterator<HistoricItem> it = result.iterator();\n+                                        if (it.hasNext()) {\n+                                            HistoricItem historicItem = it.next();\n+                                            GenericItem genericItem = (GenericItem) item;\n+                                            genericItem.removeStateChangeListener(this);\n+                                            genericItem.setState(historicItem.getState());\n+                                            genericItem.addStateChangeListener(this);\n+                                            if (logger.isDebugEnabled()) {\n+                                                logger.debug(\"Restored item state from '{}' for item '{}' -> '{}'\",\n+                                                        DateFormat.getDateTimeInstance()\n+                                                                .format(historicItem.getTimestamp()),\n+                                                        item.getName(), historicItem.getState());\n+                                            }\n+                                            return;\n                                         }\n-                                        return;\n                                     }\n+                                } else if (service != null) {\n+                                    logger.warn(\n+                                            \"Failed to restore item states as persistence service '{}' can not be queried.\",", "originalCommit": "da4f3b99f2c858a62dfe54442bd92b4a0183a044", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1OTUxNg==", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389359516", "body": "One liner?\r\n\r\n```suggestion\r\n        persistenceServiceConfigs.putIfAbsent(persistenceService.getId(), getDefaultConfig(persistenceService));\r\n```", "bodyText": "One liner?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!persistenceServiceConfigs.containsKey(persistenceService.getId())) {\n          \n          \n            \n                        persistenceServiceConfigs.put(persistenceService.getId(), getDefaultConfig(persistenceService));\n          \n          \n            \n                    }\n          \n          \n            \n                    persistenceServiceConfigs.putIfAbsent(persistenceService.getId(), getDefaultConfig(persistenceService));", "bodyHTML": "<p dir=\"auto\">One liner?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>persistenceServiceConfigs<span class=\"pl-k\">.</span>containsKey(persistenceService<span class=\"pl-k\">.</span>getId())) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            persistenceServiceConfigs<span class=\"pl-k\">.</span>put(persistenceService<span class=\"pl-k\">.</span>getId(), getDefaultConfig(persistenceService));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        persistenceServiceConfigs<span class=\"pl-k\">.</span>putIfAbsent(persistenceService<span class=\"pl-k\">.</span>getId(), getDefaultConfig(persistenceService));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cweitkamp", "createdAt": "2020-03-08T11:22:40Z", "path": "bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManagerImpl.java", "diffHunk": "@@ -107,6 +108,9 @@ protected void deactivate() {\n     protected void addPersistenceService(PersistenceService persistenceService) {\n         logger.debug(\"Initializing {} persistence service.\", persistenceService.getId());\n         persistenceServices.put(persistenceService.getId(), persistenceService);\n+        if (!persistenceServiceConfigs.containsKey(persistenceService.getId())) {\n+            persistenceServiceConfigs.put(persistenceService.getId(), getDefaultConfig(persistenceService));\n+        }", "originalCommit": "da4f3b99f2c858a62dfe54442bd92b4a0183a044", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "de6555b9cd606fd335ab9a55489a39709eb94e5d", "url": "https://github.com/openhab/openhab-core/commit/de6555b9cd606fd335ab9a55489a39709eb94e5d", "message": "Update bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManagerImpl.java\n\nCo-Authored-By: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-03-08T20:20:08Z", "type": "commit"}, {"oid": "4518d9d618bc31732b73fb94ac66fd97f319a9b0", "url": "https://github.com/openhab/openhab-core/commit/4518d9d618bc31732b73fb94ac66fd97f319a9b0", "message": "Update bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManagerImpl.java\n\nCo-Authored-By: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-03-08T20:21:43Z", "type": "commit"}, {"oid": "6d496a7ba0065480679ac20da5259addfd8b7599", "url": "https://github.com/openhab/openhab-core/commit/6d496a7ba0065480679ac20da5259addfd8b7599", "message": "added null annotations\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-03-08T20:34:28Z", "type": "commit"}]}