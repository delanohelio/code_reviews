{"pr_number": 2646, "pr_title": "Add some PostgreSQL compatibility features in #2450", "pr_author": "auntyellow", "pr_createdAt": "2020-05-24T02:36:14Z", "pr_url": "https://github.com/h2database/h2database/pull/2646", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NDE1Mg==", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429594152", "body": "`constraintType.getSqlName()` is more reliable than `toString()`.", "bodyText": "constraintType.getSqlName() is more reliable than toString().", "bodyHTML": "<p dir=\"auto\"><code>constraintType.getSqlName()</code> is more reliable than <code>toString()</code>.</p>", "author": "katzyn", "createdAt": "2020-05-24T02:51:02Z", "path": "h2/src/main/org/h2/mode/PgCatalogTable.java", "diffHunk": "@@ -351,6 +368,34 @@ public PgCatalogTable(Schema schema, int id, int type) {\n             break;\n         case PG_AUTHID:\n             break;\n+        case PG_CONSTRAINT:\n+            for (SchemaObject obj : database.getAllSchemaObjects(DbObject.CONSTRAINT)) {\n+                Constraint constraint = (Constraint) obj;\n+                Constraint.Type constraintType = constraint.getConstraintType();\n+                if (constraintType == Constraint.Type.DOMAIN) {\n+                    continue;\n+                }\n+                Table table = constraint.getTable();\n+                if (hideTable(table, session)) {\n+                    continue;\n+                }\n+                Table refTable = constraint.getRefTable();\n+                add(session,\n+                        rows,\n+                        // OID\n+                        ValueInteger.get(constraint.getId()),\n+                        // CONNAME\n+                        constraint.getName(),\n+                        // CONTYPE\n+                        StringUtils.toLowerEnglish(constraintType.toString().substring(0, 1)),", "originalCommit": "c388347232f6b93ddc3daa34a178bb2dc0d8dfc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NDY3Mg==", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429594672", "bodyText": "Yes, fixed. Foreign key should return f but not r.", "author": "auntyellow", "createdAt": "2020-05-24T03:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NDE1Mg=="}], "type": "inlineReview"}, {"oid": "54cc1d582b7e01ba7f371652d6967863cf0ee57d", "url": "https://github.com/h2database/h2database/commit/54cc1d582b7e01ba7f371652d6967863cf0ee57d", "message": "add `pg_constraint` to prevent error from dbeaver\n\nimplemented `pg_constraint.conkey` but does not look to work", "committedDate": "2020-05-24T02:53:14Z", "type": "forcePushed"}, {"oid": "c59672029882323f72096283f6356372a2c268d0", "url": "https://github.com/h2database/h2database/commit/c59672029882323f72096283f6356372a2c268d0", "message": "add `pg_constraint` to prevent error from dbeaver\n\nimplemented `pg_constraint.conkey` but does not look to work", "committedDate": "2020-05-24T03:02:55Z", "type": "commit"}, {"oid": "c59672029882323f72096283f6356372a2c268d0", "url": "https://github.com/h2database/h2database/commit/c59672029882323f72096283f6356372a2c268d0", "message": "add `pg_constraint` to prevent error from dbeaver\n\nimplemented `pg_constraint.conkey` but does not look to work", "committedDate": "2020-05-24T03:02:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NTIyMw==", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429595223", "body": "1. You need to double `'` characters here. Use `StringUtils.quoteStringSQL(StringBuilder, String)` for it.\r\n\r\n2. Some schema names need to be enclosed into `\"` characters. Take a look on `Parser.quoteIdentifier()`. If you don't want to quote all of them for a some reason, you can't use this method directly, but you can do something similar with real `databaseToUpper` and `databaseToLower` flags passed to `ParserUtil.isSimpleIdentifier()`.", "bodyText": "You need to double ' characters here. Use StringUtils.quoteStringSQL(StringBuilder, String) for it.\n\n\nSome schema names need to be enclosed into \" characters. Take a look on Parser.quoteIdentifier(). If you don't want to quote all of them for a some reason, you can't use this method directly, but you can do something similar with real databaseToUpper and databaseToLower flags passed to ParserUtil.isSimpleIdentifier().", "bodyHTML": "<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">You need to double <code>'</code> characters here. Use <code>StringUtils.quoteStringSQL(StringBuilder, String)</code> for it.</p>\n</li>\n<li>\n<p dir=\"auto\">Some schema names need to be enclosed into <code>\"</code> characters. Take a look on <code>Parser.quoteIdentifier()</code>. If you don't want to quote all of them for a some reason, you can't use this method directly, but you can do something similar with real <code>databaseToUpper</code> and <code>databaseToLower</code> flags passed to <code>ParserUtil.isSimpleIdentifier()</code>.</p>\n</li>\n</ol>", "author": "katzyn", "createdAt": "2020-05-24T03:18:58Z", "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -1572,6 +1572,9 @@ private Prepared parseShow() {\n         } else if (readIf(\"DATESTYLE\")) {\n             // for PostgreSQL compatibility\n             buff.append(\"'ISO' DATESTYLE\");\n+        } else if (readIf(\"SEARCH_PATH\")) {\n+            // for PostgreSQL compatibility\n+            buff.append('\\'').append(String.join(\", \", session.getSchemaSearchPath())).append('\\'');", "originalCommit": "c59672029882323f72096283f6356372a2c268d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NTMyMg==", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429595322", "bodyText": "session.getSchemaSearchPath() may return null and this situation should be handled too.", "author": "katzyn", "createdAt": "2020-05-24T03:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NTIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5ODI3Mw==", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429598273", "body": "If you want to return null here, use `buff.append(\"CAST(NULL AS VARCHAR)\")`. Maybe empty string (`buff.append(\"''\")`) should be used instead, I don't know how to test it in the real PostgreSQL. I don't see any way to clear the path in it.", "bodyText": "If you want to return null here, use buff.append(\"CAST(NULL AS VARCHAR)\"). Maybe empty string (buff.append(\"''\")) should be used instead, I don't know how to test it in the real PostgreSQL. I don't see any way to clear the path in it.", "bodyHTML": "<p dir=\"auto\">If you want to return null here, use <code>buff.append(\"CAST(NULL AS VARCHAR)\")</code>. Maybe empty string (<code>buff.append(\"''\")</code>) should be used instead, I don't know how to test it in the real PostgreSQL. I don't see any way to clear the path in it.</p>", "author": "katzyn", "createdAt": "2020-05-24T04:36:49Z", "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -1572,6 +1572,22 @@ private Prepared parseShow() {\n         } else if (readIf(\"DATESTYLE\")) {\n             // for PostgreSQL compatibility\n             buff.append(\"'ISO' DATESTYLE\");\n+        } else if (readIf(\"SEARCH_PATH\")) {\n+            // for PostgreSQL compatibility\n+            String[] searchPath = session.getSchemaSearchPath();\n+            if (searchPath == null || searchPath.length == 0) {\n+                StringUtils.quoteStringSQL(buff, null);", "originalCommit": "58c6c1d5bdb66d4c3322060c763535f3dd07987a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5ODc4MA==", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429598780", "bodyText": "I just leave empty string for session.getSchemaSearchPath() == null, although this seems never happen.", "author": "auntyellow", "createdAt": "2020-05-24T04:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5ODI3Mw=="}], "type": "inlineReview"}, {"oid": "bafd7f83991fab6ec18e457876ca5d32103059d2", "url": "https://github.com/h2database/h2database/commit/bafd7f83991fab6ec18e457876ca5d32103059d2", "message": "quote search_path", "committedDate": "2020-05-24T04:41:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5ODgxNg==", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429598816", "body": "if `searchPath == null` an invalid SQL is generated (`SELECT SEARCH_PATH`) instead of expected `SELECT '' SEARCH_PATH`. Either append `''` explicitly (and move `searchPathBuff` into `if`), or move `StringUtils.quoteStringSQL(buff, searchPathBuff.toString());` outside of `if`.", "bodyText": "if searchPath == null an invalid SQL is generated (SELECT SEARCH_PATH) instead of expected SELECT '' SEARCH_PATH. Either append '' explicitly (and move searchPathBuff into if), or move StringUtils.quoteStringSQL(buff, searchPathBuff.toString()); outside of if.", "bodyHTML": "<p dir=\"auto\">if <code>searchPath == null</code> an invalid SQL is generated (<code>SELECT SEARCH_PATH</code>) instead of expected <code>SELECT '' SEARCH_PATH</code>. Either append <code>''</code> explicitly (and move <code>searchPathBuff</code> into <code>if</code>), or move <code>StringUtils.quoteStringSQL(buff, searchPathBuff.toString());</code> outside of <code>if</code>.</p>", "author": "katzyn", "createdAt": "2020-05-24T04:49:35Z", "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -1572,6 +1572,20 @@ private Prepared parseShow() {\n         } else if (readIf(\"DATESTYLE\")) {\n             // for PostgreSQL compatibility\n             buff.append(\"'ISO' DATESTYLE\");\n+        } else if (readIf(\"SEARCH_PATH\")) {\n+            // for PostgreSQL compatibility\n+            String[] searchPath = session.getSchemaSearchPath();\n+            StringBuilder searchPathBuff = new StringBuilder();\n+            if (searchPath != null) {\n+                for (int i = 0; i < searchPath.length; i ++) {\n+                    if (i > 0) {\n+                        searchPathBuff.append(\", \");\n+                    }\n+                    quoteIdentifier(searchPathBuff, searchPath[i], HasSQL.QUOTE_ONLY_WHEN_REQUIRED);\n+                }\n+                StringUtils.quoteStringSQL(buff, searchPathBuff.toString());\n+            }\n+            buff.append(\" SEARCH_PATH\");", "originalCommit": "bafd7f83991fab6ec18e457876ca5d32103059d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5OTAzMQ==", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429599031", "bodyText": "Sorry for the misplacement of StringUtils.quoteStringSQL() : - (", "author": "auntyellow", "createdAt": "2020-05-24T04:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5ODgxNg=="}], "type": "inlineReview"}, {"oid": "8d7a7a0367cec054a36716b85b7d6bb8b9dc7743", "url": "https://github.com/h2database/h2database/commit/8d7a7a0367cec054a36716b85b7d6bb8b9dc7743", "message": "quote search_path", "committedDate": "2020-05-24T04:53:37Z", "type": "commit"}, {"oid": "8d7a7a0367cec054a36716b85b7d6bb8b9dc7743", "url": "https://github.com/h2database/h2database/commit/8d7a7a0367cec054a36716b85b7d6bb8b9dc7743", "message": "quote search_path", "committedDate": "2020-05-24T04:53:37Z", "type": "forcePushed"}]}