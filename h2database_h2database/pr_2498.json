{"pr_number": 2498, "pr_title": "Add some PostgreSQL compatibility features mentioned in issue #2450", "pr_author": "auntyellow", "pr_createdAt": "2020-03-09T14:30:48Z", "pr_url": "https://github.com/h2database/h2database/pull/2498", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMjg3MQ==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389732871", "body": "This code should be used only in PostgreSQL compatibility mode.", "bodyText": "This code should be used only in PostgreSQL compatibility mode.", "bodyHTML": "<p dir=\"auto\">This code should be used only in PostgreSQL compatibility mode.</p>", "author": "katzyn", "createdAt": "2020-03-09T14:39:54Z", "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7697,6 +7697,9 @@ private void readIfEqualOrTo() {\n     }\n \n     private Prepared parseSet() {\n+        if (readIf(\"SESSION\") || readIf(\"LOCAL\")) {\n+            // for PostgreSQL compatibility\n+        }", "originalCommit": "a89eb8c64c986879699f0b683870e10f6c927c99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NTgyOA==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389745828", "bodyText": "And even in the PostgreSQL compatibility mode this code should not break SET SESSION CHARACTERISTICS \u2026, this command is a part of the SQL Standard and it is supported by PostgreSQL too.", "author": "katzyn", "createdAt": "2020-03-09T14:58:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMjg3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MjExMw==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390282113", "bodyText": "removed from this PR", "author": "auntyellow", "createdAt": "2020-03-10T12:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMjg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMzM0NQ==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389733345", "body": "This code too, we already have too many non-standard stuff that is incorrectly accepted in all compatibility modes.", "bodyText": "This code too, we already have too many non-standard stuff that is incorrectly accepted in all compatibility modes.", "bodyHTML": "<p dir=\"auto\">This code too, we already have too many non-standard stuff that is incorrectly accepted in all compatibility modes.</p>", "author": "katzyn", "createdAt": "2020-03-09T14:40:32Z", "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7883,6 +7886,11 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             read();\n             return new NoOperation(session);\n+        } else if (readIf(\"JOIN_COLLAPSE_LIMIT\")) {\n+            // for PostgreSQL compatibility\n+            readIfEqualOrTo();\n+            read();\n+            return new NoOperation(session);", "originalCommit": "a89eb8c64c986879699f0b683870e10f6c927c99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczNjAxMg==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389736012", "body": "Don't use `Value.getObject()` in functions, objects returned by it aren't required to return something useful from their `toString()` methods.\r\n\r\nFor this specific function `getString()` is a more reasonable method.\r\n\r\nThis function also needs some tests.", "bodyText": "Don't use Value.getObject() in functions, objects returned by it aren't required to return something useful from their toString() methods.\nFor this specific function getString() is a more reasonable method.\nThis function also needs some tests.", "bodyHTML": "<p dir=\"auto\">Don't use <code>Value.getObject()</code> in functions, objects returned by it aren't required to return something useful from their <code>toString()</code> methods.</p>\n<p dir=\"auto\">For this specific function <code>getString()</code> is a more reasonable method.</p>\n<p dir=\"auto\">This function also needs some tests.</p>", "author": "katzyn", "createdAt": "2020-03-09T14:44:20Z", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -235,6 +247,13 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(String.valueOf(v1.getObject()));\n+            for (Value v : ((ValueArray) v0).getList()) {\n+                joiner.add(String.valueOf(v.getObject()));\n+            }", "originalCommit": "a89eb8c64c986879699f0b683870e10f6c927c99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczOTI3MA==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389739270", "body": "This expression has declared type `INTEGER` and may return only `ValueNull.INSTANCE` and instances of `ValueInteger`.\r\n\r\nYou can use `convertToInt(null)`, but most likely the 32-bit unsigned values need special handling here to avoid `NUMERIC_VALUE_OUT_OF_RANGE_2` error.", "bodyText": "This expression has declared type INTEGER and may return only ValueNull.INSTANCE and instances of ValueInteger.\nYou can use convertToInt(null), but most likely the 32-bit unsigned values need special handling here to avoid NUMERIC_VALUE_OUT_OF_RANGE_2 error.", "bodyHTML": "<p dir=\"auto\">This expression has declared type <code>INTEGER</code> and may return only <code>ValueNull.INSTANCE</code> and instances of <code>ValueInteger</code>.</p>\n<p dir=\"auto\">You can use <code>convertToInt(null)</code>, but most likely the 32-bit unsigned values need special handling here to avoid <code>NUMERIC_VALUE_OUT_OF_RANGE_2</code> error.</p>", "author": "katzyn", "createdAt": "2020-03-09T14:49:04Z", "path": "h2/src/main/org/h2/mode/Regclass.java", "diffHunk": "@@ -39,6 +39,10 @@ public Value getValue(Session session) {\n         if (value == ValueNull.INSTANCE) {\n             return ValueNull.INSTANCE;\n         }\n+        int valueType = value.getValueType();\n+        if (valueType >= Value.TINYINT && valueType <= Value.BIGINT) {\n+            return value;\n+        }", "originalCommit": "a89eb8c64c986879699f0b683870e10f6c927c99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5MDUxNw==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390190517", "bodyText": "Can we just truncate to lower-32-bit INTEGER for BIGINT?\n        if (valueType >= Value.TINYINT && valueType <= Value.INTEGER) {\n            return value.convertToInt(null);\n        }\n        if (valueType == Value.BIGINT) {\n            return ValueInteger.get((int) value.getLong());\n        }", "author": "auntyellow", "createdAt": "2020-03-10T09:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczOTI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5ODAwNA==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390198004", "bodyText": "I think we can.", "author": "katzyn", "createdAt": "2020-03-10T09:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczOTI3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0Mzk2NQ==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389743965", "body": "You need to convert the type to `Value.ARRAY` first with `v0.convertTo(TypeInfo.TYPE_ARRAY)` or something like it.", "bodyText": "You need to convert the type to Value.ARRAY first with v0.convertTo(TypeInfo.TYPE_ARRAY) or something like it.", "bodyHTML": "<p dir=\"auto\">You need to convert the type to <code>Value.ARRAY</code> first with <code>v0.convertTo(TypeInfo.TYPE_ARRAY)</code> or something like it.</p>", "author": "katzyn", "createdAt": "2020-03-09T14:55:44Z", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -235,6 +247,13 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(String.valueOf(v1.getObject()));\n+            for (Value v : ((ValueArray) v0).getList()) {", "originalCommit": "a89eb8c64c986879699f0b683870e10f6c927c99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MzQ3Nw==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390283477", "bodyText": "array_to_string is removed from this PR", "author": "auntyellow", "createdAt": "2020-03-10T12:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0Mzk2NQ=="}], "type": "inlineReview"}, {"oid": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "url": "https://github.com/h2database/h2database/commit/34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "message": "Add some PostgreSQL compatibility features mentioned in issue #2450\n\ncolumn \"pg_roles\".\"rolsuper\"\ntype cast `::oid`\n<integer>::regclass should return integer\nfunction has_schema_privilege()", "committedDate": "2020-03-10T12:29:25Z", "type": "commit"}, {"oid": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "url": "https://github.com/h2database/h2database/commit/34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "message": "Add some PostgreSQL compatibility features mentioned in issue #2450\n\ncolumn \"pg_roles\".\"rolsuper\"\ntype cast `::oid`\n<integer>::regclass should return integer\nfunction has_schema_privilege()", "committedDate": "2020-03-10T12:29:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNjE1MQ==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390306151", "body": "`::regclass` and `::oid` are different things in PostgreSQL and this additional condition doesn't look like a proper implementation.\r\n\r\nH2 has an incorrect mapping for `OID` data type to a `BLOB` in `DataType` class. I think this mapping should be removed from it (and from `help.csv`), and a new mapping to `INTEGER` should be created in the `Mode` class.\r\n\r\n```Java\r\ndt = DataType.getDataType(Value.INTEGER);\r\nmode.typeByNameMap.put(\"OID\", dt);\r\n```\r\nWith such change `::oid` will be processed just like any other type cast. Currently this cast is broken, because it tries to cast a numeric value to a `BLOB`.", "bodyText": "::regclass and ::oid are different things in PostgreSQL and this additional condition doesn't look like a proper implementation.\nH2 has an incorrect mapping for OID data type to a BLOB in DataType class. I think this mapping should be removed from it (and from help.csv), and a new mapping to INTEGER should be created in the Mode class.\ndt = DataType.getDataType(Value.INTEGER);\nmode.typeByNameMap.put(\"OID\", dt);\nWith such change ::oid will be processed just like any other type cast. Currently this cast is broken, because it tries to cast a numeric value to a BLOB.", "bodyHTML": "<p dir=\"auto\"><code>::regclass</code> and <code>::oid</code> are different things in PostgreSQL and this additional condition doesn't look like a proper implementation.</p>\n<p dir=\"auto\">H2 has an incorrect mapping for <code>OID</code> data type to a <code>BLOB</code> in <code>DataType</code> class. I think this mapping should be removed from it (and from <code>help.csv</code>), and a new mapping to <code>INTEGER</code> should be created in the <code>Mode</code> class.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"dt = DataType.getDataType(Value.INTEGER);\nmode.typeByNameMap.put(&quot;OID&quot;, dt);\"><pre>dt <span class=\"pl-k\">=</span> <span class=\"pl-smi\">DataType</span><span class=\"pl-k\">.</span>getDataType(<span class=\"pl-smi\">Value</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>INTEGER</span>);\nmode<span class=\"pl-k\">.</span>typeByNameMap<span class=\"pl-k\">.</span>put(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>OID<span class=\"pl-pds\">\"</span></span>, dt);</pre></div>\n<p dir=\"auto\">With such change <code>::oid</code> will be processed just like any other type cast. Currently this cast is broken, because it tries to cast a numeric value to a <code>BLOB</code>.</p>", "author": "katzyn", "createdAt": "2020-03-10T13:20:05Z", "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -4721,7 +4721,7 @@ private Expression readTerm() {\n                     read(\"PG_CATALOG\");\n                     read(DOT);\n                 }\n-                if (readIf(\"REGCLASS\")) {\n+                if (readIf(\"REGCLASS\") || readIf(\"OID\")) {", "originalCommit": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3MzQwNw==", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390373407", "bodyText": "This really works :-)", "author": "auntyellow", "createdAt": "2020-03-10T14:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNjE1MQ=="}], "type": "inlineReview"}, {"oid": "51e03a62506567d68de6e82d924c3431eb75c6e2", "url": "https://github.com/h2database/h2database/commit/51e03a62506567d68de6e82d924c3431eb75c6e2", "message": "map OID to INTEGER", "committedDate": "2020-03-10T14:29:54Z", "type": "commit"}]}