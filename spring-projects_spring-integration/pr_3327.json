{"pr_number": 3327, "pr_title": "GH-3326: TCP: Support Unsolicited Server Messages", "pr_author": "garyrussell", "pr_createdAt": "2020-07-06T18:19:17Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3327", "merge_commit": "e91942868033500acc46e6cd53cdbb2f6cf1035b", "timeline": [{"oid": "80506586bce203764fd721fc735df5dac1b17ebc", "url": "https://github.com/spring-projects/spring-integration/commit/80506586bce203764fd721fc735df5dac1b17ebc", "message": "GH-3326: TCP: Support Unsolicited Server Messages\n\nResolves https://github.com/spring-projects/spring-integration/issues/3326\n\n- OB Gateway - send unsolicited messages and late replies to a channel\n- Support multiple `TcpSender`s", "committedDate": "2020-07-06T18:18:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwMjMyNw==", "url": "https://github.com/spring-projects/spring-integration/pull/3327#discussion_r450402327", "body": "Looks like you have there this setter as well `setUnsolicitedMessageChannel(MessageChannel unsolicitedMessageChannel)`. Don't we need to have similar option here on DSL level?\r\nThanks", "bodyText": "Looks like you have there this setter as well setUnsolicitedMessageChannel(MessageChannel unsolicitedMessageChannel). Don't we need to have similar option here on DSL level?\nThanks", "bodyHTML": "<p dir=\"auto\">Looks like you have there this setter as well <code>setUnsolicitedMessageChannel(MessageChannel unsolicitedMessageChannel)</code>. Don't we need to have similar option here on DSL level?<br>\nThanks</p>", "author": "artembilan", "createdAt": "2020-07-06T18:22:51Z", "path": "spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java", "diffHunk": "@@ -114,6 +114,11 @@ public TcpOutboundGatewaySpec async(boolean async) {\n \t\treturn this;\n \t}\n \n+\tpublic TcpOutboundGatewaySpec unsolictedMessageChannelName(String channelName) {", "originalCommit": "80506586bce203764fd721fc735df5dac1b17ebc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a7385502248b04fa51e5f8bdbaf70b28268578b", "changed_code": [{"header": "diff --git a/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java b/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java\nindex 74ec3a0c42..7ef82adb55 100644\n--- a/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java\n+++ b/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java\n", "chunk": "@@ -114,11 +115,28 @@ public class TcpOutboundGatewaySpec extends MessageHandlerSpec<TcpOutboundGatewa\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the unsolicited message channel name.\n+\t * @param channelName the name.\n+\t * @return the spec.\n+\t * @since 5.4\n+\t */\n \tpublic TcpOutboundGatewaySpec unsolictedMessageChannelName(String channelName) {\n \t\tthis.target.setUnsolicitedMessageChannelName(channelName);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the unsolicited message channel.\n+\t * @param channel the channel.\n+\t * @return the spec.\n+\t * @since 5.4\n+\t */\n+\tpublic TcpOutboundGatewaySpec unsolictedMessageChannelName(MessageChannel channel) {\n+\t\tthis.target.setUnsolicitedMessageChannel(channel);\n+\t\treturn this;\n+\t}\n+\n \t@Override\n \tpublic Map<Object, String> getComponentsToRegister() {\n \t\treturn this.connectionFactory != null\n", "next_change": null}]}, "revised_code_in_main": {"commit": "e91942868033500acc46e6cd53cdbb2f6cf1035b", "changed_code": [{"header": "diff --git a/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java b/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java\nindex 74ec3a0c42..7ef82adb55 100644\n--- a/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java\n+++ b/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java\n", "chunk": "@@ -114,11 +115,28 @@ public class TcpOutboundGatewaySpec extends MessageHandlerSpec<TcpOutboundGatewa\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the unsolicited message channel name.\n+\t * @param channelName the name.\n+\t * @return the spec.\n+\t * @since 5.4\n+\t */\n \tpublic TcpOutboundGatewaySpec unsolictedMessageChannelName(String channelName) {\n \t\tthis.target.setUnsolicitedMessageChannelName(channelName);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the unsolicited message channel.\n+\t * @param channel the channel.\n+\t * @return the spec.\n+\t * @since 5.4\n+\t */\n+\tpublic TcpOutboundGatewaySpec unsolictedMessageChannelName(MessageChannel channel) {\n+\t\tthis.target.setUnsolicitedMessageChannel(channel);\n+\t\treturn this;\n+\t}\n+\n \t@Override\n \tpublic Map<Object, String> getComponentsToRegister() {\n \t\treturn this.connectionFactory != null\n", "next_change": {"commit": "b99729544d35267399c0c1c8501fa5ea5ae4ffb0", "changed_code": [{"header": "diff --git a/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java b/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java\nindex 7ef82adb55..5737bacb50 100644\n--- a/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java\n+++ b/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java\n", "chunk": "@@ -131,8 +144,21 @@ public class TcpOutboundGatewaySpec extends MessageHandlerSpec<TcpOutboundGatewa\n \t * @param channel the channel.\n \t * @return the spec.\n \t * @since 5.4\n+\t * @deprecated in favor of {@link #unsolicitedMessageChannel(MessageChannel)}\n+\t * due to the typo in method name.\n \t */\n+\t@Deprecated(since = \"6.1\", forRemoval = true)\n \tpublic TcpOutboundGatewaySpec unsolictedMessageChannelName(MessageChannel channel) {\n+\t\treturn unsolicitedMessageChannel(channel);\n+\t}\n+\n+\t/**\n+\t * Set the unsolicited message channel.\n+\t * @param channel the channel.\n+\t * @return the spec.\n+\t * @since 6.1\n+\t */\n+\tpublic TcpOutboundGatewaySpec unsolicitedMessageChannel(MessageChannel channel) {\n \t\tthis.target.setUnsolicitedMessageChannel(channel);\n \t\treturn this;\n \t}\n", "next_change": null}, {"header": "diff --git a/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java b/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java\nindex 7ef82adb55..5737bacb50 100644\n--- a/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java\n+++ b/spring-integration-ip/src/main/java/org/springframework/integration/ip/dsl/TcpOutboundGatewaySpec.java\n", "chunk": "@@ -141,7 +167,7 @@ public class TcpOutboundGatewaySpec extends MessageHandlerSpec<TcpOutboundGatewa\n \tpublic Map<Object, String> getComponentsToRegister() {\n \t\treturn this.connectionFactory != null\n \t\t\t\t? Collections.singletonMap(this.connectionFactory, this.connectionFactory.getComponentName())\n-\t\t\t\t: null;\n+\t\t\t\t: Collections.emptyMap();\n \t}\n \n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "e91942868033500acc46e6cd53cdbb2f6cf1035b", "message": "Merge commit", "committedDate": null}, {"oid": "e8a9f95ca18fd55845802d347fdfe8cec7b225ef", "committedDate": "2023-02-08 17:01:44 -0500", "message": "GH-4013: TCP DSL Improvements"}, {"oid": "b99729544d35267399c0c1c8501fa5ea5ae4ffb0", "committedDate": "2023-04-13 09:16:42 -0400", "message": "GH-8586: Deprecate IntegrationComponentSpec.get() (#8594)"}, {"oid": "ba417de68037eb69c9f63f30a7de985bdfe77f76", "committedDate": "2023-05-22 11:19:13 -0400", "message": "Remove deprecations from previous versions (#8628)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwMjc4Mw==", "url": "https://github.com/spring-projects/spring-integration/pull/3327#discussion_r450402783", "body": "`this.` on method calls?\r\nI guess you have just moved those existing setter over here for better class structure.\r\nNevertheless can we fix `this.` as well since we are already here in a change?", "bodyText": "this. on method calls?\nI guess you have just moved those existing setter over here for better class structure.\nNevertheless can we fix this. as well since we are already here in a change?", "bodyHTML": "<p dir=\"auto\"><code>this.</code> on method calls?<br>\nI guess you have just moved those existing setter over here for better class structure.<br>\nNevertheless can we fix <code>this.</code> as well since we are already here in a change?</p>", "author": "artembilan", "createdAt": "2020-07-06T18:23:50Z", "path": "spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/TcpOutboundGateway.java", "diffHunk": "@@ -118,14 +129,53 @@ public void setIntegrationEvaluationContext(EvaluationContext evaluationContext)\n \t\tthis.evaluationContextSet = true;\n \t}\n \n-\t@Override\n-\tprotected void doInit() {\n-\t\tsuper.doInit();\n-\t\tif (!this.evaluationContextSet) {\n-\t\t\tthis.evaluationContext = ExpressionUtils.createStandardEvaluationContext(getBeanFactory());\n-\t\t}\n-\t\tAssert.state(!this.closeStreamAfterSend || this.isSingleUse,\n-\t\t\t\t\"Single use connection needed with closeStreamAfterSend\");\n+\t/**\n+\t * Specify the Spring Integration reply channel. If this property is not\n+\t * set the gateway will check for a 'replyChannel' header on the request.\n+\t * @param replyChannel The reply channel.\n+\t */\n+\tpublic void setReplyChannel(MessageChannel replyChannel) {\n+\t\tthis.setOutputChannel(replyChannel);", "originalCommit": "80506586bce203764fd721fc735df5dac1b17ebc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a7385502248b04fa51e5f8bdbaf70b28268578b", "changed_code": [{"header": "diff --git a/spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/TcpOutboundGateway.java b/spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/TcpOutboundGateway.java\nindex 94bbf8cb31..8db3f8f2a1 100644\n--- a/spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/TcpOutboundGateway.java\n+++ b/spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/TcpOutboundGateway.java\n", "chunk": "@@ -135,7 +135,7 @@ public class TcpOutboundGateway extends AbstractReplyProducingMessageHandler\n \t * @param replyChannel The reply channel.\n \t */\n \tpublic void setReplyChannel(MessageChannel replyChannel) {\n-\t\tthis.setOutputChannel(replyChannel);\n+\t\tsetOutputChannel(replyChannel);\n \t}\n \n \t/**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "e91942868033500acc46e6cd53cdbb2f6cf1035b", "changed_code": [{"header": "diff --git a/spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/TcpOutboundGateway.java b/spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/TcpOutboundGateway.java\nindex 94bbf8cb31..8db3f8f2a1 100644\n--- a/spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/TcpOutboundGateway.java\n+++ b/spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/TcpOutboundGateway.java\n", "chunk": "@@ -135,7 +135,7 @@ public class TcpOutboundGateway extends AbstractReplyProducingMessageHandler\n \t * @param replyChannel The reply channel.\n \t */\n \tpublic void setReplyChannel(MessageChannel replyChannel) {\n-\t\tthis.setOutputChannel(replyChannel);\n+\t\tsetOutputChannel(replyChannel);\n \t}\n \n \t/**\n", "next_change": null}]}, "commits_in_main": [{"oid": "e91942868033500acc46e6cd53cdbb2f6cf1035b", "message": "Merge commit", "committedDate": null}, {"oid": "1beb854fb4f498d2fb8ab037f1df84881eed7222", "committedDate": "2020-08-07 12:56:57 -0400", "message": "Remove Legacy Metrics"}, {"oid": "9d557426b5f36979173c65ba768395f34fb188f1", "committedDate": "2020-08-08 12:29:24 -0400", "message": "* Fix new Sonar smells * Remove redundant `@SuppressWarnings(\"deprecation\")` * Add `Duration.ofSeconds(10)` to `StepVerifier.verify()` to avoid infinite wait and lose failing text context on the hang CI build"}, {"oid": "c7ff99a4e8232c34f84ebefd5845676ab3ef5324", "committedDate": "2020-10-06 13:56:50 -0400", "message": "Use `LogAccessor` from SF"}, {"oid": "bc63a0dac8ab93c475cc76e7f7ff364c80356471", "committedDate": "2020-10-06 16:31:43 -0400", "message": "More LogAccessor; some new Sonar smells"}, {"oid": "3edfb962d20ff1c8f296ed96eacc70de85c67627", "committedDate": "2021-03-12 11:43:17 -0500", "message": "Fix missing @DirtiesContext on TCP tests"}, {"oid": "9e512186ed6ba602b16809684f4c941cd1fe71ab", "committedDate": "2021-07-23 11:07:39 -0400", "message": "GH-3549: Fix minor SonarQube smells"}, {"oid": "fe57fd281c013e6746bae760d3e3eeaae6846c8a", "committedDate": "2021-09-28 11:55:25 -0400", "message": "Checkstyle changes"}, {"oid": "f85423a436aaf781297ca8ffe7faf0bc4ed2b935", "committedDate": "2022-07-11 11:41:38 -0400", "message": "Fix more deprecations around `TaskScheduler`"}, {"oid": "5572c2161d97ffe830ce9743c1cb1cd95bb5782c", "committedDate": "2022-07-28 09:32:01 -0400", "message": "Fix deprecations around ListenableFuture (#3865)"}, {"oid": "ebba37497f9f96ffb43fc5a3b94b4d07a50abd81", "committedDate": "2023-01-23 11:07:19 -0500", "message": "GH-3993: Fix async race condition in TcpOutGateway (#3995)"}]}, {"oid": "0a7385502248b04fa51e5f8bdbaf70b28268578b", "url": "https://github.com/spring-projects/spring-integration/commit/0a7385502248b04fa51e5f8bdbaf70b28268578b", "message": "Add channel variant to spec; code polishing.", "committedDate": "2020-07-06T19:00:28Z", "type": "commit"}]}