{"pr_number": 1574, "pr_title": "baseline-reproducibility validates that sourceCompatibility is set explicitly", "pr_author": "iamdanfox", "pr_createdAt": "2020-11-27T16:27:08Z", "pr_url": "https://github.com/palantir/gradle-baseline/pull/1574", "timeline": [{"oid": "d06d3c5cf6bb06047b9c30ed8ee2746109c273d2", "url": "https://github.com/palantir/gradle-baseline/commit/d06d3c5cf6bb06047b9c30ed8ee2746109c273d2", "message": "New 'checkExplicitSourceCompatibility' task", "committedDate": "2020-11-27T15:53:55Z", "type": "commit"}, {"oid": "d8f3f28e8b3b1426ec8443a9e7a5289dbdfe6667", "url": "https://github.com/palantir/gradle-baseline/commit/d8f3f28e8b3b1426ec8443a9e7a5289dbdfe6667", "message": "Clearer error message", "committedDate": "2020-11-27T16:07:06Z", "type": "commit"}, {"oid": "8b2373f023f83ac84e3b8b474e2a142c862a8815", "url": "https://github.com/palantir/gradle-baseline/commit/8b2373f023f83ac84e3b8b474e2a142c862a8815", "message": "Fail harder", "committedDate": "2020-11-27T16:10:32Z", "type": "commit"}, {"oid": "d810d549ab3127bfaa747e02e8f9c6fa110a5ff9", "url": "https://github.com/palantir/gradle-baseline/commit/d810d549ab3127bfaa747e02e8f9c6fa110a5ff9", "message": "Integration tests", "committedDate": "2020-11-27T16:22:24Z", "type": "commit"}, {"oid": "3fade5c8f8630e08872a2f85312540901584f4b0", "url": "https://github.com/palantir/gradle-baseline/commit/3fade5c8f8630e08872a2f85312540901584f4b0", "message": "Add generated changelog entries", "committedDate": "2020-11-27T16:22:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4OTUxMw==", "url": "https://github.com/palantir/gradle-baseline/pull/1574#discussion_r531689513", "body": "I broke tracing-java and tried it out, error message looks like this:\r\n```\r\n1: Task failed with an exception.\r\n-----------\r\n* What went wrong:\r\nExecution failed for task ':tracing-jaxrs:checkExplicitSourceCompatibility'.\r\n> project ':tracing-jaxrs' must set sourceCompatibility explicitly in 'tracing-jaxrs/build.gradle', otherwise compilation will not be reproducible but instead depends on the Java version that Gradle is currently running with (11). To auto-fix, run\r\n\r\n       ./gradlew :tracing-jaxrs:checkExplicitSourceCompatibility --fix\r\n\r\n  This will automatically add a suggested line (you may need to adjust the number, e.g. to '1.8' for maximum compatibility).\r\n\r\n```", "bodyText": "I broke tracing-java and tried it out, error message looks like this:\n1: Task failed with an exception.\n-----------\n* What went wrong:\nExecution failed for task ':tracing-jaxrs:checkExplicitSourceCompatibility'.\n> project ':tracing-jaxrs' must set sourceCompatibility explicitly in 'tracing-jaxrs/build.gradle', otherwise compilation will not be reproducible but instead depends on the Java version that Gradle is currently running with (11). To auto-fix, run\n\n       ./gradlew :tracing-jaxrs:checkExplicitSourceCompatibility --fix\n\n  This will automatically add a suggested line (you may need to adjust the number, e.g. to '1.8' for maximum compatibility).", "bodyHTML": "<p dir=\"auto\">I broke tracing-java and tried it out, error message looks like this:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"1: Task failed with an exception.\n-----------\n* What went wrong:\nExecution failed for task ':tracing-jaxrs:checkExplicitSourceCompatibility'.\n&gt; project ':tracing-jaxrs' must set sourceCompatibility explicitly in 'tracing-jaxrs/build.gradle', otherwise compilation will not be reproducible but instead depends on the Java version that Gradle is currently running with (11). To auto-fix, run\n\n       ./gradlew :tracing-jaxrs:checkExplicitSourceCompatibility --fix\n\n  This will automatically add a suggested line (you may need to adjust the number, e.g. to '1.8' for maximum compatibility).\n\n\"><pre><code>1: Task failed with an exception.\n-----------\n* What went wrong:\nExecution failed for task ':tracing-jaxrs:checkExplicitSourceCompatibility'.\n&gt; project ':tracing-jaxrs' must set sourceCompatibility explicitly in 'tracing-jaxrs/build.gradle', otherwise compilation will not be reproducible but instead depends on the Java version that Gradle is currently running with (11). To auto-fix, run\n\n       ./gradlew :tracing-jaxrs:checkExplicitSourceCompatibility --fix\n\n  This will automatically add a suggested line (you may need to adjust the number, e.g. to '1.8' for maximum compatibility).\n\n</code></pre></div>", "author": "iamdanfox", "createdAt": "2020-11-27T16:31:05Z", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckExplicitSourceCompatibilityTask.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.tasks;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Collections;\n+import javax.inject.Inject;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.JavaVersion;\n+import org.gradle.api.Task;\n+import org.gradle.api.model.ObjectFactory;\n+import org.gradle.api.plugins.JavaPluginConvention;\n+import org.gradle.api.provider.Property;\n+import org.gradle.api.publish.PublishingExtension;\n+import org.gradle.api.specs.Spec;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.options.Option;\n+\n+/**\n+ * By default, Gradle will infer sourceCompat based on whatever JVM is currently being used to evaluate the\n+ * build.gradle files. This is bad for reproducibility because if we make an automated PR to upgrade the Java major\n+ * version (e.g. 11 -> 15) then a library might unintentionally start publishing jars containing Java15 bytecode!\n+ *\n+ * Better to just require everyone to specify sourceCompatibility explicitly!\n+ */\n+public class CheckExplicitSourceCompatibilityTask extends DefaultTask {\n+\n+    private final Property<Boolean> shouldFix;\n+\n+    @Inject\n+    public CheckExplicitSourceCompatibilityTask(ObjectFactory objectFactory) {\n+        setGroup(\"Verification\");\n+        setDescription(\"Ensures build.gradle specifies sourceCompatibility explicitly, otherwise it is inferred based\"\n+                + \" on $JAVA_HOME which is fragile.\");\n+        this.shouldFix = objectFactory.property(Boolean.class);\n+        this.shouldFix.set(false);\n+\n+        onlyIf(new Spec<Task>() {\n+            @Override\n+            public boolean isSatisfiedBy(Task element) {\n+                // sometimes people apply the 'java' plugin to projects that doesn't actually have any java code in it\n+                // (e.g. the root project), so if they're not publishing anything, then we don't bother enforcing the\n+                // sourceCompat thing\n+                PublishingExtension publishing = getProject().getExtensions().findByType(PublishingExtension.class);\n+                return publishing != null;\n+            }\n+        });\n+    }\n+\n+    @Option(option = \"fix\", description = \"Whether to apply the suggested fix to build.gradle\")\n+    public final void setShouldFix(boolean value) {\n+        shouldFix.set(value);\n+    }\n+\n+    @TaskAction\n+    public final void taskAction() throws IOException {\n+        // We're doing this naughty casting because we need access to the `getRawSourceCompatibility` method.\n+        org.gradle.api.plugins.internal.DefaultJavaPluginConvention convention =\n+                (org.gradle.api.plugins.internal.DefaultJavaPluginConvention)\n+                        getProject().getConvention().getPlugin(JavaPluginConvention.class);\n+\n+        if (convention.getRawSourceCompatibility() != null) {\n+            // In theory, users could configure the fancy new 'java toolchain' as an alternative to explicit\n+            // sourceCompatibility, but there's no method to access this yet (as of Gradle 6.8).\n+            return;\n+        }\n+\n+        if (shouldFix.get()) {\n+            Files.write(\n+                    getProject().getBuildFile().toPath(),\n+                    Collections.singletonList(String.format(\"%nsourceCompatibility = %s\", JavaVersion.current())),\n+                    StandardCharsets.UTF_8,\n+                    StandardOpenOption.APPEND,\n+                    StandardOpenOption.CREATE);\n+            return;\n+        }\n+\n+        throw new GradleException(String.format(\n+                \"%s must set sourceCompatibility explicitly in '%s', \"\n+                        + \"otherwise compilation will not be reproducible but instead depends on the Java version \"\n+                        + \"that Gradle is currently running with (%s). To auto-fix, run%n\"\n+                        + \"%n\"\n+                        + \"     ./gradlew %s --fix%n\"\n+                        + \"%n\"\n+                        + \"This will automatically add a suggested line \"\n+                        + \"(you may need to adjust the number, e.g. to '1.8' for maximum compatibility).\",\n+                getProject(),\n+                getProject().getRootProject().relativePath(getProject().getBuildFile()),\n+                JavaVersion.current(),\n+                getPath()));", "originalCommit": "3fade5c8f8630e08872a2f85312540901584f4b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE1MzU3OA==", "url": "https://github.com/palantir/gradle-baseline/pull/1574#discussion_r532153578", "body": "Should this also add a trailing newline at the end of the file?\n\n```suggestion\n                    Collections.singletonList(String.format(\"%nsourceCompatibility = %s%n\", JavaVersion.current())),\n```\n", "bodyText": "Should this also add a trailing newline at the end of the file?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Collections.singletonList(String.format(\"%nsourceCompatibility = %s\", JavaVersion.current())),\n          \n          \n            \n                                Collections.singletonList(String.format(\"%nsourceCompatibility = %s%n\", JavaVersion.current())),", "bodyHTML": "<p dir=\"auto\">Should this also add a trailing newline at the end of the file?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>singletonList(<span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%nsourceCompatibility = %s<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">JavaVersion</span><span class=\"pl-k\">.</span>current())),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>singletonList(<span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%nsourceCompatibility = %s<span class=\"x x-first x-last\">%n</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">JavaVersion</span><span class=\"pl-k\">.</span>current())),</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "schlosna", "createdAt": "2020-11-29T04:27:59Z", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckExplicitSourceCompatibilityTask.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.tasks;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Collections;\n+import javax.inject.Inject;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.JavaVersion;\n+import org.gradle.api.Task;\n+import org.gradle.api.model.ObjectFactory;\n+import org.gradle.api.plugins.JavaPluginConvention;\n+import org.gradle.api.provider.Property;\n+import org.gradle.api.publish.PublishingExtension;\n+import org.gradle.api.specs.Spec;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.options.Option;\n+\n+/**\n+ * By default, Gradle will infer sourceCompat based on whatever JVM is currently being used to evaluate the\n+ * build.gradle files. This is bad for reproducibility because if we make an automated PR to upgrade the Java major\n+ * version (e.g. 11 -> 15) then a library might unintentionally start publishing jars containing Java15 bytecode!\n+ *\n+ * Better to just require everyone to specify sourceCompatibility explicitly!\n+ */\n+public class CheckExplicitSourceCompatibilityTask extends DefaultTask {\n+\n+    private final Property<Boolean> shouldFix;\n+\n+    @Inject\n+    public CheckExplicitSourceCompatibilityTask(ObjectFactory objectFactory) {\n+        setGroup(\"Verification\");\n+        setDescription(\"Ensures build.gradle specifies sourceCompatibility explicitly, otherwise it is inferred based\"\n+                + \" on $JAVA_HOME which is fragile.\");\n+        this.shouldFix = objectFactory.property(Boolean.class);\n+        this.shouldFix.set(false);\n+\n+        onlyIf(new Spec<Task>() {\n+            @Override\n+            public boolean isSatisfiedBy(Task element) {\n+                // sometimes people apply the 'java' plugin to projects that doesn't actually have any java code in it\n+                // (e.g. the root project), so if they're not publishing anything, then we don't bother enforcing the\n+                // sourceCompat thing\n+                PublishingExtension publishing = getProject().getExtensions().findByType(PublishingExtension.class);\n+                return publishing != null;\n+            }\n+        });\n+    }\n+\n+    @Option(option = \"fix\", description = \"Whether to apply the suggested fix to build.gradle\")\n+    public final void setShouldFix(boolean value) {\n+        shouldFix.set(value);\n+    }\n+\n+    @TaskAction\n+    public final void taskAction() throws IOException {\n+        // We're doing this naughty casting because we need access to the `getRawSourceCompatibility` method.\n+        org.gradle.api.plugins.internal.DefaultJavaPluginConvention convention =\n+                (org.gradle.api.plugins.internal.DefaultJavaPluginConvention)\n+                        getProject().getConvention().getPlugin(JavaPluginConvention.class);\n+\n+        if (convention.getRawSourceCompatibility() != null) {\n+            // In theory, users could configure the fancy new 'java toolchain' as an alternative to explicit\n+            // sourceCompatibility, but there's no method to access this yet (as of Gradle 6.8).\n+            return;\n+        }\n+\n+        if (shouldFix.get()) {\n+            Files.write(\n+                    getProject().getBuildFile().toPath(),\n+                    Collections.singletonList(String.format(\"%nsourceCompatibility = %s\", JavaVersion.current())),", "originalCommit": "3fade5c8f8630e08872a2f85312540901584f4b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0ddbdec2ba2a43cd0ae001b8f80b32e020bd9b66", "url": "https://github.com/palantir/gradle-baseline/commit/0ddbdec2ba2a43cd0ae001b8f80b32e020bd9b66", "message": "Update gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckExplicitSourceCompatibilityTask.java\n\nCo-authored-by: David Schlosnagle <schlosna@gmail.com>", "committedDate": "2020-11-30T13:05:00Z", "type": "commit"}]}