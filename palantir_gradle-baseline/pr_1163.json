{"pr_number": 1163, "pr_title": "fix #1161: Add error prone LoggerEnclosingClass", "pr_author": "carterkozak", "pr_createdAt": "2020-01-10T21:09:13Z", "pr_url": "https://github.com/palantir/gradle-baseline/pull/1163", "timeline": [{"oid": "654981d9bdcfa6a80ebabfd95ba962e47717ebdf", "url": "https://github.com/palantir/gradle-baseline/commit/654981d9bdcfa6a80ebabfd95ba962e47717ebdf", "message": "fix #1161: Add error prone LoggerEnclosingClass\n\nLoggers created using getLogger(Class<?>) must reference their enclosing\nclass.", "committedDate": "2020-01-10T21:06:51Z", "type": "commit"}, {"oid": "2acdfcc27933f590969830de1260c6941e3df44c", "url": "https://github.com/palantir/gradle-baseline/commit/2acdfcc27933f590969830de1260c6941e3df44c", "message": "Add generated changelog entries", "committedDate": "2020-01-10T21:06:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzMjYzNg==", "url": "https://github.com/palantir/gradle-baseline/pull/1163#discussion_r365432636", "body": "```suggestion\r\n    private static final Matcher<VariableTree> LOGGER = Matchers.allOf(\r\n            Matchers.isField(),\r\n            Matchers.isSameType(Logger.class),\r\n            Matchers.variableInitializer(MethodMatchers.staticMethod()\r\n                    .onClass(LoggerFactory.class.getName())\r\n                    .named(\"getLogger\")\r\n                    .withParameters(Class.class.getName())));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Matcher<ExpressionTree> getLoggerMatcher = MethodMatchers.staticMethod()\n          \n          \n            \n                private static final Matcher<VariableTree> LOGGER = Matchers.allOf(\n          \n          \n            \n                        Matchers.isField(),\n          \n          \n            \n                        Matchers.isSameType(Logger.class),\n          \n          \n            \n                        Matchers.variableInitializer(MethodMatchers.staticMethod()\n          \n          \n            \n                                .onClass(LoggerFactory.class.getName())\n          \n          \n            \n                                .named(\"getLogger\")\n          \n          \n            \n                                .withParameters(Class.class.getName())));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Matcher&lt;<span class=\"pl-smi x x-first\">ExpressionTree</span><span class=\"x\">&gt;</span></span><span class=\"x x-last\"> getLoggerMatcher</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi x x-first\">MethodMatchers</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">staticMethod()</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Matcher&lt;<span class=\"pl-smi x x-first\">VariableTree</span><span class=\"x\">&gt;</span></span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">LOGGER</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi x x-first\">Matchers</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">allOf(</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">Matchers</span><span class=\"pl-k\">.</span>isField(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">Matchers</span><span class=\"pl-k\">.</span>isSameType(<span class=\"pl-smi\">Logger</span><span class=\"pl-k\">.</span>class),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">Matchers</span><span class=\"pl-k\">.</span>variableInitializer(<span class=\"pl-smi\">MethodMatchers</span><span class=\"pl-k\">.</span>staticMethod()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    .onClass(<span class=\"pl-smi\">LoggerFactory</span><span class=\"pl-k\">.</span>class<span class=\"pl-k\">.</span>getName())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    .named(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>getLogger<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    .withParameters(<span class=\"pl-smi\">Class</span><span class=\"pl-k\">.</span>class<span class=\"pl-k\">.</span>getName())));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ferozco", "createdAt": "2020-01-10T21:14:06Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LoggerEnclosingClass.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.Matchers;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MemberSelectTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.VariableTree;\n+import com.sun.tools.javac.code.Symbol;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"LoggerEnclosingClass\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        summary = \"Loggers created using getLogger(Class<?>) must reference their enclosing class.\")\n+public final class LoggerEnclosingClass extends BugChecker implements BugChecker.VariableTreeMatcher {\n+\n+    private static final Matcher<ExpressionTree> getLoggerMatcher = MethodMatchers.staticMethod()", "originalCommit": "2acdfcc27933f590969830de1260c6941e3df44c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzNjExMg==", "url": "https://github.com/palantir/gradle-baseline/pull/1163#discussion_r365436112", "bodyText": "Snazzy, I hadn't seen `Matchers.variableInitializer!", "author": "carterkozak", "createdAt": "2020-01-10T21:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzMjYzNg=="}], "type": "inlineReview"}, {"oid": "853f48f284d77105aeb880d767cd1bfec6eb7498", "url": "https://github.com/palantir/gradle-baseline/commit/853f48f284d77105aeb880d767cd1bfec6eb7498", "message": "cr", "committedDate": "2020-01-10T21:27:09Z", "type": "commit"}, {"oid": "5b54e9220930f4ffda1d676289bd811bff40e8b8", "url": "https://github.com/palantir/gradle-baseline/commit/5b54e9220930f4ffda1d676289bd811bff40e8b8", "message": "Merge branch 'develop' into ckozak/LoggerEnclosingClass", "committedDate": "2020-01-10T21:34:21Z", "type": "commit"}]}