{"pr_number": 1197, "pr_title": "Add an ErrorProne check for raw types", "pr_author": "AlexLandau", "pr_createdAt": "2020-01-29T02:24:15Z", "pr_url": "https://github.com/palantir/gradle-baseline/pull/1197", "timeline": [{"oid": "f1b0353bfae48cb47258fa57a34d043700f42573", "url": "https://github.com/palantir/gradle-baseline/commit/f1b0353bfae48cb47258fa57a34d043700f42573", "message": "Add an ErrorProne check for raw types", "committedDate": "2020-01-29T02:15:10Z", "type": "commit"}, {"oid": "1e80ee702171dd30f3a18493304a3baae9362b8d", "url": "https://github.com/palantir/gradle-baseline/commit/1e80ee702171dd30f3a18493304a3baae9362b8d", "message": "Add generated changelog entries", "committedDate": "2020-01-29T02:15:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNTYyOA==", "url": "https://github.com/palantir/gradle-baseline/pull/1197#discussion_r373615628", "body": "nit: we should try to avoid array allocations since this will be invoked for every class/interface/enum/etc. A large internal project will benefit from avoiding this.\r\n\r\nPerhaps something along these lines?\r\n```java\r\ncheckType(tree.getExtendsClause());\r\ncheckTypes(tree.getImplementsClause());\r\n```", "bodyText": "nit: we should try to avoid array allocations since this will be invoked for every class/interface/enum/etc. A large internal project will benefit from avoiding this.\nPerhaps something along these lines?\ncheckType(tree.getExtendsClause());\ncheckTypes(tree.getImplementsClause());", "bodyHTML": "<p dir=\"auto\">nit: we should try to avoid array allocations since this will be invoked for every class/interface/enum/etc. A large internal project will benefit from avoiding this.</p>\n<p dir=\"auto\">Perhaps something along these lines?</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"checkType(tree.getExtendsClause());\ncheckTypes(tree.getImplementsClause());\n\"><pre>checkType(tree<span class=\"pl-k\">.</span>getExtendsClause());\ncheckTypes(tree<span class=\"pl-k\">.</span>getImplementsClause());</pre></div>", "author": "carterkozak", "createdAt": "2020-01-31T18:16:48Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/RawTypes.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.NewClassTree;\n+import com.sun.source.tree.ParameterizedTypeTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.VariableTree;\n+import com.sun.tools.javac.code.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"RawTypes\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        // Support SuppressWarnings(\"rawtypes\"), which is already in use\n+        altNames = {\"rawtypes\"},\n+        summary =\n+                \"Avoid raw types; add appropriate type parameters if possible.\\n\"\n+                        + \"This can be suppressed with @SuppressWarnings(\\\"rawtypes\\\") where necessary, such as when \"\n+                        + \"interacting with older library code.\")\n+public final class RawTypes extends BugChecker\n+        implements BugChecker.VariableTreeMatcher,\n+                BugChecker.NewClassTreeMatcher,\n+                BugChecker.ClassTreeMatcher,\n+                BugChecker.MethodTreeMatcher {\n+    @Override\n+    public Description matchVariable(VariableTree tree, VisitorState state) {\n+        return testType(tree.getType());\n+    }\n+\n+    @Override\n+    public Description matchNewClass(NewClassTree tree, VisitorState state) {\n+        return testType(tree.getIdentifier());\n+    }\n+\n+    @Override\n+    public Description matchClass(ClassTree tree, VisitorState state) {\n+        List<Tree> types = new ArrayList<>();", "originalCommit": "f1b0353bfae48cb47258fa57a34d043700f42573", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNjE4MA==", "url": "https://github.com/palantir/gradle-baseline/pull/1197#discussion_r373616180", "body": "This isn't necessary because the RawTypes check does not provide a suggested fix, this list enumerates the checks that we automatically fix by default.\r\n\r\nI wonder how many projects this will impact, we could implement a automated fix to apply `?` as a replacement. I'm sure there are edge cases that it won't fix, but it should make most cases slightly better. The counterargument is that most of these should be replaced with more precise type parameters that humans are better equipped to write.", "bodyText": "This isn't necessary because the RawTypes check does not provide a suggested fix, this list enumerates the checks that we automatically fix by default.\nI wonder how many projects this will impact, we could implement a automated fix to apply ? as a replacement. I'm sure there are edge cases that it won't fix, but it should make most cases slightly better. The counterargument is that most of these should be replaced with more precise type parameters that humans are better equipped to write.", "bodyHTML": "<p dir=\"auto\">This isn't necessary because the RawTypes check does not provide a suggested fix, this list enumerates the checks that we automatically fix by default.</p>\n<p dir=\"auto\">I wonder how many projects this will impact, we could implement a automated fix to apply <code>?</code> as a replacement. I'm sure there are edge cases that it won't fix, but it should make most cases slightly better. The counterargument is that most of these should be replaced with more precise type parameters that humans are better equipped to write.</p>", "author": "carterkozak", "createdAt": "2020-01-31T18:17:59Z", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/extensions/BaselineErrorProneExtension.java", "diffHunk": "@@ -38,6 +38,7 @@\n             \"PreferListsPartition\",\n             \"PreferSafeLoggableExceptions\",\n             \"PreferSafeLoggingPreconditions\",\n+            \"RawTypes\",", "originalCommit": "f1b0353bfae48cb47258fa57a34d043700f42573", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyNDQ0OQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1197#discussion_r373724449", "bodyText": "Removed from this list.\nI'd rather leave existing cases marked as warnings for human review than have them replaced by ? or Object.", "author": "AlexLandau", "createdAt": "2020-01-31T23:08:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MDAwNw==", "url": "https://github.com/palantir/gradle-baseline/pull/1197#discussion_r373740007", "bodyText": "Sounds good", "author": "carterkozak", "createdAt": "2020-02-01T00:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNjE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxODQ5NA==", "url": "https://github.com/palantir/gradle-baseline/pull/1197#discussion_r373618494", "body": "Should this cover `TypeCastTreeMatcher` as well, to protect against:\r\n```java\r\nMap<String, String> value = new HashMap<>();\r\nObject object = (Map) value;\r\n```", "bodyText": "Should this cover TypeCastTreeMatcher as well, to protect against:\nMap<String, String> value = new HashMap<>();\nObject object = (Map) value;", "bodyHTML": "<p dir=\"auto\">Should this cover <code>TypeCastTreeMatcher</code> as well, to protect against:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Map&lt;String, String&gt; value = new HashMap&lt;&gt;();\nObject object = (Map) value;\"><pre><span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt;</span> value <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();\n<span class=\"pl-smi\">Object</span> object <span class=\"pl-k\">=</span> (<span class=\"pl-smi\">Map</span>) value;</pre></div>", "author": "carterkozak", "createdAt": "2020-01-31T18:23:22Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/RawTypes.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.NewClassTree;\n+import com.sun.source.tree.ParameterizedTypeTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.VariableTree;\n+import com.sun.tools.javac.code.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"RawTypes\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        // Support SuppressWarnings(\"rawtypes\"), which is already in use\n+        altNames = {\"rawtypes\"},\n+        summary =\n+                \"Avoid raw types; add appropriate type parameters if possible.\\n\"\n+                        + \"This can be suppressed with @SuppressWarnings(\\\"rawtypes\\\") where necessary, such as when \"\n+                        + \"interacting with older library code.\")\n+public final class RawTypes extends BugChecker\n+        implements BugChecker.VariableTreeMatcher,\n+                BugChecker.NewClassTreeMatcher,\n+                BugChecker.ClassTreeMatcher,\n+                BugChecker.MethodTreeMatcher {", "originalCommit": "f1b0353bfae48cb47258fa57a34d043700f42573", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxOTE1Mg==", "url": "https://github.com/palantir/gradle-baseline/pull/1197#discussion_r373619152", "body": "types can render in odd ways, especially when they include other generic type information. prettyType should make it a bit cleaner:\r\n```suggestion\r\n                            + MoreSuggestedFixes.prettyType(null, null, realType)\r\n```", "bodyText": "types can render in odd ways, especially when they include other generic type information. prettyType should make it a bit cleaner:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        + realType\n          \n          \n            \n                                        + MoreSuggestedFixes.prettyType(null, null, realType)", "bodyHTML": "<p dir=\"auto\">types can render in odd ways, especially when they include other generic type information. prettyType should make it a bit cleaner:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            <span class=\"pl-k\">+</span> realType</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            <span class=\"pl-k\">+</span> <span class=\"pl-smi x x-first\">MoreSuggestedFixes</span><span class=\"pl-k x\">.</span><span class=\"x\">prettyType(</span><span class=\"pl-c1 x\">null</span><span class=\"x\">, </span><span class=\"pl-c1 x\">null</span><span class=\"x x-last\">, </span>realType<span class=\"x x-first x-last\">)</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "carterkozak", "createdAt": "2020-01-31T18:24:57Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/RawTypes.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.NewClassTree;\n+import com.sun.source.tree.ParameterizedTypeTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.VariableTree;\n+import com.sun.tools.javac.code.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"RawTypes\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        // Support SuppressWarnings(\"rawtypes\"), which is already in use\n+        altNames = {\"rawtypes\"},\n+        summary =\n+                \"Avoid raw types; add appropriate type parameters if possible.\\n\"\n+                        + \"This can be suppressed with @SuppressWarnings(\\\"rawtypes\\\") where necessary, such as when \"\n+                        + \"interacting with older library code.\")\n+public final class RawTypes extends BugChecker\n+        implements BugChecker.VariableTreeMatcher,\n+                BugChecker.NewClassTreeMatcher,\n+                BugChecker.ClassTreeMatcher,\n+                BugChecker.MethodTreeMatcher {\n+    @Override\n+    public Description matchVariable(VariableTree tree, VisitorState state) {\n+        return testType(tree.getType());\n+    }\n+\n+    @Override\n+    public Description matchNewClass(NewClassTree tree, VisitorState state) {\n+        return testType(tree.getIdentifier());\n+    }\n+\n+    @Override\n+    public Description matchClass(ClassTree tree, VisitorState state) {\n+        List<Tree> types = new ArrayList<>();\n+        types.add(tree.getExtendsClause());\n+        types.addAll(tree.getImplementsClause());\n+        return testTypes(types);\n+    }\n+\n+    @Override\n+    public Description matchMethod(MethodTree tree, VisitorState state) {\n+        return testType(tree.getReturnType());\n+    }\n+\n+    private Description testTypes(Iterable<? extends Tree> types) {\n+        for (Tree type : types) {\n+            Description description = testType(type);\n+            if (description != Description.NO_MATCH) {\n+                return description;\n+            }\n+        }\n+        return Description.NO_MATCH;\n+    }\n+\n+    private Description testType(Tree type) {\n+        if (type == null) {\n+            return Description.NO_MATCH;\n+        }\n+        Type realType = ASTHelpers.getType(type);\n+        if (realType != null && realType.isRaw()) {\n+            return buildDescription(type)\n+                    .setMessage(\"Avoid raw types; add appropriate type parameters if possible. \"\n+                            + \"The type was: \"\n+                            + realType", "originalCommit": "f1b0353bfae48cb47258fa57a34d043700f42573", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d779b2bf42f0401ae7dbfc39b2f7eae74a2c0f49", "url": "https://github.com/palantir/gradle-baseline/commit/d779b2bf42f0401ae7dbfc39b2f7eae74a2c0f49", "message": "Remove RawTypes from BaselineErrorProneExtension", "committedDate": "2020-01-31T22:32:40Z", "type": "commit"}, {"oid": "3bc8f8b9e39fd75f712ac03c83e62a544c47864a", "url": "https://github.com/palantir/gradle-baseline/commit/3bc8f8b9e39fd75f712ac03c83e62a544c47864a", "message": "Use prettyType when displaying the type to the user", "committedDate": "2020-01-31T22:34:39Z", "type": "commit"}, {"oid": "e82fb605bd6dddef5801edc4caddeafa1ec6e1a9", "url": "https://github.com/palantir/gradle-baseline/commit/e82fb605bd6dddef5801edc4caddeafa1ec6e1a9", "message": "Avoid an ArrayList instantiation in matchClass", "committedDate": "2020-01-31T22:37:01Z", "type": "commit"}, {"oid": "9b47f282b08235d53ca130a7c8d11350202b35f2", "url": "https://github.com/palantir/gradle-baseline/commit/9b47f282b08235d53ca130a7c8d11350202b35f2", "message": "Also check typecasts", "committedDate": "2020-01-31T22:48:19Z", "type": "commit"}, {"oid": "76010817770986412d3057861f0abb7d945c08cf", "url": "https://github.com/palantir/gradle-baseline/commit/76010817770986412d3057861f0abb7d945c08cf", "message": "Checkstyle fix", "committedDate": "2020-01-31T23:00:20Z", "type": "commit"}]}