{"pr_number": 1489, "pr_title": "HDDS-4308. Fix issue with quota update", "pr_author": "captainzmc", "pr_createdAt": "2020-10-13T07:45:47Z", "pr_url": "https://github.com/apache/ozone/pull/1489", "timeline": [{"oid": "e6a0ecdacca868c781969b259be02ed6d0ee30c7", "url": "https://github.com/apache/ozone/commit/e6a0ecdacca868c781969b259be02ed6d0ee30c7", "message": "Fix acquire VOLUME_LOCK issue", "committedDate": "2020-10-13T12:52:00Z", "type": "forcePushed"}, {"oid": "f3744e77d31652cdbf237f073c1af17d27e74b18", "url": "https://github.com/apache/ozone/commit/f3744e77d31652cdbf237f073c1af17d27e74b18", "message": "Fix acquire VOLUME_LOCK issue", "committedDate": "2020-10-14T02:02:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0OTk1MA==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r512749950", "body": "I don't prefer to add new methods here, this makes current PR not clear to understand.\r\n@captainzmc , can you make the minor adjustment for getVolumeInfo as I suggested in JIRA HDDS-4308. After this, we can make few lines change I think.\r\n", "bodyText": "I don't prefer to add new methods here, this makes current PR not clear to understand.\n@captainzmc , can you make the minor adjustment for getVolumeInfo as I suggested in JIRA HDDS-4308. After this, we can make few lines change I think.", "bodyHTML": "<p dir=\"auto\">I don't prefer to add new methods here, this makes current PR not clear to understand.<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/captainzmc/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/captainzmc\">@captainzmc</a> , can you make the minor adjustment for getVolumeInfo as I suggested in JIRA <a class=\"issue-link js-issue-link\" rel=\"noopener noreferrer nofollow\" href=\"https://issues.apache.org/jira/browse/HDDS-4308\">HDDS-4308</a>. After this, we can make few lines change I think.</p>", "author": "linyiqun", "createdAt": "2020-10-27T14:40:15Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyRequest.java", "diffHunk": "@@ -597,27 +596,40 @@ protected boolean checkDirectoryAlreadyExists(String volumeName,\n   }\n \n   /**\n-   * Return volume info for the specified volume. If the volume does not\n-   * exist, returns {@code null}.\n+   * Return volume info that updated usageBytes for the specified volume.\n    * @param omMetadataManager\n    * @param volume\n+   * @param updateUsage\n    * @return OmVolumeArgs\n    * @throws IOException\n    */\n-  protected OmVolumeArgs getVolumeInfo(OMMetadataManager omMetadataManager,\n-      String volume) {\n-\n-    OmVolumeArgs volumeArgs = null;\n-\n-    CacheValue<OmVolumeArgs> value =\n-        omMetadataManager.getVolumeTable().getCacheValue(\n-        new CacheKey<>(omMetadataManager.getVolumeKey(volume)));\n-\n-    if (value != null) {\n-      volumeArgs = value.getCacheValue();\n-    }\n+  protected static synchronized OmVolumeArgs syncUpdateUsage(\n+      OMMetadataManager omMetadataManager, String volume, long updateUsage) {\n+    OmVolumeArgs volumeArgs = omMetadataManager.getVolumeTable().getCacheValue(\n+        new CacheKey<>(omMetadataManager.getVolumeKey(volume)))\n+        .getCacheValue();\n+    volumeArgs.getUsedBytes().add(updateUsage);\n+    return volumeArgs.copyObject();\n+  }\n \n-    return volumeArgs;\n+  /**\n+   * Return volume info that updated usageBytes for the specified volume. And\n+   * check Volume usageBytes quota.\n+   * @param omMetadataManager\n+   * @param volume\n+   * @param updateUsage\n+   * @return OmVolumeArgs\n+   * @throws IOException\n+   */\n+  protected static synchronized OmVolumeArgs syncCheckAndUpdateUsage(", "originalCommit": "2614eeb893dc9c406764824aba73faafd56d4ded", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MDYyOA==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r513140628", "bodyText": "Thanks for @linyiqun's review.\nModifying getVolumeInfo to synchronized and get copyObject would not suffice. There is only one instance of volumeArgs in memory, and we need to update volumeArgs atomic after getVolumeInfo. Then get the value of the copyObject.\nSo, I made a modification based on your suggestion, added update volumeArgs's usedBytes to the getVolumeInfo method.", "author": "captainzmc", "createdAt": "2020-10-28T02:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0OTk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2OTIyOQ==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r513169229", "bodyText": "I have not understood one part, how without volume lock this will help here.\nBecause other threads can be updating volumeArgs when this update is happening/ other threads read omVolumeArgs.", "author": "bharatviswa504", "createdAt": "2020-10-28T04:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0OTk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2OTc5Mw==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r513169793", "bodyText": "Do we need LongAdder still?", "author": "bharatviswa504", "createdAt": "2020-10-28T04:12:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0OTk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxNjU4NQ==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r513216585", "bodyText": "I have not understood one part, how without volume lock this will help here.\nBecause other threads can be updating volumeArgs when this update is happening/ other threads read omVolumeArgs.\n\nThank for @bharatviswa504's  feedback. This is a possible case. Can lead to update usageBytes inaccurate.\nSuppose that ThreadA update VolumeArgs using OMVolumeSetOwnerRequest, it gets VolumeArgs from DB if usageBytes is 1000 at this point. When ThreadB writes the new key using OMKeyCreateRequest, he changes usageBytes to 1100.\nThere is no Volume lock at this point, so ThreadB may finish executing first and ThreadA last. The Final usageBytes for VolumeArgs would be 1000. This should be a problem.\nMaybe we still can't avoid using Volume lock. hi @linyiqun Any suggestions here?", "author": "captainzmc", "createdAt": "2020-10-28T06:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0OTk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxOTM1OA==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r513219358", "bodyText": "Do we need LongAdder still?\n\nLongAdder will no longer be necessary if there are no concurrent updates to usedBytes.", "author": "captainzmc", "createdAt": "2020-10-28T07:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0OTk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMzMzQzNQ==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r513333435", "bodyText": "Thank for @bharatviswa504's feedback. This is a possible case. Can lead to update usageBytes inaccurate.\nSuppose that ThreadA update VolumeArgs using OMVolumeSetOwnerRequest, it gets VolumeArgs from DB if usageBytes is 1000 at this point. When ThreadB writes the new key using OMKeyCreateRequest, he changes usageBytes to 1100.\n\nGood catch, @captainzmc . Seems we still need to use volume lock to help us do the volume quota update control. We should acquire volume lock before get volume info (copy volume info) and release volume lock after add the OMClientResponse into double buffer cache.", "author": "linyiqun", "createdAt": "2020-10-28T10:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0OTk1MA=="}], "type": "inlineReview"}, {"oid": "f3744e77d31652cdbf237f073c1af17d27e74b18", "url": "https://github.com/apache/ozone/commit/f3744e77d31652cdbf237f073c1af17d27e74b18", "message": "Fix acquire VOLUME_LOCK issue", "committedDate": "2020-10-14T02:02:18Z", "type": "forcePushed"}, {"oid": "dcfdb763ba9d72fa6d36d3221d40f5cfe60c08b4", "url": "https://github.com/apache/ozone/commit/dcfdb763ba9d72fa6d36d3221d40f5cfe60c08b4", "message": "LongAdder in OmVolumeArgs is unnecessary", "committedDate": "2020-10-29T12:31:51Z", "type": "forcePushed"}, {"oid": "dfc8e50f63315ce8e915e1861309ab6766fe8004", "url": "https://github.com/apache/ozone/commit/dfc8e50f63315ce8e915e1861309ab6766fe8004", "message": "LongAdder in OmVolumeArgs is unnecessary", "committedDate": "2020-10-29T13:15:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0MDM0MQ==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r515140341", "body": "Method name setUsedBytes seems confused, can we rename to incrUsedBytes(long bytes)", "bodyText": "Method name setUsedBytes seems confused, can we rename to incrUsedBytes(long bytes)", "bodyHTML": "<p dir=\"auto\">Method name setUsedBytes seems confused, can we rename to incrUsedBytes(long bytes)</p>", "author": "linyiqun", "createdAt": "2020-10-30T14:31:44Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmVolumeArgs.java", "diffHunk": "@@ -177,10 +176,14 @@ public OmOzoneAclMap getAclMap() {\n     return aclMap;\n   }\n \n-  public LongAdder getUsedBytes() {\n+  public long getUsedBytes() {\n     return usedBytes;\n   }\n \n+  public void setUsedBytes(long usedBytes) {\n+    this.usedBytes = this.usedBytes + usedBytes;", "originalCommit": "dfc8e50f63315ce8e915e1861309ab6766fe8004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0MzYzOA==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r515143638", "body": "We should not release volume lock until add omClientResponse into double buffer. So that we can make sure stale OmVolumeArgs in other OM request won't be earlier processed than this request. Here we should ensure that the OmVolumeArgs is updated in order.\r\n\r\nI prefer to add volume lock for the whole method. The same comment for other OM Request classes.", "bodyText": "We should not release volume lock until add omClientResponse into double buffer. So that we can make sure stale OmVolumeArgs in other OM request won't be earlier processed than this request. Here we should ensure that the OmVolumeArgs is updated in order.\nI prefer to add volume lock for the whole method. The same comment for other OM Request classes.", "bodyHTML": "<p dir=\"auto\">We should not release volume lock until add omClientResponse into double buffer. So that we can make sure stale OmVolumeArgs in other OM request won't be earlier processed than this request. Here we should ensure that the OmVolumeArgs is updated in order.</p>\n<p dir=\"auto\">I prefer to add volume lock for the whole method. The same comment for other OM Request classes.</p>", "author": "linyiqun", "createdAt": "2020-10-30T14:36:52Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -300,8 +302,26 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           trxnLogIndex);\n \n       // update usedBytes atomically.\n-      omVolumeArgs.getUsedBytes().add(preAllocatedSpace);\n       omBucketInfo.getUsedBytes().add(preAllocatedSpace);\n+      OmBucketInfo copyBucketInfo = omBucketInfo.copyObject();\n+      // We cannot acquire VOLUME_LOCK while holding BUCKET_LOCK. So\n+      // release BUCKET_LOCK first.\n+      if (acquiredLock) {\n+        omMetadataManager.getLock().releaseWriteLock(BUCKET_LOCK, volumeName,\n+            bucketName);\n+        acquiredLock = false;\n+      }\n+\n+      acquireVolumeLock = omMetadataManager.getLock().acquireWriteLock(\n+          VOLUME_LOCK, volumeName);\n+      omVolumeArgs.setUsedBytes(preAllocatedSpace);\n+      OmVolumeArgs copyVolumeArgs = omVolumeArgs.copyObject();\n+      if (acquireVolumeLock) {\n+        omMetadataManager.getLock().releaseWriteLock(VOLUME_LOCK, volumeName);\n+        acquireVolumeLock = false;\n+      }", "originalCommit": "dfc8e50f63315ce8e915e1861309ab6766fe8004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1MTU3OA==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r515151578", "body": "The similar concurrent update issue for bucket usedBytes will happens if we release bucket lock here and then try to acquire bucket lock again.\r\nAs mentioned above, we should both lock the volume and bucket lock for the whole method.", "bodyText": "The similar concurrent update issue for bucket usedBytes will happens if we release bucket lock here and then try to acquire bucket lock again.\nAs mentioned above, we should both lock the volume and bucket lock for the whole method.", "bodyHTML": "<p dir=\"auto\">The similar concurrent update issue for bucket usedBytes will happens if we release bucket lock here and then try to acquire bucket lock again.<br>\nAs mentioned above, we should both lock the volume and bucket lock for the whole method.</p>", "author": "linyiqun", "createdAt": "2020-10-30T14:48:40Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -300,8 +302,26 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           trxnLogIndex);\n \n       // update usedBytes atomically.\n-      omVolumeArgs.getUsedBytes().add(preAllocatedSpace);\n       omBucketInfo.getUsedBytes().add(preAllocatedSpace);\n+      OmBucketInfo copyBucketInfo = omBucketInfo.copyObject();\n+      // We cannot acquire VOLUME_LOCK while holding BUCKET_LOCK. So\n+      // release BUCKET_LOCK first.\n+      if (acquiredLock) {\n+        omMetadataManager.getLock().releaseWriteLock(BUCKET_LOCK, volumeName,\n+            bucketName);\n+        acquiredLock = false;\n+      }", "originalCommit": "dfc8e50f63315ce8e915e1861309ab6766fe8004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1NzczOQ==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r515157739", "body": "We should also update below lines to use copyVolumeArgs,  copyBucketInfo.\r\n```java\r\n    } catch (IOException ex) {\r\n      result = Result.FAILURE;\r\n      exception = ex;\r\n      omClientResponse = new S3MultipartUploadCommitPartResponse(\r\n          createErrorOMResponse(omResponse, exception), multipartKey, openKey,\r\n          multipartKeyInfo, oldPartKeyInfo, omKeyInfo,\r\n          ozoneManager.isRatisEnabled(), omVolumeArgs, omBucketInfo);\r\n    } finally {\r\n    ...\r\n    }\r\n```", "bodyText": "We should also update below lines to use copyVolumeArgs,  copyBucketInfo.\n    } catch (IOException ex) {\n      result = Result.FAILURE;\n      exception = ex;\n      omClientResponse = new S3MultipartUploadCommitPartResponse(\n          createErrorOMResponse(omResponse, exception), multipartKey, openKey,\n          multipartKeyInfo, oldPartKeyInfo, omKeyInfo,\n          ozoneManager.isRatisEnabled(), omVolumeArgs, omBucketInfo);\n    } finally {\n    ...\n    }", "bodyHTML": "<p dir=\"auto\">We should also update below lines to use copyVolumeArgs,  copyBucketInfo.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    } catch (IOException ex) {\n      result = Result.FAILURE;\n      exception = ex;\n      omClientResponse = new S3MultipartUploadCommitPartResponse(\n          createErrorOMResponse(omResponse, exception), multipartKey, openKey,\n          multipartKeyInfo, oldPartKeyInfo, omKeyInfo,\n          ozoneManager.isRatisEnabled(), omVolumeArgs, omBucketInfo);\n    } finally {\n    ...\n    }\n\"><pre>    } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IOException</span> ex) {\n      result <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Result</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FAILURE</span>;\n      exception <span class=\"pl-k\">=</span> ex;\n      omClientResponse <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">S3MultipartUploadCommitPartResponse</span>(\n          createErrorOMResponse(omResponse, exception), multipartKey, openKey,\n          multipartKeyInfo, oldPartKeyInfo, omKeyInfo,\n          ozoneManager<span class=\"pl-k\">.</span>isRatisEnabled(), omVolumeArgs, omBucketInfo);\n    } <span class=\"pl-k\">finally</span> {\n    <span class=\"pl-c1\">...</span>\n    }</pre></div>", "author": "linyiqun", "createdAt": "2020-10-30T14:53:57Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/s3/multipart/S3MultipartUploadCommitPartRequest.java", "diffHunk": "@@ -222,16 +218,34 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       // be subtracted.\n       long correctedSpace = omKeyInfo.getDataSize() * factor -\n           keyArgs.getKeyLocationsList().size() * scmBlockSize * factor;\n-      omVolumeArgs.getUsedBytes().add(correctedSpace);\n       omBucketInfo.getUsedBytes().add(correctedSpace);\n+      OmBucketInfo copyBucketInfo = omBucketInfo.copyObject();\n+      // We cannot acquire VOLUME_LOCK while holding BUCKET_LOCK. So\n+      // release BUCKET_LOCK first.\n+      if (acquiredLock) {\n+        omMetadataManager.getLock().releaseWriteLock(BUCKET_LOCK, volumeName,\n+            bucketName);\n+        acquiredLock = false;\n+      }\n+\n+      acquireVolumeLock = omMetadataManager.getLock().acquireWriteLock(\n+          VOLUME_LOCK, volumeName);\n+      omVolumeArgs.setUsedBytes(correctedSpace);\n+      OmVolumeArgs copyVolumeArgs = omVolumeArgs.copyObject();\n+      if (acquireVolumeLock) {\n+        omMetadataManager.getLock().releaseWriteLock(VOLUME_LOCK, volumeName);\n+        acquireVolumeLock = false;\n+      }\n+      acquiredLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n+          volumeName, bucketName);\n \n       omResponse.setCommitMultiPartUploadResponse(\n           MultipartCommitUploadPartResponse.newBuilder()\n               .setPartName(partName));\n       omClientResponse = new S3MultipartUploadCommitPartResponse(\n           omResponse.build(), multipartKey, openKey,\n           multipartKeyInfo, oldPartKeyInfo, omKeyInfo,\n-          ozoneManager.isRatisEnabled(), omVolumeArgs, omBucketInfo);\n+          ozoneManager.isRatisEnabled(), copyVolumeArgs, copyBucketInfo);", "originalCommit": "dfc8e50f63315ce8e915e1861309ab6766fe8004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a3c5ba2e990603f66d3c737dcead759e8d5952a8", "url": "https://github.com/apache/ozone/commit/a3c5ba2e990603f66d3c737dcead759e8d5952a8", "message": "fix review issues", "committedDate": "2020-11-02T12:04:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkzODYyMA==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r515938620", "body": ">The similar concurrent update issue for bucket usedBytes will happens if we release bucket lock here and then try to acquire bucket lock again.\r\nAs mentioned above, we should both lock the volume and bucket lock for the whole method.\r\n\r\n@captainzmc , can you address above comment, bucket lock is also needed since we also do the bucket used bytes update. Can you update this in all below places?\r\n\r\nOther change looks good to me.", "bodyText": "The similar concurrent update issue for bucket usedBytes will happens if we release bucket lock here and then try to acquire bucket lock again.\nAs mentioned above, we should both lock the volume and bucket lock for the whole method.\n\n@captainzmc , can you address above comment, bucket lock is also needed since we also do the bucket used bytes update. Can you update this in all below places?\nOther change looks good to me.", "bodyHTML": "<blockquote>\n<p dir=\"auto\">The similar concurrent update issue for bucket usedBytes will happens if we release bucket lock here and then try to acquire bucket lock again.<br>\nAs mentioned above, we should both lock the volume and bucket lock for the whole method.</p>\n</blockquote>\n<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/captainzmc/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/captainzmc\">@captainzmc</a> , can you address above comment, bucket lock is also needed since we also do the bucket used bytes update. Can you update this in all below places?</p>\n<p dir=\"auto\">Other change looks good to me.</p>", "author": "linyiqun", "createdAt": "2020-11-02T12:30:28Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -206,8 +206,8 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n \n       // acquire lock\n-      acquiredLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n-          volumeName, bucketName);\n+      acquireVolumeLock = omMetadataManager.getLock().acquireWriteLock(\n+          VOLUME_LOCK, volumeName);\n ", "originalCommit": "a3c5ba2e990603f66d3c737dcead759e8d5952a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk3NTY3OQ==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r515975679", "bodyText": "Thanks  for @linyiqun's feedback. A new commit has been committed to fix this.", "author": "captainzmc", "createdAt": "2020-11-02T13:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkzODYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4MjA1Mg==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r516082052", "body": "Nit: Can we rename all variable name of acquiredLock to acquireBucketLock in current PR change?", "bodyText": "Nit: Can we rename all variable name of acquiredLock to acquireBucketLock in current PR change?", "bodyHTML": "<p dir=\"auto\">Nit: Can we rename all variable name of acquiredLock to acquireBucketLock in current PR change?</p>", "author": "linyiqun", "createdAt": "2020-11-02T16:10:59Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -206,6 +208,8 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           IAccessAuthorizer.ACLType.CREATE, OzoneObj.ResourceType.KEY);\n \n       // acquire lock\n+      acquireVolumeLock = omMetadataManager.getLock().acquireWriteLock(\n+          VOLUME_LOCK, volumeName);\n       acquiredLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,", "originalCommit": "325930137c02a41064a5d1f561477a8aa0052017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0NTE1MQ==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r516445151", "bodyText": "Thanks @linyiqun.  Changed this with new commit.", "author": "captainzmc", "createdAt": "2020-11-03T06:15:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4MjA1Mg=="}], "type": "inlineReview"}, {"oid": "d9d17aa72f7c5f459b55e87774699e9ca5757308", "url": "https://github.com/apache/ozone/commit/d9d17aa72f7c5f459b55e87774699e9ca5757308", "message": "Fix issue with quota update", "committedDate": "2020-11-05T14:42:58Z", "type": "commit"}, {"oid": "d9d17aa72f7c5f459b55e87774699e9ca5757308", "url": "https://github.com/apache/ozone/commit/d9d17aa72f7c5f459b55e87774699e9ca5757308", "message": "Fix issue with quota update", "committedDate": "2020-11-05T14:42:58Z", "type": "forcePushed"}, {"oid": "357d513680f1d3b46660fd092e134f7a898e5586", "url": "https://github.com/apache/ozone/commit/357d513680f1d3b46660fd092e134f7a898e5586", "message": "trigger new CI check", "committedDate": "2020-11-05T16:10:36Z", "type": "commit"}, {"oid": "f4428bfc07d20e351a23b936d48042201f1ea31c", "url": "https://github.com/apache/ozone/commit/f4428bfc07d20e351a23b936d48042201f1ea31c", "message": "fix review issues.", "committedDate": "2020-11-19T13:40:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3MDQ2NQ==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r529170465", "body": "we do not need this comment any more.", "bodyText": "we do not need this comment any more.", "bodyHTML": "<p dir=\"auto\">we do not need this comment any more.</p>", "author": "runzhiwang", "createdAt": "2020-11-24T03:02:39Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeysDeleteRequest.java", "diffHunk": "@@ -171,15 +171,15 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n         quotaReleased += sumBlockLengths(omKeyInfo);\n       }\n       // update usedBytes atomically.", "originalCommit": "f4428bfc07d20e351a23b936d48042201f1ea31c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3MTAxNA==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r529171014", "body": "this.usedBytes += bytes;", "bodyText": "this.usedBytes += bytes;", "bodyHTML": "<p dir=\"auto\">this.usedBytes += bytes;</p>", "author": "runzhiwang", "createdAt": "2020-11-24T03:04:29Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmBucketInfo.java", "diffHunk": "@@ -241,9 +240,14 @@ public String getSourceBucket() {\n   }\n \n \n-  public LongAdder getUsedBytes() {\n+  public long getUsedBytes() {\n     return usedBytes;\n   }\n+\n+  public void incrUsedBytes(long bytes) {\n+    this.usedBytes = this.usedBytes + bytes;", "originalCommit": "f4428bfc07d20e351a23b936d48042201f1ea31c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3MjI5Nw==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r529172297", "body": "revert this line", "bodyText": "revert this line", "bodyHTML": "<p dir=\"auto\">revert this line</p>", "author": "runzhiwang", "createdAt": "2020-11-24T03:08:43Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCommitRequest.java", "diffHunk": "@@ -167,7 +167,6 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n         }\n       }\n \n-", "originalCommit": "f4428bfc07d20e351a23b936d48042201f1ea31c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3MjYyMA==", "url": "https://github.com/apache/ozone/pull/1489#discussion_r529172620", "body": "copyBucketInfo -> omBucketInfo.copyObject()", "bodyText": "copyBucketInfo -> omBucketInfo.copyObject()", "bodyHTML": "<p dir=\"auto\">copyBucketInfo -&gt; omBucketInfo.copyObject()</p>", "author": "runzhiwang", "createdAt": "2020-11-24T03:09:40Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyDeleteRequest.java", "diffHunk": "@@ -158,7 +158,8 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n \n       omClientResponse = new OMKeyDeleteResponse(omResponse\n           .setDeleteKeyResponse(DeleteKeyResponse.newBuilder()).build(),\n-          omKeyInfo, ozoneManager.isRatisEnabled(), omVolumeArgs, omBucketInfo);\n+          omKeyInfo, ozoneManager.isRatisEnabled(), omVolumeArgs,\n+          copyBucketInfo);", "originalCommit": "f4428bfc07d20e351a23b936d48042201f1ea31c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f9831c4ff632ec192cc30d7050076eabfcbddace", "url": "https://github.com/apache/ozone/commit/f9831c4ff632ec192cc30d7050076eabfcbddace", "message": "fix review issues.", "committedDate": "2020-11-24T12:19:10Z", "type": "commit"}]}