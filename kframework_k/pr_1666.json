{"pr_number": 1666, "pr_title": "Add option --emit-json to kprove as well", "pr_author": "ehildenb", "pr_createdAt": "2020-11-20T19:46:51Z", "pr_url": "https://github.com/kframework/k/pull/1666", "timeline": [{"oid": "359300c006f97ef11b68d8605a4a024fb3492bd1", "url": "https://github.com/kframework/k/commit/359300c006f97ef11b68d8605a4a024fb3492bd1", "message": "kernel/{KProve,KProveOptions}: add --emit-json to kprove", "committedDate": "2020-11-19T18:49:53Z", "type": "commit"}, {"oid": "0857fac026770fc41385eb80d8c89f1e3538e42b", "url": "https://github.com/kframework/k/commit/0857fac026770fc41385eb80d8c89f1e3538e42b", "message": "pyk/kast: assume extension is included in requires when pretty printing", "committedDate": "2020-11-19T21:22:44Z", "type": "commit"}, {"oid": "dd1ea05f0ec9253501f3ca87fe209abb5618e63c", "url": "https://github.com/kframework/k/commit/dd1ea05f0ec9253501f3ca87fe209abb5618e63c", "message": "Merge remote-tracking branch 'upstream/master' into pyk-prove-lemmas", "committedDate": "2020-11-20T19:45:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkzNDg5OQ==", "url": "https://github.com/kframework/k/pull/1666#discussion_r527934899", "body": "```suggestion\r\n    @Parameter(names=\"--emit-json\", description=\"Emit JSON serialized main definition for proving.\")\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Parameter(names=\"--emit-json\", description=\"Emit JSON serialized def module and spec module.\")\n          \n          \n            \n                @Parameter(names=\"--emit-json\", description=\"Emit JSON serialized main definition for proving.\")", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Parameter</span>(<span class=\"pl-c1\">names</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>--emit-json<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">description</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Emit JSON serialized <span class=\"x x-first x-last\">def module and spec module</span>.<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Parameter</span>(<span class=\"pl-c1\">names</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>--emit-json<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">description</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Emit JSON serialized <span class=\"x x-first x-last\">main definition for proving</span>.<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ehildenb", "createdAt": "2020-11-20T19:48:05Z", "path": "kernel/src/main/java/org/kframework/kprove/KProveOptions.java", "diffHunk": "@@ -82,4 +82,7 @@ public synchronized File specFile(FileUtil files) {\n \n     @Parameter(names=\"--debug-script\", description=\"Run script passed in specified file when the debugger starts. Used with --debugger.\")\n     public String debugScript;\n+\n+    @Parameter(names=\"--emit-json\", description=\"Emit JSON serialized def module and spec module.\")", "originalCommit": "dd1ea05f0ec9253501f3ca87fe209abb5618e63c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20e98302feb0b9e96d917c28a6450774d01f9229", "changed_code": [{"header": "diff --git a/kernel/src/main/java/org/kframework/kprove/KProveOptions.java b/kernel/src/main/java/org/kframework/kprove/KProveOptions.java\nindex fd587a2922..af7cb20a44 100644\n--- a/kernel/src/main/java/org/kframework/kprove/KProveOptions.java\n+++ b/kernel/src/main/java/org/kframework/kprove/KProveOptions.java\n", "chunk": "@@ -83,6 +83,6 @@ public class KProveOptions {\n     @Parameter(names=\"--debug-script\", description=\"Run script passed in specified file when the debugger starts. Used with --debugger.\")\n     public String debugScript;\n \n-    @Parameter(names=\"--emit-json\", description=\"Emit JSON serialized def module and spec module.\")\n+    @Parameter(names=\"--emit-json\", description=\"Emit JSON serialized main definition for proving.\")\n     public boolean emitJson = false;\n }\n", "next_change": null}]}}, {"oid": "20e98302feb0b9e96d917c28a6450774d01f9229", "url": "https://github.com/kframework/k/commit/20e98302feb0b9e96d917c28a6450774d01f9229", "message": "Update kernel/src/main/java/org/kframework/kprove/KProveOptions.java", "committedDate": "2020-11-20T19:48:11Z", "type": "commit"}, {"oid": "c747b4ece35819c0ba3bfa4af0d3232af0cef9ee", "url": "https://github.com/kframework/k/commit/c747b4ece35819c0ba3bfa4af0d3232af0cef9ee", "message": "tests/pyk/build-config: correct for differnt way of building definition", "committedDate": "2020-11-20T19:52:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODYwOA==", "url": "https://github.com/kframework/k/pull/1666#discussion_r527948608", "body": "I have a few issues here:\r\n1. `compiled._1()` returns an entire definition, not only a module, so the name of the file is not really correct.\r\n2. Right now, each time you call `kprove` you may have a different set of claims, so maybe it would be better if you save this in `kprove.temp`. I know we want to eventually optimize this step, so it might not matter then. Thoughts?", "bodyText": "I have a few issues here:\n\ncompiled._1() returns an entire definition, not only a module, so the name of the file is not really correct.\nRight now, each time you call kprove you may have a different set of claims, so maybe it would be better if you save this in kprove.temp. I know we want to eventually optimize this step, so it might not matter then. Thoughts?", "bodyHTML": "<p dir=\"auto\">I have a few issues here:</p>\n<ol dir=\"auto\">\n<li><code>compiled._1()</code> returns an entire definition, not only a module, so the name of the file is not really correct.</li>\n<li>Right now, each time you call <code>kprove</code> you may have a different set of claims, so maybe it would be better if you save this in <code>kprove.temp</code>. I know we want to eventually optimize this step, so it might not matter then. Thoughts?</li>\n</ol>", "author": "radumereuta", "createdAt": "2020-11-20T20:18:00Z", "path": "kernel/src/main/java/org/kframework/kprove/KProve.java", "diffHunk": "@@ -72,6 +74,14 @@ public int run() {\n         Module specModule = compiled._2();\n         Rule boundaryPattern = buildBoundaryPattern(compiledDefinition);\n \n+        if (kproveOptions.emitJson) {\n+            try {\n+                files.saveToKompiled(\"def-module.json\", new String(ToJson.apply(compiled._1()), \"UTF-8\"));", "originalCommit": "c747b4ece35819c0ba3bfa4af0d3232af0cef9ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0OTA5Ng==", "url": "https://github.com/kframework/k/pull/1666#discussion_r527949096", "bodyText": "Hmmmm, saving in kprove.temp may be difficult, because I need to access the file afterward. How about I let the user specify the location with --emit-json-file some_file_name, and otherwise default to *-kompiled/kprove-definition.json?", "author": "ehildenb", "createdAt": "2020-11-20T20:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODYwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1MDk4NQ==", "url": "https://github.com/kframework/k/pull/1666#discussion_r527950985", "bodyText": "That sounds even more complicated. I'm happy with where it saves right now if we are to fix kprove eventually.", "author": "radumereuta", "createdAt": "2020-11-20T20:23:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODYwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1MjY2Mg==", "url": "https://github.com/kframework/k/pull/1666#discussion_r527952662", "bodyText": "Ok, it works for me for now anyway then.", "author": "ehildenb", "createdAt": "2020-11-20T20:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODYwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk2OTY2OA==", "url": "https://github.com/kframework/k/pull/1666#discussion_r527969668", "bodyText": "But you should still change the name of the file to reflect that you have a definition inside, not just a module.", "author": "radumereuta", "createdAt": "2020-11-20T21:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODYwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3NzY0NA==", "url": "https://github.com/kframework/k/pull/1666#discussion_r527977644", "bodyText": "done", "author": "ehildenb", "createdAt": "2020-11-20T21:24:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODYwOA=="}], "type": "inlineReview", "revised_code": {"commit": "5c9f98b4729bda4aa504c70711e5eb0e0f7ed13c", "changed_code": [{"header": "diff --git a/kernel/src/main/java/org/kframework/kprove/KProve.java b/kernel/src/main/java/org/kframework/kprove/KProve.java\nindex b0e0f9b11d..f88c69844a 100644\n--- a/kernel/src/main/java/org/kframework/kprove/KProve.java\n+++ b/kernel/src/main/java/org/kframework/kprove/KProve.java\n", "chunk": "@@ -76,7 +76,7 @@ public class KProve {\n \n         if (kproveOptions.emitJson) {\n             try {\n-                files.saveToKompiled(\"def-module.json\", new String(ToJson.apply(compiled._1()), \"UTF-8\"));\n+                files.saveToKompiled(\"prove-definition.json\", new String(ToJson.apply(compiled._1()), \"UTF-8\"));\n             } catch (UnsupportedEncodingException e) {\n                 throw KEMException.criticalError(\"Unsupported encoding `UTF-8` when saving JSON definition.\");\n             }\n", "next_change": null}]}}, {"oid": "5c9f98b4729bda4aa504c70711e5eb0e0f7ed13c", "url": "https://github.com/kframework/k/commit/5c9f98b4729bda4aa504c70711e5eb0e0f7ed13c", "message": "kernel/KProve: def-module => definition", "committedDate": "2020-11-20T21:24:24Z", "type": "commit"}]}