{"pr_number": 1426, "pr_title": "GG-29901 Implement readiness probe REST endpoint", "pr_author": "akorensh", "pr_createdAt": "2020-09-14T15:35:46Z", "pr_url": "https://github.com/gridgain/gridgain/pull/1426", "timeline": [{"oid": "2e2a37a5a985268741e9f494c0e59f2c343372c2", "url": "https://github.com/gridgain/gridgain/commit/2e2a37a5a985268741e9f494c0e59f2c343372c2", "message": "GG-29901 Implement readiness probe REST endpoint", "committedDate": "2020-10-02T22:57:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM1NTUzOA==", "url": "https://github.com/gridgain/gridgain/pull/1426#discussion_r500355538", "body": "rather\r\n\r\n```suggestion\r\n * Handler for {@link GridRestCommand#PROBE}.\r\n```", "bodyText": "rather\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Handler for {@link GridRestCommand#VERSION} and {@link GridRestCommand#NAME} command.\n          \n          \n            \n             * Handler for {@link GridRestCommand#PROBE}.", "bodyHTML": "<p dir=\"auto\">rather</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Handler</span> <span class=\"pl-k\">for</span> {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">GridRestCommand</span>#<span class=\"pl-c1 x x-first\">VERSION</span><span class=\"x\">} and {</span><span class=\"pl-k x\">@link</span><span class=\"x\"> </span><span class=\"pl-smi x\">GridRestCommand</span><span class=\"x\">#</span><span class=\"pl-c1 x\">NAME</span><span class=\"x x-last\">} command</span>.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Handler</span> <span class=\"pl-k\">for</span> {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">GridRestCommand</span>#<span class=\"pl-c1 x x-first\">PROBE</span><span class=\"x x-last\">}</span><span class=\"pl-c1\">.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "slukyano", "createdAt": "2020-10-06T14:51:35Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/probe/GridProbeCommandHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.rest.handlers.probe;\n+\n+import java.util.Collection;\n+import org.apache.ignite.internal.GridKernalContext;\n+import org.apache.ignite.internal.IgniteInternalFuture;\n+import org.apache.ignite.internal.IgnitionEx;\n+import org.apache.ignite.internal.processors.rest.GridRestCommand;\n+import org.apache.ignite.internal.processors.rest.GridRestResponse;\n+import org.apache.ignite.internal.processors.rest.handlers.GridRestCommandHandlerAdapter;\n+import org.apache.ignite.internal.processors.rest.request.GridRestRequest;\n+import org.apache.ignite.internal.util.future.GridFinishedFuture;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+\n+import static org.apache.ignite.internal.processors.rest.GridRestCommand.PROBE;\n+\n+/**\n+ * Handler for {@link GridRestCommand#VERSION} and {@link GridRestCommand#NAME} command.", "originalCommit": "2e2a37a5a985268741e9f494c0e59f2c343372c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM2Njk5Nw==", "url": "https://github.com/gridgain/gridgain/pull/1426#discussion_r500366997", "body": "I have a few suggestions about this\r\n\r\n1. Let's just return \"false\" while this is not ready instead of blocking the call\r\n2. I think this implementation tells that the node is \"ready\" too early. The node will be returned from the `grid` method way before it finished initializing. I even think that the condition `IgnitionEx.grid(ctx.igniteInstanceName()) == null` is always false - if we've started the REST processor then the node is already obtainable from the `grid` method.\r\n\r\nHow about checking the `org.apache.ignite.internal.IgnitionEx.IgniteNamedInstance#startLatch` latch here? Just check whether the latch's `getCount() != 0`. Would need to expose it to REST processor somehow though (probably better to expose a method like `IgnitionEx.hasStarted(grid)` instead of exposing the latch itself).", "bodyText": "I have a few suggestions about this\n\nLet's just return \"false\" while this is not ready instead of blocking the call\nI think this implementation tells that the node is \"ready\" too early. The node will be returned from the grid method way before it finished initializing. I even think that the condition IgnitionEx.grid(ctx.igniteInstanceName()) == null is always false - if we've started the REST processor then the node is already obtainable from the grid method.\n\nHow about checking the org.apache.ignite.internal.IgnitionEx.IgniteNamedInstance#startLatch latch here? Just check whether the latch's getCount() != 0. Would need to expose it to REST processor somehow though (probably better to expose a method like IgnitionEx.hasStarted(grid) instead of exposing the latch itself).", "bodyHTML": "<p dir=\"auto\">I have a few suggestions about this</p>\n<ol dir=\"auto\">\n<li>Let's just return \"false\" while this is not ready instead of blocking the call</li>\n<li>I think this implementation tells that the node is \"ready\" too early. The node will be returned from the <code>grid</code> method way before it finished initializing. I even think that the condition <code>IgnitionEx.grid(ctx.igniteInstanceName()) == null</code> is always false - if we've started the REST processor then the node is already obtainable from the <code>grid</code> method.</li>\n</ol>\n<p dir=\"auto\">How about checking the <code>org.apache.ignite.internal.IgnitionEx.IgniteNamedInstance#startLatch</code> latch here? Just check whether the latch's <code>getCount() != 0</code>. Would need to expose it to REST processor somehow though (probably better to expose a method like <code>IgnitionEx.hasStarted(grid)</code> instead of exposing the latch itself).</p>", "author": "slukyano", "createdAt": "2020-10-06T15:03:34Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/probe/GridProbeCommandHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.rest.handlers.probe;\n+\n+import java.util.Collection;\n+import org.apache.ignite.internal.GridKernalContext;\n+import org.apache.ignite.internal.IgniteInternalFuture;\n+import org.apache.ignite.internal.IgnitionEx;\n+import org.apache.ignite.internal.processors.rest.GridRestCommand;\n+import org.apache.ignite.internal.processors.rest.GridRestResponse;\n+import org.apache.ignite.internal.processors.rest.handlers.GridRestCommandHandlerAdapter;\n+import org.apache.ignite.internal.processors.rest.request.GridRestRequest;\n+import org.apache.ignite.internal.util.future.GridFinishedFuture;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+\n+import static org.apache.ignite.internal.processors.rest.GridRestCommand.PROBE;\n+\n+/**\n+ * Handler for {@link GridRestCommand#VERSION} and {@link GridRestCommand#NAME} command.\n+ */\n+public class GridProbeCommandHandler extends GridRestCommandHandlerAdapter {\n+    /**\n+     * @param ctx Context.\n+     */\n+    public GridProbeCommandHandler(GridKernalContext ctx) {\n+        super(ctx);\n+    }\n+\n+    /** Supported commands. */\n+    private static final Collection<GridRestCommand> SUPPORTED_COMMANDS = U.sealList(PROBE);\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<GridRestCommand> supportedCommands() {\n+        return SUPPORTED_COMMANDS;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public IgniteInternalFuture<GridRestResponse> handleAsync(GridRestRequest req) {\n+        assert req != null;\n+\n+        assert SUPPORTED_COMMANDS.contains(req.command());\n+\n+        switch (req.command()) {\n+            case PROBE: {\n+                if (log.isDebugEnabled())\n+                    log.debug(\"probe command handler invoked.\");\n+\n+                while (IgnitionEx.grid(ctx.igniteInstanceName()) == null) {\n+                    try {\n+                        Thread.sleep(1000L);", "originalCommit": "2e2a37a5a985268741e9f494c0e59f2c343372c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5MzY5NQ==", "url": "https://github.com/gridgain/gridgain/pull/1426#discussion_r508093695", "bodyText": "implemented -- see latest pull request.\n Using startLatch status to determine whether kernal has started. \nTest checks whether this works:\n1. start the grid on a seperate thread w/a plugin that will keep it waiting, at a point after rest http processor is ready, until signaled to proceed. \n2. when the grid.start() has reached the plugin init method(rest http processor has started now), issue a rest command against the non-fully started kernal. \n3. validate that the probe cmd has returned the appropriate erroneous code and message.", "author": "akorensh", "createdAt": "2020-10-19T22:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM2Njk5Nw=="}], "type": "inlineReview"}, {"oid": "aff33408455ba4869e702093c7ac18c78064a5ac", "url": "https://github.com/gridgain/gridgain/commit/aff33408455ba4869e702093c7ac18c78064a5ac", "message": "GG-29901 Implement readiness probe REST endpoint", "committedDate": "2020-10-19T22:09:27Z", "type": "forcePushed"}, {"oid": "abdeabea398a07db509f220e574daa97822f8a4d", "url": "https://github.com/gridgain/gridgain/commit/abdeabea398a07db509f220e574daa97822f8a4d", "message": "GG-29901 Implement readiness probe REST endpoint", "committedDate": "2020-10-23T20:00:13Z", "type": "commit"}, {"oid": "b4d9a3c41f116571a9d83405cedad40f48122c5d", "url": "https://github.com/gridgain/gridgain/commit/b4d9a3c41f116571a9d83405cedad40f48122c5d", "message": "GG-29901 Implement readiness probe REST endpoint", "committedDate": "2020-10-23T20:00:13Z", "type": "commit"}, {"oid": "50f97574e8d274a60d593af3454aaeaba33bfa48", "url": "https://github.com/gridgain/gridgain/commit/50f97574e8d274a60d593af3454aaeaba33bfa48", "message": "GG-29901 Implement readiness probe REST endpoint", "committedDate": "2020-10-23T20:00:13Z", "type": "commit"}, {"oid": "c3963173f0be7f66c0521d942593e1b70ed6f973", "url": "https://github.com/gridgain/gridgain/commit/c3963173f0be7f66c0521d942593e1b70ed6f973", "message": "GG-29901 Implement readiness probe REST endpoint", "committedDate": "2020-10-23T20:08:23Z", "type": "commit"}, {"oid": "a82e377916884e8a6415cab8284d38cafe5c2ee9", "url": "https://github.com/gridgain/gridgain/commit/a82e377916884e8a6415cab8284d38cafe5c2ee9", "message": "GG-29901 Implement readiness probe REST endpoint", "committedDate": "2020-10-23T20:08:38Z", "type": "commit"}, {"oid": "a82e377916884e8a6415cab8284d38cafe5c2ee9", "url": "https://github.com/gridgain/gridgain/commit/a82e377916884e8a6415cab8284d38cafe5c2ee9", "message": "GG-29901 Implement readiness probe REST endpoint", "committedDate": "2020-10-23T20:08:38Z", "type": "forcePushed"}, {"oid": "21312b7c1ac6c43a29428ad992cd2fd916bab019", "url": "https://github.com/gridgain/gridgain/commit/21312b7c1ac6c43a29428ad992cd2fd916bab019", "message": "GG-29901 Implement readiness probe REST endpoint", "committedDate": "2020-10-26T14:48:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMDk1Mw==", "url": "https://github.com/gridgain/gridgain/pull/1426#discussion_r513520953", "body": "```suggestion\r\n    public static Map<String, Object> executeProbeRestRequest() throws IOException {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static Map<String, Object> exectuteProbeRestRequest() throws IOException {\n          \n          \n            \n                public static Map<String, Object> executeProbeRestRequest() throws IOException {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt;</span> <span class=\"x x-first x-last\">exectuteProbeRestRequest</span>() throws <span class=\"pl-smi\">IOException</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt;</span> <span class=\"x x-first x-last\">executeProbeRestRequest</span>() throws <span class=\"pl-smi\">IOException</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "slukyano", "createdAt": "2020-10-28T15:06:31Z", "path": "modules/rest-http/src/test/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridProbeCommandTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.rest.protocols.http.jetty;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import org.apache.ignite.configuration.ConnectorConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteInternalFuture;\n+import org.apache.ignite.internal.processors.rest.GridRestCommand;\n+import org.apache.ignite.internal.processors.rest.GridRestResponse;\n+import org.apache.ignite.internal.processors.rest.handlers.GridRestCommandHandler;\n+import org.apache.ignite.internal.processors.rest.handlers.probe.GridProbeCommandHandler;\n+import org.apache.ignite.internal.processors.rest.request.GridRestCacheRequest;\n+import org.apache.ignite.plugin.AbstractTestPluginProvider;\n+import org.apache.ignite.plugin.PluginProvider;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+/**\n+ * REST probe cmd test.\n+ */\n+public class GridProbeCommandTest extends GridCommonAbstractTest {\n+\n+    private static final int JETTY_PORT = 8080;\n+\n+    private CountDownLatch triggerRestCmdLatch = new CountDownLatch(1);\n+\n+    private CountDownLatch triggerPluginStartLatch = new CountDownLatch(1);\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+        cfg.setConnectorConfiguration(new ConnectorConfiguration());\n+\n+        if (igniteInstanceName.equals(\"regular\")) return cfg;\n+        else if (igniteInstanceName.equals(\"delayedStart\")) {\n+            PluginProvider delayedStartPluginProvider = new DelayedStartPluginProvider(triggerPluginStartLatch, triggerRestCmdLatch);\n+\n+            cfg.setPluginProviders(new PluginProvider[] {delayedStartPluginProvider});\n+        }\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override protected void afterTest() throws Exception {\n+        super.afterTest();\n+\n+        stopAllGrids(false);\n+    }\n+\n+    /**\n+     * <p>Test for the REST probe command\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testRestProbeCommand() throws Exception {\n+        startGrid(\"regular\");\n+\n+        GridRestCommandHandler hnd = new GridProbeCommandHandler((grid(\"regular\")).context());\n+\n+        GridRestCacheRequest req = new GridRestCacheRequest();\n+        req.command(GridRestCommand.PROBE);\n+\n+        IgniteInternalFuture<GridRestResponse> resp = hnd.handleAsync(req);\n+        resp.get();\n+\n+        assertEquals(GridRestResponse.STATUS_SUCCESS, resp.result().getSuccessStatus());\n+        assertEquals(\"grid has started\", resp.result().getResponse());\n+\n+    }\n+\n+    /**\n+     * <p>Test rest cmd=probe command given a non fully started kernal. </p>\n+     *  <p>1. start the grid on a seperate thread w/a plugin that will keep it waiting, at a point after rest http processor is ready, until signaled to proceed. </p>\n+     *  <p>2. when the grid.start() has reached the plugin init method(rest http processor has started now), issue a rest command against the non-fully started kernal. </p>\n+     *  <p>3. validate that the probe cmd has returned the appropriate erroneous code and message. </p>\n+     *  <p>4. stop the grid. </p>\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testRestProbeCommandGridNotStarted() throws Exception {\n+\n+        new Thread(new Runnable() {\n+            @Override public void run() {\n+                try {\n+                    startGrid(\"delayedStart\");\n+                }\n+                catch (Exception e) {\n+                    log.error(\"error when starting delatedStart grid\", e);\n+                }\n+            }\n+        }).start();\n+\n+        Map<String, Object> probeRestCommandResponse;\n+\n+        log.info(\"awaiting plugin handler latch\");\n+        triggerPluginStartLatch.await();\n+        log.info(\"starting rest command url call\");\n+        try {\n+            probeRestCommandResponse = exectuteProbeRestRequest();\n+            log.info(\"finished rest command url call\");\n+        } finally {\n+            triggerRestCmdLatch.countDown(); //make sure the grid shuts down\n+        }\n+\n+        assertTrue(probeRestCommandResponse.get(\"error\").equals(\"grid has not started\"));\n+        assertEquals(GridRestResponse.SC_FORBIDDEN, probeRestCommandResponse.get(\"successStatus\"));\n+    }\n+\n+    /**\n+     * <p>Start a regular grid, issue a cmd=probe rest command, and validate restponse\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testRestProbeCommandGridStarted() throws Exception {\n+\n+        startGrid(\"regular\");\n+\n+        Map<String, Object> probeRestCommandResponse;\n+\n+        probeRestCommandResponse = exectuteProbeRestRequest();\n+\n+        assertTrue(probeRestCommandResponse.get(\"response\").equals(\"grid has started\"));\n+        assertEquals(0, probeRestCommandResponse.get(\"successStatus\"));\n+    }\n+\n+    public static Map<String, Object> exectuteProbeRestRequest() throws IOException {", "originalCommit": "21312b7c1ac6c43a29428ad992cd2fd916bab019", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyODc0NQ==", "url": "https://github.com/gridgain/gridgain/pull/1426#discussion_r513528745", "body": "```suggestion\r\n    /** HTTP REQUEST not allowed */\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //** HTTP REQUEST not allowed */\n          \n          \n            \n                /** HTTP REQUEST not allowed */", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c\"><span class=\"pl-c\">/<span class=\"x x-first x-last\">/</span></span>** HTTP REQUEST not allowed */</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-c\"><span class=\"pl-c\">/*</span>* HTTP REQUEST not allowed <span class=\"pl-c\">*/</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "slukyano", "createdAt": "2020-10-28T15:16:07Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestResponse.java", "diffHunk": "@@ -50,6 +50,9 @@\n     /** Success status. */\n     private int successStatus = STATUS_SUCCESS;\n \n+    //** HTTP REQUEST not allowed */", "originalCommit": "21312b7c1ac6c43a29428ad992cd2fd916bab019", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzMTEwOA==", "url": "https://github.com/gridgain/gridgain/pull/1426#discussion_r513531108", "body": "better to use 503 \"SERVICE UNAVAILABLE\"", "bodyText": "better to use 503 \"SERVICE UNAVAILABLE\"", "bodyHTML": "<p dir=\"auto\">better to use 503 \"SERVICE UNAVAILABLE\"</p>", "author": "slukyano", "createdAt": "2020-10-28T15:19:13Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestResponse.java", "diffHunk": "@@ -50,6 +50,9 @@\n     /** Success status. */\n     private int successStatus = STATUS_SUCCESS;\n \n+    //** HTTP REQUEST not allowed */\n+    public static final int SC_FORBIDDEN = 403;", "originalCommit": "21312b7c1ac6c43a29428ad992cd2fd916bab019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwOTE5Mg==", "url": "https://github.com/gridgain/gridgain/pull/1426#discussion_r514309192", "bodyText": "done.", "author": "akorensh", "createdAt": "2020-10-29T14:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzMTEwOA=="}], "type": "inlineReview"}, {"oid": "a8036181ecb96121b384c600e1197043ae125b75", "url": "https://github.com/gridgain/gridgain/commit/a8036181ecb96121b384c600e1197043ae125b75", "message": "GG-29901 Implement readiness probe REST endpoint", "committedDate": "2020-10-28T22:15:39Z", "type": "commit"}, {"oid": "a8036181ecb96121b384c600e1197043ae125b75", "url": "https://github.com/gridgain/gridgain/commit/a8036181ecb96121b384c600e1197043ae125b75", "message": "GG-29901 Implement readiness probe REST endpoint", "committedDate": "2020-10-28T22:15:39Z", "type": "forcePushed"}]}