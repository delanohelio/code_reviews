{"pr_number": 8332, "pr_title": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "pr_author": "pruivo", "pr_createdAt": "2020-05-15T16:08:24Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8332", "timeline": [{"oid": "5ed891434c240ba3152ddc3eb4fc156b548f1734", "url": "https://github.com/infinispan/infinispan/commit/5ed891434c240ba3152ddc3eb4fc156b548f1734", "message": "wip...", "committedDate": "2020-05-18T14:33:03Z", "type": "forcePushed"}, {"oid": "96b2ed605b91c31a2cb8caf786595b879951872c", "url": "https://github.com/infinispan/infinispan/commit/96b2ed605b91c31a2cb8caf786595b879951872c", "message": "wip...", "committedDate": "2020-05-19T14:43:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg4NDkwOA==", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r427884908", "body": "We should probably create a `org.infinispan.xsite.spi` package for the SPI. This is how we separate the SPI from the implementation in `org.infinispan.persistence`.", "bodyText": "We should probably create a org.infinispan.xsite.spi package for the SPI. This is how we separate the SPI from the implementation in org.infinispan.persistence.", "bodyHTML": "<p dir=\"auto\">We should probably create a <code>org.infinispan.xsite.spi</code> package for the SPI. This is how we separate the SPI from the implementation in <code>org.infinispan.persistence</code>.</p>", "author": "ryanemerson", "createdAt": "2020-05-20T09:53:03Z", "path": "core/src/main/java/org/infinispan/xsite/conflict/XSiteConflictResolver.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.infinispan.xsite.conflict;", "originalCommit": "96b2ed605b91c31a2cb8caf786595b879951872c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg4Njk1MA==", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r427886950", "body": "For usability it's probably worth exposing an ENUM for the built in resolution policies like \"PreferNullConflictResolver\". For CR we do this by loading the class if the provided value does not equal one of the provided enum values:\r\n\r\nhttps://github.com/infinispan/infinispan/blob/8150e1dabe7e95167088b0301a202984f1d19748/core/src/main/java/org/infinispan/configuration/parsing/Parser.java#L1289-L1294", "bodyText": "For usability it's probably worth exposing an ENUM for the built in resolution policies like \"PreferNullConflictResolver\". For CR we do this by loading the class if the provided value does not equal one of the provided enum values:\n\n  \n    \n      infinispan/core/src/main/java/org/infinispan/configuration/parsing/Parser.java\n    \n    \n        Lines 1289 to 1294\n      in\n      8150e1d\n    \n    \n    \n    \n\n        \n          \n           case MERGE_POLICY: { \n        \n\n        \n          \n              MergePolicy mp = MergePolicy.fromString(value); \n        \n\n        \n          \n              EntryMergePolicy mergePolicy = mp == MergePolicy.CUSTOM ? Util.getInstance(value, holder.getClassLoader()) : mp; \n        \n\n        \n          \n              ph.mergePolicy(mergePolicy); \n        \n\n        \n          \n              break; \n        \n\n        \n          \n           }", "bodyHTML": "<p dir=\"auto\">For usability it's probably worth exposing an ENUM for the built in resolution policies like \"PreferNullConflictResolver\". For CR we do this by loading the class if the provided value does not equal one of the provided enum values:</p>\n<p dir=\"auto\"><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/infinispan/infinispan/blob/8150e1dabe7e95167088b0301a202984f1d19748/core/src/main/java/org/infinispan/configuration/parsing/Parser.java#L1289-L1294\">infinispan/core/src/main/java/org/infinispan/configuration/parsing/Parser.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 1289 to 1294\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/infinispan/infinispan/commit/8150e1dabe7e95167088b0301a202984f1d19748\">8150e1d</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L1289\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"1289\"></td>\n          <td id=\"LC1289\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">case</span> <span class=\"pl-c1\">MERGE_POLICY</span><span class=\"pl-k\">:</span> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1290\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"1290\"></td>\n          <td id=\"LC1290\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">    <span class=\"pl-smi\">MergePolicy</span> mp <span class=\"pl-k\">=</span> <span class=\"pl-smi\">MergePolicy</span><span class=\"pl-k\">.</span>fromString(value); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1291\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"1291\"></td>\n          <td id=\"LC1291\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">    <span class=\"pl-smi\">EntryMergePolicy</span> mergePolicy <span class=\"pl-k\">=</span> mp <span class=\"pl-k\">==</span> <span class=\"pl-smi\">MergePolicy</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CUSTOM</span> <span class=\"pl-k\">?</span> <span class=\"pl-smi\">Util</span><span class=\"pl-k\">.</span>getInstance(value, holder<span class=\"pl-k\">.</span>getClassLoader()) <span class=\"pl-k\">:</span> mp; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1292\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"1292\"></td>\n          <td id=\"LC1292\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">    ph<span class=\"pl-k\">.</span>mergePolicy(mergePolicy); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1293\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"1293\"></td>\n          <td id=\"LC1293\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">    <span class=\"pl-k\">break</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1294\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"1294\"></td>\n          <td id=\"LC1294\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "ryanemerson", "createdAt": "2020-05-20T09:56:25Z", "path": "core/src/main/java/org/infinispan/configuration/parsing/Parser.java", "diffHunk": "@@ -1253,19 +1253,25 @@ private void parseSharedStateCacheElement(XMLExtendedStreamReader reader, Elemen\n       }\n    }\n \n-   private void parseBackups(XMLExtendedStreamReader reader, ConfigurationBuilder builder) throws XMLStreamException {\n+   private void parseBackups(XMLExtendedStreamReader reader, ConfigurationBuilderHolder holder) throws XMLStreamException {\n+      ConfigurationBuilder builder = holder.getCurrentConfigurationBuilder();\n       // If backups is present then remove any existing backups as they were added by the default config.\n       builder.sites().backups().clear();\n+      for (int i = 0; i < reader.getAttributeCount(); i++) {\n+         String value = reader.getAttributeValue(i);\n+         Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n+         if (attribute == Attribute.CONFLICT_RESOLVER) {", "originalCommit": "96b2ed605b91c31a2cb8caf786595b879951872c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7bbc87bb9d6fdafe7134fe04cd68084ceda5acd9", "url": "https://github.com/infinispan/infinispan/commit/7bbc87bb9d6fdafe7134fe04cd68084ceda5acd9", "message": "wip...", "committedDate": "2020-07-06T08:26:51Z", "type": "forcePushed"}, {"oid": "8d8c33c4eb856dc1c479ad740771e97f67e5635a", "url": "https://github.com/infinispan/infinispan/commit/8d8c33c4eb856dc1c479ad740771e97f67e5635a", "message": "wip...", "committedDate": "2020-07-10T14:41:27Z", "type": "forcePushed"}, {"oid": "55e3a9550ecd44a81836fa65f6eafcfa9b734526", "url": "https://github.com/infinispan/infinispan/commit/55e3a9550ecd44a81836fa65f6eafcfa9b734526", "message": "wip...", "committedDate": "2020-07-21T09:31:48Z", "type": "forcePushed"}, {"oid": "751e56bbd45d02cffe136cc65e374585fca2ba31", "url": "https://github.com/infinispan/infinispan/commit/751e56bbd45d02cffe136cc65e374585fca2ba31", "message": "wip...", "committedDate": "2020-07-22T15:18:02Z", "type": "forcePushed"}, {"oid": "506883579e33a40d97e52e25c2b1d7e764e6ee97", "url": "https://github.com/infinispan/infinispan/commit/506883579e33a40d97e52e25c2b1d7e764e6ee97", "message": "wip...", "committedDate": "2020-07-27T09:39:35Z", "type": "forcePushed"}, {"oid": "01e7a5044dcdcd30ff017f0f83e914f254a815cb", "url": "https://github.com/infinispan/infinispan/commit/01e7a5044dcdcd30ff017f0f83e914f254a815cb", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "committedDate": "2020-07-27T12:56:36Z", "type": "forcePushed"}, {"oid": "0ecf450b4b1845d0ac92fe5232e9f70ad559c533", "url": "https://github.com/infinispan/infinispan/commit/0ecf450b4b1845d0ac92fe5232e9f70ad559c533", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "committedDate": "2020-07-28T08:10:45Z", "type": "forcePushed"}, {"oid": "9e58f1bb4aed1ccf80e27a7dbdf50fb535f8d2a9", "url": "https://github.com/infinispan/infinispan/commit/9e58f1bb4aed1ccf80e27a7dbdf50fb535f8d2a9", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "committedDate": "2020-07-28T13:33:36Z", "type": "forcePushed"}, {"oid": "f1fc2cf49986ef2f540d358c862d71ac83185e2b", "url": "https://github.com/infinispan/infinispan/commit/f1fc2cf49986ef2f540d358c862d71ac83185e2b", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "committedDate": "2020-07-28T13:35:41Z", "type": "forcePushed"}, {"oid": "9219961ad4d617f3e9fdb1e0c7da1488b400e6ed", "url": "https://github.com/infinispan/infinispan/commit/9219961ad4d617f3e9fdb1e0c7da1488b400e6ed", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "committedDate": "2020-08-03T10:07:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkzOTg2NQ==", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r464939865", "body": "We should propose that users utilise the `BlockingManager` here.", "bodyText": "We should propose that users utilise the BlockingManager here.", "bodyHTML": "<p dir=\"auto\">We should propose that users utilise the <code>BlockingManager</code> here.</p>", "author": "ryanemerson", "createdAt": "2020-08-04T09:59:53Z", "path": "core/src/main/java/org/infinispan/xsite/spi/XSiteConflictResolver.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.infinispan.xsite.spi;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.metadata.Metadata;\n+\n+/**\n+ * An interface to resolve conflicts for asynchronous cross-site replication.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 12.0\n+ */\n+public interface XSiteConflictResolver<K, V> {\n+\n+   /**\n+    * Resolves conflicts for asynchronous cross-site replication.\n+    * <p>\n+    * When a conflict is detected (concurrent updates on the same key in different sites), this method is invoked with\n+    * the local data and the remote site's data ({@link SiteEntry}). It includes the value and the {@link Metadata}\n+    * associated.\n+    * <p>\n+    * The value and the {@link Metadata} may be {@code null}. If that is the case, it means the {@code key} doesn't\n+    * exist (for {@code localEntry}) or it is a remove operation (for {@code remoteEntry}).\n+    * <p>\n+    * The returned {@link SiteEntry} must be equal independent of the order of the arguments (i.e. {@code resolve(k, s1,\n+    * s2).equals(resolve(k, s2, s1))}) otherwise your date may be corrupted. It is allowed to return one of the\n+    * arguments ({@code localEntry} or {@code remoteEntry}) and to create a new {@link SiteEntry} with a new value.\n+    * <p>\n+    * Note: if the return {@link SiteEntry#getValue()} is {@code null}, Infinispan will interpret it to remove the\n+    * {@code key}.\n+    * <p>\n+    * Note2: This method shouldn't block (I/O or locks). If it needs to block, use a different thread and complete the\n+    * {@link CompletionStage} with the result.", "originalCommit": "9219961ad4d617f3e9fdb1e0c7da1488b400e6ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM5NjU1OA==", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r476396558", "bodyText": "done", "author": "pruivo", "createdAt": "2020-08-25T12:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkzOTg2NQ=="}], "type": "inlineReview"}, {"oid": "44d8b3ae83be89af8b5cb415372a4af9c2ddf19d", "url": "https://github.com/infinispan/infinispan/commit/44d8b3ae83be89af8b5cb415372a4af9c2ddf19d", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "committedDate": "2020-08-25T08:20:52Z", "type": "forcePushed"}, {"oid": "21fd6c8ba9ad6b336386c1420b513c70e2e3e200", "url": "https://github.com/infinispan/infinispan/commit/21fd6c8ba9ad6b336386c1420b513c70e2e3e200", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "committedDate": "2020-08-25T10:45:25Z", "type": "forcePushed"}, {"oid": "e6baef6b49e246014db7e3dfa2f32844435e0fef", "url": "https://github.com/infinispan/infinispan/commit/e6baef6b49e246014db7e3dfa2f32844435e0fef", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "committedDate": "2020-08-26T08:23:43Z", "type": "forcePushed"}, {"oid": "4067b1a763e010d9b8adcc48e87a0c3223fe7da0", "url": "https://github.com/infinispan/infinispan/commit/4067b1a763e010d9b8adcc48e87a0c3223fe7da0", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "committedDate": "2020-09-03T13:49:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgwOTUyMw==", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r483809523", "body": "Looks like just `return attribute` would work.", "bodyText": "Looks like just return attribute would work.", "bodyHTML": "<p dir=\"auto\">Looks like just <code>return attribute</code> would work.</p>", "author": "wburns", "createdAt": "2020-09-04T19:28:20Z", "path": "core/src/main/java/org/infinispan/configuration/cache/SitesConfiguration.java", "diffHunk": "@@ -165,4 +190,40 @@ public boolean equals(Object obj) {\n    public String toString() {\n       return \"SitesConfiguration [backupFor=\" + backupFor + \", allBackups=\" + allBackups + \", attributes=\" + attributes + \"]\";\n    }\n+\n+   @SuppressWarnings(\"rawtypes\")\n+   private static class MergePolicySerializer extends\n+         AttributeSerializer<XSiteEntryMergePolicy, SitesConfiguration, SitesConfigurationBuilder> {\n+      @Override\n+      public Object getSerializationValue(Attribute<XSiteEntryMergePolicy> attribute,\n+            SitesConfiguration configurationElement) {\n+         XSiteEntryMergePolicy<?, ?> entryMergePolicy = attribute.get();\n+         XSiteMergePolicy mergePolicy = XSiteMergePolicy.fromInstance(entryMergePolicy);\n+         return mergePolicy == null ? entryMergePolicy.getClass().getName() : mergePolicy.toString();\n+      }\n+\n+      @Override\n+      public Object readAttributeValue(String enclosingElement, AttributeDefinition attributeDefinition,\n+            Object attrValue, SitesConfigurationBuilder builderInfo) {\n+         assert attrValue instanceof String;\n+         return XSiteMergePolicy.instanceFromString((String) attrValue, builderInfo.getClass().getClassLoader());\n+      }\n+   }\n+\n+   @SuppressWarnings(\"rawtypes\")\n+   private static class MergePolicyAttributeCopier implements AttributeCopier<XSiteEntryMergePolicy> {\n+\n+      @Override\n+      public XSiteEntryMergePolicy copyAttribute(XSiteEntryMergePolicy attribute) {\n+         if (attribute == null) {\n+            return null;\n+         }\n+         if (attribute instanceof XSiteMergePolicy) {\n+            //the default implementations are immutable and can be reused.\n+            return ((XSiteMergePolicy) attribute).getInstance();", "originalCommit": "4067b1a763e010d9b8adcc48e87a0c3223fe7da0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMwODgyMQ==", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r484308821", "bodyText": "I want to use XSiteMergePolicy as an alias. When the configuration is created, the copyAttribute() is invoked and I want the real implementation.", "author": "pruivo", "createdAt": "2020-09-07T09:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgwOTUyMw=="}], "type": "inlineReview"}, {"oid": "ffd2331c609c091ced102ebbcadfdfdcd60486a7", "url": "https://github.com/infinispan/infinispan/commit/ffd2331c609c091ced102ebbcadfdfdcd60486a7", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "committedDate": "2020-09-07T09:22:41Z", "type": "forcePushed"}, {"oid": "a2a88a9fb3101b627564e69486164c4dc94637bf", "url": "https://github.com/infinispan/infinispan/commit/a2a88a9fb3101b627564e69486164c4dc94637bf", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "committedDate": "2020-09-07T09:34:46Z", "type": "commit"}, {"oid": "a2a88a9fb3101b627564e69486164c4dc94637bf", "url": "https://github.com/infinispan/infinispan/commit/a2a88a9fb3101b627564e69486164c4dc94637bf", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "committedDate": "2020-09-07T09:34:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIzMzMwNw==", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r478233307", "body": "```suggestion\r\n      throw new UnsupportedOperationException();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new IllegalStateException(); //should never be invoked.\n          \n          \n            \n                  throw new UnsupportedOperationException();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"31\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi x x-first x-last\">IllegalStateException</span>();<span class=\"x x-first\"> </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\">should never be invoked.</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"31\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi x x-first x-last\">UnsupportedOperationException</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "danberindei", "createdAt": "2020-08-27T08:05:26Z", "path": "core/src/main/java/org/infinispan/commands/irac/IracUpdateKeyCommand.java", "diffHunk": "@@ -23,26 +23,21 @@ protected IracUpdateKeyCommand(byte commandId, ByteString cacheName) {\n    @Override\n    public final CompletionStage<Void> performInLocalSite(BackupReceiver receiver, boolean preserveOrder) {\n       assert !preserveOrder : \"IRAC Update Command sent asynchronously!\";\n-      return receiver.forwardToPrimary(this);\n+      return executeOperation(receiver);\n    }\n \n-\n    @Override\n    public final CompletionStage<?> invokeAsync(ComponentRegistry registry) {\n-      return executeOperation(registry.getBackupReceiver().running());\n+      throw new IllegalStateException(); //should never be invoked.", "originalCommit": "e6baef6b49e246014db7e3dfa2f32844435e0fef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIzNDMzOA==", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r478234338", "body": "```suggestion\r\n * user's {@link XSiteEntryMergePolicy}.\r\n * The value (and metadata) can change until the command reaches the end\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * user's {@link XSiteEntryMergePolicy} installed. The value (and metadata) can change until the command reaches the end\n          \n          \n            \n             * user's {@link XSiteEntryMergePolicy}.\n          \n          \n            \n             * The value (and metadata) can change until the command reaches the end", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"25\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> user<span class=\"pl-s\"><span class=\"pl-pds\">'</span>s {@link XSiteEntryMergePolicy}<span class=\"x x-first x-last\"> installed. The value (and metadata) can change until the command reaches the end</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"25\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> user<span class=\"pl-s\"><span class=\"pl-pds\">'</span>s {@link XSiteEntryMergePolicy}<span class=\"x x-first x-last\">.</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"26\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> value (and metadata) can change until the command reaches the end</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "danberindei", "createdAt": "2020-08-27T08:07:20Z", "path": "core/src/main/java/org/infinispan/commands/write/IracPutKeyValueCommand.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.infinispan.commands.write;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.Objects;\n+\n+import org.infinispan.commands.CommandInvocationId;\n+import org.infinispan.commands.MetadataAwareCommand;\n+import org.infinispan.commands.Visitor;\n+import org.infinispan.commons.io.UnsignedNumeric;\n+import org.infinispan.context.InvocationContext;\n+import org.infinispan.context.impl.FlagBitSets;\n+import org.infinispan.interceptors.AsyncInterceptorChain;\n+import org.infinispan.interceptors.impl.CallInterceptor;\n+import org.infinispan.metadata.Metadata;\n+import org.infinispan.metadata.impl.PrivateMetadata;\n+import org.infinispan.xsite.spi.SiteEntry;\n+import org.infinispan.xsite.spi.XSiteEntryMergePolicy;\n+\n+/**\n+ * A {@link WriteCommand} used to handle updates from the remote site (for asynchronous cross-site replication).\n+ * <p>\n+ * Asynchronous cross-site replication may originate conflicts and this command allows to change its value based on the\n+ * user's {@link XSiteEntryMergePolicy} installed. The value (and metadata) can change until the command reaches the end", "originalCommit": "e6baef6b49e246014db7e3dfa2f32844435e0fef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ5NjAxNg==", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r478496016", "body": "Are any of the other IRAC commands transactional? Should IRAC even support transactional caches?", "bodyText": "Are any of the other IRAC commands transactional? Should IRAC even support transactional caches?", "bodyHTML": "<p dir=\"auto\">Are any of the other IRAC commands transactional? Should IRAC even support transactional caches?</p>", "author": "danberindei", "createdAt": "2020-08-27T15:14:12Z", "path": "core/src/main/java/org/infinispan/commands/write/IracPutKeyValueCommand.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.infinispan.commands.write;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.Objects;\n+\n+import org.infinispan.commands.CommandInvocationId;\n+import org.infinispan.commands.MetadataAwareCommand;\n+import org.infinispan.commands.Visitor;\n+import org.infinispan.commons.io.UnsignedNumeric;\n+import org.infinispan.context.InvocationContext;\n+import org.infinispan.context.impl.FlagBitSets;\n+import org.infinispan.interceptors.AsyncInterceptorChain;\n+import org.infinispan.interceptors.impl.CallInterceptor;\n+import org.infinispan.metadata.Metadata;\n+import org.infinispan.metadata.impl.PrivateMetadata;\n+import org.infinispan.xsite.spi.SiteEntry;\n+import org.infinispan.xsite.spi.XSiteEntryMergePolicy;\n+\n+/**\n+ * A {@link WriteCommand} used to handle updates from the remote site (for asynchronous cross-site replication).\n+ * <p>\n+ * Asynchronous cross-site replication may originate conflicts and this command allows to change its value based on the\n+ * user's {@link XSiteEntryMergePolicy} installed. The value (and metadata) can change until the command reaches the end\n+ * of the {@link AsyncInterceptorChain}, where the {@link CallInterceptor} checks its state and updates or removes the\n+ * key.\n+ * <p>\n+ * Note, this command is non-transactional, even for transactional caches. This simplifies the conflict resolution.", "originalCommit": "e6baef6b49e246014db7e3dfa2f32844435e0fef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTAzNDkwOA==", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r571034908", "body": "`ThreadLocalRandom` is better", "bodyText": "ThreadLocalRandom is better", "bodyHTML": "<p dir=\"auto\"><code>ThreadLocalRandom</code> is better</p>", "author": "danberindei", "createdAt": "2021-02-05T15:08:59Z", "path": "core/src/test/java/org/infinispan/test/TestingUtil.java", "diffHunk": "@@ -1443,7 +1443,10 @@ public static void checkMBeanOperationParameterNaming(MBeanServer mBeanServer, O\n    }\n \n    public static String generateRandomString(int numberOfChars) {\n-      Random r = new Random(System.currentTimeMillis());\n+      return generateRandomString(numberOfChars, new Random(System.currentTimeMillis()));", "originalCommit": "a2a88a9fb3101b627564e69486164c4dc94637bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTM4Mjc3MQ==", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r571382771", "body": "This test seems a bit over-engineered to me:\r\n\r\n* The Sync class could have been just a method `merge(XSiteEntryMergePolicy, SiteEntry, SiteEntry)`\r\n* The data providers could have been inlined, calling `doTest()` with the parameters explicitly instead of wrapping them in an `Object[][]` first.\r\n   Each method has its own data provider, so reuse is not a factor.", "bodyText": "This test seems a bit over-engineered to me:\n\nThe Sync class could have been just a method merge(XSiteEntryMergePolicy, SiteEntry, SiteEntry)\nThe data providers could have been inlined, calling doTest() with the parameters explicitly instead of wrapping them in an Object[][] first.\nEach method has its own data provider, so reuse is not a factor.", "bodyHTML": "<p dir=\"auto\">This test seems a bit over-engineered to me:</p>\n<ul dir=\"auto\">\n<li>The Sync class could have been just a method <code>merge(XSiteEntryMergePolicy, SiteEntry, SiteEntry)</code></li>\n<li>The data providers could have been inlined, calling <code>doTest()</code> with the parameters explicitly instead of wrapping them in an <code>Object[][]</code> first.<br>\nEach method has its own data provider, so reuse is not a factor.</li>\n</ul>", "author": "danberindei", "createdAt": "2021-02-06T08:07:38Z", "path": "core/src/test/java/org/infinispan/xsite/XSiteMergePolicyUnitTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.infinispan.xsite;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+\n+import java.util.Random;\n+\n+import org.infinispan.test.AbstractInfinispanTest;\n+import org.infinispan.test.TestingUtil;\n+import org.infinispan.util.concurrent.CompletionStages;\n+import org.infinispan.xsite.spi.AlwaysRemoveXSiteEntryMergePolicy;\n+import org.infinispan.xsite.spi.DefaultXSiteEntryMergePolicy;\n+import org.infinispan.xsite.spi.PreferNonNullXSiteEntryMergePolicy;\n+import org.infinispan.xsite.spi.PreferNullXSiteEntryMergePolicy;\n+import org.infinispan.xsite.spi.SiteEntry;\n+import org.infinispan.xsite.spi.XSiteEntryMergePolicy;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Unit test for all provided {@link XSiteEntryMergePolicy}.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 12.0\n+ */\n+@Test(groups = \"unit\", testName = \"xsite.XSiteMergePolicyUnitTest\")\n+public class XSiteMergePolicyUnitTest extends AbstractInfinispanTest {", "originalCommit": "a2a88a9fb3101b627564e69486164c4dc94637bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTM4MzE4NQ==", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r571383185", "body": "I didn't notice this when you first added `ManualIracManager`, but the comment would be much easier to understand (or maybe not even needed) if you called the method `disableXSite()` instead of `enable()`.", "bodyText": "I didn't notice this when you first added ManualIracManager, but the comment would be much easier to understand (or maybe not even needed) if you called the method disableXSite() instead of enable().", "bodyHTML": "<p dir=\"auto\">I didn't notice this when you first added <code>ManualIracManager</code>, but the comment would be much easier to understand (or maybe not even needed) if you called the method <code>disableXSite()</code> instead of <code>enable()</code>.</p>", "author": "danberindei", "createdAt": "2021-02-06T08:11:04Z", "path": "core/src/test/java/org/infinispan/xsite/irac/IracAlwaysRemoveConflictTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.infinispan.xsite.irac;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.BackupConfiguration;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.test.TestDataSCI;\n+import org.infinispan.test.TestingUtil;\n+import org.infinispan.util.TestOperation;\n+import org.infinispan.xsite.AbstractMultipleSitesTest;\n+import org.infinispan.xsite.spi.AlwaysRemoveXSiteEntryMergePolicy;\n+import org.infinispan.xsite.spi.XSiteMergePolicy;\n+import org.testng.AssertJUnit;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Function test for {@link AlwaysRemoveXSiteEntryMergePolicy}.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 12.0\n+ */\n+@Test(groups = \"functional\", testName = \"xsite.irac.IracAlwaysRemoveConflictTest\")\n+public class IracAlwaysRemoveConflictTest extends AbstractMultipleSitesTest {\n+   private static final int N_SITES = 2;\n+   private static final int CLUSTER_SIZE = 3;\n+   private final List<ManualIracManager> iracManagerList;\n+\n+   protected IracAlwaysRemoveConflictTest() {\n+      this.iracManagerList = new ArrayList<>(N_SITES * CLUSTER_SIZE);\n+   }\n+\n+   public void testPutIfAbsent(Method method) {\n+      doTest(method, TestOperation.PUT_IF_ABSENT);\n+   }\n+\n+   public void testPut(Method method) {\n+      doTest(method, TestOperation.PUT);\n+   }\n+\n+   public void testReplace(Method method) {\n+      doTest(method, TestOperation.REPLACE);\n+   }\n+\n+   public void testConditionalReplace(Method method) {\n+      doTest(method, TestOperation.REPLACE_CONDITIONAL);\n+   }\n+\n+   public void testRemove(Method method) {\n+      doTest(method, TestOperation.REMOVE);\n+   }\n+\n+   public void testConditionalRemove(Method method) {\n+      doTest(method, TestOperation.REMOVE_CONDITIONAL);\n+   }\n+\n+   @Override\n+   protected int defaultNumberOfSites() {\n+      return N_SITES;\n+   }\n+\n+   @Override\n+   protected int defaultNumberOfNodes() {\n+      return CLUSTER_SIZE;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder defaultConfigurationForSite(int siteIndex) {\n+      ConfigurationBuilder builder = getDefaultClusteredCacheConfig(CacheMode.DIST_SYNC);\n+      builder.sites().mergePolicy(XSiteMergePolicy.ALWAYS_REMOVE);\n+      for (int i = 0; i < N_SITES; ++i) {\n+         if (i == siteIndex) {\n+            //don't add our site as backup.\n+            continue;\n+         }\n+         builder.sites()\n+               .addBackup()\n+               .site(siteName(i))\n+               .strategy(BackupConfiguration.BackupStrategy.ASYNC);\n+      }\n+      return builder;\n+   }\n+\n+   @Override\n+   protected GlobalConfigurationBuilder defaultGlobalConfigurationForSite(int siteIndex) {\n+      GlobalConfigurationBuilder builder = GlobalConfigurationBuilder.defaultClusteredBuilder();\n+      builder.serialization().addContextInitializer(TestDataSCI.INSTANCE);\n+      return builder;\n+   }\n+\n+   @AfterMethod(alwaysRun = true)\n+   @Override\n+   protected void clearContent() throws Throwable {\n+      iracManagerList.forEach(iracManager -> iracManager.disable(ManualIracManager.DisableMode.DROP));\n+      super.clearContent();\n+   }\n+\n+   @Override\n+   protected void afterSitesCreated() {\n+      for (int i = 0; i < N_SITES; ++i) {\n+         for (Cache<?, ?> cache : caches(siteName(i))) {\n+            iracManagerList.add(ManualIracManager.wrapCache(cache));\n+         }\n+      }\n+   }\n+\n+   private void doTest(Method method, TestOperation testConfig) {\n+      final String key = TestingUtil.k(method, 0);\n+      final String initialValue = testConfig.requiresPreviousValue() ? TestingUtil.v(method, 0) : null;\n+\n+      //init cache if needed!\n+      if (testConfig.requiresPreviousValue()) {\n+         cache(siteName(0), 0).put(key, initialValue);\n+      }\n+      eventuallyAssertInAllSitesAndCaches(cache -> Objects.equals(initialValue, cache.get(key)));\n+\n+      //disable xsite so each site won't send anything to the others\n+      iracManagerList.forEach(ManualIracManager::enable);", "originalCommit": "a2a88a9fb3101b627564e69486164c4dc94637bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}