{"pr_number": 7960, "pr_title": "ISPN-11386 Use blocking thread pool in Persistent preload", "pr_author": "pruivo", "pr_createdAt": "2020-02-26T18:46:18Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7960", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMzc5MQ==", "url": "https://github.com/infinispan/infinispan/pull/7960#discussion_r384733791", "body": "```suggestion\r\n            .doOnNext(me -> preloadKey(flaggedCache, me))\r\n            .observeOn(nonBlockingScheduler)\r\n```\r\n\r\nWe already subscribe on the `blockingScheduler` below so there is no reason to invoke `observeOn` with the same value. We should really observe the completion on a non blocking thread since it is highly likely we may block on the completion in a blocking thread at some point.\r\n\r\nAnd technically it should do observeOn before hand if it isn't tx, but we can avoid that for now.\r\n\r\n\r\nWhile this change is fine with me, this really isn't a good idea to continue this on the blocking executor. This should really be done in a non blocking way if possible (ie. putAsync). I have logged https://issues.redhat.com/browse/ISPN-11387 to handle this better later when we can.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .observeOn(blockingScheduler)\n          \n          \n            \n                        .doOnNext(me -> preloadKey(flaggedCache, me))\n          \n          \n            \n                        .doOnNext(me -> preloadKey(flaggedCache, me))\n          \n          \n            \n                        .observeOn(nonBlockingScheduler)\n          \n      \n    \n    \n  \n\nWe already subscribe on the blockingScheduler below so there is no reason to invoke observeOn with the same value. We should really observe the completion on a non blocking thread since it is highly likely we may block on the completion in a blocking thread at some point.\nAnd technically it should do observeOn before hand if it isn't tx, but we can avoid that for now.\nWhile this change is fine with me, this really isn't a good idea to continue this on the blocking executor. This should really be done in a non blocking way if possible (ie. putAsync). I have logged https://issues.redhat.com/browse/ISPN-11387 to handle this better later when we can.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"379\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            .<span class=\"x x-first x-last\">observeOn(blockingScheduler</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"380\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            .<span class=\"x x-first\">doOnNext(me </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> preloadKey(flaggedCache, me)</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"379\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            .<span class=\"x x-first\">doOnNext(me </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> preloadKey(flaggedCache, me)</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"380\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            .<span class=\"x x-first x-last\">observeOn(nonBlockingScheduler</span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">We already subscribe on the <code>blockingScheduler</code> below so there is no reason to invoke <code>observeOn</code> with the same value. We should really observe the completion on a non blocking thread since it is highly likely we may block on the completion in a blocking thread at some point.</p>\n<p dir=\"auto\">And technically it should do observeOn before hand if it isn't tx, but we can avoid that for now.</p>\n<p dir=\"auto\">While this change is fine with me, this really isn't a good idea to continue this on the blocking executor. This should really be done in a non blocking way if possible (ie. putAsync). I have logged <a href=\"https://issues.redhat.com/browse/ISPN-11387\" rel=\"nofollow\">https://issues.redhat.com/browse/ISPN-11387</a> to handle this better later when we can.</p>", "author": "wburns", "createdAt": "2020-02-26T20:03:16Z", "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -376,7 +376,7 @@ public boolean isPreloaded() {\n       final AdvancedCache<Object, Object> flaggedCache = getCacheForStateInsertion();\n       return Flowable.fromPublisher(preloadCl.entryPublisher(null, true, true))\n             .take(maxEntries)\n-            .observeOn(nonBlockingScheduler)\n+            .observeOn(blockingScheduler)\n             .doOnNext(me -> preloadKey(flaggedCache, me))", "originalCommit": "598f0a8dc86f64675255d080c1cc7255091ac65f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2ODA0NQ==", "url": "https://github.com/infinispan/infinispan/pull/7960#discussion_r384768045", "bodyText": "done!", "author": "pruivo", "createdAt": "2020-02-26T21:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMzc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MDc5NA==", "url": "https://github.com/infinispan/infinispan/pull/7960#discussion_r384860794", "bodyText": "Actually, sorry Pedro, but can you move it down 1 more line. So the observeOn is after the count. Otherwise we will have up to N-1  context switches just to add a counter. After the counter it will only send 1 value downstream.", "author": "wburns", "createdAt": "2020-02-27T01:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMzc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk5NTEzNA==", "url": "https://github.com/infinispan/infinispan/pull/7960#discussion_r384995134", "bodyText": "updated! \ud83d\udc4d", "author": "pruivo", "createdAt": "2020-02-27T09:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMzc5MQ=="}], "type": "inlineReview"}, {"oid": "65f979cbdf85ee695f07fb10b9c9096434133a56", "url": "https://github.com/infinispan/infinispan/commit/65f979cbdf85ee695f07fb10b9c9096434133a56", "message": "ISPN-11386 Use blocking thread pool in Persistent preload", "committedDate": "2020-02-26T21:11:37Z", "type": "forcePushed"}, {"oid": "45a61f6c84e702410a545a141cb86bc75b1f8ef6", "url": "https://github.com/infinispan/infinispan/commit/45a61f6c84e702410a545a141cb86bc75b1f8ef6", "message": "ISPN-11386 Use blocking thread pool in Persistent preload", "committedDate": "2020-02-27T09:11:09Z", "type": "commit"}, {"oid": "45a61f6c84e702410a545a141cb86bc75b1f8ef6", "url": "https://github.com/infinispan/infinispan/commit/45a61f6c84e702410a545a141cb86bc75b1f8ef6", "message": "ISPN-11386 Use blocking thread pool in Persistent preload", "committedDate": "2020-02-27T09:11:09Z", "type": "forcePushed"}]}