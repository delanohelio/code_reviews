{"pr_number": 8944, "pr_title": "ISPN-11832 ProtobufMetadataManagerInterceptor is blocking", "pr_author": "wburns", "pr_createdAt": "2020-12-18T19:13:36Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8944", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYxNDUwNA==", "url": "https://github.com/infinispan/infinispan/pull/8944#discussion_r546614504", "body": "I'd remove this class entirely", "bodyText": "I'd remove this class entirely", "bodyHTML": "<p dir=\"auto\">I'd remove this class entirely</p>", "author": "anistor", "createdAt": "2020-12-21T10:01:53Z", "path": "remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/impl/RemoteQueryServerBlockHoundIntegration.java", "diffHunk": "@@ -10,12 +9,5 @@\n public class RemoteQueryServerBlockHoundIntegration implements BlockHoundIntegration {", "originalCommit": "c826eff0e3ac6e4e56a232c712a9130a2f96f229", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM3NTkxMQ==", "url": "https://github.com/infinispan/infinispan/pull/8944#discussion_r551375911", "bodyText": "Okay.", "author": "wburns", "createdAt": "2021-01-04T15:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYxNDUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwNTU1OQ==", "url": "https://github.com/infinispan/infinispan/pull/8944#discussion_r547405559", "body": "There is an older issue here (also present in the old blocking code).\r\n\r\nThe global errors key should contain the errors in all the schemas, not just the errors from the latest schema added/updated. So the interceptor can't use a `PutKeyValueCommand`, it should use a `ComputeCommand` or similar to remove the successful keys and add the new error keys to the global errors atomically.", "bodyText": "There is an older issue here (also present in the old blocking code).\nThe global errors key should contain the errors in all the schemas, not just the errors from the latest schema added/updated. So the interceptor can't use a PutKeyValueCommand, it should use a ComputeCommand or similar to remove the successful keys and add the new error keys to the global errors atomically.", "bodyHTML": "<p dir=\"auto\">There is an older issue here (also present in the old blocking code).</p>\n<p dir=\"auto\">The global errors key should contain the errors in all the schemas, not just the errors from the latest schema added/updated. So the interceptor can't use a <code>PutKeyValueCommand</code>, it should use a <code>ComputeCommand</code> or similar to remove the successful keys and add the new error keys to the global errors atomically.</p>", "author": "danberindei", "createdAt": "2020-12-22T17:29:29Z", "path": "remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerInterceptor.java", "diffHunk": "@@ -472,7 +523,7 @@ private void updateGlobalErrors(InvocationContext ctx, Set<String> errorFiles, l\n          cmd = commandsFactory.buildPutKeyValueCommand(ERRORS_KEY_SUFFIX, sb.toString(),\n                keyPartitioner.getSegment(ERRORS_KEY_SUFFIX), DEFAULT_METADATA, flagsBitSet);\n       }\n-      invoker.running().invoke(ctx, cmd);\n+      return invoker.running().invokeAsync(ctx, cmd);", "originalCommit": "c826eff0e3ac6e4e56a232c712a9130a2f96f229", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg0MzEwOQ==", "url": "https://github.com/infinispan/infinispan/pull/8944#discussion_r547843109", "bodyText": "Old indeed. Now I remember it. I hope there's a JIRA for it.", "author": "anistor", "createdAt": "2020-12-23T09:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwNTU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDAwMjA5NQ==", "url": "https://github.com/infinispan/infinispan/pull/8944#discussion_r560002095", "bodyText": "I created https://issues.redhat.com/browse/ISPN-12631", "author": "danberindei", "createdAt": "2021-01-19T08:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwNTU1OQ=="}], "type": "inlineReview"}, {"oid": "2c2add9cccaac04de50910d9f0eeb0ffa80d3f54", "url": "https://github.com/infinispan/infinispan/commit/2c2add9cccaac04de50910d9f0eeb0ffa80d3f54", "message": "ISPN-11832 ProtobufMetadataManagerInterceptor is blocking", "committedDate": "2021-01-04T15:14:19Z", "type": "forcePushed"}, {"oid": "c6c88540012a6f4057da5ec31de72ec597c81d04", "url": "https://github.com/infinispan/infinispan/commit/c6c88540012a6f4057da5ec31de72ec597c81d04", "message": "ISPN-11832 ProtobufMetadataManagerInterceptor is blocking", "committedDate": "2021-01-04T15:14:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk3Nzc4OQ==", "url": "https://github.com/infinispan/infinispan/pull/8944#discussion_r559977789", "body": "IMO having a separate `if` here makes sense only if you move this line out of the `if` below:\r\n\r\n```\r\nregisterProtoFile((String) key, (String) value, progressCallback);\r\n```\r\n\r\nI'd rather move the lines of this `if` block inside the `if` block above that assigns a non-null value to `progressCallback` instead.", "bodyText": "IMO having a separate if here makes sense only if you move this line out of the if below:\nregisterProtoFile((String) key, (String) value, progressCallback);\n\nI'd rather move the lines of this if block inside the if block above that assigns a non-null value to progressCallback instead.", "bodyHTML": "<p dir=\"auto\">IMO having a separate <code>if</code> here makes sense only if you move this line out of the <code>if</code> below:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"registerProtoFile((String) key, (String) value, progressCallback);\"><pre><code>registerProtoFile((String) key, (String) value, progressCallback);\n</code></pre></div>\n<p dir=\"auto\">I'd rather move the lines of this <code>if</code> block inside the <code>if</code> block above that assigns a non-null value to <code>progressCallback</code> instead.</p>", "author": "danberindei", "createdAt": "2021-01-19T08:02:19Z", "path": "remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerInterceptor.java", "diffHunk": "@@ -276,9 +285,32 @@ private void handlePutKeyValueResult(InvocationContext rCtx, PutKeyValueCommand\n          }\n \n          if (progressCallback != null) {\n-            updateGlobalErrors(rCtx, progressCallback.getErrorFiles(), flagsBitSet);\n+            CompletionStage<Void> schemaUpdate = updateSchema(rCtx, progressCallback);", "originalCommit": "c6c88540012a6f4057da5ec31de72ec597c81d04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQ2NTMyMw==", "url": "https://github.com/infinispan/infinispan/pull/8944#discussion_r560465323", "bodyText": "Sure. Also can remove the else block as well.", "author": "wburns", "createdAt": "2021-01-19T20:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk3Nzc4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk4MDMxOA==", "url": "https://github.com/infinispan/infinispan/pull/8944#discussion_r559980318", "body": "I think `updateSchemaErrors` would be a bit better", "bodyText": "I think updateSchemaErrors would be a bit better", "bodyHTML": "<p dir=\"auto\">I think <code>updateSchemaErrors</code> would be a bit better</p>", "author": "danberindei", "createdAt": "2021-01-19T08:07:18Z", "path": "remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerInterceptor.java", "diffHunk": "@@ -276,9 +285,32 @@ private void handlePutKeyValueResult(InvocationContext rCtx, PutKeyValueCommand\n          }\n \n          if (progressCallback != null) {\n-            updateGlobalErrors(rCtx, progressCallback.getErrorFiles(), flagsBitSet);\n+            CompletionStage<Void> schemaUpdate = updateSchema(rCtx, progressCallback);\n+            CompletionStage<Object> errorUpdate = updateGlobalErrors(rCtx, progressCallback.getErrorFiles().keySet(), flagsBitSet);\n+\n+            return asyncValue(CompletionStages.allOf(schemaUpdate, errorUpdate))\n+                  .thenApplyMakeStage(rCtx, putKeyValueCommand, (rCtx2, rCommand2, rv2) -> rv);\n          }\n       }\n+      return SyncInvocationStage.makeStage(rv);\n+   }\n+\n+   CompletionStage<Void> updateSchema(InvocationContext ctx, ProgressCallback progressCallback) {", "originalCommit": "c6c88540012a6f4057da5ec31de72ec597c81d04", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk4NTEyMA==", "url": "https://github.com/infinispan/infinispan/pull/8944#discussion_r559985120", "body": "I suggest replacing all the instances of the \"lock .errors key\" comment with \"lock global errors key\", the fact that `.errors` is the key for global errors isn't obvious.\r\n\r\nMaybe even extract a method `lockGlobalErrors` to be used everywhere.", "bodyText": "I suggest replacing all the instances of the \"lock .errors key\" comment with \"lock global errors key\", the fact that .errors is the key for global errors isn't obvious.\nMaybe even extract a method lockGlobalErrors to be used everywhere.", "bodyHTML": "<p dir=\"auto\">I suggest replacing all the instances of the \"lock .errors key\" comment with \"lock global errors key\", the fact that <code>.errors</code> is the key for global errors isn't obvious.</p>\n<p dir=\"auto\">Maybe even extract a method <code>lockGlobalErrors</code> to be used everywhere.</p>", "author": "danberindei", "createdAt": "2021-01-19T08:15:59Z", "path": "remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerInterceptor.java", "diffHunk": "@@ -337,66 +369,81 @@ public Object visitPutMapCommand(InvocationContext ctx, PutMapCommand command) {\n          }\n \n          if (progressCallback != null) {\n-            updateGlobalErrors(rCtx, progressCallback.getErrorFiles(), flagsBitSet);\n+            CompletionStage<Void> schemaUpdate = updateSchema(rCtx, progressCallback);\n+            CompletionStage<Object> errorUpdate = updateGlobalErrors(rCtx, progressCallback.getErrorFiles().keySet(), flagsBitSet);\n+\n+            return asyncValue(CompletionStages.allOf(schemaUpdate, errorUpdate));\n          }\n+         return InvocationStage.completedNullStage();\n       });\n    }\n \n    @Override\n    public Object visitRemoveCommand(InvocationContext ctx, RemoveCommand command) {\n-      if (ctx.isOriginLocal()) {\n-         if (!(command.getKey() instanceof String)) {\n-            throw log.keyMustBeString(command.getKey().getClass());\n+      if (!ctx.isOriginLocal()) {\n+         return invokeNext(ctx, command);\n+      }\n+      if (!(command.getKey() instanceof String)) {\n+         throw log.keyMustBeString(command.getKey().getClass());\n+      }\n+      String key = (String) command.getKey();\n+      if (!shouldIntercept(key)) {\n+         return invokeNext(ctx, command);\n+      }\n+      // lock .errors key", "originalCommit": "c6c88540012a6f4057da5ec31de72ec597c81d04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQ2ODA1OA==", "url": "https://github.com/infinispan/infinispan/pull/8944#discussion_r560468058", "bodyText": "This isn't really related to my changes, other than indentation. I can make the text change as I don't want to mess something up while I am gone.", "author": "wburns", "createdAt": "2021-01-19T20:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk4NTEyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDczNTE2OA==", "url": "https://github.com/infinispan/infinispan/pull/8944#discussion_r560735168", "bodyText": "Yeah, it's not your comment, it was just annoying me every time I read it :)", "author": "danberindei", "createdAt": "2021-01-20T07:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk4NTEyMA=="}], "type": "inlineReview"}, {"oid": "88bfc617969342bcdf21b47ddcd8fc943d5d6f4a", "url": "https://github.com/infinispan/infinispan/commit/88bfc617969342bcdf21b47ddcd8fc943d5d6f4a", "message": "ISPN-11832 ProtobufMetadataManagerInterceptor is blocking", "committedDate": "2021-01-19T20:24:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDczNDQwOQ==", "url": "https://github.com/infinispan/infinispan/pull/8944#discussion_r560734409", "body": "You can move the lines inside the if above, just like in `handlePutKeyValueResult`", "bodyText": "You can move the lines inside the if above, just like in handlePutKeyValueResult", "bodyHTML": "<p dir=\"auto\">You can move the lines inside the if above, just like in <code>handlePutKeyValueResult</code></p>", "author": "danberindei", "createdAt": "2021-01-20T07:37:30Z", "path": "remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerInterceptor.java", "diffHunk": "@@ -436,9 +479,13 @@ public Object visitReplaceCommand(InvocationContext ctx, ReplaceCommand command)\n             }\n \n             if (progressCallback != null) {\n-               updateGlobalErrors(rCtx, progressCallback.getErrorFiles(), flagsBitSet);\n+               CompletionStage<Void> schemaUpdate = updateSchemaErrors(rCtx, progressCallback);", "originalCommit": "88bfc617969342bcdf21b47ddcd8fc943d5d6f4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk2NzU4Mg==", "url": "https://github.com/infinispan/infinispan/pull/8944#discussion_r561967582", "bodyText": "Okay, it is moved. I don't want to move the one in visitPutMapCommand though as it has other code in between that I am not exactly familiar with and don't want to mess with the logic this close to release.", "author": "wburns", "createdAt": "2021-01-21T15:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDczNDQwOQ=="}], "type": "inlineReview"}, {"oid": "f5ac6e973311e4c1f85719d20870b4b3bb4c13d9", "url": "https://github.com/infinispan/infinispan/commit/f5ac6e973311e4c1f85719d20870b4b3bb4c13d9", "message": "ISPN-11832 ProtobufMetadataManagerInterceptor is blocking", "committedDate": "2021-01-21T15:24:26Z", "type": "commit"}, {"oid": "f5ac6e973311e4c1f85719d20870b4b3bb4c13d9", "url": "https://github.com/infinispan/infinispan/commit/f5ac6e973311e4c1f85719d20870b4b3bb4c13d9", "message": "ISPN-11832 ProtobufMetadataManagerInterceptor is blocking", "committedDate": "2021-01-21T15:24:26Z", "type": "forcePushed"}]}