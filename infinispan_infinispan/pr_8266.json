{"pr_number": 8266, "pr_title": "ISPN-11744 Fix ManagedConnectionOperations", "pr_author": "tristantarrant", "pr_createdAt": "2020-04-30T06:40:29Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8266", "timeline": [{"oid": "2cd53919290e360fd701e90c5ff24087718a53dc", "url": "https://github.com/infinispan/infinispan/commit/2cd53919290e360fd701e90c5ff24087718a53dc", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-04-30T06:40:53Z", "type": "forcePushed"}, {"oid": "85cbab6a64c1d8ef47fa2a5b666b8df73b9a2ca5", "url": "https://github.com/infinispan/infinispan/commit/85cbab6a64c1d8ef47fa2a5b666b8df73b9a2ca5", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-04-30T12:25:26Z", "type": "forcePushed"}, {"oid": "e2f3abc28960f9e7647e26afc2df787dbebcddca", "url": "https://github.com/infinispan/infinispan/commit/e2f3abc28960f9e7647e26afc2df787dbebcddca", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-04-30T16:41:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwODAwOQ==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r418208009", "body": "Nit: add this parameter on a new line", "bodyText": "Nit: add this parameter on a new line", "bodyHTML": "<p dir=\"auto\">Nit: add this parameter on a new line</p>", "author": "alanfx", "createdAt": "2020-04-30T18:30:08Z", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/InfinispanServerTestConfiguration.java", "diffHunk": "@@ -18,10 +20,11 @@\n    private final JavaArchive[] archives;\n    private final boolean jmx;\n    private final boolean parallelStartup;\n+   private final List<InfinispanServerListener> listeners;\n \n    public InfinispanServerTestConfiguration(String configurationFile, int numServers, ServerRunMode runMode,\n                                             Properties properties, String[] mavenArtifacts, JavaArchive[] archives,\n-                                            boolean jmx, boolean parallelStartup) {\n+                                            boolean jmx, boolean parallelStartup, List<InfinispanServerListener> listeners) {", "originalCommit": "e2f3abc28960f9e7647e26afc2df787dbebcddca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwODI3Mw==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r418208273", "body": "Nit: Extra blank line", "bodyText": "Nit: Extra blank line", "bodyHTML": "<p dir=\"auto\">Nit: Extra blank line</p>", "author": "alanfx", "createdAt": "2020-04-30T18:30:41Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/DatabaseServerListener.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.InputStream;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.infinispan.server.test.core.InfinispanServerDriver;\n+import org.infinispan.server.test.core.InfinispanServerListener;\n+import org.infinispan.server.test.core.persistence.Database;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 10.0\n+ **/\n+public class DatabaseServerListener implements InfinispanServerListener {\n+   private static final Logger log = Logger.getLogger(DatabaseServerListener.class);\n+   public static final String DATABASES = \"org.infinispan.test.server.jdbc.databases\";\n+   private final String[] databaseTypes;\n+   public Map<String, Database> databases;\n+\n+   public DatabaseServerListener(String... databaseTypes) {\n+      String property = System.getProperty(DATABASES);\n+      if (property != null) {\n+         this.databaseTypes = property.split(\",\");\n+         log.infof(\"Overriding databases: %s\", this.databaseTypes);\n+      } else {\n+         this.databaseTypes = databaseTypes;\n+      }\n+", "originalCommit": "e2f3abc28960f9e7647e26afc2df787dbebcddca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwODQzMw==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r418208433", "body": "The formatting looks weird in this block?", "bodyText": "The formatting looks weird in this block?", "bodyHTML": "<p dir=\"auto\">The formatting looks weird in this block?</p>", "author": "alanfx", "createdAt": "2020-04-30T18:30:58Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/DatabaseServerListener.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.InputStream;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.infinispan.server.test.core.InfinispanServerDriver;\n+import org.infinispan.server.test.core.InfinispanServerListener;\n+import org.infinispan.server.test.core.persistence.Database;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 10.0\n+ **/\n+public class DatabaseServerListener implements InfinispanServerListener {\n+   private static final Logger log = Logger.getLogger(DatabaseServerListener.class);\n+   public static final String DATABASES = \"org.infinispan.test.server.jdbc.databases\";\n+   private final String[] databaseTypes;\n+   public Map<String, Database> databases;\n+\n+   public DatabaseServerListener(String... databaseTypes) {\n+      String property = System.getProperty(DATABASES);\n+      if (property != null) {\n+         this.databaseTypes = property.split(\",\");\n+         log.infof(\"Overriding databases: %s\", this.databaseTypes);\n+      } else {\n+         this.databaseTypes = databaseTypes;\n+      }\n+\n+   }\n+\n+   @Override\n+   public void before(InfinispanServerDriver driver) {\n+      databases = new LinkedHashMap<>(databaseTypes.length);\n+      for (int i = 0; i < databaseTypes.length; i++) {\n+         Database database  = initDatabase(databaseTypes[i]);\n+         log.infof(\"Starting database: %s\", database.getType());\n+         database.start();\n+         log.infof(\"Started database: %s\", database.getType());\n+         databases.put(databaseTypes[i], database);\n+        driver.getConfiguration().properties().put(\"org.infinispan.server.test.\"+ database.getType()+\".jdbcUrl\", database.jdbcUrl());", "originalCommit": "e2f3abc28960f9e7647e26afc2df787dbebcddca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwODUyMA==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r418208520", "body": "Nit: Extra blank line", "bodyText": "Nit: Extra blank line", "bodyHTML": "<p dir=\"auto\">Nit: Extra blank line</p>", "author": "alanfx", "createdAt": "2020-04-30T18:31:08Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/DatabaseServerListener.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.InputStream;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.infinispan.server.test.core.InfinispanServerDriver;\n+import org.infinispan.server.test.core.InfinispanServerListener;\n+import org.infinispan.server.test.core.persistence.Database;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 10.0\n+ **/\n+public class DatabaseServerListener implements InfinispanServerListener {\n+   private static final Logger log = Logger.getLogger(DatabaseServerListener.class);\n+   public static final String DATABASES = \"org.infinispan.test.server.jdbc.databases\";\n+   private final String[] databaseTypes;\n+   public Map<String, Database> databases;\n+\n+   public DatabaseServerListener(String... databaseTypes) {\n+      String property = System.getProperty(DATABASES);\n+      if (property != null) {\n+         this.databaseTypes = property.split(\",\");\n+         log.infof(\"Overriding databases: %s\", this.databaseTypes);\n+      } else {\n+         this.databaseTypes = databaseTypes;\n+      }\n+\n+   }\n+\n+   @Override\n+   public void before(InfinispanServerDriver driver) {\n+      databases = new LinkedHashMap<>(databaseTypes.length);\n+      for (int i = 0; i < databaseTypes.length; i++) {\n+         Database database  = initDatabase(databaseTypes[i]);\n+         log.infof(\"Starting database: %s\", database.getType());\n+         database.start();\n+         log.infof(\"Started database: %s\", database.getType());\n+         databases.put(databaseTypes[i], database);\n+        driver.getConfiguration().properties().put(\"org.infinispan.server.test.\"+ database.getType()+\".jdbcUrl\", database.jdbcUrl());\n+      }\n+   }\n+\n+   @Override\n+   public void after(InfinispanServerDriver driver) {\n+      log.info(\"Stopping databases\");\n+      databases.values().forEach(Database::stop);\n+      log.info(\"Stopped databases\");\n+", "originalCommit": "e2f3abc28960f9e7647e26afc2df787dbebcddca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "url": "https://github.com/infinispan/infinispan/commit/abc6687d30dacd4b0a2fe379e09ff30347afd70d", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-05-05T13:24:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDAyMA==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420780020", "body": "Similar to JDBC [1] you could log the exception as `CONFIG` logger.\r\n\r\n[1] https://github.com/infinispan/infinispan/blob/master/persistence/jdbc/src/main/java/org/infinispan/persistence/jdbc/logging/Log.java#L30", "bodyText": "Similar to JDBC [1] you could log the exception as CONFIG logger.\n[1] https://github.com/infinispan/infinispan/blob/master/persistence/jdbc/src/main/java/org/infinispan/persistence/jdbc/logging/Log.java#L30", "bodyHTML": "<p dir=\"auto\">Similar to JDBC [1] you could log the exception as <code>CONFIG</code> logger.</p>\n<p dir=\"auto\">[1] <a href=\"https://github.com/infinispan/infinispan/blob/master/persistence/jdbc/src/main/java/org/infinispan/persistence/jdbc/logging/Log.java#L30\">https://github.com/infinispan/infinispan/blob/master/persistence/jdbc/src/main/java/org/infinispan/persistence/jdbc/logging/Log.java#L30</a></p>", "author": "pruivo", "createdAt": "2020-05-06T13:14:54Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/DataSourcesConfigurationBuilder.java", "diffHunk": "@@ -1,28 +1,39 @@\n package org.infinispan.server.configuration;\n \n+import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.stream.Collectors;\n \n import org.infinispan.commons.configuration.Builder;\n import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.server.Server;\n \n public class DataSourcesConfigurationBuilder implements Builder<DataSourcesConfiguration> {\n \n    private final AttributeSet attributes;\n    private final ServerConfigurationBuilder server;\n \n    private Map<String, DataSourceConfigurationBuilder> dataSources = new LinkedHashMap<>(2);\n+   private Set<String> jndiNames = new HashSet<>(2);\n \n    DataSourcesConfigurationBuilder(ServerConfigurationBuilder server) {\n       this.server = server;\n       attributes = DataSourcesConfiguration.attributeDefinitionSet();\n    }\n \n    DataSourceConfigurationBuilder dataSource(String name, String jndiName) {\n+      if (dataSources.containsKey(name)) {\n+         throw Server.log.duplicateDataSource(name);", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDYzOA==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420780638", "bodyText": "or not... it seems to be using the SERVER category for this in other places...", "author": "pruivo", "createdAt": "2020-05-06T13:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg2MzQ0NA==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420863444", "bodyText": "This is a server configuration exception. It's fine as it is", "author": "tristantarrant", "createdAt": "2020-05-06T15:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDI1OQ==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420780259", "body": "nitpick: both `jndiNames` and  `dataSources` can be final.", "bodyText": "nitpick: both jndiNames and  dataSources can be final.", "bodyHTML": "<p dir=\"auto\">nitpick: both <code>jndiNames</code> and  <code>dataSources</code> can be final.</p>", "author": "pruivo", "createdAt": "2020-05-06T13:15:14Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/DataSourcesConfigurationBuilder.java", "diffHunk": "@@ -1,28 +1,39 @@\n package org.infinispan.server.configuration;\n \n+import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.stream.Collectors;\n \n import org.infinispan.commons.configuration.Builder;\n import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.server.Server;\n \n public class DataSourcesConfigurationBuilder implements Builder<DataSourcesConfiguration> {\n \n    private final AttributeSet attributes;\n    private final ServerConfigurationBuilder server;\n \n    private Map<String, DataSourceConfigurationBuilder> dataSources = new LinkedHashMap<>(2);\n+   private Set<String> jndiNames = new HashSet<>(2);", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4NjM3Mw==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420786373", "body": "```suggestion\r\n      for (String databaseType : databaseTypes) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  for (int i = 0; i < databaseTypes.length; i++) {\n          \n          \n            \n                  for (String databaseType : databaseTypes) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">for</span> (<span class=\"pl-k x x-first\">int</span><span class=\"x\"> i </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">0</span><span class=\"x\">; i </span><span class=\"pl-k x\">&lt;</span><span class=\"x x-last\"> </span>databaseTypes<span class=\"pl-k x x-first\">.</span><span class=\"x\">length; i</span><span class=\"pl-k x x-last\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">for</span> (<span class=\"pl-smi x x-first\">String</span><span class=\"x\"> databaseType </span><span class=\"pl-k x\">:</span><span class=\"x x-last\"> </span>databaseTypes) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pruivo", "createdAt": "2020-05-06T13:24:02Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/DatabaseServerListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.infinispan.server.test.core.InfinispanServerDriver;\n+import org.infinispan.server.test.core.InfinispanServerListener;\n+import org.infinispan.server.test.core.persistence.Database;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 10.0\n+ **/\n+public class DatabaseServerListener implements InfinispanServerListener {\n+   private static final Logger log = Logger.getLogger(DatabaseServerListener.class);\n+   public static final String DATABASES = \"org.infinispan.test.server.database.types\";\n+   public static final String DATABASE_PROPERTIES_PATH = \"org.infinispan.test.server.database.properties.path\";\n+   private final String[] databaseTypes;\n+   public Map<String, Database> databases;\n+\n+   public DatabaseServerListener(String... databaseTypes) {\n+      String property = System.getProperty(DATABASES);\n+      if (property != null) {\n+         this.databaseTypes = property.split(\",\");\n+         log.infof(\"Overriding databases: %s\", this.databaseTypes);\n+      } else {\n+         this.databaseTypes = databaseTypes;\n+      }\n+   }\n+\n+   @Override\n+   public void before(InfinispanServerDriver driver) {\n+      databases = new LinkedHashMap<>(databaseTypes.length);\n+      for (int i = 0; i < databaseTypes.length; i++) {", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4Njc2NQ==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420786765", "body": "shouldn't check for duplicates before starting?", "bodyText": "shouldn't check for duplicates before starting?", "bodyHTML": "<p dir=\"auto\">shouldn't check for duplicates before starting?</p>", "author": "pruivo", "createdAt": "2020-05-06T13:24:32Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/DatabaseServerListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.infinispan.server.test.core.InfinispanServerDriver;\n+import org.infinispan.server.test.core.InfinispanServerListener;\n+import org.infinispan.server.test.core.persistence.Database;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 10.0\n+ **/\n+public class DatabaseServerListener implements InfinispanServerListener {\n+   private static final Logger log = Logger.getLogger(DatabaseServerListener.class);\n+   public static final String DATABASES = \"org.infinispan.test.server.database.types\";\n+   public static final String DATABASE_PROPERTIES_PATH = \"org.infinispan.test.server.database.properties.path\";\n+   private final String[] databaseTypes;\n+   public Map<String, Database> databases;\n+\n+   public DatabaseServerListener(String... databaseTypes) {\n+      String property = System.getProperty(DATABASES);\n+      if (property != null) {\n+         this.databaseTypes = property.split(\",\");\n+         log.infof(\"Overriding databases: %s\", this.databaseTypes);\n+      } else {\n+         this.databaseTypes = databaseTypes;\n+      }\n+   }\n+\n+   @Override\n+   public void before(InfinispanServerDriver driver) {\n+      databases = new LinkedHashMap<>(databaseTypes.length);\n+      for (int i = 0; i < databaseTypes.length; i++) {\n+         Database database = initDatabase(databaseTypes[i]);\n+         log.infof(\"Starting database: %s\", database.getType());\n+         database.start();\n+         log.infof(\"Started database: %s\", database.getType());\n+         databases.put(databaseTypes[i], database);", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4ODA1MQ==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420788051", "body": "will `/database/%s.properties`  work on windows?", "bodyText": "will /database/%s.properties  work on windows?", "bodyHTML": "<p dir=\"auto\">will <code>/database/%s.properties</code>  work on windows?</p>", "author": "pruivo", "createdAt": "2020-05-06T13:26:25Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/DatabaseServerListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.infinispan.server.test.core.InfinispanServerDriver;\n+import org.infinispan.server.test.core.InfinispanServerListener;\n+import org.infinispan.server.test.core.persistence.Database;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 10.0\n+ **/\n+public class DatabaseServerListener implements InfinispanServerListener {\n+   private static final Logger log = Logger.getLogger(DatabaseServerListener.class);\n+   public static final String DATABASES = \"org.infinispan.test.server.database.types\";\n+   public static final String DATABASE_PROPERTIES_PATH = \"org.infinispan.test.server.database.properties.path\";\n+   private final String[] databaseTypes;\n+   public Map<String, Database> databases;\n+\n+   public DatabaseServerListener(String... databaseTypes) {\n+      String property = System.getProperty(DATABASES);\n+      if (property != null) {\n+         this.databaseTypes = property.split(\",\");\n+         log.infof(\"Overriding databases: %s\", this.databaseTypes);\n+      } else {\n+         this.databaseTypes = databaseTypes;\n+      }\n+   }\n+\n+   @Override\n+   public void before(InfinispanServerDriver driver) {\n+      databases = new LinkedHashMap<>(databaseTypes.length);\n+      for (int i = 0; i < databaseTypes.length; i++) {\n+         Database database = initDatabase(databaseTypes[i]);\n+         log.infof(\"Starting database: %s\", database.getType());\n+         database.start();\n+         log.infof(\"Started database: %s\", database.getType());\n+         databases.put(databaseTypes[i], database);\n+         driver.getConfiguration().properties().put(\"org.infinispan.server.test.\" + database.getType() + \".jdbcUrl\", database.jdbcUrl());\n+      }\n+   }\n+\n+   @Override\n+   public void after(InfinispanServerDriver driver) {\n+      log.info(\"Stopping databases\");\n+      databases.values().forEach(Database::stop);\n+      log.info(\"Stopped databases\");\n+   }\n+\n+   public Database getDatabase(String databaseType) {\n+      return databases.get(databaseType);\n+   }\n+\n+   public String[] getDatabaseTypes() {\n+      return databaseTypes;\n+   }\n+\n+   private Database initDatabase(String databaseType) {\n+      String property = System.getProperty(DATABASE_PROPERTIES_PATH);\n+      try (InputStream inputStream = property != null ? Files.newInputStream(Paths.get(property).resolve(databaseType + \".properties\")) : getClass().getResourceAsStream(String.format(\"/database/%s.properties\", databaseType))) {", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5OTk3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420799975", "bodyText": "Yes, because it's reading it from the classpath here.", "author": "tristantarrant", "createdAt": "2020-05-06T13:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4ODA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4OTMxMQ==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420789311", "body": "nitpick: `final`", "bodyText": "nitpick: final", "bodyHTML": "<p dir=\"auto\">nitpick: <code>final</code></p>", "author": "pruivo", "createdAt": "2020-05-06T13:28:01Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanServerRuleBuilder.java", "diffHunk": "@@ -22,6 +25,7 @@\n    private JavaArchive[] archives;\n    private boolean jmx;\n    private boolean parallelStartup = true;\n+   private List<InfinispanServerListener> listeners = new ArrayList<>();", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1a654135217cc15a85f5b9b5a84c6fcffcfd7f02", "url": "https://github.com/infinispan/infinispan/commit/1a654135217cc15a85f5b9b5a84c6fcffcfd7f02", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-05-06T13:51:19Z", "type": "forcePushed"}, {"oid": "606ae20b64e68072dd9b30cf6e8a7745f289f841", "url": "https://github.com/infinispan/infinispan/commit/606ae20b64e68072dd9b30cf6e8a7745f289f841", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-05-06T15:01:27Z", "type": "commit"}, {"oid": "606ae20b64e68072dd9b30cf6e8a7745f289f841", "url": "https://github.com/infinispan/infinispan/commit/606ae20b64e68072dd9b30cf6e8a7745f289f841", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-05-06T15:01:27Z", "type": "forcePushed"}]}