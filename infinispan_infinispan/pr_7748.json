{"pr_number": 7748, "pr_title": "ISPN-10362 Unify remove command initialization and invocation", "pr_author": "ryanemerson", "pr_createdAt": "2020-01-16T16:29:39Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7748", "timeline": [{"oid": "9c74f9d7b8aad3614e610729201a4c53d0073846", "url": "https://github.com/infinispan/infinispan/commit/9c74f9d7b8aad3614e610729201a4c53d0073846", "message": "ISPN-10362 Unify remove command initialization and invocation\n\nOnly org.infinispan.tx.recovery.admin.* Tests failing due to remote Tx count not being decremented to 0", "committedDate": "2020-01-16T16:31:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyMjk5Mw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r367522993", "body": "Move this down one line btw ;)", "bodyText": "Move this down one line btw ;)", "bodyHTML": "<p dir=\"auto\">Move this down one line btw ;)</p>", "author": "wburns", "createdAt": "2020-01-16T16:33:54Z", "path": "core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java", "diffHunk": "@@ -92,7 +78,14 @@ public void setTopologyId(int topologyId) {\n    }\n \n    @Override\n-   public CompletableFuture<Object> invokeAsync() {\n+   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) {\n+      // Invalidation cache doesn't set topology id - so we don't want to throw OTE in invokeAsync", "originalCommit": "9c74f9d7b8aad3614e610729201a4c53d0073846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNDcxNg==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r367524716", "bodyText": "Done \ud83d\ude42", "author": "ryanemerson", "createdAt": "2020-01-16T16:36:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyMjk5Mw=="}], "type": "inlineReview"}, {"oid": "cccd14f5fa122ae168c7d868ecb2c2f89df96c2d", "url": "https://github.com/infinispan/infinispan/commit/cccd14f5fa122ae168c7d868ecb2c2f89df96c2d", "message": "ISPN-10362 Unify remove command initialization and invocation\n\nOnly org.infinispan.tx.recovery.admin.* Tests failing due to remote Tx count not being decremented to 0", "committedDate": "2020-01-16T16:36:42Z", "type": "forcePushed"}, {"oid": "5b64cb01114bdd5c15c9408091b84141414e88fc", "url": "https://github.com/infinispan/infinispan/commit/5b64cb01114bdd5c15c9408091b84141414e88fc", "message": "Deprecate and remove usages of CommandsFactory::initializeReplicableCommand", "committedDate": "2020-01-20T15:43:00Z", "type": "forcePushed"}, {"oid": "730953e36334def24adffa63da9ac968be5ad35b", "url": "https://github.com/infinispan/infinispan/commit/730953e36334def24adffa63da9ac968be5ad35b", "message": "Fix PrepareCommand", "committedDate": "2020-01-20T17:01:12Z", "type": "forcePushed"}, {"oid": "d0953867b0a6333fd4e493ac208fad3c93f02f8c", "url": "https://github.com/infinispan/infinispan/commit/d0953867b0a6333fd4e493ac208fad3c93f02f8c", "message": "Use TxTable variable", "committedDate": "2020-01-30T09:12:23Z", "type": "forcePushed"}, {"oid": "6ea94bf14ad967da8c76ea7f049b9cb5a4dae88d", "url": "https://github.com/infinispan/infinispan/commit/6ea94bf14ad967da8c76ea7f049b9cb5a4dae88d", "message": "ISPN-11111 Remove deprecated ModuleCommandInitializer", "committedDate": "2020-01-31T15:42:18Z", "type": "forcePushed"}, {"oid": "3c3b9a37cec99f87fa03d27f01532665d10127b1", "url": "https://github.com/infinispan/infinispan/commit/3c3b9a37cec99f87fa03d27f01532665d10127b1", "message": "ISPN-11111 Remove deprecated ModuleCommandInitializer", "committedDate": "2020-01-31T15:49:51Z", "type": "forcePushed"}, {"oid": "4839bc74e011bfbba3e1aef04c94d6dd7c2e46a7", "url": "https://github.com/infinispan/infinispan/commit/4839bc74e011bfbba3e1aef04c94d6dd7c2e46a7", "message": "ISPN-11111 Remove deprecated ModuleCommandInitializer", "committedDate": "2020-02-03T12:18:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTc4Mg==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374185782", "body": "can we remove this command?\r\nAlso,  `CancellableCommand` and `CancellationService`? I think it was used by the old distributed executor. ", "bodyText": "can we remove this command?\nAlso,  CancellableCommand and CancellationService? I think it was used by the old distributed executor.", "bodyHTML": "<p dir=\"auto\">can we remove this command?<br>\nAlso,  <code>CancellableCommand</code> and <code>CancellationService</code>? I think it was used by the old distributed executor.</p>", "author": "pruivo", "createdAt": "2020-02-03T15:58:21Z", "path": "core/src/main/java/org/infinispan/commands/CancelCommand.java", "diffHunk": "@@ -20,13 +20,12 @@\n  * @author Vladimir Blagojevic\n  * @since 5.2\n  */\n-public class CancelCommand extends BaseRpcCommand implements InitializableCommand {\n+public class CancelCommand extends BaseRpcCommand {", "originalCommit": "4839bc74e011bfbba3e1aef04c94d6dd7c2e46a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MjE0Nw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374192147", "bodyText": "@wburns any thoughts?", "author": "ryanemerson", "createdAt": "2020-02-03T16:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NTExNw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374195117", "bodyText": "They were used by the old DistributedExecutor. I don't think they are used by anything else now.", "author": "wburns", "createdAt": "2020-02-03T16:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyMDc0Ng==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374220746", "bodyText": "I've created https://issues.redhat.com/browse/ISPN-11269 and I'll add a commit to this PR", "author": "ryanemerson", "createdAt": "2020-02-03T16:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5OTU3Ng==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374099576", "body": "\"should be stateless\" is maybe too much, it's ok for an interceptor to set a field in the command for another interceptor to use.\r\n\r\nAlthough the first example I found, `GetKeysInGroupCommand`, would probably be best handled by computing the segment on the originator and setting in the constructor :)", "bodyText": "\"should be stateless\" is maybe too much, it's ok for an interceptor to set a field in the command for another interceptor to use.\nAlthough the first example I found, GetKeysInGroupCommand, would probably be best handled by computing the segment on the originator and setting in the constructor :)", "bodyHTML": "<p dir=\"auto\">\"should be stateless\" is maybe too much, it's ok for an interceptor to set a field in the command for another interceptor to use.</p>\n<p dir=\"auto\">Although the first example I found, <code>GetKeysInGroupCommand</code>, would probably be best handled by computing the segment on the originator and setting in the constructor :)</p>", "author": "danberindei", "createdAt": "2020-02-03T13:26:26Z", "path": "core/src/main/java/org/infinispan/commands/CommandsFactory.java", "diffHunk": "@@ -359,7 +359,9 @@ ComputeIfAbsentCommand buildComputeIfAbsentCommand(Object key, Function mappingF\n     *\n     * @param command command to initialize.  Cannot be null.\n     * @param isRemote\n+    * @deprecated since 11.0, ReplicableCommands should be stateless and utilise {@link ReplicableCommand#invokeAsync(ComponentRegistry)}", "originalCommit": "4839bc74e011bfbba3e1aef04c94d6dd7c2e46a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzNDk2OQ==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374434969", "body": "```suggestion\r\n * @deprecated since 11.0 has no effect.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @deprecated since 11.0 has the affect.\n          \n          \n            \n             * @deprecated since 11.0 has no effect.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">@deprecated</span> since <span class=\"pl-c1\">11.0</span> has <span class=\"x x-first x-last\">the affect</span>.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">@deprecated</span> since <span class=\"pl-c1\">11.0</span> has <span class=\"x x-first x-last\">no effect</span>.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "danberindei", "createdAt": "2020-02-04T01:39:05Z", "path": "core/src/main/java/org/infinispan/commands/CancellableCommand.java", "diffHunk": "@@ -9,7 +9,9 @@\n  *\n  * @author Vladimir Blagojevic\n  * @since 5.2\n+ * @deprecated since 11.0 has the affect.", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzNTcyNw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374435727", "body": "It's not a public package, so I'd just delete it.\r\n\r\nBesides, user implementations were ignored anyway, because `EmptyConstructorFactory` referenced `CancellationServiceImpl` directly.", "bodyText": "It's not a public package, so I'd just delete it.\nBesides, user implementations were ignored anyway, because EmptyConstructorFactory referenced CancellationServiceImpl directly.", "bodyHTML": "<p dir=\"auto\">It's not a public package, so I'd just delete it.</p>\n<p dir=\"auto\">Besides, user implementations were ignored anyway, because <code>EmptyConstructorFactory</code> referenced <code>CancellationServiceImpl</code> directly.</p>", "author": "danberindei", "createdAt": "2020-02-04T01:42:09Z", "path": "core/src/main/java/org/infinispan/commands/CancellationService.java", "diffHunk": "@@ -11,8 +11,10 @@\n  *\n  * @author Vladimir Blagojevic\n  * @since 5.2\n+ * @deprecated since 11.0 implementations of this interface are ignored", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyOTE5Nw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r375229197", "bodyText": "I've just removed the interface in the end.", "author": "ryanemerson", "createdAt": "2020-02-05T12:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzNTcyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjQxNQ==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374442415", "body": "Please make the new `invokeAsync` method return a `CompletionStage` and move it to `CacheRpcCommand` + `GlobalRpcCommand`.\r\n\r\n`SingleXSiteRpcCommand.invokeAsync()` currently uses it on `VisitableCommand`, but it could throw an `UnsupportedOperationException` instead.\r\nSame with `CallInterceptor.visitUnknownCommand()`, there's no reason why a command that the interceptors don't know about should go through the interceptor chain.\r\n\r\nTrue, the current `RpcManager` javadoc doesn't put any restrictions on the command, but IMO it's ok to change `RpcManagerCustomReplicableCommandTest` to assert that an unknown `VisitableCommand` is not supported, and also that a `GlobalRpcCommand` is not supported (global commands should be invoked via `Transport`).", "bodyText": "Please make the new invokeAsync method return a CompletionStage and move it to CacheRpcCommand + GlobalRpcCommand.\nSingleXSiteRpcCommand.invokeAsync() currently uses it on VisitableCommand, but it could throw an UnsupportedOperationException instead.\nSame with CallInterceptor.visitUnknownCommand(), there's no reason why a command that the interceptors don't know about should go through the interceptor chain.\nTrue, the current RpcManager javadoc doesn't put any restrictions on the command, but IMO it's ok to change RpcManagerCustomReplicableCommandTest to assert that an unknown VisitableCommand is not supported, and also that a GlobalRpcCommand is not supported (global commands should be invoked via Transport).", "bodyHTML": "<p dir=\"auto\">Please make the new <code>invokeAsync</code> method return a <code>CompletionStage</code> and move it to <code>CacheRpcCommand</code> + <code>GlobalRpcCommand</code>.</p>\n<p dir=\"auto\"><code>SingleXSiteRpcCommand.invokeAsync()</code> currently uses it on <code>VisitableCommand</code>, but it could throw an <code>UnsupportedOperationException</code> instead.<br>\nSame with <code>CallInterceptor.visitUnknownCommand()</code>, there's no reason why a command that the interceptors don't know about should go through the interceptor chain.</p>\n<p dir=\"auto\">True, the current <code>RpcManager</code> javadoc doesn't put any restrictions on the command, but IMO it's ok to change <code>RpcManagerCustomReplicableCommandTest</code> to assert that an unknown <code>VisitableCommand</code> is not supported, and also that a <code>GlobalRpcCommand</code> is not supported (global commands should be invoked via <code>Transport</code>).</p>", "author": "danberindei", "createdAt": "2020-02-04T02:12:46Z", "path": "core/src/main/java/org/infinispan/commands/ReplicableCommand.java", "diffHunk": "@@ -19,17 +19,33 @@\n  * @since 4.0\n  */\n public interface ReplicableCommand {\n+\n+   /**\n+    * Invoke the command asynchronously.\n+    * <p>\n+    * <p>This method replaces {@link #invoke()} for remote execution.\n+    * The default implementation and {@link #invoke()} will be removed in future versions.\n+    * </p>\n+    *\n+    * @since 11.0\n+    */\n+   default CompletableFuture<Object> invokeAsync(ComponentRegistry registry) throws Throwable {", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3ODU5OA==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374678598", "bodyText": "Should we also deprecate the Visitor::visitUnknownCommand method then?", "author": "ryanemerson", "createdAt": "2020-02-04T13:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxMjU4MA==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374712580", "bodyText": "+1", "author": "danberindei", "createdAt": "2020-02-04T14:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjY2Nw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374442667", "body": "I suggest removing both lines and keeping only the deprecation tag.", "bodyText": "I suggest removing both lines and keeping only the deprecation tag.", "bodyHTML": "<p dir=\"auto\">I suggest removing both lines and keeping only the deprecation tag.</p>", "author": "danberindei", "createdAt": "2020-02-04T02:14:01Z", "path": "core/src/main/java/org/infinispan/commands/ReplicableCommand.java", "diffHunk": "@@ -19,17 +19,33 @@\n  * @since 4.0\n  */\n public interface ReplicableCommand {\n+\n+   /**\n+    * Invoke the command asynchronously.\n+    * <p>\n+    * <p>This method replaces {@link #invoke()} for remote execution.\n+    * The default implementation and {@link #invoke()} will be removed in future versions.\n+    * </p>\n+    *\n+    * @since 11.0\n+    */\n+   default CompletableFuture<Object> invokeAsync(ComponentRegistry registry) throws Throwable {\n+      return invokeAsync();\n+   }\n+\n    /**\n     * Invoke the command asynchronously.\n     * <p>\n-    * <p>This method replaces {@link #perform(InvocationContext)} for remote execution.\n-    * The default implementation and {@link #perform(InvocationContext)} will be removed in future versions.\n+    * <p>This method replaces {@link #invoke()} for remote execution.", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0Mzc2MQ==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374443761", "body": "Please extract `componentRegistry.getTransactionTable()` to a local variable outside the lambda, even if it's not expensive it would make the line shorter.", "bodyText": "Please extract componentRegistry.getTransactionTable() to a local variable outside the lambda, even if it's not expensive it would make the line shorter.", "bodyHTML": "<p dir=\"auto\">Please extract <code>componentRegistry.getTransactionTable()</code> to a local variable outside the lambda, even if it's not expensive it would make the line shorter.</p>", "author": "danberindei", "createdAt": "2020-02-04T02:19:00Z", "path": "core/src/main/java/org/infinispan/commands/remote/CheckTransactionRpcCommand.java", "diffHunk": "@@ -57,21 +50,15 @@ public CheckTransactionRpcCommand(ByteString cacheName) {\n       return INSTANCE;\n    }\n \n-   @Override\n-   public void init(ComponentRegistry componentRegistry, boolean isRemote) {\n-      transactionTable = componentRegistry.getTransactionTable();\n-   }\n-\n    @Override\n    public ByteString getCacheName() {\n       return cacheName;\n    }\n \n    @Override\n-   public CompletableFuture<Object> invokeAsync() {\n-      //modify the collection destructively\n-      //and return the list of completed transactions.\n-      gtxToCheck.removeIf(this);\n+   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) {\n+      // Modify the collection destructively and return the list of completed transactions.\n+      gtxToCheck.removeIf(globalTransaction -> componentRegistry.getTransactionTable().containsLocalTx(globalTransaction));", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0ODM0Mw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374448343", "body": "We've been throwing this exception since 4.2, it's high time we change the field and the constructor to `VisitableCommand`.", "bodyText": "We've been throwing this exception since 4.2, it's high time we change the field and the constructor to VisitableCommand.", "bodyHTML": "<p dir=\"auto\">We've been throwing this exception since 4.2, it's high time we change the field and the constructor to <code>VisitableCommand</code>.</p>", "author": "danberindei", "createdAt": "2020-02-04T02:39:34Z", "path": "core/src/main/java/org/infinispan/commands/remote/SingleRpcCommand.java", "diffHunk": "@@ -58,13 +58,23 @@ public void readFrom(ObjectInput input) throws IOException, ClassNotFoundExcepti\n    }\n \n    @Override\n-   public Object perform(InvocationContext ctx) throws Throwable {\n-      throw new UnsupportedOperationException();\n-   }\n-\n-   @Override\n-   public CompletableFuture<Object> invokeAsync() throws Throwable {\n-      return processVisitableCommandAsync(command);\n+   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) throws Throwable {\n+      if (command instanceof VisitableCommand) {\n+         VisitableCommand vc = (VisitableCommand) command;\n+         vc.init(componentRegistry);\n+         InvocationContextFactory icf = componentRegistry.getInvocationContextFactory().running();\n+         InvocationContext ctx = icf.createRemoteInvocationContextForCommand(vc, getOrigin());\n+         if (command instanceof RemoteLockCommand) {\n+            ctx.setLockOwner(((RemoteLockCommand) command).getKeyLockOwner());\n+         }\n+         if (trace)\n+            log.tracef(\"Invoking command %s, with originLocal flag set to %b\", command, ctx\n+                  .isOriginLocal());\n+         return componentRegistry.getInterceptorChain().running().invokeAsync(ctx, vc);\n+      } else {\n+         throw new RuntimeException(", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NDE5Mw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374454193", "body": "You should have initialized the variable with `null` to replicate the behaviour of `init`, but I don't think the cache mode check is needed because it's also checking if `topologyId != -1` below.\r\n\r\nI suggest removing this `if` and changing the comment below to say topologyId can be -1 both in invalidation mode and in Hibernate 2LC.", "bodyText": "You should have initialized the variable with null to replicate the behaviour of init, but I don't think the cache mode check is needed because it's also checking if topologyId != -1 below.\nI suggest removing this if and changing the comment below to say topologyId can be -1 both in invalidation mode and in Hibernate 2LC.", "bodyHTML": "<p dir=\"auto\">You should have initialized the variable with <code>null</code> to replicate the behaviour of <code>init</code>, but I don't think the cache mode check is needed because it's also checking if <code>topologyId != -1</code> below.</p>\n<p dir=\"auto\">I suggest removing this <code>if</code> and changing the comment below to say topologyId can be -1 both in invalidation mode and in Hibernate 2LC.</p>", "author": "danberindei", "createdAt": "2020-02-04T03:07:14Z", "path": "core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java", "diffHunk": "@@ -91,7 +77,14 @@ public void setTopologyId(int topologyId) {\n    }\n \n    @Override\n-   public CompletableFuture<Object> invokeAsync() {\n+   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) {\n+      DistributionManager distributionManager = componentRegistry.getDistributionManager();\n+      // Invalidation cache doesn't set topology id - so we don't want to throw OTE in invokeAsync\n+      if (!componentRegistry.getConfiguration().clustering().cacheMode().isInvalidation()) {\n+         distributionManager = componentRegistry.getDistributionManager();", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NTE3MA==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374455170", "body": "This is not ok, `cacheComponents()` is called by `rewire()` and `registerComponent()` will fail the second time.\r\nIf you really think it's not ok for `getCancellationService()` to return `null`, you should register it in the constructor.", "bodyText": "This is not ok, cacheComponents() is called by rewire() and registerComponent() will fail the second time.\nIf you really think it's not ok for getCancellationService() to return null, you should register it in the constructor.", "bodyHTML": "<p dir=\"auto\">This is not ok, <code>cacheComponents()</code> is called by <code>rewire()</code> and <code>registerComponent()</code> will fail the second time.<br>\nIf you really think it's not ok for <code>getCancellationService()</code> to return <code>null</code>, you should register it in the constructor.</p>", "author": "danberindei", "createdAt": "2020-02-04T03:12:14Z", "path": "core/src/main/java/org/infinispan/factories/ComponentRegistry.java", "diffHunk": "@@ -361,7 +359,8 @@ public void cacheComponents() {\n       backupSender = basicComponentRegistry.getComponent(BackupSender.class);\n       cache = basicComponentRegistry.getComponent(AdvancedCache.class);\n       cacheNotifier = basicComponentRegistry.getComponent(CacheNotifier.class);\n-      cancellationService = basicComponentRegistry.getComponent(CancellationService.class);\n+      cancellationService = basicComponentRegistry.registerComponent(CancellationService.class, new CancellationService() {", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODI2Mw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374458263", "body": "I don't think this is needed on the originator: `keyDataConversion` and `valueDataConversion` are not private to the command, they're already wired, and even if `wireDependencies` is idempotent, it's not that cheap.\r\n\r\n`SingleRpcCommand` and `PrepareCommand` already init the sub-commands on the target nodes, you just need to add it in `BackupWriteCommand`.", "bodyText": "I don't think this is needed on the originator: keyDataConversion and valueDataConversion are not private to the command, they're already wired, and even if wireDependencies is idempotent, it's not that cheap.\nSingleRpcCommand and PrepareCommand already init the sub-commands on the target nodes, you just need to add it in BackupWriteCommand.", "bodyHTML": "<p dir=\"auto\">I don't think this is needed on the originator: <code>keyDataConversion</code> and <code>valueDataConversion</code> are not private to the command, they're already wired, and even if <code>wireDependencies</code> is idempotent, it's not that cheap.</p>\n<p dir=\"auto\"><code>SingleRpcCommand</code> and <code>PrepareCommand</code> already init the sub-commands on the target nodes, you just need to add it in <code>BackupWriteCommand</code>.</p>", "author": "danberindei", "createdAt": "2020-02-04T03:28:13Z", "path": "core/src/main/java/org/infinispan/interceptors/impl/AsyncInterceptorChainImpl.java", "diffHunk": "@@ -223,6 +223,7 @@ public void appendInterceptor(AsyncInterceptor ci, boolean isCustom) {\n    @Override\n    public CompletableFuture<Object> invokeAsync(InvocationContext ctx, VisitableCommand command) {\n       try {\n+         command.init(componentRegistry);", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NDA0Ng==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374794046", "bodyText": "If we remove this, it's also necessary to call .init on the PrepareCommands modifications when invokeAsync(ComponentRegistry)", "author": "ryanemerson", "createdAt": "2020-02-04T16:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5ODQ5Ng==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r375198496", "bodyText": "Right, I saw PrepareCommand calling init() on the modifications and I didn't realize it was in the init() method. But it should be safe to move that code to invokeAsync(), because we don't expect init() to be called on commands that are both CacheRpcCommand and VisitableCommand.", "author": "danberindei", "createdAt": "2020-02-05T11:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODY3Mw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374458673", "body": "```suggestion\r\n      throw new UnsupportedOperationException();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return CompletableFutures.await(command.invokeAsync(componentRegistry));\n          \n          \n            \n                  throw new UnsupportedOperationException();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k x x-first\">return</span><span class=\"x\"> </span><span class=\"pl-smi x\">CompletableFutures</span><span class=\"pl-k x\">.</span><span class=\"x\">await(command</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">invokeAsync(componentRegistry)</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k x x-first\">throw</span><span class=\"x\"> </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">UnsupportedOperationException</span><span class=\"x x-last\">(</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "danberindei", "createdAt": "2020-02-04T03:30:33Z", "path": "core/src/main/java/org/infinispan/interceptors/impl/CallInterceptor.java", "diffHunk": "@@ -769,7 +772,7 @@ public Object visitLockControlCommand(TxInvocationContext ctx, LockControlComman\n \n    @Override\n    public Object visitUnknownCommand(InvocationContext ctx, VisitableCommand command) throws Throwable {\n-      return command.perform(ctx);\n+      return CompletableFutures.await(command.invokeAsync(componentRegistry));", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9cef57268d49d77a668149ab9db14deeef7fc50e", "url": "https://github.com/infinispan/infinispan/commit/9cef57268d49d77a668149ab9db14deeef7fc50e", "message": "Use CompletionStage<?> invokeAsync(...)", "committedDate": "2020-02-05T12:32:41Z", "type": "forcePushed"}, {"oid": "a4f9b3608d6b1e9ba3ecd2de167f576f0c2c52e1", "url": "https://github.com/infinispan/infinispan/commit/a4f9b3608d6b1e9ba3ecd2de167f576f0c2c52e1", "message": "Use CompletionStage<?> invokeAsync(...)", "committedDate": "2020-02-05T12:46:18Z", "type": "forcePushed"}, {"oid": "f39224d5a1a9300c69ac4ef6c4229e960361bbb7", "url": "https://github.com/infinispan/infinispan/commit/f39224d5a1a9300c69ac4ef6c4229e960361bbb7", "message": "ISPN-11269 Remove CancellationService and CancelCommand", "committedDate": "2020-02-05T14:18:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyNDg3NA==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r375324874", "body": "`init()` is not going to be called any more, unless you call it from `invokeAsync`.\r\n\r\nTBH I don't think we really need ':local' and ':remote' in `GlobalTransaction.toString()`, but that's for another PR.", "bodyText": "init() is not going to be called any more, unless you call it from invokeAsync.\nTBH I don't think we really need ':local' and ':remote' in GlobalTransaction.toString(), but that's for another PR.", "bodyHTML": "<p dir=\"auto\"><code>init()</code> is not going to be called any more, unless you call it from <code>invokeAsync</code>.</p>\n<p dir=\"auto\">TBH I don't think we really need ':local' and ':remote' in <code>GlobalTransaction.toString()</code>, but that's for another PR.</p>", "author": "danberindei", "createdAt": "2020-02-05T15:27:43Z", "path": "core/src/main/java/org/infinispan/commands/tx/PrepareCommand.java", "diffHunk": "@@ -68,21 +69,14 @@\n \n    protected WriteCommand[] modifications;\n    protected boolean onePhaseCommit;\n-   protected CacheNotifier notifier;\n-   protected RecoveryManager recoveryManager;\n    private transient boolean replayEntryWrapping  = false;\n    protected boolean retriedCommand;\n \n    private static final WriteCommand[] EMPTY_WRITE_COMMAND_ARRAY = new WriteCommand[0];\n \n    @Override\n-   public void init(ComponentRegistry componentRegistry, boolean isRemote) {\n-      super.init(componentRegistry, isRemote);\n-      this.notifier = componentRegistry.getCacheNotifier().running();\n-      this.recoveryManager = componentRegistry.getRecoveryManager().running();\n-\n-      for (ReplicableCommand nested : getModifications())\n-         componentRegistry.getCommandsFactory().initializeReplicableCommand(nested, false);\n+   public void init(ComponentRegistry componentRegistry) {\n+      markTransactionAsRemote(true);", "originalCommit": "f39224d5a1a9300c69ac4ef6c4229e960361bbb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyOTI2NA==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r375329264", "body": "Redundant cast", "bodyText": "Redundant cast", "bodyHTML": "<p dir=\"auto\">Redundant cast</p>", "author": "danberindei", "createdAt": "2020-02-05T15:34:09Z", "path": "core/src/main/java/org/infinispan/statetransfer/StateResponseCommand.java", "diffHunk": "@@ -77,20 +70,15 @@ public StateResponseCommand(ByteString cacheName, Address origin, int topologyId\n    }\n \n    @Override\n-   public void init(ComponentRegistry componentRegistry, boolean isRemote) {\n-      this.stateConsumer = componentRegistry.getStateTransferManager().getStateConsumer();\n-      this.stateReceiver = componentRegistry.getConflictManager().running().getStateReceiver();\n-   }\n-\n-   @Override\n-   public CompletableFuture<Object> invokeAsync() throws Throwable {\n+   public CompletionStage<?> invokeAsync(ComponentRegistry componentRegistry) throws Throwable {\n       final boolean trace = log.isTraceEnabled();\n       LogFactory.pushNDC(cacheName, trace);\n       try {\n          if (applyState) {\n-            return (CompletableFuture) stateConsumer.applyState(getOrigin(), topologyId, pushTransfer, stateChunks)\n-                                                    .toCompletableFuture();\n+            StateConsumer stateConsumer = componentRegistry.getStateTransferManager().getStateConsumer();\n+            return (CompletionStage) stateConsumer.applyState(getOrigin(), topologyId, pushTransfer, stateChunks);", "originalCommit": "f39224d5a1a9300c69ac4ef6c4229e960361bbb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3b7b51c1e353d3ab2ca36476638816ce0bc78acc", "url": "https://github.com/infinispan/infinispan/commit/3b7b51c1e353d3ab2ca36476638816ce0bc78acc", "message": "ISPN-10362 Unify command initialization and invocation\n\nDeprecate and remove usages of CommandsFactory::initializeReplicableCommand", "committedDate": "2020-02-05T16:26:32Z", "type": "commit"}, {"oid": "22fc807f549f9b59b987bddd28af56e031c26b31", "url": "https://github.com/infinispan/infinispan/commit/22fc807f549f9b59b987bddd28af56e031c26b31", "message": "ISPN-11111 Remove deprecated ModuleCommandInitializer", "committedDate": "2020-02-05T16:26:32Z", "type": "commit"}, {"oid": "797c3e8436e7bdaa8e7963eec92e9cfacd9d21cf", "url": "https://github.com/infinispan/infinispan/commit/797c3e8436e7bdaa8e7963eec92e9cfacd9d21cf", "message": "ISPN-11269 Remove CancellationService and CancelCommand", "committedDate": "2020-02-05T16:26:32Z", "type": "commit"}, {"oid": "797c3e8436e7bdaa8e7963eec92e9cfacd9d21cf", "url": "https://github.com/infinispan/infinispan/commit/797c3e8436e7bdaa8e7963eec92e9cfacd9d21cf", "message": "ISPN-11269 Remove CancellationService and CancelCommand", "committedDate": "2020-02-05T16:26:32Z", "type": "forcePushed"}]}