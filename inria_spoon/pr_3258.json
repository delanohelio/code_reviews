{"pr_number": 3258, "pr_title": "feature: add fluent API for Launcher", "pr_author": "MartinWitt", "pr_createdAt": "2020-02-18T18:36:48Z", "pr_url": "https://github.com/INRIA/spoon/pull/3258", "timeline": [{"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a", "url": "https://github.com/INRIA/spoon/commit/507ed589a081093895e03a4ade6a25fc126f2e7a", "message": " start first try for fluent launcher", "committedDate": "2020-02-17T18:42:04Z", "type": "commit"}, {"oid": "225a4868cd2468305332c7f46e4aa7037219863b", "url": "https://github.com/INRIA/spoon/commit/225a4868cd2468305332c7f46e4aa7037219863b", "message": "showcase usecase1", "committedDate": "2020-02-17T19:43:36Z", "type": "commit"}, {"oid": "710a7427790e62f133c355d9baa46e528d359012", "url": "https://github.com/INRIA/spoon/commit/710a7427790e62f133c355d9baa46e528d359012", "message": "showcase first 2 usecases", "committedDate": "2020-02-18T18:32:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NzI0Mw==", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381387243", "body": "Can this be `private`?", "bodyText": "Can this be private?", "bodyHTML": "<p dir=\"auto\">Can this be <code>private</code>?</p>", "author": "DaveJarvis", "createdAt": "2020-02-19T16:25:24Z", "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;", "originalCommit": "507ed589a081093895e03a4ade6a25fc126f2e7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQxMDkzNg==", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381410936", "bodyText": "yes 100%.", "author": "MartinWitt", "createdAt": "2020-02-19T16:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NzI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b7f8f8279f8f6d6f89ef29f366ef369a3627ea64", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 53e3b7db..e5315747 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -1,160 +1,186 @@\n package spoon;\n \n import java.io.File;\n-import java.util.List;\n \n-import spoon.compiler.Environment;\n-import spoon.compiler.SpoonResource;\n import spoon.processing.Processor;\n import spoon.reflect.CtModel;\n import spoon.reflect.declaration.CtElement;\n import spoon.reflect.declaration.CtType;\n-import spoon.reflect.factory.Factory;\n import spoon.reflect.visitor.Filter;\n-import spoon.reflect.visitor.PrettyPrinter;\n-import spoon.support.JavaOutputProcessor;\n+import spoon.support.OutputDestinationHandler;\n \n /**\n  * TODO: doc\n  */\n public class FluentLauncher {\n \n-\tLauncher launcher;\n-\n-\tpublic FluentLauncher() {\n-\t\tthis.launcher = new Launcher();\n-\t}\n+\tprivate SpoonAPI launcher;\n \n \t/**\n-\t * @param args\n-\t * @see spoon.Launcher#run(java.lang.String[])\n+\t * i gave Methods numbers 1-4. 4 means mandatory. 3 means all users will use\n+\t * this. 2 means helper method but not needed. 1 means no clue why we want this.\n \t */\n+\t// Level: 4\n \n-\tpublic void run(String[] args) {\n-\t\tlauncher.run(args);\n-\t}\n-\n-\tpublic void printUsage() {\n-\t\tlauncher.printUsage();\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n \t}\n \n+\t// Level: 4\n \tpublic FluentLauncher inputResource(String path) {\n \t\tlauncher.addInputResource(path);\n \t\treturn this;\n \t}\n \n-\tpublic FluentLauncher inputResource(SpoonResource resource) {\n-\t\tlauncher.addInputResource(resource);\n-\t\treturn this;\n-\t}\n+\t// Level: 3\n \n \tpublic FluentLauncher processor(String name) {\n \t\tlauncher.addProcessor(name);\n \t\treturn this;\n \t}\n \n+\t// Level: 4\n+\n \tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n \t\tlauncher.addProcessor(processor);\n \t\treturn this;\n \t}\n \n-\tpublic FluentLauncher templateResource(SpoonResource resource) {\n-\t\tlauncher.addTemplateResource(resource);\n-\t\treturn this;\n-\t}\n-\n-\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n-\tpublic Environment getEnvironment() {\n-\t\treturn launcher.getEnvironment();\n-\t}\n+\t// Level: 1\n \n \tpublic String toString() {\n \t\treturn launcher.toString();\n \t}\n \n-\t// needed???\n-\tpublic SpoonModelBuilder compiler(Factory factory) {\n-\t\treturn launcher.createCompiler(factory);\n-\t}\n-\n-\t// needed???\n-\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n-\t\treturn launcher.createCompiler(factory, inputSources);\n-\t}\n-\n-\t// needed???\n-\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n-\t\t\tList<SpoonResource> templateSources) {\n-\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n-\t}\n-\n-\t// needed?\n-\tpublic SpoonModelBuilder createCompiler() {\n-\t\treturn launcher.createCompiler();\n-\t}\n-\n-\t// needed?\n-\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n-\t\treturn launcher.createCompiler(inputSources);\n-\t}\n-\n-\t// needed?\n-\tpublic Factory createFactory() {\n-\t\treturn launcher.createFactory();\n-\t}\n-\n-\t// needed???\n-\tpublic Factory getFactory() {\n-\t\treturn launcher.getFactory();\n-\t}\n-\n-\t// needed?\n-\tpublic Environment createEnvironment() {\n-\t\treturn launcher.createEnvironment();\n-\t}\n+\t// Level: 4\n \n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n+\t// Level: 3\n+\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\tpublic void setSourceOutputDirectory(File outputDirectory) {\n+\t// Level: 4\n+\n+\tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n+\t\treturn this;\n \t}\n \n+\t// Level: 2\n+\n \tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n \t\tlauncher.setOutputFilter(typeFilter);\n \t\treturn this;\n \t}\n+\t// Level: 2\n \n \tpublic FluentLauncher outputFilter(String... qualifedNames) {\n \t\tlauncher.setOutputFilter(qualifedNames);\n \t\treturn this;\n \t}\n \n+\t// Level: 1\n+\n \tpublic FluentLauncher binaryOutputDirectory(String path) {\n \t\tlauncher.setBinaryOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\tpublic void binaryOutputDirectory(File outputDirectory) {\n+\t// Level: 1\n+\tpublic FluentLauncher binaryOutputDirectory(File outputDirectory) {\n \t\tlauncher.setBinaryOutputDirectory(outputDirectory);\n+\t\treturn this;\n \t}\n \n \t// here are methods from environment as delegates.\n+\t// Level: 3\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n+\t// Level: 2\n \tpublic FluentLauncher level(String level) {\n \t\tlauncher.getEnvironment().setLevel(level);\n \t\treturn this;\n \t}\n-\t// TODO: finish\n+\n+\t// Level: 1\n+\tpublic FluentLauncher shouldCompile(boolean shouldCompile) {\n+\t\tlauncher.getEnvironment().setShouldCompile(shouldCompile);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher disableConsistencyChecks() {\n+\t\tlauncher.getEnvironment().disableConsistencyChecks();\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher complianceLevel(int level) {\n+\t\tlauncher.getEnvironment().setComplianceLevel(level);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher useTabulations(boolean tabulation) {\n+\t\tlauncher.getEnvironment().useTabulations(tabulation);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher tabulationSize(int size) {\n+\t\tlauncher.getEnvironment().setTabulationSize(size);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 3\n+\tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n+\t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 3\n+\tpublic FluentLauncher preserveLineNumbers(boolean preserveLineNumbers) {\n+\t\tlauncher.getEnvironment().setPreserveLineNumbers(preserveLineNumbers);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher noClasspath(boolean option) {\n+\t\tlauncher.getEnvironment().setNoClasspath(option);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher copyResources(boolean copyResources) {\n+\t\tlauncher.getEnvironment().setCopyResources(copyResources);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher enableComments(boolean commentEnable) {\n+\t\tlauncher.getEnvironment().setCommentEnabled(commentEnable);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher outputType(OutputType type) {\n+\t\tlauncher.getEnvironment().setOutputType(type);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher outputDestinationHandler(OutputDestinationHandler handler) {\n+\t\tlauncher.getEnvironment().setOutputDestinationHandler(handler);\n+\t\treturn this;\n+\t}\n }\n", "next_change": {"commit": "baf69e8251a3610a13072a1df681292f2ba5f98a", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex e5315747..73e441ec 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -160,27 +160,4 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n-\t// Level: 1\n-\tpublic FluentLauncher copyResources(boolean copyResources) {\n-\t\tlauncher.getEnvironment().setCopyResources(copyResources);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher enableComments(boolean commentEnable) {\n-\t\tlauncher.getEnvironment().setCommentEnabled(commentEnable);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher outputType(OutputType type) {\n-\t\tlauncher.getEnvironment().setOutputType(type);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher outputDestinationHandler(OutputDestinationHandler handler) {\n-\t\tlauncher.getEnvironment().setOutputDestinationHandler(handler);\n-\t\treturn this;\n-\t}\n }\n", "next_change": {"commit": "33edf5c41ab53e2bd20c5ca7252b105d11545949", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 73e441ec..b41b7c5e 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -5,156 +10,71 @@ import java.io.File;\n import spoon.processing.Processor;\n import spoon.reflect.CtModel;\n import spoon.reflect.declaration.CtElement;\n-import spoon.reflect.declaration.CtType;\n-import spoon.reflect.visitor.Filter;\n-import spoon.support.OutputDestinationHandler;\n \n /**\n  * TODO: doc\n  */\n public class FluentLauncher {\n \n-\tprivate SpoonAPI launcher;\n-\n-\t/**\n-\t * i gave Methods numbers 1-4. 4 means mandatory. 3 means all users will use\n-\t * this. 2 means helper method but not needed. 1 means no clue why we want this.\n-\t */\n-\t// Level: 4\n+\tprivate Launcher launcher;\n \n \tpublic FluentLauncher() {\n \t\tthis.launcher = new Launcher();\n \t}\n \n-\t// Level: 4\n \tpublic FluentLauncher inputResource(String path) {\n \t\tlauncher.addInputResource(path);\n \t\treturn this;\n \t}\n \n-\t// Level: 3\n-\n-\tpublic FluentLauncher processor(String name) {\n-\t\tlauncher.addProcessor(name);\n+\tpublic FluentLauncher inputResource(Iterable<String> paths) {\n+\t\tfor (String path : paths) {\n+\t\t\tlauncher.addInputResource(path);\n+\t\t}\n \t\treturn this;\n \t}\n \n-\t// Level: 4\n-\n \tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n \t\tlauncher.addProcessor(processor);\n \t\treturn this;\n \t}\n \n-\t// Level: 1\n-\n-\tpublic String toString() {\n-\t\treturn launcher.toString();\n-\t}\n-\n-\t// Level: 4\n-\n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n-\t// Level: 3\n-\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\t// Level: 4\n-\n \tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\n-\tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n-\t\tlauncher.setOutputFilter(typeFilter);\n-\t\treturn this;\n-\t}\n-\t// Level: 2\n-\n-\tpublic FluentLauncher outputFilter(String... qualifedNames) {\n-\t\tlauncher.setOutputFilter(qualifedNames);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\n-\tpublic FluentLauncher binaryOutputDirectory(String path) {\n-\t\tlauncher.setBinaryOutputDirectory(path);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher binaryOutputDirectory(File outputDirectory) {\n-\t\tlauncher.setBinaryOutputDirectory(outputDirectory);\n-\t\treturn this;\n-\t}\n-\n \t// here are methods from environment as delegates.\n-\t// Level: 3\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\tpublic FluentLauncher level(String level) {\n-\t\tlauncher.getEnvironment().setLevel(level);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher shouldCompile(boolean shouldCompile) {\n-\t\tlauncher.getEnvironment().setShouldCompile(shouldCompile);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n \tpublic FluentLauncher disableConsistencyChecks() {\n \t\tlauncher.getEnvironment().disableConsistencyChecks();\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n \tpublic FluentLauncher complianceLevel(int level) {\n \t\tlauncher.getEnvironment().setComplianceLevel(level);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\tpublic FluentLauncher useTabulations(boolean tabulation) {\n-\t\tlauncher.getEnvironment().useTabulations(tabulation);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n-\tpublic FluentLauncher tabulationSize(int size) {\n-\t\tlauncher.getEnvironment().setTabulationSize(size);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 3\n \tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n \t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n \t\treturn this;\n \t}\n \n-\t// Level: 3\n-\tpublic FluentLauncher preserveLineNumbers(boolean preserveLineNumbers) {\n-\t\tlauncher.getEnvironment().setPreserveLineNumbers(preserveLineNumbers);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n \tpublic FluentLauncher noClasspath(boolean option) {\n \t\tlauncher.getEnvironment().setNoClasspath(option);\n \t\treturn this;\n", "next_change": {"commit": "f08437e0ed96e5a13359559825ff8d1543fc92d6", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex b41b7c5e..df0accf8 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -80,4 +88,8 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n+\tpublic FluentLauncher encoding(Charset encoding) {\n+\t\tlauncher.getEnvironment().setEncoding(encoding);\n+\t\treturn this;\n+\t}\n }\n", "next_change": {"commit": "09a883ac46242b99d5fdea530319a0a443b77452", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex df0accf8..1cb5f37d 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -47,47 +71,118 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Builds the model\n+\t */\n+\n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n+\t/**\n+\t * Sets the output directory for source generated.\n+\t *\n+\t * @param path Path for the output directory.\n+\t */\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the output directory for source generated.\n+\t *\n+\t * @param outputDirectory {@link File} for output directory.\n+\t */\n \tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n \t\treturn this;\n \t}\n \n-\t// here are methods from environment as delegates.\n+\t/**\n+\t * Tell to the Java printer to automatically generate imports and use simple\n+\t * names instead of fully-qualified name.\n+\t * \n+\t * @param autoImports toggles autoImports on or off.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Disable all consistency checks on the AST. Dangerous! The only valid usage of\n+\t * this is to keep full backward-compatibility.\n+\t * \n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher disableConsistencyChecks() {\n \t\tlauncher.getEnvironment().disableConsistencyChecks();\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the Java version compliance level.\n+\t * \n+\t * @param level of java version\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher complianceLevel(int level) {\n \t\tlauncher.getEnvironment().setComplianceLevel(level);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the source class path of the Spoon model. Only .jar files or directories\n+\t * with *.class files are accepted. The *.jar or *.java files contained in given\n+\t * directories are ignored.\n+\t *\n+\t * @throws InvalidClassPathException if a given classpath does not exists or\n+\t *                                   does not have the right format (.jar file\n+\t *                                   or directory)\n+\t * @param sourceClasspath path to sources.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n \t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the option \"noclasspath\", use with caution (see explanation below).\n+\t *\n+\t * With this option, Spoon does not require the full classpath to build the\n+\t * model. In this case, all references to classes that are not in the classpath\n+\t * are handled with the reference mechanism. The \"simplename\" of the reference\n+\t * object refers to the unbound identifier.\n+\t *\n+\t * This option facilitates the use of Spoon when is is hard to have the complete\n+\t * and correct classpath, for example for mining software repositories.\n+\t *\n+\t * For writing analyses, this option works well if you don't cross the reference\n+\t * by a call to getDeclaration() (if you really want to do so, then check for\n+\t * nullness of the result before).\n+\t *\n+\t * In normal mode, compilation errors are signaled as exception, with this\n+\t * option enabled they are signaled as message only. The reason is that in most\n+\t * cases, there are necessarily errors related to the missing classpath\n+\t * elements.\n+\t * \n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher noClasspath(boolean option) {\n \t\tlauncher.getEnvironment().setNoClasspath(option);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the encoding to use for parsing source code\n+\t * \n+\t * @param encoding used for parsing.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher encoding(Charset encoding) {\n \t\tlauncher.getEnvironment().setEncoding(encoding);\n \t\treturn this;\n", "next_change": {"commit": "5d5a482a475b543172276785882f34dcd1637cf9", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 1cb5f37d..9df4cbff 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -179,7 +192,7 @@ public class FluentLauncher {\n \n \t/**\n \t * Set the encoding to use for parsing source code\n-\t * \n+\t *\n \t * @param encoding used for parsing.\n \t * @return the launcher after setting the option.\n \t */\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODExNg==", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381388116", "body": "Is there a need for `buildModel` and `buildCtModel`?", "bodyText": "Is there a need for buildModel and buildCtModel?", "bodyHTML": "<p dir=\"auto\">Is there a need for <code>buildModel</code> and <code>buildCtModel</code>?</p>", "author": "DaveJarvis", "createdAt": "2020-02-19T16:26:39Z", "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {\n+\t\treturn launcher.createFactory();\n+\t}\n+\n+\t// needed???\n+\tpublic Factory getFactory() {\n+\t\treturn launcher.getFactory();\n+\t}\n+\n+\t// needed?\n+\tpublic Environment createEnvironment() {\n+\t\treturn launcher.createEnvironment();\n+\t}\n+\n+\tpublic CtModel buildModel() {", "originalCommit": "507ed589a081093895e03a4ade6a25fc126f2e7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxOTEzNw==", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r382219137", "bodyText": "i can't find buildCtModel anywhere. SpoonAPI has the method buildModel in the interface.\nCould you show where the term buildCtModel is used?", "author": "MartinWitt", "createdAt": "2020-02-20T19:44:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3ODgxNA==", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r382678814", "bodyText": "I was wondering if there's a Model and a CtModel that can be built. If there's no Model class to build, then the question is moot.", "author": "DaveJarvis", "createdAt": "2020-02-21T16:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODExNg=="}], "type": "inlineReview", "revised_code": {"commit": "b7f8f8279f8f6d6f89ef29f366ef369a3627ea64", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 53e3b7db..e5315747 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -1,160 +1,186 @@\n package spoon;\n \n import java.io.File;\n-import java.util.List;\n \n-import spoon.compiler.Environment;\n-import spoon.compiler.SpoonResource;\n import spoon.processing.Processor;\n import spoon.reflect.CtModel;\n import spoon.reflect.declaration.CtElement;\n import spoon.reflect.declaration.CtType;\n-import spoon.reflect.factory.Factory;\n import spoon.reflect.visitor.Filter;\n-import spoon.reflect.visitor.PrettyPrinter;\n-import spoon.support.JavaOutputProcessor;\n+import spoon.support.OutputDestinationHandler;\n \n /**\n  * TODO: doc\n  */\n public class FluentLauncher {\n \n-\tLauncher launcher;\n-\n-\tpublic FluentLauncher() {\n-\t\tthis.launcher = new Launcher();\n-\t}\n+\tprivate SpoonAPI launcher;\n \n \t/**\n-\t * @param args\n-\t * @see spoon.Launcher#run(java.lang.String[])\n+\t * i gave Methods numbers 1-4. 4 means mandatory. 3 means all users will use\n+\t * this. 2 means helper method but not needed. 1 means no clue why we want this.\n \t */\n+\t// Level: 4\n \n-\tpublic void run(String[] args) {\n-\t\tlauncher.run(args);\n-\t}\n-\n-\tpublic void printUsage() {\n-\t\tlauncher.printUsage();\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n \t}\n \n+\t// Level: 4\n \tpublic FluentLauncher inputResource(String path) {\n \t\tlauncher.addInputResource(path);\n \t\treturn this;\n \t}\n \n-\tpublic FluentLauncher inputResource(SpoonResource resource) {\n-\t\tlauncher.addInputResource(resource);\n-\t\treturn this;\n-\t}\n+\t// Level: 3\n \n \tpublic FluentLauncher processor(String name) {\n \t\tlauncher.addProcessor(name);\n \t\treturn this;\n \t}\n \n+\t// Level: 4\n+\n \tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n \t\tlauncher.addProcessor(processor);\n \t\treturn this;\n \t}\n \n-\tpublic FluentLauncher templateResource(SpoonResource resource) {\n-\t\tlauncher.addTemplateResource(resource);\n-\t\treturn this;\n-\t}\n-\n-\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n-\tpublic Environment getEnvironment() {\n-\t\treturn launcher.getEnvironment();\n-\t}\n+\t// Level: 1\n \n \tpublic String toString() {\n \t\treturn launcher.toString();\n \t}\n \n-\t// needed???\n-\tpublic SpoonModelBuilder compiler(Factory factory) {\n-\t\treturn launcher.createCompiler(factory);\n-\t}\n-\n-\t// needed???\n-\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n-\t\treturn launcher.createCompiler(factory, inputSources);\n-\t}\n-\n-\t// needed???\n-\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n-\t\t\tList<SpoonResource> templateSources) {\n-\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n-\t}\n-\n-\t// needed?\n-\tpublic SpoonModelBuilder createCompiler() {\n-\t\treturn launcher.createCompiler();\n-\t}\n-\n-\t// needed?\n-\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n-\t\treturn launcher.createCompiler(inputSources);\n-\t}\n-\n-\t// needed?\n-\tpublic Factory createFactory() {\n-\t\treturn launcher.createFactory();\n-\t}\n-\n-\t// needed???\n-\tpublic Factory getFactory() {\n-\t\treturn launcher.getFactory();\n-\t}\n-\n-\t// needed?\n-\tpublic Environment createEnvironment() {\n-\t\treturn launcher.createEnvironment();\n-\t}\n+\t// Level: 4\n \n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n+\t// Level: 3\n+\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\tpublic void setSourceOutputDirectory(File outputDirectory) {\n+\t// Level: 4\n+\n+\tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n+\t\treturn this;\n \t}\n \n+\t// Level: 2\n+\n \tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n \t\tlauncher.setOutputFilter(typeFilter);\n \t\treturn this;\n \t}\n+\t// Level: 2\n \n \tpublic FluentLauncher outputFilter(String... qualifedNames) {\n \t\tlauncher.setOutputFilter(qualifedNames);\n \t\treturn this;\n \t}\n \n+\t// Level: 1\n+\n \tpublic FluentLauncher binaryOutputDirectory(String path) {\n \t\tlauncher.setBinaryOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\tpublic void binaryOutputDirectory(File outputDirectory) {\n+\t// Level: 1\n+\tpublic FluentLauncher binaryOutputDirectory(File outputDirectory) {\n \t\tlauncher.setBinaryOutputDirectory(outputDirectory);\n+\t\treturn this;\n \t}\n \n \t// here are methods from environment as delegates.\n+\t// Level: 3\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n+\t// Level: 2\n \tpublic FluentLauncher level(String level) {\n \t\tlauncher.getEnvironment().setLevel(level);\n \t\treturn this;\n \t}\n-\t// TODO: finish\n+\n+\t// Level: 1\n+\tpublic FluentLauncher shouldCompile(boolean shouldCompile) {\n+\t\tlauncher.getEnvironment().setShouldCompile(shouldCompile);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher disableConsistencyChecks() {\n+\t\tlauncher.getEnvironment().disableConsistencyChecks();\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher complianceLevel(int level) {\n+\t\tlauncher.getEnvironment().setComplianceLevel(level);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher useTabulations(boolean tabulation) {\n+\t\tlauncher.getEnvironment().useTabulations(tabulation);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher tabulationSize(int size) {\n+\t\tlauncher.getEnvironment().setTabulationSize(size);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 3\n+\tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n+\t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 3\n+\tpublic FluentLauncher preserveLineNumbers(boolean preserveLineNumbers) {\n+\t\tlauncher.getEnvironment().setPreserveLineNumbers(preserveLineNumbers);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher noClasspath(boolean option) {\n+\t\tlauncher.getEnvironment().setNoClasspath(option);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher copyResources(boolean copyResources) {\n+\t\tlauncher.getEnvironment().setCopyResources(copyResources);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher enableComments(boolean commentEnable) {\n+\t\tlauncher.getEnvironment().setCommentEnabled(commentEnable);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher outputType(OutputType type) {\n+\t\tlauncher.getEnvironment().setOutputType(type);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher outputDestinationHandler(OutputDestinationHandler handler) {\n+\t\tlauncher.getEnvironment().setOutputDestinationHandler(handler);\n+\t\treturn this;\n+\t}\n }\n", "next_change": {"commit": "baf69e8251a3610a13072a1df681292f2ba5f98a", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex e5315747..73e441ec 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -160,27 +160,4 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n-\t// Level: 1\n-\tpublic FluentLauncher copyResources(boolean copyResources) {\n-\t\tlauncher.getEnvironment().setCopyResources(copyResources);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher enableComments(boolean commentEnable) {\n-\t\tlauncher.getEnvironment().setCommentEnabled(commentEnable);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher outputType(OutputType type) {\n-\t\tlauncher.getEnvironment().setOutputType(type);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher outputDestinationHandler(OutputDestinationHandler handler) {\n-\t\tlauncher.getEnvironment().setOutputDestinationHandler(handler);\n-\t\treturn this;\n-\t}\n }\n", "next_change": {"commit": "33edf5c41ab53e2bd20c5ca7252b105d11545949", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 73e441ec..b41b7c5e 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -5,156 +10,71 @@ import java.io.File;\n import spoon.processing.Processor;\n import spoon.reflect.CtModel;\n import spoon.reflect.declaration.CtElement;\n-import spoon.reflect.declaration.CtType;\n-import spoon.reflect.visitor.Filter;\n-import spoon.support.OutputDestinationHandler;\n \n /**\n  * TODO: doc\n  */\n public class FluentLauncher {\n \n-\tprivate SpoonAPI launcher;\n-\n-\t/**\n-\t * i gave Methods numbers 1-4. 4 means mandatory. 3 means all users will use\n-\t * this. 2 means helper method but not needed. 1 means no clue why we want this.\n-\t */\n-\t// Level: 4\n+\tprivate Launcher launcher;\n \n \tpublic FluentLauncher() {\n \t\tthis.launcher = new Launcher();\n \t}\n \n-\t// Level: 4\n \tpublic FluentLauncher inputResource(String path) {\n \t\tlauncher.addInputResource(path);\n \t\treturn this;\n \t}\n \n-\t// Level: 3\n-\n-\tpublic FluentLauncher processor(String name) {\n-\t\tlauncher.addProcessor(name);\n+\tpublic FluentLauncher inputResource(Iterable<String> paths) {\n+\t\tfor (String path : paths) {\n+\t\t\tlauncher.addInputResource(path);\n+\t\t}\n \t\treturn this;\n \t}\n \n-\t// Level: 4\n-\n \tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n \t\tlauncher.addProcessor(processor);\n \t\treturn this;\n \t}\n \n-\t// Level: 1\n-\n-\tpublic String toString() {\n-\t\treturn launcher.toString();\n-\t}\n-\n-\t// Level: 4\n-\n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n-\t// Level: 3\n-\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\t// Level: 4\n-\n \tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\n-\tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n-\t\tlauncher.setOutputFilter(typeFilter);\n-\t\treturn this;\n-\t}\n-\t// Level: 2\n-\n-\tpublic FluentLauncher outputFilter(String... qualifedNames) {\n-\t\tlauncher.setOutputFilter(qualifedNames);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\n-\tpublic FluentLauncher binaryOutputDirectory(String path) {\n-\t\tlauncher.setBinaryOutputDirectory(path);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher binaryOutputDirectory(File outputDirectory) {\n-\t\tlauncher.setBinaryOutputDirectory(outputDirectory);\n-\t\treturn this;\n-\t}\n-\n \t// here are methods from environment as delegates.\n-\t// Level: 3\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\tpublic FluentLauncher level(String level) {\n-\t\tlauncher.getEnvironment().setLevel(level);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher shouldCompile(boolean shouldCompile) {\n-\t\tlauncher.getEnvironment().setShouldCompile(shouldCompile);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n \tpublic FluentLauncher disableConsistencyChecks() {\n \t\tlauncher.getEnvironment().disableConsistencyChecks();\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n \tpublic FluentLauncher complianceLevel(int level) {\n \t\tlauncher.getEnvironment().setComplianceLevel(level);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\tpublic FluentLauncher useTabulations(boolean tabulation) {\n-\t\tlauncher.getEnvironment().useTabulations(tabulation);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n-\tpublic FluentLauncher tabulationSize(int size) {\n-\t\tlauncher.getEnvironment().setTabulationSize(size);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 3\n \tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n \t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n \t\treturn this;\n \t}\n \n-\t// Level: 3\n-\tpublic FluentLauncher preserveLineNumbers(boolean preserveLineNumbers) {\n-\t\tlauncher.getEnvironment().setPreserveLineNumbers(preserveLineNumbers);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n \tpublic FluentLauncher noClasspath(boolean option) {\n \t\tlauncher.getEnvironment().setNoClasspath(option);\n \t\treturn this;\n", "next_change": {"commit": "f08437e0ed96e5a13359559825ff8d1543fc92d6", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex b41b7c5e..df0accf8 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -80,4 +88,8 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n+\tpublic FluentLauncher encoding(Charset encoding) {\n+\t\tlauncher.getEnvironment().setEncoding(encoding);\n+\t\treturn this;\n+\t}\n }\n", "next_change": {"commit": "09a883ac46242b99d5fdea530319a0a443b77452", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex df0accf8..1cb5f37d 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -47,47 +71,118 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Builds the model\n+\t */\n+\n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n+\t/**\n+\t * Sets the output directory for source generated.\n+\t *\n+\t * @param path Path for the output directory.\n+\t */\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the output directory for source generated.\n+\t *\n+\t * @param outputDirectory {@link File} for output directory.\n+\t */\n \tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n \t\treturn this;\n \t}\n \n-\t// here are methods from environment as delegates.\n+\t/**\n+\t * Tell to the Java printer to automatically generate imports and use simple\n+\t * names instead of fully-qualified name.\n+\t * \n+\t * @param autoImports toggles autoImports on or off.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Disable all consistency checks on the AST. Dangerous! The only valid usage of\n+\t * this is to keep full backward-compatibility.\n+\t * \n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher disableConsistencyChecks() {\n \t\tlauncher.getEnvironment().disableConsistencyChecks();\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the Java version compliance level.\n+\t * \n+\t * @param level of java version\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher complianceLevel(int level) {\n \t\tlauncher.getEnvironment().setComplianceLevel(level);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the source class path of the Spoon model. Only .jar files or directories\n+\t * with *.class files are accepted. The *.jar or *.java files contained in given\n+\t * directories are ignored.\n+\t *\n+\t * @throws InvalidClassPathException if a given classpath does not exists or\n+\t *                                   does not have the right format (.jar file\n+\t *                                   or directory)\n+\t * @param sourceClasspath path to sources.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n \t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the option \"noclasspath\", use with caution (see explanation below).\n+\t *\n+\t * With this option, Spoon does not require the full classpath to build the\n+\t * model. In this case, all references to classes that are not in the classpath\n+\t * are handled with the reference mechanism. The \"simplename\" of the reference\n+\t * object refers to the unbound identifier.\n+\t *\n+\t * This option facilitates the use of Spoon when is is hard to have the complete\n+\t * and correct classpath, for example for mining software repositories.\n+\t *\n+\t * For writing analyses, this option works well if you don't cross the reference\n+\t * by a call to getDeclaration() (if you really want to do so, then check for\n+\t * nullness of the result before).\n+\t *\n+\t * In normal mode, compilation errors are signaled as exception, with this\n+\t * option enabled they are signaled as message only. The reason is that in most\n+\t * cases, there are necessarily errors related to the missing classpath\n+\t * elements.\n+\t * \n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher noClasspath(boolean option) {\n \t\tlauncher.getEnvironment().setNoClasspath(option);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the encoding to use for parsing source code\n+\t * \n+\t * @param encoding used for parsing.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher encoding(Charset encoding) {\n \t\tlauncher.getEnvironment().setEncoding(encoding);\n \t\treturn this;\n", "next_change": {"commit": "5d5a482a475b543172276785882f34dcd1637cf9", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 1cb5f37d..9df4cbff 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -179,7 +192,7 @@ public class FluentLauncher {\n \n \t/**\n \t * Set the encoding to use for parsing source code\n-\t * \n+\t *\n \t * @param encoding used for parsing.\n \t * @return the launcher after setting the option.\n \t */\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODczMQ==", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381388731", "body": "Not part of the fluent interface? This could be confusing for some as it doesn't follow the fluent interface idiom.", "bodyText": "Not part of the fluent interface? This could be confusing for some as it doesn't follow the fluent interface idiom.", "bodyHTML": "<p dir=\"auto\">Not part of the fluent interface? This could be confusing for some as it doesn't follow the fluent interface idiom.</p>", "author": "DaveJarvis", "createdAt": "2020-02-19T16:27:32Z", "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {\n+\t\treturn launcher.createFactory();\n+\t}\n+\n+\t// needed???\n+\tpublic Factory getFactory() {\n+\t\treturn launcher.getFactory();\n+\t}\n+\n+\t// needed?\n+\tpublic Environment createEnvironment() {\n+\t\treturn launcher.createEnvironment();\n+\t}\n+\n+\tpublic CtModel buildModel() {\n+\t\tlauncher.run();\n+\t\treturn launcher.getModel();\n+\t}\n+\n+\tpublic FluentLauncher outputDirectory(String path) {\n+\t\tlauncher.setSourceOutputDirectory(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic void setSourceOutputDirectory(File outputDirectory) {", "originalCommit": "507ed589a081093895e03a4ade6a25fc126f2e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7f8f8279f8f6d6f89ef29f366ef369a3627ea64", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 53e3b7db..e5315747 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -1,160 +1,186 @@\n package spoon;\n \n import java.io.File;\n-import java.util.List;\n \n-import spoon.compiler.Environment;\n-import spoon.compiler.SpoonResource;\n import spoon.processing.Processor;\n import spoon.reflect.CtModel;\n import spoon.reflect.declaration.CtElement;\n import spoon.reflect.declaration.CtType;\n-import spoon.reflect.factory.Factory;\n import spoon.reflect.visitor.Filter;\n-import spoon.reflect.visitor.PrettyPrinter;\n-import spoon.support.JavaOutputProcessor;\n+import spoon.support.OutputDestinationHandler;\n \n /**\n  * TODO: doc\n  */\n public class FluentLauncher {\n \n-\tLauncher launcher;\n-\n-\tpublic FluentLauncher() {\n-\t\tthis.launcher = new Launcher();\n-\t}\n+\tprivate SpoonAPI launcher;\n \n \t/**\n-\t * @param args\n-\t * @see spoon.Launcher#run(java.lang.String[])\n+\t * i gave Methods numbers 1-4. 4 means mandatory. 3 means all users will use\n+\t * this. 2 means helper method but not needed. 1 means no clue why we want this.\n \t */\n+\t// Level: 4\n \n-\tpublic void run(String[] args) {\n-\t\tlauncher.run(args);\n-\t}\n-\n-\tpublic void printUsage() {\n-\t\tlauncher.printUsage();\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n \t}\n \n+\t// Level: 4\n \tpublic FluentLauncher inputResource(String path) {\n \t\tlauncher.addInputResource(path);\n \t\treturn this;\n \t}\n \n-\tpublic FluentLauncher inputResource(SpoonResource resource) {\n-\t\tlauncher.addInputResource(resource);\n-\t\treturn this;\n-\t}\n+\t// Level: 3\n \n \tpublic FluentLauncher processor(String name) {\n \t\tlauncher.addProcessor(name);\n \t\treturn this;\n \t}\n \n+\t// Level: 4\n+\n \tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n \t\tlauncher.addProcessor(processor);\n \t\treturn this;\n \t}\n \n-\tpublic FluentLauncher templateResource(SpoonResource resource) {\n-\t\tlauncher.addTemplateResource(resource);\n-\t\treturn this;\n-\t}\n-\n-\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n-\tpublic Environment getEnvironment() {\n-\t\treturn launcher.getEnvironment();\n-\t}\n+\t// Level: 1\n \n \tpublic String toString() {\n \t\treturn launcher.toString();\n \t}\n \n-\t// needed???\n-\tpublic SpoonModelBuilder compiler(Factory factory) {\n-\t\treturn launcher.createCompiler(factory);\n-\t}\n-\n-\t// needed???\n-\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n-\t\treturn launcher.createCompiler(factory, inputSources);\n-\t}\n-\n-\t// needed???\n-\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n-\t\t\tList<SpoonResource> templateSources) {\n-\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n-\t}\n-\n-\t// needed?\n-\tpublic SpoonModelBuilder createCompiler() {\n-\t\treturn launcher.createCompiler();\n-\t}\n-\n-\t// needed?\n-\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n-\t\treturn launcher.createCompiler(inputSources);\n-\t}\n-\n-\t// needed?\n-\tpublic Factory createFactory() {\n-\t\treturn launcher.createFactory();\n-\t}\n-\n-\t// needed???\n-\tpublic Factory getFactory() {\n-\t\treturn launcher.getFactory();\n-\t}\n-\n-\t// needed?\n-\tpublic Environment createEnvironment() {\n-\t\treturn launcher.createEnvironment();\n-\t}\n+\t// Level: 4\n \n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n+\t// Level: 3\n+\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\tpublic void setSourceOutputDirectory(File outputDirectory) {\n+\t// Level: 4\n+\n+\tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n+\t\treturn this;\n \t}\n \n+\t// Level: 2\n+\n \tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n \t\tlauncher.setOutputFilter(typeFilter);\n \t\treturn this;\n \t}\n+\t// Level: 2\n \n \tpublic FluentLauncher outputFilter(String... qualifedNames) {\n \t\tlauncher.setOutputFilter(qualifedNames);\n \t\treturn this;\n \t}\n \n+\t// Level: 1\n+\n \tpublic FluentLauncher binaryOutputDirectory(String path) {\n \t\tlauncher.setBinaryOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\tpublic void binaryOutputDirectory(File outputDirectory) {\n+\t// Level: 1\n+\tpublic FluentLauncher binaryOutputDirectory(File outputDirectory) {\n \t\tlauncher.setBinaryOutputDirectory(outputDirectory);\n+\t\treturn this;\n \t}\n \n \t// here are methods from environment as delegates.\n+\t// Level: 3\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n+\t// Level: 2\n \tpublic FluentLauncher level(String level) {\n \t\tlauncher.getEnvironment().setLevel(level);\n \t\treturn this;\n \t}\n-\t// TODO: finish\n+\n+\t// Level: 1\n+\tpublic FluentLauncher shouldCompile(boolean shouldCompile) {\n+\t\tlauncher.getEnvironment().setShouldCompile(shouldCompile);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher disableConsistencyChecks() {\n+\t\tlauncher.getEnvironment().disableConsistencyChecks();\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher complianceLevel(int level) {\n+\t\tlauncher.getEnvironment().setComplianceLevel(level);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher useTabulations(boolean tabulation) {\n+\t\tlauncher.getEnvironment().useTabulations(tabulation);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher tabulationSize(int size) {\n+\t\tlauncher.getEnvironment().setTabulationSize(size);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 3\n+\tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n+\t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 3\n+\tpublic FluentLauncher preserveLineNumbers(boolean preserveLineNumbers) {\n+\t\tlauncher.getEnvironment().setPreserveLineNumbers(preserveLineNumbers);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher noClasspath(boolean option) {\n+\t\tlauncher.getEnvironment().setNoClasspath(option);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher copyResources(boolean copyResources) {\n+\t\tlauncher.getEnvironment().setCopyResources(copyResources);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher enableComments(boolean commentEnable) {\n+\t\tlauncher.getEnvironment().setCommentEnabled(commentEnable);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher outputType(OutputType type) {\n+\t\tlauncher.getEnvironment().setOutputType(type);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher outputDestinationHandler(OutputDestinationHandler handler) {\n+\t\tlauncher.getEnvironment().setOutputDestinationHandler(handler);\n+\t\treturn this;\n+\t}\n }\n", "next_change": {"commit": "baf69e8251a3610a13072a1df681292f2ba5f98a", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex e5315747..73e441ec 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -160,27 +160,4 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n-\t// Level: 1\n-\tpublic FluentLauncher copyResources(boolean copyResources) {\n-\t\tlauncher.getEnvironment().setCopyResources(copyResources);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher enableComments(boolean commentEnable) {\n-\t\tlauncher.getEnvironment().setCommentEnabled(commentEnable);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher outputType(OutputType type) {\n-\t\tlauncher.getEnvironment().setOutputType(type);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher outputDestinationHandler(OutputDestinationHandler handler) {\n-\t\tlauncher.getEnvironment().setOutputDestinationHandler(handler);\n-\t\treturn this;\n-\t}\n }\n", "next_change": {"commit": "33edf5c41ab53e2bd20c5ca7252b105d11545949", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 73e441ec..b41b7c5e 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -5,156 +10,71 @@ import java.io.File;\n import spoon.processing.Processor;\n import spoon.reflect.CtModel;\n import spoon.reflect.declaration.CtElement;\n-import spoon.reflect.declaration.CtType;\n-import spoon.reflect.visitor.Filter;\n-import spoon.support.OutputDestinationHandler;\n \n /**\n  * TODO: doc\n  */\n public class FluentLauncher {\n \n-\tprivate SpoonAPI launcher;\n-\n-\t/**\n-\t * i gave Methods numbers 1-4. 4 means mandatory. 3 means all users will use\n-\t * this. 2 means helper method but not needed. 1 means no clue why we want this.\n-\t */\n-\t// Level: 4\n+\tprivate Launcher launcher;\n \n \tpublic FluentLauncher() {\n \t\tthis.launcher = new Launcher();\n \t}\n \n-\t// Level: 4\n \tpublic FluentLauncher inputResource(String path) {\n \t\tlauncher.addInputResource(path);\n \t\treturn this;\n \t}\n \n-\t// Level: 3\n-\n-\tpublic FluentLauncher processor(String name) {\n-\t\tlauncher.addProcessor(name);\n+\tpublic FluentLauncher inputResource(Iterable<String> paths) {\n+\t\tfor (String path : paths) {\n+\t\t\tlauncher.addInputResource(path);\n+\t\t}\n \t\treturn this;\n \t}\n \n-\t// Level: 4\n-\n \tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n \t\tlauncher.addProcessor(processor);\n \t\treturn this;\n \t}\n \n-\t// Level: 1\n-\n-\tpublic String toString() {\n-\t\treturn launcher.toString();\n-\t}\n-\n-\t// Level: 4\n-\n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n-\t// Level: 3\n-\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\t// Level: 4\n-\n \tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\n-\tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n-\t\tlauncher.setOutputFilter(typeFilter);\n-\t\treturn this;\n-\t}\n-\t// Level: 2\n-\n-\tpublic FluentLauncher outputFilter(String... qualifedNames) {\n-\t\tlauncher.setOutputFilter(qualifedNames);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\n-\tpublic FluentLauncher binaryOutputDirectory(String path) {\n-\t\tlauncher.setBinaryOutputDirectory(path);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher binaryOutputDirectory(File outputDirectory) {\n-\t\tlauncher.setBinaryOutputDirectory(outputDirectory);\n-\t\treturn this;\n-\t}\n-\n \t// here are methods from environment as delegates.\n-\t// Level: 3\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\tpublic FluentLauncher level(String level) {\n-\t\tlauncher.getEnvironment().setLevel(level);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher shouldCompile(boolean shouldCompile) {\n-\t\tlauncher.getEnvironment().setShouldCompile(shouldCompile);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n \tpublic FluentLauncher disableConsistencyChecks() {\n \t\tlauncher.getEnvironment().disableConsistencyChecks();\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n \tpublic FluentLauncher complianceLevel(int level) {\n \t\tlauncher.getEnvironment().setComplianceLevel(level);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\tpublic FluentLauncher useTabulations(boolean tabulation) {\n-\t\tlauncher.getEnvironment().useTabulations(tabulation);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n-\tpublic FluentLauncher tabulationSize(int size) {\n-\t\tlauncher.getEnvironment().setTabulationSize(size);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 3\n \tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n \t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n \t\treturn this;\n \t}\n \n-\t// Level: 3\n-\tpublic FluentLauncher preserveLineNumbers(boolean preserveLineNumbers) {\n-\t\tlauncher.getEnvironment().setPreserveLineNumbers(preserveLineNumbers);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n \tpublic FluentLauncher noClasspath(boolean option) {\n \t\tlauncher.getEnvironment().setNoClasspath(option);\n \t\treturn this;\n", "next_change": {"commit": "f08437e0ed96e5a13359559825ff8d1543fc92d6", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex b41b7c5e..df0accf8 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -80,4 +88,8 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n+\tpublic FluentLauncher encoding(Charset encoding) {\n+\t\tlauncher.getEnvironment().setEncoding(encoding);\n+\t\treturn this;\n+\t}\n }\n", "next_change": {"commit": "09a883ac46242b99d5fdea530319a0a443b77452", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex df0accf8..1cb5f37d 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -47,47 +71,118 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Builds the model\n+\t */\n+\n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n+\t/**\n+\t * Sets the output directory for source generated.\n+\t *\n+\t * @param path Path for the output directory.\n+\t */\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the output directory for source generated.\n+\t *\n+\t * @param outputDirectory {@link File} for output directory.\n+\t */\n \tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n \t\treturn this;\n \t}\n \n-\t// here are methods from environment as delegates.\n+\t/**\n+\t * Tell to the Java printer to automatically generate imports and use simple\n+\t * names instead of fully-qualified name.\n+\t * \n+\t * @param autoImports toggles autoImports on or off.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Disable all consistency checks on the AST. Dangerous! The only valid usage of\n+\t * this is to keep full backward-compatibility.\n+\t * \n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher disableConsistencyChecks() {\n \t\tlauncher.getEnvironment().disableConsistencyChecks();\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the Java version compliance level.\n+\t * \n+\t * @param level of java version\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher complianceLevel(int level) {\n \t\tlauncher.getEnvironment().setComplianceLevel(level);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the source class path of the Spoon model. Only .jar files or directories\n+\t * with *.class files are accepted. The *.jar or *.java files contained in given\n+\t * directories are ignored.\n+\t *\n+\t * @throws InvalidClassPathException if a given classpath does not exists or\n+\t *                                   does not have the right format (.jar file\n+\t *                                   or directory)\n+\t * @param sourceClasspath path to sources.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n \t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the option \"noclasspath\", use with caution (see explanation below).\n+\t *\n+\t * With this option, Spoon does not require the full classpath to build the\n+\t * model. In this case, all references to classes that are not in the classpath\n+\t * are handled with the reference mechanism. The \"simplename\" of the reference\n+\t * object refers to the unbound identifier.\n+\t *\n+\t * This option facilitates the use of Spoon when is is hard to have the complete\n+\t * and correct classpath, for example for mining software repositories.\n+\t *\n+\t * For writing analyses, this option works well if you don't cross the reference\n+\t * by a call to getDeclaration() (if you really want to do so, then check for\n+\t * nullness of the result before).\n+\t *\n+\t * In normal mode, compilation errors are signaled as exception, with this\n+\t * option enabled they are signaled as message only. The reason is that in most\n+\t * cases, there are necessarily errors related to the missing classpath\n+\t * elements.\n+\t * \n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher noClasspath(boolean option) {\n \t\tlauncher.getEnvironment().setNoClasspath(option);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the encoding to use for parsing source code\n+\t * \n+\t * @param encoding used for parsing.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher encoding(Charset encoding) {\n \t\tlauncher.getEnvironment().setEncoding(encoding);\n \t\treturn this;\n", "next_change": {"commit": "5d5a482a475b543172276785882f34dcd1637cf9", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 1cb5f37d..9df4cbff 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -179,7 +192,7 @@ public class FluentLauncher {\n \n \t/**\n \t * Set the encoding to use for parsing source code\n-\t * \n+\t *\n \t * @param encoding used for parsing.\n \t * @return the launcher after setting the option.\n \t */\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4OTA2Ng==", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381389066", "body": "Does this need to follow the fluent interface idiom?", "bodyText": "Does this need to follow the fluent interface idiom?", "bodyHTML": "<p dir=\"auto\">Does this need to follow the fluent interface idiom?</p>", "author": "DaveJarvis", "createdAt": "2020-02-19T16:27:59Z", "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {\n+\t\treturn launcher.createFactory();\n+\t}\n+\n+\t// needed???\n+\tpublic Factory getFactory() {\n+\t\treturn launcher.getFactory();\n+\t}\n+\n+\t// needed?\n+\tpublic Environment createEnvironment() {\n+\t\treturn launcher.createEnvironment();\n+\t}\n+\n+\tpublic CtModel buildModel() {\n+\t\tlauncher.run();\n+\t\treturn launcher.getModel();\n+\t}\n+\n+\tpublic FluentLauncher outputDirectory(String path) {\n+\t\tlauncher.setSourceOutputDirectory(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic void setSourceOutputDirectory(File outputDirectory) {\n+\t\tlauncher.setSourceOutputDirectory(outputDirectory);\n+\t}\n+\n+\tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n+\t\tlauncher.setOutputFilter(typeFilter);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher outputFilter(String... qualifedNames) {\n+\t\tlauncher.setOutputFilter(qualifedNames);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher binaryOutputDirectory(String path) {\n+\t\tlauncher.setBinaryOutputDirectory(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic void binaryOutputDirectory(File outputDirectory) {", "originalCommit": "507ed589a081093895e03a4ade6a25fc126f2e7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNzU4Mw==", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381407583", "bodyText": "yes needs to be changed.", "author": "MartinWitt", "createdAt": "2020-02-19T16:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4OTA2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b7f8f8279f8f6d6f89ef29f366ef369a3627ea64", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 53e3b7db..e5315747 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -1,160 +1,186 @@\n package spoon;\n \n import java.io.File;\n-import java.util.List;\n \n-import spoon.compiler.Environment;\n-import spoon.compiler.SpoonResource;\n import spoon.processing.Processor;\n import spoon.reflect.CtModel;\n import spoon.reflect.declaration.CtElement;\n import spoon.reflect.declaration.CtType;\n-import spoon.reflect.factory.Factory;\n import spoon.reflect.visitor.Filter;\n-import spoon.reflect.visitor.PrettyPrinter;\n-import spoon.support.JavaOutputProcessor;\n+import spoon.support.OutputDestinationHandler;\n \n /**\n  * TODO: doc\n  */\n public class FluentLauncher {\n \n-\tLauncher launcher;\n-\n-\tpublic FluentLauncher() {\n-\t\tthis.launcher = new Launcher();\n-\t}\n+\tprivate SpoonAPI launcher;\n \n \t/**\n-\t * @param args\n-\t * @see spoon.Launcher#run(java.lang.String[])\n+\t * i gave Methods numbers 1-4. 4 means mandatory. 3 means all users will use\n+\t * this. 2 means helper method but not needed. 1 means no clue why we want this.\n \t */\n+\t// Level: 4\n \n-\tpublic void run(String[] args) {\n-\t\tlauncher.run(args);\n-\t}\n-\n-\tpublic void printUsage() {\n-\t\tlauncher.printUsage();\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n \t}\n \n+\t// Level: 4\n \tpublic FluentLauncher inputResource(String path) {\n \t\tlauncher.addInputResource(path);\n \t\treturn this;\n \t}\n \n-\tpublic FluentLauncher inputResource(SpoonResource resource) {\n-\t\tlauncher.addInputResource(resource);\n-\t\treturn this;\n-\t}\n+\t// Level: 3\n \n \tpublic FluentLauncher processor(String name) {\n \t\tlauncher.addProcessor(name);\n \t\treturn this;\n \t}\n \n+\t// Level: 4\n+\n \tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n \t\tlauncher.addProcessor(processor);\n \t\treturn this;\n \t}\n \n-\tpublic FluentLauncher templateResource(SpoonResource resource) {\n-\t\tlauncher.addTemplateResource(resource);\n-\t\treturn this;\n-\t}\n-\n-\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n-\tpublic Environment getEnvironment() {\n-\t\treturn launcher.getEnvironment();\n-\t}\n+\t// Level: 1\n \n \tpublic String toString() {\n \t\treturn launcher.toString();\n \t}\n \n-\t// needed???\n-\tpublic SpoonModelBuilder compiler(Factory factory) {\n-\t\treturn launcher.createCompiler(factory);\n-\t}\n-\n-\t// needed???\n-\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n-\t\treturn launcher.createCompiler(factory, inputSources);\n-\t}\n-\n-\t// needed???\n-\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n-\t\t\tList<SpoonResource> templateSources) {\n-\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n-\t}\n-\n-\t// needed?\n-\tpublic SpoonModelBuilder createCompiler() {\n-\t\treturn launcher.createCompiler();\n-\t}\n-\n-\t// needed?\n-\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n-\t\treturn launcher.createCompiler(inputSources);\n-\t}\n-\n-\t// needed?\n-\tpublic Factory createFactory() {\n-\t\treturn launcher.createFactory();\n-\t}\n-\n-\t// needed???\n-\tpublic Factory getFactory() {\n-\t\treturn launcher.getFactory();\n-\t}\n-\n-\t// needed?\n-\tpublic Environment createEnvironment() {\n-\t\treturn launcher.createEnvironment();\n-\t}\n+\t// Level: 4\n \n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n+\t// Level: 3\n+\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\tpublic void setSourceOutputDirectory(File outputDirectory) {\n+\t// Level: 4\n+\n+\tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n+\t\treturn this;\n \t}\n \n+\t// Level: 2\n+\n \tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n \t\tlauncher.setOutputFilter(typeFilter);\n \t\treturn this;\n \t}\n+\t// Level: 2\n \n \tpublic FluentLauncher outputFilter(String... qualifedNames) {\n \t\tlauncher.setOutputFilter(qualifedNames);\n \t\treturn this;\n \t}\n \n+\t// Level: 1\n+\n \tpublic FluentLauncher binaryOutputDirectory(String path) {\n \t\tlauncher.setBinaryOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\tpublic void binaryOutputDirectory(File outputDirectory) {\n+\t// Level: 1\n+\tpublic FluentLauncher binaryOutputDirectory(File outputDirectory) {\n \t\tlauncher.setBinaryOutputDirectory(outputDirectory);\n+\t\treturn this;\n \t}\n \n \t// here are methods from environment as delegates.\n+\t// Level: 3\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n+\t// Level: 2\n \tpublic FluentLauncher level(String level) {\n \t\tlauncher.getEnvironment().setLevel(level);\n \t\treturn this;\n \t}\n-\t// TODO: finish\n+\n+\t// Level: 1\n+\tpublic FluentLauncher shouldCompile(boolean shouldCompile) {\n+\t\tlauncher.getEnvironment().setShouldCompile(shouldCompile);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher disableConsistencyChecks() {\n+\t\tlauncher.getEnvironment().disableConsistencyChecks();\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher complianceLevel(int level) {\n+\t\tlauncher.getEnvironment().setComplianceLevel(level);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher useTabulations(boolean tabulation) {\n+\t\tlauncher.getEnvironment().useTabulations(tabulation);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher tabulationSize(int size) {\n+\t\tlauncher.getEnvironment().setTabulationSize(size);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 3\n+\tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n+\t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 3\n+\tpublic FluentLauncher preserveLineNumbers(boolean preserveLineNumbers) {\n+\t\tlauncher.getEnvironment().setPreserveLineNumbers(preserveLineNumbers);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher noClasspath(boolean option) {\n+\t\tlauncher.getEnvironment().setNoClasspath(option);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher copyResources(boolean copyResources) {\n+\t\tlauncher.getEnvironment().setCopyResources(copyResources);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher enableComments(boolean commentEnable) {\n+\t\tlauncher.getEnvironment().setCommentEnabled(commentEnable);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher outputType(OutputType type) {\n+\t\tlauncher.getEnvironment().setOutputType(type);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher outputDestinationHandler(OutputDestinationHandler handler) {\n+\t\tlauncher.getEnvironment().setOutputDestinationHandler(handler);\n+\t\treturn this;\n+\t}\n }\n", "next_change": {"commit": "baf69e8251a3610a13072a1df681292f2ba5f98a", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex e5315747..73e441ec 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -160,27 +160,4 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n-\t// Level: 1\n-\tpublic FluentLauncher copyResources(boolean copyResources) {\n-\t\tlauncher.getEnvironment().setCopyResources(copyResources);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher enableComments(boolean commentEnable) {\n-\t\tlauncher.getEnvironment().setCommentEnabled(commentEnable);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher outputType(OutputType type) {\n-\t\tlauncher.getEnvironment().setOutputType(type);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher outputDestinationHandler(OutputDestinationHandler handler) {\n-\t\tlauncher.getEnvironment().setOutputDestinationHandler(handler);\n-\t\treturn this;\n-\t}\n }\n", "next_change": {"commit": "33edf5c41ab53e2bd20c5ca7252b105d11545949", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 73e441ec..b41b7c5e 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -5,156 +10,71 @@ import java.io.File;\n import spoon.processing.Processor;\n import spoon.reflect.CtModel;\n import spoon.reflect.declaration.CtElement;\n-import spoon.reflect.declaration.CtType;\n-import spoon.reflect.visitor.Filter;\n-import spoon.support.OutputDestinationHandler;\n \n /**\n  * TODO: doc\n  */\n public class FluentLauncher {\n \n-\tprivate SpoonAPI launcher;\n-\n-\t/**\n-\t * i gave Methods numbers 1-4. 4 means mandatory. 3 means all users will use\n-\t * this. 2 means helper method but not needed. 1 means no clue why we want this.\n-\t */\n-\t// Level: 4\n+\tprivate Launcher launcher;\n \n \tpublic FluentLauncher() {\n \t\tthis.launcher = new Launcher();\n \t}\n \n-\t// Level: 4\n \tpublic FluentLauncher inputResource(String path) {\n \t\tlauncher.addInputResource(path);\n \t\treturn this;\n \t}\n \n-\t// Level: 3\n-\n-\tpublic FluentLauncher processor(String name) {\n-\t\tlauncher.addProcessor(name);\n+\tpublic FluentLauncher inputResource(Iterable<String> paths) {\n+\t\tfor (String path : paths) {\n+\t\t\tlauncher.addInputResource(path);\n+\t\t}\n \t\treturn this;\n \t}\n \n-\t// Level: 4\n-\n \tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n \t\tlauncher.addProcessor(processor);\n \t\treturn this;\n \t}\n \n-\t// Level: 1\n-\n-\tpublic String toString() {\n-\t\treturn launcher.toString();\n-\t}\n-\n-\t// Level: 4\n-\n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n-\t// Level: 3\n-\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\t// Level: 4\n-\n \tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\n-\tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n-\t\tlauncher.setOutputFilter(typeFilter);\n-\t\treturn this;\n-\t}\n-\t// Level: 2\n-\n-\tpublic FluentLauncher outputFilter(String... qualifedNames) {\n-\t\tlauncher.setOutputFilter(qualifedNames);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\n-\tpublic FluentLauncher binaryOutputDirectory(String path) {\n-\t\tlauncher.setBinaryOutputDirectory(path);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher binaryOutputDirectory(File outputDirectory) {\n-\t\tlauncher.setBinaryOutputDirectory(outputDirectory);\n-\t\treturn this;\n-\t}\n-\n \t// here are methods from environment as delegates.\n-\t// Level: 3\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\tpublic FluentLauncher level(String level) {\n-\t\tlauncher.getEnvironment().setLevel(level);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher shouldCompile(boolean shouldCompile) {\n-\t\tlauncher.getEnvironment().setShouldCompile(shouldCompile);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n \tpublic FluentLauncher disableConsistencyChecks() {\n \t\tlauncher.getEnvironment().disableConsistencyChecks();\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n \tpublic FluentLauncher complianceLevel(int level) {\n \t\tlauncher.getEnvironment().setComplianceLevel(level);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\tpublic FluentLauncher useTabulations(boolean tabulation) {\n-\t\tlauncher.getEnvironment().useTabulations(tabulation);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n-\tpublic FluentLauncher tabulationSize(int size) {\n-\t\tlauncher.getEnvironment().setTabulationSize(size);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 3\n \tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n \t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n \t\treturn this;\n \t}\n \n-\t// Level: 3\n-\tpublic FluentLauncher preserveLineNumbers(boolean preserveLineNumbers) {\n-\t\tlauncher.getEnvironment().setPreserveLineNumbers(preserveLineNumbers);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n \tpublic FluentLauncher noClasspath(boolean option) {\n \t\tlauncher.getEnvironment().setNoClasspath(option);\n \t\treturn this;\n", "next_change": {"commit": "f08437e0ed96e5a13359559825ff8d1543fc92d6", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex b41b7c5e..df0accf8 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -80,4 +88,8 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n+\tpublic FluentLauncher encoding(Charset encoding) {\n+\t\tlauncher.getEnvironment().setEncoding(encoding);\n+\t\treturn this;\n+\t}\n }\n", "next_change": {"commit": "09a883ac46242b99d5fdea530319a0a443b77452", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex df0accf8..1cb5f37d 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -47,47 +71,118 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Builds the model\n+\t */\n+\n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n+\t/**\n+\t * Sets the output directory for source generated.\n+\t *\n+\t * @param path Path for the output directory.\n+\t */\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the output directory for source generated.\n+\t *\n+\t * @param outputDirectory {@link File} for output directory.\n+\t */\n \tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n \t\treturn this;\n \t}\n \n-\t// here are methods from environment as delegates.\n+\t/**\n+\t * Tell to the Java printer to automatically generate imports and use simple\n+\t * names instead of fully-qualified name.\n+\t * \n+\t * @param autoImports toggles autoImports on or off.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Disable all consistency checks on the AST. Dangerous! The only valid usage of\n+\t * this is to keep full backward-compatibility.\n+\t * \n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher disableConsistencyChecks() {\n \t\tlauncher.getEnvironment().disableConsistencyChecks();\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the Java version compliance level.\n+\t * \n+\t * @param level of java version\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher complianceLevel(int level) {\n \t\tlauncher.getEnvironment().setComplianceLevel(level);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the source class path of the Spoon model. Only .jar files or directories\n+\t * with *.class files are accepted. The *.jar or *.java files contained in given\n+\t * directories are ignored.\n+\t *\n+\t * @throws InvalidClassPathException if a given classpath does not exists or\n+\t *                                   does not have the right format (.jar file\n+\t *                                   or directory)\n+\t * @param sourceClasspath path to sources.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n \t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the option \"noclasspath\", use with caution (see explanation below).\n+\t *\n+\t * With this option, Spoon does not require the full classpath to build the\n+\t * model. In this case, all references to classes that are not in the classpath\n+\t * are handled with the reference mechanism. The \"simplename\" of the reference\n+\t * object refers to the unbound identifier.\n+\t *\n+\t * This option facilitates the use of Spoon when is is hard to have the complete\n+\t * and correct classpath, for example for mining software repositories.\n+\t *\n+\t * For writing analyses, this option works well if you don't cross the reference\n+\t * by a call to getDeclaration() (if you really want to do so, then check for\n+\t * nullness of the result before).\n+\t *\n+\t * In normal mode, compilation errors are signaled as exception, with this\n+\t * option enabled they are signaled as message only. The reason is that in most\n+\t * cases, there are necessarily errors related to the missing classpath\n+\t * elements.\n+\t * \n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher noClasspath(boolean option) {\n \t\tlauncher.getEnvironment().setNoClasspath(option);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the encoding to use for parsing source code\n+\t * \n+\t * @param encoding used for parsing.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher encoding(Charset encoding) {\n \t\tlauncher.getEnvironment().setEncoding(encoding);\n \t\treturn this;\n", "next_change": {"commit": "5d5a482a475b543172276785882f34dcd1637cf9", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 1cb5f37d..9df4cbff 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -179,7 +192,7 @@ public class FluentLauncher {\n \n \t/**\n \t * Set the encoding to use for parsing source code\n-\t * \n+\t *\n \t * @param encoding used for parsing.\n \t * @return the launcher after setting the option.\n \t */\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4OTY2OA==", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381389668", "body": "How does a `Factory` differ from the fluent interface? Could mixing metaphors be confusing?", "bodyText": "How does a Factory differ from the fluent interface? Could mixing metaphors be confusing?", "bodyHTML": "<p dir=\"auto\">How does a <code>Factory</code> differ from the fluent interface? Could mixing metaphors be confusing?</p>", "author": "DaveJarvis", "createdAt": "2020-02-19T16:28:49Z", "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {", "originalCommit": "507ed589a081093895e03a4ade6a25fc126f2e7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwOTUwNg==", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381409506", "bodyText": "the createFactory method was part of the spoonAPI interface, which i tried to implement first. But the interface has setter and getter, which are not good for the fluent idom", "author": "MartinWitt", "createdAt": "2020-02-19T16:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4OTY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "b7f8f8279f8f6d6f89ef29f366ef369a3627ea64", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 53e3b7db..e5315747 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -1,160 +1,186 @@\n package spoon;\n \n import java.io.File;\n-import java.util.List;\n \n-import spoon.compiler.Environment;\n-import spoon.compiler.SpoonResource;\n import spoon.processing.Processor;\n import spoon.reflect.CtModel;\n import spoon.reflect.declaration.CtElement;\n import spoon.reflect.declaration.CtType;\n-import spoon.reflect.factory.Factory;\n import spoon.reflect.visitor.Filter;\n-import spoon.reflect.visitor.PrettyPrinter;\n-import spoon.support.JavaOutputProcessor;\n+import spoon.support.OutputDestinationHandler;\n \n /**\n  * TODO: doc\n  */\n public class FluentLauncher {\n \n-\tLauncher launcher;\n-\n-\tpublic FluentLauncher() {\n-\t\tthis.launcher = new Launcher();\n-\t}\n+\tprivate SpoonAPI launcher;\n \n \t/**\n-\t * @param args\n-\t * @see spoon.Launcher#run(java.lang.String[])\n+\t * i gave Methods numbers 1-4. 4 means mandatory. 3 means all users will use\n+\t * this. 2 means helper method but not needed. 1 means no clue why we want this.\n \t */\n+\t// Level: 4\n \n-\tpublic void run(String[] args) {\n-\t\tlauncher.run(args);\n-\t}\n-\n-\tpublic void printUsage() {\n-\t\tlauncher.printUsage();\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n \t}\n \n+\t// Level: 4\n \tpublic FluentLauncher inputResource(String path) {\n \t\tlauncher.addInputResource(path);\n \t\treturn this;\n \t}\n \n-\tpublic FluentLauncher inputResource(SpoonResource resource) {\n-\t\tlauncher.addInputResource(resource);\n-\t\treturn this;\n-\t}\n+\t// Level: 3\n \n \tpublic FluentLauncher processor(String name) {\n \t\tlauncher.addProcessor(name);\n \t\treturn this;\n \t}\n \n+\t// Level: 4\n+\n \tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n \t\tlauncher.addProcessor(processor);\n \t\treturn this;\n \t}\n \n-\tpublic FluentLauncher templateResource(SpoonResource resource) {\n-\t\tlauncher.addTemplateResource(resource);\n-\t\treturn this;\n-\t}\n-\n-\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n-\tpublic Environment getEnvironment() {\n-\t\treturn launcher.getEnvironment();\n-\t}\n+\t// Level: 1\n \n \tpublic String toString() {\n \t\treturn launcher.toString();\n \t}\n \n-\t// needed???\n-\tpublic SpoonModelBuilder compiler(Factory factory) {\n-\t\treturn launcher.createCompiler(factory);\n-\t}\n-\n-\t// needed???\n-\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n-\t\treturn launcher.createCompiler(factory, inputSources);\n-\t}\n-\n-\t// needed???\n-\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n-\t\t\tList<SpoonResource> templateSources) {\n-\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n-\t}\n-\n-\t// needed?\n-\tpublic SpoonModelBuilder createCompiler() {\n-\t\treturn launcher.createCompiler();\n-\t}\n-\n-\t// needed?\n-\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n-\t\treturn launcher.createCompiler(inputSources);\n-\t}\n-\n-\t// needed?\n-\tpublic Factory createFactory() {\n-\t\treturn launcher.createFactory();\n-\t}\n-\n-\t// needed???\n-\tpublic Factory getFactory() {\n-\t\treturn launcher.getFactory();\n-\t}\n-\n-\t// needed?\n-\tpublic Environment createEnvironment() {\n-\t\treturn launcher.createEnvironment();\n-\t}\n+\t// Level: 4\n \n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n+\t// Level: 3\n+\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\tpublic void setSourceOutputDirectory(File outputDirectory) {\n+\t// Level: 4\n+\n+\tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n+\t\treturn this;\n \t}\n \n+\t// Level: 2\n+\n \tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n \t\tlauncher.setOutputFilter(typeFilter);\n \t\treturn this;\n \t}\n+\t// Level: 2\n \n \tpublic FluentLauncher outputFilter(String... qualifedNames) {\n \t\tlauncher.setOutputFilter(qualifedNames);\n \t\treturn this;\n \t}\n \n+\t// Level: 1\n+\n \tpublic FluentLauncher binaryOutputDirectory(String path) {\n \t\tlauncher.setBinaryOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\tpublic void binaryOutputDirectory(File outputDirectory) {\n+\t// Level: 1\n+\tpublic FluentLauncher binaryOutputDirectory(File outputDirectory) {\n \t\tlauncher.setBinaryOutputDirectory(outputDirectory);\n+\t\treturn this;\n \t}\n \n \t// here are methods from environment as delegates.\n+\t// Level: 3\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n+\t// Level: 2\n \tpublic FluentLauncher level(String level) {\n \t\tlauncher.getEnvironment().setLevel(level);\n \t\treturn this;\n \t}\n-\t// TODO: finish\n+\n+\t// Level: 1\n+\tpublic FluentLauncher shouldCompile(boolean shouldCompile) {\n+\t\tlauncher.getEnvironment().setShouldCompile(shouldCompile);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher disableConsistencyChecks() {\n+\t\tlauncher.getEnvironment().disableConsistencyChecks();\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher complianceLevel(int level) {\n+\t\tlauncher.getEnvironment().setComplianceLevel(level);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher useTabulations(boolean tabulation) {\n+\t\tlauncher.getEnvironment().useTabulations(tabulation);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher tabulationSize(int size) {\n+\t\tlauncher.getEnvironment().setTabulationSize(size);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 3\n+\tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n+\t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 3\n+\tpublic FluentLauncher preserveLineNumbers(boolean preserveLineNumbers) {\n+\t\tlauncher.getEnvironment().setPreserveLineNumbers(preserveLineNumbers);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher noClasspath(boolean option) {\n+\t\tlauncher.getEnvironment().setNoClasspath(option);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher copyResources(boolean copyResources) {\n+\t\tlauncher.getEnvironment().setCopyResources(copyResources);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher enableComments(boolean commentEnable) {\n+\t\tlauncher.getEnvironment().setCommentEnabled(commentEnable);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher outputType(OutputType type) {\n+\t\tlauncher.getEnvironment().setOutputType(type);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher outputDestinationHandler(OutputDestinationHandler handler) {\n+\t\tlauncher.getEnvironment().setOutputDestinationHandler(handler);\n+\t\treturn this;\n+\t}\n }\n", "next_change": {"commit": "baf69e8251a3610a13072a1df681292f2ba5f98a", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex e5315747..73e441ec 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -160,27 +160,4 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n-\t// Level: 1\n-\tpublic FluentLauncher copyResources(boolean copyResources) {\n-\t\tlauncher.getEnvironment().setCopyResources(copyResources);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher enableComments(boolean commentEnable) {\n-\t\tlauncher.getEnvironment().setCommentEnabled(commentEnable);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher outputType(OutputType type) {\n-\t\tlauncher.getEnvironment().setOutputType(type);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher outputDestinationHandler(OutputDestinationHandler handler) {\n-\t\tlauncher.getEnvironment().setOutputDestinationHandler(handler);\n-\t\treturn this;\n-\t}\n }\n", "next_change": {"commit": "33edf5c41ab53e2bd20c5ca7252b105d11545949", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 73e441ec..b41b7c5e 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -5,156 +10,71 @@ import java.io.File;\n import spoon.processing.Processor;\n import spoon.reflect.CtModel;\n import spoon.reflect.declaration.CtElement;\n-import spoon.reflect.declaration.CtType;\n-import spoon.reflect.visitor.Filter;\n-import spoon.support.OutputDestinationHandler;\n \n /**\n  * TODO: doc\n  */\n public class FluentLauncher {\n \n-\tprivate SpoonAPI launcher;\n-\n-\t/**\n-\t * i gave Methods numbers 1-4. 4 means mandatory. 3 means all users will use\n-\t * this. 2 means helper method but not needed. 1 means no clue why we want this.\n-\t */\n-\t// Level: 4\n+\tprivate Launcher launcher;\n \n \tpublic FluentLauncher() {\n \t\tthis.launcher = new Launcher();\n \t}\n \n-\t// Level: 4\n \tpublic FluentLauncher inputResource(String path) {\n \t\tlauncher.addInputResource(path);\n \t\treturn this;\n \t}\n \n-\t// Level: 3\n-\n-\tpublic FluentLauncher processor(String name) {\n-\t\tlauncher.addProcessor(name);\n+\tpublic FluentLauncher inputResource(Iterable<String> paths) {\n+\t\tfor (String path : paths) {\n+\t\t\tlauncher.addInputResource(path);\n+\t\t}\n \t\treturn this;\n \t}\n \n-\t// Level: 4\n-\n \tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n \t\tlauncher.addProcessor(processor);\n \t\treturn this;\n \t}\n \n-\t// Level: 1\n-\n-\tpublic String toString() {\n-\t\treturn launcher.toString();\n-\t}\n-\n-\t// Level: 4\n-\n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n-\t// Level: 3\n-\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\t// Level: 4\n-\n \tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\n-\tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n-\t\tlauncher.setOutputFilter(typeFilter);\n-\t\treturn this;\n-\t}\n-\t// Level: 2\n-\n-\tpublic FluentLauncher outputFilter(String... qualifedNames) {\n-\t\tlauncher.setOutputFilter(qualifedNames);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\n-\tpublic FluentLauncher binaryOutputDirectory(String path) {\n-\t\tlauncher.setBinaryOutputDirectory(path);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher binaryOutputDirectory(File outputDirectory) {\n-\t\tlauncher.setBinaryOutputDirectory(outputDirectory);\n-\t\treturn this;\n-\t}\n-\n \t// here are methods from environment as delegates.\n-\t// Level: 3\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\tpublic FluentLauncher level(String level) {\n-\t\tlauncher.getEnvironment().setLevel(level);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher shouldCompile(boolean shouldCompile) {\n-\t\tlauncher.getEnvironment().setShouldCompile(shouldCompile);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n \tpublic FluentLauncher disableConsistencyChecks() {\n \t\tlauncher.getEnvironment().disableConsistencyChecks();\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n \tpublic FluentLauncher complianceLevel(int level) {\n \t\tlauncher.getEnvironment().setComplianceLevel(level);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\tpublic FluentLauncher useTabulations(boolean tabulation) {\n-\t\tlauncher.getEnvironment().useTabulations(tabulation);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n-\tpublic FluentLauncher tabulationSize(int size) {\n-\t\tlauncher.getEnvironment().setTabulationSize(size);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 3\n \tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n \t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n \t\treturn this;\n \t}\n \n-\t// Level: 3\n-\tpublic FluentLauncher preserveLineNumbers(boolean preserveLineNumbers) {\n-\t\tlauncher.getEnvironment().setPreserveLineNumbers(preserveLineNumbers);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n \tpublic FluentLauncher noClasspath(boolean option) {\n \t\tlauncher.getEnvironment().setNoClasspath(option);\n \t\treturn this;\n", "next_change": {"commit": "f08437e0ed96e5a13359559825ff8d1543fc92d6", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex b41b7c5e..df0accf8 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -80,4 +88,8 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n+\tpublic FluentLauncher encoding(Charset encoding) {\n+\t\tlauncher.getEnvironment().setEncoding(encoding);\n+\t\treturn this;\n+\t}\n }\n", "next_change": {"commit": "09a883ac46242b99d5fdea530319a0a443b77452", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex df0accf8..1cb5f37d 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -47,47 +71,118 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Builds the model\n+\t */\n+\n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n+\t/**\n+\t * Sets the output directory for source generated.\n+\t *\n+\t * @param path Path for the output directory.\n+\t */\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the output directory for source generated.\n+\t *\n+\t * @param outputDirectory {@link File} for output directory.\n+\t */\n \tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n \t\treturn this;\n \t}\n \n-\t// here are methods from environment as delegates.\n+\t/**\n+\t * Tell to the Java printer to automatically generate imports and use simple\n+\t * names instead of fully-qualified name.\n+\t * \n+\t * @param autoImports toggles autoImports on or off.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Disable all consistency checks on the AST. Dangerous! The only valid usage of\n+\t * this is to keep full backward-compatibility.\n+\t * \n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher disableConsistencyChecks() {\n \t\tlauncher.getEnvironment().disableConsistencyChecks();\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the Java version compliance level.\n+\t * \n+\t * @param level of java version\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher complianceLevel(int level) {\n \t\tlauncher.getEnvironment().setComplianceLevel(level);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the source class path of the Spoon model. Only .jar files or directories\n+\t * with *.class files are accepted. The *.jar or *.java files contained in given\n+\t * directories are ignored.\n+\t *\n+\t * @throws InvalidClassPathException if a given classpath does not exists or\n+\t *                                   does not have the right format (.jar file\n+\t *                                   or directory)\n+\t * @param sourceClasspath path to sources.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n \t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the option \"noclasspath\", use with caution (see explanation below).\n+\t *\n+\t * With this option, Spoon does not require the full classpath to build the\n+\t * model. In this case, all references to classes that are not in the classpath\n+\t * are handled with the reference mechanism. The \"simplename\" of the reference\n+\t * object refers to the unbound identifier.\n+\t *\n+\t * This option facilitates the use of Spoon when is is hard to have the complete\n+\t * and correct classpath, for example for mining software repositories.\n+\t *\n+\t * For writing analyses, this option works well if you don't cross the reference\n+\t * by a call to getDeclaration() (if you really want to do so, then check for\n+\t * nullness of the result before).\n+\t *\n+\t * In normal mode, compilation errors are signaled as exception, with this\n+\t * option enabled they are signaled as message only. The reason is that in most\n+\t * cases, there are necessarily errors related to the missing classpath\n+\t * elements.\n+\t * \n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher noClasspath(boolean option) {\n \t\tlauncher.getEnvironment().setNoClasspath(option);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the encoding to use for parsing source code\n+\t * \n+\t * @param encoding used for parsing.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher encoding(Charset encoding) {\n \t\tlauncher.getEnvironment().setEncoding(encoding);\n \t\treturn this;\n", "next_change": {"commit": "5d5a482a475b543172276785882f34dcd1637cf9", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 1cb5f37d..9df4cbff 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -179,7 +192,7 @@ public class FluentLauncher {\n \n \t/**\n \t * Set the encoding to use for parsing source code\n-\t * \n+\t *\n \t * @param encoding used for parsing.\n \t * @return the launcher after setting the option.\n \t */\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MDU4Mg==", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381390582", "body": "How does a `SpoonModelBuilder` differ from the `FluentLauncher`? Conceptually, to me, they seem like they are trying to accomplish the same task: using a builder pattern to configure Spoon. Exposing both may lead to some confusion.", "bodyText": "How does a SpoonModelBuilder differ from the FluentLauncher? Conceptually, to me, they seem like they are trying to accomplish the same task: using a builder pattern to configure Spoon. Exposing both may lead to some confusion.", "bodyHTML": "<p dir=\"auto\">How does a <code>SpoonModelBuilder</code> differ from the <code>FluentLauncher</code>? Conceptually, to me, they seem like they are trying to accomplish the same task: using a builder pattern to configure Spoon. Exposing both may lead to some confusion.</p>", "author": "DaveJarvis", "createdAt": "2020-02-19T16:30:11Z", "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {", "originalCommit": "507ed589a081093895e03a4ade6a25fc126f2e7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQxMDcxMw==", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381410713", "bodyText": "The SpoonModelBuilder interface doesn't expose a fluent api.", "author": "MartinWitt", "createdAt": "2020-02-19T16:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MDU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b7f8f8279f8f6d6f89ef29f366ef369a3627ea64", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 53e3b7db..e5315747 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -1,160 +1,186 @@\n package spoon;\n \n import java.io.File;\n-import java.util.List;\n \n-import spoon.compiler.Environment;\n-import spoon.compiler.SpoonResource;\n import spoon.processing.Processor;\n import spoon.reflect.CtModel;\n import spoon.reflect.declaration.CtElement;\n import spoon.reflect.declaration.CtType;\n-import spoon.reflect.factory.Factory;\n import spoon.reflect.visitor.Filter;\n-import spoon.reflect.visitor.PrettyPrinter;\n-import spoon.support.JavaOutputProcessor;\n+import spoon.support.OutputDestinationHandler;\n \n /**\n  * TODO: doc\n  */\n public class FluentLauncher {\n \n-\tLauncher launcher;\n-\n-\tpublic FluentLauncher() {\n-\t\tthis.launcher = new Launcher();\n-\t}\n+\tprivate SpoonAPI launcher;\n \n \t/**\n-\t * @param args\n-\t * @see spoon.Launcher#run(java.lang.String[])\n+\t * i gave Methods numbers 1-4. 4 means mandatory. 3 means all users will use\n+\t * this. 2 means helper method but not needed. 1 means no clue why we want this.\n \t */\n+\t// Level: 4\n \n-\tpublic void run(String[] args) {\n-\t\tlauncher.run(args);\n-\t}\n-\n-\tpublic void printUsage() {\n-\t\tlauncher.printUsage();\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n \t}\n \n+\t// Level: 4\n \tpublic FluentLauncher inputResource(String path) {\n \t\tlauncher.addInputResource(path);\n \t\treturn this;\n \t}\n \n-\tpublic FluentLauncher inputResource(SpoonResource resource) {\n-\t\tlauncher.addInputResource(resource);\n-\t\treturn this;\n-\t}\n+\t// Level: 3\n \n \tpublic FluentLauncher processor(String name) {\n \t\tlauncher.addProcessor(name);\n \t\treturn this;\n \t}\n \n+\t// Level: 4\n+\n \tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n \t\tlauncher.addProcessor(processor);\n \t\treturn this;\n \t}\n \n-\tpublic FluentLauncher templateResource(SpoonResource resource) {\n-\t\tlauncher.addTemplateResource(resource);\n-\t\treturn this;\n-\t}\n-\n-\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n-\tpublic Environment getEnvironment() {\n-\t\treturn launcher.getEnvironment();\n-\t}\n+\t// Level: 1\n \n \tpublic String toString() {\n \t\treturn launcher.toString();\n \t}\n \n-\t// needed???\n-\tpublic SpoonModelBuilder compiler(Factory factory) {\n-\t\treturn launcher.createCompiler(factory);\n-\t}\n-\n-\t// needed???\n-\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n-\t\treturn launcher.createCompiler(factory, inputSources);\n-\t}\n-\n-\t// needed???\n-\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n-\t\t\tList<SpoonResource> templateSources) {\n-\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n-\t}\n-\n-\t// needed?\n-\tpublic SpoonModelBuilder createCompiler() {\n-\t\treturn launcher.createCompiler();\n-\t}\n-\n-\t// needed?\n-\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n-\t\treturn launcher.createCompiler(inputSources);\n-\t}\n-\n-\t// needed?\n-\tpublic Factory createFactory() {\n-\t\treturn launcher.createFactory();\n-\t}\n-\n-\t// needed???\n-\tpublic Factory getFactory() {\n-\t\treturn launcher.getFactory();\n-\t}\n-\n-\t// needed?\n-\tpublic Environment createEnvironment() {\n-\t\treturn launcher.createEnvironment();\n-\t}\n+\t// Level: 4\n \n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n+\t// Level: 3\n+\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\tpublic void setSourceOutputDirectory(File outputDirectory) {\n+\t// Level: 4\n+\n+\tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n+\t\treturn this;\n \t}\n \n+\t// Level: 2\n+\n \tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n \t\tlauncher.setOutputFilter(typeFilter);\n \t\treturn this;\n \t}\n+\t// Level: 2\n \n \tpublic FluentLauncher outputFilter(String... qualifedNames) {\n \t\tlauncher.setOutputFilter(qualifedNames);\n \t\treturn this;\n \t}\n \n+\t// Level: 1\n+\n \tpublic FluentLauncher binaryOutputDirectory(String path) {\n \t\tlauncher.setBinaryOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\tpublic void binaryOutputDirectory(File outputDirectory) {\n+\t// Level: 1\n+\tpublic FluentLauncher binaryOutputDirectory(File outputDirectory) {\n \t\tlauncher.setBinaryOutputDirectory(outputDirectory);\n+\t\treturn this;\n \t}\n \n \t// here are methods from environment as delegates.\n+\t// Level: 3\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n+\t// Level: 2\n \tpublic FluentLauncher level(String level) {\n \t\tlauncher.getEnvironment().setLevel(level);\n \t\treturn this;\n \t}\n-\t// TODO: finish\n+\n+\t// Level: 1\n+\tpublic FluentLauncher shouldCompile(boolean shouldCompile) {\n+\t\tlauncher.getEnvironment().setShouldCompile(shouldCompile);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher disableConsistencyChecks() {\n+\t\tlauncher.getEnvironment().disableConsistencyChecks();\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher complianceLevel(int level) {\n+\t\tlauncher.getEnvironment().setComplianceLevel(level);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher useTabulations(boolean tabulation) {\n+\t\tlauncher.getEnvironment().useTabulations(tabulation);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher tabulationSize(int size) {\n+\t\tlauncher.getEnvironment().setTabulationSize(size);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 3\n+\tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n+\t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 3\n+\tpublic FluentLauncher preserveLineNumbers(boolean preserveLineNumbers) {\n+\t\tlauncher.getEnvironment().setPreserveLineNumbers(preserveLineNumbers);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 2\n+\tpublic FluentLauncher noClasspath(boolean option) {\n+\t\tlauncher.getEnvironment().setNoClasspath(option);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher copyResources(boolean copyResources) {\n+\t\tlauncher.getEnvironment().setCopyResources(copyResources);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher enableComments(boolean commentEnable) {\n+\t\tlauncher.getEnvironment().setCommentEnabled(commentEnable);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher outputType(OutputType type) {\n+\t\tlauncher.getEnvironment().setOutputType(type);\n+\t\treturn this;\n+\t}\n+\n+\t// Level: 1\n+\tpublic FluentLauncher outputDestinationHandler(OutputDestinationHandler handler) {\n+\t\tlauncher.getEnvironment().setOutputDestinationHandler(handler);\n+\t\treturn this;\n+\t}\n }\n", "next_change": {"commit": "baf69e8251a3610a13072a1df681292f2ba5f98a", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex e5315747..73e441ec 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -160,27 +160,4 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n-\t// Level: 1\n-\tpublic FluentLauncher copyResources(boolean copyResources) {\n-\t\tlauncher.getEnvironment().setCopyResources(copyResources);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher enableComments(boolean commentEnable) {\n-\t\tlauncher.getEnvironment().setCommentEnabled(commentEnable);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher outputType(OutputType type) {\n-\t\tlauncher.getEnvironment().setOutputType(type);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher outputDestinationHandler(OutputDestinationHandler handler) {\n-\t\tlauncher.getEnvironment().setOutputDestinationHandler(handler);\n-\t\treturn this;\n-\t}\n }\n", "next_change": {"commit": "33edf5c41ab53e2bd20c5ca7252b105d11545949", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 73e441ec..b41b7c5e 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -5,156 +10,71 @@ import java.io.File;\n import spoon.processing.Processor;\n import spoon.reflect.CtModel;\n import spoon.reflect.declaration.CtElement;\n-import spoon.reflect.declaration.CtType;\n-import spoon.reflect.visitor.Filter;\n-import spoon.support.OutputDestinationHandler;\n \n /**\n  * TODO: doc\n  */\n public class FluentLauncher {\n \n-\tprivate SpoonAPI launcher;\n-\n-\t/**\n-\t * i gave Methods numbers 1-4. 4 means mandatory. 3 means all users will use\n-\t * this. 2 means helper method but not needed. 1 means no clue why we want this.\n-\t */\n-\t// Level: 4\n+\tprivate Launcher launcher;\n \n \tpublic FluentLauncher() {\n \t\tthis.launcher = new Launcher();\n \t}\n \n-\t// Level: 4\n \tpublic FluentLauncher inputResource(String path) {\n \t\tlauncher.addInputResource(path);\n \t\treturn this;\n \t}\n \n-\t// Level: 3\n-\n-\tpublic FluentLauncher processor(String name) {\n-\t\tlauncher.addProcessor(name);\n+\tpublic FluentLauncher inputResource(Iterable<String> paths) {\n+\t\tfor (String path : paths) {\n+\t\t\tlauncher.addInputResource(path);\n+\t\t}\n \t\treturn this;\n \t}\n \n-\t// Level: 4\n-\n \tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n \t\tlauncher.addProcessor(processor);\n \t\treturn this;\n \t}\n \n-\t// Level: 1\n-\n-\tpublic String toString() {\n-\t\treturn launcher.toString();\n-\t}\n-\n-\t// Level: 4\n-\n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n-\t// Level: 3\n-\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n-\t// Level: 4\n-\n \tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\n-\tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n-\t\tlauncher.setOutputFilter(typeFilter);\n-\t\treturn this;\n-\t}\n-\t// Level: 2\n-\n-\tpublic FluentLauncher outputFilter(String... qualifedNames) {\n-\t\tlauncher.setOutputFilter(qualifedNames);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\n-\tpublic FluentLauncher binaryOutputDirectory(String path) {\n-\t\tlauncher.setBinaryOutputDirectory(path);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher binaryOutputDirectory(File outputDirectory) {\n-\t\tlauncher.setBinaryOutputDirectory(outputDirectory);\n-\t\treturn this;\n-\t}\n-\n \t// here are methods from environment as delegates.\n-\t// Level: 3\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\tpublic FluentLauncher level(String level) {\n-\t\tlauncher.getEnvironment().setLevel(level);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 1\n-\tpublic FluentLauncher shouldCompile(boolean shouldCompile) {\n-\t\tlauncher.getEnvironment().setShouldCompile(shouldCompile);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n \tpublic FluentLauncher disableConsistencyChecks() {\n \t\tlauncher.getEnvironment().disableConsistencyChecks();\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n \tpublic FluentLauncher complianceLevel(int level) {\n \t\tlauncher.getEnvironment().setComplianceLevel(level);\n \t\treturn this;\n \t}\n \n-\t// Level: 2\n-\tpublic FluentLauncher useTabulations(boolean tabulation) {\n-\t\tlauncher.getEnvironment().useTabulations(tabulation);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n-\tpublic FluentLauncher tabulationSize(int size) {\n-\t\tlauncher.getEnvironment().setTabulationSize(size);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 3\n \tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n \t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n \t\treturn this;\n \t}\n \n-\t// Level: 3\n-\tpublic FluentLauncher preserveLineNumbers(boolean preserveLineNumbers) {\n-\t\tlauncher.getEnvironment().setPreserveLineNumbers(preserveLineNumbers);\n-\t\treturn this;\n-\t}\n-\n-\t// Level: 2\n \tpublic FluentLauncher noClasspath(boolean option) {\n \t\tlauncher.getEnvironment().setNoClasspath(option);\n \t\treturn this;\n", "next_change": {"commit": "f08437e0ed96e5a13359559825ff8d1543fc92d6", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex b41b7c5e..df0accf8 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -80,4 +88,8 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n+\tpublic FluentLauncher encoding(Charset encoding) {\n+\t\tlauncher.getEnvironment().setEncoding(encoding);\n+\t\treturn this;\n+\t}\n }\n", "next_change": {"commit": "09a883ac46242b99d5fdea530319a0a443b77452", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex df0accf8..1cb5f37d 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -47,47 +71,118 @@ public class FluentLauncher {\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Builds the model\n+\t */\n+\n \tpublic CtModel buildModel() {\n \t\tlauncher.run();\n \t\treturn launcher.getModel();\n \t}\n \n+\t/**\n+\t * Sets the output directory for source generated.\n+\t *\n+\t * @param path Path for the output directory.\n+\t */\n \tpublic FluentLauncher outputDirectory(String path) {\n \t\tlauncher.setSourceOutputDirectory(path);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the output directory for source generated.\n+\t *\n+\t * @param outputDirectory {@link File} for output directory.\n+\t */\n \tpublic FluentLauncher outputDirectory(File outputDirectory) {\n \t\tlauncher.setSourceOutputDirectory(outputDirectory);\n \t\treturn this;\n \t}\n \n-\t// here are methods from environment as delegates.\n+\t/**\n+\t * Tell to the Java printer to automatically generate imports and use simple\n+\t * names instead of fully-qualified name.\n+\t * \n+\t * @param autoImports toggles autoImports on or off.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher autoImports(boolean autoImports) {\n \t\tlauncher.getEnvironment().setAutoImports(autoImports);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Disable all consistency checks on the AST. Dangerous! The only valid usage of\n+\t * this is to keep full backward-compatibility.\n+\t * \n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher disableConsistencyChecks() {\n \t\tlauncher.getEnvironment().disableConsistencyChecks();\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the Java version compliance level.\n+\t * \n+\t * @param level of java version\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher complianceLevel(int level) {\n \t\tlauncher.getEnvironment().setComplianceLevel(level);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the source class path of the Spoon model. Only .jar files or directories\n+\t * with *.class files are accepted. The *.jar or *.java files contained in given\n+\t * directories are ignored.\n+\t *\n+\t * @throws InvalidClassPathException if a given classpath does not exists or\n+\t *                                   does not have the right format (.jar file\n+\t *                                   or directory)\n+\t * @param sourceClasspath path to sources.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher sourceClassPath(String[] sourceClasspath) {\n \t\tlauncher.getEnvironment().setSourceClasspath(sourceClasspath);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the option \"noclasspath\", use with caution (see explanation below).\n+\t *\n+\t * With this option, Spoon does not require the full classpath to build the\n+\t * model. In this case, all references to classes that are not in the classpath\n+\t * are handled with the reference mechanism. The \"simplename\" of the reference\n+\t * object refers to the unbound identifier.\n+\t *\n+\t * This option facilitates the use of Spoon when is is hard to have the complete\n+\t * and correct classpath, for example for mining software repositories.\n+\t *\n+\t * For writing analyses, this option works well if you don't cross the reference\n+\t * by a call to getDeclaration() (if you really want to do so, then check for\n+\t * nullness of the result before).\n+\t *\n+\t * In normal mode, compilation errors are signaled as exception, with this\n+\t * option enabled they are signaled as message only. The reason is that in most\n+\t * cases, there are necessarily errors related to the missing classpath\n+\t * elements.\n+\t * \n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher noClasspath(boolean option) {\n \t\tlauncher.getEnvironment().setNoClasspath(option);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the encoding to use for parsing source code\n+\t * \n+\t * @param encoding used for parsing.\n+\t * @return the launcher after setting the option.\n+\t */\n \tpublic FluentLauncher encoding(Charset encoding) {\n \t\tlauncher.getEnvironment().setEncoding(encoding);\n \t\treturn this;\n", "next_change": {"commit": "5d5a482a475b543172276785882f34dcd1637cf9", "changed_code": [{"header": "diff --git a/src/main/java/spoon/FluentLauncher.java b/src/main/java/spoon/FluentLauncher.java\nindex 1cb5f37d..9df4cbff 100644\n--- a/src/main/java/spoon/FluentLauncher.java\n+++ b/src/main/java/spoon/FluentLauncher.java\n", "chunk": "@@ -179,7 +192,7 @@ public class FluentLauncher {\n \n \t/**\n \t * Set the encoding to use for parsing source code\n-\t * \n+\t *\n \t * @param encoding used for parsing.\n \t * @return the launcher after setting the option.\n \t */\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"oid": "b7f8f8279f8f6d6f89ef29f366ef369a3627ea64", "url": "https://github.com/INRIA/spoon/commit/b7f8f8279f8f6d6f89ef29f366ef369a3627ea64", "message": "add comments with levels  to methods to categorize if needed", "committedDate": "2020-02-19T17:58:34Z", "type": "commit"}, {"oid": "baf69e8251a3610a13072a1df681292f2ba5f98a", "url": "https://github.com/INRIA/spoon/commit/baf69e8251a3610a13072a1df681292f2ba5f98a", "message": " remove methods and add usecase3", "committedDate": "2020-02-19T18:05:21Z", "type": "commit"}, {"oid": "33edf5c41ab53e2bd20c5ca7252b105d11545949", "url": "https://github.com/INRIA/spoon/commit/33edf5c41ab53e2bd20c5ca7252b105d11545949", "message": " add license header and removed methods, making it more simple", "committedDate": "2020-02-20T19:23:27Z", "type": "commit"}, {"oid": "341dfa71f1f38f387f777a00a3d38753548a9b3e", "url": "https://github.com/INRIA/spoon/commit/341dfa71f1f38f387f777a00a3d38753548a9b3e", "message": "add new methods with iterable for processors", "committedDate": "2020-02-20T19:24:58Z", "type": "commit"}, {"oid": "f08437e0ed96e5a13359559825ff8d1543fc92d6", "url": "https://github.com/INRIA/spoon/commit/f08437e0ed96e5a13359559825ff8d1543fc92d6", "message": " add encoding method to launcher", "committedDate": "2020-02-20T19:35:19Z", "type": "commit"}, {"oid": "09a883ac46242b99d5fdea530319a0a443b77452", "url": "https://github.com/INRIA/spoon/commit/09a883ac46242b99d5fdea530319a0a443b77452", "message": "copy doc from launcher and environment classes", "committedDate": "2020-02-20T20:12:41Z", "type": "commit"}, {"oid": "5d5a482a475b543172276785882f34dcd1637cf9", "url": "https://github.com/INRIA/spoon/commit/5d5a482a475b543172276785882f34dcd1637cf9", "message": " add new constructor allowing different launchers eg. mavenlauncher", "committedDate": "2020-02-21T17:43:42Z", "type": "commit"}, {"oid": "54fe75b6a062c871a4434b9848ac02315a179936", "url": "https://github.com/INRIA/spoon/commit/54fe75b6a062c871a4434b9848ac02315a179936", "message": "change type to spoonAPI and add final keyword", "committedDate": "2020-02-22T14:37:03Z", "type": "commit"}, {"oid": "5d8709200a876cc1ab4c55b5998e006188fd48ae", "url": "https://github.com/INRIA/spoon/commit/5d8709200a876cc1ab4c55b5998e006188fd48ae", "message": "delete showcases", "committedDate": "2020-02-23T19:47:45Z", "type": "commit"}, {"oid": "12fe013f56b297aa157ee1b1e5f8a6d059c16c4d", "url": "https://github.com/INRIA/spoon/commit/12fe013f56b297aa157ee1b1e5f8a6d059c16c4d", "message": "add doc", "committedDate": "2020-02-23T19:47:55Z", "type": "commit"}, {"oid": "8152a49e27040924daae51bd8d2feb435de99752", "url": "https://github.com/INRIA/spoon/commit/8152a49e27040924daae51bd8d2feb435de99752", "message": "add tests", "committedDate": "2020-02-24T16:59:15Z", "type": "commit"}, {"oid": "1972e854ad9333350d3cb320c8b6a7c7360124c1", "url": "https://github.com/INRIA/spoon/commit/1972e854ad9333350d3cb320c8b6a7c7360124c1", "message": "add license header", "committedDate": "2020-02-24T16:59:50Z", "type": "commit"}, {"oid": "6cfc5779c5b629fd67c318dc139ca9e066c1a4b3", "url": "https://github.com/INRIA/spoon/commit/6cfc5779c5b629fd67c318dc139ca9e066c1a4b3", "message": " fix for jdk8, because List::of is jdk9", "committedDate": "2020-02-24T17:21:13Z", "type": "commit"}, {"oid": "9d8cc92f095d5a5f7346cf38c3b9c92230b77f6c", "url": "https://github.com/INRIA/spoon/commit/9d8cc92f095d5a5f7346cf38c3b9c92230b77f6c", "message": "rerun CI after fix", "committedDate": "2020-02-25T13:44:22Z", "type": "commit"}]}