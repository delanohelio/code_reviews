{"pr_number": 3546, "pr_title": "test: add test for CtDequeScanner", "pr_author": "monperrus", "pr_createdAt": "2020-08-25T10:00:34Z", "pr_url": "https://github.com/INRIA/spoon/pull/3546", "timeline": [{"oid": "e82ec957e722ba67565592d0c08f10da06d7f837", "url": "https://github.com/INRIA/spoon/commit/e82ec957e722ba67565592d0c08f10da06d7f837", "message": "test: add test for CtDequeScanner", "committedDate": "2020-08-25T09:59:51Z", "type": "commit"}, {"oid": "69286da85c4570008a2b560569c9c140454cec19", "url": "https://github.com/INRIA/spoon/commit/69286da85c4570008a2b560569c9c140454cec19", "message": "@monperrus at work", "committedDate": "2020-08-25T10:11:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0OTEwNw==", "url": "https://github.com/INRIA/spoon/pull/3546#discussion_r476549107", "body": "How about [assertAll](https://junit.org/junit5/docs/5.3.0/api/org/junit/jupiter/api/Assertions.html#assertAll(org.junit.jupiter.api.function.Executable...))?\r\n```java\r\nassertAll(\r\n\t() -> assertEquals(45, l.size()); // we visited the whole tree\r\n\t() -> assertEquals(0, l.get(0));\r\n\t() -> assertEquals(1, l.get(1)); // visiting a child\r\n\t() -> assertEquals(2, l.get(3)); // visiting a grand child\r\n)\r\n```\r\nassertAll runs all checks and doesn't stop at first failure.", "bodyText": "How about assertAll?\nassertAll(\n\t() -> assertEquals(45, l.size()); // we visited the whole tree\n\t() -> assertEquals(0, l.get(0));\n\t() -> assertEquals(1, l.get(1)); // visiting a child\n\t() -> assertEquals(2, l.get(3)); // visiting a grand child\n)\nassertAll runs all checks and doesn't stop at first failure.", "bodyHTML": "<p dir=\"auto\">How about <a href=\"https://junit.org/junit5/docs/5.3.0/api/org/junit/jupiter/api/Assertions.html#assertAll(org.junit.jupiter.api.function.Executable...)\" rel=\"nofollow\">assertAll</a>?</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertAll(\n\t() -&gt; assertEquals(45, l.size()); // we visited the whole tree\n\t() -&gt; assertEquals(0, l.get(0));\n\t() -&gt; assertEquals(1, l.get(1)); // visiting a child\n\t() -&gt; assertEquals(2, l.get(3)); // visiting a grand child\n)\"><pre>assertAll(\n\t() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> assertEquals(<span class=\"pl-c1\">45</span>, l<span class=\"pl-k\">.</span>size()); <span class=\"pl-c\"><span class=\"pl-c\">//</span> we visited the whole tree</span>\n\t() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> assertEquals(<span class=\"pl-c1\">0</span>, l<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>));\n\t() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> assertEquals(<span class=\"pl-c1\">1</span>, l<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">1</span>)); <span class=\"pl-c\"><span class=\"pl-c\">//</span> visiting a child</span>\n\t() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> assertEquals(<span class=\"pl-c1\">2</span>, l<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">3</span>)); <span class=\"pl-c\"><span class=\"pl-c\">//</span> visiting a grand child</span>\n)</pre></div>\n<p dir=\"auto\">assertAll runs all checks and doesn't stop at first failure.</p>", "author": "MartinWitt", "createdAt": "2020-08-25T15:43:28Z", "path": "src/test/java/spoon/reflect/visitor/CtScannerTest.java", "diffHunk": "@@ -356,4 +356,22 @@ public void assertRemoveSame(CtElement o) {\n \t\t\tfail();\n \t\t}\n \t}\n+\n+\t@Test\n+\tpublic void testDequeSCanner() {\n+\t\tCtClass<?> c = Launcher.parseClass(\"class A { void m() { System.out.println(\\\\\\\"yeah\\\\\\\");} }\");\n+\t\tArrayList l = new ArrayList<Integer>();\n+\t\tnew CtDequeScanner() {\n+\t\t\t@Override\n+\t\t\tpublic void scan(CtElement o) {\n+\t\t\t\tl.add(elementsDeque.size());\n+\t\t\t\tsuper.scan(o);\n+\t\t\t}\n+\t\t}.scan(c);\n+\t\t// contract: the CtDequeScanner has the context information of the parents\n+\t\tassertEquals(45, l.size()); // we visited the whole tree\n+\t\tassertEquals(0, l.get(0));\n+\t\tassertEquals(1, l.get(1)); // visiting a child\n+\t\tassertEquals(2, l.get(3)); // visiting a grand child", "originalCommit": "69286da85c4570008a2b560569c9c140454cec19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}