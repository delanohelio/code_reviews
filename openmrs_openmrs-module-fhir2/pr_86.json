{"pr_number": 86, "pr_title": "FM2-79 Improve Search for Encounter", "pr_author": "VaishSiddharth", "pr_createdAt": "2020-02-23T11:48:14Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86", "merge_commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4MDY5Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383180697", "body": "I noticed that a similar handlers are used for `PatientDaoImpl` and will be used for `PersonDaoImpl` as well, shouldn't we refactor this to be present in the `BaseDaoImpl`?", "bodyText": "I noticed that a similar handlers are used for PatientDaoImpl and will be used for PersonDaoImpl as well, shouldn't we refactor this to be present in the BaseDaoImpl?", "bodyHTML": "<p dir=\"auto\">I noticed that a similar handlers are used for <code>PatientDaoImpl</code> and will be used for <code>PersonDaoImpl</code> as well, shouldn't we refactor this to be present in the <code>BaseDaoImpl</code>?</p>", "author": "CaptainDaVinci", "createdAt": "2020-02-24T10:21:07Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -44,4 +57,116 @@ public Encounter getEncounterByUuid(String uuid) {\n \t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n \t\t        .list();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n+\t        ReferenceParam participant, ReferenceParam subject, TokenOrListParam participantIdentifier,\n+\t        StringOrListParam participantName, StringOrListParam participantGiven, StringOrListParam participantFamily,\n+\t        TokenOrListParam subjectIdentifier, StringOrListParam subjectName, StringOrListParam subjectGiven,\n+\t        StringOrListParam subjectFamily) {\n+\t\t\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\thandleSubjectNames(criteria, subjectName, subjectGiven, subjectFamily);\n+\t\thandleParticipantNames(criteria, participantName, participantGiven, participantFamily);\n+\t\thandleSubjectIdentifier(criteria, subjectIdentifier);\n+\t\thandleParticipantIdentifier(criteria, participantIdentifier);\n+\t\thandleDateRange(\"date\", date).ifPresent(criteria::add);\n+\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleParticipantIdentifier(Criteria criteria, TokenOrListParam identifier) {\n+\t\tif (identifier == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tcriteria.createAlias(\"identifiers\", \"pi\", JoinType.INNER_JOIN, eq(\"pi.voided\", false));\n+\t\t\n+\t\thandleOrListParamBySystem(identifier, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"pi.identifier\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"pit\")) {\n+\t\t\t\t\tcriteria.createAlias(\"pi.identifierType\", \"pit\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(and(eq(\"pit.name\", system), in(\"pi.identifier\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate void handleSubjectIdentifier(Criteria criteria, TokenOrListParam identifier) {\n+\t\tif (identifier == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tcriteria.createAlias(\"identifiers\", \"si\", JoinType.INNER_JOIN, eq(\"si.voided\", false));\n+\t\t\n+\t\thandleOrListParamBySystem(identifier, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"si.identifier\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"sit\")) {\n+\t\t\t\t\tcriteria.createAlias(\"si.identifierType\", \"sit\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(and(eq(\"sit.name\", system), in(\"si.identifier\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate void handleSubjectNames(Criteria criteria, StringOrListParam name, StringOrListParam given,", "originalCommit": "ea6852b8f2e92f67f578408865141311d7b4298e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1MjIwOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383252208", "bodyText": "Yes, we should", "author": "ibacher", "createdAt": "2020-02-24T13:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4MDY5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex c5bd61ca..31caf0d7 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -50,123 +40,17 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\t        .uniqueResult();\n \t}\n \t\n-\t@Override\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic List<Encounter> findEncountersByPatientIdentifier(String patientIdentifier) {\n-\t\treturn (List<Encounter>) sessionFactory.getCurrentSession().createCriteria(Encounter.class)\n-\t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n-\t\t        .list();\n-\t}\n-\t\n \t@Override\n \tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n-\t        ReferenceParam participant, ReferenceParam subject, TokenOrListParam participantIdentifier,\n-\t        StringOrListParam participantName, StringOrListParam participantGiven, StringOrListParam participantFamily,\n-\t        TokenOrListParam subjectIdentifier, StringOrListParam subjectName, StringOrListParam subjectGiven,\n-\t        StringOrListParam subjectFamily) {\n+\t        ReferenceParam participant, ReferenceParam subject) {\n \t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n-\t\thandleSubjectNames(criteria, subjectName, subjectGiven, subjectFamily);\n-\t\thandleParticipantNames(criteria, participantName, participantGiven, participantFamily);\n-\t\thandleSubjectIdentifier(criteria, subjectIdentifier);\n-\t\thandleParticipantIdentifier(criteria, participantIdentifier);\n-\t\thandleDateRange(\"date\", date).ifPresent(criteria::add);\n+\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n+\t\thandleLocationReference(criteria, location);\n+\t\thandleParticipantReference(criteria, participant);\n+\t\thandlePatientReference(criteria, subject);\n \t\t//TODO: handle ReferenceParam for participant, subject, location\n \t\t\n \t\treturn criteria.list();\n \t}\n-\t\n-\tprivate void handleParticipantIdentifier(Criteria criteria, TokenOrListParam identifier) {\n-\t\tif (identifier == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tcriteria.createAlias(\"identifiers\", \"pi\", JoinType.INNER_JOIN, eq(\"pi.voided\", false));\n-\t\t\n-\t\thandleOrListParamBySystem(identifier, (system, tokens) -> {\n-\t\t\tif (system.isEmpty()) {\n-\t\t\t\treturn Optional.of(in(\"pi.identifier\", tokensToList(tokens)));\n-\t\t\t} else {\n-\t\t\t\tif (!containsAlias(criteria, \"pit\")) {\n-\t\t\t\t\tcriteria.createAlias(\"pi.identifierType\", \"pit\");\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\treturn Optional.of(and(eq(\"pit.name\", system), in(\"pi.identifier\", tokensToList(tokens))));\n-\t\t\t}\n-\t\t}).ifPresent(criteria::add);\n-\t}\n-\t\n-\tprivate void handleSubjectIdentifier(Criteria criteria, TokenOrListParam identifier) {\n-\t\tif (identifier == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tcriteria.createAlias(\"identifiers\", \"si\", JoinType.INNER_JOIN, eq(\"si.voided\", false));\n-\t\t\n-\t\thandleOrListParamBySystem(identifier, (system, tokens) -> {\n-\t\t\tif (system.isEmpty()) {\n-\t\t\t\treturn Optional.of(in(\"si.identifier\", tokensToList(tokens)));\n-\t\t\t} else {\n-\t\t\t\tif (!containsAlias(criteria, \"sit\")) {\n-\t\t\t\t\tcriteria.createAlias(\"si.identifierType\", \"sit\");\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\treturn Optional.of(and(eq(\"sit.name\", system), in(\"si.identifier\", tokensToList(tokens))));\n-\t\t\t}\n-\t\t}).ifPresent(criteria::add);\n-\t}\n-\t\n-\tprivate void handleSubjectNames(Criteria criteria, StringOrListParam name, StringOrListParam given,\n-\t        StringOrListParam family) {\n-\t\tif (name == null && given == null && family == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tcriteria.createAlias(\"names\", \"sn\");\n-\t\t\n-\t\tif (name != null) {\n-\t\t\thandleOrListParamAsStream(name,\n-\t\t\t    (nameParam) -> Arrays.stream(StringUtils.split(nameParam.getValue(), \" \\t,\"))\n-\t\t\t            .map(token -> new StringParam().setValue(token).setExact(nameParam.isExact())\n-\t\t\t                    .setContains(nameParam.isContains()))\n-\t\t\t            .map(tokenParam -> Arrays.asList(propertyLike(\"sn.givenName\", tokenParam),\n-\t\t\t                propertyLike(\"sn.middleName\", tokenParam), propertyLike(\"sn.familyName\", tokenParam)))\n-\t\t\t            .flatMap(Collection::stream)).ifPresent(criteria::add);\n-\t\t}\n-\t\t\n-\t\tif (given != null) {\n-\t\t\thandleOrListParam(given, (givenName) -> propertyLike(\"sn.givenName\", givenName)).ifPresent(criteria::add);\n-\t\t}\n-\t\t\n-\t\tif (family != null) {\n-\t\t\thandleOrListParam(family, (familyName) -> propertyLike(\"sn.familyName\", familyName)).ifPresent(criteria::add);\n-\t\t}\n-\t}\n-\t\n-\tprivate void handleParticipantNames(Criteria criteria, StringOrListParam name, StringOrListParam given,\n-\t        StringOrListParam family) {\n-\t\tif (name == null && given == null && family == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tcriteria.createAlias(\"names\", \"pn\");\n-\t\t\n-\t\tif (name != null) {\n-\t\t\thandleOrListParamAsStream(name,\n-\t\t\t    (nameParam) -> Arrays.stream(StringUtils.split(nameParam.getValue(), \" \\t,\"))\n-\t\t\t            .map(token -> new StringParam().setValue(token).setExact(nameParam.isExact())\n-\t\t\t                    .setContains(nameParam.isContains()))\n-\t\t\t            .map(tokenParam -> Arrays.asList(propertyLike(\"pn.givenName\", tokenParam),\n-\t\t\t                propertyLike(\"pn.middleName\", tokenParam), propertyLike(\"pn.familyName\", tokenParam)))\n-\t\t\t            .flatMap(Collection::stream)).ifPresent(criteria::add);\n-\t\t}\n-\t\t\n-\t\tif (given != null) {\n-\t\t\thandleOrListParam(given, (givenName) -> propertyLike(\"pn.givenName\", givenName)).ifPresent(criteria::add);\n-\t\t}\n-\t\t\n-\t\tif (family != null) {\n-\t\t\thandleOrListParam(family, (familyName) -> propertyLike(\"pn.familyName\", familyName)).ifPresent(criteria::add);\n-\t\t}\n-\t}\n }\n", "next_change": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 31caf0d7..746b0bba 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -49,7 +49,6 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\thandleLocationReference(criteria, location);\n \t\thandleParticipantReference(criteria, participant);\n \t\thandlePatientReference(criteria, subject);\n-\t\t//TODO: handle ReferenceParam for participant, subject, location\n \t\t\n \t\treturn criteria.list();\n \t}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex c5bd61ca..746b0bba 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -50,123 +40,16 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\t        .uniqueResult();\n \t}\n \t\n-\t@Override\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic List<Encounter> findEncountersByPatientIdentifier(String patientIdentifier) {\n-\t\treturn (List<Encounter>) sessionFactory.getCurrentSession().createCriteria(Encounter.class)\n-\t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n-\t\t        .list();\n-\t}\n-\t\n \t@Override\n \tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n-\t        ReferenceParam participant, ReferenceParam subject, TokenOrListParam participantIdentifier,\n-\t        StringOrListParam participantName, StringOrListParam participantGiven, StringOrListParam participantFamily,\n-\t        TokenOrListParam subjectIdentifier, StringOrListParam subjectName, StringOrListParam subjectGiven,\n-\t        StringOrListParam subjectFamily) {\n+\t        ReferenceParam participant, ReferenceParam subject) {\n \t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n-\t\thandleSubjectNames(criteria, subjectName, subjectGiven, subjectFamily);\n-\t\thandleParticipantNames(criteria, participantName, participantGiven, participantFamily);\n-\t\thandleSubjectIdentifier(criteria, subjectIdentifier);\n-\t\thandleParticipantIdentifier(criteria, participantIdentifier);\n-\t\thandleDateRange(\"date\", date).ifPresent(criteria::add);\n-\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n+\t\thandleLocationReference(criteria, location);\n+\t\thandleParticipantReference(criteria, participant);\n+\t\thandlePatientReference(criteria, subject);\n \t\t\n \t\treturn criteria.list();\n \t}\n-\t\n-\tprivate void handleParticipantIdentifier(Criteria criteria, TokenOrListParam identifier) {\n-\t\tif (identifier == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tcriteria.createAlias(\"identifiers\", \"pi\", JoinType.INNER_JOIN, eq(\"pi.voided\", false));\n-\t\t\n-\t\thandleOrListParamBySystem(identifier, (system, tokens) -> {\n-\t\t\tif (system.isEmpty()) {\n-\t\t\t\treturn Optional.of(in(\"pi.identifier\", tokensToList(tokens)));\n-\t\t\t} else {\n-\t\t\t\tif (!containsAlias(criteria, \"pit\")) {\n-\t\t\t\t\tcriteria.createAlias(\"pi.identifierType\", \"pit\");\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\treturn Optional.of(and(eq(\"pit.name\", system), in(\"pi.identifier\", tokensToList(tokens))));\n-\t\t\t}\n-\t\t}).ifPresent(criteria::add);\n-\t}\n-\t\n-\tprivate void handleSubjectIdentifier(Criteria criteria, TokenOrListParam identifier) {\n-\t\tif (identifier == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tcriteria.createAlias(\"identifiers\", \"si\", JoinType.INNER_JOIN, eq(\"si.voided\", false));\n-\t\t\n-\t\thandleOrListParamBySystem(identifier, (system, tokens) -> {\n-\t\t\tif (system.isEmpty()) {\n-\t\t\t\treturn Optional.of(in(\"si.identifier\", tokensToList(tokens)));\n-\t\t\t} else {\n-\t\t\t\tif (!containsAlias(criteria, \"sit\")) {\n-\t\t\t\t\tcriteria.createAlias(\"si.identifierType\", \"sit\");\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\treturn Optional.of(and(eq(\"sit.name\", system), in(\"si.identifier\", tokensToList(tokens))));\n-\t\t\t}\n-\t\t}).ifPresent(criteria::add);\n-\t}\n-\t\n-\tprivate void handleSubjectNames(Criteria criteria, StringOrListParam name, StringOrListParam given,\n-\t        StringOrListParam family) {\n-\t\tif (name == null && given == null && family == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tcriteria.createAlias(\"names\", \"sn\");\n-\t\t\n-\t\tif (name != null) {\n-\t\t\thandleOrListParamAsStream(name,\n-\t\t\t    (nameParam) -> Arrays.stream(StringUtils.split(nameParam.getValue(), \" \\t,\"))\n-\t\t\t            .map(token -> new StringParam().setValue(token).setExact(nameParam.isExact())\n-\t\t\t                    .setContains(nameParam.isContains()))\n-\t\t\t            .map(tokenParam -> Arrays.asList(propertyLike(\"sn.givenName\", tokenParam),\n-\t\t\t                propertyLike(\"sn.middleName\", tokenParam), propertyLike(\"sn.familyName\", tokenParam)))\n-\t\t\t            .flatMap(Collection::stream)).ifPresent(criteria::add);\n-\t\t}\n-\t\t\n-\t\tif (given != null) {\n-\t\t\thandleOrListParam(given, (givenName) -> propertyLike(\"sn.givenName\", givenName)).ifPresent(criteria::add);\n-\t\t}\n-\t\t\n-\t\tif (family != null) {\n-\t\t\thandleOrListParam(family, (familyName) -> propertyLike(\"sn.familyName\", familyName)).ifPresent(criteria::add);\n-\t\t}\n-\t}\n-\t\n-\tprivate void handleParticipantNames(Criteria criteria, StringOrListParam name, StringOrListParam given,\n-\t        StringOrListParam family) {\n-\t\tif (name == null && given == null && family == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tcriteria.createAlias(\"names\", \"pn\");\n-\t\t\n-\t\tif (name != null) {\n-\t\t\thandleOrListParamAsStream(name,\n-\t\t\t    (nameParam) -> Arrays.stream(StringUtils.split(nameParam.getValue(), \" \\t,\"))\n-\t\t\t            .map(token -> new StringParam().setValue(token).setExact(nameParam.isExact())\n-\t\t\t                    .setContains(nameParam.isContains()))\n-\t\t\t            .map(tokenParam -> Arrays.asList(propertyLike(\"pn.givenName\", tokenParam),\n-\t\t\t                propertyLike(\"pn.middleName\", tokenParam), propertyLike(\"pn.familyName\", tokenParam)))\n-\t\t\t            .flatMap(Collection::stream)).ifPresent(criteria::add);\n-\t\t}\n-\t\t\n-\t\tif (given != null) {\n-\t\t\thandleOrListParam(given, (givenName) -> propertyLike(\"pn.givenName\", givenName)).ifPresent(criteria::add);\n-\t\t}\n-\t\t\n-\t\tif (family != null) {\n-\t\t\thandleOrListParam(family, (familyName) -> propertyLike(\"pn.familyName\", familyName)).ifPresent(criteria::add);\n-\t\t}\n-\t}\n }\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 746b0bba..a00f5496 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -41,12 +41,13 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t}\n \t\n \t@Override\n-\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n-\t        ReferenceParam participant, ReferenceParam subject) {\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n+\t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n \t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\t\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n-\t\thandleLocationReference(criteria, location);\n+\t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n \t\thandleParticipantReference(criteria, participant);\n \t\thandlePatientReference(criteria, subject);\n \t\t\n", "next_change": {"commit": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex a00f5496..00fabb62 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -9,42 +9,28 @@\n  */\n package org.openmrs.module.fhir2.api.dao.impl;\n \n-import static org.hibernate.criterion.Restrictions.eq;\n-\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-\n import java.util.Collection;\n \n-import ca.uhn.fhir.rest.param.DateRangeParam;\n-import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n-import lombok.AccessLevel;\n-import lombok.Setter;\n import org.hibernate.Criteria;\n-import org.hibernate.SessionFactory;\n import org.openmrs.Encounter;\n import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n import org.springframework.stereotype.Component;\n \n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+\n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDao {\n+public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements FhirEncounterDao {\n \t\n-\t@Inject\n-\t@Named(\"sessionFactory\")\n-\tprivate SessionFactory sessionFactory;\n-\t\n-\t@Override\n-\tpublic Encounter getEncounterByUuid(String uuid) {\n-\t\treturn (Encounter) sessionFactory.getCurrentSession().createCriteria(Encounter.class).add(eq(\"uuid\", uuid))\n-\t\t        .uniqueResult();\n-\t}\n \t\n \t@Override\n \tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n \t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n \t\t\n-\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Encounter.class);\n \t\t\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n \t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 00fabb62..1f29d5d2 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -9,34 +9,42 @@\n  */\n package org.openmrs.module.fhir2.api.dao.impl;\n \n-import java.util.Collection;\n-\n-import org.hibernate.Criteria;\n-import org.openmrs.Encounter;\n-import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n-import org.springframework.stereotype.Component;\n-\n import ca.uhn.fhir.rest.param.DateRangeParam;\n import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n+import org.openmrs.Encounter;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements FhirEncounterDao {\n \t\n-\t\n \t@Override\n-\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n-\t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n-\t\t\n-\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Encounter.class);\n-\t\t\n-\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n-\t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n-\t\thandleParticipantReference(criteria, participant);\n-\t\thandlePatientReference(criteria, subject);\n-\t\t\n-\t\treturn criteria.list();\n+\tprotected void setupSearchParams(Criteria criteria, SearchParameterMap theParams) {\n+\t\ttheParams.getParameters().forEach(entry -> {\n+\t\t\tswitch (entry.getKey()) {\n+\t\t\t\tcase FhirConstants.DATE_RANGE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleDateRange(\"encounterDatetime\", (DateRangeParam) param.getParam())\n+\t\t\t\t\t        .ifPresent(criteria::add));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.LOCATION_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleLocationReference(\"l\", (ReferenceAndListParam) param.getParam())\n+\t\t\t\t\t        .ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l)));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.PARTICIPANT_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(\n+\t\t\t\t\t    param -> handleParticipantReference(criteria, (ReferenceAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.PATIENT_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue()\n+\t\t\t\t\t        .forEach(param -> handlePatientReference(criteria, (ReferenceAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t});\n \t}\n }\n", "next_change": {"commit": "327efb2e413db0965f3e36da0ff8071e949259bf", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 1f29d5d2..017dbc85 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -44,7 +54,26 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t\t\tentry.getValue()\n \t\t\t\t\t        .forEach(param -> handlePatientReference(criteria, (ReferenceAndListParam) param.getParam()));\n \t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.COMMON_SEARCH_HANDLER:\n+\t\t\t\t\thandleCommonSearchParameters(entry.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\tbreak;\n \t\t\t}\n \t\t});\n \t}\n+\t\n+\t@Override\n+\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n+\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n+\t\t\n+\t\tcriterionList.add(handleDateRange(\"dateVoided\", param));\n+\t\t\n+\t\tcriterionList.add(Optional.of(\n+\t\t    and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")), handleDateRange(\"dateChanged\", param))))));\n+\t\t\n+\t\tcriterionList.add(Optional.of(and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")),\n+\t\t    Optional.of(isNull(\"dateChanged\")), handleDateRange(\"dateCreated\", param))))));\n+\t\t\n+\t\treturn Optional.of(or(toCriteriaArray(criterionList)));\n+\t}\n+\t\n }\n", "next_change": {"commit": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 017dbc85..14ce691c 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -60,20 +50,4 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t}\n \t\t});\n \t}\n-\t\n-\t@Override\n-\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n-\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\n-\t\tcriterionList.add(handleDateRange(\"dateVoided\", param));\n-\t\t\n-\t\tcriterionList.add(Optional.of(\n-\t\t    and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")), handleDateRange(\"dateChanged\", param))))));\n-\t\t\n-\t\tcriterionList.add(Optional.of(and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")),\n-\t\t    Optional.of(isNull(\"dateChanged\")), handleDateRange(\"dateCreated\", param))))));\n-\t\t\n-\t\treturn Optional.of(or(toCriteriaArray(criterionList)));\n-\t}\n-\t\n }\n", "next_change": {"commit": "196103f3852702dea014ef0eb609c60c27d22c3b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 14ce691c..86125464 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -50,4 +80,9 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t}\n \t\t});\n \t}\n+\t\n+\tprivate int getMaxParameter(SearchParameterMap theParams) {\n+\t\treturn ((NumberParam) theParams.getParameters(FhirConstants.MAX_SEARCH_HANDLER).get(0).getParam()).getValue()\n+\t\t        .intValue();\n+\t}\n }\n", "next_change": {"commit": "c31798df0f784d23e375644ddd6901949a6dd55e", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 86125464..e8ea44c7 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -85,4 +95,14 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\treturn ((NumberParam) theParams.getParameters(FhirConstants.MAX_SEARCH_HANDLER).get(0).getParam()).getValue()\n \t\t        .intValue();\n \t}\n+\t\n+\t@Override\n+\tprotected String paramToProp(@Nonnull String param) {\n+\t\tswitch (param) {\n+\t\t\tcase SP_DATE:\n+\t\t\t\treturn \"encounterDatetime\";\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n+\t}\n }\n", "next_change": {"commit": "dda1d10362cf03b61607a31101e3bf33f9439796", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex e8ea44c7..b64894f6 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -105,4 +104,10 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t\treturn null;\n \t\t}\n \t}\n+\t\n+\t@Override\n+\tprotected Criterion generateNotCompletedOrderQuery(String path) {\n+\t\t// not implemented in Core until 2.2; see override in FhirEncounterDaoImpl_2_2\n+\t\treturn null;\n+\t}\n }\n", "next_change": {"commit": "7b1cff7dea92b2948ad2003766f9141524441e51", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex b64894f6..5a78fe3e 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -104,10 +103,4 @@ public class FhirEncounterDaoImpl extends BaseEncounterDao<Encounter> implements\n \t\t\t\treturn null;\n \t\t}\n \t}\n-\t\n-\t@Override\n-\tprotected Criterion generateNotCompletedOrderQuery(String path) {\n-\t\t// not implemented in Core until 2.2; see override in FhirEncounterDaoImpl_2_2\n-\t\treturn null;\n-\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "6996e2c63677474bda58d44eb112d4e87af54667", "committedDate": "2020-04-29 09:05:38 +0300", "message": "Add naming convention documentation and change classes to conform (#150)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "327efb2e413db0965f3e36da0ff8071e949259bf", "committedDate": "2020-07-07 08:44:53 +0300", "message": "FM2-169: Add search for _id and _lastUpdated (#241)"}, {"oid": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "committedDate": "2020-08-05 16:40:51 +0300", "message": "Integration tests (#267)"}, {"oid": "196103f3852702dea014ef0eb609c60c27d22c3b", "committedDate": "2021-08-02 14:11:06 -0400", "message": "FM2-400: Support for $lastn-encounters in R4 (#353)"}, {"oid": "ee5b1c31e77a36d6b7ae8d0d95d215f1283f6fa6", "committedDate": "2021-10-08 09:51:31 -0400", "message": "FM2-431: Add support to search encounters by EncounterType (#371)"}, {"oid": "c31798df0f784d23e375644ddd6901949a6dd55e", "committedDate": "2022-02-14 09:14:38 -0500", "message": "FM2-408: Encounters should be sortable by date (#378)"}, {"oid": "290688fc9189b0fa108c77f09f46c2560292e84d", "committedDate": "2022-03-24 14:21:08 -0400", "message": "FM2-396: Allow Searching for Visits (#384)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "60f419bb1701fe6dd25ac116d5303f076706c400", "committedDate": "2023-02-09 15:24:00 -0500", "message": "(minor) Improvements to Lastn-related classes"}, {"oid": "dda1d10362cf03b61607a31101e3bf33f9439796", "committedDate": "2023-02-21 14:09:51 -0500", "message": "FM2-558: Create new named query \"encountersWithMedicationRequests\" in EncounterFhirResource Provider (#459)"}, {"oid": "7b1cff7dea92b2948ad2003766f9141524441e51", "committedDate": "2023-05-03 18:41:40 -0400", "message": "FM2-565: Add support for searching on FulfillerStatus (#466)"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5ODg1MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383498851", "body": "You seem to have mapped `Encounter.SP_SUBJECT` twice. Are you sure this is right?", "bodyText": "You seem to have mapped Encounter.SP_SUBJECT twice. Are you sure this is right?", "bodyHTML": "<p dir=\"auto\">You seem to have mapped <code>Encounter.SP_SUBJECT</code> twice. Are you sure this is right?</p>", "author": "ibacher", "createdAt": "2020-02-24T20:33:55Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java", "diffHunk": "@@ -59,4 +62,18 @@ public Bundle findEncountersByPatientIdentifier(@RequiredParam(name = Encounter.\n \t\treturn FhirUtils\n \t\t        .convertSearchResultsToBundle(encounterService.findEncountersByPatientIdentifier(identifier.getIdPart()));\n \t}\n+\t\n+\t@Search\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchEncounter(@OperationParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OperationParam(name = Encounter.SP_LOCATION) ReferenceParam location,\n+\t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,", "originalCommit": "739857e5b4ce2bf8b4aee3e71c47920ad9e60377", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 9aef23cd..daa4db73 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -57,18 +57,13 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t}\n \t\n \t@Search\n-\tpublic Bundle findEncountersByPatientIdentifier(@RequiredParam(name = Encounter.SP_PATIENT, chainWhitelist = {\n-\t        Patient.SP_IDENTIFIER }) ReferenceParam identifier) {\n-\t\treturn FhirUtils\n-\t\t        .convertSearchResultsToBundle(encounterService.findEncountersByPatientIdentifier(identifier.getIdPart()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle searchEncounter(@OperationParam(name = Encounter.SP_DATE) DateRangeParam date,\n-\t        @OperationParam(name = Encounter.SP_LOCATION) ReferenceParam location,\n-\t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n-\t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam participantReference,\n+\tpublic Bundle searchEncounter(@OptionalParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OptionalParam(name = Encounter.SP_LOCATION, chainWhitelist = { \"\", Location.SP_ADDRESS_CITY,\n+\t                Location.SP_ADDRESS_STATE, Location.SP_ADDRESS_COUNTRY,\n+\t                Location.SP_ADDRESS_POSTALCODE }, targetTypes = Location.class) ReferenceParam location,\n+\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Practitioner.SP_IDENTIFIER,\n+\t                Practitioner.SP_GIVEN, Practitioner.SP_FAMILY,\n+\t                Practitioner.SP_NAME }, targetTypes = Practitioner.class) ReferenceParam participantReference,\n \t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam subjectReference) {\n \t\treturn FhirUtils.convertSearchResultsToBundle(\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 9aef23cd..daa4db73 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -57,18 +57,13 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t}\n \t\n \t@Search\n-\tpublic Bundle findEncountersByPatientIdentifier(@RequiredParam(name = Encounter.SP_PATIENT, chainWhitelist = {\n-\t        Patient.SP_IDENTIFIER }) ReferenceParam identifier) {\n-\t\treturn FhirUtils\n-\t\t        .convertSearchResultsToBundle(encounterService.findEncountersByPatientIdentifier(identifier.getIdPart()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle searchEncounter(@OperationParam(name = Encounter.SP_DATE) DateRangeParam date,\n-\t        @OperationParam(name = Encounter.SP_LOCATION) ReferenceParam location,\n-\t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n-\t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam participantReference,\n+\tpublic Bundle searchEncounter(@OptionalParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OptionalParam(name = Encounter.SP_LOCATION, chainWhitelist = { \"\", Location.SP_ADDRESS_CITY,\n+\t                Location.SP_ADDRESS_STATE, Location.SP_ADDRESS_COUNTRY,\n+\t                Location.SP_ADDRESS_POSTALCODE }, targetTypes = Location.class) ReferenceParam location,\n+\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Practitioner.SP_IDENTIFIER,\n+\t                Practitioner.SP_GIVEN, Practitioner.SP_FAMILY,\n+\t                Practitioner.SP_NAME }, targetTypes = Practitioner.class) ReferenceParam participantReference,\n \t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam subjectReference) {\n \t\treturn FhirUtils.convertSearchResultsToBundle(\n", "next_change": {"commit": "1ed356fac0cba16ca1b114fb90d1627cf436eaff", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex daa4db73..0444b5be 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -66,7 +66,7 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t                Practitioner.SP_NAME }, targetTypes = Practitioner.class) ReferenceParam participantReference,\n \t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam subjectReference) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(\n+\t\treturn FhirServerUtils.convertSearchResultsToBundle(\n \t\t    encounterService.searchForEncounters(date, location, participantReference, subjectReference));\n \t\t\n \t}\n", "next_change": {"commit": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 0444b5be..68ad1964 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -71,4 +75,14 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t\t\n \t}\n \t\n+\t@History\n+\t@SuppressWarnings(\"unused\")\n+\tpublic List<Resource> getEncounterHistoryById(@IdParam @NotNull IdType id) {\n+\t\tEncounter encounter = encounterService.getEncounterByUuid(id.getIdPart());\n+\t\tif (encounter == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find encounter with Id \" + id.getIdPart());\n+\t\t}\n+\t\treturn encounter.getContained();\n+\t}\n+\t\n }\n", "next_change": {"commit": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 68ad1964..916ca8ca 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -78,7 +79,7 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t@History\n \t@SuppressWarnings(\"unused\")\n \tpublic List<Resource> getEncounterHistoryById(@IdParam @NotNull IdType id) {\n-\t\tEncounter encounter = encounterService.getEncounterByUuid(id.getIdPart());\n+\t\tEncounter encounter = encounterService.get(id.getIdPart());\n \t\tif (encounter == null) {\n \t\t\tthrow new ResourceNotFoundException(\"Could not find encounter with Id \" + id.getIdPart());\n \t\t}\n", "next_change": {"commit": "0669dfe0d94964a2fe7b3b8def716c2179e0f8da", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 916ca8ca..899453d1 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -76,14 +86,4 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t\t\n \t}\n \t\n-\t@History\n-\t@SuppressWarnings(\"unused\")\n-\tpublic List<Resource> getEncounterHistoryById(@IdParam @NotNull IdType id) {\n-\t\tEncounter encounter = encounterService.get(id.getIdPart());\n-\t\tif (encounter == null) {\n-\t\t\tthrow new ResourceNotFoundException(\"Could not find encounter with Id \" + id.getIdPart());\n-\t\t}\n-\t\treturn encounter.getContained();\n-\t}\n-\t\n }\n", "next_change": {"commit": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProvider.java\nsimilarity index 94%\nrename from omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nrename to api/src/main/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProvider.java\nindex 899453d1..f26edb0f 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProvider.java\n", "chunk": "@@ -81,7 +81,7 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY,\n \t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceAndListParam subjectReference) {\n-\t\treturn FhirServerUtils.convertSearchResultsToBundle(\n+\t\treturn FhirProviderUtils.convertSearchResultsToBundle(\n \t\t    encounterService.searchForEncounters(date, location, participantReference, subjectReference));\n \t\t\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "1ed356fac0cba16ca1b114fb90d1627cf436eaff", "committedDate": "2020-03-03 16:14:03 +0300", "message": "Rename FhirUtils to FhirServerUtils @Omod sub-module (#93)"}, {"oid": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "committedDate": "2020-03-04 09:25:55 -0500", "message": "FM2-72: Added provenances for additional resources (#104)"}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0669dfe0d94964a2fe7b3b8def716c2179e0f8da", "committedDate": "2020-05-04 09:17:10 -0400", "message": "Fix various warnings and some other refactoring"}, {"oid": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "committedDate": "2020-05-22 17:04:04 -0400", "message": "FM2-183: Add support for DSTU3 (#158)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5OTU3OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383499579", "body": "Should we be using `Patient.SP_IDENTIFIER` here?", "bodyText": "Should we be using Patient.SP_IDENTIFIER here?", "bodyHTML": "<p dir=\"auto\">Should we be using <code>Patient.SP_IDENTIFIER</code> here?</p>", "author": "ibacher", "createdAt": "2020-02-24T20:35:30Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -44,4 +57,121 @@ public Encounter getEncounterByUuid(String uuid) {\n \t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n \t\t        .list();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n+\t        ReferenceParam participant, ReferenceParam subject) {\n+\t\t\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n+\t\thandleLocationReference(criteria, location);\n+\t\thandleParticipantReference(criteria, participant);\n+\t\thandleSubjectReference(criteria, subject);\n+\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n+\t\tif (locationReference != null) {\n+\t\t\tcriteria.createAlias(\"location\", \"l\");\n+\t\t\t\n+\t\t\tif (locationReference.getChain() != null) {\n+\t\t\t\tswitch (locationReference.getChain()) {\n+\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n+\t\tif (participantReference != null) {\n+\t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n+\t\t\t\n+\t\t\tif (participantReference.getChain() != null) {\n+\t\t\t\tswitch (participantReference.getChain()) {\n+\t\t\t\t\tcase Patient.SP_IDENTIFIER:", "originalCommit": "739857e5b4ce2bf8b4aee3e71c47920ad9e60377", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwOTA5MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383509091", "bodyText": "@ibacher I guess we should use Practitioner", "author": "VaishSiddharth", "createdAt": "2020-02-24T20:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5OTU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwOTUzMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383509532", "bodyText": "Yes, exactly!", "author": "ibacher", "createdAt": "2020-02-24T20:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5OTU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 31b81fef..31caf0d7 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -66,112 +48,9 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n \t\thandleLocationReference(criteria, location);\n \t\thandleParticipantReference(criteria, participant);\n-\t\thandleSubjectReference(criteria, subject);\n+\t\thandlePatientReference(criteria, subject);\n \t\t//TODO: handle ReferenceParam for participant, subject, location\n \t\t\n \t\treturn criteria.list();\n \t}\n-\t\n-\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n-\t\tif (locationReference != null) {\n-\t\t\tcriteria.createAlias(\"location\", \"l\");\n-\t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n-\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprivate void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n-\t\tif (participantReference != null) {\n-\t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n-\t\t\t\n-\t\t\tif (participantReference.getChain() != null) {\n-\t\t\t\tswitch (participantReference.getChain()) {\n-\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprotected void handleSubjectReference(Criteria criteria, ReferenceParam subjectReference) {\n-\t\tif (subjectReference != null) {\n-\t\t\tcriteria.createAlias(\"patient\", \"p\");\n-\t\t\t\n-\t\t\tif (subjectReference.getChain() != null) {\n-\t\t\t\tswitch (subjectReference.getChain()) {\n-\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.identifiers\", \"pi\").add(ilike(\"pi.identifier\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(subjectReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"p.uuid\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n }\n", "next_change": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 31caf0d7..746b0bba 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -49,7 +49,6 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\thandleLocationReference(criteria, location);\n \t\thandleParticipantReference(criteria, participant);\n \t\thandlePatientReference(criteria, subject);\n-\t\t//TODO: handle ReferenceParam for participant, subject, location\n \t\t\n \t\treturn criteria.list();\n \t}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 31b81fef..746b0bba 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -66,112 +48,8 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n \t\thandleLocationReference(criteria, location);\n \t\thandleParticipantReference(criteria, participant);\n-\t\thandleSubjectReference(criteria, subject);\n-\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\thandlePatientReference(criteria, subject);\n \t\t\n \t\treturn criteria.list();\n \t}\n-\t\n-\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n-\t\tif (locationReference != null) {\n-\t\t\tcriteria.createAlias(\"location\", \"l\");\n-\t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n-\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprivate void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n-\t\tif (participantReference != null) {\n-\t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n-\t\t\t\n-\t\t\tif (participantReference.getChain() != null) {\n-\t\t\t\tswitch (participantReference.getChain()) {\n-\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprotected void handleSubjectReference(Criteria criteria, ReferenceParam subjectReference) {\n-\t\tif (subjectReference != null) {\n-\t\t\tcriteria.createAlias(\"patient\", \"p\");\n-\t\t\t\n-\t\t\tif (subjectReference.getChain() != null) {\n-\t\t\t\tswitch (subjectReference.getChain()) {\n-\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.identifiers\", \"pi\").add(ilike(\"pi.identifier\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(subjectReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"p.uuid\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n }\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 746b0bba..a00f5496 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -41,12 +41,13 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t}\n \t\n \t@Override\n-\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n-\t        ReferenceParam participant, ReferenceParam subject) {\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n+\t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n \t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\t\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n-\t\thandleLocationReference(criteria, location);\n+\t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n \t\thandleParticipantReference(criteria, participant);\n \t\thandlePatientReference(criteria, subject);\n \t\t\n", "next_change": {"commit": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex a00f5496..00fabb62 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -9,42 +9,28 @@\n  */\n package org.openmrs.module.fhir2.api.dao.impl;\n \n-import static org.hibernate.criterion.Restrictions.eq;\n-\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-\n import java.util.Collection;\n \n-import ca.uhn.fhir.rest.param.DateRangeParam;\n-import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n-import lombok.AccessLevel;\n-import lombok.Setter;\n import org.hibernate.Criteria;\n-import org.hibernate.SessionFactory;\n import org.openmrs.Encounter;\n import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n import org.springframework.stereotype.Component;\n \n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+\n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDao {\n+public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements FhirEncounterDao {\n \t\n-\t@Inject\n-\t@Named(\"sessionFactory\")\n-\tprivate SessionFactory sessionFactory;\n-\t\n-\t@Override\n-\tpublic Encounter getEncounterByUuid(String uuid) {\n-\t\treturn (Encounter) sessionFactory.getCurrentSession().createCriteria(Encounter.class).add(eq(\"uuid\", uuid))\n-\t\t        .uniqueResult();\n-\t}\n \t\n \t@Override\n \tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n \t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n \t\t\n-\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Encounter.class);\n \t\t\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n \t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 00fabb62..1f29d5d2 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -9,34 +9,42 @@\n  */\n package org.openmrs.module.fhir2.api.dao.impl;\n \n-import java.util.Collection;\n-\n-import org.hibernate.Criteria;\n-import org.openmrs.Encounter;\n-import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n-import org.springframework.stereotype.Component;\n-\n import ca.uhn.fhir.rest.param.DateRangeParam;\n import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n+import org.openmrs.Encounter;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements FhirEncounterDao {\n \t\n-\t\n \t@Override\n-\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n-\t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n-\t\t\n-\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Encounter.class);\n-\t\t\n-\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n-\t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n-\t\thandleParticipantReference(criteria, participant);\n-\t\thandlePatientReference(criteria, subject);\n-\t\t\n-\t\treturn criteria.list();\n+\tprotected void setupSearchParams(Criteria criteria, SearchParameterMap theParams) {\n+\t\ttheParams.getParameters().forEach(entry -> {\n+\t\t\tswitch (entry.getKey()) {\n+\t\t\t\tcase FhirConstants.DATE_RANGE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleDateRange(\"encounterDatetime\", (DateRangeParam) param.getParam())\n+\t\t\t\t\t        .ifPresent(criteria::add));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.LOCATION_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleLocationReference(\"l\", (ReferenceAndListParam) param.getParam())\n+\t\t\t\t\t        .ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l)));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.PARTICIPANT_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(\n+\t\t\t\t\t    param -> handleParticipantReference(criteria, (ReferenceAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.PATIENT_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue()\n+\t\t\t\t\t        .forEach(param -> handlePatientReference(criteria, (ReferenceAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t});\n \t}\n }\n", "next_change": {"commit": "327efb2e413db0965f3e36da0ff8071e949259bf", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 1f29d5d2..017dbc85 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -44,7 +54,26 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t\t\tentry.getValue()\n \t\t\t\t\t        .forEach(param -> handlePatientReference(criteria, (ReferenceAndListParam) param.getParam()));\n \t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.COMMON_SEARCH_HANDLER:\n+\t\t\t\t\thandleCommonSearchParameters(entry.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\tbreak;\n \t\t\t}\n \t\t});\n \t}\n+\t\n+\t@Override\n+\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n+\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n+\t\t\n+\t\tcriterionList.add(handleDateRange(\"dateVoided\", param));\n+\t\t\n+\t\tcriterionList.add(Optional.of(\n+\t\t    and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")), handleDateRange(\"dateChanged\", param))))));\n+\t\t\n+\t\tcriterionList.add(Optional.of(and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")),\n+\t\t    Optional.of(isNull(\"dateChanged\")), handleDateRange(\"dateCreated\", param))))));\n+\t\t\n+\t\treturn Optional.of(or(toCriteriaArray(criterionList)));\n+\t}\n+\t\n }\n", "next_change": {"commit": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 017dbc85..14ce691c 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -60,20 +50,4 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t}\n \t\t});\n \t}\n-\t\n-\t@Override\n-\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n-\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\n-\t\tcriterionList.add(handleDateRange(\"dateVoided\", param));\n-\t\t\n-\t\tcriterionList.add(Optional.of(\n-\t\t    and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")), handleDateRange(\"dateChanged\", param))))));\n-\t\t\n-\t\tcriterionList.add(Optional.of(and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")),\n-\t\t    Optional.of(isNull(\"dateChanged\")), handleDateRange(\"dateCreated\", param))))));\n-\t\t\n-\t\treturn Optional.of(or(toCriteriaArray(criterionList)));\n-\t}\n-\t\n }\n", "next_change": {"commit": "196103f3852702dea014ef0eb609c60c27d22c3b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 14ce691c..86125464 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -50,4 +80,9 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t}\n \t\t});\n \t}\n+\t\n+\tprivate int getMaxParameter(SearchParameterMap theParams) {\n+\t\treturn ((NumberParam) theParams.getParameters(FhirConstants.MAX_SEARCH_HANDLER).get(0).getParam()).getValue()\n+\t\t        .intValue();\n+\t}\n }\n", "next_change": {"commit": "c31798df0f784d23e375644ddd6901949a6dd55e", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 86125464..e8ea44c7 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -85,4 +95,14 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\treturn ((NumberParam) theParams.getParameters(FhirConstants.MAX_SEARCH_HANDLER).get(0).getParam()).getValue()\n \t\t        .intValue();\n \t}\n+\t\n+\t@Override\n+\tprotected String paramToProp(@Nonnull String param) {\n+\t\tswitch (param) {\n+\t\t\tcase SP_DATE:\n+\t\t\t\treturn \"encounterDatetime\";\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n+\t}\n }\n", "next_change": {"commit": "dda1d10362cf03b61607a31101e3bf33f9439796", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex e8ea44c7..b64894f6 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -105,4 +104,10 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t\treturn null;\n \t\t}\n \t}\n+\t\n+\t@Override\n+\tprotected Criterion generateNotCompletedOrderQuery(String path) {\n+\t\t// not implemented in Core until 2.2; see override in FhirEncounterDaoImpl_2_2\n+\t\treturn null;\n+\t}\n }\n", "next_change": {"commit": "7b1cff7dea92b2948ad2003766f9141524441e51", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex b64894f6..5a78fe3e 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -104,10 +103,4 @@ public class FhirEncounterDaoImpl extends BaseEncounterDao<Encounter> implements\n \t\t\t\treturn null;\n \t\t}\n \t}\n-\t\n-\t@Override\n-\tprotected Criterion generateNotCompletedOrderQuery(String path) {\n-\t\t// not implemented in Core until 2.2; see override in FhirEncounterDaoImpl_2_2\n-\t\treturn null;\n-\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "6996e2c63677474bda58d44eb112d4e87af54667", "committedDate": "2020-04-29 09:05:38 +0300", "message": "Add naming convention documentation and change classes to conform (#150)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "327efb2e413db0965f3e36da0ff8071e949259bf", "committedDate": "2020-07-07 08:44:53 +0300", "message": "FM2-169: Add search for _id and _lastUpdated (#241)"}, {"oid": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "committedDate": "2020-08-05 16:40:51 +0300", "message": "Integration tests (#267)"}, {"oid": "196103f3852702dea014ef0eb609c60c27d22c3b", "committedDate": "2021-08-02 14:11:06 -0400", "message": "FM2-400: Support for $lastn-encounters in R4 (#353)"}, {"oid": "ee5b1c31e77a36d6b7ae8d0d95d215f1283f6fa6", "committedDate": "2021-10-08 09:51:31 -0400", "message": "FM2-431: Add support to search encounters by EncounterType (#371)"}, {"oid": "c31798df0f784d23e375644ddd6901949a6dd55e", "committedDate": "2022-02-14 09:14:38 -0500", "message": "FM2-408: Encounters should be sortable by date (#378)"}, {"oid": "290688fc9189b0fa108c77f09f46c2560292e84d", "committedDate": "2022-03-24 14:21:08 -0400", "message": "FM2-396: Allow Searching for Visits (#384)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "60f419bb1701fe6dd25ac116d5303f076706c400", "committedDate": "2023-02-09 15:24:00 -0500", "message": "(minor) Improvements to Lastn-related classes"}, {"oid": "dda1d10362cf03b61607a31101e3bf33f9439796", "committedDate": "2023-02-21 14:09:51 -0500", "message": "FM2-558: Create new named query \"encountersWithMedicationRequests\" in EncounterFhirResource Provider (#459)"}, {"oid": "7b1cff7dea92b2948ad2003766f9141524441e51", "committedDate": "2023-05-03 18:41:40 -0400", "message": "FM2-565: Add support for searching on FulfillerStatus (#466)"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDA5OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383500098", "body": "How does this differ from the `handlePatientReference()` function that already exists?", "bodyText": "How does this differ from the handlePatientReference() function that already exists?", "bodyHTML": "<p dir=\"auto\">How does this differ from the <code>handlePatientReference()</code> function that already exists?</p>", "author": "ibacher", "createdAt": "2020-02-24T20:36:39Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -44,4 +57,121 @@ public Encounter getEncounterByUuid(String uuid) {\n \t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n \t\t        .list();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n+\t        ReferenceParam participant, ReferenceParam subject) {\n+\t\t\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n+\t\thandleLocationReference(criteria, location);\n+\t\thandleParticipantReference(criteria, participant);\n+\t\thandleSubjectReference(criteria, subject);\n+\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n+\t\tif (locationReference != null) {\n+\t\t\tcriteria.createAlias(\"location\", \"l\");\n+\t\t\t\n+\t\t\tif (locationReference.getChain() != null) {\n+\t\t\t\tswitch (locationReference.getChain()) {\n+\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n+\t\tif (participantReference != null) {\n+\t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n+\t\t\t\n+\t\t\tif (participantReference.getChain() != null) {\n+\t\t\t\tswitch (participantReference.getChain()) {\n+\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n+\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Patient.SP_GIVEN:\n+\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n+\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Patient.SP_FAMILY:\n+\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n+\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Patient.SP_NAME:\n+\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\");\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n+\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n+\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n+\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantReference.getValue()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprotected void handleSubjectReference(Criteria criteria, ReferenceParam subjectReference) {", "originalCommit": "739857e5b4ce2bf8b4aee3e71c47920ad9e60377", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMDQ0OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383510449", "bodyText": "@ibacher handlePatientReference() has person as alias but this has patient as alias if I try to use handlePatientReference() then an erreo like cannot resolve propery person pops (after writing tests)", "author": "VaishSiddharth", "createdAt": "2020-02-24T20:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMzc0Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383513742", "bodyText": "Absolutely right. I've fixed this in the latest master.", "author": "ibacher", "createdAt": "2020-02-24T21:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NDUwMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383874500", "bodyText": "@VaishSiddharth Can you rebase onto the latest version of master and use the handlePatientReference() method instead? Thanks \ud83d\ude04", "author": "ibacher", "createdAt": "2020-02-25T13:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MTE5OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383881199", "bodyText": "@ibacher Working in it. Will soon send another commit after resolving all these issues.", "author": "VaishSiddharth", "createdAt": "2020-02-25T13:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 31b81fef..31caf0d7 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -66,112 +48,9 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n \t\thandleLocationReference(criteria, location);\n \t\thandleParticipantReference(criteria, participant);\n-\t\thandleSubjectReference(criteria, subject);\n+\t\thandlePatientReference(criteria, subject);\n \t\t//TODO: handle ReferenceParam for participant, subject, location\n \t\t\n \t\treturn criteria.list();\n \t}\n-\t\n-\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n-\t\tif (locationReference != null) {\n-\t\t\tcriteria.createAlias(\"location\", \"l\");\n-\t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n-\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprivate void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n-\t\tif (participantReference != null) {\n-\t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n-\t\t\t\n-\t\t\tif (participantReference.getChain() != null) {\n-\t\t\t\tswitch (participantReference.getChain()) {\n-\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprotected void handleSubjectReference(Criteria criteria, ReferenceParam subjectReference) {\n-\t\tif (subjectReference != null) {\n-\t\t\tcriteria.createAlias(\"patient\", \"p\");\n-\t\t\t\n-\t\t\tif (subjectReference.getChain() != null) {\n-\t\t\t\tswitch (subjectReference.getChain()) {\n-\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.identifiers\", \"pi\").add(ilike(\"pi.identifier\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(subjectReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"p.uuid\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n }\n", "next_change": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 31caf0d7..746b0bba 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -49,7 +49,6 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\thandleLocationReference(criteria, location);\n \t\thandleParticipantReference(criteria, participant);\n \t\thandlePatientReference(criteria, subject);\n-\t\t//TODO: handle ReferenceParam for participant, subject, location\n \t\t\n \t\treturn criteria.list();\n \t}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 31b81fef..746b0bba 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -66,112 +48,8 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n \t\thandleLocationReference(criteria, location);\n \t\thandleParticipantReference(criteria, participant);\n-\t\thandleSubjectReference(criteria, subject);\n-\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\thandlePatientReference(criteria, subject);\n \t\t\n \t\treturn criteria.list();\n \t}\n-\t\n-\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n-\t\tif (locationReference != null) {\n-\t\t\tcriteria.createAlias(\"location\", \"l\");\n-\t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n-\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprivate void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n-\t\tif (participantReference != null) {\n-\t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n-\t\t\t\n-\t\t\tif (participantReference.getChain() != null) {\n-\t\t\t\tswitch (participantReference.getChain()) {\n-\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprotected void handleSubjectReference(Criteria criteria, ReferenceParam subjectReference) {\n-\t\tif (subjectReference != null) {\n-\t\t\tcriteria.createAlias(\"patient\", \"p\");\n-\t\t\t\n-\t\t\tif (subjectReference.getChain() != null) {\n-\t\t\t\tswitch (subjectReference.getChain()) {\n-\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.identifiers\", \"pi\").add(ilike(\"pi.identifier\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(subjectReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"p.uuid\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n }\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 746b0bba..a00f5496 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -41,12 +41,13 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t}\n \t\n \t@Override\n-\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n-\t        ReferenceParam participant, ReferenceParam subject) {\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n+\t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n \t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\t\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n-\t\thandleLocationReference(criteria, location);\n+\t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n \t\thandleParticipantReference(criteria, participant);\n \t\thandlePatientReference(criteria, subject);\n \t\t\n", "next_change": {"commit": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex a00f5496..00fabb62 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -9,42 +9,28 @@\n  */\n package org.openmrs.module.fhir2.api.dao.impl;\n \n-import static org.hibernate.criterion.Restrictions.eq;\n-\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-\n import java.util.Collection;\n \n-import ca.uhn.fhir.rest.param.DateRangeParam;\n-import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n-import lombok.AccessLevel;\n-import lombok.Setter;\n import org.hibernate.Criteria;\n-import org.hibernate.SessionFactory;\n import org.openmrs.Encounter;\n import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n import org.springframework.stereotype.Component;\n \n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+\n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDao {\n+public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements FhirEncounterDao {\n \t\n-\t@Inject\n-\t@Named(\"sessionFactory\")\n-\tprivate SessionFactory sessionFactory;\n-\t\n-\t@Override\n-\tpublic Encounter getEncounterByUuid(String uuid) {\n-\t\treturn (Encounter) sessionFactory.getCurrentSession().createCriteria(Encounter.class).add(eq(\"uuid\", uuid))\n-\t\t        .uniqueResult();\n-\t}\n \t\n \t@Override\n \tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n \t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n \t\t\n-\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Encounter.class);\n \t\t\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n \t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 00fabb62..1f29d5d2 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -9,34 +9,42 @@\n  */\n package org.openmrs.module.fhir2.api.dao.impl;\n \n-import java.util.Collection;\n-\n-import org.hibernate.Criteria;\n-import org.openmrs.Encounter;\n-import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n-import org.springframework.stereotype.Component;\n-\n import ca.uhn.fhir.rest.param.DateRangeParam;\n import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n+import org.openmrs.Encounter;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements FhirEncounterDao {\n \t\n-\t\n \t@Override\n-\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n-\t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n-\t\t\n-\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Encounter.class);\n-\t\t\n-\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n-\t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n-\t\thandleParticipantReference(criteria, participant);\n-\t\thandlePatientReference(criteria, subject);\n-\t\t\n-\t\treturn criteria.list();\n+\tprotected void setupSearchParams(Criteria criteria, SearchParameterMap theParams) {\n+\t\ttheParams.getParameters().forEach(entry -> {\n+\t\t\tswitch (entry.getKey()) {\n+\t\t\t\tcase FhirConstants.DATE_RANGE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleDateRange(\"encounterDatetime\", (DateRangeParam) param.getParam())\n+\t\t\t\t\t        .ifPresent(criteria::add));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.LOCATION_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleLocationReference(\"l\", (ReferenceAndListParam) param.getParam())\n+\t\t\t\t\t        .ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l)));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.PARTICIPANT_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(\n+\t\t\t\t\t    param -> handleParticipantReference(criteria, (ReferenceAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.PATIENT_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue()\n+\t\t\t\t\t        .forEach(param -> handlePatientReference(criteria, (ReferenceAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t});\n \t}\n }\n", "next_change": {"commit": "327efb2e413db0965f3e36da0ff8071e949259bf", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 1f29d5d2..017dbc85 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -44,7 +54,26 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t\t\tentry.getValue()\n \t\t\t\t\t        .forEach(param -> handlePatientReference(criteria, (ReferenceAndListParam) param.getParam()));\n \t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.COMMON_SEARCH_HANDLER:\n+\t\t\t\t\thandleCommonSearchParameters(entry.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\tbreak;\n \t\t\t}\n \t\t});\n \t}\n+\t\n+\t@Override\n+\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n+\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n+\t\t\n+\t\tcriterionList.add(handleDateRange(\"dateVoided\", param));\n+\t\t\n+\t\tcriterionList.add(Optional.of(\n+\t\t    and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")), handleDateRange(\"dateChanged\", param))))));\n+\t\t\n+\t\tcriterionList.add(Optional.of(and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")),\n+\t\t    Optional.of(isNull(\"dateChanged\")), handleDateRange(\"dateCreated\", param))))));\n+\t\t\n+\t\treturn Optional.of(or(toCriteriaArray(criterionList)));\n+\t}\n+\t\n }\n", "next_change": {"commit": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 017dbc85..14ce691c 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -60,20 +50,4 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t}\n \t\t});\n \t}\n-\t\n-\t@Override\n-\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n-\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\n-\t\tcriterionList.add(handleDateRange(\"dateVoided\", param));\n-\t\t\n-\t\tcriterionList.add(Optional.of(\n-\t\t    and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")), handleDateRange(\"dateChanged\", param))))));\n-\t\t\n-\t\tcriterionList.add(Optional.of(and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")),\n-\t\t    Optional.of(isNull(\"dateChanged\")), handleDateRange(\"dateCreated\", param))))));\n-\t\t\n-\t\treturn Optional.of(or(toCriteriaArray(criterionList)));\n-\t}\n-\t\n }\n", "next_change": {"commit": "196103f3852702dea014ef0eb609c60c27d22c3b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 14ce691c..86125464 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -50,4 +80,9 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t}\n \t\t});\n \t}\n+\t\n+\tprivate int getMaxParameter(SearchParameterMap theParams) {\n+\t\treturn ((NumberParam) theParams.getParameters(FhirConstants.MAX_SEARCH_HANDLER).get(0).getParam()).getValue()\n+\t\t        .intValue();\n+\t}\n }\n", "next_change": {"commit": "c31798df0f784d23e375644ddd6901949a6dd55e", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 86125464..e8ea44c7 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -85,4 +95,14 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\treturn ((NumberParam) theParams.getParameters(FhirConstants.MAX_SEARCH_HANDLER).get(0).getParam()).getValue()\n \t\t        .intValue();\n \t}\n+\t\n+\t@Override\n+\tprotected String paramToProp(@Nonnull String param) {\n+\t\tswitch (param) {\n+\t\t\tcase SP_DATE:\n+\t\t\t\treturn \"encounterDatetime\";\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n+\t}\n }\n", "next_change": {"commit": "dda1d10362cf03b61607a31101e3bf33f9439796", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex e8ea44c7..b64894f6 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -105,4 +104,10 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t\treturn null;\n \t\t}\n \t}\n+\t\n+\t@Override\n+\tprotected Criterion generateNotCompletedOrderQuery(String path) {\n+\t\t// not implemented in Core until 2.2; see override in FhirEncounterDaoImpl_2_2\n+\t\treturn null;\n+\t}\n }\n", "next_change": {"commit": "7b1cff7dea92b2948ad2003766f9141524441e51", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex b64894f6..5a78fe3e 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -104,10 +103,4 @@ public class FhirEncounterDaoImpl extends BaseEncounterDao<Encounter> implements\n \t\t\t\treturn null;\n \t\t}\n \t}\n-\t\n-\t@Override\n-\tprotected Criterion generateNotCompletedOrderQuery(String path) {\n-\t\t// not implemented in Core until 2.2; see override in FhirEncounterDaoImpl_2_2\n-\t\treturn null;\n-\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "6996e2c63677474bda58d44eb112d4e87af54667", "committedDate": "2020-04-29 09:05:38 +0300", "message": "Add naming convention documentation and change classes to conform (#150)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "327efb2e413db0965f3e36da0ff8071e949259bf", "committedDate": "2020-07-07 08:44:53 +0300", "message": "FM2-169: Add search for _id and _lastUpdated (#241)"}, {"oid": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "committedDate": "2020-08-05 16:40:51 +0300", "message": "Integration tests (#267)"}, {"oid": "196103f3852702dea014ef0eb609c60c27d22c3b", "committedDate": "2021-08-02 14:11:06 -0400", "message": "FM2-400: Support for $lastn-encounters in R4 (#353)"}, {"oid": "ee5b1c31e77a36d6b7ae8d0d95d215f1283f6fa6", "committedDate": "2021-10-08 09:51:31 -0400", "message": "FM2-431: Add support to search encounters by EncounterType (#371)"}, {"oid": "c31798df0f784d23e375644ddd6901949a6dd55e", "committedDate": "2022-02-14 09:14:38 -0500", "message": "FM2-408: Encounters should be sortable by date (#378)"}, {"oid": "290688fc9189b0fa108c77f09f46c2560292e84d", "committedDate": "2022-03-24 14:21:08 -0400", "message": "FM2-396: Allow Searching for Visits (#384)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "60f419bb1701fe6dd25ac116d5303f076706c400", "committedDate": "2023-02-09 15:24:00 -0500", "message": "(minor) Improvements to Lastn-related classes"}, {"oid": "dda1d10362cf03b61607a31101e3bf33f9439796", "committedDate": "2023-02-21 14:09:51 -0500", "message": "FM2-558: Create new named query \"encountersWithMedicationRequests\" in EncounterFhirResource Provider (#459)"}, {"oid": "7b1cff7dea92b2948ad2003766f9141524441e51", "committedDate": "2023-05-03 18:41:40 -0400", "message": "FM2-565: Add support for searching on FulfillerStatus (#466)"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NTQ0Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383875447", "body": "We should still be able to search by patient identifier, right?", "bodyText": "We should still be able to search by patient identifier, right?", "bodyHTML": "<p dir=\"auto\">We should still be able to search by patient identifier, right?</p>", "author": "ibacher", "createdAt": "2020-02-25T13:25:28Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +91,66 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {", "originalCommit": "5308c2c1d204d1a8dba16d670594e583910b460e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 6faefc89..0837e3a5 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -92,65 +98,169 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n \t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n \t\tsubjectReference.setChain(Patient.SP_NAME);\n-\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME + \" \" + PATIENT_FAMILY_NAME);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", Matchers.equalTo(ENCOUNTER_UUID))));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tparticipantReference.setValue(PATIENT_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getGivenName(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n \t\tReferenceParam participantReference = new ReferenceParam();\n-\t\tparticipantReference.setChain(\"\");\n-\t\tparticipantReference.setValue(ENCOUNTER_UUID);\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_FAMILY);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFamilyName(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n+\t\tsubjectReference.setChain(Practitioner.SP_NAME);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocation() {\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n \t\tReferenceParam locationReference = new ReferenceParam();\n+\t\t\n+\t\tlocationReference.setValue(ADDRESS_CITY);\n \t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n-\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_CITY);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ADDRESS_CITY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n+\t\tReferenceParam locationReference = new ReferenceParam();\n+\t\t\n+\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocationReference.setChain(Location.SP_ADDRESS_STATE);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n \t}\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 6faefc89..af62759c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -92,65 +103,185 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n \t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n \t\tsubjectReference.setChain(Patient.SP_NAME);\n-\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME + \" \" + PATIENT_FAMILY_NAME);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", Matchers.equalTo(ENCOUNTER_UUID))));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(WRONG_PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, is(empty()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_IDENTIFIER);\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getGivenName(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFamilyName(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\t\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n \t\tReferenceParam participantReference = new ReferenceParam();\n-\t\tparticipantReference.setChain(\"\");\n-\t\tparticipantReference.setValue(ENCOUNTER_UUID);\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FULL_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_NAME);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFullName(),\n+\t\t    equalTo(PARTICIPANT_FULL_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocation() {\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n \t\tReferenceParam locationReference = new ReferenceParam();\n-\t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n \t\tlocationReference.setValue(ENCOUNTER_ADDRESS_CITY);\n+\t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n+\t\tReferenceParam locationReference = new ReferenceParam();\n+\t\t\n+\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocationReference.setChain(Location.SP_ADDRESS_STATE);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n \t}\n }\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af62759c..465ac967 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -284,4 +323,85 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(results, not(empty()));\n \t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifierAndGivenName() {\n+\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n+\t\tReferenceParam subjectIdentifier = new ReferenceParam();\n+\t\tReferenceParam subjectGiven = new ReferenceParam();\n+\t\t\n+\t\tsubjectIdentifier.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectIdentifier.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tsubjectGiven.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectGiven.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subjectIdentifier).add(subjectGiven));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantNameGivenAndFamily() {\n+\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n+\t\tReferenceParam participantName = new ReferenceParam();\n+\t\tReferenceParam participantGiven = new ReferenceParam();\n+\t\tReferenceParam participantFamily = new ReferenceParam();\n+\t\t\n+\t\tparticipantName.setValue(PARTICIPANT_FULL_NAME);\n+\t\tparticipantName.setChain(Practitioner.SP_NAME);\n+\t\t\n+\t\tparticipantGiven.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantGiven.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tparticipantFamily.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantFamily.setChain(Practitioner.SP_FAMILY);\n+\t\t\n+\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participantName));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFullName(),\n+\t\t    equalTo(PARTICIPANT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationStateCityAndCountry() {\n+\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n+\t\tReferenceParam locationState = new ReferenceParam();\n+\t\tReferenceParam locationCity = new ReferenceParam();\n+\t\tReferenceParam locationCountry = new ReferenceParam();\n+\t\t\n+\t\tlocationState.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocationState.setChain(Location.SP_ADDRESS_STATE);\n+\t\t\n+\t\tlocationCity.setValue(ENCOUNTER_ADDRESS_CITY);\n+\t\tlocationCity.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tlocationCountry.setValue(ENCOUNTER_ADDRESS_COUNTRY);\n+\t\tlocationCountry.setChain(Location.SP_ADDRESS_COUNTRY);\n+\t\t\n+\t\tlocationReference.addValue(new ReferenceOrListParam().add(locationCity).add(locationCountry).add(locationState));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_ADDRESS_COUNTRY));\n+\t}\n }\n", "next_change": {"commit": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 465ac967..7f3b9850 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -400,8 +489,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n \t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_ADDRESS_COUNTRY));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n+\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n \t}\n }\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 7f3b9850..734cf9f8 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -109,388 +56,7 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void shouldReturnNullWithUnknownEncounterUuid() {\n-\t\tEncounter encounter = dao.getEncounterByUuid(UNKNOWN_ENCOUNTER_UUID);\n+\t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FULL_NAME);\n-\t\tsubject.setChain(Patient.SP_NAME);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n-\t\t    equalTo(PATIENT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FAMILY_NAME);\n-\t\tsubject.setChain(Patient.SP_FAMILY);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n-\t\t    equalTo(PATIENT_FAMILY_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubject.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n-\t\t    equalTo(PATIENT_GIVEN_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectUuid() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_UUID);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getUuid(), equalTo(PATIENT_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(WRONG_PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, is(empty()));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n-\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n-\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getGivenName(),\n-\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFamilyName(),\n-\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantUuid() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_UUID);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getUuid(),\n-\t\t    equalTo(PARTICIPANT_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_CITY);\n-\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_STATE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCountry() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_COUNTRY);\n-\t\tlocation.setChain(Location.SP_ADDRESS_COUNTRY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationPostalCode() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_POSTAL_CODE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_POSTALCODE);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getPostalCode(), equalTo(ENCOUNTER_LOCATION_POSTAL_CODE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationUuid() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_UUID);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getUuid(), equalTo(ENCOUNTER_LOCATION_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifierAndGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subjectIdentifier = new ReferenceParam();\n-\t\tReferenceParam subjectGiven = new ReferenceParam();\n-\t\t\n-\t\tsubjectIdentifier.setValue(PATIENT_IDENTIFIER);\n-\t\tsubjectIdentifier.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectGiven.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubjectGiven.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subjectIdentifier).add(subjectGiven));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantNameGivenAndFamily() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participantName = new ReferenceParam();\n-\t\tReferenceParam participantGiven = new ReferenceParam();\n-\t\tReferenceParam participantFamily = new ReferenceParam();\n-\t\t\n-\t\tparticipantName.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipantName.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantGiven.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipantGiven.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantFamily.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipantFamily.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participantName));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationStateCityAndCountry() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam locationState = new ReferenceParam();\n-\t\tReferenceParam locationCity = new ReferenceParam();\n-\t\tReferenceParam locationCountry = new ReferenceParam();\n-\t\t\n-\t\tlocationState.setValue(ENCOUNTER_LOCATION_STATE);\n-\t\tlocationState.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationCity.setValue(ENCOUNTER_LOCATION_CITY);\n-\t\tlocationCity.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationCountry.setValue(ENCOUNTER_LOCATION_COUNTRY);\n-\t\tlocationCountry.setChain(Location.SP_ADDRESS_COUNTRY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(locationCity).add(locationCountry).add(locationState));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n-\t}\n }\n", "next_change": {"commit": "c38967adadebcf9596996a5e27236ddaf6bea433", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 734cf9f8..af199212 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -59,4 +73,29 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldOnlyReturnEncountersThatHaveAssociatedMedicationRequests() {\n+\t\tEncounter withNoDrugOrders = dao.get(ENCOUNTER_WITH_NO_DRUG_ORDERS);\n+\t\tassertThat(withNoDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is empty\", withNoDrugOrders.getOrders().isEmpty());\n+\t\t\n+\t\tEncounter withDrugOrders = dao.get(ENCOUNTER_WITH_DRUG_ORDERS);\n+\t\tassertThat(withDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is not empty\", !withDrugOrders.getOrders().isEmpty());\n+\t\tfor (Order order : withDrugOrders.getOrders()) {\n+\t\t\tassertThat(order.getClass(), equalTo(DrugOrder.class));\n+\t\t}\n+\t\t\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n+\t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n+\t}\n }\n", "next_change": {"commit": "0aad342e90225196459128b33da0426bef9b7b5c", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af199212..4ecc47f7 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -98,4 +99,18 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n \t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldNotReturnEncounterThatHasOnlyDiscontinueOrder() {\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n+\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t}\n }\n", "next_change": {"commit": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 4ecc47f7..9280cc2b 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -109,8 +119,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n \t\t    hasAndListParam);\n \t\t\n-\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n-\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n-\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t\tList<Integer> matchingResourceIds = dao.getSearchResultIds(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n+\t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n }\n", "next_change": {"commit": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 9280cc2b..d728f3aa 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -123,4 +147,14 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n \t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n+\t\n+\t@Test\n+\tpublic void delete_shouldVoidEncounterAndUnderlyingObservations() {\n+\t\tEncounter encounter = dao.delete(ENCOUNTER_UUID);\n+\t\tassertThat(encounter.getVoided(), equalTo(true));\n+\t\tassertThat(encounter.getDateVoided(), not(nullValue()));\n+\t\tassertThat(encounter.getVoidedBy(), equalTo(Context.getAuthenticatedUser()));\n+\t\tassertThat(encounter.getVoidReason(), equalTo(\"Voided via FHIR API\"));\n+\t\tassertThat(encounter.getObs().size(), equalTo(0)); // \"getObs\" does not return voided obs, so if all obs are voided, this count should be 0\n+\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "committedDate": "2020-04-02 21:36:51 +0300", "message": "FM2-135 Fix NPE when search by subject UUID (#133)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "d4e4e1278fd2bdd0603e05e20f793d93219014b7", "committedDate": "2022-05-20 15:04:26 -0400", "message": "Add additional display text to concept and medication resources (#403)"}, {"oid": "0aad342e90225196459128b33da0426bef9b7b5c", "committedDate": "2022-11-18 11:03:04 -0500", "message": "FM2-532: MedicationRequest endpoint should not return Discontinue Orders (#447)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "4af8727c8bc5f47f58060b0efc6d07a5b1e6e565", "committedDate": "2022-12-05 15:36:20 -0500", "message": "FM2-476: Add support for searching MedicationRequests based on status (#450)"}, {"oid": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "committedDate": "2022-12-06 14:36:05 -0500", "message": "FM2-535: BaseFHIRDao should set date voided/date retired and voided b\u2026 (#451)"}, {"oid": "dda1d10362cf03b61607a31101e3bf33f9439796", "committedDate": "2023-02-21 14:09:51 -0500", "message": "FM2-558: Create new named query \"encountersWithMedicationRequests\" in EncounterFhirResource Provider (#459)"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NTc1Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383875753", "body": "Take a look at the data defined for this class (in the XML file)", "bodyText": "Take a look at the data defined for this class (in the XML file)", "bodyHTML": "<p dir=\"auto\">Take a look at the data defined for this class (in the XML file)</p>", "author": "ibacher", "createdAt": "2020-02-25T13:26:03Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +91,66 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters.size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(encounters.stream().findFirst().isPresent(), is(true));\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient(), notNullValue());\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n+\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\t//TODO: THIS FAILS", "originalCommit": "5308c2c1d204d1a8dba16d670594e583910b460e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 6faefc89..0837e3a5 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -92,65 +98,169 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n \t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n \t\tsubjectReference.setChain(Patient.SP_NAME);\n-\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME + \" \" + PATIENT_FAMILY_NAME);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", Matchers.equalTo(ENCOUNTER_UUID))));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tparticipantReference.setValue(PATIENT_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getGivenName(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n \t\tReferenceParam participantReference = new ReferenceParam();\n-\t\tparticipantReference.setChain(\"\");\n-\t\tparticipantReference.setValue(ENCOUNTER_UUID);\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_FAMILY);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFamilyName(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n+\t\tsubjectReference.setChain(Practitioner.SP_NAME);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocation() {\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n \t\tReferenceParam locationReference = new ReferenceParam();\n+\t\t\n+\t\tlocationReference.setValue(ADDRESS_CITY);\n \t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n-\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_CITY);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ADDRESS_CITY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n+\t\tReferenceParam locationReference = new ReferenceParam();\n+\t\t\n+\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocationReference.setChain(Location.SP_ADDRESS_STATE);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n \t}\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 6faefc89..af62759c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -92,65 +103,185 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n \t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n \t\tsubjectReference.setChain(Patient.SP_NAME);\n-\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME + \" \" + PATIENT_FAMILY_NAME);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", Matchers.equalTo(ENCOUNTER_UUID))));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(WRONG_PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, is(empty()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_IDENTIFIER);\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getGivenName(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFamilyName(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\t\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n \t\tReferenceParam participantReference = new ReferenceParam();\n-\t\tparticipantReference.setChain(\"\");\n-\t\tparticipantReference.setValue(ENCOUNTER_UUID);\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FULL_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_NAME);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFullName(),\n+\t\t    equalTo(PARTICIPANT_FULL_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocation() {\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n \t\tReferenceParam locationReference = new ReferenceParam();\n-\t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n \t\tlocationReference.setValue(ENCOUNTER_ADDRESS_CITY);\n+\t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n+\t\tReferenceParam locationReference = new ReferenceParam();\n+\t\t\n+\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocationReference.setChain(Location.SP_ADDRESS_STATE);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n \t}\n }\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af62759c..465ac967 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -284,4 +323,85 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(results, not(empty()));\n \t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifierAndGivenName() {\n+\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n+\t\tReferenceParam subjectIdentifier = new ReferenceParam();\n+\t\tReferenceParam subjectGiven = new ReferenceParam();\n+\t\t\n+\t\tsubjectIdentifier.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectIdentifier.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tsubjectGiven.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectGiven.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subjectIdentifier).add(subjectGiven));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantNameGivenAndFamily() {\n+\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n+\t\tReferenceParam participantName = new ReferenceParam();\n+\t\tReferenceParam participantGiven = new ReferenceParam();\n+\t\tReferenceParam participantFamily = new ReferenceParam();\n+\t\t\n+\t\tparticipantName.setValue(PARTICIPANT_FULL_NAME);\n+\t\tparticipantName.setChain(Practitioner.SP_NAME);\n+\t\t\n+\t\tparticipantGiven.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantGiven.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tparticipantFamily.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantFamily.setChain(Practitioner.SP_FAMILY);\n+\t\t\n+\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participantName));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFullName(),\n+\t\t    equalTo(PARTICIPANT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationStateCityAndCountry() {\n+\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n+\t\tReferenceParam locationState = new ReferenceParam();\n+\t\tReferenceParam locationCity = new ReferenceParam();\n+\t\tReferenceParam locationCountry = new ReferenceParam();\n+\t\t\n+\t\tlocationState.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocationState.setChain(Location.SP_ADDRESS_STATE);\n+\t\t\n+\t\tlocationCity.setValue(ENCOUNTER_ADDRESS_CITY);\n+\t\tlocationCity.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tlocationCountry.setValue(ENCOUNTER_ADDRESS_COUNTRY);\n+\t\tlocationCountry.setChain(Location.SP_ADDRESS_COUNTRY);\n+\t\t\n+\t\tlocationReference.addValue(new ReferenceOrListParam().add(locationCity).add(locationCountry).add(locationState));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_ADDRESS_COUNTRY));\n+\t}\n }\n", "next_change": {"commit": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 465ac967..7f3b9850 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -400,8 +489,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n \t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_ADDRESS_COUNTRY));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n+\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n \t}\n }\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 7f3b9850..734cf9f8 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -109,388 +56,7 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void shouldReturnNullWithUnknownEncounterUuid() {\n-\t\tEncounter encounter = dao.getEncounterByUuid(UNKNOWN_ENCOUNTER_UUID);\n+\t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FULL_NAME);\n-\t\tsubject.setChain(Patient.SP_NAME);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n-\t\t    equalTo(PATIENT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FAMILY_NAME);\n-\t\tsubject.setChain(Patient.SP_FAMILY);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n-\t\t    equalTo(PATIENT_FAMILY_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubject.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n-\t\t    equalTo(PATIENT_GIVEN_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectUuid() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_UUID);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getUuid(), equalTo(PATIENT_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(WRONG_PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, is(empty()));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n-\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n-\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getGivenName(),\n-\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFamilyName(),\n-\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantUuid() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_UUID);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getUuid(),\n-\t\t    equalTo(PARTICIPANT_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_CITY);\n-\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_STATE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCountry() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_COUNTRY);\n-\t\tlocation.setChain(Location.SP_ADDRESS_COUNTRY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationPostalCode() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_POSTAL_CODE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_POSTALCODE);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getPostalCode(), equalTo(ENCOUNTER_LOCATION_POSTAL_CODE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationUuid() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_UUID);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getUuid(), equalTo(ENCOUNTER_LOCATION_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifierAndGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subjectIdentifier = new ReferenceParam();\n-\t\tReferenceParam subjectGiven = new ReferenceParam();\n-\t\t\n-\t\tsubjectIdentifier.setValue(PATIENT_IDENTIFIER);\n-\t\tsubjectIdentifier.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectGiven.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubjectGiven.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subjectIdentifier).add(subjectGiven));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantNameGivenAndFamily() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participantName = new ReferenceParam();\n-\t\tReferenceParam participantGiven = new ReferenceParam();\n-\t\tReferenceParam participantFamily = new ReferenceParam();\n-\t\t\n-\t\tparticipantName.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipantName.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantGiven.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipantGiven.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantFamily.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipantFamily.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participantName));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationStateCityAndCountry() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam locationState = new ReferenceParam();\n-\t\tReferenceParam locationCity = new ReferenceParam();\n-\t\tReferenceParam locationCountry = new ReferenceParam();\n-\t\t\n-\t\tlocationState.setValue(ENCOUNTER_LOCATION_STATE);\n-\t\tlocationState.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationCity.setValue(ENCOUNTER_LOCATION_CITY);\n-\t\tlocationCity.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationCountry.setValue(ENCOUNTER_LOCATION_COUNTRY);\n-\t\tlocationCountry.setChain(Location.SP_ADDRESS_COUNTRY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(locationCity).add(locationCountry).add(locationState));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n-\t}\n }\n", "next_change": {"commit": "c38967adadebcf9596996a5e27236ddaf6bea433", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 734cf9f8..af199212 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -59,4 +73,29 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldOnlyReturnEncountersThatHaveAssociatedMedicationRequests() {\n+\t\tEncounter withNoDrugOrders = dao.get(ENCOUNTER_WITH_NO_DRUG_ORDERS);\n+\t\tassertThat(withNoDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is empty\", withNoDrugOrders.getOrders().isEmpty());\n+\t\t\n+\t\tEncounter withDrugOrders = dao.get(ENCOUNTER_WITH_DRUG_ORDERS);\n+\t\tassertThat(withDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is not empty\", !withDrugOrders.getOrders().isEmpty());\n+\t\tfor (Order order : withDrugOrders.getOrders()) {\n+\t\t\tassertThat(order.getClass(), equalTo(DrugOrder.class));\n+\t\t}\n+\t\t\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n+\t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n+\t}\n }\n", "next_change": {"commit": "0aad342e90225196459128b33da0426bef9b7b5c", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af199212..4ecc47f7 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -98,4 +99,18 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n \t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldNotReturnEncounterThatHasOnlyDiscontinueOrder() {\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n+\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t}\n }\n", "next_change": {"commit": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 4ecc47f7..9280cc2b 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -109,8 +119,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n \t\t    hasAndListParam);\n \t\t\n-\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n-\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n-\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t\tList<Integer> matchingResourceIds = dao.getSearchResultIds(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n+\t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n }\n", "next_change": {"commit": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 9280cc2b..d728f3aa 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -123,4 +147,14 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n \t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n+\t\n+\t@Test\n+\tpublic void delete_shouldVoidEncounterAndUnderlyingObservations() {\n+\t\tEncounter encounter = dao.delete(ENCOUNTER_UUID);\n+\t\tassertThat(encounter.getVoided(), equalTo(true));\n+\t\tassertThat(encounter.getDateVoided(), not(nullValue()));\n+\t\tassertThat(encounter.getVoidedBy(), equalTo(Context.getAuthenticatedUser()));\n+\t\tassertThat(encounter.getVoidReason(), equalTo(\"Voided via FHIR API\"));\n+\t\tassertThat(encounter.getObs().size(), equalTo(0)); // \"getObs\" does not return voided obs, so if all obs are voided, this count should be 0\n+\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "committedDate": "2020-04-02 21:36:51 +0300", "message": "FM2-135 Fix NPE when search by subject UUID (#133)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "d4e4e1278fd2bdd0603e05e20f793d93219014b7", "committedDate": "2022-05-20 15:04:26 -0400", "message": "Add additional display text to concept and medication resources (#403)"}, {"oid": "0aad342e90225196459128b33da0426bef9b7b5c", "committedDate": "2022-11-18 11:03:04 -0500", "message": "FM2-532: MedicationRequest endpoint should not return Discontinue Orders (#447)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "4af8727c8bc5f47f58060b0efc6d07a5b1e6e565", "committedDate": "2022-12-05 15:36:20 -0500", "message": "FM2-476: Add support for searching MedicationRequests based on status (#450)"}, {"oid": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "committedDate": "2022-12-06 14:36:05 -0500", "message": "FM2-535: BaseFHIRDao should set date voided/date retired and voided b\u2026 (#451)"}, {"oid": "dda1d10362cf03b61607a31101e3bf33f9439796", "committedDate": "2023-02-21 14:09:51 -0500", "message": "FM2-558: Create new named query \"encountersWithMedicationRequests\" in EncounterFhirResource Provider (#459)"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NjI3OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383876278", "body": "We should also have tests by Given and Family", "bodyText": "We should also have tests by Given and Family", "bodyHTML": "<p dir=\"auto\">We should also have tests by Given and Family</p>", "author": "ibacher", "createdAt": "2020-02-25T13:27:03Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +91,66 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters.size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(encounters.stream().findFirst().isPresent(), is(true));\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient(), notNullValue());\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n+\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\t//TODO: THIS FAILS\n+\t\t//java.lang.AssertionError:\n+\t\t//Expected: not an empty collection\n+\t\t//     but: was <[]>\n+\t\t//Expected :not an empty collection\n+\t\t//Actual   :<[]>\n+\t\tassertThat(results, not(empty()));\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByWrongPatientIdentifier_shouldReturnEmptyCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(WRONG_PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters, is(empty()));\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\tsubjectReference.setChain(Patient.SP_NAME);\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME + \" \" + PATIENT_FAMILY_NAME);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", Matchers.equalTo(ENCOUNTER_UUID))));\n \t}\n \t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {", "originalCommit": "5308c2c1d204d1a8dba16d670594e583910b460e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 6faefc89..0837e3a5 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -92,65 +98,169 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n \t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n \t\tsubjectReference.setChain(Patient.SP_NAME);\n-\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME + \" \" + PATIENT_FAMILY_NAME);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", Matchers.equalTo(ENCOUNTER_UUID))));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tparticipantReference.setValue(PATIENT_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getGivenName(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n \t\tReferenceParam participantReference = new ReferenceParam();\n-\t\tparticipantReference.setChain(\"\");\n-\t\tparticipantReference.setValue(ENCOUNTER_UUID);\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_FAMILY);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFamilyName(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n+\t\tsubjectReference.setChain(Practitioner.SP_NAME);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocation() {\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n \t\tReferenceParam locationReference = new ReferenceParam();\n+\t\t\n+\t\tlocationReference.setValue(ADDRESS_CITY);\n \t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n-\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_CITY);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ADDRESS_CITY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n+\t\tReferenceParam locationReference = new ReferenceParam();\n+\t\t\n+\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocationReference.setChain(Location.SP_ADDRESS_STATE);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n \t}\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 6faefc89..af62759c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -92,65 +103,185 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n \t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n \t\tsubjectReference.setChain(Patient.SP_NAME);\n-\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME + \" \" + PATIENT_FAMILY_NAME);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", Matchers.equalTo(ENCOUNTER_UUID))));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(WRONG_PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, is(empty()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_IDENTIFIER);\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getGivenName(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFamilyName(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\t\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n \t\tReferenceParam participantReference = new ReferenceParam();\n-\t\tparticipantReference.setChain(\"\");\n-\t\tparticipantReference.setValue(ENCOUNTER_UUID);\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FULL_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_NAME);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFullName(),\n+\t\t    equalTo(PARTICIPANT_FULL_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocation() {\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n \t\tReferenceParam locationReference = new ReferenceParam();\n-\t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n \t\tlocationReference.setValue(ENCOUNTER_ADDRESS_CITY);\n+\t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n+\t\tReferenceParam locationReference = new ReferenceParam();\n+\t\t\n+\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocationReference.setChain(Location.SP_ADDRESS_STATE);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n \t}\n }\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af62759c..465ac967 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -284,4 +323,85 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(results, not(empty()));\n \t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifierAndGivenName() {\n+\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n+\t\tReferenceParam subjectIdentifier = new ReferenceParam();\n+\t\tReferenceParam subjectGiven = new ReferenceParam();\n+\t\t\n+\t\tsubjectIdentifier.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectIdentifier.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tsubjectGiven.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectGiven.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subjectIdentifier).add(subjectGiven));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantNameGivenAndFamily() {\n+\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n+\t\tReferenceParam participantName = new ReferenceParam();\n+\t\tReferenceParam participantGiven = new ReferenceParam();\n+\t\tReferenceParam participantFamily = new ReferenceParam();\n+\t\t\n+\t\tparticipantName.setValue(PARTICIPANT_FULL_NAME);\n+\t\tparticipantName.setChain(Practitioner.SP_NAME);\n+\t\t\n+\t\tparticipantGiven.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantGiven.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tparticipantFamily.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantFamily.setChain(Practitioner.SP_FAMILY);\n+\t\t\n+\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participantName));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFullName(),\n+\t\t    equalTo(PARTICIPANT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationStateCityAndCountry() {\n+\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n+\t\tReferenceParam locationState = new ReferenceParam();\n+\t\tReferenceParam locationCity = new ReferenceParam();\n+\t\tReferenceParam locationCountry = new ReferenceParam();\n+\t\t\n+\t\tlocationState.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocationState.setChain(Location.SP_ADDRESS_STATE);\n+\t\t\n+\t\tlocationCity.setValue(ENCOUNTER_ADDRESS_CITY);\n+\t\tlocationCity.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tlocationCountry.setValue(ENCOUNTER_ADDRESS_COUNTRY);\n+\t\tlocationCountry.setChain(Location.SP_ADDRESS_COUNTRY);\n+\t\t\n+\t\tlocationReference.addValue(new ReferenceOrListParam().add(locationCity).add(locationCountry).add(locationState));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_ADDRESS_COUNTRY));\n+\t}\n }\n", "next_change": {"commit": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 465ac967..7f3b9850 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -400,8 +489,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n \t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_ADDRESS_COUNTRY));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n+\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n \t}\n }\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 7f3b9850..734cf9f8 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -109,388 +56,7 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void shouldReturnNullWithUnknownEncounterUuid() {\n-\t\tEncounter encounter = dao.getEncounterByUuid(UNKNOWN_ENCOUNTER_UUID);\n+\t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FULL_NAME);\n-\t\tsubject.setChain(Patient.SP_NAME);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n-\t\t    equalTo(PATIENT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FAMILY_NAME);\n-\t\tsubject.setChain(Patient.SP_FAMILY);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n-\t\t    equalTo(PATIENT_FAMILY_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubject.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n-\t\t    equalTo(PATIENT_GIVEN_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectUuid() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_UUID);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getUuid(), equalTo(PATIENT_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(WRONG_PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, is(empty()));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n-\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n-\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getGivenName(),\n-\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFamilyName(),\n-\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantUuid() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_UUID);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getUuid(),\n-\t\t    equalTo(PARTICIPANT_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_CITY);\n-\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_STATE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCountry() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_COUNTRY);\n-\t\tlocation.setChain(Location.SP_ADDRESS_COUNTRY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationPostalCode() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_POSTAL_CODE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_POSTALCODE);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getPostalCode(), equalTo(ENCOUNTER_LOCATION_POSTAL_CODE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationUuid() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_UUID);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getUuid(), equalTo(ENCOUNTER_LOCATION_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifierAndGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subjectIdentifier = new ReferenceParam();\n-\t\tReferenceParam subjectGiven = new ReferenceParam();\n-\t\t\n-\t\tsubjectIdentifier.setValue(PATIENT_IDENTIFIER);\n-\t\tsubjectIdentifier.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectGiven.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubjectGiven.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subjectIdentifier).add(subjectGiven));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantNameGivenAndFamily() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participantName = new ReferenceParam();\n-\t\tReferenceParam participantGiven = new ReferenceParam();\n-\t\tReferenceParam participantFamily = new ReferenceParam();\n-\t\t\n-\t\tparticipantName.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipantName.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantGiven.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipantGiven.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantFamily.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipantFamily.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participantName));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationStateCityAndCountry() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam locationState = new ReferenceParam();\n-\t\tReferenceParam locationCity = new ReferenceParam();\n-\t\tReferenceParam locationCountry = new ReferenceParam();\n-\t\t\n-\t\tlocationState.setValue(ENCOUNTER_LOCATION_STATE);\n-\t\tlocationState.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationCity.setValue(ENCOUNTER_LOCATION_CITY);\n-\t\tlocationCity.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationCountry.setValue(ENCOUNTER_LOCATION_COUNTRY);\n-\t\tlocationCountry.setChain(Location.SP_ADDRESS_COUNTRY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(locationCity).add(locationCountry).add(locationState));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n-\t}\n }\n", "next_change": {"commit": "c38967adadebcf9596996a5e27236ddaf6bea433", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 734cf9f8..af199212 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -59,4 +73,29 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldOnlyReturnEncountersThatHaveAssociatedMedicationRequests() {\n+\t\tEncounter withNoDrugOrders = dao.get(ENCOUNTER_WITH_NO_DRUG_ORDERS);\n+\t\tassertThat(withNoDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is empty\", withNoDrugOrders.getOrders().isEmpty());\n+\t\t\n+\t\tEncounter withDrugOrders = dao.get(ENCOUNTER_WITH_DRUG_ORDERS);\n+\t\tassertThat(withDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is not empty\", !withDrugOrders.getOrders().isEmpty());\n+\t\tfor (Order order : withDrugOrders.getOrders()) {\n+\t\t\tassertThat(order.getClass(), equalTo(DrugOrder.class));\n+\t\t}\n+\t\t\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n+\t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n+\t}\n }\n", "next_change": {"commit": "0aad342e90225196459128b33da0426bef9b7b5c", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af199212..4ecc47f7 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -98,4 +99,18 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n \t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldNotReturnEncounterThatHasOnlyDiscontinueOrder() {\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n+\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t}\n }\n", "next_change": {"commit": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 4ecc47f7..9280cc2b 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -109,8 +119,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n \t\t    hasAndListParam);\n \t\t\n-\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n-\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n-\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t\tList<Integer> matchingResourceIds = dao.getSearchResultIds(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n+\t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n }\n", "next_change": {"commit": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 9280cc2b..d728f3aa 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -123,4 +147,14 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n \t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n+\t\n+\t@Test\n+\tpublic void delete_shouldVoidEncounterAndUnderlyingObservations() {\n+\t\tEncounter encounter = dao.delete(ENCOUNTER_UUID);\n+\t\tassertThat(encounter.getVoided(), equalTo(true));\n+\t\tassertThat(encounter.getDateVoided(), not(nullValue()));\n+\t\tassertThat(encounter.getVoidedBy(), equalTo(Context.getAuthenticatedUser()));\n+\t\tassertThat(encounter.getVoidReason(), equalTo(\"Voided via FHIR API\"));\n+\t\tassertThat(encounter.getObs().size(), equalTo(0)); // \"getObs\" does not return voided obs, so if all obs are voided, this count should be 0\n+\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "committedDate": "2020-04-02 21:36:51 +0300", "message": "FM2-135 Fix NPE when search by subject UUID (#133)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "d4e4e1278fd2bdd0603e05e20f793d93219014b7", "committedDate": "2022-05-20 15:04:26 -0400", "message": "Add additional display text to concept and medication resources (#403)"}, {"oid": "0aad342e90225196459128b33da0426bef9b7b5c", "committedDate": "2022-11-18 11:03:04 -0500", "message": "FM2-532: MedicationRequest endpoint should not return Discontinue Orders (#447)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "4af8727c8bc5f47f58060b0efc6d07a5b1e6e565", "committedDate": "2022-12-05 15:36:20 -0500", "message": "FM2-476: Add support for searching MedicationRequests based on status (#450)"}, {"oid": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "committedDate": "2022-12-06 14:36:05 -0500", "message": "FM2-535: BaseFHIRDao should set date voided/date retired and voided b\u2026 (#451)"}, {"oid": "dda1d10362cf03b61607a31101e3bf33f9439796", "committedDate": "2023-02-21 14:09:51 -0500", "message": "FM2-558: Create new named query \"encountersWithMedicationRequests\" in EncounterFhirResource Provider (#459)"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NjM0NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383876345", "body": "We should also have tests by Given and Family", "bodyText": "We should also have tests by Given and Family", "bodyHTML": "<p dir=\"auto\">We should also have tests by Given and Family</p>", "author": "ibacher", "createdAt": "2020-02-25T13:27:11Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +91,66 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters.size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(encounters.stream().findFirst().isPresent(), is(true));\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient(), notNullValue());\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n+\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\t//TODO: THIS FAILS\n+\t\t//java.lang.AssertionError:\n+\t\t//Expected: not an empty collection\n+\t\t//     but: was <[]>\n+\t\t//Expected :not an empty collection\n+\t\t//Actual   :<[]>\n+\t\tassertThat(results, not(empty()));\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByWrongPatientIdentifier_shouldReturnEmptyCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(WRONG_PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters, is(empty()));\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {", "originalCommit": "5308c2c1d204d1a8dba16d670594e583910b460e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 6faefc89..0837e3a5 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -92,65 +98,169 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n \t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n \t\tsubjectReference.setChain(Patient.SP_NAME);\n-\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME + \" \" + PATIENT_FAMILY_NAME);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", Matchers.equalTo(ENCOUNTER_UUID))));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tparticipantReference.setValue(PATIENT_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getGivenName(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n \t\tReferenceParam participantReference = new ReferenceParam();\n-\t\tparticipantReference.setChain(\"\");\n-\t\tparticipantReference.setValue(ENCOUNTER_UUID);\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_FAMILY);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFamilyName(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n+\t\tsubjectReference.setChain(Practitioner.SP_NAME);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocation() {\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n \t\tReferenceParam locationReference = new ReferenceParam();\n+\t\t\n+\t\tlocationReference.setValue(ADDRESS_CITY);\n \t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n-\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_CITY);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ADDRESS_CITY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n+\t\tReferenceParam locationReference = new ReferenceParam();\n+\t\t\n+\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocationReference.setChain(Location.SP_ADDRESS_STATE);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n \t}\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 6faefc89..af62759c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -92,65 +103,185 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n \t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n \t\tsubjectReference.setChain(Patient.SP_NAME);\n-\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME + \" \" + PATIENT_FAMILY_NAME);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", Matchers.equalTo(ENCOUNTER_UUID))));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(WRONG_PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, is(empty()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_IDENTIFIER);\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getGivenName(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFamilyName(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\t\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n \t\tReferenceParam participantReference = new ReferenceParam();\n-\t\tparticipantReference.setChain(\"\");\n-\t\tparticipantReference.setValue(ENCOUNTER_UUID);\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FULL_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_NAME);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFullName(),\n+\t\t    equalTo(PARTICIPANT_FULL_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocation() {\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n \t\tReferenceParam locationReference = new ReferenceParam();\n-\t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n \t\tlocationReference.setValue(ENCOUNTER_ADDRESS_CITY);\n+\t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n+\t\tReferenceParam locationReference = new ReferenceParam();\n+\t\t\n+\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocationReference.setChain(Location.SP_ADDRESS_STATE);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\t//TODO: THIS FAILS\n-\t\t//java.lang.AssertionError:\n-\t\t//Expected: not an empty collection\n-\t\t//     but: was <[]>\n-\t\t//Expected :not an empty collection\n-\t\t//Actual   :<[]>\n \t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n \t}\n }\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af62759c..465ac967 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -284,4 +323,85 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(results, not(empty()));\n \t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifierAndGivenName() {\n+\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n+\t\tReferenceParam subjectIdentifier = new ReferenceParam();\n+\t\tReferenceParam subjectGiven = new ReferenceParam();\n+\t\t\n+\t\tsubjectIdentifier.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectIdentifier.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tsubjectGiven.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectGiven.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subjectIdentifier).add(subjectGiven));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n+\t\t    equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantNameGivenAndFamily() {\n+\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n+\t\tReferenceParam participantName = new ReferenceParam();\n+\t\tReferenceParam participantGiven = new ReferenceParam();\n+\t\tReferenceParam participantFamily = new ReferenceParam();\n+\t\t\n+\t\tparticipantName.setValue(PARTICIPANT_FULL_NAME);\n+\t\tparticipantName.setChain(Practitioner.SP_NAME);\n+\t\t\n+\t\tparticipantGiven.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantGiven.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tparticipantFamily.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantFamily.setChain(Practitioner.SP_FAMILY);\n+\t\t\n+\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participantName));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFullName(),\n+\t\t    equalTo(PARTICIPANT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationStateCityAndCountry() {\n+\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n+\t\tReferenceParam locationState = new ReferenceParam();\n+\t\tReferenceParam locationCity = new ReferenceParam();\n+\t\tReferenceParam locationCountry = new ReferenceParam();\n+\t\t\n+\t\tlocationState.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocationState.setChain(Location.SP_ADDRESS_STATE);\n+\t\t\n+\t\tlocationCity.setValue(ENCOUNTER_ADDRESS_CITY);\n+\t\tlocationCity.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tlocationCountry.setValue(ENCOUNTER_ADDRESS_COUNTRY);\n+\t\tlocationCountry.setChain(Location.SP_ADDRESS_COUNTRY);\n+\t\t\n+\t\tlocationReference.addValue(new ReferenceOrListParam().add(locationCity).add(locationCountry).add(locationState));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_ADDRESS_COUNTRY));\n+\t}\n }\n", "next_change": {"commit": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 465ac967..7f3b9850 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -400,8 +489,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n \t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_ADDRESS_COUNTRY));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n+\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n \t}\n }\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 7f3b9850..734cf9f8 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -109,388 +56,7 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void shouldReturnNullWithUnknownEncounterUuid() {\n-\t\tEncounter encounter = dao.getEncounterByUuid(UNKNOWN_ENCOUNTER_UUID);\n+\t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FULL_NAME);\n-\t\tsubject.setChain(Patient.SP_NAME);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n-\t\t    equalTo(PATIENT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FAMILY_NAME);\n-\t\tsubject.setChain(Patient.SP_FAMILY);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n-\t\t    equalTo(PATIENT_FAMILY_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubject.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n-\t\t    equalTo(PATIENT_GIVEN_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectUuid() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_UUID);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getUuid(), equalTo(PATIENT_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(WRONG_PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, is(empty()));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n-\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n-\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getGivenName(),\n-\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFamilyName(),\n-\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantUuid() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_UUID);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getUuid(),\n-\t\t    equalTo(PARTICIPANT_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_CITY);\n-\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_STATE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCountry() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_COUNTRY);\n-\t\tlocation.setChain(Location.SP_ADDRESS_COUNTRY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationPostalCode() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_POSTAL_CODE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_POSTALCODE);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getPostalCode(), equalTo(ENCOUNTER_LOCATION_POSTAL_CODE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationUuid() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_UUID);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getUuid(), equalTo(ENCOUNTER_LOCATION_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifierAndGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subjectIdentifier = new ReferenceParam();\n-\t\tReferenceParam subjectGiven = new ReferenceParam();\n-\t\t\n-\t\tsubjectIdentifier.setValue(PATIENT_IDENTIFIER);\n-\t\tsubjectIdentifier.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectGiven.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubjectGiven.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subjectIdentifier).add(subjectGiven));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantNameGivenAndFamily() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participantName = new ReferenceParam();\n-\t\tReferenceParam participantGiven = new ReferenceParam();\n-\t\tReferenceParam participantFamily = new ReferenceParam();\n-\t\t\n-\t\tparticipantName.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipantName.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantGiven.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipantGiven.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantFamily.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipantFamily.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participantName));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationStateCityAndCountry() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam locationState = new ReferenceParam();\n-\t\tReferenceParam locationCity = new ReferenceParam();\n-\t\tReferenceParam locationCountry = new ReferenceParam();\n-\t\t\n-\t\tlocationState.setValue(ENCOUNTER_LOCATION_STATE);\n-\t\tlocationState.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationCity.setValue(ENCOUNTER_LOCATION_CITY);\n-\t\tlocationCity.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationCountry.setValue(ENCOUNTER_LOCATION_COUNTRY);\n-\t\tlocationCountry.setChain(Location.SP_ADDRESS_COUNTRY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(locationCity).add(locationCountry).add(locationState));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n-\t}\n }\n", "next_change": {"commit": "c38967adadebcf9596996a5e27236ddaf6bea433", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 734cf9f8..af199212 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -59,4 +73,29 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldOnlyReturnEncountersThatHaveAssociatedMedicationRequests() {\n+\t\tEncounter withNoDrugOrders = dao.get(ENCOUNTER_WITH_NO_DRUG_ORDERS);\n+\t\tassertThat(withNoDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is empty\", withNoDrugOrders.getOrders().isEmpty());\n+\t\t\n+\t\tEncounter withDrugOrders = dao.get(ENCOUNTER_WITH_DRUG_ORDERS);\n+\t\tassertThat(withDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is not empty\", !withDrugOrders.getOrders().isEmpty());\n+\t\tfor (Order order : withDrugOrders.getOrders()) {\n+\t\t\tassertThat(order.getClass(), equalTo(DrugOrder.class));\n+\t\t}\n+\t\t\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n+\t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n+\t}\n }\n", "next_change": {"commit": "0aad342e90225196459128b33da0426bef9b7b5c", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af199212..4ecc47f7 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -98,4 +99,18 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n \t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldNotReturnEncounterThatHasOnlyDiscontinueOrder() {\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n+\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t}\n }\n", "next_change": {"commit": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 4ecc47f7..9280cc2b 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -109,8 +119,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n \t\t    hasAndListParam);\n \t\t\n-\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n-\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n-\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t\tList<Integer> matchingResourceIds = dao.getSearchResultIds(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n+\t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n }\n", "next_change": {"commit": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 9280cc2b..d728f3aa 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -123,4 +147,14 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n \t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n+\t\n+\t@Test\n+\tpublic void delete_shouldVoidEncounterAndUnderlyingObservations() {\n+\t\tEncounter encounter = dao.delete(ENCOUNTER_UUID);\n+\t\tassertThat(encounter.getVoided(), equalTo(true));\n+\t\tassertThat(encounter.getDateVoided(), not(nullValue()));\n+\t\tassertThat(encounter.getVoidedBy(), equalTo(Context.getAuthenticatedUser()));\n+\t\tassertThat(encounter.getVoidReason(), equalTo(\"Voided via FHIR API\"));\n+\t\tassertThat(encounter.getObs().size(), equalTo(0)); // \"getObs\" does not return voided obs, so if all obs are voided, this count should be 0\n+\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "committedDate": "2020-04-02 21:36:51 +0300", "message": "FM2-135 Fix NPE when search by subject UUID (#133)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "d4e4e1278fd2bdd0603e05e20f793d93219014b7", "committedDate": "2022-05-20 15:04:26 -0400", "message": "Add additional display text to concept and medication resources (#403)"}, {"oid": "0aad342e90225196459128b33da0426bef9b7b5c", "committedDate": "2022-11-18 11:03:04 -0500", "message": "FM2-532: MedicationRequest endpoint should not return Discontinue Orders (#447)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "4af8727c8bc5f47f58060b0efc6d07a5b1e6e565", "committedDate": "2022-12-05 15:36:20 -0500", "message": "FM2-476: Add support for searching MedicationRequests based on status (#450)"}, {"oid": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "committedDate": "2022-12-06 14:36:05 -0500", "message": "FM2-535: BaseFHIRDao should set date voided/date retired and voided b\u2026 (#451)"}, {"oid": "dda1d10362cf03b61607a31101e3bf33f9439796", "committedDate": "2023-02-21 14:09:51 -0500", "message": "FM2-558: Create new named query \"encountersWithMedicationRequests\" in EncounterFhirResource Provider (#459)"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NjU3OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383876579", "body": "Could this be useful in other places?", "bodyText": "Could this be useful in other places?", "bodyHTML": "<p dir=\"auto\">Could this be useful in other places?</p>", "author": "ibacher", "createdAt": "2020-02-25T13:27:41Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -38,10 +52,119 @@ public Encounter getEncounterByUuid(String uuid) {\n \t}\n \t\n \t@Override\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic List<Encounter> findEncountersByPatientIdentifier(String patientIdentifier) {\n-\t\treturn (List<Encounter>) sessionFactory.getCurrentSession().createCriteria(Encounter.class)\n-\t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n-\t\t        .list();\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n+\t        ReferenceParam participant, ReferenceParam subject) {\n+\t\t\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n+\t\thandleLocationReference(criteria, location);\n+\t\thandleParticipantReference(criteria, participant);\n+\t\thandleSubjectReference(criteria, subject);\n+\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\t\n+\t\treturn criteria.list();\n \t}\n+\t\n+\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {", "originalCommit": "5308c2c1d204d1a8dba16d670594e583910b460e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex ee3703d6..31caf0d7 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -59,112 +48,9 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n \t\thandleLocationReference(criteria, location);\n \t\thandleParticipantReference(criteria, participant);\n-\t\thandleSubjectReference(criteria, subject);\n+\t\thandlePatientReference(criteria, subject);\n \t\t//TODO: handle ReferenceParam for participant, subject, location\n \t\t\n \t\treturn criteria.list();\n \t}\n-\t\n-\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n-\t\tif (locationReference != null) {\n-\t\t\tcriteria.createAlias(\"location\", \"l\");\n-\t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n-\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprivate void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n-\t\tif (participantReference != null) {\n-\t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n-\t\t\t\n-\t\t\tif (participantReference.getChain() != null) {\n-\t\t\t\tswitch (participantReference.getChain()) {\n-\t\t\t\t\tcase Practitioner.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprotected void handleSubjectReference(Criteria criteria, ReferenceParam subjectReference) {\n-\t\tif (subjectReference != null) {\n-\t\t\tcriteria.createAlias(\"patient\", \"p\");\n-\t\t\t\n-\t\t\tif (subjectReference.getChain() != null) {\n-\t\t\t\tswitch (subjectReference.getChain()) {\n-\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.identifiers\", \"pi\").add(ilike(\"pi.identifier\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(subjectReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"p.uuid\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n }\n", "next_change": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 31caf0d7..746b0bba 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -49,7 +49,6 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\thandleLocationReference(criteria, location);\n \t\thandleParticipantReference(criteria, participant);\n \t\thandlePatientReference(criteria, subject);\n-\t\t//TODO: handle ReferenceParam for participant, subject, location\n \t\t\n \t\treturn criteria.list();\n \t}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex ee3703d6..746b0bba 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -59,112 +48,8 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n \t\thandleLocationReference(criteria, location);\n \t\thandleParticipantReference(criteria, participant);\n-\t\thandleSubjectReference(criteria, subject);\n-\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\thandlePatientReference(criteria, subject);\n \t\t\n \t\treturn criteria.list();\n \t}\n-\t\n-\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n-\t\tif (locationReference != null) {\n-\t\t\tcriteria.createAlias(\"location\", \"l\");\n-\t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n-\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprivate void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n-\t\tif (participantReference != null) {\n-\t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n-\t\t\t\n-\t\t\tif (participantReference.getChain() != null) {\n-\t\t\t\tswitch (participantReference.getChain()) {\n-\t\t\t\t\tcase Practitioner.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprotected void handleSubjectReference(Criteria criteria, ReferenceParam subjectReference) {\n-\t\tif (subjectReference != null) {\n-\t\t\tcriteria.createAlias(\"patient\", \"p\");\n-\t\t\t\n-\t\t\tif (subjectReference.getChain() != null) {\n-\t\t\t\tswitch (subjectReference.getChain()) {\n-\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.identifiers\", \"pi\").add(ilike(\"pi.identifier\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(subjectReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"p.uuid\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n }\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 746b0bba..a00f5496 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -41,12 +41,13 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t}\n \t\n \t@Override\n-\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n-\t        ReferenceParam participant, ReferenceParam subject) {\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n+\t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n \t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\t\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n-\t\thandleLocationReference(criteria, location);\n+\t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n \t\thandleParticipantReference(criteria, participant);\n \t\thandlePatientReference(criteria, subject);\n \t\t\n", "next_change": {"commit": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex a00f5496..00fabb62 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -9,42 +9,28 @@\n  */\n package org.openmrs.module.fhir2.api.dao.impl;\n \n-import static org.hibernate.criterion.Restrictions.eq;\n-\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-\n import java.util.Collection;\n \n-import ca.uhn.fhir.rest.param.DateRangeParam;\n-import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n-import lombok.AccessLevel;\n-import lombok.Setter;\n import org.hibernate.Criteria;\n-import org.hibernate.SessionFactory;\n import org.openmrs.Encounter;\n import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n import org.springframework.stereotype.Component;\n \n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+\n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDao {\n+public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements FhirEncounterDao {\n \t\n-\t@Inject\n-\t@Named(\"sessionFactory\")\n-\tprivate SessionFactory sessionFactory;\n-\t\n-\t@Override\n-\tpublic Encounter getEncounterByUuid(String uuid) {\n-\t\treturn (Encounter) sessionFactory.getCurrentSession().createCriteria(Encounter.class).add(eq(\"uuid\", uuid))\n-\t\t        .uniqueResult();\n-\t}\n \t\n \t@Override\n \tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n \t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n \t\t\n-\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Encounter.class);\n \t\t\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n \t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 00fabb62..1f29d5d2 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -9,34 +9,42 @@\n  */\n package org.openmrs.module.fhir2.api.dao.impl;\n \n-import java.util.Collection;\n-\n-import org.hibernate.Criteria;\n-import org.openmrs.Encounter;\n-import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n-import org.springframework.stereotype.Component;\n-\n import ca.uhn.fhir.rest.param.DateRangeParam;\n import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n+import org.openmrs.Encounter;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements FhirEncounterDao {\n \t\n-\t\n \t@Override\n-\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n-\t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n-\t\t\n-\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Encounter.class);\n-\t\t\n-\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n-\t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n-\t\thandleParticipantReference(criteria, participant);\n-\t\thandlePatientReference(criteria, subject);\n-\t\t\n-\t\treturn criteria.list();\n+\tprotected void setupSearchParams(Criteria criteria, SearchParameterMap theParams) {\n+\t\ttheParams.getParameters().forEach(entry -> {\n+\t\t\tswitch (entry.getKey()) {\n+\t\t\t\tcase FhirConstants.DATE_RANGE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleDateRange(\"encounterDatetime\", (DateRangeParam) param.getParam())\n+\t\t\t\t\t        .ifPresent(criteria::add));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.LOCATION_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleLocationReference(\"l\", (ReferenceAndListParam) param.getParam())\n+\t\t\t\t\t        .ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l)));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.PARTICIPANT_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(\n+\t\t\t\t\t    param -> handleParticipantReference(criteria, (ReferenceAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.PATIENT_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue()\n+\t\t\t\t\t        .forEach(param -> handlePatientReference(criteria, (ReferenceAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t});\n \t}\n }\n", "next_change": {"commit": "327efb2e413db0965f3e36da0ff8071e949259bf", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 1f29d5d2..017dbc85 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -44,7 +54,26 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t\t\tentry.getValue()\n \t\t\t\t\t        .forEach(param -> handlePatientReference(criteria, (ReferenceAndListParam) param.getParam()));\n \t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.COMMON_SEARCH_HANDLER:\n+\t\t\t\t\thandleCommonSearchParameters(entry.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\tbreak;\n \t\t\t}\n \t\t});\n \t}\n+\t\n+\t@Override\n+\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n+\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n+\t\t\n+\t\tcriterionList.add(handleDateRange(\"dateVoided\", param));\n+\t\t\n+\t\tcriterionList.add(Optional.of(\n+\t\t    and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")), handleDateRange(\"dateChanged\", param))))));\n+\t\t\n+\t\tcriterionList.add(Optional.of(and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")),\n+\t\t    Optional.of(isNull(\"dateChanged\")), handleDateRange(\"dateCreated\", param))))));\n+\t\t\n+\t\treturn Optional.of(or(toCriteriaArray(criterionList)));\n+\t}\n+\t\n }\n", "next_change": {"commit": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 017dbc85..14ce691c 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -60,20 +50,4 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t}\n \t\t});\n \t}\n-\t\n-\t@Override\n-\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n-\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\n-\t\tcriterionList.add(handleDateRange(\"dateVoided\", param));\n-\t\t\n-\t\tcriterionList.add(Optional.of(\n-\t\t    and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")), handleDateRange(\"dateChanged\", param))))));\n-\t\t\n-\t\tcriterionList.add(Optional.of(and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")),\n-\t\t    Optional.of(isNull(\"dateChanged\")), handleDateRange(\"dateCreated\", param))))));\n-\t\t\n-\t\treturn Optional.of(or(toCriteriaArray(criterionList)));\n-\t}\n-\t\n }\n", "next_change": {"commit": "196103f3852702dea014ef0eb609c60c27d22c3b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 14ce691c..86125464 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -50,4 +80,9 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t}\n \t\t});\n \t}\n+\t\n+\tprivate int getMaxParameter(SearchParameterMap theParams) {\n+\t\treturn ((NumberParam) theParams.getParameters(FhirConstants.MAX_SEARCH_HANDLER).get(0).getParam()).getValue()\n+\t\t        .intValue();\n+\t}\n }\n", "next_change": {"commit": "c31798df0f784d23e375644ddd6901949a6dd55e", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 86125464..e8ea44c7 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -85,4 +95,14 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\treturn ((NumberParam) theParams.getParameters(FhirConstants.MAX_SEARCH_HANDLER).get(0).getParam()).getValue()\n \t\t        .intValue();\n \t}\n+\t\n+\t@Override\n+\tprotected String paramToProp(@Nonnull String param) {\n+\t\tswitch (param) {\n+\t\t\tcase SP_DATE:\n+\t\t\t\treturn \"encounterDatetime\";\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n+\t}\n }\n", "next_change": {"commit": "dda1d10362cf03b61607a31101e3bf33f9439796", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex e8ea44c7..b64894f6 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -105,4 +104,10 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t\treturn null;\n \t\t}\n \t}\n+\t\n+\t@Override\n+\tprotected Criterion generateNotCompletedOrderQuery(String path) {\n+\t\t// not implemented in Core until 2.2; see override in FhirEncounterDaoImpl_2_2\n+\t\treturn null;\n+\t}\n }\n", "next_change": {"commit": "7b1cff7dea92b2948ad2003766f9141524441e51", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex b64894f6..5a78fe3e 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -104,10 +103,4 @@ public class FhirEncounterDaoImpl extends BaseEncounterDao<Encounter> implements\n \t\t\t\treturn null;\n \t\t}\n \t}\n-\t\n-\t@Override\n-\tprotected Criterion generateNotCompletedOrderQuery(String path) {\n-\t\t// not implemented in Core until 2.2; see override in FhirEncounterDaoImpl_2_2\n-\t\treturn null;\n-\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "6996e2c63677474bda58d44eb112d4e87af54667", "committedDate": "2020-04-29 09:05:38 +0300", "message": "Add naming convention documentation and change classes to conform (#150)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "327efb2e413db0965f3e36da0ff8071e949259bf", "committedDate": "2020-07-07 08:44:53 +0300", "message": "FM2-169: Add search for _id and _lastUpdated (#241)"}, {"oid": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "committedDate": "2020-08-05 16:40:51 +0300", "message": "Integration tests (#267)"}, {"oid": "196103f3852702dea014ef0eb609c60c27d22c3b", "committedDate": "2021-08-02 14:11:06 -0400", "message": "FM2-400: Support for $lastn-encounters in R4 (#353)"}, {"oid": "ee5b1c31e77a36d6b7ae8d0d95d215f1283f6fa6", "committedDate": "2021-10-08 09:51:31 -0400", "message": "FM2-431: Add support to search encounters by EncounterType (#371)"}, {"oid": "c31798df0f784d23e375644ddd6901949a6dd55e", "committedDate": "2022-02-14 09:14:38 -0500", "message": "FM2-408: Encounters should be sortable by date (#378)"}, {"oid": "290688fc9189b0fa108c77f09f46c2560292e84d", "committedDate": "2022-03-24 14:21:08 -0400", "message": "FM2-396: Allow Searching for Visits (#384)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "60f419bb1701fe6dd25ac116d5303f076706c400", "committedDate": "2023-02-09 15:24:00 -0500", "message": "(minor) Improvements to Lastn-related classes"}, {"oid": "dda1d10362cf03b61607a31101e3bf33f9439796", "committedDate": "2023-02-21 14:09:51 -0500", "message": "FM2-558: Create new named query \"encountersWithMedicationRequests\" in EncounterFhirResource Provider (#459)"}, {"oid": "7b1cff7dea92b2948ad2003766f9141524441e51", "committedDate": "2023-05-03 18:41:40 -0400", "message": "FM2-565: Add support for searching on FulfillerStatus (#466)"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NjY2OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383876669", "body": "I think you've already done this!", "bodyText": "I think you've already done this!", "bodyHTML": "<p dir=\"auto\">I think you've already done this!</p>", "author": "ibacher", "createdAt": "2020-02-25T13:27:50Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -38,10 +52,119 @@ public Encounter getEncounterByUuid(String uuid) {\n \t}\n \t\n \t@Override\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic List<Encounter> findEncountersByPatientIdentifier(String patientIdentifier) {\n-\t\treturn (List<Encounter>) sessionFactory.getCurrentSession().createCriteria(Encounter.class)\n-\t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n-\t\t        .list();\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n+\t        ReferenceParam participant, ReferenceParam subject) {\n+\t\t\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n+\t\thandleLocationReference(criteria, location);\n+\t\thandleParticipantReference(criteria, participant);\n+\t\thandleSubjectReference(criteria, subject);\n+\t\t//TODO: handle ReferenceParam for participant, subject, location", "originalCommit": "5308c2c1d204d1a8dba16d670594e583910b460e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNTU2MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384535561", "bodyText": "Remove this comment", "author": "ibacher", "createdAt": "2020-02-26T14:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NjY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex ee3703d6..31caf0d7 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -59,112 +48,9 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n \t\thandleLocationReference(criteria, location);\n \t\thandleParticipantReference(criteria, participant);\n-\t\thandleSubjectReference(criteria, subject);\n+\t\thandlePatientReference(criteria, subject);\n \t\t//TODO: handle ReferenceParam for participant, subject, location\n \t\t\n \t\treturn criteria.list();\n \t}\n-\t\n-\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n-\t\tif (locationReference != null) {\n-\t\t\tcriteria.createAlias(\"location\", \"l\");\n-\t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n-\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprivate void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n-\t\tif (participantReference != null) {\n-\t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n-\t\t\t\n-\t\t\tif (participantReference.getChain() != null) {\n-\t\t\t\tswitch (participantReference.getChain()) {\n-\t\t\t\t\tcase Practitioner.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprotected void handleSubjectReference(Criteria criteria, ReferenceParam subjectReference) {\n-\t\tif (subjectReference != null) {\n-\t\t\tcriteria.createAlias(\"patient\", \"p\");\n-\t\t\t\n-\t\t\tif (subjectReference.getChain() != null) {\n-\t\t\t\tswitch (subjectReference.getChain()) {\n-\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.identifiers\", \"pi\").add(ilike(\"pi.identifier\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(subjectReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"p.uuid\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n }\n", "next_change": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 31caf0d7..746b0bba 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -49,7 +49,6 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\thandleLocationReference(criteria, location);\n \t\thandleParticipantReference(criteria, participant);\n \t\thandlePatientReference(criteria, subject);\n-\t\t//TODO: handle ReferenceParam for participant, subject, location\n \t\t\n \t\treturn criteria.list();\n \t}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex ee3703d6..746b0bba 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -59,112 +48,8 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n \t\thandleLocationReference(criteria, location);\n \t\thandleParticipantReference(criteria, participant);\n-\t\thandleSubjectReference(criteria, subject);\n-\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\thandlePatientReference(criteria, subject);\n \t\t\n \t\treturn criteria.list();\n \t}\n-\t\n-\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n-\t\tif (locationReference != null) {\n-\t\t\tcriteria.createAlias(\"location\", \"l\");\n-\t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n-\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprivate void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n-\t\tif (participantReference != null) {\n-\t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n-\t\t\t\n-\t\t\tif (participantReference.getChain() != null) {\n-\t\t\t\tswitch (participantReference.getChain()) {\n-\t\t\t\t\tcase Practitioner.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\tprotected void handleSubjectReference(Criteria criteria, ReferenceParam subjectReference) {\n-\t\tif (subjectReference != null) {\n-\t\t\tcriteria.createAlias(\"patient\", \"p\");\n-\t\t\t\n-\t\t\tif (subjectReference.getChain() != null) {\n-\t\t\t\tswitch (subjectReference.getChain()) {\n-\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.identifiers\", \"pi\").add(ilike(\"pi.identifier\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", subjectReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(subjectReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"p.uuid\", subjectReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n }\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 746b0bba..a00f5496 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -41,12 +41,13 @@ public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDa\n \t}\n \t\n \t@Override\n-\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n-\t        ReferenceParam participant, ReferenceParam subject) {\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n+\t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n \t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\t\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n-\t\thandleLocationReference(criteria, location);\n+\t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n \t\thandleParticipantReference(criteria, participant);\n \t\thandlePatientReference(criteria, subject);\n \t\t\n", "next_change": {"commit": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex a00f5496..00fabb62 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -9,42 +9,28 @@\n  */\n package org.openmrs.module.fhir2.api.dao.impl;\n \n-import static org.hibernate.criterion.Restrictions.eq;\n-\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-\n import java.util.Collection;\n \n-import ca.uhn.fhir.rest.param.DateRangeParam;\n-import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n-import lombok.AccessLevel;\n-import lombok.Setter;\n import org.hibernate.Criteria;\n-import org.hibernate.SessionFactory;\n import org.openmrs.Encounter;\n import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n import org.springframework.stereotype.Component;\n \n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+\n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirEncounterDaoImpl extends BaseDaoImpl implements FhirEncounterDao {\n+public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements FhirEncounterDao {\n \t\n-\t@Inject\n-\t@Named(\"sessionFactory\")\n-\tprivate SessionFactory sessionFactory;\n-\t\n-\t@Override\n-\tpublic Encounter getEncounterByUuid(String uuid) {\n-\t\treturn (Encounter) sessionFactory.getCurrentSession().createCriteria(Encounter.class).add(eq(\"uuid\", uuid))\n-\t\t        .uniqueResult();\n-\t}\n \t\n \t@Override\n \tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n \t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n \t\t\n-\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Encounter.class);\n \t\t\n \t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n \t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 00fabb62..1f29d5d2 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -9,34 +9,42 @@\n  */\n package org.openmrs.module.fhir2.api.dao.impl;\n \n-import java.util.Collection;\n-\n-import org.hibernate.Criteria;\n-import org.openmrs.Encounter;\n-import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n-import org.springframework.stereotype.Component;\n-\n import ca.uhn.fhir.rest.param.DateRangeParam;\n import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n+import org.openmrs.Encounter;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.dao.FhirEncounterDao;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements FhirEncounterDao {\n \t\n-\t\n \t@Override\n-\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n-\t        ReferenceAndListParam participant, ReferenceAndListParam subject) {\n-\t\t\n-\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Encounter.class);\n-\t\t\n-\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n-\t\thandleLocationReference(\"l\", location).ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l));\n-\t\thandleParticipantReference(criteria, participant);\n-\t\thandlePatientReference(criteria, subject);\n-\t\t\n-\t\treturn criteria.list();\n+\tprotected void setupSearchParams(Criteria criteria, SearchParameterMap theParams) {\n+\t\ttheParams.getParameters().forEach(entry -> {\n+\t\t\tswitch (entry.getKey()) {\n+\t\t\t\tcase FhirConstants.DATE_RANGE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleDateRange(\"encounterDatetime\", (DateRangeParam) param.getParam())\n+\t\t\t\t\t        .ifPresent(criteria::add));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.LOCATION_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleLocationReference(\"l\", (ReferenceAndListParam) param.getParam())\n+\t\t\t\t\t        .ifPresent(l -> criteria.createAlias(\"location\", \"l\").add(l)));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.PARTICIPANT_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(\n+\t\t\t\t\t    param -> handleParticipantReference(criteria, (ReferenceAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.PATIENT_REFERENCE_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue()\n+\t\t\t\t\t        .forEach(param -> handlePatientReference(criteria, (ReferenceAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t});\n \t}\n }\n", "next_change": {"commit": "327efb2e413db0965f3e36da0ff8071e949259bf", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 1f29d5d2..017dbc85 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -44,7 +54,26 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t\t\tentry.getValue()\n \t\t\t\t\t        .forEach(param -> handlePatientReference(criteria, (ReferenceAndListParam) param.getParam()));\n \t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.COMMON_SEARCH_HANDLER:\n+\t\t\t\t\thandleCommonSearchParameters(entry.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\tbreak;\n \t\t\t}\n \t\t});\n \t}\n+\t\n+\t@Override\n+\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n+\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n+\t\t\n+\t\tcriterionList.add(handleDateRange(\"dateVoided\", param));\n+\t\t\n+\t\tcriterionList.add(Optional.of(\n+\t\t    and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")), handleDateRange(\"dateChanged\", param))))));\n+\t\t\n+\t\tcriterionList.add(Optional.of(and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")),\n+\t\t    Optional.of(isNull(\"dateChanged\")), handleDateRange(\"dateCreated\", param))))));\n+\t\t\n+\t\treturn Optional.of(or(toCriteriaArray(criterionList)));\n+\t}\n+\t\n }\n", "next_change": {"commit": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 017dbc85..14ce691c 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -60,20 +50,4 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t}\n \t\t});\n \t}\n-\t\n-\t@Override\n-\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n-\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\n-\t\tcriterionList.add(handleDateRange(\"dateVoided\", param));\n-\t\t\n-\t\tcriterionList.add(Optional.of(\n-\t\t    and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")), handleDateRange(\"dateChanged\", param))))));\n-\t\t\n-\t\tcriterionList.add(Optional.of(and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")),\n-\t\t    Optional.of(isNull(\"dateChanged\")), handleDateRange(\"dateCreated\", param))))));\n-\t\t\n-\t\treturn Optional.of(or(toCriteriaArray(criterionList)));\n-\t}\n-\t\n }\n", "next_change": {"commit": "196103f3852702dea014ef0eb609c60c27d22c3b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 14ce691c..86125464 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -50,4 +80,9 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t}\n \t\t});\n \t}\n+\t\n+\tprivate int getMaxParameter(SearchParameterMap theParams) {\n+\t\treturn ((NumberParam) theParams.getParameters(FhirConstants.MAX_SEARCH_HANDLER).get(0).getParam()).getValue()\n+\t\t        .intValue();\n+\t}\n }\n", "next_change": {"commit": "c31798df0f784d23e375644ddd6901949a6dd55e", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex 86125464..e8ea44c7 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -85,4 +95,14 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\treturn ((NumberParam) theParams.getParameters(FhirConstants.MAX_SEARCH_HANDLER).get(0).getParam()).getValue()\n \t\t        .intValue();\n \t}\n+\t\n+\t@Override\n+\tprotected String paramToProp(@Nonnull String param) {\n+\t\tswitch (param) {\n+\t\t\tcase SP_DATE:\n+\t\t\t\treturn \"encounterDatetime\";\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n+\t}\n }\n", "next_change": {"commit": "dda1d10362cf03b61607a31101e3bf33f9439796", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex e8ea44c7..b64894f6 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -105,4 +104,10 @@ public class FhirEncounterDaoImpl extends BaseFhirDao<Encounter> implements Fhir\n \t\t\t\treturn null;\n \t\t}\n \t}\n+\t\n+\t@Override\n+\tprotected Criterion generateNotCompletedOrderQuery(String path) {\n+\t\t// not implemented in Core until 2.2; see override in FhirEncounterDaoImpl_2_2\n+\t\treturn null;\n+\t}\n }\n", "next_change": {"commit": "7b1cff7dea92b2948ad2003766f9141524441e51", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\nindex b64894f6..5a78fe3e 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java\n", "chunk": "@@ -104,10 +103,4 @@ public class FhirEncounterDaoImpl extends BaseEncounterDao<Encounter> implements\n \t\t\t\treturn null;\n \t\t}\n \t}\n-\t\n-\t@Override\n-\tprotected Criterion generateNotCompletedOrderQuery(String path) {\n-\t\t// not implemented in Core until 2.2; see override in FhirEncounterDaoImpl_2_2\n-\t\treturn null;\n-\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "6996e2c63677474bda58d44eb112d4e87af54667", "committedDate": "2020-04-29 09:05:38 +0300", "message": "Add naming convention documentation and change classes to conform (#150)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "327efb2e413db0965f3e36da0ff8071e949259bf", "committedDate": "2020-07-07 08:44:53 +0300", "message": "FM2-169: Add search for _id and _lastUpdated (#241)"}, {"oid": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "committedDate": "2020-08-05 16:40:51 +0300", "message": "Integration tests (#267)"}, {"oid": "196103f3852702dea014ef0eb609c60c27d22c3b", "committedDate": "2021-08-02 14:11:06 -0400", "message": "FM2-400: Support for $lastn-encounters in R4 (#353)"}, {"oid": "ee5b1c31e77a36d6b7ae8d0d95d215f1283f6fa6", "committedDate": "2021-10-08 09:51:31 -0400", "message": "FM2-431: Add support to search encounters by EncounterType (#371)"}, {"oid": "c31798df0f784d23e375644ddd6901949a6dd55e", "committedDate": "2022-02-14 09:14:38 -0500", "message": "FM2-408: Encounters should be sortable by date (#378)"}, {"oid": "290688fc9189b0fa108c77f09f46c2560292e84d", "committedDate": "2022-03-24 14:21:08 -0400", "message": "FM2-396: Allow Searching for Visits (#384)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "60f419bb1701fe6dd25ac116d5303f076706c400", "committedDate": "2023-02-09 15:24:00 -0500", "message": "(minor) Improvements to Lastn-related classes"}, {"oid": "dda1d10362cf03b61607a31101e3bf33f9439796", "committedDate": "2023-02-21 14:09:51 -0500", "message": "FM2-558: Create new named query \"encountersWithMedicationRequests\" in EncounterFhirResource Provider (#459)"}, {"oid": "7b1cff7dea92b2948ad2003766f9141524441e51", "committedDate": "2023-05-03 18:41:40 -0400", "message": "FM2-565: Add support for searching on FulfillerStatus (#466)"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NzUwMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383877500", "body": "What does this method actually test?", "bodyText": "What does this method actually test?", "bodyHTML": "<p dir=\"auto\">What does this method actually test?</p>", "author": "ibacher", "createdAt": "2020-02-25T13:29:28Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java", "diffHunk": "@@ -70,16 +75,21 @@ public void shouldGetEncounterByUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\twhen(dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(openMrsEncounter));\n-\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\tpublic void searchForEncounter_shouldSearchForEncounterBySubjectName() {", "originalCommit": "5308c2c1d204d1a8dba16d670594e583910b460e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 4954002d..5531af36 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -75,21 +104,84 @@ public class FhirEncounterServiceImplTest {\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounter_shouldSearchForEncounterBySubjectName() {\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByDate() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tDateRangeParam dateRangeParam = new DateRangeParam(new DateParam(ENCOUNTER_DATETIME));\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(argThat(is(dateRangeParam)), any(), any(), any())).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\t\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(dateRangeParam, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getId(), equalTo(ENCOUNTER_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam location = new ReferenceParam();\n+\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(any(), argThat(is(location)), any(), any())).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\t\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, location, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByParticipant() {\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n-\t\tEncounter encounter = new Encounter();\n-\t\tencounter.setUuid(ENCOUNTER_UUID);\n-\t\tencounters.add(encounter);\n+\t\tReferenceParam participant = new ReferenceParam();\n+\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n+\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n \t\t\n-\t\torg.hl7.fhir.r4.model.Encounter enc = new org.hl7.fhir.r4.model.Encounter();\n-\t\tenc.setId(ENCOUNTER_UUID);\n-\t\twhen(dao.searchForEncounters(any(), any(), any(), any())).thenReturn(encounters);\n-\t\twhen(encounterTranslator.toFhirResource(encounter)).thenReturn(enc);\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(any(), any(), argThat(is(participant)), any())).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\t\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, participant,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterBySubject() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam subject = new ReferenceParam();\n+\t\tsubject.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubject.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(any(), any(), any(), argThat(is(subject)))).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, null, null);\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, null,\n+\t\t    subject);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"id\", Matchers.equalTo(ENCOUNTER_UUID))));\n+\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n \t}\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 4954002d..f6bb0a4a 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -75,21 +88,86 @@ public class FhirEncounterServiceImplTest {\n \t}\n \t\n \t@Test\n-\tpublic void searchForEncounter_shouldSearchForEncounterBySubjectName() {\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByDate() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tDateRangeParam dateRangeParam = new DateRangeParam(new DateParam(ENCOUNTER_DATETIME));\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(argThat(is(dateRangeParam)), any(), any(), any())).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\t\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(dateRangeParam, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getId(), equalTo(ENCOUNTER_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n+\t\tReferenceParam location = new ReferenceParam();\n+\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tencounters.add(openMrsEncounter);\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\t\n+\t\twhen(dao.searchForEncounters(any(), argThat(is(location)), any(), any())).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\t\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, location, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByParticipant() {\n+\t\tReferenceParam participant = new ReferenceParam();\n+\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n+\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\t\n+\t\twhen(dao.searchForEncounters(any(), any(), argThat(is(participant)), any())).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\t\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, participant,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterBySubject() {\n+\t\tReferenceParam subject = new ReferenceParam();\n+\t\tsubject.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubject.setChain(Patient.SP_FAMILY);\n+\t\t\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n-\t\tEncounter encounter = new Encounter();\n-\t\tencounter.setUuid(ENCOUNTER_UUID);\n-\t\tencounters.add(encounter);\n+\t\tencounters.add(openMrsEncounter);\n \t\t\n-\t\torg.hl7.fhir.r4.model.Encounter enc = new org.hl7.fhir.r4.model.Encounter();\n-\t\tenc.setId(ENCOUNTER_UUID);\n-\t\twhen(dao.searchForEncounters(any(), any(), any(), any())).thenReturn(encounters);\n-\t\twhen(encounterTranslator.toFhirResource(encounter)).thenReturn(enc);\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\t\n+\t\twhen(dao.searchForEncounters(any(), any(), any(), argThat(is(subject)))).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, null, null);\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, null,\n+\t\t    subject);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"id\", Matchers.equalTo(ENCOUNTER_UUID))));\n+\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n \t}\n }\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex f6bb0a4a..50a94097 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -94,80 +114,107 @@ public class FhirEncounterServiceImplTest {\n \t\t\n \t\tencounters.add(openMrsEncounter);\n \t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.DATE_RANGE_SEARCH_HANDLER,\n+\t\t    dateRangeParam);\n+\t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n-\t\twhen(dao.searchForEncounters(argThat(is(dateRangeParam)), any(), any(), any())).thenReturn(encounters);\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(dateRangeParam, null,\n-\t\t    null, null);\n+\t\tIBundleProvider results = encounterService.searchForEncounters(dateRangeParam, null, null, null);\n \t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getId(), equalTo(ENCOUNTER_UUID));\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(((org.hl7.fhir.r4.model.Encounter) resultList.iterator().next()).getId(), equalTo(ENCOUNTER_UUID));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n+\t\tReferenceAndListParam location = new ReferenceAndListParam();\n+\t\t\n+\t\tlocation.addValue(new ReferenceOrListParam()\n+\t\t        .add(new ReferenceParam().setValue(ENCOUNTER_ADDRESS_STATE).setChain(Location.SP_ADDRESS_STATE)));\n \t\t\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\t\n-\t\twhen(dao.searchForEncounters(any(), argThat(is(location)), any(), any())).thenReturn(encounters);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.LOCATION_REFERENCE_SEARCH_HANDLER,\n+\t\t    location);\n+\t\t\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, location, null,\n-\t\t    null);\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, location, null, null);\n \t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByParticipant() {\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n-\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tReferenceAndListParam participant = new ReferenceAndListParam();\n+\t\t\n+\t\tparticipant.addValue(new ReferenceOrListParam()\n+\t\t        .add(new ReferenceParam().setValue(PARTICIPANT_IDENTIFIER).setChain(Practitioner.SP_IDENTIFIER)));\n \t\t\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\t\n-\t\twhen(dao.searchForEncounters(any(), any(), argThat(is(participant)), any())).thenReturn(encounters);\n+\t\tSearchParameterMap theParams = new SearchParameterMap()\n+\t\t        .addParameter(FhirConstants.PARTICIPANT_REFERENCE_SEARCH_HANDLER, participant);\n+\t\t\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n+\t\t\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, participant, null);\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, participant,\n-\t\t    null);\n+\t\tList<IBaseResource> resultList = get(results);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterBySubject() {\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\tsubject.setValue(PATIENT_FAMILY_NAME);\n-\t\tsubject.setChain(Patient.SP_FAMILY);\n+\t\tReferenceAndListParam subject = new ReferenceAndListParam();\n+\t\t\n+\t\tsubject.addValue(\n+\t\t    new ReferenceOrListParam().add(new ReferenceParam().setValue(PATIENT_FAMILY_NAME).setChain(Patient.SP_FAMILY)));\n \t\t\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\t\n-\t\twhen(dao.searchForEncounters(any(), any(), any(), argThat(is(subject)))).thenReturn(encounters);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.PATIENT_REFERENCE_SEARCH_HANDLER,\n+\t\t    subject);\n+\t\t\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, null,\n-\t\t    subject);\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, null, subject);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n }\n", "next_change": {"commit": "327efb2e413db0965f3e36da0ff8071e949259bf", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 50a94097..ebf5c54b 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -217,4 +226,49 @@ public class FhirEncounterServiceImplTest {\n \t\tassertThat(resultList, not(empty()));\n \t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByUUID() {\n+\t\tTokenAndListParam uuid = new TokenAndListParam().addAnd(new TokenParam(ENCOUNTER_UUID));\n+\t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.COMMON_SEARCH_HANDLER,\n+\t\t    FhirConstants.ID_PROPERTY, uuid);\n+\t\t\n+\t\twhen(dao.search(any(), any(), anyInt(), anyInt())).thenReturn(Collections.singletonList(openMrsEncounter));\n+\t\twhen(dao.getResultUuids(any())).thenReturn(Collections.singletonList(ENCOUNTER_UUID));\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n+\t\t\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, null, null, uuid, null);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLastUpdated() {\n+\t\tDateRangeParam lastUpdated = new DateRangeParam().setUpperBound(LAST_UPDATED_DATE).setLowerBound(LAST_UPDATED_DATE);\n+\t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.COMMON_SEARCH_HANDLER,\n+\t\t    FhirConstants.LAST_UPDATED_PROPERTY, lastUpdated);\n+\t\t\n+\t\twhen(dao.search(any(), any(), anyInt(), anyInt())).thenReturn(Collections.singletonList(openMrsEncounter));\n+\t\twhen(dao.getResultUuids(any())).thenReturn(Collections.singletonList(ENCOUNTER_UUID));\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n+\t\t\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, null, null, null, lastUpdated);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n }\n", "next_change": {"commit": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex ebf5c54b..84050b40 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -268,7 +272,7 @@ public class FhirEncounterServiceImplTest {\n \t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(resultList, not(empty()));\n-\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(resultList, hasSize(greaterThanOrEqualTo(1)));\n \t}\n \t\n }\n", "next_change": {"commit": "086a7d29b668ef06f5ab3244d1efafe447029b00", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 84050b40..7af61be5 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -275,4 +556,50 @@ public class FhirEncounterServiceImplTest {\n \t\tassertThat(resultList, hasSize(greaterThanOrEqualTo(1)));\n \t}\n \t\n+\t@Test\n+\tpublic void getEncounterEverything_shouldReturnAllInformationAboutSpecifiedEncounter() {\n+\t\tTokenParam encounterId = new TokenParam().setValue(ENCOUNTER_UUID);\n+\t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.EVERYTHING_SEARCH_HANDLER, \"\")\n+\t\t        .addParameter(FhirConstants.COMMON_SEARCH_HANDLER, FhirConstants.ID_PROPERTY, encounterId);\n+\t\t\n+\t\tpopulateIncludeForEverythingOperationParams(theParams);\n+\t\tpopulateReverseIncludeForEverythingOperationParams(theParams);\n+\t\t\n+\t\twhen(dao.getSearchResults(any(), any())).thenReturn(Collections.singletonList(openMrsEncounter));\n+\t\twhen(dao.getSearchResultUuids(any())).thenReturn(Collections.singletonList(ENCOUNTER_UUID));\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any(), any())).thenReturn(\n+\t\t    new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator, globalPropertyService, searchQueryInclude));\n+\t\t\n+\t\tIBundleProvider results = encounterService.getEncounterEverything(encounterId);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t\t\n+\t}\n+\t\n+\tprivate void populateReverseIncludeForEverythingOperationParams(SearchParameterMap theParams) {\n+\t\tHashSet<Include> revIncludes = new HashSet<>();\n+\t\t\n+\t\trevIncludes.add(new Include(FhirConstants.OBSERVATION + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\trevIncludes.add(new Include(FhirConstants.DIAGNOSTIC_REPORT + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\trevIncludes.add(new Include(FhirConstants.MEDICATION_REQUEST + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\trevIncludes.add(new Include(FhirConstants.SERVICE_REQUEST + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\t\n+\t\ttheParams.addParameter(FhirConstants.REVERSE_INCLUDE_SEARCH_HANDLER, revIncludes);\n+\t}\n+\t\n+\tprivate void populateIncludeForEverythingOperationParams(SearchParameterMap theParams) {\n+\t\tHashSet<Include> includes = new HashSet<>();\n+\t\t\n+\t\tincludes.add(new Include(FhirConstants.ENCOUNTER + \":\" + FhirConstants.INCLUDE_PATIENT_PARAM));\n+\t\tincludes.add(new Include(FhirConstants.ENCOUNTER + \":\" + FhirConstants.INCLUDE_LOCATION_PARAM));\n+\t\tincludes.add(new Include(FhirConstants.ENCOUNTER + \":\" + FhirConstants.INCLUDE_PARTICIPANT_PARAM));\n+\t\t\n+\t\ttheParams.addParameter(FhirConstants.INCLUDE_SEARCH_HANDLER, includes);\n+\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "451f09e30bd28ef2b26a5697560871d022cf1e43", "committedDate": "2020-06-29 14:41:36 +0300", "message": "FM2-234: Ensure search returns unique results (#233)"}, {"oid": "327efb2e413db0965f3e36da0ff8071e949259bf", "committedDate": "2020-07-07 08:44:53 +0300", "message": "FM2-169: Add search for _id and _lastUpdated (#241)"}, {"oid": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "committedDate": "2020-08-05 16:40:51 +0300", "message": "Integration tests (#267)"}, {"oid": "66612c009b372d68c58a85e8507f51e57c96ca71", "committedDate": "2020-08-21 20:28:30 +0000", "message": "FM2-302: Map Openmrs Visit to Encounter resource (#294)"}, {"oid": "d5f5b43bcf6b001de897adbdc85fb9bf5a833cf4", "committedDate": "2020-08-28 14:15:14 -0400", "message": "Refactoring: Move deletion and validity checks to the service layer"}, {"oid": "036251c5504465c191935dbfe00fb4aa7b44fc83", "committedDate": "2020-10-06 14:41:55 -0400", "message": "FM2-253:  Refactor module to support _include"}, {"oid": "f5f5d49ec263597b6e85b2d8f911304b415cee8d", "committedDate": "2020-10-06 14:41:57 -0400", "message": "FM2-258: Update Encounter resource to support _include"}, {"oid": "d6500b5f41d5208885b79b4690c050ed04ec7a8b", "committedDate": "2020-10-06 14:41:58 -0400", "message": "FM2-271: Update Encounter resource to support _revinclude"}, {"oid": "aecec9017078ad1ef69f862bcf599bc2e9308d99", "committedDate": "2021-02-12 14:48:44 -0500", "message": "Refactor: FhirDao#getSearchResults() shouldn't need any paging parameters"}, {"oid": "6de992e4950415eb8663e3da65525e1fdc0862cd", "committedDate": "2021-04-27 16:25:33 -0400", "message": "FM2-352: Add support for creating encounters via the FHIR API (#334)"}, {"oid": "086a7d29b668ef06f5ab3244d1efafe447029b00", "committedDate": "2021-08-19 12:09:42 -0400", "message": "FM2-425: Support for instance-level $everything operation on Encounters in R4 (#367)"}, {"oid": "ee5b1c31e77a36d6b7ae8d0d95d215f1283f6fa6", "committedDate": "2021-10-08 09:51:31 -0400", "message": "FM2-431: Add support to search encounters by EncounterType (#371)"}, {"oid": "c31798df0f784d23e375644ddd6901949a6dd55e", "committedDate": "2022-02-14 09:14:38 -0500", "message": "FM2-408: Encounters should be sortable by date (#378)"}, {"oid": "290688fc9189b0fa108c77f09f46c2560292e84d", "committedDate": "2022-03-24 14:21:08 -0400", "message": "FM2-396: Allow Searching for Visits (#384)"}, {"oid": "860acf1731c1aefa4f83f7f3439a13861af3941f", "committedDate": "2022-03-29 16:21:15 -0400", "message": "Refactor: delete operation does not require returning the resource"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NzgyMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383877823", "body": "Should this property still be referring to Patient?", "bodyText": "Should this property still be referring to Patient?", "bodyHTML": "<p dir=\"auto\">Should this property still be referring to Patient?</p>", "author": "ibacher", "createdAt": "2020-02-25T13:30:10Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java", "diffHunk": "@@ -54,9 +56,16 @@ public Encounter getEncounterByUuid(@IdParam @NotNull IdType id) {\n \t}\n \t\n \t@Search\n-\tpublic Bundle findEncountersByPatientIdentifier(@RequiredParam(name = Encounter.SP_PATIENT, chainWhitelist = {\n-\t        Patient.SP_IDENTIFIER }) ReferenceParam identifier) {\n-\t\treturn FhirUtils\n-\t\t        .convertSearchResultsToBundle(encounterService.findEncountersByPatientIdentifier(identifier.getIdPart()));\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchEncounter(@OperationParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OperationParam(name = Encounter.SP_LOCATION) ReferenceParam location,\n+\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,", "originalCommit": "5308c2c1d204d1a8dba16d670594e583910b460e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 0e40ad60..daa4db73 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -56,11 +57,13 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t}\n \t\n \t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle searchEncounter(@OperationParam(name = Encounter.SP_DATE) DateRangeParam date,\n-\t        @OperationParam(name = Encounter.SP_LOCATION) ReferenceParam location,\n-\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n-\t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam participantReference,\n+\tpublic Bundle searchEncounter(@OptionalParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OptionalParam(name = Encounter.SP_LOCATION, chainWhitelist = { \"\", Location.SP_ADDRESS_CITY,\n+\t                Location.SP_ADDRESS_STATE, Location.SP_ADDRESS_COUNTRY,\n+\t                Location.SP_ADDRESS_POSTALCODE }, targetTypes = Location.class) ReferenceParam location,\n+\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Practitioner.SP_IDENTIFIER,\n+\t                Practitioner.SP_GIVEN, Practitioner.SP_FAMILY,\n+\t                Practitioner.SP_NAME }, targetTypes = Practitioner.class) ReferenceParam participantReference,\n \t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam subjectReference) {\n \t\treturn FhirUtils.convertSearchResultsToBundle(\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 0e40ad60..daa4db73 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -56,11 +57,13 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t}\n \t\n \t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle searchEncounter(@OperationParam(name = Encounter.SP_DATE) DateRangeParam date,\n-\t        @OperationParam(name = Encounter.SP_LOCATION) ReferenceParam location,\n-\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n-\t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam participantReference,\n+\tpublic Bundle searchEncounter(@OptionalParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OptionalParam(name = Encounter.SP_LOCATION, chainWhitelist = { \"\", Location.SP_ADDRESS_CITY,\n+\t                Location.SP_ADDRESS_STATE, Location.SP_ADDRESS_COUNTRY,\n+\t                Location.SP_ADDRESS_POSTALCODE }, targetTypes = Location.class) ReferenceParam location,\n+\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Practitioner.SP_IDENTIFIER,\n+\t                Practitioner.SP_GIVEN, Practitioner.SP_FAMILY,\n+\t                Practitioner.SP_NAME }, targetTypes = Practitioner.class) ReferenceParam participantReference,\n \t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam subjectReference) {\n \t\treturn FhirUtils.convertSearchResultsToBundle(\n", "next_change": {"commit": "1ed356fac0cba16ca1b114fb90d1627cf436eaff", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex daa4db73..0444b5be 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -66,7 +66,7 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t                Practitioner.SP_NAME }, targetTypes = Practitioner.class) ReferenceParam participantReference,\n \t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam subjectReference) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(\n+\t\treturn FhirServerUtils.convertSearchResultsToBundle(\n \t\t    encounterService.searchForEncounters(date, location, participantReference, subjectReference));\n \t\t\n \t}\n", "next_change": {"commit": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 0444b5be..68ad1964 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -71,4 +75,14 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t\t\n \t}\n \t\n+\t@History\n+\t@SuppressWarnings(\"unused\")\n+\tpublic List<Resource> getEncounterHistoryById(@IdParam @NotNull IdType id) {\n+\t\tEncounter encounter = encounterService.getEncounterByUuid(id.getIdPart());\n+\t\tif (encounter == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find encounter with Id \" + id.getIdPart());\n+\t\t}\n+\t\treturn encounter.getContained();\n+\t}\n+\t\n }\n", "next_change": {"commit": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 68ad1964..916ca8ca 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -78,7 +79,7 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t@History\n \t@SuppressWarnings(\"unused\")\n \tpublic List<Resource> getEncounterHistoryById(@IdParam @NotNull IdType id) {\n-\t\tEncounter encounter = encounterService.getEncounterByUuid(id.getIdPart());\n+\t\tEncounter encounter = encounterService.get(id.getIdPart());\n \t\tif (encounter == null) {\n \t\t\tthrow new ResourceNotFoundException(\"Could not find encounter with Id \" + id.getIdPart());\n \t\t}\n", "next_change": {"commit": "0669dfe0d94964a2fe7b3b8def716c2179e0f8da", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 916ca8ca..899453d1 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -76,14 +86,4 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t\t\n \t}\n \t\n-\t@History\n-\t@SuppressWarnings(\"unused\")\n-\tpublic List<Resource> getEncounterHistoryById(@IdParam @NotNull IdType id) {\n-\t\tEncounter encounter = encounterService.get(id.getIdPart());\n-\t\tif (encounter == null) {\n-\t\t\tthrow new ResourceNotFoundException(\"Could not find encounter with Id \" + id.getIdPart());\n-\t\t}\n-\t\treturn encounter.getContained();\n-\t}\n-\t\n }\n", "next_change": {"commit": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProvider.java\nsimilarity index 94%\nrename from omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nrename to api/src/main/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProvider.java\nindex 899453d1..f26edb0f 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProvider.java\n", "chunk": "@@ -81,7 +81,7 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY,\n \t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceAndListParam subjectReference) {\n-\t\treturn FhirServerUtils.convertSearchResultsToBundle(\n+\t\treturn FhirProviderUtils.convertSearchResultsToBundle(\n \t\t    encounterService.searchForEncounters(date, location, participantReference, subjectReference));\n \t\t\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "1ed356fac0cba16ca1b114fb90d1627cf436eaff", "committedDate": "2020-03-03 16:14:03 +0300", "message": "Rename FhirUtils to FhirServerUtils @Omod sub-module (#93)"}, {"oid": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "committedDate": "2020-03-04 09:25:55 -0500", "message": "FM2-72: Added provenances for additional resources (#104)"}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0669dfe0d94964a2fe7b3b8def716c2179e0f8da", "committedDate": "2020-05-04 09:17:10 -0400", "message": "Fix various warnings and some other refactoring"}, {"oid": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "committedDate": "2020-05-22 17:04:04 -0400", "message": "FM2-183: Add support for DSTU3 (#158)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3Nzk5OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383877999", "body": "Will this support sub-properties of location?", "bodyText": "Will this support sub-properties of location?", "bodyHTML": "<p dir=\"auto\">Will this support sub-properties of location?</p>", "author": "ibacher", "createdAt": "2020-02-25T13:30:28Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java", "diffHunk": "@@ -54,9 +56,16 @@ public Encounter getEncounterByUuid(@IdParam @NotNull IdType id) {\n \t}\n \t\n \t@Search\n-\tpublic Bundle findEncountersByPatientIdentifier(@RequiredParam(name = Encounter.SP_PATIENT, chainWhitelist = {\n-\t        Patient.SP_IDENTIFIER }) ReferenceParam identifier) {\n-\t\treturn FhirUtils\n-\t\t        .convertSearchResultsToBundle(encounterService.findEncountersByPatientIdentifier(identifier.getIdPart()));\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchEncounter(@OperationParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OperationParam(name = Encounter.SP_LOCATION) ReferenceParam location,", "originalCommit": "5308c2c1d204d1a8dba16d670594e583910b460e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 0e40ad60..daa4db73 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -56,11 +57,13 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t}\n \t\n \t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle searchEncounter(@OperationParam(name = Encounter.SP_DATE) DateRangeParam date,\n-\t        @OperationParam(name = Encounter.SP_LOCATION) ReferenceParam location,\n-\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n-\t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam participantReference,\n+\tpublic Bundle searchEncounter(@OptionalParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OptionalParam(name = Encounter.SP_LOCATION, chainWhitelist = { \"\", Location.SP_ADDRESS_CITY,\n+\t                Location.SP_ADDRESS_STATE, Location.SP_ADDRESS_COUNTRY,\n+\t                Location.SP_ADDRESS_POSTALCODE }, targetTypes = Location.class) ReferenceParam location,\n+\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Practitioner.SP_IDENTIFIER,\n+\t                Practitioner.SP_GIVEN, Practitioner.SP_FAMILY,\n+\t                Practitioner.SP_NAME }, targetTypes = Practitioner.class) ReferenceParam participantReference,\n \t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam subjectReference) {\n \t\treturn FhirUtils.convertSearchResultsToBundle(\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 0e40ad60..daa4db73 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -56,11 +57,13 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t}\n \t\n \t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle searchEncounter(@OperationParam(name = Encounter.SP_DATE) DateRangeParam date,\n-\t        @OperationParam(name = Encounter.SP_LOCATION) ReferenceParam location,\n-\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n-\t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam participantReference,\n+\tpublic Bundle searchEncounter(@OptionalParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OptionalParam(name = Encounter.SP_LOCATION, chainWhitelist = { \"\", Location.SP_ADDRESS_CITY,\n+\t                Location.SP_ADDRESS_STATE, Location.SP_ADDRESS_COUNTRY,\n+\t                Location.SP_ADDRESS_POSTALCODE }, targetTypes = Location.class) ReferenceParam location,\n+\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Practitioner.SP_IDENTIFIER,\n+\t                Practitioner.SP_GIVEN, Practitioner.SP_FAMILY,\n+\t                Practitioner.SP_NAME }, targetTypes = Practitioner.class) ReferenceParam participantReference,\n \t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam subjectReference) {\n \t\treturn FhirUtils.convertSearchResultsToBundle(\n", "next_change": {"commit": "1ed356fac0cba16ca1b114fb90d1627cf436eaff", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex daa4db73..0444b5be 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -66,7 +66,7 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t                Practitioner.SP_NAME }, targetTypes = Practitioner.class) ReferenceParam participantReference,\n \t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam subjectReference) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(\n+\t\treturn FhirServerUtils.convertSearchResultsToBundle(\n \t\t    encounterService.searchForEncounters(date, location, participantReference, subjectReference));\n \t\t\n \t}\n", "next_change": {"commit": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 0444b5be..68ad1964 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -71,4 +75,14 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t\t\n \t}\n \t\n+\t@History\n+\t@SuppressWarnings(\"unused\")\n+\tpublic List<Resource> getEncounterHistoryById(@IdParam @NotNull IdType id) {\n+\t\tEncounter encounter = encounterService.getEncounterByUuid(id.getIdPart());\n+\t\tif (encounter == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find encounter with Id \" + id.getIdPart());\n+\t\t}\n+\t\treturn encounter.getContained();\n+\t}\n+\t\n }\n", "next_change": {"commit": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 68ad1964..916ca8ca 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -78,7 +79,7 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t@History\n \t@SuppressWarnings(\"unused\")\n \tpublic List<Resource> getEncounterHistoryById(@IdParam @NotNull IdType id) {\n-\t\tEncounter encounter = encounterService.getEncounterByUuid(id.getIdPart());\n+\t\tEncounter encounter = encounterService.get(id.getIdPart());\n \t\tif (encounter == null) {\n \t\t\tthrow new ResourceNotFoundException(\"Could not find encounter with Id \" + id.getIdPart());\n \t\t}\n", "next_change": {"commit": "0669dfe0d94964a2fe7b3b8def716c2179e0f8da", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nindex 916ca8ca..899453d1 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n", "chunk": "@@ -76,14 +86,4 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t\t\n \t}\n \t\n-\t@History\n-\t@SuppressWarnings(\"unused\")\n-\tpublic List<Resource> getEncounterHistoryById(@IdParam @NotNull IdType id) {\n-\t\tEncounter encounter = encounterService.get(id.getIdPart());\n-\t\tif (encounter == null) {\n-\t\t\tthrow new ResourceNotFoundException(\"Could not find encounter with Id \" + id.getIdPart());\n-\t\t}\n-\t\treturn encounter.getContained();\n-\t}\n-\t\n }\n", "next_change": {"commit": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "changed_code": [{"header": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProvider.java\nsimilarity index 94%\nrename from omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\nrename to api/src/main/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProvider.java\nindex 899453d1..f26edb0f 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProvider.java\n", "chunk": "@@ -81,7 +81,7 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY,\n \t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceAndListParam subjectReference) {\n-\t\treturn FhirServerUtils.convertSearchResultsToBundle(\n+\t\treturn FhirProviderUtils.convertSearchResultsToBundle(\n \t\t    encounterService.searchForEncounters(date, location, participantReference, subjectReference));\n \t\t\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "1ed356fac0cba16ca1b114fb90d1627cf436eaff", "committedDate": "2020-03-03 16:14:03 +0300", "message": "Rename FhirUtils to FhirServerUtils @Omod sub-module (#93)"}, {"oid": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "committedDate": "2020-03-04 09:25:55 -0500", "message": "FM2-72: Added provenances for additional resources (#104)"}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0669dfe0d94964a2fe7b3b8def716c2179e0f8da", "committedDate": "2020-05-04 09:17:10 -0400", "message": "Fix various warnings and some other refactoring"}, {"oid": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "committedDate": "2020-05-22 17:04:04 -0400", "message": "FM2-183: Add support for DSTU3 (#158)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3ODMwMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383878302", "body": "Don't forget to re-add similar tests", "bodyText": "Don't forget to re-add similar tests", "bodyHTML": "<p dir=\"auto\">Don't forget to re-add similar tests</p>", "author": "ibacher", "createdAt": "2020-02-25T13:30:57Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java", "diffHunk": "@@ -85,24 +79,4 @@ public void getEncounterWithWrongUuid_shouldThrowResourceNotFoundException() {\n \t\tEncounter result = resourceProvider.getEncounterByUuid(id);\n \t\tassertThat(result, nullValue());\n \t}\n-\t\n-\t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnMatchingBundleOfEncounters() {", "originalCommit": "5308c2c1d204d1a8dba16d670594e583910b460e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\nindex 69e55cb9..2e6eeeee 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n", "chunk": "@@ -79,4 +86,24 @@ public class EncounterFhirResourceProviderTest {\n \t\tEncounter result = resourceProvider.getEncounterByUuid(id);\n \t\tassertThat(result, nullValue());\n \t}\n+\t\n+\t@Test\n+\tpublic void searchEncounters_shouldReturnMatchingEncounters() {\n+\t\tList<Encounter> encounters = new ArrayList<>();\n+\t\tencounters.add(encounter);\n+\t\twhen(encounterService.searchForEncounters(any(), any(), any(), any())).thenReturn(encounters);\n+\t\tReferenceParam subjectreference = new ReferenceParam();\n+\t\tsubjectreference.setChain(Patient.SP_NAME);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Encounter enc = new org.hl7.fhir.r4.model.Encounter();\n+\t\tenc.setId(ENCOUNTER_UUID);\n+\t\t\n+\t\tBundle results = resourceProvider.searchEncounter(null, null, null, subjectreference);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getTotal(), equalTo(1));\n+\t\tassertThat(results.getEntry(), notNullValue());\n+\t\tassertThat(results.getEntry().get(0).getResource().fhirType(), equalTo(\"Encounter\"));\n+\t\tassertThat(results.getEntry().get(0).getResource().getId(), equalTo(ENCOUNTER_UUID));\n+\t}\n }\n", "next_change": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\nindex 2e6eeeee..e8ce1260 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n", "chunk": "@@ -92,14 +92,11 @@ public class EncounterFhirResourceProviderTest {\n \t\tList<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(encounter);\n \t\twhen(encounterService.searchForEncounters(any(), any(), any(), any())).thenReturn(encounters);\n+\t\t\n \t\tReferenceParam subjectreference = new ReferenceParam();\n \t\tsubjectreference.setChain(Patient.SP_NAME);\n \t\t\n-\t\torg.hl7.fhir.r4.model.Encounter enc = new org.hl7.fhir.r4.model.Encounter();\n-\t\tenc.setId(ENCOUNTER_UUID);\n-\t\t\n \t\tBundle results = resourceProvider.searchEncounter(null, null, null, subjectreference);\n-\t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(results.getTotal(), equalTo(1));\n \t\tassertThat(results.getEntry(), notNullValue());\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\nindex 69e55cb9..e8ce1260 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n", "chunk": "@@ -79,4 +86,21 @@ public class EncounterFhirResourceProviderTest {\n \t\tEncounter result = resourceProvider.getEncounterByUuid(id);\n \t\tassertThat(result, nullValue());\n \t}\n+\t\n+\t@Test\n+\tpublic void searchEncounters_shouldReturnMatchingEncounters() {\n+\t\tList<Encounter> encounters = new ArrayList<>();\n+\t\tencounters.add(encounter);\n+\t\twhen(encounterService.searchForEncounters(any(), any(), any(), any())).thenReturn(encounters);\n+\t\t\n+\t\tReferenceParam subjectreference = new ReferenceParam();\n+\t\tsubjectreference.setChain(Patient.SP_NAME);\n+\t\t\n+\t\tBundle results = resourceProvider.searchEncounter(null, null, null, subjectreference);\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getTotal(), equalTo(1));\n+\t\tassertThat(results.getEntry(), notNullValue());\n+\t\tassertThat(results.getEntry().get(0).getResource().fhirType(), equalTo(\"Encounter\"));\n+\t\tassertThat(results.getEntry().get(0).getResource().getId(), equalTo(ENCOUNTER_UUID));\n+\t}\n }\n", "next_change": {"commit": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\nindex e8ce1260..a547434c 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n", "chunk": "@@ -103,4 +111,25 @@ public class EncounterFhirResourceProviderTest {\n \t\tassertThat(results.getEntry().get(0).getResource().fhirType(), equalTo(\"Encounter\"));\n \t\tassertThat(results.getEntry().get(0).getResource().getId(), equalTo(ENCOUNTER_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void getEncounterHistory_shouldReturnProvenanceResources() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(ENCOUNTER_UUID);\n+\t\twhen(encounterService.getEncounterByUuid(ENCOUNTER_UUID)).thenReturn(encounter);\n+\t\t\n+\t\tList<Resource> resources = resourceProvider.getEncounterHistoryById(id);\n+\t\tassertThat(resources, not(empty()));\n+\t\tassertThat(resources.stream().findAny().isPresent(), is(true));\n+\t\tassertThat(resources.stream().findAny().get().getResourceType().name(),\n+\t\t    Matchers.equalTo(Provenance.class.getSimpleName()));\n+\t}\n+\t\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void getEncounterHistoryByWithWrongId_shouldThrowResourceNotFoundException() {\n+\t\tIdType idType = new IdType();\n+\t\tidType.setValue(WRONG_ENCOUNTER_UUID);\n+\t\tassertThat(resourceProvider.getEncounterHistoryById(idType).isEmpty(), is(true));\n+\t\tassertThat(resourceProvider.getEncounterHistoryById(idType).size(), Matchers.equalTo(0));\n+\t}\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "committedDate": "2020-03-04 09:25:55 -0500", "message": "FM2-72: Added provenances for additional resources (#104)"}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "committedDate": "2020-05-22 17:04:04 -0400", "message": "FM2-183: Add support for DSTU3 (#158)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3ODQ4OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383878488", "body": "This test should *not* be removed.", "bodyText": "This test should not be removed.", "bodyHTML": "<p dir=\"auto\">This test should <em>not</em> be removed.</p>", "author": "ibacher", "createdAt": "2020-02-25T13:31:16Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -81,32 +72,4 @@ public void getEncounterByWrongUuid_shouldReturn404() throws Exception {\n \t\tassertThat(response, isNotFound());\n \t}\n \t\n-\t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnBundleOfEncounters() throws IOException, ServletException {", "originalCommit": "5308c2c1d204d1a8dba16d670594e583910b460e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex b3053d9e..071de6be 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -72,4 +124,146 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t\tassertThat(response, isNotFound());\n \t}\n \t\n+\t@Test\n+\tpublic void shouldGetObservationsBySubjectUuid() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter?subject:Patient=%s\", PATIENT_UUID));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getIdPart(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByDate() throws Exception {\n+\t\tverifyUri(\"/Encounter/?date=ge1975-02-02\");\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(dateRangeCaptor.capture(), isNull(), isNull(), isNull());\n+\t\tassertThat(dateRangeCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(1975, 1, 2);\n+\t\t\n+\t\tassertThat(dateRangeCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeCaptor.getValue().getUpperBound(), nullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByLocationCityVillage() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?location.address-city=%s\", ENCOUNTER_ADDRESS_CITY));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n+\t\tassertThat(locationCaptor.getValue(), notNullValue());\n+\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-city\"));\n+\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByLocationState() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?location.address-state=%s\", ENCOUNTER_ADDRESS_STATE));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n+\t\tassertThat(locationCaptor.getValue(), notNullValue());\n+\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-state\"));\n+\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_ADDRESS_STATE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByLocationPostalCode() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?location.address-postalcode=%s\", ENCOUNTER_POSTALCODE));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n+\t\tassertThat(locationCaptor.getValue(), notNullValue());\n+\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-postalcode\"));\n+\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_POSTALCODE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByLocationCountry() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?location.address-country=%s\", ENCOUNTER_ADDRESS_COUNTRY));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n+\t\tassertThat(locationCaptor.getValue(), notNullValue());\n+\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-country\"));\n+\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_ADDRESS_COUNTRY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByParticipantGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?participant:Practitioner.given=%s\", PATIENT_GIVEN_NAME));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), participantCaptor.capture(), isNull());\n+\t\tassertThat(participantCaptor.getValue(), notNullValue());\n+\t\tassertThat(participantCaptor.getValue().getChain(), equalTo(\"given\"));\n+\t\tassertThat(participantCaptor.getValue().getValue(), equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByParticipantFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?participant:Practitioner.family=%s\", PATIENT_FAMILY_NAME));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), participantCaptor.capture(), isNull());\n+\t\tassertThat(participantCaptor.getValue(), notNullValue());\n+\t\tassertThat(participantCaptor.getValue().getChain(), equalTo(\"family\"));\n+\t\tassertThat(participantCaptor.getValue().getValue(), equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByParticipantIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?participant:Practitioner.identifier=%s\", PATIENT_IDENTIFIER));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), participantCaptor.capture(), isNull());\n+\t\tassertThat(participantCaptor.getValue(), notNullValue());\n+\t\tassertThat(participantCaptor.getValue().getChain(), equalTo(\"identifier\"));\n+\t\tassertThat(participantCaptor.getValue().getValue(), equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsBySubjectGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?subject.given=%s\", PATIENT_GIVEN_NAME));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getChain(), equalTo(\"given\"));\n+\t\tassertThat(subjectCaptor.getValue().getValue(), equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsBySubjectFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter?subject.family=%s\", PATIENT_FAMILY_NAME));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getChain(), equalTo(\"family\"));\n+\t\tassertThat(subjectCaptor.getValue().getValue(), equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsBySubjectIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter?subject.identifier=%s\", PATIENT_IDENTIFIER));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getChain(), equalTo(\"identifier\"));\n+\t\tassertThat(subjectCaptor.getValue().getValue(), equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\tprivate void verifyUri(String uri) throws Exception {\n+\t\tEncounter encounter = new Encounter();\n+\t\tencounter.setId(ENCOUNTER_UUID);\n+\t\twhen(encounterService.searchForEncounters(any(), any(), any(), any()))\n+\t\t        .thenReturn(Collections.singletonList(encounter));\n+\t\t\n+\t\tMockHttpServletResponse response = get(uri).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\tassertThat(results.getEntry(), notNullValue());\n+\t\tassertThat(results.getEntry(), not(empty()));\n+\t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n+\t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(ENCOUNTER_UUID));\n+\t}\n+\t\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex b3053d9e..a74d508e 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -72,4 +118,194 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t\tassertThat(response, isNotFound());\n \t}\n \t\n+\t@Test\n+\tpublic void shouldGetEncountersBySubjectUuid() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter?subject:Patient=%s\", PATIENT_UUID));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getIdPart(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersByDate() throws Exception {\n+\t\tverifyUri(\"/Encounter/?date=ge1975-02-02\");\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(dateRangeCaptor.capture(), isNull(), isNull(), isNull());\n+\t\tassertThat(dateRangeCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(1975, 1, 2);\n+\t\t\n+\t\tassertThat(dateRangeCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeCaptor.getValue().getUpperBound(), nullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersByLocationCityVillage() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?location.address-city=%s\", ENCOUNTER_ADDRESS_CITY));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n+\t\tassertThat(locationCaptor.getValue(), notNullValue());\n+\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-city\"));\n+\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersByLocationState() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?location.address-state=%s\", ENCOUNTER_ADDRESS_STATE));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n+\t\tassertThat(locationCaptor.getValue(), notNullValue());\n+\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-state\"));\n+\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_ADDRESS_STATE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersByLocationPostalCode() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?location.address-postalcode=%s\", ENCOUNTER_POSTALCODE));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n+\t\tassertThat(locationCaptor.getValue(), notNullValue());\n+\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-postalcode\"));\n+\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_POSTALCODE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersByLocationCountry() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?location.address-country=%s\", ENCOUNTER_ADDRESS_COUNTRY));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n+\t\tassertThat(locationCaptor.getValue(), notNullValue());\n+\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-country\"));\n+\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_ADDRESS_COUNTRY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersByParticipantGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?participant:Practitioner.given=%s\", PARTICIPANT_GIVEN_NAME));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), participantCaptor.capture(), isNull());\n+\t\tassertThat(participantCaptor.getValue(), notNullValue());\n+\t\tassertThat(participantCaptor.getValue().getChain(), equalTo(\"given\"));\n+\t\tassertThat(participantCaptor.getValue().getValue(), equalTo(PARTICIPANT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersByParticipantFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?participant:Practitioner.family=%s\", PARTICIPANT_FAMILY_NAME));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), participantCaptor.capture(), isNull());\n+\t\tassertThat(participantCaptor.getValue(), notNullValue());\n+\t\tassertThat(participantCaptor.getValue().getChain(), equalTo(\"family\"));\n+\t\tassertThat(participantCaptor.getValue().getValue(), equalTo(PARTICIPANT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersByParticipantIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?participant:Practitioner.identifier=%s\", PARTICIPANT_IDENTIFIER));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), participantCaptor.capture(), isNull());\n+\t\tassertThat(participantCaptor.getValue(), notNullValue());\n+\t\tassertThat(participantCaptor.getValue().getChain(), equalTo(\"identifier\"));\n+\t\tassertThat(participantCaptor.getValue().getValue(), equalTo(PARTICIPANT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersBySubjectGivenName() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?subject.given=%s\", PATIENT_GIVEN_NAME));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getChain(), equalTo(\"given\"));\n+\t\tassertThat(subjectCaptor.getValue().getValue(), equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersBySubjectFamilyName() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter?subject.family=%s\", PATIENT_FAMILY_NAME));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getChain(), equalTo(\"family\"));\n+\t\tassertThat(subjectCaptor.getValue().getValue(), equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersBySubjectIdentifier() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter?subject.identifier=%s\", PATIENT_IDENTIFIER));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getChain(), equalTo(\"identifier\"));\n+\t\tassertThat(subjectCaptor.getValue().getValue(), equalTo(PATIENT_IDENTIFIER));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersBySubjectGivenNameAndLocationPostalCode() throws Exception {\n+\t\tverifyUri(\"/Encounter?subject.given=Hannibal&location.address-postalcode=248001\");\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), subjectCaptor.capture());\n+\t\t\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getChain(), equalTo(\"given\"));\n+\t\tassertThat(subjectCaptor.getValue().getValue(), equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(locationCaptor.getValue(), notNullValue());\n+\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-postalcode\"));\n+\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_POSTALCODE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersByParticipantIdentifierAndLocationPostalCode() throws Exception {\n+\t\tverifyUri(\"/Encounter?participant:Practitioner.identifier=1000WF&location.address-postalcode=248001\");\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), participantCaptor.capture(),\n+\t\t    isNull());\n+\t\t\n+\t\tassertThat(participantCaptor.getValue(), notNullValue());\n+\t\tassertThat(participantCaptor.getValue().getChain(), equalTo(\"identifier\"));\n+\t\tassertThat(participantCaptor.getValue().getValue(), equalTo(PARTICIPANT_IDENTIFIER));\n+\t\tassertThat(locationCaptor.getValue(), notNullValue());\n+\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-postalcode\"));\n+\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_POSTALCODE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncountersByParticipantIdentifierAndDate() throws Exception {\n+\t\tverifyUri(\"/Encounter?participant:Practitioner.identifier=1000WF&date=ge1975-02-02\");\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(dateRangeCaptor.capture(), isNull(), participantCaptor.capture(),\n+\t\t    isNull());\n+\t\t\n+\t\tassertThat(participantCaptor.getValue(), notNullValue());\n+\t\tassertThat(participantCaptor.getValue().getChain(), equalTo(\"identifier\"));\n+\t\tassertThat(participantCaptor.getValue().getValue(), equalTo(PARTICIPANT_IDENTIFIER));\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(1975, 1, 2);\n+\t\tassertThat(dateRangeCaptor.getValue(), notNullValue());\n+\t\tassertThat(dateRangeCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeCaptor.getValue().getUpperBound(), nullValue());\n+\t}\n+\t\n+\tprivate void verifyUri(String uri) throws Exception {\n+\t\tEncounter encounter = new Encounter();\n+\t\tencounter.setId(ENCOUNTER_UUID);\n+\t\twhen(encounterService.searchForEncounters(any(), any(), any(), any()))\n+\t\t        .thenReturn(Collections.singletonList(encounter));\n+\t\t\n+\t\tMockHttpServletResponse response = get(uri).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\tassertThat(results.getEntry(), notNullValue());\n+\t\tassertThat(results.getEntry(), not(empty()));\n+\t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n+\t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(ENCOUNTER_UUID));\n+\t}\n+\t\n }\n", "next_change": {"commit": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex a74d508e..fed0b1ff 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -308,4 +322,70 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(ENCOUNTER_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldVerifyEncounterHistoryByIdUri() throws Exception {\n+\t\tEncounter encounter = new Encounter();\n+\t\tencounter.setId(ENCOUNTER_UUID);\n+\t\twhen(encounterService.getEncounterByUuid(ENCOUNTER_UUID)).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = getEncounterHistoryRequest();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(BaseFhirResourceProviderTest.FhirMediaTypes.JSON.toString()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetEncounterHistoryById() throws IOException, ServletException {\n+\t\tProvenance provenance = new Provenance();\n+\t\tprovenance.setId(new IdType(FhirUtils.uniqueUuid()));\n+\t\tprovenance.setRecorded(new Date());\n+\t\tprovenance.setActivity(new CodeableConcept().addCoding(\n+\t\t    new Coding().setCode(\"CREATE\").setSystem(FhirConstants.FHIR_TERMINOLOGY_DATA_OPERATION).setDisplay(\"create\")));\n+\t\tprovenance.addAgent(new Provenance.ProvenanceAgentComponent()\n+\t\t        .setType(new CodeableConcept().addCoding(new Coding().setCode(AUT).setDisplay(AUTHOR)\n+\t\t                .setSystem(FhirConstants.FHIR_TERMINOLOGY_PROVENANCE_PARTICIPANT_TYPE)))\n+\t\t        .addRole(new CodeableConcept().addCoding(\n+\t\t            new Coding().setCode(\"\").setDisplay(\"\").setSystem(FhirConstants.FHIR_TERMINOLOGY_PARTICIPATION_TYPE))));\n+\t\tEncounter encounter = new Encounter();\n+\t\tencounter.setId(ENCOUNTER_UUID);\n+\t\tencounter.addContained(provenance);\n+\t\t\n+\t\twhen(encounterService.getEncounterByUuid(ENCOUNTER_UUID)).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = getEncounterHistoryRequest();\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n+\t\tassertThat(results.getEntry().get(0).getResource().getResourceType().name(),\n+\t\t    equalTo(Provenance.class.getSimpleName()));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void getEncounterHistoryById_shouldReturnBundleWithEmptyEntriesIfPractitionerContainedIsEmpty() throws Exception {\n+\t\tEncounter encounter = new Encounter();\n+\t\tencounter.setId(ENCOUNTER_UUID);\n+\t\tencounter.setContained(new ArrayList<>());\n+\t\twhen(encounterService.getEncounterByUuid(ENCOUNTER_UUID)).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = getEncounterHistoryRequest();\n+\t\tBundle results = readBundleResponse(response);\n+\t\tassertThat(results.hasEntry(), is(false));\n+\t}\n+\t\n+\t@Test\n+\tpublic void getEncounterHistoryById_shouldReturn404IfEncounterIdIsWrong() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Encounter/\" + WRONG_ENCOUNTER_UUID + \"/_history\")\n+\t\t        .accept(BaseFhirResourceProviderTest.FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t}\n+\t\n+\tprivate MockHttpServletResponse getEncounterHistoryRequest() throws IOException, ServletException {\n+\t\treturn get(\"/Encounter/\" + ENCOUNTER_UUID + \"/_history\").accept(BaseFhirResourceProviderTest.FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t}\n+\t\n }\n", "next_change": {"commit": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProviderWebTest.java\nsimilarity index 50%\nrename from omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nrename to omod/src/test/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProviderWebTest.java\nindex fed0b1ff..c9801c79 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -378,14 +543,13 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t@Test\n \tpublic void getEncounterHistoryById_shouldReturn404IfEncounterIdIsWrong() throws Exception {\n \t\tMockHttpServletResponse response = get(\"/Encounter/\" + WRONG_ENCOUNTER_UUID + \"/_history\")\n-\t\t        .accept(BaseFhirResourceProviderTest.FhirMediaTypes.JSON).go();\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n \t\n \tprivate MockHttpServletResponse getEncounterHistoryRequest() throws IOException, ServletException {\n-\t\treturn get(\"/Encounter/\" + ENCOUNTER_UUID + \"/_history\").accept(BaseFhirResourceProviderTest.FhirMediaTypes.JSON)\n-\t\t        .go();\n+\t\treturn get(\"/Encounter/\" + ENCOUNTER_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "committedDate": "2020-03-04 09:25:55 -0500", "message": "FM2-72: Added provenances for additional resources (#104)"}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "54537f3da3103dcf7914c0d31562bc912bc3c5e0", "committedDate": "2020-05-18 13:16:05 -0400", "message": "FM2-175: Correctly handled empty chained parameters (#173)"}, {"oid": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "committedDate": "2020-05-22 17:04:04 -0400", "message": "FM2-183: Add support for DSTU3 (#158)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4OTcxMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384089712", "body": "I appreciate the initiative, but unless these are directly necessary for the encounter stuff, don't modify these tests here. I've got [another ticket](https://issues.openmrs.org/browse/FM2-89) to deal with that.", "bodyText": "I appreciate the initiative, but unless these are directly necessary for the encounter stuff, don't modify these tests here. I've got another ticket to deal with that.", "bodyHTML": "<p dir=\"auto\">I appreciate the initiative, but unless these are directly necessary for the encounter stuff, don't modify these tests here. I've got <a href=\"https://issues.openmrs.org/browse/FM2-89\" rel=\"nofollow\">another ticket</a> to deal with that.</p>", "author": "ibacher", "createdAt": "2020-02-25T19:51:35Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -220,8 +220,8 @@ public void searchForObs_shouldSupportMappedAndUnmappedConcepts() {\n \t@Test", "originalCommit": "128058fa8e53dd1a8fab6fb772adda45e288dfe6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNzE4NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384537185", "bodyText": "Can we actually remove this file from the PR?", "author": "ibacher", "createdAt": "2020-02-26T14:45:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4OTcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\nindex ef42404d..3f522d6f 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n", "chunk": "@@ -220,8 +220,8 @@ public class FhirObservationDaoImplTest extends BaseModuleContextSensitiveTest {\n \t@Test\n \tpublic void searchForObs_shouldReturnObsByPatientUuid() {\n \t\tReferenceParam patientReference = new ReferenceParam();\n-\t\tpatientReference.setValue(PATIENT_UUID);\n \t\tpatientReference.setChain(\"\");\n+\t\tpatientReference.setValue(PATIENT_UUID);\n \t\t\n \t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null);\n \t\t\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\nindex ef42404d..3f522d6f 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n", "chunk": "@@ -220,8 +220,8 @@ public class FhirObservationDaoImplTest extends BaseModuleContextSensitiveTest {\n \t@Test\n \tpublic void searchForObs_shouldReturnObsByPatientUuid() {\n \t\tReferenceParam patientReference = new ReferenceParam();\n-\t\tpatientReference.setValue(PATIENT_UUID);\n \t\tpatientReference.setChain(\"\");\n+\t\tpatientReference.setValue(PATIENT_UUID);\n \t\t\n \t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null);\n \t\t\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\nindex 3f522d6f..de75bc70 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n", "chunk": "@@ -219,9 +223,13 @@ public class FhirObservationDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForObs_shouldReturnObsByPatientUuid() {\n-\t\tReferenceParam patientReference = new ReferenceParam();\n-\t\tpatientReference.setChain(\"\");\n-\t\tpatientReference.setValue(PATIENT_UUID);\n+\t\tReferenceAndListParam patientReference = new ReferenceAndListParam();\n+\t\tReferenceParam patient = new ReferenceParam();\n+\t\t\n+\t\tpatient.setValue(PATIENT_UUID);\n+\t\tpatient.setChain(\"\");\n+\t\t\n+\t\tpatientReference.addValue(new ReferenceOrListParam().add(patient));\n \t\t\n \t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null);\n \t\t\n", "next_change": {"commit": "83a893a385ea7982bbf935f9b0c96e2e9a544eb8", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\nindex de75bc70..f2871218 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n", "chunk": "@@ -231,7 +256,8 @@ public class FhirObservationDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\t\n \t\tpatientReference.addValue(new ReferenceOrListParam().add(patient));\n \t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null);\n+\t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null, null, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(results, not(empty()));\n", "next_change": {"commit": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\nindex f2871218..eed36812 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n", "chunk": "@@ -252,8 +251,7 @@ public class FhirObservationDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tReferenceParam patient = new ReferenceParam();\n \t\t\n \t\tpatient.setValue(PATIENT_UUID);\n-\t\tpatient.setChain(\"\");\n-\t\t\n+\n \t\tpatientReference.addValue(new ReferenceOrListParam().add(patient));\n \t\t\n \t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null, null, null, null, null, null,\n", "next_change": {"commit": "c6fc6f1d57b0cf9911e070be1059961e410f558a", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\nindex eed36812..521888ec 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n", "chunk": "@@ -251,7 +251,7 @@ public class FhirObservationDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tReferenceParam patient = new ReferenceParam();\n \t\t\n \t\tpatient.setValue(PATIENT_UUID);\n-\n+\t\t\n \t\tpatientReference.addValue(new ReferenceOrListParam().add(patient));\n \t\t\n \t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null, null, null, null, null, null,\n", "next_change": {"commit": "1bf7948faf4907937387835e091b4a40018a8654", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\nindex 521888ec..c5bfc535 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n", "chunk": "@@ -115,648 +51,32 @@ public class FhirObservationDaoImplTest extends BaseModuleContextSensitiveTest {\n \t}\n \t\n \t@Test\n-\tpublic void getObsByUuid_shouldGetObsByUuid() {\n-\t\tObs result = dao.getObsByUuid(OBS_UUID);\n+\tpublic void get_shouldGetObsByUuid() {\n+\t\tObs result = dao.get(OBS_UUID);\n \t\t\n \t\tassertThat(result, notNullValue());\n \t\tassertThat(result.getUuid(), equalTo(OBS_UUID));\n \t}\n \t\n \t@Test\n-\tpublic void getObsByUuid_shouldReturnNullIfObsNotFoundByUuid() {\n-\t\tObs result = dao.getObsByUuid(BAD_OBS_UUID);\n+\tpublic void get_shouldReturnNullIfObsNotFoundByUuid() {\n+\t\tObs result = dao.get(BAD_OBS_UUID);\n \t\t\n \t\tassertThat(result, nullValue());\n \t}\n \t\n \t@Test\n-\tpublic void searchForObs_shouldSearchForObsByConceptId() {\n+\tpublic void search_shouldReturnSearchQuery() {\n \t\tTokenAndListParam code = new TokenAndListParam();\n \t\tTokenParam codingToken = new TokenParam();\n \t\tcodingToken.setValue(OBS_CONCEPT_ID);\n \t\tcode.addAnd(codingToken);\n \t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, null, null, null, code, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByConceptUuid() {\n-\t\tTokenAndListParam code = new TokenAndListParam();\n-\t\tTokenParam codingToken = new TokenParam();\n-\t\tcodingToken.setValue(OBS_CONCEPT_UUID);\n-\t\tcode.addAnd(codingToken);\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, null, null, null, code, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldReturnObsByConceptMapping() {\n-\t\tTokenAndListParam code = new TokenAndListParam();\n-\t\tTokenParam codingToken = new TokenParam();\n-\t\tcodingToken.setSystem(SNOMED_SYSTEM_URI);\n-\t\tcodingToken.setValue(OBS_SNOMED_CODE);\n-\t\tcode.addAnd(codingToken);\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, null, null, null, code, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldReturnMultipleObsByConceptMapping() {\n-\t\tTokenAndListParam code = new TokenAndListParam();\n-\t\tTokenOrListParam orListParam = new TokenOrListParam();\n-\t\tcode.addAnd(orListParam);\n-\t\t\n-\t\tfor (String coding : CIEL_VITAL_CODES) {\n-\t\t\tTokenParam codingToken = new TokenParam();\n-\t\t\tcodingToken.setSystem(FhirTestConstants.CIEL_SYSTEM_URN);\n-\t\t\tcodingToken.setValue(coding);\n-\t\t\torListParam.addOr(codingToken);\n-\t\t}\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, null, null, null, code, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasSize(greaterThan(1)));\n-\t\tfor (String coding : CIEL_VITAL_CODES) {\n-\t\t\tassertThat(results,\n-\t\t\t    hasItem(hasProperty(\"concept\", hasProperty(\"conceptId\", equalTo(NumberUtils.toInt(coding))))));\n-\t\t}\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldReturnFromMultipleConceptMappings() {\n-\t\tTokenAndListParam code = new TokenAndListParam();\n-\t\tTokenOrListParam orListParam = new TokenOrListParam();\n-\t\tcode.addAnd(orListParam);\n-\t\t\n-\t\tTokenParam codingToken1 = new TokenParam();\n-\t\tcodingToken1.setSystem(FhirTestConstants.LOINC_SYSTEM_URL);\n-\t\tcodingToken1.setValue(LOINC_SYSTOLIC_BP);\n-\t\torListParam.addOr(codingToken1);\n-\t\t\n-\t\tTokenParam codingToken2 = new TokenParam();\n-\t\tcodingToken2.setSystem(FhirTestConstants.CIEL_SYSTEM_URN);\n-\t\tcodingToken2.setValue(CIEL_DIASTOLIC_BP);\n-\t\torListParam.addOr(codingToken2);\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, null, null, null, code, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasSize(greaterThan(1)));\n-\t\tassertThat(results, hasItem(hasProperty(\"concept\", hasProperty(\"conceptId\", equalTo(5085)))));\n-\t\tassertThat(results, hasItem(hasProperty(\"concept\", hasProperty(\"conceptId\", equalTo(5086)))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSupportMappedAndUnmappedConcepts() {\n-\t\tTokenAndListParam code = new TokenAndListParam();\n-\t\tTokenOrListParam orListParam = new TokenOrListParam();\n-\t\tcode.addAnd(orListParam);\n-\t\t\n-\t\tTokenParam codingToken1 = new TokenParam();\n-\t\tcodingToken1.setSystem(FhirTestConstants.LOINC_SYSTEM_URL);\n-\t\tcodingToken1.setValue(LOINC_SYSTOLIC_BP);\n-\t\torListParam.addOr(codingToken1);\n-\t\t\n-\t\tTokenParam codingToken2 = new TokenParam();\n-\t\tcodingToken2.setValue(CIEL_DIASTOLIC_BP);\n-\t\torListParam.addOr(codingToken2);\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, null, null, null, code, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasSize(greaterThan(1)));\n-\t\tassertThat(results, hasItem(hasProperty(\"concept\", hasProperty(\"conceptId\", equalTo(5085)))));\n-\t\tassertThat(results, hasItem(hasProperty(\"concept\", hasProperty(\"conceptId\", equalTo(5086)))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldReturnObsByPatientUuid() {\n-\t\tReferenceAndListParam patientReference = new ReferenceAndListParam();\n-\t\tReferenceParam patient = new ReferenceParam();\n-\t\t\n-\t\tpatient.setValue(PATIENT_UUID);\n-\t\t\n-\t\tpatientReference.addValue(new ReferenceOrListParam().add(patient));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null, null, null, null, null, null,\n-\t\t    null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldReturnObsByPatientGivenName() {\n-\t\tReferenceAndListParam patientReference = new ReferenceAndListParam();\n-\t\tReferenceParam patient = new ReferenceParam();\n-\t\t\n-\t\tpatient.setValue(PATIENT_GIVEN_NAME);\n-\t\tpatient.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tpatientReference.addValue(new ReferenceOrListParam().add(patient));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null, null, null, null, null, null,\n-\t\t    null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldReturnObsByPatientFamilyName() {\n-\t\tReferenceAndListParam patientReference = new ReferenceAndListParam();\n-\t\tReferenceParam patient = new ReferenceParam();\n-\t\t\n-\t\tpatient.setValue(PATIENT_FAMILY_NAME);\n-\t\tpatient.setChain(Patient.SP_FAMILY);\n-\t\t\n-\t\tpatientReference.addValue(new ReferenceOrListParam().add(patient));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null, null, null, null, null, null,\n-\t\t    null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldReturnObsByPatientName() {\n-\t\tReferenceAndListParam patientReference = new ReferenceAndListParam();\n-\t\tReferenceParam patient = new ReferenceParam();\n-\t\t\n-\t\tpatient.setValue(PATIENT_GIVEN_NAME + \" \" + PATIENT_FAMILY_NAME);\n-\t\tpatient.setChain(Patient.SP_NAME);\n-\t\t\n-\t\tpatientReference.addValue(new ReferenceOrListParam().add(patient));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null, null, null, null, null, null,\n-\t\t    null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldReturnObsByPatientIdentifier() {\n-\t\tReferenceAndListParam patientReference = new ReferenceAndListParam();\n-\t\tReferenceParam patient = new ReferenceParam();\n-\t\t\n-\t\tpatient.setValue(PATIENT_IDENTIFIER);\n-\t\tpatient.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tpatientReference.addValue(new ReferenceOrListParam().add(patient));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null, null, null, null, null, null,\n-\t\t    null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldReturnObsByEncounter() {\n-\t\tReferenceAndListParam encounterReference = new ReferenceAndListParam();\n-\t\tencounterReference.addValue(new ReferenceOrListParam().add(new ReferenceParam().setValue(ENCOUNTER_UUID)));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(encounterReference, null, null, null, null, null, null, null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSortObsAsRequested() {\n-\t\tSortSpec sort = new SortSpec();\n-\t\tsort.setParamName(\"date\");\n-\t\tsort.setOrder(SortOrderEnum.ASC);\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, null, null, null, null, sort);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThan(1));\n-\t\t\n-\t\tList<Obs> resultsList = new ArrayList<>(results);\n-\t\t// pair-wise compare of all obs by date\n-\t\tfor (int i = 1; i < resultsList.size(); i++) {\n-\t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrBefore(resultsList.get(i).getObsDatetime()));\n-\t\t}\n-\t\t\n-\t\tsort.setOrder(SortOrderEnum.DESC);\n-\t\t\n-\t\tresults = dao.searchForObservations(null, null, null, null, null, null, null, null, null, sort);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThan(1));\n-\t\t\n-\t\tresultsList = new ArrayList<>(results);\n-\t\t// pair-wise compare of all obs by date\n-\t\tfor (int i = 1; i < resultsList.size(); i++) {\n-\t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n-\t\t}\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldIgnoreSearchByUnknownProperty() {\n-\t\tSortSpec sort = new SortSpec();\n-\t\tsort.setParamName(\"date\");\n-\t\tsort.setOrder(SortOrderEnum.DESC);\n-\t\t\n-\t\tCollection<Obs> baselineObs = dao.searchForObservations(null, null, null, null, null, null, null, null, null, sort);\n-\t\t\n-\t\tassertThat(baselineObs, notNullValue());\n-\t\tassertThat(baselineObs, not(empty()));\n-\t\t\n-\t\tSortSpec subSort = new SortSpec();\n-\t\tsort.setChain(subSort);\n-\t\tsubSort.setParamName(\"dummy\");\n-\t\tsubSort.setOrder(SortOrderEnum.ASC);\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, null, null, null, null, sort);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, equalTo(baselineObs));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldReturnObsByPatientUuidAndPatientGivenName() {\n-\t\tReferenceAndListParam patientReference = new ReferenceAndListParam();\n-\t\tReferenceParam patientOne = new ReferenceParam();\n-\t\tReferenceParam patientTwo = new ReferenceParam();\n-\t\t\n-\t\tpatientOne.setValue(PATIENT_FAMILY_NAME);\n-\t\tpatientOne.setChain(Patient.SP_FAMILY);\n-\t\t\n-\t\tpatientTwo.setValue(PATIENT_GIVEN_NAME);\n-\t\tpatientTwo.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tpatientReference.addValue(new ReferenceOrListParam().add(patientOne).add(patientTwo));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null, null, null, null, null, null,\n-\t\t    null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldReturnObsByEncounters() {\n-\t\tReferenceAndListParam encounterReference = new ReferenceAndListParam();\n-\t\tencounterReference.addValue(new ReferenceOrListParam().add(new ReferenceParam().setValue(ENCOUNTER_UUID))\n-\t\t        .add(new ReferenceParam().setValue(ENCOUNTER_UUID_TWO)));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(encounterReference, null, null, null, null, null, null, null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldHandleComplexQuery() {\n-\t\tTokenAndListParam code = new TokenAndListParam();\n-\t\tTokenOrListParam orListParam = new TokenOrListParam();\n-\t\tcode.addAnd(orListParam);\n-\t\t\n-\t\tfor (String coding : CIEL_VITAL_CODES) {\n-\t\t\tTokenParam codingToken = new TokenParam();\n-\t\t\tcodingToken.setSystem(FhirTestConstants.CIEL_SYSTEM_URN);\n-\t\t\tcodingToken.setValue(coding);\n-\t\t\torListParam.addOr(codingToken);\n-\t\t}\n-\t\t\n-\t\tReferenceAndListParam patientReference = new ReferenceAndListParam();\n-\t\tReferenceParam patient = new ReferenceParam();\n-\t\t\n-\t\tpatient.setValue(PATIENT_UUID);\n-\t\t\n-\t\tpatientReference.addValue(new ReferenceOrListParam().add(patient));\n-\t\t\n-\t\tSortSpec sort = new SortSpec();\n-\t\tsort.setParamName(\"date\");\n-\t\tsort.setOrder(SortOrderEnum.DESC);\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, patientReference, null, null, null, null, null, null, code,\n-\t\t    sort);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasSize(greaterThan(1)));\n-\t\tfor (String coding : CIEL_VITAL_CODES) {\n-\t\t\tassertThat(results,\n-\t\t\t    hasItem(hasProperty(\"concept\", hasProperty(\"conceptId\", equalTo(NumberUtils.toInt(coding))))));\n-\t\t}\n-\t\t\n-\t\tList<Obs> resultsList = new ArrayList<>(results);\n-\t\t// pair-wise compare of all obs by date\n-\t\tfor (int i = 1; i < resultsList.size(); i++) {\n-\t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n-\t\t}\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n-\t\tReferenceParam memberReference = new ReferenceParam();\n-\t\t\n-\t\tmemberReference.setValue(MEMBER_UUID);\n-\t\tmemberReference.setChain(\"\");\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, memberReference, null, null, null, null, null, null,\n-\t\t    null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_MEMBER_UUID));\n-\t\tassertThat(results.iterator().next().getGroupMembers().iterator().next().getUuid(), equalTo(MEMBER_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldReturnObsByMemberReferenceConceptId() {\n-\t\tReferenceParam memberReference = new ReferenceParam();\n-\t\t\n-\t\tmemberReference.setValue(VALUE_CONCEPT_ID);\n-\t\tmemberReference.setChain(Observation.SP_CODE);\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, memberReference, null, null, null, null, null, null,\n-\t\t    null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_MEMBER_UUID));\n-\t\tassertThat(results.iterator().next().getGroupMembers().iterator().next().getConcept().getConceptId().toString(),\n-\t\t    equalTo(VALUE_CONCEPT_ID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueConceptId() {\n-\t\tTokenAndListParam code = new TokenAndListParam();\n-\t\tTokenParam codingToken = new TokenParam();\n-\t\tcodingToken.setValue(VALUE_CONCEPT_ID);\n-\t\tcode.addAnd(codingToken);\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, code, null, null, null, null, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_VALUE_CONCEPT_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueDate() {\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null,\n-\t\t    new DateRangeParam(new DateParam(VALUE_DATE_AND_TIME)), null, null, null, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndDecimalValue() {\n-\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n-\t\t\n-\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n-\t\t\n-\t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(\"100.00\");\n-\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"89fg071-1f7d-4394-a316-0a458edf28c3\"))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndEValue() {\n-\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n-\t\t\n-\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n-\t\t\n-\t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(\"1e2\");\n-\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"89fg071-1f7d-4394-a316-0a458edf28c3\"))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndNegativeEValue() {\n-\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n-\t\t\n-\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n-\t\t\n-\t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(\"1e-2\");\n-\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"56htgf-1f7d-4394-a316-0a458edf28c3\"))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefix() {\n-\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n-\t\t\n-\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n-\t\t\n-\t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(\"188\");\n-\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"30ba0383-9377-46e9-aab3-5fee12e5ed0a\"))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixEq() {\n-\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n-\t\t\n-\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n-\t\t\n-\t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(\"100\");\n-\t\tquantityParam.setPrefix(ParamPrefixEnum.EQUAL);\n-\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), equalTo(1));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"86sgf-1f7d-4394-a316-0a458edf28c3\"))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixNe() {\n-\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n-\t\t\n-\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n-\t\t\n-\t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(\"100\");\n-\t\tquantityParam.setPrefix(ParamPrefixEnum.NOT_EQUAL);\n-\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), equalTo(15));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixLe() {\n-\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n-\t\t\n-\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n-\t\t\n-\t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(\"100\");\n-\t\tquantityParam.setPrefix(ParamPrefixEnum.LESSTHAN_OR_EQUALS);\n-\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), equalTo(10));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixLt() {\n-\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n-\t\t\n-\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n-\t\t\n-\t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(\"100\");\n-\t\tquantityParam.setPrefix(ParamPrefixEnum.LESSTHAN);\n-\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), equalTo(9));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixGe() {\n-\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n-\t\t\n-\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n-\t\t\n-\t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(\"100\");\n-\t\tquantityParam.setPrefix(ParamPrefixEnum.GREATERTHAN_OR_EQUALS);\n-\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), equalTo(7));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixGt() {\n-\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n-\t\t\n-\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n-\t\t\n-\t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(\"100\");\n-\t\tquantityParam.setPrefix(ParamPrefixEnum.GREATERTHAN);\n-\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), equalTo(6));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixAp() {\n-\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n-\t\t\n-\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n-\t\t\n-\t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(\"36\");\n-\t\tquantityParam.setPrefix(ParamPrefixEnum.APPROXIMATE);\n-\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"7e77d071-1f7d-4394-a316-0a458edf28c3\"))));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueString() {\n-\t\tStringAndListParam stringAndListParam = new StringAndListParam();\n-\t\tStringParam stringParam = new StringParam();\n-\t\tstringParam.setValue(VALUE_STRING);\n-\t\tstringAndListParam.addAnd(stringParam);\n-\t\t\n-\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, null, stringAndListParam, null,\n-\t\t    null, null);\n+\t\tSearchParameterMap theParams = new SearchParameterMap();\n+\t\ttheParams.addParameter(FhirConstants.CODED_SEARCH_HANDLER, code);\n+\t\tCollection<Obs> obs = dao.search(theParams);\n \t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_VALUE_CONCEPT_UUID))));\n+\t\tassertThat(obs, notNullValue());\n \t}\n \t\n }\n", "next_change": {"commit": "451f09e30bd28ef2b26a5697560871d022cf1e43", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\nindex c5bfc535..60dbbe1a 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n", "chunk": "@@ -74,7 +73,9 @@ public class FhirObservationDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\t\n \t\tSearchParameterMap theParams = new SearchParameterMap();\n \t\ttheParams.addParameter(FhirConstants.CODED_SEARCH_HANDLER, code);\n-\t\tCollection<Obs> obs = dao.search(theParams);\n+\t\t\n+\t\tList<String> matchingResourceUuids = dao.getResultUuids(theParams);\n+\t\tCollection<Obs> obs = dao.search(theParams, matchingResourceUuids);\n \t\t\n \t\tassertThat(obs, notNullValue());\n \t}\n", "next_change": {"commit": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\nindex 60dbbe1a..75fcf613 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n", "chunk": "@@ -74,8 +74,8 @@ public class FhirObservationDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tSearchParameterMap theParams = new SearchParameterMap();\n \t\ttheParams.addParameter(FhirConstants.CODED_SEARCH_HANDLER, code);\n \t\t\n-\t\tList<String> matchingResourceUuids = dao.getResultUuids(theParams);\n-\t\tCollection<Obs> obs = dao.search(theParams, matchingResourceUuids);\n+\t\tList<String> matchingResourceUuids = dao.getSearchResultUuids(theParams);\n+\t\tCollection<Obs> obs = dao.getSearchResults(theParams, matchingResourceUuids);\n \t\t\n \t\tassertThat(obs, notNullValue());\n \t}\n", "next_change": {"commit": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\nindex 75fcf613..4cd23ca6 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n", "chunk": "@@ -74,8 +74,8 @@ public class FhirObservationDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tSearchParameterMap theParams = new SearchParameterMap();\n \t\ttheParams.addParameter(FhirConstants.CODED_SEARCH_HANDLER, code);\n \t\t\n-\t\tList<String> matchingResourceUuids = dao.getSearchResultUuids(theParams);\n-\t\tCollection<Obs> obs = dao.getSearchResults(theParams, matchingResourceUuids);\n+\t\tList<Integer> matchingResourceIds = dao.getSearchResultIds(theParams);\n+\t\tCollection<Obs> obs = dao.getSearchResults(theParams, matchingResourceIds);\n \t\t\n \t\tassertThat(obs, notNullValue());\n \t}\n", "next_change": {"commit": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\nindex 4cd23ca6..ff96f9f0 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java\n", "chunk": "@@ -74,8 +73,7 @@ public class FhirObservationDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tSearchParameterMap theParams = new SearchParameterMap();\n \t\ttheParams.addParameter(FhirConstants.CODED_SEARCH_HANDLER, code);\n \t\t\n-\t\tList<Integer> matchingResourceIds = dao.getSearchResultIds(theParams);\n-\t\tCollection<Obs> obs = dao.getSearchResults(theParams, matchingResourceIds);\n+\t\tCollection<Obs> obs = dao.getSearchResults(theParams);\n \t\t\n \t\tassertThat(obs, notNullValue());\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "83a893a385ea7982bbf935f9b0c96e2e9a544eb8", "committedDate": "2020-03-25 13:52:10 -0400", "message": "FM2-88 Enhance Observation Search (#99)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "committedDate": "2020-04-02 21:36:51 +0300", "message": "FM2-135 Fix NPE when search by subject UUID (#133)"}, {"oid": "c6fc6f1d57b0cf9911e070be1059961e410f558a", "committedDate": "2020-04-06 13:15:51 +0300", "message": "mvn formatting change (#134)"}, {"oid": "2f1f0aa9c217f4d5aa15ef7c87ea425627eaf3c6", "committedDate": "2020-04-24 08:55:02 -0400", "message": "Fixed precision errors in date-based search (#145)"}, {"oid": "1bf7948faf4907937387835e091b4a40018a8654", "committedDate": "2020-04-30 00:19:06 +0300", "message": "Paging Implementation (#146)"}, {"oid": "78c532a264fd9f7f44bd2d6e32bbf1b45ea92f5b", "committedDate": "2020-06-25 15:22:32 -0400", "message": "Fixes for numerous compiler warnings"}, {"oid": "451f09e30bd28ef2b26a5697560871d022cf1e43", "committedDate": "2020-06-29 14:41:36 +0300", "message": "FM2-234: Ensure search returns unique results (#233)"}, {"oid": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "committedDate": "2020-08-05 16:40:51 +0300", "message": "Integration tests (#267)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"oid": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "message": "FM2-79 Improve Search for Encounter", "committedDate": "2020-02-26T13:34:43Z", "type": "commit"}, {"oid": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "message": "FM2-79 Improve Search for Encounter", "committedDate": "2020-02-26T13:34:43Z", "type": "forcePushed"}, {"oid": "abfdde871aa48708a002414bac97c705dac8df9c", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/abfdde871aa48708a002414bac97c705dac8df9c", "message": "Merge branch 'master' into FM2-79", "committedDate": "2020-02-26T14:03:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNTQyOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384535428", "body": "Can we simplify the `ilike()` construction to just `propertyLike(\"l.cityVillage\", locationReference.getValue())`?", "bodyText": "Can we simplify the ilike() construction to just propertyLike(\"l.cityVillage\", locationReference.getValue())?", "bodyHTML": "<p dir=\"auto\">Can we simplify the <code>ilike()</code> construction to just <code>propertyLike(\"l.cityVillage\", locationReference.getValue())</code>?</p>", "author": "ibacher", "createdAt": "2020-02-26T14:42:55Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -440,6 +442,73 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t});\n \t}\n \t\n+\tprotected void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n+\t\tif (locationReference != null) {\n+\t\t\tcriteria.createAlias(\"location\", \"l\");\n+\t\t\t\n+\t\t\tif (locationReference.getChain() != null) {\n+\t\t\t\tswitch (locationReference.getChain()) {\n+\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));", "originalCommit": "abfdde871aa48708a002414bac97c705dac8df9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java\nindex 86ba24d7..7b4f31a4 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java\n", "chunk": "@@ -449,16 +449,16 @@ public abstract class BaseDaoImpl {\n \t\t\tif (locationReference.getChain() != null) {\n \t\t\t\tswitch (locationReference.getChain()) {\n \t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", locationReference.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", locationReference.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tpropertyLike(\"l.postalCode\", locationReference.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tpropertyLike(\"l.country\", locationReference.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase \"\":\n \t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java\nindex 86ba24d7..7b4f31a4 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java\n", "chunk": "@@ -449,16 +449,16 @@ public abstract class BaseDaoImpl {\n \t\t\tif (locationReference.getChain() != null) {\n \t\t\t\tswitch (locationReference.getChain()) {\n \t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", locationReference.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", locationReference.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tpropertyLike(\"l.postalCode\", locationReference.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tpropertyLike(\"l.country\", locationReference.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase \"\":\n \t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java\nindex 7b4f31a4..e12f86ac 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java\n", "chunk": "@@ -424,76 +443,84 @@ public abstract class BaseDaoImpl {\n \t\treturn handleOrListParam(gender, token -> {\n \t\t\ttry {\n \t\t\t\tAdministrativeGender administrativeGender = AdministrativeGender.fromCode(token.getValue());\n+\t\t\t\tif (administrativeGender == null) {\n+\t\t\t\t\treturn Optional.of(isNull(propertyName));\n+\t\t\t\t}\n \t\t\t\tswitch (administrativeGender) {\n \t\t\t\t\tcase MALE:\n \t\t\t\t\t\treturn Optional.of(ilike(propertyName, \"M\", MatchMode.EXACT));\n \t\t\t\t\tcase FEMALE:\n \t\t\t\t\t\treturn Optional.of(ilike(propertyName, \"F\", MatchMode.EXACT));\n \t\t\t\t\tcase OTHER:\n-\t\t\t\t\t\treturn Optional.of(not(or(eq(propertyName, \"M\"), eq(propertyName, \"F\"))));\n \t\t\t\t\tcase UNKNOWN:\n \t\t\t\t\tcase NULL:\n-\t\t\t\t\t\treturn Optional.empty();\n+\t\t\t\t\t\treturn Optional.of(isNull(propertyName));\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (FHIRException ignored) {}\n \t\t\t\n-\t\t\treturn Optional.empty();\n+\t\t\treturn Optional.of(ilike(propertyName, token.getValue(), MatchMode.EXACT));\n \t\t});\n \t}\n \t\n-\tprotected void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n-\t\tif (locationReference != null) {\n-\t\t\tcriteria.createAlias(\"location\", \"l\");\n-\t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n-\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tpropertyLike(\"l.postalCode\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tpropertyLike(\"l.country\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n+\tprotected Optional<Criterion> handleLocationReference(@NotNull String locationAlias,\n+\t        ReferenceAndListParam locationReference) {\n+\t\tif (locationReference == null) {\n+\t\t\treturn Optional.empty();\n \t\t}\n+\t\t\n+\t\treturn handleAndListParam(locationReference, token -> {\n+\t\t\tswitch (token.getChain()) {\n+\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\treturn Optional.of(ilike(String.format(\"%s.cityVillage\", locationAlias), token.getValue()));\n+\t\t\t\tcase Location.SP_ADDRESS_STATE:\n+\t\t\t\t\treturn Optional.of(ilike(String.format(\"%s.stateProvince\", locationAlias), token.getValue()));\n+\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n+\t\t\t\t\treturn Optional.of(ilike(String.format(\"%s.postalCode\", locationAlias), token.getValue()));\n+\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n+\t\t\t\t\treturn Optional.of(ilike(String.format(\"%s.country\", locationAlias), token.getValue()));\n+\t\t\t\tcase \"\":\n+\t\t\t\t\treturn Optional.of(eq(\"l.uuid\", token.getValue()));\n+\t\t\t}\n+\t\t\t\n+\t\t\treturn Optional.empty();\n+\t\t});\n+\t\t\n \t}\n \t\n-\tprotected void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n-\t\tif (participantReference != null) {\n+\tprotected void handleParticipantReference(Criteria criteria, ReferenceAndListParam participantReference) {\n+\t\tif (participantReference != null && !containsAlias(criteria, \"ep\")) {\n \t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n \t\t\t\n-\t\t\tif (participantReference.getChain() != null) {\n-\t\t\t\tswitch (participantReference.getChain()) {\n+\t\t\thandleAndListParam(participantReference, participantToken -> {\n+\t\t\t\tswitch (participantToken.getChain()) {\n \t\t\t\t\tcase Practitioner.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n+\t\t\t\t\t\tif (!containsAlias(criteria, \"p\"))\n+\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantToken.getValue()));\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Practitioner.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n-\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tif ((!containsAlias(criteria, \"pro\")\n+\t\t\t\t\t\t        && (!containsAlias(criteria, \"ps\") && (!containsAlias(criteria, \"pn\")))))\n+\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n+\t\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\")\n+\t\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantToken.getValue(), MatchMode.START));\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Practitioner.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n-\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tif ((!containsAlias(criteria, \"pro\")\n+\t\t\t\t\t\t        && (!containsAlias(criteria, \"ps\") && (!containsAlias(criteria, \"pn\")))))\n+\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n+\t\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\")\n+\t\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantToken.getValue(), MatchMode.START));\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Practitioner.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\").createAlias(\"ps.names\",\n-\t\t\t\t\t\t    \"pn\");\n+\t\t\t\t\t\tif ((!containsAlias(criteria, \"pro\")\n+\t\t\t\t\t\t        && (!containsAlias(criteria, \"ps\") && (!containsAlias(criteria, \"pn\")))))\n+\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n+\t\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\");\n \t\t\t\t\t\t\n \t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n \t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n+\t\t\t\t\t\tfor (String token : StringUtils.split(participantToken.getValue(), \" \\t,\")) {\n \t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n \t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n \t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n", "next_change": {"commit": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "changed_code": [{"header": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java\nindex e12f86ac..dcd3d4b5 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java\n", "chunk": "@@ -493,44 +553,53 @@ public abstract class BaseDaoImpl {\n \t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n \t\t\t\n \t\t\thandleAndListParam(participantReference, participantToken -> {\n-\t\t\t\tswitch (participantToken.getChain()) {\n-\t\t\t\t\tcase Practitioner.SP_IDENTIFIER:\n-\t\t\t\t\t\tif (!containsAlias(criteria, \"p\"))\n-\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantToken.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_GIVEN:\n-\t\t\t\t\t\tif ((!containsAlias(criteria, \"pro\")\n-\t\t\t\t\t\t        && (!containsAlias(criteria, \"ps\") && (!containsAlias(criteria, \"pn\")))))\n-\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n-\t\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantToken.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_FAMILY:\n-\t\t\t\t\t\tif ((!containsAlias(criteria, \"pro\")\n-\t\t\t\t\t\t        && (!containsAlias(criteria, \"ps\") && (!containsAlias(criteria, \"pn\")))))\n-\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n-\t\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantToken.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_NAME:\n-\t\t\t\t\t\tif ((!containsAlias(criteria, \"pro\")\n-\t\t\t\t\t\t        && (!containsAlias(criteria, \"ps\") && (!containsAlias(criteria, \"pn\")))))\n-\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n-\t\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(participantToken.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantToken.getValue()));\n-\t\t\t\t\t\tbreak;\n+\t\t\t\tif (participantToken.getChain() != null) {\n+\t\t\t\t\tswitch (participantToken.getChain()) {\n+\t\t\t\t\t\tcase Practitioner.SP_IDENTIFIER:\n+\t\t\t\t\t\t\tif (!containsAlias(criteria, \"p\")) {\n+\t\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcriteria.add(ilike(\"p.identifier\", participantToken.getValue()));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Practitioner.SP_GIVEN:\n+\t\t\t\t\t\t\tif ((!containsAlias(criteria, \"pro\")\n+\t\t\t\t\t\t\t        && (!containsAlias(criteria, \"ps\") && (!containsAlias(criteria, \"pn\"))))) {\n+\t\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n+\t\t\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcriteria.add(ilike(\"pn.givenName\", participantToken.getValue(), MatchMode.START));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Practitioner.SP_FAMILY:\n+\t\t\t\t\t\t\tif ((!containsAlias(criteria, \"pro\")\n+\t\t\t\t\t\t\t        && (!containsAlias(criteria, \"ps\") && (!containsAlias(criteria, \"pn\"))))) {\n+\t\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n+\t\t\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcriteria.add(ilike(\"pn.familyName\", participantToken.getValue(), MatchMode.START));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Practitioner.SP_NAME:\n+\t\t\t\t\t\t\tif ((!containsAlias(criteria, \"pro\")\n+\t\t\t\t\t\t\t        && (!containsAlias(criteria, \"ps\") && (!containsAlias(criteria, \"pn\"))))) {\n+\t\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n+\t\t\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tfor (String token : StringUtils.split(participantToken.getValue(), \" \\t,\")) {\n+\t\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n+\t\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n+\t\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!containsAlias(criteria, \"pro\")) {\n+\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\");\n+\t\t\t\t\t}\n+\t\t\t\t\tcriteria.add(eq(\"pro.uuid\", participantToken.getValue()));\n \t\t\t\t}\n \t\t\t\t\n \t\t\t\treturn Optional.empty();\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "d82c1aa02f98a10b1fd31a145a52c2c0c05c2535", "committedDate": "2020-02-27 15:37:26 -0500", "message": "FM2-81: Improving Search for Person Resource (#85)"}, {"oid": "e9401621a332f58c8d29fac4e5bf47b9bc7a414f", "committedDate": "2020-03-09 09:40:26 +0300", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource (#97)"}, {"oid": "fcd8ed1ad05ae3efb3f99fbe6f2e81675b12cd3d", "committedDate": "2020-03-10 14:29:51 +0300", "message": "FM2-100: Return an empty list when searching by an invalid gender code (#102)"}, {"oid": "2762293324679f27e62707fbf2df15a63a8f3aa0", "committedDate": "2020-03-11 13:32:43 -0400", "message": "FM2-80: Improve Search for Location Resource (#98)"}, {"oid": "9b75b18ff10c80de5e20b6be2972330df0111d77", "committedDate": "2020-03-16 22:51:10 +0300", "message": "FM2-105 : Implement search functionality for medication resource (#112)"}, {"oid": "4e5301b206f84f812496ddd570c26f9e813be5fa", "committedDate": "2020-03-17 16:00:08 -0400", "message": "FM2-95: Implement sorting for Patient Resource (#95)"}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "83a893a385ea7982bbf935f9b0c96e2e9a544eb8", "committedDate": "2020-03-25 13:52:10 -0400", "message": "FM2-88 Enhance Observation Search (#99)"}, {"oid": "3d8e0f2bb279d01da2a5d39feef6014b98e533a2", "committedDate": "2020-03-26 15:36:31 +0300", "message": "Implementation of several parameters for Condition search (api-2.2) (#119)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "committedDate": "2020-04-02 21:36:51 +0300", "message": "FM2-135 Fix NPE when search by subject UUID (#133)"}, {"oid": "2f1f0aa9c217f4d5aa15ef7c87ea425627eaf3c6", "committedDate": "2020-04-24 08:55:02 -0400", "message": "Fixed precision errors in date-based search (#145)"}, {"oid": "6996e2c63677474bda58d44eb112d4e87af54667", "committedDate": "2020-04-29 09:05:38 +0300", "message": "Add naming convention documentation and change classes to conform (#150)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNjA2NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384536064", "body": "We should still have tests making use of `WRONG_PATIENT_IDENTIFIER`", "bodyText": "We should still have tests making use of WRONG_PATIENT_IDENTIFIER", "bodyHTML": "<p dir=\"auto\">We should still have tests making use of <code>WRONG_PATIENT_IDENTIFIER</code></p>", "author": "ibacher", "createdAt": "2020-02-26T14:43:54Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -40,10 +47,28 @@\n \t\n \tprivate static final String PATIENT_IDENTIFIER = \"1000WF\";\n \t\n-\tprivate static final String WRONG_PATIENT_IDENTIFIER = \"12334HD\";", "originalCommit": "abfdde871aa48708a002414bac97c705dac8df9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 0837e3a5..d4528652 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -47,6 +48,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \tprivate static final String PATIENT_IDENTIFIER = \"1000WF\";\n \t\n+\tprivate static final String WRONG_PATIENT_IDENTIFIER = \"12334HD\";\n+\t\n \tprivate static final String PATIENT_FULL_NAME = \"Mr. John Doe\";\n \t\n \tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";\n", "next_change": {"commit": "ee11aeee393035fc7a351c44a075cc23ae6fa84b", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex d4528652..af62759c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -52,6 +52,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \tprivate static final String PATIENT_FULL_NAME = \"Mr. John Doe\";\n \t\n+\tprivate static final String PARTICIPANT_FULL_NAME = \"John Doe\";\n+\t\n \tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";\n \t\n \tprivate static final String ENCOUNTER_DATETIME = \"2005-01-01T00:00:00.0\";\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 0837e3a5..af62759c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -47,8 +48,12 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \tprivate static final String PATIENT_IDENTIFIER = \"1000WF\";\n \t\n+\tprivate static final String WRONG_PATIENT_IDENTIFIER = \"12334HD\";\n+\t\n \tprivate static final String PATIENT_FULL_NAME = \"Mr. John Doe\";\n \t\n+\tprivate static final String PARTICIPANT_FULL_NAME = \"John Doe\";\n+\t\n \tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";\n \t\n \tprivate static final String ENCOUNTER_DATETIME = \"2005-01-01T00:00:00.0\";\n", "next_change": {"commit": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af62759c..7f3b9850 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -52,8 +54,12 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \tprivate static final String PATIENT_FULL_NAME = \"Mr. John Doe\";\n \t\n+\tprivate static final String PATIENT_UUID = \"a194be38-271a-44cb-ba3f-f2dbf4831fe9\";\n+\t\n \tprivate static final String PARTICIPANT_FULL_NAME = \"John Doe\";\n \t\n+\tprivate static final String PARTICIPANT_UUID = \"c2879800-cca9-11e0-9572-0800200c9a66\";\n+\t\n \tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";\n \t\n \tprivate static final String ENCOUNTER_DATETIME = \"2005-01-01T00:00:00.0\";\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 7f3b9850..734cf9f8 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -44,48 +29,10 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \tprivate static final String ENCOUNTER_UUID = \"430bbb70-6a9c-4e1e-badb-9d1034b1b5e9\";\n \t\n-\tprivate static final String ENC_UUID = \"e403fafb-e5e4-42d0-9d11-4f52e89d148c\";\n-\t\n \tprivate static final String UNKNOWN_ENCOUNTER_UUID = \"xx923xx-3423kk-2323-232jk23\";\n \t\n-\tprivate static final String PATIENT_IDENTIFIER = \"1000WF\";\n-\t\n-\tprivate static final String WRONG_PATIENT_IDENTIFIER = \"12334HD\";\n-\t\n-\tprivate static final String PATIENT_FULL_NAME = \"Mr. John Doe\";\n-\t\n-\tprivate static final String PATIENT_UUID = \"a194be38-271a-44cb-ba3f-f2dbf4831fe9\";\n-\t\n-\tprivate static final String PARTICIPANT_FULL_NAME = \"John Doe\";\n-\t\n-\tprivate static final String PARTICIPANT_UUID = \"c2879800-cca9-11e0-9572-0800200c9a66\";\n-\t\n \tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";\n \t\n-\tprivate static final String ENCOUNTER_DATETIME = \"2005-01-01T00:00:00.0\";\n-\t\n-\tprivate static final String ENCOUNTER_DATE = \"2005-01-01 00:00:00.0\";\n-\t\n-\tprivate static final String PATIENT_GIVEN_NAME = \"John\";\n-\t\n-\tprivate static final String PATIENT_FAMILY_NAME = \"Doe\";\n-\t\n-\tprivate static final String ENCOUNTER_LOCATION_CITY = \"Boston\";\n-\t\n-\tprivate static final String ENCOUNTER_LOCATION_COUNTRY = \"USA\";\n-\t\n-\tprivate static final String ENCOUNTER_LOCATION_STATE = \"MA\";\n-\t\n-\tprivate static final String ENCOUNTER_LOCATION_POSTAL_CODE = \"02115\";\n-\t\n-\tprivate static final String ENCOUNTER_LOCATION_UUID = \"be69741b-29e9-49a1-adc9-2a726e6610e4\";\n-\t\n-\tprivate static final String PARTICIPANT_IDENTIFIER = \"1000WF\";\n-\t\n-\tprivate static final String PARTICIPANT_FAMILY_NAME = \"Doe\";\n-\t\n-\tprivate static final String PARTICIPANT_GIVEN_NAME = \"John\";\n-\t\n \t@Autowired\n \t@Qualifier(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n", "next_change": {"commit": "c38967adadebcf9596996a5e27236ddaf6bea433", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 734cf9f8..af199212 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -31,6 +41,10 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \tprivate static final String UNKNOWN_ENCOUNTER_UUID = \"xx923xx-3423kk-2323-232jk23\";\n \t\n+\tprivate static final String ENCOUNTER_WITH_DRUG_ORDERS = \"6519d653-393b-4118-9c83-a3715b82d4ac\"; // 3 in standard test dataset\n+\t\n+\tprivate static final String ENCOUNTER_WITH_NO_DRUG_ORDERS = \"eec646cb-c847-45a7-98bc-91c8c4f70add\"; // 4 in standard test dataset\n+\t\n \tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";\n \t\n \t@Autowired\n", "next_change": {"commit": "0aad342e90225196459128b33da0426bef9b7b5c", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af199212..4ecc47f7 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -45,6 +44,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \tprivate static final String ENCOUNTER_WITH_NO_DRUG_ORDERS = \"eec646cb-c847-45a7-98bc-91c8c4f70add\"; // 4 in standard test dataset\n \t\n+\tprivate static final String ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER = \"fe98c4f0-0ceb-4c61-bd27-a013a90d4d5e\";\n+\t\n \tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";\n \t\n \t@Autowired\n", "next_change": {"commit": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 4ecc47f7..9280cc2b 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -40,11 +42,15 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \tprivate static final String UNKNOWN_ENCOUNTER_UUID = \"xx923xx-3423kk-2323-232jk23\";\n \t\n+\tprivate static final Integer ENCOUNTER_WITH_DRUG_ORDERS_ID = 3;\n+\t\n \tprivate static final String ENCOUNTER_WITH_DRUG_ORDERS = \"6519d653-393b-4118-9c83-a3715b82d4ac\"; // 3 in standard test dataset\n \t\n+\tprivate static final Integer ENCOUNTER_WITH_NO_DRUG_ORDERS_ID = 4;\n+\t\n \tprivate static final String ENCOUNTER_WITH_NO_DRUG_ORDERS = \"eec646cb-c847-45a7-98bc-91c8c4f70add\"; // 4 in standard test dataset\n \t\n-\tprivate static final String ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER = \"fe98c4f0-0ceb-4c61-bd27-a013a90d4d5e\";\n+\tprivate static final Integer ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER = 2002;\n \t\n \tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";\n \t\n", "next_change": {"commit": "4af8727c8bc5f47f58060b0efc6d07a5b1e6e565", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 9280cc2b..b06b664e 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -52,6 +52,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \tprivate static final Integer ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER = 2002;\n \t\n+\tprivate static final Integer ENCOUNTER_WITH_ONLY_INACTIVE_DRUG_ORDER = 2003;\n+\t\n \tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";\n \t\n \t@Autowired\n", "next_change": {"commit": "dda1d10362cf03b61607a31101e3bf33f9439796", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex b06b664e..4a9b9f36 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -52,7 +53,9 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \tprivate static final Integer ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER = 2002;\n \t\n-\tprivate static final Integer ENCOUNTER_WITH_ONLY_INACTIVE_DRUG_ORDER = 2003;\n+\tprivate static final Integer ENCOUNTER_WITH_ONLY_CANCELlED_DRUG_ORDER = 2003;\n+\t\n+\tprivate static final Integer ENCOUNTER_WITH_ONLY_EXPIRED_DRUG_ORDER = 2004;\n \t\n \tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";\n \t\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "committedDate": "2020-04-02 21:36:51 +0300", "message": "FM2-135 Fix NPE when search by subject UUID (#133)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "d4e4e1278fd2bdd0603e05e20f793d93219014b7", "committedDate": "2022-05-20 15:04:26 -0400", "message": "Add additional display text to concept and medication resources (#403)"}, {"oid": "0aad342e90225196459128b33da0426bef9b7b5c", "committedDate": "2022-11-18 11:03:04 -0500", "message": "FM2-532: MedicationRequest endpoint should not return Discontinue Orders (#447)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "4af8727c8bc5f47f58060b0efc6d07a5b1e6e565", "committedDate": "2022-12-05 15:36:20 -0500", "message": "FM2-476: Add support for searching MedicationRequests based on status (#450)"}, {"oid": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "committedDate": "2022-12-06 14:36:05 -0500", "message": "FM2-535: BaseFHIRDao should set date voided/date retired and voided b\u2026 (#451)"}, {"oid": "dda1d10362cf03b61607a31101e3bf33f9439796", "committedDate": "2023-02-21 14:09:51 -0500", "message": "FM2-558: Create new named query \"encountersWithMedicationRequests\" in EncounterFhirResource Provider (#459)"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNzk4NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384537984", "body": "We shouldn't need the encounter data XML file anywhere outside of the DAO tests. Everything else should be mocked.", "bodyText": "We shouldn't need the encounter data XML file anywhere outside of the DAO tests. Everything else should be mocked.", "bodyHTML": "<p dir=\"auto\">We shouldn't need the encounter data XML file anywhere outside of the DAO tests. Everything else should be mocked.</p>", "author": "ibacher", "createdAt": "2020-02-26T14:46:32Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java", "diffHunk": "@@ -34,6 +46,28 @@\n \t\n \tprivate static final String PATIENT_IDENTIFIER = \"1003GH\";\n \t\n+\tprivate static final String PATIENT_FULL_NAME = \"Mr. John Doe\";\n+\t\n+\tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";", "originalCommit": "abfdde871aa48708a002414bac97c705dac8df9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 5531af36..9a241647 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -44,30 +44,14 @@ public class FhirEncounterServiceImplTest {\n \t\n \tprivate static final String ENCOUNTER_UUID = \"344kk343-45hj45-34jk34-34ui33\";\n \t\n-\tprivate static final String PATIENT_IDENTIFIER = \"1003GH\";\n-\t\n-\tprivate static final String PATIENT_FULL_NAME = \"Mr. John Doe\";\n-\t\n-\tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";\n-\t\n \tprivate static final String ENCOUNTER_DATETIME = \"2005-01-01T00:00:00.0\";\n \t\n-\tprivate static final String ENCOUNTER_DATE = \"2005-01-01 00:00:00.0\";\n-\t\n-\tprivate static final String PATIENT_GIVEN_NAME = \"John\";\n-\t\n \tprivate static final String PATIENT_FAMILY_NAME = \"Doe\";\n \t\n-\tprivate static final String ADDRESS_CITY = \"Boston\";\n-\t\n \tprivate static final String ENCOUNTER_ADDRESS_STATE = \"MA\";\n \t\n \tprivate static final String PARTICIPANT_IDENTIFIER = \"1\";\n \t\n-\tprivate static final String PARTICIPANT_FAMILY_NAME = \"Tim\";\n-\t\n-\tprivate static final String PARTICIPANT_GIVEN_NAME = \"Him\";\n-\t\n \t@Mock\n \tprivate FhirEncounterDao dao;\n \t\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 5531af36..f6bb0a4a 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -44,30 +44,14 @@ public class FhirEncounterServiceImplTest {\n \t\n \tprivate static final String ENCOUNTER_UUID = \"344kk343-45hj45-34jk34-34ui33\";\n \t\n-\tprivate static final String PATIENT_IDENTIFIER = \"1003GH\";\n-\t\n-\tprivate static final String PATIENT_FULL_NAME = \"Mr. John Doe\";\n-\t\n-\tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";\n-\t\n \tprivate static final String ENCOUNTER_DATETIME = \"2005-01-01T00:00:00.0\";\n \t\n-\tprivate static final String ENCOUNTER_DATE = \"2005-01-01 00:00:00.0\";\n-\t\n-\tprivate static final String PATIENT_GIVEN_NAME = \"John\";\n-\t\n \tprivate static final String PATIENT_FAMILY_NAME = \"Doe\";\n \t\n-\tprivate static final String ADDRESS_CITY = \"Boston\";\n-\t\n \tprivate static final String ENCOUNTER_ADDRESS_STATE = \"MA\";\n \t\n \tprivate static final String PARTICIPANT_IDENTIFIER = \"1\";\n \t\n-\tprivate static final String PARTICIPANT_FAMILY_NAME = \"Tim\";\n-\t\n-\tprivate static final String PARTICIPANT_GIVEN_NAME = \"Him\";\n-\t\n \t@Mock\n \tprivate FhirEncounterDao dao;\n \t\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex f6bb0a4a..50a94097 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -52,12 +60,19 @@ public class FhirEncounterServiceImplTest {\n \t\n \tprivate static final String PARTICIPANT_IDENTIFIER = \"1\";\n \t\n+\tprivate static final int START_INDEX = 0;\n+\t\n+\tprivate static final int END_INDEX = 10;\n+\t\n \t@Mock\n \tprivate FhirEncounterDao dao;\n \t\n \t@Mock\n \tprivate EncounterTranslator encounterTranslator;\n \t\n+\t@Mock\n+\tprivate SearchQuery<Encounter, org.hl7.fhir.r4.model.Encounter, FhirEncounterDao, EncounterTranslator> searchQuery;\n+\t\n \tprivate FhirEncounterServiceImpl encounterService;\n \t\n \tprivate org.openmrs.Encounter openMrsEncounter;\n", "next_change": {"commit": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 50a94097..84050b40 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -70,6 +76,9 @@ public class FhirEncounterServiceImplTest {\n \t@Mock\n \tprivate EncounterTranslator encounterTranslator;\n \t\n+\t@Mock\n+\tprivate FhirGlobalPropertyService globalPropertyService;\n+\t\n \t@Mock\n \tprivate SearchQuery<Encounter, org.hl7.fhir.r4.model.Encounter, FhirEncounterDao, EncounterTranslator> searchQuery;\n \t\n", "next_change": {"commit": "66612c009b372d68c58a85e8507f51e57c96ca71", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 84050b40..cd17528a 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -74,13 +76,19 @@ public class FhirEncounterServiceImplTest {\n \tprivate FhirEncounterDao dao;\n \t\n \t@Mock\n-\tprivate EncounterTranslator encounterTranslator;\n+\tprivate FhirVisitDao visitDao;\n+\t\n+\t@Mock\n+\tprivate EncounterTranslator<Encounter> encounterTranslator;\n+\t\n+\t@Mock\n+\tprivate EncounterTranslator<Visit> visitTranslator;\n \t\n \t@Mock\n \tprivate FhirGlobalPropertyService globalPropertyService;\n \t\n \t@Mock\n-\tprivate SearchQuery<Encounter, org.hl7.fhir.r4.model.Encounter, FhirEncounterDao, EncounterTranslator> searchQuery;\n+\tprivate SearchQuery<Encounter, org.hl7.fhir.r4.model.Encounter, FhirEncounterDao, EncounterTranslator<Encounter>> searchQuery;\n \t\n \tprivate FhirEncounterServiceImpl encounterService;\n \t\n", "next_change": {"commit": "036251c5504465c191935dbfe00fb4aa7b44fc83", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex cd17528a..9f58e1fb 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -75,20 +74,20 @@ public class FhirEncounterServiceImplTest {\n \t@Mock\n \tprivate FhirEncounterDao dao;\n \t\n-\t@Mock\n-\tprivate FhirVisitDao visitDao;\n-\t\n \t@Mock\n \tprivate EncounterTranslator<Encounter> encounterTranslator;\n \t\n \t@Mock\n-\tprivate EncounterTranslator<Visit> visitTranslator;\n+\tprivate FhirVisitServiceImpl visitService;\n \t\n \t@Mock\n \tprivate FhirGlobalPropertyService globalPropertyService;\n \t\n \t@Mock\n-\tprivate SearchQuery<Encounter, org.hl7.fhir.r4.model.Encounter, FhirEncounterDao, EncounterTranslator<Encounter>> searchQuery;\n+\tprivate SearchQueryInclude<org.hl7.fhir.r4.model.Encounter> searchQueryInclude;\n+\t\n+\t@Mock\n+\tprivate SearchQuery<Encounter, org.hl7.fhir.r4.model.Encounter, FhirEncounterDao, EncounterTranslator<Encounter>, SearchQueryInclude<org.hl7.fhir.r4.model.Encounter>> searchQuery;\n \t\n \tprivate FhirEncounterServiceImpl encounterService;\n \t\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "451f09e30bd28ef2b26a5697560871d022cf1e43", "committedDate": "2020-06-29 14:41:36 +0300", "message": "FM2-234: Ensure search returns unique results (#233)"}, {"oid": "327efb2e413db0965f3e36da0ff8071e949259bf", "committedDate": "2020-07-07 08:44:53 +0300", "message": "FM2-169: Add search for _id and _lastUpdated (#241)"}, {"oid": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "committedDate": "2020-08-05 16:40:51 +0300", "message": "Integration tests (#267)"}, {"oid": "66612c009b372d68c58a85e8507f51e57c96ca71", "committedDate": "2020-08-21 20:28:30 +0000", "message": "FM2-302: Map Openmrs Visit to Encounter resource (#294)"}, {"oid": "d5f5b43bcf6b001de897adbdc85fb9bf5a833cf4", "committedDate": "2020-08-28 14:15:14 -0400", "message": "Refactoring: Move deletion and validity checks to the service layer"}, {"oid": "036251c5504465c191935dbfe00fb4aa7b44fc83", "committedDate": "2020-10-06 14:41:55 -0400", "message": "FM2-253:  Refactor module to support _include"}, {"oid": "f5f5d49ec263597b6e85b2d8f911304b415cee8d", "committedDate": "2020-10-06 14:41:57 -0400", "message": "FM2-258: Update Encounter resource to support _include"}, {"oid": "d6500b5f41d5208885b79b4690c050ed04ec7a8b", "committedDate": "2020-10-06 14:41:58 -0400", "message": "FM2-271: Update Encounter resource to support _revinclude"}, {"oid": "aecec9017078ad1ef69f862bcf599bc2e9308d99", "committedDate": "2021-02-12 14:48:44 -0500", "message": "Refactor: FhirDao#getSearchResults() shouldn't need any paging parameters"}, {"oid": "6de992e4950415eb8663e3da65525e1fdc0862cd", "committedDate": "2021-04-27 16:25:33 -0400", "message": "FM2-352: Add support for creating encounters via the FHIR API (#334)"}, {"oid": "086a7d29b668ef06f5ab3244d1efafe447029b00", "committedDate": "2021-08-19 12:09:42 -0400", "message": "FM2-425: Support for instance-level $everything operation on Encounters in R4 (#367)"}, {"oid": "ee5b1c31e77a36d6b7ae8d0d95d215f1283f6fa6", "committedDate": "2021-10-08 09:51:31 -0400", "message": "FM2-431: Add support to search encounters by EncounterType (#371)"}, {"oid": "c31798df0f784d23e375644ddd6901949a6dd55e", "committedDate": "2022-02-14 09:14:38 -0500", "message": "FM2-408: Encounters should be sortable by date (#378)"}, {"oid": "290688fc9189b0fa108c77f09f46c2560292e84d", "committedDate": "2022-03-24 14:21:08 -0400", "message": "FM2-396: Allow Searching for Visits (#384)"}, {"oid": "860acf1731c1aefa4f83f7f3439a13861af3941f", "committedDate": "2022-03-29 16:21:15 -0400", "message": "Refactor: delete operation does not require returning the resource"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzODQ1NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384538455", "body": "Can these statements be ordered in a more logical fashion? This is very confusing to read.", "bodyText": "Can these statements be ordered in a more logical fashion? This is very confusing to read.", "bodyHTML": "<p dir=\"auto\">Can these statements be ordered in a more logical fashion? This is very confusing to read.</p>", "author": "ibacher", "createdAt": "2020-02-26T14:47:16Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java", "diffHunk": "@@ -70,16 +104,84 @@ public void shouldGetEncounterByUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\twhen(dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(openMrsEncounter));\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByDate() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();", "originalCommit": "abfdde871aa48708a002414bac97c705dac8df9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 5531af36..8df9ed81 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -95,9 +82,9 @@ public class FhirEncounterServiceImplTest {\n \t\n \t@Test\n \tpublic void shouldGetEncounterByUuid() {\n-\t\twhen(dao.getEncounterByUuid(ENCOUNTER_UUID)).thenReturn(openMrsEncounter);\n+\t\twhen(dao.get(ENCOUNTER_UUID)).thenReturn(openMrsEncounter);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n-\t\torg.hl7.fhir.r4.model.Encounter fhirEncounter = encounterService.getEncounterByUuid(ENCOUNTER_UUID);\n+\t\torg.hl7.fhir.r4.model.Encounter fhirEncounter = encounterService.get(ENCOUNTER_UUID);\n \t\tassertThat(fhirEncounter, notNullValue());\n \t\tassertThat(fhirEncounter.getId(), notNullValue());\n \t\tassertThat(fhirEncounter.getId(), equalTo(ENCOUNTER_UUID));\n", "next_change": {"commit": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 8df9ed81..84050b40 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -92,21 +118,28 @@ public class FhirEncounterServiceImplTest {\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByDate() {\n-\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tList<Encounter> encounters = new ArrayList<>();\n \t\tDateRangeParam dateRangeParam = new DateRangeParam(new DateParam(ENCOUNTER_DATETIME));\n \t\t\n \t\tencounters.add(openMrsEncounter);\n \t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.DATE_RANGE_SEARCH_HANDLER,\n+\t\t    dateRangeParam);\n+\t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n-\t\twhen(dao.searchForEncounters(argThat(is(dateRangeParam)), any(), any(), any())).thenReturn(encounters);\n+\t\twhen(dao.getSearchResults(any(), any(), anyInt(), anyInt())).thenReturn(encounters);\n+\t\twhen(dao.getSearchResultUuids(any())).thenReturn(Collections.singletonList(ENCOUNTER_UUID));\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator, globalPropertyService));\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(dateRangeParam, null,\n-\t\t    null, null);\n+\t\tIBundleProvider results = encounterService.searchForEncounters(dateRangeParam, null, null, null, null, null);\n \t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getId(), equalTo(ENCOUNTER_UUID));\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(((org.hl7.fhir.r4.model.Encounter) resultList.iterator().next()).getId(), equalTo(ENCOUNTER_UUID));\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "451f09e30bd28ef2b26a5697560871d022cf1e43", "committedDate": "2020-06-29 14:41:36 +0300", "message": "FM2-234: Ensure search returns unique results (#233)"}, {"oid": "327efb2e413db0965f3e36da0ff8071e949259bf", "committedDate": "2020-07-07 08:44:53 +0300", "message": "FM2-169: Add search for _id and _lastUpdated (#241)"}, {"oid": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "committedDate": "2020-08-05 16:40:51 +0300", "message": "Integration tests (#267)"}, {"oid": "66612c009b372d68c58a85e8507f51e57c96ca71", "committedDate": "2020-08-21 20:28:30 +0000", "message": "FM2-302: Map Openmrs Visit to Encounter resource (#294)"}, {"oid": "d5f5b43bcf6b001de897adbdc85fb9bf5a833cf4", "committedDate": "2020-08-28 14:15:14 -0400", "message": "Refactoring: Move deletion and validity checks to the service layer"}, {"oid": "036251c5504465c191935dbfe00fb4aa7b44fc83", "committedDate": "2020-10-06 14:41:55 -0400", "message": "FM2-253:  Refactor module to support _include"}, {"oid": "f5f5d49ec263597b6e85b2d8f911304b415cee8d", "committedDate": "2020-10-06 14:41:57 -0400", "message": "FM2-258: Update Encounter resource to support _include"}, {"oid": "d6500b5f41d5208885b79b4690c050ed04ec7a8b", "committedDate": "2020-10-06 14:41:58 -0400", "message": "FM2-271: Update Encounter resource to support _revinclude"}, {"oid": "aecec9017078ad1ef69f862bcf599bc2e9308d99", "committedDate": "2021-02-12 14:48:44 -0500", "message": "Refactor: FhirDao#getSearchResults() shouldn't need any paging parameters"}, {"oid": "6de992e4950415eb8663e3da65525e1fdc0862cd", "committedDate": "2021-04-27 16:25:33 -0400", "message": "FM2-352: Add support for creating encounters via the FHIR API (#334)"}, {"oid": "086a7d29b668ef06f5ab3244d1efafe447029b00", "committedDate": "2021-08-19 12:09:42 -0400", "message": "FM2-425: Support for instance-level $everything operation on Encounters in R4 (#367)"}, {"oid": "ee5b1c31e77a36d6b7ae8d0d95d215f1283f6fa6", "committedDate": "2021-10-08 09:51:31 -0400", "message": "FM2-431: Add support to search encounters by EncounterType (#371)"}, {"oid": "c31798df0f784d23e375644ddd6901949a6dd55e", "committedDate": "2022-02-14 09:14:38 -0500", "message": "FM2-408: Encounters should be sortable by date (#378)"}, {"oid": "290688fc9189b0fa108c77f09f46c2560292e84d", "committedDate": "2022-03-24 14:21:08 -0400", "message": "FM2-396: Allow Searching for Visits (#384)"}, {"oid": "860acf1731c1aefa4f83f7f3439a13861af3941f", "committedDate": "2022-03-29 16:21:15 -0400", "message": "Refactor: delete operation does not require returning the resource"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzOTMyOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384539329", "body": "Ditto on ordering", "bodyText": "Ditto on ordering", "bodyHTML": "<p dir=\"auto\">Ditto on ordering</p>", "author": "ibacher", "createdAt": "2020-02-26T14:48:28Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java", "diffHunk": "@@ -70,16 +104,84 @@ public void shouldGetEncounterByUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\twhen(dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(openMrsEncounter));\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByDate() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tDateRangeParam dateRangeParam = new DateRangeParam(new DateParam(ENCOUNTER_DATETIME));\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(argThat(is(dateRangeParam)), any(), any(), any())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService\n-\t\t        .findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results.size(), equalTo(1));\n-\t\tassertThat(results.stream().findFirst().isPresent(), is(true));\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(dateRangeParam, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getId(), equalTo(ENCOUNTER_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam location = new ReferenceParam();", "originalCommit": "abfdde871aa48708a002414bac97c705dac8df9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1OTg4Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384559883", "bodyText": "@ibacher Not sure what to do here, we haven't included any parameter like order", "author": "VaishSiddharth", "createdAt": "2020-02-26T15:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzOTMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2MDY5Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384560697", "bodyText": "@ibacher Got it you mean that the method name should be ordered logical", "author": "VaishSiddharth", "createdAt": "2020-02-26T15:19:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzOTMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2MDgxNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384560815", "bodyText": "I mean the order that the code is written in.", "author": "ibacher", "createdAt": "2020-02-26T15:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzOTMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2MjIwMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384562202", "bodyText": "Basically, I'd like to see something like:\nReferenceParam location = new ReferenceParam();\nlocation.setValue(ENCOUNTER_ADDRESS_STATE);\nlocation.setChain(Location.SP_ADDRESS_CITY)\n\nCollection<Encounter> encounters = new ArrayList<>();\nencounters.add(openMrsEncounter);\n\nfhirEncounter.setId(ENCOUNTER_UUID);\nSo that each part is created and populated in order.", "author": "ibacher", "createdAt": "2020-02-26T15:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzOTMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 5531af36..9a241647 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -125,13 +109,13 @@ public class FhirEncounterServiceImplTest {\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tencounters.add(openMrsEncounter);\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\t\n \t\tReferenceParam location = new ReferenceParam();\n \t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n \t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n \t\t\n-\t\tencounters.add(openMrsEncounter);\n-\t\t\n-\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\twhen(dao.searchForEncounters(any(), argThat(is(location)), any(), any())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n", "next_change": {"commit": "5afb7189963f1536dcd3742eac504eb5d2d521bb", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 9a241647..f6bb0a4a 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -108,14 +108,14 @@ public class FhirEncounterServiceImplTest {\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n-\t\tCollection<Encounter> encounters = new ArrayList<>();\n-\t\tencounters.add(openMrsEncounter);\n-\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n-\t\t\n \t\tReferenceParam location = new ReferenceParam();\n \t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n \t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n \t\t\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tencounters.add(openMrsEncounter);\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\t\n \t\twhen(dao.searchForEncounters(any(), argThat(is(location)), any(), any())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 5531af36..f6bb0a4a 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -124,14 +108,14 @@ public class FhirEncounterServiceImplTest {\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n-\t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tReferenceParam location = new ReferenceParam();\n \t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n \t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n \t\t\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n-\t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\t\n \t\twhen(dao.searchForEncounters(any(), argThat(is(location)), any(), any())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex f6bb0a4a..50a94097 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -94,80 +114,107 @@ public class FhirEncounterServiceImplTest {\n \t\t\n \t\tencounters.add(openMrsEncounter);\n \t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.DATE_RANGE_SEARCH_HANDLER,\n+\t\t    dateRangeParam);\n+\t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n-\t\twhen(dao.searchForEncounters(argThat(is(dateRangeParam)), any(), any(), any())).thenReturn(encounters);\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(dateRangeParam, null,\n-\t\t    null, null);\n+\t\tIBundleProvider results = encounterService.searchForEncounters(dateRangeParam, null, null, null);\n \t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getId(), equalTo(ENCOUNTER_UUID));\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(((org.hl7.fhir.r4.model.Encounter) resultList.iterator().next()).getId(), equalTo(ENCOUNTER_UUID));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n+\t\tReferenceAndListParam location = new ReferenceAndListParam();\n+\t\t\n+\t\tlocation.addValue(new ReferenceOrListParam()\n+\t\t        .add(new ReferenceParam().setValue(ENCOUNTER_ADDRESS_STATE).setChain(Location.SP_ADDRESS_STATE)));\n \t\t\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\t\n-\t\twhen(dao.searchForEncounters(any(), argThat(is(location)), any(), any())).thenReturn(encounters);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.LOCATION_REFERENCE_SEARCH_HANDLER,\n+\t\t    location);\n+\t\t\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, location, null,\n-\t\t    null);\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, location, null, null);\n \t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByParticipant() {\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n-\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tReferenceAndListParam participant = new ReferenceAndListParam();\n+\t\t\n+\t\tparticipant.addValue(new ReferenceOrListParam()\n+\t\t        .add(new ReferenceParam().setValue(PARTICIPANT_IDENTIFIER).setChain(Practitioner.SP_IDENTIFIER)));\n \t\t\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\t\n-\t\twhen(dao.searchForEncounters(any(), any(), argThat(is(participant)), any())).thenReturn(encounters);\n+\t\tSearchParameterMap theParams = new SearchParameterMap()\n+\t\t        .addParameter(FhirConstants.PARTICIPANT_REFERENCE_SEARCH_HANDLER, participant);\n+\t\t\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n+\t\t\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, participant, null);\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, participant,\n-\t\t    null);\n+\t\tList<IBaseResource> resultList = get(results);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterBySubject() {\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\tsubject.setValue(PATIENT_FAMILY_NAME);\n-\t\tsubject.setChain(Patient.SP_FAMILY);\n+\t\tReferenceAndListParam subject = new ReferenceAndListParam();\n+\t\t\n+\t\tsubject.addValue(\n+\t\t    new ReferenceOrListParam().add(new ReferenceParam().setValue(PATIENT_FAMILY_NAME).setChain(Patient.SP_FAMILY)));\n \t\t\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\t\n-\t\twhen(dao.searchForEncounters(any(), any(), any(), argThat(is(subject)))).thenReturn(encounters);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.PATIENT_REFERENCE_SEARCH_HANDLER,\n+\t\t    subject);\n+\t\t\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, null,\n-\t\t    subject);\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, null, subject);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n }\n", "next_change": {"commit": "327efb2e413db0965f3e36da0ff8071e949259bf", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 50a94097..ebf5c54b 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -217,4 +226,49 @@ public class FhirEncounterServiceImplTest {\n \t\tassertThat(resultList, not(empty()));\n \t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByUUID() {\n+\t\tTokenAndListParam uuid = new TokenAndListParam().addAnd(new TokenParam(ENCOUNTER_UUID));\n+\t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.COMMON_SEARCH_HANDLER,\n+\t\t    FhirConstants.ID_PROPERTY, uuid);\n+\t\t\n+\t\twhen(dao.search(any(), any(), anyInt(), anyInt())).thenReturn(Collections.singletonList(openMrsEncounter));\n+\t\twhen(dao.getResultUuids(any())).thenReturn(Collections.singletonList(ENCOUNTER_UUID));\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n+\t\t\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, null, null, uuid, null);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLastUpdated() {\n+\t\tDateRangeParam lastUpdated = new DateRangeParam().setUpperBound(LAST_UPDATED_DATE).setLowerBound(LAST_UPDATED_DATE);\n+\t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.COMMON_SEARCH_HANDLER,\n+\t\t    FhirConstants.LAST_UPDATED_PROPERTY, lastUpdated);\n+\t\t\n+\t\twhen(dao.search(any(), any(), anyInt(), anyInt())).thenReturn(Collections.singletonList(openMrsEncounter));\n+\t\twhen(dao.getResultUuids(any())).thenReturn(Collections.singletonList(ENCOUNTER_UUID));\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n+\t\t\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, null, null, null, lastUpdated);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n }\n", "next_change": {"commit": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex ebf5c54b..84050b40 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -268,7 +272,7 @@ public class FhirEncounterServiceImplTest {\n \t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(resultList, not(empty()));\n-\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(resultList, hasSize(greaterThanOrEqualTo(1)));\n \t}\n \t\n }\n", "next_change": {"commit": "086a7d29b668ef06f5ab3244d1efafe447029b00", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 84050b40..7af61be5 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -275,4 +556,50 @@ public class FhirEncounterServiceImplTest {\n \t\tassertThat(resultList, hasSize(greaterThanOrEqualTo(1)));\n \t}\n \t\n+\t@Test\n+\tpublic void getEncounterEverything_shouldReturnAllInformationAboutSpecifiedEncounter() {\n+\t\tTokenParam encounterId = new TokenParam().setValue(ENCOUNTER_UUID);\n+\t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.EVERYTHING_SEARCH_HANDLER, \"\")\n+\t\t        .addParameter(FhirConstants.COMMON_SEARCH_HANDLER, FhirConstants.ID_PROPERTY, encounterId);\n+\t\t\n+\t\tpopulateIncludeForEverythingOperationParams(theParams);\n+\t\tpopulateReverseIncludeForEverythingOperationParams(theParams);\n+\t\t\n+\t\twhen(dao.getSearchResults(any(), any())).thenReturn(Collections.singletonList(openMrsEncounter));\n+\t\twhen(dao.getSearchResultUuids(any())).thenReturn(Collections.singletonList(ENCOUNTER_UUID));\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any(), any())).thenReturn(\n+\t\t    new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator, globalPropertyService, searchQueryInclude));\n+\t\t\n+\t\tIBundleProvider results = encounterService.getEncounterEverything(encounterId);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t\t\n+\t}\n+\t\n+\tprivate void populateReverseIncludeForEverythingOperationParams(SearchParameterMap theParams) {\n+\t\tHashSet<Include> revIncludes = new HashSet<>();\n+\t\t\n+\t\trevIncludes.add(new Include(FhirConstants.OBSERVATION + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\trevIncludes.add(new Include(FhirConstants.DIAGNOSTIC_REPORT + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\trevIncludes.add(new Include(FhirConstants.MEDICATION_REQUEST + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\trevIncludes.add(new Include(FhirConstants.SERVICE_REQUEST + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\t\n+\t\ttheParams.addParameter(FhirConstants.REVERSE_INCLUDE_SEARCH_HANDLER, revIncludes);\n+\t}\n+\t\n+\tprivate void populateIncludeForEverythingOperationParams(SearchParameterMap theParams) {\n+\t\tHashSet<Include> includes = new HashSet<>();\n+\t\t\n+\t\tincludes.add(new Include(FhirConstants.ENCOUNTER + \":\" + FhirConstants.INCLUDE_PATIENT_PARAM));\n+\t\tincludes.add(new Include(FhirConstants.ENCOUNTER + \":\" + FhirConstants.INCLUDE_LOCATION_PARAM));\n+\t\tincludes.add(new Include(FhirConstants.ENCOUNTER + \":\" + FhirConstants.INCLUDE_PARTICIPANT_PARAM));\n+\t\t\n+\t\ttheParams.addParameter(FhirConstants.INCLUDE_SEARCH_HANDLER, includes);\n+\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "451f09e30bd28ef2b26a5697560871d022cf1e43", "committedDate": "2020-06-29 14:41:36 +0300", "message": "FM2-234: Ensure search returns unique results (#233)"}, {"oid": "327efb2e413db0965f3e36da0ff8071e949259bf", "committedDate": "2020-07-07 08:44:53 +0300", "message": "FM2-169: Add search for _id and _lastUpdated (#241)"}, {"oid": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "committedDate": "2020-08-05 16:40:51 +0300", "message": "Integration tests (#267)"}, {"oid": "66612c009b372d68c58a85e8507f51e57c96ca71", "committedDate": "2020-08-21 20:28:30 +0000", "message": "FM2-302: Map Openmrs Visit to Encounter resource (#294)"}, {"oid": "d5f5b43bcf6b001de897adbdc85fb9bf5a833cf4", "committedDate": "2020-08-28 14:15:14 -0400", "message": "Refactoring: Move deletion and validity checks to the service layer"}, {"oid": "036251c5504465c191935dbfe00fb4aa7b44fc83", "committedDate": "2020-10-06 14:41:55 -0400", "message": "FM2-253:  Refactor module to support _include"}, {"oid": "f5f5d49ec263597b6e85b2d8f911304b415cee8d", "committedDate": "2020-10-06 14:41:57 -0400", "message": "FM2-258: Update Encounter resource to support _include"}, {"oid": "d6500b5f41d5208885b79b4690c050ed04ec7a8b", "committedDate": "2020-10-06 14:41:58 -0400", "message": "FM2-271: Update Encounter resource to support _revinclude"}, {"oid": "aecec9017078ad1ef69f862bcf599bc2e9308d99", "committedDate": "2021-02-12 14:48:44 -0500", "message": "Refactor: FhirDao#getSearchResults() shouldn't need any paging parameters"}, {"oid": "6de992e4950415eb8663e3da65525e1fdc0862cd", "committedDate": "2021-04-27 16:25:33 -0400", "message": "FM2-352: Add support for creating encounters via the FHIR API (#334)"}, {"oid": "086a7d29b668ef06f5ab3244d1efafe447029b00", "committedDate": "2021-08-19 12:09:42 -0400", "message": "FM2-425: Support for instance-level $everything operation on Encounters in R4 (#367)"}, {"oid": "ee5b1c31e77a36d6b7ae8d0d95d215f1283f6fa6", "committedDate": "2021-10-08 09:51:31 -0400", "message": "FM2-431: Add support to search encounters by EncounterType (#371)"}, {"oid": "c31798df0f784d23e375644ddd6901949a6dd55e", "committedDate": "2022-02-14 09:14:38 -0500", "message": "FM2-408: Encounters should be sortable by date (#378)"}, {"oid": "290688fc9189b0fa108c77f09f46c2560292e84d", "committedDate": "2022-03-24 14:21:08 -0400", "message": "FM2-396: Allow Searching for Visits (#384)"}, {"oid": "860acf1731c1aefa4f83f7f3439a13861af3941f", "committedDate": "2022-03-29 16:21:15 -0400", "message": "Refactor: delete operation does not require returning the resource"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzOTQzMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384539433", "body": "Ditto on ordering", "bodyText": "Ditto on ordering", "bodyHTML": "<p dir=\"auto\">Ditto on ordering</p>", "author": "ibacher", "createdAt": "2020-02-26T14:48:35Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java", "diffHunk": "@@ -70,16 +104,84 @@ public void shouldGetEncounterByUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\twhen(dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(openMrsEncounter));\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByDate() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tDateRangeParam dateRangeParam = new DateRangeParam(new DateParam(ENCOUNTER_DATETIME));\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(argThat(is(dateRangeParam)), any(), any(), any())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService\n-\t\t        .findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results.size(), equalTo(1));\n-\t\tassertThat(results.stream().findFirst().isPresent(), is(true));\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(dateRangeParam, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getId(), equalTo(ENCOUNTER_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam location = new ReferenceParam();\n+\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(any(), argThat(is(location)), any(), any())).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\t\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, location, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByParticipant() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam participant = new ReferenceParam();", "originalCommit": "abfdde871aa48708a002414bac97c705dac8df9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 5531af36..9a241647 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -146,13 +130,13 @@ public class FhirEncounterServiceImplTest {\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByParticipant() {\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tencounters.add(openMrsEncounter);\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\t\n \t\tReferenceParam participant = new ReferenceParam();\n \t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n \t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n \t\t\n-\t\tencounters.add(openMrsEncounter);\n-\t\t\n-\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\twhen(dao.searchForEncounters(any(), any(), argThat(is(participant)), any())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n", "next_change": {"commit": "5afb7189963f1536dcd3742eac504eb5d2d521bb", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 9a241647..f6bb0a4a 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -129,14 +129,15 @@ public class FhirEncounterServiceImplTest {\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByParticipant() {\n-\t\tCollection<Encounter> encounters = new ArrayList<>();\n-\t\tencounters.add(openMrsEncounter);\n-\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n-\t\t\n \t\tReferenceParam participant = new ReferenceParam();\n \t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n \t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n \t\t\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\t\n \t\twhen(dao.searchForEncounters(any(), any(), argThat(is(participant)), any())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 5531af36..f6bb0a4a 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -145,14 +129,15 @@ public class FhirEncounterServiceImplTest {\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByParticipant() {\n-\t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tReferenceParam participant = new ReferenceParam();\n \t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n \t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n \t\t\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\t\n \t\twhen(dao.searchForEncounters(any(), any(), argThat(is(participant)), any())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex f6bb0a4a..50a94097 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -94,80 +114,107 @@ public class FhirEncounterServiceImplTest {\n \t\t\n \t\tencounters.add(openMrsEncounter);\n \t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.DATE_RANGE_SEARCH_HANDLER,\n+\t\t    dateRangeParam);\n+\t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n-\t\twhen(dao.searchForEncounters(argThat(is(dateRangeParam)), any(), any(), any())).thenReturn(encounters);\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(dateRangeParam, null,\n-\t\t    null, null);\n+\t\tIBundleProvider results = encounterService.searchForEncounters(dateRangeParam, null, null, null);\n \t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getId(), equalTo(ENCOUNTER_UUID));\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(((org.hl7.fhir.r4.model.Encounter) resultList.iterator().next()).getId(), equalTo(ENCOUNTER_UUID));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n+\t\tReferenceAndListParam location = new ReferenceAndListParam();\n+\t\t\n+\t\tlocation.addValue(new ReferenceOrListParam()\n+\t\t        .add(new ReferenceParam().setValue(ENCOUNTER_ADDRESS_STATE).setChain(Location.SP_ADDRESS_STATE)));\n \t\t\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\t\n-\t\twhen(dao.searchForEncounters(any(), argThat(is(location)), any(), any())).thenReturn(encounters);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.LOCATION_REFERENCE_SEARCH_HANDLER,\n+\t\t    location);\n+\t\t\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, location, null,\n-\t\t    null);\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, location, null, null);\n \t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByParticipant() {\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n-\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tReferenceAndListParam participant = new ReferenceAndListParam();\n+\t\t\n+\t\tparticipant.addValue(new ReferenceOrListParam()\n+\t\t        .add(new ReferenceParam().setValue(PARTICIPANT_IDENTIFIER).setChain(Practitioner.SP_IDENTIFIER)));\n \t\t\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\t\n-\t\twhen(dao.searchForEncounters(any(), any(), argThat(is(participant)), any())).thenReturn(encounters);\n+\t\tSearchParameterMap theParams = new SearchParameterMap()\n+\t\t        .addParameter(FhirConstants.PARTICIPANT_REFERENCE_SEARCH_HANDLER, participant);\n+\t\t\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n+\t\t\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, participant, null);\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, participant,\n-\t\t    null);\n+\t\tList<IBaseResource> resultList = get(results);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterBySubject() {\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\tsubject.setValue(PATIENT_FAMILY_NAME);\n-\t\tsubject.setChain(Patient.SP_FAMILY);\n+\t\tReferenceAndListParam subject = new ReferenceAndListParam();\n+\t\t\n+\t\tsubject.addValue(\n+\t\t    new ReferenceOrListParam().add(new ReferenceParam().setValue(PATIENT_FAMILY_NAME).setChain(Patient.SP_FAMILY)));\n \t\t\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\t\n-\t\twhen(dao.searchForEncounters(any(), any(), any(), argThat(is(subject)))).thenReturn(encounters);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.PATIENT_REFERENCE_SEARCH_HANDLER,\n+\t\t    subject);\n+\t\t\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, null,\n-\t\t    subject);\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, null, subject);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n }\n", "next_change": {"commit": "327efb2e413db0965f3e36da0ff8071e949259bf", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 50a94097..ebf5c54b 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -217,4 +226,49 @@ public class FhirEncounterServiceImplTest {\n \t\tassertThat(resultList, not(empty()));\n \t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByUUID() {\n+\t\tTokenAndListParam uuid = new TokenAndListParam().addAnd(new TokenParam(ENCOUNTER_UUID));\n+\t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.COMMON_SEARCH_HANDLER,\n+\t\t    FhirConstants.ID_PROPERTY, uuid);\n+\t\t\n+\t\twhen(dao.search(any(), any(), anyInt(), anyInt())).thenReturn(Collections.singletonList(openMrsEncounter));\n+\t\twhen(dao.getResultUuids(any())).thenReturn(Collections.singletonList(ENCOUNTER_UUID));\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n+\t\t\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, null, null, uuid, null);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLastUpdated() {\n+\t\tDateRangeParam lastUpdated = new DateRangeParam().setUpperBound(LAST_UPDATED_DATE).setLowerBound(LAST_UPDATED_DATE);\n+\t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.COMMON_SEARCH_HANDLER,\n+\t\t    FhirConstants.LAST_UPDATED_PROPERTY, lastUpdated);\n+\t\t\n+\t\twhen(dao.search(any(), any(), anyInt(), anyInt())).thenReturn(Collections.singletonList(openMrsEncounter));\n+\t\twhen(dao.getResultUuids(any())).thenReturn(Collections.singletonList(ENCOUNTER_UUID));\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n+\t\t\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, null, null, null, lastUpdated);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n }\n", "next_change": {"commit": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex ebf5c54b..84050b40 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -268,7 +272,7 @@ public class FhirEncounterServiceImplTest {\n \t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(resultList, not(empty()));\n-\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(resultList, hasSize(greaterThanOrEqualTo(1)));\n \t}\n \t\n }\n", "next_change": {"commit": "086a7d29b668ef06f5ab3244d1efafe447029b00", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 84050b40..7af61be5 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -275,4 +556,50 @@ public class FhirEncounterServiceImplTest {\n \t\tassertThat(resultList, hasSize(greaterThanOrEqualTo(1)));\n \t}\n \t\n+\t@Test\n+\tpublic void getEncounterEverything_shouldReturnAllInformationAboutSpecifiedEncounter() {\n+\t\tTokenParam encounterId = new TokenParam().setValue(ENCOUNTER_UUID);\n+\t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.EVERYTHING_SEARCH_HANDLER, \"\")\n+\t\t        .addParameter(FhirConstants.COMMON_SEARCH_HANDLER, FhirConstants.ID_PROPERTY, encounterId);\n+\t\t\n+\t\tpopulateIncludeForEverythingOperationParams(theParams);\n+\t\tpopulateReverseIncludeForEverythingOperationParams(theParams);\n+\t\t\n+\t\twhen(dao.getSearchResults(any(), any())).thenReturn(Collections.singletonList(openMrsEncounter));\n+\t\twhen(dao.getSearchResultUuids(any())).thenReturn(Collections.singletonList(ENCOUNTER_UUID));\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any(), any())).thenReturn(\n+\t\t    new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator, globalPropertyService, searchQueryInclude));\n+\t\t\n+\t\tIBundleProvider results = encounterService.getEncounterEverything(encounterId);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t\t\n+\t}\n+\t\n+\tprivate void populateReverseIncludeForEverythingOperationParams(SearchParameterMap theParams) {\n+\t\tHashSet<Include> revIncludes = new HashSet<>();\n+\t\t\n+\t\trevIncludes.add(new Include(FhirConstants.OBSERVATION + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\trevIncludes.add(new Include(FhirConstants.DIAGNOSTIC_REPORT + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\trevIncludes.add(new Include(FhirConstants.MEDICATION_REQUEST + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\trevIncludes.add(new Include(FhirConstants.SERVICE_REQUEST + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\t\n+\t\ttheParams.addParameter(FhirConstants.REVERSE_INCLUDE_SEARCH_HANDLER, revIncludes);\n+\t}\n+\t\n+\tprivate void populateIncludeForEverythingOperationParams(SearchParameterMap theParams) {\n+\t\tHashSet<Include> includes = new HashSet<>();\n+\t\t\n+\t\tincludes.add(new Include(FhirConstants.ENCOUNTER + \":\" + FhirConstants.INCLUDE_PATIENT_PARAM));\n+\t\tincludes.add(new Include(FhirConstants.ENCOUNTER + \":\" + FhirConstants.INCLUDE_LOCATION_PARAM));\n+\t\tincludes.add(new Include(FhirConstants.ENCOUNTER + \":\" + FhirConstants.INCLUDE_PARTICIPANT_PARAM));\n+\t\t\n+\t\ttheParams.addParameter(FhirConstants.INCLUDE_SEARCH_HANDLER, includes);\n+\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "451f09e30bd28ef2b26a5697560871d022cf1e43", "committedDate": "2020-06-29 14:41:36 +0300", "message": "FM2-234: Ensure search returns unique results (#233)"}, {"oid": "327efb2e413db0965f3e36da0ff8071e949259bf", "committedDate": "2020-07-07 08:44:53 +0300", "message": "FM2-169: Add search for _id and _lastUpdated (#241)"}, {"oid": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "committedDate": "2020-08-05 16:40:51 +0300", "message": "Integration tests (#267)"}, {"oid": "66612c009b372d68c58a85e8507f51e57c96ca71", "committedDate": "2020-08-21 20:28:30 +0000", "message": "FM2-302: Map Openmrs Visit to Encounter resource (#294)"}, {"oid": "d5f5b43bcf6b001de897adbdc85fb9bf5a833cf4", "committedDate": "2020-08-28 14:15:14 -0400", "message": "Refactoring: Move deletion and validity checks to the service layer"}, {"oid": "036251c5504465c191935dbfe00fb4aa7b44fc83", "committedDate": "2020-10-06 14:41:55 -0400", "message": "FM2-253:  Refactor module to support _include"}, {"oid": "f5f5d49ec263597b6e85b2d8f911304b415cee8d", "committedDate": "2020-10-06 14:41:57 -0400", "message": "FM2-258: Update Encounter resource to support _include"}, {"oid": "d6500b5f41d5208885b79b4690c050ed04ec7a8b", "committedDate": "2020-10-06 14:41:58 -0400", "message": "FM2-271: Update Encounter resource to support _revinclude"}, {"oid": "aecec9017078ad1ef69f862bcf599bc2e9308d99", "committedDate": "2021-02-12 14:48:44 -0500", "message": "Refactor: FhirDao#getSearchResults() shouldn't need any paging parameters"}, {"oid": "6de992e4950415eb8663e3da65525e1fdc0862cd", "committedDate": "2021-04-27 16:25:33 -0400", "message": "FM2-352: Add support for creating encounters via the FHIR API (#334)"}, {"oid": "086a7d29b668ef06f5ab3244d1efafe447029b00", "committedDate": "2021-08-19 12:09:42 -0400", "message": "FM2-425: Support for instance-level $everything operation on Encounters in R4 (#367)"}, {"oid": "ee5b1c31e77a36d6b7ae8d0d95d215f1283f6fa6", "committedDate": "2021-10-08 09:51:31 -0400", "message": "FM2-431: Add support to search encounters by EncounterType (#371)"}, {"oid": "c31798df0f784d23e375644ddd6901949a6dd55e", "committedDate": "2022-02-14 09:14:38 -0500", "message": "FM2-408: Encounters should be sortable by date (#378)"}, {"oid": "290688fc9189b0fa108c77f09f46c2560292e84d", "committedDate": "2022-03-24 14:21:08 -0400", "message": "FM2-396: Allow Searching for Visits (#384)"}, {"oid": "860acf1731c1aefa4f83f7f3439a13861af3941f", "committedDate": "2022-03-29 16:21:15 -0400", "message": "Refactor: delete operation does not require returning the resource"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzOTU4Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384539587", "body": "Ditto on ordering", "bodyText": "Ditto on ordering", "bodyHTML": "<p dir=\"auto\">Ditto on ordering</p>", "author": "ibacher", "createdAt": "2020-02-26T14:48:46Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java", "diffHunk": "@@ -70,16 +104,84 @@ public void shouldGetEncounterByUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\twhen(dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(openMrsEncounter));\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByDate() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tDateRangeParam dateRangeParam = new DateRangeParam(new DateParam(ENCOUNTER_DATETIME));\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(argThat(is(dateRangeParam)), any(), any(), any())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService\n-\t\t        .findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results.size(), equalTo(1));\n-\t\tassertThat(results.stream().findFirst().isPresent(), is(true));\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(dateRangeParam, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getId(), equalTo(ENCOUNTER_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam location = new ReferenceParam();\n+\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(any(), argThat(is(location)), any(), any())).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\t\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, location, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByParticipant() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam participant = new ReferenceParam();\n+\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n+\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(any(), any(), argThat(is(participant)), any())).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\t\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, participant,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterBySubject() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam subject = new ReferenceParam();", "originalCommit": "abfdde871aa48708a002414bac97c705dac8df9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 5531af36..9a241647 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -167,13 +151,13 @@ public class FhirEncounterServiceImplTest {\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterBySubject() {\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tencounters.add(openMrsEncounter);\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\t\n \t\tReferenceParam subject = new ReferenceParam();\n \t\tsubject.setValue(PATIENT_FAMILY_NAME);\n \t\tsubject.setChain(Patient.SP_FAMILY);\n \t\t\n-\t\tencounters.add(openMrsEncounter);\n-\t\t\n-\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\twhen(dao.searchForEncounters(any(), any(), any(), argThat(is(subject)))).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n", "next_change": {"commit": "5afb7189963f1536dcd3742eac504eb5d2d521bb", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 9a241647..f6bb0a4a 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -150,14 +151,15 @@ public class FhirEncounterServiceImplTest {\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterBySubject() {\n-\t\tCollection<Encounter> encounters = new ArrayList<>();\n-\t\tencounters.add(openMrsEncounter);\n-\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n-\t\t\n \t\tReferenceParam subject = new ReferenceParam();\n \t\tsubject.setValue(PATIENT_FAMILY_NAME);\n \t\tsubject.setChain(Patient.SP_FAMILY);\n \t\t\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\t\n \t\twhen(dao.searchForEncounters(any(), any(), any(), argThat(is(subject)))).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 5531af36..f6bb0a4a 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -166,14 +151,15 @@ public class FhirEncounterServiceImplTest {\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterBySubject() {\n-\t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tReferenceParam subject = new ReferenceParam();\n \t\tsubject.setValue(PATIENT_FAMILY_NAME);\n \t\tsubject.setChain(Patient.SP_FAMILY);\n \t\t\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\t\n \t\twhen(dao.searchForEncounters(any(), any(), any(), argThat(is(subject)))).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex f6bb0a4a..50a94097 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -94,80 +114,107 @@ public class FhirEncounterServiceImplTest {\n \t\t\n \t\tencounters.add(openMrsEncounter);\n \t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.DATE_RANGE_SEARCH_HANDLER,\n+\t\t    dateRangeParam);\n+\t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n-\t\twhen(dao.searchForEncounters(argThat(is(dateRangeParam)), any(), any(), any())).thenReturn(encounters);\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(dateRangeParam, null,\n-\t\t    null, null);\n+\t\tIBundleProvider results = encounterService.searchForEncounters(dateRangeParam, null, null, null);\n \t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getId(), equalTo(ENCOUNTER_UUID));\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(((org.hl7.fhir.r4.model.Encounter) resultList.iterator().next()).getId(), equalTo(ENCOUNTER_UUID));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n+\t\tReferenceAndListParam location = new ReferenceAndListParam();\n+\t\t\n+\t\tlocation.addValue(new ReferenceOrListParam()\n+\t\t        .add(new ReferenceParam().setValue(ENCOUNTER_ADDRESS_STATE).setChain(Location.SP_ADDRESS_STATE)));\n \t\t\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\t\n-\t\twhen(dao.searchForEncounters(any(), argThat(is(location)), any(), any())).thenReturn(encounters);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.LOCATION_REFERENCE_SEARCH_HANDLER,\n+\t\t    location);\n+\t\t\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, location, null,\n-\t\t    null);\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, location, null, null);\n \t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByParticipant() {\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n-\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tReferenceAndListParam participant = new ReferenceAndListParam();\n+\t\t\n+\t\tparticipant.addValue(new ReferenceOrListParam()\n+\t\t        .add(new ReferenceParam().setValue(PARTICIPANT_IDENTIFIER).setChain(Practitioner.SP_IDENTIFIER)));\n \t\t\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\t\n-\t\twhen(dao.searchForEncounters(any(), any(), argThat(is(participant)), any())).thenReturn(encounters);\n+\t\tSearchParameterMap theParams = new SearchParameterMap()\n+\t\t        .addParameter(FhirConstants.PARTICIPANT_REFERENCE_SEARCH_HANDLER, participant);\n+\t\t\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n+\t\t\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, participant, null);\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, participant,\n-\t\t    null);\n+\t\tList<IBaseResource> resultList = get(results);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounter_shouldReturnCollectionOfEncounterBySubject() {\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\tsubject.setValue(PATIENT_FAMILY_NAME);\n-\t\tsubject.setChain(Patient.SP_FAMILY);\n+\t\tReferenceAndListParam subject = new ReferenceAndListParam();\n+\t\t\n+\t\tsubject.addValue(\n+\t\t    new ReferenceOrListParam().add(new ReferenceParam().setValue(PATIENT_FAMILY_NAME).setChain(Patient.SP_FAMILY)));\n \t\t\n \t\tCollection<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(openMrsEncounter);\n \t\t\n \t\tfhirEncounter.setId(ENCOUNTER_UUID);\n \t\t\n-\t\twhen(dao.searchForEncounters(any(), any(), any(), argThat(is(subject)))).thenReturn(encounters);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.PATIENT_REFERENCE_SEARCH_HANDLER,\n+\t\t    subject);\n+\t\t\n+\t\twhen(dao.search(any(), anyInt(), anyInt())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, null,\n-\t\t    subject);\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, null, subject);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n }\n", "next_change": {"commit": "327efb2e413db0965f3e36da0ff8071e949259bf", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 50a94097..ebf5c54b 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -217,4 +226,49 @@ public class FhirEncounterServiceImplTest {\n \t\tassertThat(resultList, not(empty()));\n \t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByUUID() {\n+\t\tTokenAndListParam uuid = new TokenAndListParam().addAnd(new TokenParam(ENCOUNTER_UUID));\n+\t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.COMMON_SEARCH_HANDLER,\n+\t\t    FhirConstants.ID_PROPERTY, uuid);\n+\t\t\n+\t\twhen(dao.search(any(), any(), anyInt(), anyInt())).thenReturn(Collections.singletonList(openMrsEncounter));\n+\t\twhen(dao.getResultUuids(any())).thenReturn(Collections.singletonList(ENCOUNTER_UUID));\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n+\t\t\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, null, null, uuid, null);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLastUpdated() {\n+\t\tDateRangeParam lastUpdated = new DateRangeParam().setUpperBound(LAST_UPDATED_DATE).setLowerBound(LAST_UPDATED_DATE);\n+\t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.COMMON_SEARCH_HANDLER,\n+\t\t    FhirConstants.LAST_UPDATED_PROPERTY, lastUpdated);\n+\t\t\n+\t\twhen(dao.search(any(), any(), anyInt(), anyInt())).thenReturn(Collections.singletonList(openMrsEncounter));\n+\t\twhen(dao.getResultUuids(any())).thenReturn(Collections.singletonList(ENCOUNTER_UUID));\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any()))\n+\t\t        .thenReturn(new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator));\n+\t\t\n+\t\tIBundleProvider results = encounterService.searchForEncounters(null, null, null, null, null, lastUpdated);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n }\n", "next_change": {"commit": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex ebf5c54b..84050b40 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -268,7 +272,7 @@ public class FhirEncounterServiceImplTest {\n \t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(resultList, not(empty()));\n-\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(resultList, hasSize(greaterThanOrEqualTo(1)));\n \t}\n \t\n }\n", "next_change": {"commit": "086a7d29b668ef06f5ab3244d1efafe447029b00", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\nindex 84050b40..7af61be5 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java\n", "chunk": "@@ -275,4 +556,50 @@ public class FhirEncounterServiceImplTest {\n \t\tassertThat(resultList, hasSize(greaterThanOrEqualTo(1)));\n \t}\n \t\n+\t@Test\n+\tpublic void getEncounterEverything_shouldReturnAllInformationAboutSpecifiedEncounter() {\n+\t\tTokenParam encounterId = new TokenParam().setValue(ENCOUNTER_UUID);\n+\t\t\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.EVERYTHING_SEARCH_HANDLER, \"\")\n+\t\t        .addParameter(FhirConstants.COMMON_SEARCH_HANDLER, FhirConstants.ID_PROPERTY, encounterId);\n+\t\t\n+\t\tpopulateIncludeForEverythingOperationParams(theParams);\n+\t\tpopulateReverseIncludeForEverythingOperationParams(theParams);\n+\t\t\n+\t\twhen(dao.getSearchResults(any(), any())).thenReturn(Collections.singletonList(openMrsEncounter));\n+\t\twhen(dao.getSearchResultUuids(any())).thenReturn(Collections.singletonList(ENCOUNTER_UUID));\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\twhen(searchQuery.getQueryResults(any(), any(), any(), any())).thenReturn(\n+\t\t    new SearchQueryBundleProvider<>(theParams, dao, encounterTranslator, globalPropertyService, searchQueryInclude));\n+\t\t\n+\t\tIBundleProvider results = encounterService.getEncounterEverything(encounterId);\n+\t\t\n+\t\tList<IBaseResource> resultList = get(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resultList, not(empty()));\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t\t\n+\t}\n+\t\n+\tprivate void populateReverseIncludeForEverythingOperationParams(SearchParameterMap theParams) {\n+\t\tHashSet<Include> revIncludes = new HashSet<>();\n+\t\t\n+\t\trevIncludes.add(new Include(FhirConstants.OBSERVATION + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\trevIncludes.add(new Include(FhirConstants.DIAGNOSTIC_REPORT + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\trevIncludes.add(new Include(FhirConstants.MEDICATION_REQUEST + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\trevIncludes.add(new Include(FhirConstants.SERVICE_REQUEST + \":\" + FhirConstants.INCLUDE_ENCOUNTER_PARAM));\n+\t\t\n+\t\ttheParams.addParameter(FhirConstants.REVERSE_INCLUDE_SEARCH_HANDLER, revIncludes);\n+\t}\n+\t\n+\tprivate void populateIncludeForEverythingOperationParams(SearchParameterMap theParams) {\n+\t\tHashSet<Include> includes = new HashSet<>();\n+\t\t\n+\t\tincludes.add(new Include(FhirConstants.ENCOUNTER + \":\" + FhirConstants.INCLUDE_PATIENT_PARAM));\n+\t\tincludes.add(new Include(FhirConstants.ENCOUNTER + \":\" + FhirConstants.INCLUDE_LOCATION_PARAM));\n+\t\tincludes.add(new Include(FhirConstants.ENCOUNTER + \":\" + FhirConstants.INCLUDE_PARTICIPANT_PARAM));\n+\t\t\n+\t\ttheParams.addParameter(FhirConstants.INCLUDE_SEARCH_HANDLER, includes);\n+\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "451f09e30bd28ef2b26a5697560871d022cf1e43", "committedDate": "2020-06-29 14:41:36 +0300", "message": "FM2-234: Ensure search returns unique results (#233)"}, {"oid": "327efb2e413db0965f3e36da0ff8071e949259bf", "committedDate": "2020-07-07 08:44:53 +0300", "message": "FM2-169: Add search for _id and _lastUpdated (#241)"}, {"oid": "a09cc3101acb4401770d0fb0b4dcc7477cab4948", "committedDate": "2020-08-05 16:40:51 +0300", "message": "Integration tests (#267)"}, {"oid": "66612c009b372d68c58a85e8507f51e57c96ca71", "committedDate": "2020-08-21 20:28:30 +0000", "message": "FM2-302: Map Openmrs Visit to Encounter resource (#294)"}, {"oid": "d5f5b43bcf6b001de897adbdc85fb9bf5a833cf4", "committedDate": "2020-08-28 14:15:14 -0400", "message": "Refactoring: Move deletion and validity checks to the service layer"}, {"oid": "036251c5504465c191935dbfe00fb4aa7b44fc83", "committedDate": "2020-10-06 14:41:55 -0400", "message": "FM2-253:  Refactor module to support _include"}, {"oid": "f5f5d49ec263597b6e85b2d8f911304b415cee8d", "committedDate": "2020-10-06 14:41:57 -0400", "message": "FM2-258: Update Encounter resource to support _include"}, {"oid": "d6500b5f41d5208885b79b4690c050ed04ec7a8b", "committedDate": "2020-10-06 14:41:58 -0400", "message": "FM2-271: Update Encounter resource to support _revinclude"}, {"oid": "aecec9017078ad1ef69f862bcf599bc2e9308d99", "committedDate": "2021-02-12 14:48:44 -0500", "message": "Refactor: FhirDao#getSearchResults() shouldn't need any paging parameters"}, {"oid": "6de992e4950415eb8663e3da65525e1fdc0862cd", "committedDate": "2021-04-27 16:25:33 -0400", "message": "FM2-352: Add support for creating encounters via the FHIR API (#334)"}, {"oid": "086a7d29b668ef06f5ab3244d1efafe447029b00", "committedDate": "2021-08-19 12:09:42 -0400", "message": "FM2-425: Support for instance-level $everything operation on Encounters in R4 (#367)"}, {"oid": "ee5b1c31e77a36d6b7ae8d0d95d215f1283f6fa6", "committedDate": "2021-10-08 09:51:31 -0400", "message": "FM2-431: Add support to search encounters by EncounterType (#371)"}, {"oid": "c31798df0f784d23e375644ddd6901949a6dd55e", "committedDate": "2022-02-14 09:14:38 -0500", "message": "FM2-408: Encounters should be sortable by date (#378)"}, {"oid": "290688fc9189b0fa108c77f09f46c2560292e84d", "committedDate": "2022-03-24 14:21:08 -0400", "message": "FM2-396: Allow Searching for Visits (#384)"}, {"oid": "860acf1731c1aefa4f83f7f3439a13861af3941f", "committedDate": "2022-03-29 16:21:15 -0400", "message": "Refactor: delete operation does not require returning the resource"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MDYwNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384540607", "body": "Why is this here?", "bodyText": "Why is this here?", "bodyHTML": "<p dir=\"auto\">Why is this here?</p>", "author": "ibacher", "createdAt": "2020-02-26T14:50:11Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java", "diffHunk": "@@ -87,22 +88,22 @@ public void getEncounterWithWrongUuid_shouldThrowResourceNotFoundException() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnMatchingBundleOfEncounters() {\n-\t\twhen(encounterService.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(encounter));\n-\t\tReferenceParam param = new ReferenceParam();\n-\t\tparam.setValue(PATIENT_IDENTIFIER);\n-\t\tBundle encounterBundle = resourceProvider.findEncountersByPatientIdentifier(param);\n-\t\tassertThat(encounterBundle, notNullValue());\n-\t\tassertThat(encounterBundle.getEntry().size(), equalTo(1));\n-\t}\n-\t\n-\t@Test\n-\tpublic void findEncountersByWrongPatientIdentifier_shouldReturnBundleWithEmptyEntries() {\n-\t\tReferenceParam param = new ReferenceParam();\n-\t\tparam.setValue(PATIENT_IDENTIFIER);\n-\t\tBundle bundle = resourceProvider.findEncountersByPatientIdentifier(param);\n-\t\tassertThat(bundle, notNullValue());\n-\t\tassertThat(bundle.getEntry(), is(empty()));\n+\tpublic void searchEncounters_shouldReturnMatchingEncounters() {\n+\t\tList<Encounter> encounters = new ArrayList<>();\n+\t\tencounters.add(encounter);\n+\t\twhen(encounterService.searchForEncounters(any(), any(), any(), any())).thenReturn(encounters);\n+\t\tReferenceParam subjectreference = new ReferenceParam();\n+\t\tsubjectreference.setChain(Patient.SP_NAME);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Encounter enc = new org.hl7.fhir.r4.model.Encounter();", "originalCommit": "abfdde871aa48708a002414bac97c705dac8df9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\nindex 2e6eeeee..e8ce1260 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n", "chunk": "@@ -92,14 +92,11 @@ public class EncounterFhirResourceProviderTest {\n \t\tList<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(encounter);\n \t\twhen(encounterService.searchForEncounters(any(), any(), any(), any())).thenReturn(encounters);\n+\t\t\n \t\tReferenceParam subjectreference = new ReferenceParam();\n \t\tsubjectreference.setChain(Patient.SP_NAME);\n \t\t\n-\t\torg.hl7.fhir.r4.model.Encounter enc = new org.hl7.fhir.r4.model.Encounter();\n-\t\tenc.setId(ENCOUNTER_UUID);\n-\t\t\n \t\tBundle results = resourceProvider.searchEncounter(null, null, null, subjectreference);\n-\t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(results.getTotal(), equalTo(1));\n \t\tassertThat(results.getEntry(), notNullValue());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\nindex 2e6eeeee..e8ce1260 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n", "chunk": "@@ -92,14 +92,11 @@ public class EncounterFhirResourceProviderTest {\n \t\tList<Encounter> encounters = new ArrayList<>();\n \t\tencounters.add(encounter);\n \t\twhen(encounterService.searchForEncounters(any(), any(), any(), any())).thenReturn(encounters);\n+\t\t\n \t\tReferenceParam subjectreference = new ReferenceParam();\n \t\tsubjectreference.setChain(Patient.SP_NAME);\n \t\t\n-\t\torg.hl7.fhir.r4.model.Encounter enc = new org.hl7.fhir.r4.model.Encounter();\n-\t\tenc.setId(ENCOUNTER_UUID);\n-\t\t\n \t\tBundle results = resourceProvider.searchEncounter(null, null, null, subjectreference);\n-\t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(results.getTotal(), equalTo(1));\n \t\tassertThat(results.getEntry(), notNullValue());\n", "next_change": {"commit": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\nindex e8ce1260..a547434c 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java\n", "chunk": "@@ -103,4 +111,25 @@ public class EncounterFhirResourceProviderTest {\n \t\tassertThat(results.getEntry().get(0).getResource().fhirType(), equalTo(\"Encounter\"));\n \t\tassertThat(results.getEntry().get(0).getResource().getId(), equalTo(ENCOUNTER_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void getEncounterHistory_shouldReturnProvenanceResources() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(ENCOUNTER_UUID);\n+\t\twhen(encounterService.getEncounterByUuid(ENCOUNTER_UUID)).thenReturn(encounter);\n+\t\t\n+\t\tList<Resource> resources = resourceProvider.getEncounterHistoryById(id);\n+\t\tassertThat(resources, not(empty()));\n+\t\tassertThat(resources.stream().findAny().isPresent(), is(true));\n+\t\tassertThat(resources.stream().findAny().get().getResourceType().name(),\n+\t\t    Matchers.equalTo(Provenance.class.getSimpleName()));\n+\t}\n+\t\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void getEncounterHistoryByWithWrongId_shouldThrowResourceNotFoundException() {\n+\t\tIdType idType = new IdType();\n+\t\tidType.setValue(WRONG_ENCOUNTER_UUID);\n+\t\tassertThat(resourceProvider.getEncounterHistoryById(idType).isEmpty(), is(true));\n+\t\tassertThat(resourceProvider.getEncounterHistoryById(idType).size(), Matchers.equalTo(0));\n+\t}\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "committedDate": "2020-03-04 09:25:55 -0500", "message": "FM2-72: Added provenances for additional resources (#104)"}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "committedDate": "2020-05-22 17:04:04 -0400", "message": "FM2-183: Add support for DSTU3 (#158)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MDkxMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384540910", "body": "Observations?", "bodyText": "Observations?", "bodyHTML": "<p dir=\"auto\">Observations?</p>", "author": "ibacher", "createdAt": "2020-02-26T14:50:38Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -82,31 +125,145 @@ public void getEncounterByWrongUuid_shouldReturn404() throws Exception {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnBundleOfEncounters() throws IOException, ServletException {\n-\t\tEncounter encounter = new Encounter();\n-\t\tencounter.setId(ENCOUNTER_UUID);\n-\t\twhen(encounterService.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(encounter));\n+\tpublic void shouldGetObservationsBySubjectUuid() throws Exception {", "originalCommit": "abfdde871aa48708a002414bac97c705dac8df9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NTMwOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384565308", "bodyText": "@ibacher Oh sorry was a bit lazy in typing the full name so copied it from Observations and then forgot to change it to encounters.", "author": "VaishSiddharth", "createdAt": "2020-02-26T15:25:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MDkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NjAxMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384566010", "bodyText": "@VaishSiddharth That happens and it's fine; just needs to be fixed before we can merge it \ud83d\ude42", "author": "ibacher", "createdAt": "2020-02-26T15:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MDkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex 071de6be..14c26321 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -125,7 +128,7 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t}\n \t\n \t@Test\n-\tpublic void shouldGetObservationsBySubjectUuid() throws Exception {\n+\tpublic void shouldGetEncountersBySubjectUuid() throws Exception {\n \t\tverifyUri(String.format(\"/Encounter?subject:Patient=%s\", PATIENT_UUID));\n \t\t\n \t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex 071de6be..a74d508e 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -125,7 +119,7 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t}\n \t\n \t@Test\n-\tpublic void shouldGetObservationsBySubjectUuid() throws Exception {\n+\tpublic void shouldGetEncountersBySubjectUuid() throws Exception {\n \t\tverifyUri(String.format(\"/Encounter?subject:Patient=%s\", PATIENT_UUID));\n \t\t\n \t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex a74d508e..8721569c 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -124,7 +141,9 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t\t\n \t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n \t\tassertThat(subjectCaptor.getValue(), notNullValue());\n-\t\tassertThat(subjectCaptor.getValue().getIdPart(), equalTo(PATIENT_UUID));\n+\t\tassertThat(subjectCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\n+\t\t        .getValuesAsQueryTokens().iterator().next().getIdPart(),\n+\t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "54537f3da3103dcf7914c0d31562bc912bc3c5e0", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex 8721569c..2dd2f52f 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -144,6 +148,9 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t\tassertThat(subjectCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\n \t\t        .getValuesAsQueryTokens().iterator().next().getIdPart(),\n \t\t    equalTo(PATIENT_UUID));\n+\t\tassertThat(subjectCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\n+\t\t        .getValuesAsQueryTokens().iterator().next().getChain(),\n+\t\t    equalTo(null));\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "committedDate": "2020-03-04 09:25:55 -0500", "message": "FM2-72: Added provenances for additional resources (#104)"}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "54537f3da3103dcf7914c0d31562bc912bc3c5e0", "committedDate": "2020-05-18 13:16:05 -0400", "message": "FM2-175: Correctly handled empty chained parameters (#173)"}, {"oid": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "committedDate": "2020-05-22 17:04:04 -0400", "message": "FM2-183: Add support for DSTU3 (#158)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MTAzMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384541032", "body": "Observations?", "bodyText": "Observations?", "bodyHTML": "<p dir=\"auto\">Observations?</p>", "author": "ibacher", "createdAt": "2020-02-26T14:50:49Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -82,31 +125,145 @@ public void getEncounterByWrongUuid_shouldReturn404() throws Exception {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnBundleOfEncounters() throws IOException, ServletException {\n-\t\tEncounter encounter = new Encounter();\n-\t\tencounter.setId(ENCOUNTER_UUID);\n-\t\twhen(encounterService.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(encounter));\n+\tpublic void shouldGetObservationsBySubjectUuid() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter?subject:Patient=%s\", PATIENT_UUID));\n \t\t\n-\t\tMockHttpServletResponse response = get(\"/Encounter?patient.identifier=\" + PATIENT_IDENTIFIER)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getIdPart(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByDate() throws Exception {", "originalCommit": "abfdde871aa48708a002414bac97c705dac8df9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex 071de6be..14c26321 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -134,7 +137,7 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t}\n \t\n \t@Test\n-\tpublic void shouldGetObservationsByDate() throws Exception {\n+\tpublic void shouldGetEncountersByDate() throws Exception {\n \t\tverifyUri(\"/Encounter/?date=ge1975-02-02\");\n \t\t\n \t\tverify(encounterService).searchForEncounters(dateRangeCaptor.capture(), isNull(), isNull(), isNull());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex 071de6be..a74d508e 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -134,7 +128,7 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t}\n \t\n \t@Test\n-\tpublic void shouldGetObservationsByDate() throws Exception {\n+\tpublic void shouldGetEncountersByDate() throws Exception {\n \t\tverifyUri(\"/Encounter/?date=ge1975-02-02\");\n \t\t\n \t\tverify(encounterService).searchForEncounters(dateRangeCaptor.capture(), isNull(), isNull(), isNull());\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex a74d508e..8721569c 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -124,7 +141,9 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t\t\n \t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n \t\tassertThat(subjectCaptor.getValue(), notNullValue());\n-\t\tassertThat(subjectCaptor.getValue().getIdPart(), equalTo(PATIENT_UUID));\n+\t\tassertThat(subjectCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\n+\t\t        .getValuesAsQueryTokens().iterator().next().getIdPart(),\n+\t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "54537f3da3103dcf7914c0d31562bc912bc3c5e0", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex 8721569c..2dd2f52f 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -144,6 +148,9 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t\tassertThat(subjectCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\n \t\t        .getValuesAsQueryTokens().iterator().next().getIdPart(),\n \t\t    equalTo(PATIENT_UUID));\n+\t\tassertThat(subjectCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\n+\t\t        .getValuesAsQueryTokens().iterator().next().getChain(),\n+\t\t    equalTo(null));\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "committedDate": "2020-03-04 09:25:55 -0500", "message": "FM2-72: Added provenances for additional resources (#104)"}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "54537f3da3103dcf7914c0d31562bc912bc3c5e0", "committedDate": "2020-05-18 13:16:05 -0400", "message": "FM2-175: Correctly handled empty chained parameters (#173)"}, {"oid": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "committedDate": "2020-05-22 17:04:04 -0400", "message": "FM2-183: Add support for DSTU3 (#158)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MTIwMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384541200", "body": "Ditto", "bodyText": "Ditto", "bodyHTML": "<p dir=\"auto\">Ditto</p>", "author": "ibacher", "createdAt": "2020-02-26T14:51:01Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -82,31 +125,145 @@ public void getEncounterByWrongUuid_shouldReturn404() throws Exception {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnBundleOfEncounters() throws IOException, ServletException {\n-\t\tEncounter encounter = new Encounter();\n-\t\tencounter.setId(ENCOUNTER_UUID);\n-\t\twhen(encounterService.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(encounter));\n+\tpublic void shouldGetObservationsBySubjectUuid() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter?subject:Patient=%s\", PATIENT_UUID));\n \t\t\n-\t\tMockHttpServletResponse response = get(\"/Encounter?patient.identifier=\" + PATIENT_IDENTIFIER)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getIdPart(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByDate() throws Exception {\n+\t\tverifyUri(\"/Encounter/?date=ge1975-02-02\");\n \t\t\n-\t\tassertThat(response, isOk());\n-\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n-\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t\tverify(encounterService).searchForEncounters(dateRangeCaptor.capture(), isNull(), isNull(), isNull());\n+\t\tassertThat(dateRangeCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(1975, 1, 2);\n+\t\t\n+\t\tassertThat(dateRangeCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeCaptor.getValue().getUpperBound(), nullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByLocationCityVillage() throws Exception {", "originalCommit": "abfdde871aa48708a002414bac97c705dac8df9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex 071de6be..14c26321 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -149,7 +152,7 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t}\n \t\n \t@Test\n-\tpublic void shouldGetObservationsByLocationCityVillage() throws Exception {\n+\tpublic void shouldGetEncountersByLocationCityVillage() throws Exception {\n \t\tverifyUri(String.format(\"/Encounter/?location.address-city=%s\", ENCOUNTER_ADDRESS_CITY));\n \t\t\n \t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex 071de6be..a74d508e 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -149,7 +143,7 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t}\n \t\n \t@Test\n-\tpublic void shouldGetObservationsByLocationCityVillage() throws Exception {\n+\tpublic void shouldGetEncountersByLocationCityVillage() throws Exception {\n \t\tverifyUri(String.format(\"/Encounter/?location.address-city=%s\", ENCOUNTER_ADDRESS_CITY));\n \t\t\n \t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex a74d508e..8721569c 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -147,9 +166,13 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t\tverifyUri(String.format(\"/Encounter/?location.address-city=%s\", ENCOUNTER_ADDRESS_CITY));\n \t\t\n \t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n+\t\t\n+\t\tList<ReferenceOrListParam> orListParams = locationCaptor.getValue().getValuesAsQueryTokens();\n+\t\tReferenceParam referenceParam = orListParams.get(0).getValuesAsQueryTokens().get(0);\n+\t\t\n \t\tassertThat(locationCaptor.getValue(), notNullValue());\n-\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-city\"));\n-\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t\tassertThat(referenceParam.getChain(), equalTo(\"address-city\"));\n+\t\tassertThat(referenceParam.getValue(), equalTo(ENCOUNTER_ADDRESS_CITY));\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "committedDate": "2020-03-04 09:25:55 -0500", "message": "FM2-72: Added provenances for additional resources (#104)"}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "54537f3da3103dcf7914c0d31562bc912bc3c5e0", "committedDate": "2020-05-18 13:16:05 -0400", "message": "FM2-175: Correctly handled empty chained parameters (#173)"}, {"oid": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "committedDate": "2020-05-22 17:04:04 -0400", "message": "FM2-183: Add support for DSTU3 (#158)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MTI4MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384541281", "body": "Ditto", "bodyText": "Ditto", "bodyHTML": "<p dir=\"auto\">Ditto</p>", "author": "ibacher", "createdAt": "2020-02-26T14:51:08Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -82,31 +125,145 @@ public void getEncounterByWrongUuid_shouldReturn404() throws Exception {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnBundleOfEncounters() throws IOException, ServletException {\n-\t\tEncounter encounter = new Encounter();\n-\t\tencounter.setId(ENCOUNTER_UUID);\n-\t\twhen(encounterService.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(encounter));\n+\tpublic void shouldGetObservationsBySubjectUuid() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter?subject:Patient=%s\", PATIENT_UUID));\n \t\t\n-\t\tMockHttpServletResponse response = get(\"/Encounter?patient.identifier=\" + PATIENT_IDENTIFIER)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getIdPart(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByDate() throws Exception {\n+\t\tverifyUri(\"/Encounter/?date=ge1975-02-02\");\n \t\t\n-\t\tassertThat(response, isOk());\n-\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n-\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t\tverify(encounterService).searchForEncounters(dateRangeCaptor.capture(), isNull(), isNull(), isNull());\n+\t\tassertThat(dateRangeCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(1975, 1, 2);\n+\t\t\n+\t\tassertThat(dateRangeCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeCaptor.getValue().getUpperBound(), nullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByLocationCityVillage() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?location.address-city=%s\", ENCOUNTER_ADDRESS_CITY));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n+\t\tassertThat(locationCaptor.getValue(), notNullValue());\n+\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-city\"));\n+\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByLocationState() throws Exception {", "originalCommit": "abfdde871aa48708a002414bac97c705dac8df9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex 071de6be..14c26321 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -159,7 +162,7 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t}\n \t\n \t@Test\n-\tpublic void shouldGetObservationsByLocationState() throws Exception {\n+\tpublic void shouldGetEncountersByLocationState() throws Exception {\n \t\tverifyUri(String.format(\"/Encounter/?location.address-state=%s\", ENCOUNTER_ADDRESS_STATE));\n \t\t\n \t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex 071de6be..a74d508e 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -159,7 +153,7 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t}\n \t\n \t@Test\n-\tpublic void shouldGetObservationsByLocationState() throws Exception {\n+\tpublic void shouldGetEncountersByLocationState() throws Exception {\n \t\tverifyUri(String.format(\"/Encounter/?location.address-state=%s\", ENCOUNTER_ADDRESS_STATE));\n \t\t\n \t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex a74d508e..8721569c 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -147,9 +166,13 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t\tverifyUri(String.format(\"/Encounter/?location.address-city=%s\", ENCOUNTER_ADDRESS_CITY));\n \t\t\n \t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n+\t\t\n+\t\tList<ReferenceOrListParam> orListParams = locationCaptor.getValue().getValuesAsQueryTokens();\n+\t\tReferenceParam referenceParam = orListParams.get(0).getValuesAsQueryTokens().get(0);\n+\t\t\n \t\tassertThat(locationCaptor.getValue(), notNullValue());\n-\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-city\"));\n-\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t\tassertThat(referenceParam.getChain(), equalTo(\"address-city\"));\n+\t\tassertThat(referenceParam.getValue(), equalTo(ENCOUNTER_ADDRESS_CITY));\n \t}\n \t\n \t@Test\n", "next_change": null}, {"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex a74d508e..8721569c 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -157,9 +180,13 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirResourceProvid\n \t\tverifyUri(String.format(\"/Encounter/?location.address-state=%s\", ENCOUNTER_ADDRESS_STATE));\n \t\t\n \t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n+\t\t\n+\t\tList<ReferenceOrListParam> orListParams = locationCaptor.getValue().getValuesAsQueryTokens();\n+\t\tReferenceParam referenceParam = orListParams.get(0).getValuesAsQueryTokens().get(0);\n+\t\t\n \t\tassertThat(locationCaptor.getValue(), notNullValue());\n-\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-state\"));\n-\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_ADDRESS_STATE));\n+\t\tassertThat(referenceParam.getChain(), equalTo(\"address-state\"));\n+\t\tassertThat(referenceParam.getValue(), equalTo(ENCOUNTER_ADDRESS_STATE));\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "committedDate": "2020-03-04 09:25:55 -0500", "message": "FM2-72: Added provenances for additional resources (#104)"}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "54537f3da3103dcf7914c0d31562bc912bc3c5e0", "committedDate": "2020-05-18 13:16:05 -0400", "message": "FM2-175: Correctly handled empty chained parameters (#173)"}, {"oid": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "committedDate": "2020-05-22 17:04:04 -0400", "message": "FM2-183: Add support for DSTU3 (#158)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MzQyMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384543420", "body": "This also needs some tests verifying complex behaviour. I.e., what should happen if I request\r\n`/Encounter?subject.given=Harold&location.address-postalcode=90210,90177`?", "bodyText": "This also needs some tests verifying complex behaviour. I.e., what should happen if I request\n/Encounter?subject.given=Harold&location.address-postalcode=90210,90177?", "bodyHTML": "<p dir=\"auto\">This also needs some tests verifying complex behaviour. I.e., what should happen if I request<br>\n<code>/Encounter?subject.given=Harold&amp;location.address-postalcode=90210,90177</code>?</p>", "author": "ibacher", "createdAt": "2020-02-26T14:54:05Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -12,22 +12,29 @@\n import static org.hamcrest.MatcherAssert.assertThat;", "originalCommit": "abfdde871aa48708a002414bac97c705dac8df9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3NjA1MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384576050", "bodyText": "@ibacher What should happen in this case?\n@Test\n\tpublic void shouldGetEncountersBySubjectGivenNameAndLocationPostalCode() throws Exception {\n\t\tverifyUri(\"/Encounter?subject.given=Harold&?location.address-postalcode=90210,90177\");\n\n\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), subjectCaptor.capture());\n\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n\t\tassertThat(locationCaptor.getValue(), notNullValue());\n\t\tassertThat(subjectCaptor.getValue().getChain(), equalTo(\"given\"));\n\t\tassertThat(subjectCaptor.getValue().getValue(), equalTo(PATIENT_GIVEN_NAME));\n\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-postalcode\"));\n\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_POSTALCODE));\n\t}\nThe error failed with error message\n\njava.lang.AssertionError: \nExpected: response with HTTP status indicating request was handled successfully\n     but: response with status code <400> with message \"Invalid request: The FHIR endpoint on this server does not know how to handle GET operation[Encounter] with parameters [[?location.address-postalcode, subject.given]]\"", "author": "VaishSiddharth", "createdAt": "2020-02-26T15:40:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MzQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3NzMwNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384577304", "bodyText": "@ibacher Its working if I use only one parameter in location\nlike this\n/Encounter?subject.given=Hannibal&location.address-postalcode=248001", "author": "VaishSiddharth", "createdAt": "2020-02-26T15:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MzQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3OTk4Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384679982", "bodyText": "Oh yeah, fair enough, we'd have to change it to a ReferenceOrListParam, which probably isn't worth it for this PR.", "author": "ibacher", "createdAt": "2020-02-26T18:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MzQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MTU1OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384681559", "bodyText": "@ibacher I think I have fixed everything else. So is it ready for getting merged ?", "author": "VaishSiddharth", "createdAt": "2020-02-26T18:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MzQyMA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "changed_code": [{"header": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\nindex 071de6be..fed0b1ff 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java\n", "chunk": "@@ -12,6 +12,7 @@ package org.openmrs.module.fhir2.providers;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.not;\n import static org.hamcrest.Matchers.notNullValue;\n import static org.hamcrest.Matchers.nullValue;\n", "next_change": null}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "1e3e65382ded98ab7a68f704e52e06615a6f2377", "committedDate": "2020-03-04 09:25:55 -0500", "message": "FM2-72: Added provenances for additional resources (#104)"}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "54537f3da3103dcf7914c0d31562bc912bc3c5e0", "committedDate": "2020-05-18 13:16:05 -0400", "message": "FM2-175: Correctly handled empty chained parameters (#173)"}, {"oid": "c1548b3253a6d006b1c8edfbde4349bdb608503e", "committedDate": "2020-05-22 17:04:04 -0400", "message": "FM2-183: Add support for DSTU3 (#158)"}]}, {"oid": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9e7618c7ea7dc002a5338ac49792b88f95b60c29", "message": "issues fixed", "committedDate": "2020-02-26T16:57:59Z", "type": "commit"}, {"oid": "5afb7189963f1536dcd3742eac504eb5d2d521bb", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5afb7189963f1536dcd3742eac504eb5d2d521bb", "message": "observation file removed and code ordered properly", "committedDate": "2020-02-26T17:15:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MTU3NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384681574", "body": "This seems to be searching by subject rather than participant", "bodyText": "This seems to be searching by subject rather than participant", "bodyHTML": "<p dir=\"auto\">This seems to be searching by subject rather than participant</p>", "author": "ibacher", "createdAt": "2020-02-26T18:29:55Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +100,183 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters.size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(encounters.stream().findFirst().isPresent(), is(true));\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient(), notNullValue());\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient().getPatientIdentifier().getIdentifier(),\n+\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_NAME);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n \t\t    equalTo(PATIENT_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByWrongPatientIdentifier_shouldReturnEmptyCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(WRONG_PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters, is(empty()));\n+\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(WRONG_PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, is(empty()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tparticipantReference.setValue(PATIENT_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n \t}\n \t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getGivenName(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFamilyName(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {", "originalCommit": "5afb7189963f1536dcd3742eac504eb5d2d521bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee11aeee393035fc7a351c44a075cc23ae6fa84b", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex d4528652..af62759c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -239,31 +241,34 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n-\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\tReferenceParam participantReference = new ReferenceParam();\n \t\t\n-\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n-\t\tsubjectReference.setChain(Practitioner.SP_NAME);\n+\t\tparticipantReference.setValue(PARTICIPANT_FULL_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_NAME);\n \t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n-\t\t    equalTo(PATIENT_FULL_NAME));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFullName(),\n+\t\t    equalTo(PARTICIPANT_FULL_NAME));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n \t\tReferenceParam locationReference = new ReferenceParam();\n \t\t\n-\t\tlocationReference.setValue(ADDRESS_CITY);\n+\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_CITY);\n \t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ADDRESS_CITY));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n \t}\n \t\n \t@Test\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex d4528652..af62759c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -239,31 +241,34 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n-\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\tReferenceParam participantReference = new ReferenceParam();\n \t\t\n-\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n-\t\tsubjectReference.setChain(Practitioner.SP_NAME);\n+\t\tparticipantReference.setValue(PARTICIPANT_FULL_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_NAME);\n \t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n-\t\t    equalTo(PATIENT_FULL_NAME));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFullName(),\n+\t\t    equalTo(PARTICIPANT_FULL_NAME));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n \t\tReferenceParam locationReference = new ReferenceParam();\n \t\t\n-\t\tlocationReference.setValue(ADDRESS_CITY);\n+\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_CITY);\n \t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ADDRESS_CITY));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af62759c..465ac967 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -273,10 +309,13 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n-\t\tReferenceParam locationReference = new ReferenceParam();\n+\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n+\t\tReferenceParam location = new ReferenceParam();\n \t\t\n-\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_STATE);\n-\t\tlocationReference.setChain(Location.SP_ADDRESS_STATE);\n+\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocation.setChain(Location.SP_ADDRESS_STATE);\n+\t\t\n+\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n", "next_change": {"commit": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 465ac967..7f3b9850 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -312,16 +351,66 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n \t\tReferenceParam location = new ReferenceParam();\n \t\t\n-\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocation.setValue(ENCOUNTER_LOCATION_STATE);\n \t\tlocation.setChain(Location.SP_ADDRESS_STATE);\n \t\t\n \t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCountry() {\n+\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n+\t\tReferenceParam location = new ReferenceParam();\n+\t\t\n+\t\tlocation.setValue(ENCOUNTER_LOCATION_COUNTRY);\n+\t\tlocation.setChain(Location.SP_ADDRESS_COUNTRY);\n+\t\t\n+\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationPostalCode() {\n+\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n+\t\tReferenceParam location = new ReferenceParam();\n+\t\t\n+\t\tlocation.setValue(ENCOUNTER_LOCATION_POSTAL_CODE);\n+\t\tlocation.setChain(Location.SP_ADDRESS_POSTALCODE);\n+\t\t\n+\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getPostalCode(), equalTo(ENCOUNTER_LOCATION_POSTAL_CODE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationUuid() {\n+\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n+\t\tReferenceParam location = new ReferenceParam();\n+\t\t\n+\t\tlocation.setValue(ENCOUNTER_LOCATION_UUID);\n+\t\t\n+\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n+\t\tassertThat(results.iterator().next().getLocation().getUuid(), equalTo(ENCOUNTER_LOCATION_UUID));\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 7f3b9850..734cf9f8 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -109,388 +56,7 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void shouldReturnNullWithUnknownEncounterUuid() {\n-\t\tEncounter encounter = dao.getEncounterByUuid(UNKNOWN_ENCOUNTER_UUID);\n+\t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FULL_NAME);\n-\t\tsubject.setChain(Patient.SP_NAME);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n-\t\t    equalTo(PATIENT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FAMILY_NAME);\n-\t\tsubject.setChain(Patient.SP_FAMILY);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n-\t\t    equalTo(PATIENT_FAMILY_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubject.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n-\t\t    equalTo(PATIENT_GIVEN_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectUuid() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_UUID);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getUuid(), equalTo(PATIENT_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(WRONG_PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, is(empty()));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n-\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n-\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getGivenName(),\n-\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFamilyName(),\n-\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantUuid() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_UUID);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getUuid(),\n-\t\t    equalTo(PARTICIPANT_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_CITY);\n-\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_STATE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCountry() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_COUNTRY);\n-\t\tlocation.setChain(Location.SP_ADDRESS_COUNTRY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationPostalCode() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_POSTAL_CODE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_POSTALCODE);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getPostalCode(), equalTo(ENCOUNTER_LOCATION_POSTAL_CODE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationUuid() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_UUID);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getUuid(), equalTo(ENCOUNTER_LOCATION_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifierAndGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subjectIdentifier = new ReferenceParam();\n-\t\tReferenceParam subjectGiven = new ReferenceParam();\n-\t\t\n-\t\tsubjectIdentifier.setValue(PATIENT_IDENTIFIER);\n-\t\tsubjectIdentifier.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectGiven.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubjectGiven.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subjectIdentifier).add(subjectGiven));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantNameGivenAndFamily() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participantName = new ReferenceParam();\n-\t\tReferenceParam participantGiven = new ReferenceParam();\n-\t\tReferenceParam participantFamily = new ReferenceParam();\n-\t\t\n-\t\tparticipantName.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipantName.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantGiven.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipantGiven.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantFamily.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipantFamily.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participantName));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationStateCityAndCountry() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam locationState = new ReferenceParam();\n-\t\tReferenceParam locationCity = new ReferenceParam();\n-\t\tReferenceParam locationCountry = new ReferenceParam();\n-\t\t\n-\t\tlocationState.setValue(ENCOUNTER_LOCATION_STATE);\n-\t\tlocationState.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationCity.setValue(ENCOUNTER_LOCATION_CITY);\n-\t\tlocationCity.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationCountry.setValue(ENCOUNTER_LOCATION_COUNTRY);\n-\t\tlocationCountry.setChain(Location.SP_ADDRESS_COUNTRY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(locationCity).add(locationCountry).add(locationState));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n-\t}\n }\n", "next_change": {"commit": "c38967adadebcf9596996a5e27236ddaf6bea433", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 734cf9f8..af199212 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -59,4 +73,29 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldOnlyReturnEncountersThatHaveAssociatedMedicationRequests() {\n+\t\tEncounter withNoDrugOrders = dao.get(ENCOUNTER_WITH_NO_DRUG_ORDERS);\n+\t\tassertThat(withNoDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is empty\", withNoDrugOrders.getOrders().isEmpty());\n+\t\t\n+\t\tEncounter withDrugOrders = dao.get(ENCOUNTER_WITH_DRUG_ORDERS);\n+\t\tassertThat(withDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is not empty\", !withDrugOrders.getOrders().isEmpty());\n+\t\tfor (Order order : withDrugOrders.getOrders()) {\n+\t\t\tassertThat(order.getClass(), equalTo(DrugOrder.class));\n+\t\t}\n+\t\t\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n+\t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n+\t}\n }\n", "next_change": {"commit": "0aad342e90225196459128b33da0426bef9b7b5c", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af199212..4ecc47f7 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -98,4 +99,18 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n \t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldNotReturnEncounterThatHasOnlyDiscontinueOrder() {\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n+\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t}\n }\n", "next_change": {"commit": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 4ecc47f7..9280cc2b 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -109,8 +119,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n \t\t    hasAndListParam);\n \t\t\n-\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n-\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n-\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t\tList<Integer> matchingResourceIds = dao.getSearchResultIds(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n+\t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n }\n", "next_change": {"commit": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 9280cc2b..d728f3aa 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -123,4 +147,14 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n \t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n+\t\n+\t@Test\n+\tpublic void delete_shouldVoidEncounterAndUnderlyingObservations() {\n+\t\tEncounter encounter = dao.delete(ENCOUNTER_UUID);\n+\t\tassertThat(encounter.getVoided(), equalTo(true));\n+\t\tassertThat(encounter.getDateVoided(), not(nullValue()));\n+\t\tassertThat(encounter.getVoidedBy(), equalTo(Context.getAuthenticatedUser()));\n+\t\tassertThat(encounter.getVoidReason(), equalTo(\"Voided via FHIR API\"));\n+\t\tassertThat(encounter.getObs().size(), equalTo(0)); // \"getObs\" does not return voided obs, so if all obs are voided, this count should be 0\n+\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "committedDate": "2020-04-02 21:36:51 +0300", "message": "FM2-135 Fix NPE when search by subject UUID (#133)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "d4e4e1278fd2bdd0603e05e20f793d93219014b7", "committedDate": "2022-05-20 15:04:26 -0400", "message": "Add additional display text to concept and medication resources (#403)"}, {"oid": "0aad342e90225196459128b33da0426bef9b7b5c", "committedDate": "2022-11-18 11:03:04 -0500", "message": "FM2-532: MedicationRequest endpoint should not return Discontinue Orders (#447)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "4af8727c8bc5f47f58060b0efc6d07a5b1e6e565", "committedDate": "2022-12-05 15:36:20 -0500", "message": "FM2-476: Add support for searching MedicationRequests based on status (#450)"}, {"oid": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "committedDate": "2022-12-06 14:36:05 -0500", "message": "FM2-535: BaseFHIRDao should set date voided/date retired and voided b\u2026 (#451)"}, {"oid": "dda1d10362cf03b61607a31101e3bf33f9439796", "committedDate": "2023-02-21 14:09:51 -0500", "message": "FM2-558: Create new named query \"encountersWithMedicationRequests\" in EncounterFhirResource Provider (#459)"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjEwNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384682105", "body": "The constant we use here should be `PARTICIPANT_IDENTIFIER` even if it has the same value as `PATIENT_IDENTIFIER`.", "bodyText": "The constant we use here should be PARTICIPANT_IDENTIFIER even if it has the same value as PATIENT_IDENTIFIER.", "bodyHTML": "<p dir=\"auto\">The constant we use here should be <code>PARTICIPANT_IDENTIFIER</code> even if it has the same value as <code>PATIENT_IDENTIFIER</code>.</p>", "author": "ibacher", "createdAt": "2020-02-26T18:30:53Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +100,183 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters.size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(encounters.stream().findFirst().isPresent(), is(true));\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient(), notNullValue());\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient().getPatientIdentifier().getIdentifier(),\n+\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_NAME);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n \t\t    equalTo(PATIENT_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByWrongPatientIdentifier_shouldReturnEmptyCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(WRONG_PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters, is(empty()));\n+\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(WRONG_PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, is(empty()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tparticipantReference.setValue(PATIENT_IDENTIFIER);", "originalCommit": "5afb7189963f1536dcd3742eac504eb5d2d521bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4Mzg2Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384683867", "bodyText": "Also remember that the chain property needs to be set after the value.", "author": "ibacher", "createdAt": "2020-02-26T18:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjEwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ee11aeee393035fc7a351c44a075cc23ae6fa84b", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex d4528652..af62759c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -186,8 +188,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n \t\tReferenceParam participantReference = new ReferenceParam();\n \t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_IDENTIFIER);\n \t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n-\t\tparticipantReference.setValue(PATIENT_IDENTIFIER);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex d4528652..af62759c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -186,8 +188,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n \t\tReferenceParam participantReference = new ReferenceParam();\n \t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_IDENTIFIER);\n \t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n-\t\tparticipantReference.setValue(PATIENT_IDENTIFIER);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af62759c..465ac967 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -186,10 +207,13 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n-\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n+\t\tReferenceParam participant = new ReferenceParam();\n+\t\t\n+\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n+\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n \t\t\n-\t\tparticipantReference.setValue(PARTICIPANT_IDENTIFIER);\n-\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 465ac967..734cf9f8 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -103,305 +56,7 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void shouldReturnNullWithUnknownEncounterUuid() {\n-\t\tEncounter encounter = dao.getEncounterByUuid(UNKNOWN_ENCOUNTER_UUID);\n+\t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FULL_NAME);\n-\t\tsubject.setChain(Patient.SP_NAME);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n-\t\t    equalTo(PATIENT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FAMILY_NAME);\n-\t\tsubject.setChain(Patient.SP_FAMILY);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n-\t\t    equalTo(PATIENT_FAMILY_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubject.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n-\t\t    equalTo(PATIENT_GIVEN_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(WRONG_PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, is(empty()));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n-\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n-\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getGivenName(),\n-\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n-\t\t\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFamilyName(),\n-\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n-\t\t\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_ADDRESS_CITY);\n-\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifierAndGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subjectIdentifier = new ReferenceParam();\n-\t\tReferenceParam subjectGiven = new ReferenceParam();\n-\t\t\n-\t\tsubjectIdentifier.setValue(PATIENT_IDENTIFIER);\n-\t\tsubjectIdentifier.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectGiven.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubjectGiven.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subjectIdentifier).add(subjectGiven));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantNameGivenAndFamily() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participantName = new ReferenceParam();\n-\t\tReferenceParam participantGiven = new ReferenceParam();\n-\t\tReferenceParam participantFamily = new ReferenceParam();\n-\t\t\n-\t\tparticipantName.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipantName.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantGiven.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipantGiven.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantFamily.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipantFamily.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participantName));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationStateCityAndCountry() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam locationState = new ReferenceParam();\n-\t\tReferenceParam locationCity = new ReferenceParam();\n-\t\tReferenceParam locationCountry = new ReferenceParam();\n-\t\t\n-\t\tlocationState.setValue(ENCOUNTER_ADDRESS_STATE);\n-\t\tlocationState.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationCity.setValue(ENCOUNTER_ADDRESS_CITY);\n-\t\tlocationCity.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationCountry.setValue(ENCOUNTER_ADDRESS_COUNTRY);\n-\t\tlocationCountry.setChain(Location.SP_ADDRESS_COUNTRY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(locationCity).add(locationCountry).add(locationState));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_ADDRESS_COUNTRY));\n-\t}\n }\n", "next_change": {"commit": "c38967adadebcf9596996a5e27236ddaf6bea433", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 734cf9f8..af199212 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -59,4 +73,29 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldOnlyReturnEncountersThatHaveAssociatedMedicationRequests() {\n+\t\tEncounter withNoDrugOrders = dao.get(ENCOUNTER_WITH_NO_DRUG_ORDERS);\n+\t\tassertThat(withNoDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is empty\", withNoDrugOrders.getOrders().isEmpty());\n+\t\t\n+\t\tEncounter withDrugOrders = dao.get(ENCOUNTER_WITH_DRUG_ORDERS);\n+\t\tassertThat(withDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is not empty\", !withDrugOrders.getOrders().isEmpty());\n+\t\tfor (Order order : withDrugOrders.getOrders()) {\n+\t\t\tassertThat(order.getClass(), equalTo(DrugOrder.class));\n+\t\t}\n+\t\t\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n+\t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n+\t}\n }\n", "next_change": {"commit": "0aad342e90225196459128b33da0426bef9b7b5c", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af199212..4ecc47f7 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -98,4 +99,18 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n \t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldNotReturnEncounterThatHasOnlyDiscontinueOrder() {\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n+\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t}\n }\n", "next_change": {"commit": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 4ecc47f7..9280cc2b 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -109,8 +119,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n \t\t    hasAndListParam);\n \t\t\n-\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n-\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n-\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t\tList<Integer> matchingResourceIds = dao.getSearchResultIds(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n+\t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n }\n", "next_change": {"commit": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 9280cc2b..d728f3aa 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -123,4 +147,14 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n \t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n+\t\n+\t@Test\n+\tpublic void delete_shouldVoidEncounterAndUnderlyingObservations() {\n+\t\tEncounter encounter = dao.delete(ENCOUNTER_UUID);\n+\t\tassertThat(encounter.getVoided(), equalTo(true));\n+\t\tassertThat(encounter.getDateVoided(), not(nullValue()));\n+\t\tassertThat(encounter.getVoidedBy(), equalTo(Context.getAuthenticatedUser()));\n+\t\tassertThat(encounter.getVoidReason(), equalTo(\"Voided via FHIR API\"));\n+\t\tassertThat(encounter.getObs().size(), equalTo(0)); // \"getObs\" does not return voided obs, so if all obs are voided, this count should be 0\n+\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "committedDate": "2020-04-02 21:36:51 +0300", "message": "FM2-135 Fix NPE when search by subject UUID (#133)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "d4e4e1278fd2bdd0603e05e20f793d93219014b7", "committedDate": "2022-05-20 15:04:26 -0400", "message": "Add additional display text to concept and medication resources (#403)"}, {"oid": "0aad342e90225196459128b33da0426bef9b7b5c", "committedDate": "2022-11-18 11:03:04 -0500", "message": "FM2-532: MedicationRequest endpoint should not return Discontinue Orders (#447)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "4af8727c8bc5f47f58060b0efc6d07a5b1e6e565", "committedDate": "2022-12-05 15:36:20 -0500", "message": "FM2-476: Add support for searching MedicationRequests based on status (#450)"}, {"oid": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "committedDate": "2022-12-06 14:36:05 -0500", "message": "FM2-535: BaseFHIRDao should set date voided/date retired and voided b\u2026 (#451)"}, {"oid": "dda1d10362cf03b61607a31101e3bf33f9439796", "committedDate": "2023-02-21 14:09:51 -0500", "message": "FM2-558: Create new named query \"encountersWithMedicationRequests\" in EncounterFhirResource Provider (#459)"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjQyNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384682425", "body": "This constant should be `PRACTITIONER_FULL_NAME` even if it has the same value as `PATIENT_FULL_NAME`", "bodyText": "This constant should be PRACTITIONER_FULL_NAME even if it has the same value as PATIENT_FULL_NAME", "bodyHTML": "<p dir=\"auto\">This constant should be <code>PRACTITIONER_FULL_NAME</code> even if it has the same value as <code>PATIENT_FULL_NAME</code></p>", "author": "ibacher", "createdAt": "2020-02-26T18:31:29Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +100,183 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters.size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(encounters.stream().findFirst().isPresent(), is(true));\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient(), notNullValue());\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient().getPatientIdentifier().getIdentifier(),\n+\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_NAME);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n \t\t    equalTo(PATIENT_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByWrongPatientIdentifier_shouldReturnEmptyCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(WRONG_PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters, is(empty()));\n+\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(WRONG_PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, is(empty()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tparticipantReference.setValue(PATIENT_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n \t}\n \t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getGivenName(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFamilyName(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);", "originalCommit": "5afb7189963f1536dcd3742eac504eb5d2d521bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee11aeee393035fc7a351c44a075cc23ae6fa84b", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex d4528652..af62759c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -239,31 +241,34 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n-\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\tReferenceParam participantReference = new ReferenceParam();\n \t\t\n-\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n-\t\tsubjectReference.setChain(Practitioner.SP_NAME);\n+\t\tparticipantReference.setValue(PARTICIPANT_FULL_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_NAME);\n \t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n-\t\t    equalTo(PATIENT_FULL_NAME));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFullName(),\n+\t\t    equalTo(PARTICIPANT_FULL_NAME));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n \t\tReferenceParam locationReference = new ReferenceParam();\n \t\t\n-\t\tlocationReference.setValue(ADDRESS_CITY);\n+\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_CITY);\n \t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ADDRESS_CITY));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n \t}\n \t\n \t@Test\n", "next_change": null}]}, "revised_code_in_main": {"commit": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex d4528652..af62759c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -239,31 +241,34 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n-\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\tReferenceParam participantReference = new ReferenceParam();\n \t\t\n-\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n-\t\tsubjectReference.setChain(Practitioner.SP_NAME);\n+\t\tparticipantReference.setValue(PARTICIPANT_FULL_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_NAME);\n \t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n-\t\t    equalTo(PATIENT_FULL_NAME));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFullName(),\n+\t\t    equalTo(PARTICIPANT_FULL_NAME));\n \t}\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n \t\tReferenceParam locationReference = new ReferenceParam();\n \t\t\n-\t\tlocationReference.setValue(ADDRESS_CITY);\n+\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_CITY);\n \t\tlocationReference.setChain(Location.SP_ADDRESS_CITY);\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n \t\tassertThat(results, Matchers.notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ADDRESS_CITY));\n+\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_ADDRESS_CITY));\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af62759c..465ac967 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -273,10 +309,13 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n-\t\tReferenceParam locationReference = new ReferenceParam();\n+\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n+\t\tReferenceParam location = new ReferenceParam();\n \t\t\n-\t\tlocationReference.setValue(ENCOUNTER_ADDRESS_STATE);\n-\t\tlocationReference.setChain(Location.SP_ADDRESS_STATE);\n+\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocation.setChain(Location.SP_ADDRESS_STATE);\n+\t\t\n+\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n", "next_change": {"commit": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 465ac967..7f3b9850 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -312,16 +351,66 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n \t\tReferenceParam location = new ReferenceParam();\n \t\t\n-\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocation.setValue(ENCOUNTER_LOCATION_STATE);\n \t\tlocation.setChain(Location.SP_ADDRESS_STATE);\n \t\t\n \t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n \t\t\n \t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n \t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCountry() {\n+\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n+\t\tReferenceParam location = new ReferenceParam();\n+\t\t\n+\t\tlocation.setValue(ENCOUNTER_LOCATION_COUNTRY);\n+\t\tlocation.setChain(Location.SP_ADDRESS_COUNTRY);\n+\t\t\n+\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationPostalCode() {\n+\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n+\t\tReferenceParam location = new ReferenceParam();\n+\t\t\n+\t\tlocation.setValue(ENCOUNTER_LOCATION_POSTAL_CODE);\n+\t\tlocation.setChain(Location.SP_ADDRESS_POSTALCODE);\n+\t\t\n+\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getLocation().getPostalCode(), equalTo(ENCOUNTER_LOCATION_POSTAL_CODE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationUuid() {\n+\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n+\t\tReferenceParam location = new ReferenceParam();\n+\t\t\n+\t\tlocation.setValue(ENCOUNTER_LOCATION_UUID);\n+\t\t\n+\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_ADDRESS_STATE));\n+\t\tassertThat(results.iterator().next().getLocation().getUuid(), equalTo(ENCOUNTER_LOCATION_UUID));\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 7f3b9850..734cf9f8 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -109,388 +56,7 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\n \t@Test\n \tpublic void shouldReturnNullWithUnknownEncounterUuid() {\n-\t\tEncounter encounter = dao.getEncounterByUuid(UNKNOWN_ENCOUNTER_UUID);\n+\t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n-\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n-\t\t    null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FULL_NAME);\n-\t\tsubject.setChain(Patient.SP_NAME);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n-\t\t    equalTo(PATIENT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_FAMILY_NAME);\n-\t\tsubject.setChain(Patient.SP_FAMILY);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n-\t\t    equalTo(PATIENT_FAMILY_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubject.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n-\t\t    equalTo(PATIENT_GIVEN_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectUuid() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_UUID);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getUuid(), equalTo(PATIENT_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subject = new ReferenceParam();\n-\t\t\n-\t\tsubject.setValue(WRONG_PATIENT_IDENTIFIER);\n-\t\tsubject.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subject));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, is(empty()));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n-\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n-\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getGivenName(),\n-\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFamilyName(),\n-\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipant.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantUuid() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participant = new ReferenceParam();\n-\t\t\n-\t\tparticipant.setValue(PARTICIPANT_UUID);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participant));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getUuid(),\n-\t\t    equalTo(PARTICIPANT_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCity() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_CITY);\n-\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationState() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_STATE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationCountry() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_COUNTRY);\n-\t\tlocation.setChain(Location.SP_ADDRESS_COUNTRY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationPostalCode() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_POSTAL_CODE);\n-\t\tlocation.setChain(Location.SP_ADDRESS_POSTALCODE);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getPostalCode(), equalTo(ENCOUNTER_LOCATION_POSTAL_CODE));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationUuid() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam location = new ReferenceParam();\n-\t\t\n-\t\tlocation.setValue(ENCOUNTER_LOCATION_UUID);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(location));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getLocation().getUuid(), equalTo(ENCOUNTER_LOCATION_UUID));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifierAndGivenName() {\n-\t\tReferenceAndListParam subjectReference = new ReferenceAndListParam();\n-\t\tReferenceParam subjectIdentifier = new ReferenceParam();\n-\t\tReferenceParam subjectGiven = new ReferenceParam();\n-\t\t\n-\t\tsubjectIdentifier.setValue(PATIENT_IDENTIFIER);\n-\t\tsubjectIdentifier.setChain(Patient.SP_IDENTIFIER);\n-\t\t\n-\t\tsubjectGiven.setValue(PATIENT_GIVEN_NAME);\n-\t\tsubjectGiven.setChain(Patient.SP_GIVEN);\n-\t\t\n-\t\tsubjectReference.addValue(new ReferenceOrListParam().add(subjectIdentifier).add(subjectGiven));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantNameGivenAndFamily() {\n-\t\tReferenceAndListParam participantReference = new ReferenceAndListParam();\n-\t\tReferenceParam participantName = new ReferenceParam();\n-\t\tReferenceParam participantGiven = new ReferenceParam();\n-\t\tReferenceParam participantFamily = new ReferenceParam();\n-\t\t\n-\t\tparticipantName.setValue(PARTICIPANT_FULL_NAME);\n-\t\tparticipantName.setChain(Practitioner.SP_NAME);\n-\t\t\n-\t\tparticipantGiven.setValue(PARTICIPANT_GIVEN_NAME);\n-\t\tparticipantGiven.setChain(Practitioner.SP_GIVEN);\n-\t\t\n-\t\tparticipantFamily.setValue(PARTICIPANT_FAMILY_NAME);\n-\t\tparticipantFamily.setChain(Practitioner.SP_FAMILY);\n-\t\t\n-\t\tparticipantReference.addValue(new ReferenceOrListParam().add(participantName));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENCOUNTER_UUID));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n-\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n-\t\t        .getPersonName().getFullName(),\n-\t\t    equalTo(PARTICIPANT_FULL_NAME));\n-\t}\n-\t\n-\t@Test\n-\tpublic void searchForEncounters_shouldSearchForEncountersByEncounterLocationStateCityAndCountry() {\n-\t\tReferenceAndListParam locationReference = new ReferenceAndListParam();\n-\t\tReferenceParam locationState = new ReferenceParam();\n-\t\tReferenceParam locationCity = new ReferenceParam();\n-\t\tReferenceParam locationCountry = new ReferenceParam();\n-\t\t\n-\t\tlocationState.setValue(ENCOUNTER_LOCATION_STATE);\n-\t\tlocationState.setChain(Location.SP_ADDRESS_STATE);\n-\t\t\n-\t\tlocationCity.setValue(ENCOUNTER_LOCATION_CITY);\n-\t\tlocationCity.setChain(Location.SP_ADDRESS_CITY);\n-\t\t\n-\t\tlocationCountry.setValue(ENCOUNTER_LOCATION_COUNTRY);\n-\t\tlocationCountry.setChain(Location.SP_ADDRESS_COUNTRY);\n-\t\t\n-\t\tlocationReference.addValue(new ReferenceOrListParam().add(locationCity).add(locationCountry).add(locationState));\n-\t\t\n-\t\tCollection<Encounter> results = dao.searchForEncounters(null, locationReference, null, null);\n-\t\t\n-\t\tassertThat(results, Matchers.notNullValue());\n-\t\tassertThat(results, not(empty()));\n-\t\tassertThat(results.iterator().next().getUuid(), equalTo(ENC_UUID));\n-\t\tassertThat(results.iterator().next().getLocation().getStateProvince(), equalTo(ENCOUNTER_LOCATION_STATE));\n-\t\tassertThat(results.iterator().next().getLocation().getCityVillage(), equalTo(ENCOUNTER_LOCATION_CITY));\n-\t\tassertThat(results.iterator().next().getLocation().getCountry(), equalTo(ENCOUNTER_LOCATION_COUNTRY));\n-\t}\n }\n", "next_change": {"commit": "c38967adadebcf9596996a5e27236ddaf6bea433", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 734cf9f8..af199212 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -59,4 +73,29 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tEncounter encounter = dao.get(UNKNOWN_ENCOUNTER_UUID);\n \t\tassertThat(encounter, nullValue());\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldOnlyReturnEncountersThatHaveAssociatedMedicationRequests() {\n+\t\tEncounter withNoDrugOrders = dao.get(ENCOUNTER_WITH_NO_DRUG_ORDERS);\n+\t\tassertThat(withNoDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is empty\", withNoDrugOrders.getOrders().isEmpty());\n+\t\t\n+\t\tEncounter withDrugOrders = dao.get(ENCOUNTER_WITH_DRUG_ORDERS);\n+\t\tassertThat(withDrugOrders, notNullValue());\n+\t\tassertThat(\"Orders is not empty\", !withDrugOrders.getOrders().isEmpty());\n+\t\tfor (Order order : withDrugOrders.getOrders()) {\n+\t\t\tassertThat(order.getClass(), equalTo(DrugOrder.class));\n+\t\t}\n+\t\t\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n+\t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n+\t}\n }\n", "next_change": {"commit": "0aad342e90225196459128b33da0426bef9b7b5c", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex af199212..4ecc47f7 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -98,4 +99,18 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with Drug Orders is returned\", matchingUuids.contains(ENCOUNTER_WITH_DRUG_ORDERS));\n \t\tassertThat(\"Encounter without Drug Orders is not returned\", !matchingUuids.contains(ENCOUNTER_WITH_NO_DRUG_ORDERS));\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldNotReturnEncounterThatHasOnlyDiscontinueOrder() {\n+\t\tHasOrListParam hasOrListParam = new HasOrListParam();\n+\t\thasOrListParam.add(new HasParam(\"MedicationRequest\", \"encounter\", \"intent\", \"order\"));\n+\t\tHasAndListParam hasAndListParam = new HasAndListParam();\n+\t\thasAndListParam.addAnd(hasOrListParam);\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n+\t\t    hasAndListParam);\n+\t\t\n+\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n+\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t}\n }\n", "next_change": {"commit": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 4ecc47f7..9280cc2b 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -109,8 +119,8 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.HAS_SEARCH_HANDLER,\n \t\t    hasAndListParam);\n \t\t\n-\t\tList<String> matchingUuids = dao.getSearchResultUuids(theParams);\n-\t\tassertThat(\"Encounter with only Discontinue Order is not returned\",\n-\t\t    !matchingUuids.contains(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER));\n+\t\tList<Integer> matchingResourceIds = dao.getSearchResultIds(theParams);\n+\t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n+\t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n }\n", "next_change": {"commit": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\nindex 9280cc2b..d728f3aa 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java\n", "chunk": "@@ -123,4 +147,14 @@ public class FhirEncounterDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\tassertThat(\"Encounter with only Discontinue Order is not returned\", matchingResourceIds,\n \t\t    not(hasItem(equalTo(ENCOUNTER_WITH_ONLY_DISCONTINUE_DRUG_ORDER))));\n \t}\n+\t\n+\t@Test\n+\tpublic void delete_shouldVoidEncounterAndUnderlyingObservations() {\n+\t\tEncounter encounter = dao.delete(ENCOUNTER_UUID);\n+\t\tassertThat(encounter.getVoided(), equalTo(true));\n+\t\tassertThat(encounter.getDateVoided(), not(nullValue()));\n+\t\tassertThat(encounter.getVoidedBy(), equalTo(Context.getAuthenticatedUser()));\n+\t\tassertThat(encounter.getVoidReason(), equalTo(\"Voided via FHIR API\"));\n+\t\tassertThat(encounter.getObs().size(), equalTo(0)); // \"getObs\" does not return voided obs, so if all obs are voided, this count should be 0\n+\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6", "message": "Merge commit", "committedDate": null}, {"oid": "84da17e7a12c22c77bd967ca115ae0a22dd11cd5", "committedDate": "2020-03-23 14:31:05 -0400", "message": "FM2-92 Add support for AND / OR queries using References (#115)"}, {"oid": "36ef086f4567d3d66f267e9ea0a69a781d2aef2f", "committedDate": "2020-03-30 15:34:24 -0400", "message": "FM2-120: NullPointerException when loading FHIR module in RefApp\u2026 (#128)"}, {"oid": "b5ef9c2a7d417fee1e50d8d488a5a2e2407f1daf", "committedDate": "2020-04-02 21:36:51 +0300", "message": "FM2-135 Fix NPE when search by subject UUID (#133)"}, {"oid": "2bd78ba66549402afb1942d8d02a9d9059e31dca", "committedDate": "2020-05-01 14:46:34 -0400", "message": "FM2-152: Update Encounter DAO and Service (#152)"}, {"oid": "0d91eea2b482393683c0e8d0d763acffe33c7679", "committedDate": "2020-05-05 10:17:56 -0400", "message": "Various formatting fixes"}, {"oid": "653adc40eb5516b4d2a2cc3723d9fad1fc873584", "committedDate": "2020-06-03 09:17:42 +0300", "message": "FM2-166: Update Encounter resource to support paging (#193)"}, {"oid": "c38967adadebcf9596996a5e27236ddaf6bea433", "committedDate": "2022-05-20 10:35:01 -0400", "message": "FM2-477 and FM2-478: Support limiting to only Encounters that have medication requests (#398)"}, {"oid": "d4e4e1278fd2bdd0603e05e20f793d93219014b7", "committedDate": "2022-05-20 15:04:26 -0400", "message": "Add additional display text to concept and medication resources (#403)"}, {"oid": "0aad342e90225196459128b33da0426bef9b7b5c", "committedDate": "2022-11-18 11:03:04 -0500", "message": "FM2-532: MedicationRequest endpoint should not return Discontinue Orders (#447)"}, {"oid": "4930275dcc4b7c524036955c85e72ad5a4bce66d", "committedDate": "2022-12-01 12:28:09 -0500", "message": "FM2-537: SearchQueryBundleProvider should use Integer primary keys"}, {"oid": "4af8727c8bc5f47f58060b0efc6d07a5b1e6e565", "committedDate": "2022-12-05 15:36:20 -0500", "message": "FM2-476: Add support for searching MedicationRequests based on status (#450)"}, {"oid": "aa2a070f29d0c90f2985343fc9efa25f0886a033", "committedDate": "2022-12-06 14:36:05 -0500", "message": "FM2-535: BaseFHIRDao should set date voided/date retired and voided b\u2026 (#451)"}, {"oid": "dda1d10362cf03b61607a31101e3bf33f9439796", "committedDate": "2023-02-21 14:09:51 -0500", "message": "FM2-558: Create new named query \"encountersWithMedicationRequests\" in EncounterFhirResource Provider (#459)"}, {"oid": "d4b351916642bcb02de85b971470a0ba7fe76bfa", "committedDate": "2023-05-05 19:12:32 +0200", "message": "FM2-562: Fix pagination to address slow running queries (#473)"}]}, {"oid": "ee11aeee393035fc7a351c44a075cc23ae6fa84b", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ee11aeee393035fc7a351c44a075cc23ae6fa84b", "message": "names in tests corrected", "committedDate": "2020-02-26T19:05:14Z", "type": "commit"}]}