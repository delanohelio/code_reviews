{"pr_number": 85, "pr_title": "FM2-81: Improving Search for Person Resource", "pr_author": "CaptainDaVinci", "pr_createdAt": "2020-02-22T18:37:54Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzOTgxNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r382939817", "body": "@CaptainDaVinci I think we'll have to write something like what's written in `FhirObservationDaoImpl` @ibacher Please guide\r\n\r\n```java\r\n@Override\r\n\tpublic Collection<Obs> searchForObservations(ReferenceParam encounterReference, ReferenceParam patientReference,\r\n\t        TokenAndListParam code, SortSpec sort) {\r\n\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\r\n\t\t\r\n\t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\r\n\t\thandlePatientReference(criteria, patientReference);\r\n\t\thandleCodedConcept(criteria, code);\r\n\t\thandleSort(criteria, sort);\r\n\t\t\r\n\t\treturn criteria.list();\r\n\t}\r\n```", "bodyText": "@CaptainDaVinci I think we'll have to write something like what's written in FhirObservationDaoImpl @ibacher Please guide\n@Override\n\tpublic Collection<Obs> searchForObservations(ReferenceParam encounterReference, ReferenceParam patientReference,\n\t        TokenAndListParam code, SortSpec sort) {\n\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n\t\t\n\t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n\t\thandlePatientReference(criteria, patientReference);\n\t\thandleCodedConcept(criteria, code);\n\t\thandleSort(criteria, sort);\n\t\t\n\t\treturn criteria.list();\n\t}", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/CaptainDaVinci/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/CaptainDaVinci\">@CaptainDaVinci</a> I think we'll have to write something like what's written in <code>FhirObservationDaoImpl</code> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ibacher/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ibacher\">@ibacher</a> Please guide</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Override\n\tpublic Collection&lt;Obs&gt; searchForObservations(ReferenceParam encounterReference, ReferenceParam patientReference,\n\t        TokenAndListParam code, SortSpec sort) {\n\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n\t\t\n\t\thandleEncounterReference(&quot;e&quot;, encounterReference).ifPresent(c -&gt; criteria.createAlias(&quot;encounter&quot;, &quot;e&quot;).add(c));\n\t\thandlePatientReference(criteria, patientReference);\n\t\thandleCodedConcept(criteria, code);\n\t\thandleSort(criteria, sort);\n\t\t\n\t\treturn criteria.list();\n\t}\"><pre><span class=\"pl-k\">@Override</span>\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">Collection&lt;<span class=\"pl-smi\">Obs</span>&gt;</span> searchForObservations(<span class=\"pl-smi\">ReferenceParam</span> encounterReference, <span class=\"pl-smi\">ReferenceParam</span> patientReference,\n\t        <span class=\"pl-smi\">TokenAndListParam</span> code, <span class=\"pl-smi\">SortSpec</span> sort) {\n\t\t<span class=\"pl-smi\">Criteria</span> criteria <span class=\"pl-k\">=</span> sessionFactory<span class=\"pl-k\">.</span>getCurrentSession()<span class=\"pl-k\">.</span>createCriteria(<span class=\"pl-smi\">Obs</span><span class=\"pl-k\">.</span>class);\n\t\t\n\t\thandleEncounterReference(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>e<span class=\"pl-pds\">\"</span></span>, encounterReference)<span class=\"pl-k\">.</span>ifPresent(c <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> criteria<span class=\"pl-k\">.</span>createAlias(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>encounter<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>e<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>add(c));\n\t\thandlePatientReference(criteria, patientReference);\n\t\thandleCodedConcept(criteria, code);\n\t\thandleSort(criteria, sort);\n\t\t\n\t\t<span class=\"pl-k\">return</span> criteria<span class=\"pl-k\">.</span>list();\n\t}</pre></div>", "author": "VaishSiddharth", "createdAt": "2020-02-22T20:36:24Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirPersonServiceImpl.java", "diffHunk": "@@ -68,4 +72,13 @@ public Person getPersonByUuid(String uuid) {\n \t\treturn fhirPersonDao.findPersonsByGender(gender).stream().map(personTranslator::toFhirResource)\n \t\t        .collect(Collectors.toList());\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Person> searchForPeople(StringOrListParam name, TokenOrListParam identifier, TokenOrListParam gender,\n+\t        DateRangeParam birthDate, StringOrListParam city, StringOrListParam state, StringOrListParam postalCode,\n+\t        SortSpec sort) {\n+\t\t// TODO Auto-generated method stub", "originalCommit": "7a6d78bd65b1d2cfab46379b2754b2a79802936a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3NzQ2NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r383177464", "bodyText": "Yes, I'm working on it. I'm using PatientDaoImpl as a reference.", "author": "CaptainDaVinci", "createdAt": "2020-02-24T10:14:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzOTgxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NDUyNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r383264524", "body": "@CaptainDaVinci I would suggest you to write test for this as I am facing issues while implementing this for `Encounters` Don't know why but my tests are failing", "bodyText": "@CaptainDaVinci I would suggest you to write test for this as I am facing issues while implementing this for Encounters Don't know why but my tests are failing", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/CaptainDaVinci/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/CaptainDaVinci\">@CaptainDaVinci</a> I would suggest you to write test for this as I am facing issues while implementing this for <code>Encounters</code> Don't know why but my tests are failing</p>", "author": "VaishSiddharth", "createdAt": "2020-02-24T13:29:54Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImpl.java", "diffHunk": "@@ -74,4 +87,61 @@ public Person getPersonByUuid(String uuid) {\n \t\t        .createAlias(\"attributeType\", \"pat\").add(eq(\"pat.uuid\", personAttributeTypeUuid)).add(eq(\"voided\", false))\n \t\t        .list();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Person> searchForPeople(StringOrListParam name, TokenOrListParam identifier, TokenOrListParam gender,", "originalCommit": "ba294ba8e29673f591e1f059e4329ee48a48a4ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMwMjU4Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r383302583", "bodyText": "Thanks! I'll update the tests in sometime.", "author": "CaptainDaVinci", "createdAt": "2020-02-24T14:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NDUyNA=="}], "type": "inlineReview"}, {"oid": "85dbc2fd3d8c7ae7f19bb142cb76fdcaca98fe51", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/85dbc2fd3d8c7ae7f19bb142cb76fdcaca98fe51", "message": "Refactor BaseDaoImple.java to contains handleNames and handleIdentifier methods", "committedDate": "2020-02-24T14:37:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxMzM0OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r383313348", "body": "We actually don't want to support \"identifier\" for Person, mainly because we are not currently mapping the `identifier` field for Person.", "bodyText": "We actually don't want to support \"identifier\" for Person, mainly because we are not currently mapping the identifier field for Person.", "bodyHTML": "<p dir=\"auto\">We actually don't want to support \"identifier\" for Person, mainly because we are not currently mapping the <code>identifier</code> field for Person.</p>", "author": "ibacher", "createdAt": "2020-02-24T14:57:34Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirPersonService.java", "diffHunk": "@@ -25,4 +29,9 @@\n \tCollection<Person> findPersonsByGender(String gender);\n \t\n \tCollection<Person> findPersonsByBirthDate(Date birthDate);\n+\t\n+\tCollection<Person> searchForPeople(StringOrListParam name, TokenOrListParam identifier, TokenOrListParam gender,", "originalCommit": "85dbc2fd3d8c7ae7f19bb142cb76fdcaca98fe51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5MzU3OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r383393578", "bodyText": "Will it be a good idea to return a \"Not Implemented\" response (not sure how) to a query on identifier field? In case we plan to map the field in future.", "author": "CaptainDaVinci", "createdAt": "2020-02-24T17:04:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxMzM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5NTY5OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r383395698", "bodyText": "So if we just don\u2019t provide an implementation of it at all (i.e., remove it from this method) the HAPI library will do that for us.", "author": "ibacher", "createdAt": "2020-02-24T17:08:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxMzM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxMzkwOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r383313909", "body": "We should also support `address-country`.", "bodyText": "We should also support address-country.", "bodyHTML": "<p dir=\"auto\">We should also support <code>address-country</code>.</p>", "author": "ibacher", "createdAt": "2020-02-24T14:58:22Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirPersonService.java", "diffHunk": "@@ -25,4 +29,9 @@\n \tCollection<Person> findPersonsByGender(String gender);\n \t\n \tCollection<Person> findPersonsByBirthDate(Date birthDate);\n+\t\n+\tCollection<Person> searchForPeople(StringOrListParam name, TokenOrListParam identifier, TokenOrListParam gender,\n+\t        DateRangeParam birthDate, StringOrListParam city, StringOrListParam state, StringOrListParam postalCode,", "originalCommit": "85dbc2fd3d8c7ae7f19bb142cb76fdcaca98fe51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9d2420dcac91fbdad6af7a1fff1dd6a1a918b8c6", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9d2420dcac91fbdad6af7a1fff1dd6a1a918b8c6", "message": "Added implementation for PersonDao", "committedDate": "2020-02-24T18:05:31Z", "type": "forcePushed"}, {"oid": "6cff3da634553100843df602e34e75d8b52bbf25", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6cff3da634553100843df602e34e75d8b52bbf25", "message": "Add tests to PersonFhirResourceProviderWebTest", "committedDate": "2020-02-25T09:26:43Z", "type": "forcePushed"}, {"oid": "d2d58faa2d38933bda833973cbece6ffd91fab04", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/d2d58faa2d38933bda833973cbece6ffd91fab04", "message": "Add tests to PersonFhirResourceProviderWebTest", "committedDate": "2020-02-25T15:47:29Z", "type": "forcePushed"}, {"oid": "741ad7874a964b743a7b1ccffd3bbbada77fcbd7", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/741ad7874a964b743a7b1ccffd3bbbada77fcbd7", "message": "Add tests to PersonFhirResourceProviderWebTest", "committedDate": "2020-02-25T16:08:30Z", "type": "forcePushed"}, {"oid": "7ad79f2cc3892ad245c35c66d4d9b5a1f1a9f5ee", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7ad79f2cc3892ad245c35c66d4d9b5a1f1a9f5ee", "message": "Add tests to PersonFhirResourceProviderWebTest", "committedDate": "2020-02-25T16:27:32Z", "type": "forcePushed"}, {"oid": "5931580ece81bc1f05f7d32cf1a57f9a00e4b2f0", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5931580ece81bc1f05f7d32cf1a57f9a00e4b2f0", "message": "Add tests for FhirPersonDaoImpl", "committedDate": "2020-02-25T20:57:44Z", "type": "forcePushed"}, {"oid": "e342172717cf2f872bd9bb0ef1924e231bc3ce04", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e342172717cf2f872bd9bb0ef1924e231bc3ce04", "message": "Handle Sort", "committedDate": "2020-02-26T13:14:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0Njg4Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r384546883", "body": "Note to self: create ticket to add country as a search parameter to Patient.", "bodyText": "Note to self: create ticket to add country as a search parameter to Patient.", "bodyHTML": "<p dir=\"auto\">Note to self: create ticket to add country as a search parameter to Patient.</p>", "author": "ibacher", "createdAt": "2020-02-26T14:59:06Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -88,7 +81,7 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\thandleDateRange(\"birthdate\", birthDate).ifPresent(criteria::add);\n \t\thandleDateRange(\"deathdate\", deathDate).ifPresent(criteria::add);\n \t\thandleBoolean(\"dead\", deceased).ifPresent(criteria::add);\n-\t\thandlePersonAddress(\"pad\", city, state, postalCode).ifPresent(c -> {", "originalCommit": "e342172717cf2f872bd9bb0ef1924e231bc3ce04", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0NzY5Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r384547697", "body": "Was this change necessary?", "bodyText": "Was this change necessary?", "bodyHTML": "<p dir=\"auto\">Was this change necessary?</p>", "author": "ibacher", "createdAt": "2020-02-26T15:00:18Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest.java", "diffHunk": "@@ -62,18 +65,24 @@\n \t\n \tprivate static final String NOT_FOUND_NAME = \"not found name\";\n \t\n-\tprivate static final int PERSON_BIRTH_YEAR = 1999;\n-\t\n-\tprivate static final int WRONG_BIRTH_YEAR = 1000;\n-\t\n \tprivate static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd\");\n \t\n \tprivate static final String BIRTH_DATE = \"1999-12-20\";\n \t\n-\tprivate static final String NOT_FOUND_BIRTH_DATE = \"1000-00-00\";\n+\tprivate static final String NOT_FOUND_BIRTH_DATE = \"0001-01-01\";", "originalCommit": "e342172717cf2f872bd9bb0ef1924e231bc3ce04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2Mjk4NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r384562985", "bodyText": "Yes, else the DataRangeParam threw an error on parsing.", "author": "CaptainDaVinci", "createdAt": "2020-02-26T15:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0NzY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0ODIxOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r384548218", "body": "I don't think we need a new-line here", "bodyText": "I don't think we need a new-line here", "bodyHTML": "<p dir=\"auto\">I don't think we need a new-line here</p>", "author": "ibacher", "createdAt": "2020-02-26T15:01:00Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest.java", "diffHunk": "@@ -187,4 +240,5 @@ public void getActiveAttributesByPersonAndAttributeTypeUuid_shouldReturnPersonAt\n \t\t\n \t\tassertThat(attributeList, notNullValue());\n \t}\n+\t", "originalCommit": "e342172717cf2f872bd9bb0ef1924e231bc3ce04", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0ODcxNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r384548716", "body": "Is it possible to add a test/tests here that searches by multiple parameters at the same time?", "bodyText": "Is it possible to add a test/tests here that searches by multiple parameters at the same time?", "bodyHTML": "<p dir=\"auto\">Is it possible to add a test/tests here that searches by multiple parameters at the same time?</p>", "author": "ibacher", "createdAt": "2020-02-26T15:01:44Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest.java", "diffHunk": "@@ -27,9 +27,12 @@\n import java.text.ParseException;", "originalCommit": "e342172717cf2f872bd9bb0ef1924e231bc3ce04", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1MzU0Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r384553543", "body": "I know this isn't in the model I provided, but it would be nice if this included a test or tests for \"complex\" queries such as `/Person?given=Harold&gender=male,other`.", "bodyText": "I know this isn't in the model I provided, but it would be nice if this included a test or tests for \"complex\" queries such as /Person?given=Harold&gender=male,other.", "bodyHTML": "<p dir=\"auto\">I know this isn't in the model I provided, but it would be nice if this included a test or tests for \"complex\" queries such as <code>/Person?given=Harold&amp;gender=male,other</code>.</p>", "author": "ibacher", "createdAt": "2020-02-26T15:09:12Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/PersonFhirResourceProviderWebTest.java", "diffHunk": "@@ -10,15 +10,33 @@\n package org.openmrs.module.fhir2.providers;", "originalCommit": "e342172717cf2f872bd9bb0ef1924e231bc3ce04", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d1a5a4d4e518e590136f3c38539f170bc9dece92", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/d1a5a4d4e518e590136f3c38539f170bc9dece92", "message": "Add support for sorting", "committedDate": "2020-02-26T20:59:07Z", "type": "forcePushed"}, {"oid": "456ff557a131cc59836bf615e6c50cda26eb8156", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/456ff557a131cc59836bf615e6c50cda26eb8156", "message": "Merge master", "committedDate": "2020-02-26T21:13:29Z", "type": "forcePushed"}, {"oid": "6af11928c6a21d38e15beab6fadeb461bdf8ada7", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6af11928c6a21d38e15beab6fadeb461bdf8ada7", "message": "FM2-81: Improving Search for Person Resource", "committedDate": "2020-02-27T10:06:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NTM0NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r385275344", "body": "Again... this is creating the alias regardless of what is being queried, which is not what we want to do. I might change your `paramToProp()` to something like this:\r\n\r\n```java\r\nprotected String paramToProp(String param) {\r\n\t\tString prop = null;\r\n\r\n\t\tswitch (param) {\r\n\t\t\tcase \"name\":\r\n\t\t\t\tif (!containsAlias(criteria, \"pn\")) {\r\n\t\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn \"pn.givenName\";\r\n\t\t\tcase \"birthDate\":\r\n\t\t\t\treturn \"birthdate\";\r\n\t\t\tcase \"city\":\r\n\t\t\t\tprop = \"pad.cityVillage\";\r\n\t\t\tcase \"state\":\r\n\t\t\t\tprop = \"pad.stateProvince\";\r\n\t\t\tcase \"postalCode\":\r\n\t\t\t\tprop = \"pad.postalCode\";\r\n\t\t\tcase \"country\":\r\n\t\t\t\tprop = \"pad.country\";\r\n                \r\n                if (!containsAlias(criteria, \"pad\")) {\r\n\t\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn prop;\r\n\t\t\tdefault:\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n```", "bodyText": "Again... this is creating the alias regardless of what is being queried, which is not what we want to do. I might change your paramToProp() to something like this:\nprotected String paramToProp(String param) {\n\t\tString prop = null;\n\n\t\tswitch (param) {\n\t\t\tcase \"name\":\n\t\t\t\tif (!containsAlias(criteria, \"pn\")) {\n\t\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n\t\t\t\t}\n\n\t\t\t\treturn \"pn.givenName\";\n\t\t\tcase \"birthDate\":\n\t\t\t\treturn \"birthdate\";\n\t\t\tcase \"city\":\n\t\t\t\tprop = \"pad.cityVillage\";\n\t\t\tcase \"state\":\n\t\t\t\tprop = \"pad.stateProvince\";\n\t\t\tcase \"postalCode\":\n\t\t\t\tprop = \"pad.postalCode\";\n\t\t\tcase \"country\":\n\t\t\t\tprop = \"pad.country\";\n                \n                if (!containsAlias(criteria, \"pad\")) {\n\t\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn prop;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}", "bodyHTML": "<p dir=\"auto\">Again... this is creating the alias regardless of what is being queried, which is not what we want to do. I might change your <code>paramToProp()</code> to something like this:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"protected String paramToProp(String param) {\n\t\tString prop = null;\n\n\t\tswitch (param) {\n\t\t\tcase &quot;name&quot;:\n\t\t\t\tif (!containsAlias(criteria, &quot;pn&quot;)) {\n\t\t\t\t\tcriteria.createAlias(&quot;names&quot;, &quot;pn&quot;);\n\t\t\t\t}\n\n\t\t\t\treturn &quot;pn.givenName&quot;;\n\t\t\tcase &quot;birthDate&quot;:\n\t\t\t\treturn &quot;birthdate&quot;;\n\t\t\tcase &quot;city&quot;:\n\t\t\t\tprop = &quot;pad.cityVillage&quot;;\n\t\t\tcase &quot;state&quot;:\n\t\t\t\tprop = &quot;pad.stateProvince&quot;;\n\t\t\tcase &quot;postalCode&quot;:\n\t\t\t\tprop = &quot;pad.postalCode&quot;;\n\t\t\tcase &quot;country&quot;:\n\t\t\t\tprop = &quot;pad.country&quot;;\n                \n                if (!containsAlias(criteria, &quot;pad&quot;)) {\n\t\t\t\t\tcriteria.createAlias(&quot;addresses&quot;, &quot;pad&quot;);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn prop;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\"><pre><span class=\"pl-k\">protected</span> <span class=\"pl-smi\">String</span> paramToProp(<span class=\"pl-smi\">String</span> param) {\n\t\t<span class=\"pl-smi\">String</span> prop <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;\n\n\t\t<span class=\"pl-k\">switch</span> (param) {\n\t\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>\n\t\t\t\t<span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>containsAlias(criteria, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pn<span class=\"pl-pds\">\"</span></span>)) {\n\t\t\t\t\tcriteria<span class=\"pl-k\">.</span>createAlias(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>names<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pn<span class=\"pl-pds\">\"</span></span>);\n\t\t\t\t}\n\n\t\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pn.givenName<span class=\"pl-pds\">\"</span></span>;\n\t\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>birthDate<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>\n\t\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>birthdate<span class=\"pl-pds\">\"</span></span>;\n\t\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>city<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>\n\t\t\t\tprop <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pad.cityVillage<span class=\"pl-pds\">\"</span></span>;\n\t\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>state<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>\n\t\t\t\tprop <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pad.stateProvince<span class=\"pl-pds\">\"</span></span>;\n\t\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>postalCode<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>\n\t\t\t\tprop <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pad.postalCode<span class=\"pl-pds\">\"</span></span>;\n\t\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>country<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>\n\t\t\t\tprop <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pad.country<span class=\"pl-pds\">\"</span></span>;\n                \n                <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>containsAlias(criteria, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pad<span class=\"pl-pds\">\"</span></span>)) {\n\t\t\t\t\tcriteria<span class=\"pl-k\">.</span>createAlias(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>addresses<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pad<span class=\"pl-pds\">\"</span></span>);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t<span class=\"pl-k\">return</span> prop;\n\t\t\t<span class=\"pl-k\">default</span><span class=\"pl-k\">:</span>\n\t\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;\n\t\t}\n\t}</pre></div>", "author": "ibacher", "createdAt": "2020-02-27T17:57:10Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImpl.java", "diffHunk": "@@ -45,33 +49,56 @@ public Person getPersonByUuid(String uuid) {\n \t}\n \t\n \t@Override\n-\tpublic Collection<Person> findPersonsByName(String name) {\n-\t\treturn personService.getPeople(name, false);\n-\t}\n-\t\n-\t@Override\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic Collection<Person> findPersonsByBirthDate(Date birthDate) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Person.class).add(eq(\"birthdate\", birthDate)).list();\n+\tpublic List<PersonAttribute> getActiveAttributesByPersonAndAttributeTypeUuid(Person person,\n+\t        String personAttributeTypeUuid) {\n+\t\treturn (List<PersonAttribute>) sessionFactory.getCurrentSession().createCriteria(PersonAttribute.class)\n+\t\t        .createAlias(\"person\", \"p\", JoinType.INNER_JOIN, eq(\"p.id\", person.getId()))\n+\t\t        .createAlias(\"attributeType\", \"pat\").add(eq(\"pat.uuid\", personAttributeTypeUuid)).add(eq(\"voided\", false))\n+\t\t        .list();\n \t}\n \t\n \t@Override\n-\tpublic Collection<Person> findSimilarPeople(String name, Integer birthYear, String gender) {\n-\t\treturn personService.getSimilarPeople(name, birthYear, gender);\n+\tpublic Collection<Person> searchForPeople(StringOrListParam name, TokenOrListParam gender, DateRangeParam birthDate,\n+\t        StringOrListParam city, StringOrListParam state, StringOrListParam postalCode, StringOrListParam country,\n+\t        SortSpec sort) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Person.class);\n+\t\t\n+\t\thandleNames(criteria, name, null, null);\n+\t\thandleGender(\"gender\", gender).ifPresent(criteria::add);\n+\t\thandleDateRange(\"birthdate\", birthDate).ifPresent(criteria::add);\n+\t\thandlePersonAddress(\"pad\", city, state, postalCode, country).ifPresent(c -> {\n+\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\tcriteria.add(c);\n+\t\t});\n+\t\tif (!containsAlias(criteria, \"pn\")) {", "originalCommit": "6af11928c6a21d38e15beab6fadeb461bdf8ada7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4NDA0NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r385284045", "bodyText": "Yes, I'm working on this right now.", "author": "CaptainDaVinci", "createdAt": "2020-02-27T18:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NTM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNDUwMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r385334503", "body": "I still don't like this solution. For example, if I were to sort by \"birthdate\", I'd still get joins against `PersonName` and `PersonAddress`.", "bodyText": "I still don't like this solution. For example, if I were to sort by \"birthdate\", I'd still get joins against PersonName and PersonAddress.", "bodyHTML": "<p dir=\"auto\">I still don't like this solution. For example, if I were to sort by \"birthdate\", I'd still get joins against <code>PersonName</code> and <code>PersonAddress</code>.</p>", "author": "ibacher", "createdAt": "2020-02-27T19:48:48Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImpl.java", "diffHunk": "@@ -70,11 +70,13 @@ public Person getPersonByUuid(String uuid) {\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n-\t\tif (!containsAlias(criteria, \"pn\")) {\n-\t\t\tcriteria.createAlias(\"names\", \"pn\");\n-\t\t}\n-\t\tif (!containsAlias(criteria, \"pad\")) {\n-\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\tif (sort != null) {", "originalCommit": "6bbf03652278d6a9fb94887dbb1639894d405305", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNzg4MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r385337881", "bodyText": "But the sort.getParamName().equals(...) condition will return false then, right?", "author": "CaptainDaVinci", "createdAt": "2020-02-27T19:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzOTAzMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r385339033", "bodyText": "Whoops! I missed that! Sorry, too much time staring at git diffs.", "author": "ibacher", "createdAt": "2020-02-27T19:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0MDI0OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r385340249", "bodyText": "It's alright, happens to me all the time! \ud83d\ude04", "author": "CaptainDaVinci", "createdAt": "2020-02-27T20:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNDUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNTEyMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/85#discussion_r385335123", "body": "This should be \"birthdate\" to match the name of the search parameter.", "bodyText": "This should be \"birthdate\" to match the name of the search parameter.", "bodyHTML": "<p dir=\"auto\">This should be \"birthdate\" to match the name of the search parameter.</p>", "author": "ibacher", "createdAt": "2020-02-27T19:50:07Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImpl.java", "diffHunk": "@@ -88,13 +90,13 @@ protected String paramToProp(String param) {\n \t\t\t\treturn \"pn.givenName\";\n \t\t\tcase \"birthDate\":", "originalCommit": "6bbf03652278d6a9fb94887dbb1639894d405305", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2b156f29aad45efd0b3d35955c04498f6a2d9f6b", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2b156f29aad45efd0b3d35955c04498f6a2d9f6b", "message": "FM2-81: Improving Search for Person Resource", "committedDate": "2020-02-27T20:06:47Z", "type": "commit"}, {"oid": "2b156f29aad45efd0b3d35955c04498f6a2d9f6b", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2b156f29aad45efd0b3d35955c04498f6a2d9f6b", "message": "FM2-81: Improving Search for Person Resource", "committedDate": "2020-02-27T20:06:47Z", "type": "forcePushed"}]}