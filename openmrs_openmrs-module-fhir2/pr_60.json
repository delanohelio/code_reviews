{"pr_number": 60, "pr_title": "Added mappings for Observation.interpretation and Observation.status for 2.1.0 and newer", "pr_author": "jecihjoy", "pr_createdAt": "2020-02-10T17:13:23Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMjA2MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r377902060", "body": "I don't *think* we actually need a custom version of the `ObservationTranslator` here, since the default version still calls the `ObservationStatusTranslator`. We just need to ensure that is properly overridden.", "bodyText": "I don't think we actually need a custom version of the ObservationTranslator here, since the default version still calls the ObservationStatusTranslator. We just need to ensure that is properly overridden.", "bodyHTML": "<p dir=\"auto\">I don't <em>think</em> we actually need a custom version of the <code>ObservationTranslator</code> here, since the default version still calls the <code>ObservationStatusTranslator</code>. We just need to ensure that is properly overridden.</p>", "author": "ibacher", "createdAt": "2020-02-11T21:14:28Z", "path": "api-2.1/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl_2_1.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;", "originalCommit": "d690a49310490fd4fecbbab8209ceec64814c966", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0NjQwOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378046409", "bodyText": "hey Ian, this might work with status but what about translating the interpretations and it's not part of the origin implementation with platform 2.0.5", "author": "jecihjoy", "createdAt": "2020-02-12T05:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMjA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzOTgzMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378239832", "bodyText": "I think the solution there is to add an translator for interpretations similar to the dummy translator for observation status we have. That way, it's easy for implementors to support interpretations if they're currently capturing that information.", "author": "ibacher", "createdAt": "2020-02-12T13:11:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMjA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3NjU5NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378276594", "bodyText": "That makes sense, I'll look into it", "author": "jecihjoy", "createdAt": "2020-02-12T14:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMjA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMjU0OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r377902549", "body": "I also don't think we need to implement this class for this change.", "bodyText": "I also don't think we need to implement this class for this change.", "bodyHTML": "<p dir=\"auto\">I also don't think we need to implement this class for this change.</p>", "author": "ibacher", "createdAt": "2020-02-11T21:15:31Z", "path": "api-2.1/src/main/java/org/openmrs/module/fhir2/api/impl/FhirObservationServiceImpl_2_1.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**", "originalCommit": "d690a49310490fd4fecbbab8209ceec64814c966", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMzU4OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r377903588", "body": "We don't need to do this. This implementation can simply be\r\n\r\n```java\r\nobservation.setStatus(Obs.Status.valueOf(observationStatus.toString()));\r\nreturn observation;\r\n```", "bodyText": "We don't need to do this. This implementation can simply be\nobservation.setStatus(Obs.Status.valueOf(observationStatus.toString()));\nreturn observation;", "bodyHTML": "<p dir=\"auto\">We don't need to do this. This implementation can simply be</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"observation.setStatus(Obs.Status.valueOf(observationStatus.toString()));\nreturn observation;\"><pre>observation<span class=\"pl-k\">.</span>setStatus(<span class=\"pl-smi\">Obs</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">Status</span><span class=\"pl-k\">.</span>valueOf(observationStatus<span class=\"pl-k\">.</span>toString()));\n<span class=\"pl-k\">return</span> observation;</pre></div>", "author": "ibacher", "createdAt": "2020-02-11T21:17:42Z", "path": "api-2.1/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationStatusTranslatorImpl_2_1.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.openmrs.Obs;\n+import org.openmrs.annotation.OpenmrsProfile;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.stereotype.Component;\n+\n+@Primary\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+@OpenmrsProfile(openmrsPlatformVersion = \"2.1.* - 2.3.*\")\n+public class ObservationStatusTranslatorImpl_2_1 extends ObservationStatusTranslatorImpl {\n+\n+    @Override\n+    public Observation.ObservationStatus toFhirResource(Obs obs) {\n+        return Observation.ObservationStatus.valueOf(obs.getStatus().toString());\n+    }\n+\n+    @Override\n+    public Obs toOpenmrsType(Obs observation, Observation.ObservationStatus observationStatus) {\n+        Obs obs = super.toOpenmrsType(observation, observationStatus);", "originalCommit": "d690a49310490fd4fecbbab8209ceec64814c966", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d390598daa8b27b794c79c6b93d639a37d2bba7", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6d390598daa8b27b794c79c6b93d639a37d2bba7", "message": "Add a mapping for Observation.interpretation and Observation.status for 2.1.0 and newer", "committedDate": "2020-02-12T06:13:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4NDE2OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378184168", "body": "Can you add license header to this file", "bodyText": "Can you add license header to this file", "bodyHTML": "<p dir=\"auto\">Can you add license header to this file</p>", "author": "corneliouzbett", "createdAt": "2020-02-12T11:08:19Z", "path": "api-2.1/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationStatusTranslatorImpl_2_1Test.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import org.hl7.fhir.r4.model.Observation;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.Obs;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+public class ObservationStatusTranslatorImpl_2_1Test {\n+", "originalCommit": "6d390598daa8b27b794c79c6b93d639a37d2bba7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4NDc4MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378184781", "body": "Can you add license header to this class", "bodyText": "Can you add license header to this class", "bodyHTML": "<p dir=\"auto\">Can you add license header to this class</p>", "author": "corneliouzbett", "createdAt": "2020-02-12T11:09:35Z", "path": "api-2.1/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationInterpretationTranslatorImpl_2_1Test.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.openmrs.Obs;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ObservationInterpretationTranslatorImpl_2_1Test {", "originalCommit": "6d390598daa8b27b794c79c6b93d639a37d2bba7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4ODM4MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378188381", "body": "Add license header to this class", "bodyText": "Add license header to this class", "bodyHTML": "<p dir=\"auto\">Add license header to this class</p>", "author": "corneliouzbett", "createdAt": "2020-02-12T11:17:11Z", "path": "api-2.1/src/main/java/org/openmrs/module/fhir2/api/translators/ObservationInterpretationTranslator.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.openmrs.module.fhir2.api.translators;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.openmrs.Obs;\n+\n+public interface ObservationInterpretationTranslator extends ToFhirTranslator<Obs, CodeableConcept>, UpdatableOpenmrsTranslator<Obs, CodeableConcept> {", "originalCommit": "6d390598daa8b27b794c79c6b93d639a37d2bba7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5MDIzMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378190231", "body": "Remove this line (Not used)", "bodyText": "Remove this line (Not used)", "bodyHTML": "<p dir=\"auto\">Remove this line (Not used)</p>", "author": "corneliouzbett", "createdAt": "2020-02-12T11:21:13Z", "path": "api-2.1/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationInterpretationTranslatorImpl_2_1.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.openmrs.Obs;\n+import org.openmrs.annotation.OpenmrsProfile;\n+import org.openmrs.module.fhir2.api.translators.ObservationInterpretationTranslator;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.stereotype.Component;\n+\n+@Primary\n+@Component\n+@Setter(AccessLevel.PACKAGE)", "originalCommit": "6d390598daa8b27b794c79c6b93d639a37d2bba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwOTEyMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378209123", "bodyText": "Remove this line (Not used)\n\nreferring to @Setter(AccessLevel.PACKAGE)", "author": "corneliouzbett", "createdAt": "2020-02-12T12:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5MDIzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5NjE4Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378196182", "body": "Remove this line (Not used at this point)", "bodyText": "Remove this line (Not used at this point)", "bodyHTML": "<p dir=\"auto\">Remove this line (Not used at this point)</p>", "author": "corneliouzbett", "createdAt": "2020-02-12T11:33:47Z", "path": "api-2.1/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationStatusTranslatorImpl_2_1.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.openmrs.Obs;\n+import org.openmrs.annotation.OpenmrsProfile;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.stereotype.Component;\n+\n+@Primary\n+@Component\n+@Setter(AccessLevel.PACKAGE)", "originalCommit": "6d390598daa8b27b794c79c6b93d639a37d2bba7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwMzg2Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378203867", "body": "I prefer **`existingObs`** instead of **`existingObject`**", "bodyText": "I prefer existingObs instead of existingObject", "bodyHTML": "<p dir=\"auto\">I prefer <strong><code>existingObs</code></strong> instead of <strong><code>existingObject</code></strong></p>", "author": "corneliouzbett", "createdAt": "2020-02-12T11:50:41Z", "path": "api-2.1/src/main/java/org/openmrs/module/fhir2/api/translators/ObservationInterpretationTranslator.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.openmrs.module.fhir2.api.translators;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.openmrs.Obs;\n+\n+public interface ObservationInterpretationTranslator extends ToFhirTranslator<Obs, CodeableConcept>, UpdatableOpenmrsTranslator<Obs, CodeableConcept> {\n+\n+    /**\n+     * Maps an {@link Obs} to an {@link org.hl7.fhir.r4.model.CodeableConcept}\n+     * @param obs the OpenMRS obs element to translate\n+     * @return\n+     */\n+    @Override\n+    CodeableConcept toFhirResource(Obs obs);\n+\n+    /**\n+     * Maps an {@link org.hl7.fhir.r4.model.CodeableConcept} to an {@link Obs}\n+     * @param existingObject the existingObject to update\n+     * @param resource the resource to map\n+     * @return\n+     */\n+    @Override\n+    Obs toOpenmrsType(Obs existingObject, CodeableConcept resource);", "originalCommit": "6d390598daa8b27b794c79c6b93d639a37d2bba7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4a25e0d8b74fad06acb3ea491ad8dd9e2aaff1a7", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4a25e0d8b74fad06acb3ea491ad8dd9e2aaff1a7", "message": "Added mappings for Observation.interpretation and Observation.status for 2.1.0 and newer", "committedDate": "2020-02-12T12:33:02Z", "type": "forcePushed"}, {"oid": "56ab44233f84922c7b4a2fc34480a5af8da87dbf", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/56ab44233f84922c7b4a2fc34480a5af8da87dbf", "message": "Added mappings for Observation.interpretation and Observation.status for 2.1.0 and newer", "committedDate": "2020-02-12T13:51:52Z", "type": "forcePushed"}, {"oid": "859c4e526d5081fde149e49aad1883a10a50b4e5", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/859c4e526d5081fde149e49aad1883a10a50b4e5", "message": "FM2-53 : Added mappings for Observation.interpretation and Observation.status for 2.1.0 and newer", "committedDate": "2020-02-12T13:57:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI5MTQyOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378291428", "body": "So what we actually want to do here is to map not to text but to the coding using the code set defined [here](https://www.hl7.org/fhir/valueset-observation-interpretation.html). So, for example, `Obs.Interpretation.NORMAL` should map to a structure that looks like this:\r\n\r\n```json\r\n\"interpretation\": {\r\n\t\"coding\": [\r\n\t\t{\r\n\t\t\t\"system\": \"http://hl7.org/fhir/ValueSet/observation-interpretation\",\r\n\t\t\t\"code\": \"N\",\r\n\t\t\t\"display\": \"Normal\r\n\t\t}\r\n\t],\r\n\t\"text\": \"Normal\"\r\n}\r\n```\r\n\r\nCode-wise this looks something like (with the constants appropriately extracted out):\r\n\r\n```java\r\nswitch(obs.getInterpretation()) {\r\n    case NORMAL:\r\n\t\tinterpretation.addCoding().setSystem(\"http://hl7.org/fhir/ValueSet/observation-interpretation\").setCode(\"N\").setDisplay(\"Normal\");\r\n\t\tinterpretation.setText(\"Normal\");\r\n\t...\r\n}\r\n```\r\n\r\nThe mappings should be something like:\r\n\r\n|OpenMRS Type|FHIR Interpretation|\r\n|-------|------|\r\n|`NORMAL`|`N`|\r\n|`ABNORMAL`|`A`|\r\n|`CRITICALLY_ABNORMAL`|`AA`|\r\n|`CRITICALLY_HIGH`|`HH`|\r\n|`CRITICALLY_LOW`|`LL`|\r\n|`HIGH`|`H`|\r\n|`LOW`|`L`|\r\n|`OFF_SCALE_LOW`|`<`|\r\n|`OFF_SCALE_HI`|`>`|\r\n|`SIGNIFICANT_CHANGE_DOWN`|`D`|\r\n|`SIGNIFICANT_CHANGE_UP`|`U`|\r\n|`RESISTANT`|`R`|\r\n|`SUSCEPTIBLE`|`S`|\r\n|`INTERMEDIATE`|`I`|\r\n|`POSITIVE`|`POS`|\r\n|`NEGATIVE`|`NEG`|\r\n\r\nThe display values should be those in the valueset I linked above.\r\n\r\nSome special handling is needed for the `VERY_SUSCEPTIBLE` interpretation, since this isn't supported by the valueset. For this case, it might make sense to add the coding for susceptible and then create an additional code with the system `https://fhir.openmrs.org/ext/obs/interpretations`, the code `VS`, and the display \"Very Susceptible\", which should also be the reported text.", "bodyText": "So what we actually want to do here is to map not to text but to the coding using the code set defined here. So, for example, Obs.Interpretation.NORMAL should map to a structure that looks like this:\n\"interpretation\": {\n\t\"coding\": [\n\t\t{\n\t\t\t\"system\": \"http://hl7.org/fhir/ValueSet/observation-interpretation\",\n\t\t\t\"code\": \"N\",\n\t\t\t\"display\": \"Normal\n\t\t}\n\t],\n\t\"text\": \"Normal\"\n}\nCode-wise this looks something like (with the constants appropriately extracted out):\nswitch(obs.getInterpretation()) {\n    case NORMAL:\n\t\tinterpretation.addCoding().setSystem(\"http://hl7.org/fhir/ValueSet/observation-interpretation\").setCode(\"N\").setDisplay(\"Normal\");\n\t\tinterpretation.setText(\"Normal\");\n\t...\n}\nThe mappings should be something like:\n\n\n\nOpenMRS Type\nFHIR Interpretation\n\n\n\n\nNORMAL\nN\n\n\nABNORMAL\nA\n\n\nCRITICALLY_ABNORMAL\nAA\n\n\nCRITICALLY_HIGH\nHH\n\n\nCRITICALLY_LOW\nLL\n\n\nHIGH\nH\n\n\nLOW\nL\n\n\nOFF_SCALE_LOW\n<\n\n\nOFF_SCALE_HI\n>\n\n\nSIGNIFICANT_CHANGE_DOWN\nD\n\n\nSIGNIFICANT_CHANGE_UP\nU\n\n\nRESISTANT\nR\n\n\nSUSCEPTIBLE\nS\n\n\nINTERMEDIATE\nI\n\n\nPOSITIVE\nPOS\n\n\nNEGATIVE\nNEG\n\n\n\nThe display values should be those in the valueset I linked above.\nSome special handling is needed for the VERY_SUSCEPTIBLE interpretation, since this isn't supported by the valueset. For this case, it might make sense to add the coding for susceptible and then create an additional code with the system https://fhir.openmrs.org/ext/obs/interpretations, the code VS, and the display \"Very Susceptible\", which should also be the reported text.", "bodyHTML": "<p dir=\"auto\">So what we actually want to do here is to map not to text but to the coding using the code set defined <a href=\"https://www.hl7.org/fhir/valueset-observation-interpretation.html\" rel=\"nofollow\">here</a>. So, for example, <code>Obs.Interpretation.NORMAL</code> should map to a structure that looks like this:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&quot;interpretation&quot;: {\n\t&quot;coding&quot;: [\n\t\t{\n\t\t\t&quot;system&quot;: &quot;http://hl7.org/fhir/ValueSet/observation-interpretation&quot;,\n\t\t\t&quot;code&quot;: &quot;N&quot;,\n\t\t\t&quot;display&quot;: &quot;Normal\n\t\t}\n\t],\n\t&quot;text&quot;: &quot;Normal&quot;\n}\"><pre><span class=\"pl-ent\">\"interpretation\"</span>: {\n\t<span class=\"pl-ent\">\"coding\"</span>: [\n\t\t{\n\t\t\t<span class=\"pl-ent\">\"system\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://hl7.org/fhir/ValueSet/observation-interpretation<span class=\"pl-pds\">\"</span></span>,\n\t\t\t<span class=\"pl-ent\">\"code\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>N<span class=\"pl-pds\">\"</span></span>,\n\t\t\t<span class=\"pl-ent\">\"display\"</span>: <span class=\"pl-ii\">\"Normal</span>\n\t\t}\n\t],\n\t<span class=\"pl-ent\">\"text\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Normal<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<p dir=\"auto\">Code-wise this looks something like (with the constants appropriately extracted out):</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"switch(obs.getInterpretation()) {\n    case NORMAL:\n\t\tinterpretation.addCoding().setSystem(&quot;http://hl7.org/fhir/ValueSet/observation-interpretation&quot;).setCode(&quot;N&quot;).setDisplay(&quot;Normal&quot;);\n\t\tinterpretation.setText(&quot;Normal&quot;);\n\t...\n}\"><pre><span class=\"pl-k\">switch</span>(obs<span class=\"pl-k\">.</span>getInterpretation()) {\n    <span class=\"pl-k\">case</span> <span class=\"pl-c1\">NORMAL</span><span class=\"pl-k\">:</span>\n\t\tinterpretation<span class=\"pl-k\">.</span>addCoding()<span class=\"pl-k\">.</span>setSystem(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://hl7.org/fhir/ValueSet/observation-interpretation<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>setCode(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>N<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>setDisplay(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Normal<span class=\"pl-pds\">\"</span></span>);\n\t\tinterpretation<span class=\"pl-k\">.</span>setText(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Normal<span class=\"pl-pds\">\"</span></span>);\n\t<span class=\"pl-c1\">...</span>\n}</pre></div>\n<p dir=\"auto\">The mappings should be something like:</p>\n<table role=\"table\">\n<thead>\n<tr>\n<th>OpenMRS Type</th>\n<th>FHIR Interpretation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>NORMAL</code></td>\n<td><code>N</code></td>\n</tr>\n<tr>\n<td><code>ABNORMAL</code></td>\n<td><code>A</code></td>\n</tr>\n<tr>\n<td><code>CRITICALLY_ABNORMAL</code></td>\n<td><code>AA</code></td>\n</tr>\n<tr>\n<td><code>CRITICALLY_HIGH</code></td>\n<td><code>HH</code></td>\n</tr>\n<tr>\n<td><code>CRITICALLY_LOW</code></td>\n<td><code>LL</code></td>\n</tr>\n<tr>\n<td><code>HIGH</code></td>\n<td><code>H</code></td>\n</tr>\n<tr>\n<td><code>LOW</code></td>\n<td><code>L</code></td>\n</tr>\n<tr>\n<td><code>OFF_SCALE_LOW</code></td>\n<td><code>&lt;</code></td>\n</tr>\n<tr>\n<td><code>OFF_SCALE_HI</code></td>\n<td><code>&gt;</code></td>\n</tr>\n<tr>\n<td><code>SIGNIFICANT_CHANGE_DOWN</code></td>\n<td><code>D</code></td>\n</tr>\n<tr>\n<td><code>SIGNIFICANT_CHANGE_UP</code></td>\n<td><code>U</code></td>\n</tr>\n<tr>\n<td><code>RESISTANT</code></td>\n<td><code>R</code></td>\n</tr>\n<tr>\n<td><code>SUSCEPTIBLE</code></td>\n<td><code>S</code></td>\n</tr>\n<tr>\n<td><code>INTERMEDIATE</code></td>\n<td><code>I</code></td>\n</tr>\n<tr>\n<td><code>POSITIVE</code></td>\n<td><code>POS</code></td>\n</tr>\n<tr>\n<td><code>NEGATIVE</code></td>\n<td><code>NEG</code></td>\n</tr>\n</tbody>\n</table>\n<p dir=\"auto\">The display values should be those in the valueset I linked above.</p>\n<p dir=\"auto\">Some special handling is needed for the <code>VERY_SUSCEPTIBLE</code> interpretation, since this isn't supported by the valueset. For this case, it might make sense to add the coding for susceptible and then create an additional code with the system <code>https://fhir.openmrs.org/ext/obs/interpretations</code>, the code <code>VS</code>, and the display \"Very Susceptible\", which should also be the reported text.</p>", "author": "ibacher", "createdAt": "2020-02-12T14:39:28Z", "path": "api-2.1/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationInterpretationTranslatorImpl_2_1.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.openmrs.Obs;\n+import org.openmrs.annotation.OpenmrsProfile;\n+import org.openmrs.module.fhir2.api.translators.ObservationInterpretationTranslator;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.stereotype.Component;\n+\n+@Primary\n+@Component\n+@OpenmrsProfile(openmrsPlatformVersion = \"2.1.* - 2.3.*\")\n+public class ObservationInterpretationTranslatorImpl_2_1 implements ObservationInterpretationTranslator {\n+\t\n+\t@Override\n+\tpublic CodeableConcept toFhirResource(Obs obs) {\n+\t\tCodeableConcept interpretation = new CodeableConcept();\n+\t\tif (obs.getInterpretation() != null) {\n+\t\t\tinterpretation.setText(obs.getInterpretation().toString());", "originalCommit": "859c4e526d5081fde149e49aad1883a10a50b4e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0MTQxOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378341418", "bodyText": "This is noted, working on it..", "author": "jecihjoy", "createdAt": "2020-02-12T15:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI5MTQyOA=="}], "type": "inlineReview"}, {"oid": "ac2303f762707676c0f698207d9d347bf0ea98f4", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ac2303f762707676c0f698207d9d347bf0ea98f4", "message": "FM2-53 : Added mappings for Observation.interpretation and Observation.status for 2.1.0 and newer", "committedDate": "2020-02-13T12:47:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4NzA5OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378887098", "body": "Use `addCoding()` instead of `setCoding()`. The former allows us to have multiple codings where it makes sense.", "bodyText": "Use addCoding() instead of setCoding(). The former allows us to have multiple codings where it makes sense.", "bodyHTML": "<p dir=\"auto\">Use <code>addCoding()</code> instead of <code>setCoding()</code>. The former allows us to have multiple codings where it makes sense.</p>", "author": "ibacher", "createdAt": "2020-02-13T14:17:55Z", "path": "api-2.1/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationInterpretationTranslatorImpl_2_1.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.Collections;\n+\n+import org.apache.commons.lang.WordUtils;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Obs;\n+import org.openmrs.annotation.OpenmrsProfile;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.stereotype.Component;\n+\n+@Primary\n+@Component\n+@OpenmrsProfile(openmrsPlatformVersion = \"2.1.* - 2.3.*\")\n+public class ObservationInterpretationTranslatorImpl_2_1 extends ObservationInterpretationTranslatorImpl {\n+\t\n+\t@Override\n+\tpublic CodeableConcept toFhirResource(Obs obs) {\n+\t\tif (obs.getInterpretation() == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tCodeableConcept interpretation = new CodeableConcept();\n+\t\tswitch (obs.getInterpretation()) {\n+\t\t\tcase NORMAL:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"N\", obs.getInterpretation())));", "originalCommit": "ac2303f762707676c0f698207d9d347bf0ea98f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5MjY2OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378992668", "bodyText": "@ibacher  do we need to use addCoding() yet OpenMrs only supports a single interpretation to an Observation?", "author": "jecihjoy", "createdAt": "2020-02-13T17:00:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4NzA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5ODgyNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378998827", "bodyText": "Also while doing the translations back to openmrs type, I suppose this would be the code\nswitch (interpretation.getCoding().get(0).getCode()){\ncase \"N\":\nopenmrsObs.setInterpretation(Obs.Interpretation.NEGATIVE);\nbreak;\nwell it will not make sense to check the value at 0 if we're expecting more than one interpretation..", "author": "jecihjoy", "createdAt": "2020-02-13T17:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4NzA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NTQyNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r379055425", "bodyText": "@ibacher do we need to use addCoding() yet OpenMrs only supports a single interpretation to an Observation?\n\nSo, addCoding() is basically a simpler way of achieving the same result without having to construct a list here.", "author": "ibacher", "createdAt": "2020-02-13T18:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4NzA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NTc1Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r379055756", "bodyText": "Also while doing the translations back to openmrs type, I suppose this would be the code\nswitch (interpretation.getCoding().get(0).getCode()){ case \"N\": openmrsObs.setInterpretation(Obs.Interpretation.NEGATIVE); break;\nwell it will not make sense to check the value at 0 if we're expecting more than one interpretation..\n\nI'm not anticipating more than one interpretation here, so yes, just mapping from \"N\" to NEGATIVE is the right way to go.", "author": "ibacher", "createdAt": "2020-02-13T18:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4NzA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1ODg1MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r379058851", "bodyText": "i understand your perspective now", "author": "jecihjoy", "createdAt": "2020-02-13T19:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4NzA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4OTg3MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378889870", "body": "This actually needs to invert the `toFhirResource()` method. So here we expect a coding of, e.g., \"NEG\" and want to translate that into `Obs.Interpretation.NEGATIVE`", "bodyText": "This actually needs to invert the toFhirResource() method. So here we expect a coding of, e.g., \"NEG\" and want to translate that into Obs.Interpretation.NEGATIVE", "bodyHTML": "<p dir=\"auto\">This actually needs to invert the <code>toFhirResource()</code> method. So here we expect a coding of, e.g., \"NEG\" and want to translate that into <code>Obs.Interpretation.NEGATIVE</code></p>", "author": "ibacher", "createdAt": "2020-02-13T14:22:27Z", "path": "api-2.1/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationInterpretationTranslatorImpl_2_1.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.Collections;\n+\n+import org.apache.commons.lang.WordUtils;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Obs;\n+import org.openmrs.annotation.OpenmrsProfile;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.stereotype.Component;\n+\n+@Primary\n+@Component\n+@OpenmrsProfile(openmrsPlatformVersion = \"2.1.* - 2.3.*\")\n+public class ObservationInterpretationTranslatorImpl_2_1 extends ObservationInterpretationTranslatorImpl {\n+\t\n+\t@Override\n+\tpublic CodeableConcept toFhirResource(Obs obs) {\n+\t\tif (obs.getInterpretation() == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tCodeableConcept interpretation = new CodeableConcept();\n+\t\tswitch (obs.getInterpretation()) {\n+\t\t\tcase NORMAL:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"N\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase ABNORMAL:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"A\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase CRITICALLY_ABNORMAL:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"AA\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase CRITICALLY_HIGH:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"HH\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase CRITICALLY_LOW:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"LL\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase HIGH:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"H\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase LOW:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"L\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase OFF_SCALE_LOW:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"<\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase OFF_SCALE_HIGH:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\">\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase SIGNIFICANT_CHANGE_DOWN:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"D\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase SIGNIFICANT_CHANGE_UP:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"U\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase RESISTANT:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"R\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase SUSCEPTIBLE:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"S\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase INTERMEDIATE:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"I\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase POSITIVE:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"POS\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase NEGATIVE:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"NEG\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tcase VERY_SUSCEPTIBLE:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(new Coding()\n+\t\t\t\t        .setSystem(FhirConstants.VERY_SUSCEPTIBLE_SYSTEM_URI).setCode(\"VS\").setDisplay(\"Very Susceptible\")));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\treturn interpretation;\n+\t\t\t\n+\t\t}\n+\t\treturn interpretation;\n+\t}\n+\t\n+\t@Override\n+\tpublic Obs toOpenmrsType(Obs openmrsObs, CodeableConcept interpretation) {\n+\t\topenmrsObs.setInterpretation(Obs.Interpretation.valueOf(interpretation.getText()));", "originalCommit": "ac2303f762707676c0f698207d9d347bf0ea98f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5MDk5NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378890994", "body": "I think we should do the same thing here that we do to translate the interpretation into it's display value.", "bodyText": "I think we should do the same thing here that we do to translate the interpretation into it's display value.", "bodyHTML": "<p dir=\"auto\">I think we should do the same thing here that we do to translate the interpretation into it's display value.</p>", "author": "ibacher", "createdAt": "2020-02-13T14:24:19Z", "path": "api-2.1/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationInterpretationTranslatorImpl_2_1.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.Collections;\n+\n+import org.apache.commons.lang.WordUtils;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Obs;\n+import org.openmrs.annotation.OpenmrsProfile;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.stereotype.Component;\n+\n+@Primary\n+@Component\n+@OpenmrsProfile(openmrsPlatformVersion = \"2.1.* - 2.3.*\")\n+public class ObservationInterpretationTranslatorImpl_2_1 extends ObservationInterpretationTranslatorImpl {\n+\t\n+\t@Override\n+\tpublic CodeableConcept toFhirResource(Obs obs) {\n+\t\tif (obs.getInterpretation() == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tCodeableConcept interpretation = new CodeableConcept();\n+\t\tswitch (obs.getInterpretation()) {\n+\t\t\tcase NORMAL:\n+\t\t\t\tinterpretation.setCoding(Collections.singletonList(addIntepretationCoding(\"N\", obs.getInterpretation())));\n+\t\t\t\tinterpretation.setText(obs.getInterpretation().toString().toLowerCase());", "originalCommit": "ac2303f762707676c0f698207d9d347bf0ea98f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5MzY1MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378893650", "body": "The FHIR observation status set is substantially larger than the OpenMRS observation status. What happens, for example, if we get an observation with the status \"cancelled\"? (I'd suggest writing a unit test that passes that status and try to fix the issue.", "bodyText": "The FHIR observation status set is substantially larger than the OpenMRS observation status. What happens, for example, if we get an observation with the status \"cancelled\"? (I'd suggest writing a unit test that passes that status and try to fix the issue.", "bodyHTML": "<p dir=\"auto\">The FHIR observation status set is substantially larger than the OpenMRS observation status. What happens, for example, if we get an observation with the status \"cancelled\"? (I'd suggest writing a unit test that passes that status and try to fix the issue.</p>", "author": "ibacher", "createdAt": "2020-02-13T14:28:22Z", "path": "api-2.1/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationStatusTranslatorImpl_2_1.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import org.hl7.fhir.r4.model.Observation;\n+import org.openmrs.Obs;\n+import org.openmrs.annotation.OpenmrsProfile;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.stereotype.Component;\n+\n+@Primary\n+@Component\n+@OpenmrsProfile(openmrsPlatformVersion = \"2.1.* - 2.3.*\")\n+public class ObservationStatusTranslatorImpl_2_1 extends ObservationStatusTranslatorImpl {\n+\t\n+\t@Override\n+\tpublic Observation.ObservationStatus toFhirResource(Obs obs) {\n+\t\treturn Observation.ObservationStatus.valueOf(obs.getStatus().toString());\n+\t}\n+\t\n+\t@Override\n+\tpublic Obs toOpenmrsType(Obs observation, Observation.ObservationStatus observationStatus) {\n+\t\tobservation.setStatus(Obs.Status.valueOf(observationStatus.toString()));", "originalCommit": "ac2303f762707676c0f698207d9d347bf0ea98f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5MzkwMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378893901", "body": "Should be `private` (I'm bad about remembering this too)", "bodyText": "Should be private (I'm bad about remembering this too)", "bodyHTML": "<p dir=\"auto\">Should be <code>private</code> (I'm bad about remembering this too)</p>", "author": "ibacher", "createdAt": "2020-02-13T14:28:47Z", "path": "api-2.1/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationInterpretationTranslatorImpl_2_1Test.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.openmrs.Obs;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ObservationInterpretationTranslatorImpl_2_1Test {\n+\t\n+\tprivate static final Obs.Interpretation OBS_INTERPRETATION = Obs.Interpretation.HIGH;\n+\t\n+\tObservationInterpretationTranslatorImpl_2_1 observationInterpretationTranslator;", "originalCommit": "ac2303f762707676c0f698207d9d347bf0ea98f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5NDM2OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378894368", "body": "Can we construct this as we construct the other extension URLs? That way if we need to change something, we only have to change it in one place.", "bodyText": "Can we construct this as we construct the other extension URLs? That way if we need to change something, we only have to change it in one place.", "bodyHTML": "<p dir=\"auto\">Can we construct this as we construct the other extension URLs? That way if we need to change something, we only have to change it in one place.</p>", "author": "ibacher", "createdAt": "2020-02-13T14:29:30Z", "path": "api/src/main/java/org/openmrs/module/fhir2/FhirConstants.java", "diffHunk": "@@ -21,6 +21,10 @@\n \t\n \tpublic static final String DIAGNOSTIC_SERVICE_SECTIONS_VALUESET_URI = \"http://hl7.org/fhir/ValueSet/diagnostic-service-sections\";\n \t\n+\tpublic static final String INTERPRETATION_VALUE_SET_URI = \"http://hl7.org/fhir/ValueSet/observation-interpretation\";\n+\t\n+\tpublic static final String VERY_SUSCEPTIBLE_SYSTEM_URI = \"https://fhir.openmrs.org/ext/obs/interpretations\";", "originalCommit": "ac2303f762707676c0f698207d9d347bf0ea98f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5NDczMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378894733", "body": "`addInterpretation()` rather than `setInterpretation()` here.", "bodyText": "addInterpretation() rather than setInterpretation() here.", "bodyHTML": "<p dir=\"auto\"><code>addInterpretation()</code> rather than <code>setInterpretation()</code> here.</p>", "author": "ibacher", "createdAt": "2020-02-13T14:30:09Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -80,6 +85,8 @@ public Observation toFhirResource(Obs observation) {\n \t\t\n \t\tobs.setValue(observationValueTranslator.toFhirResource(observation));\n \t\t\n+\t\tobs.setInterpretation(Collections.singletonList(interpretationTranslator.toFhirResource(observation)));", "originalCommit": "ac2303f762707676c0f698207d9d347bf0ea98f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5MTgyMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r378991820", "bodyText": "OpenMrs only allows adding a single interpretation to an observation, addInterpretation() is not supported", "author": "jecihjoy", "createdAt": "2020-02-13T16:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5NDczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0OTcyNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/60#discussion_r379049724", "bodyText": "So, I'm not suggesting we support multiple interpretations, just that obs.addInterpretation(interpretationTranslator.toFhirResource(observation)) does the same thing and is a bit shorter and clearer.", "author": "ibacher", "createdAt": "2020-02-13T18:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5NDczMw=="}], "type": "inlineReview"}, {"oid": "e69a877408374a25b18bc1d0bd2f79db04f136bc", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e69a877408374a25b18bc1d0bd2f79db04f136bc", "message": "FM2-53 : Added mappings for Observation.interpretation and Observation.status for 2.1.0 and newer", "committedDate": "2020-02-13T20:37:59Z", "type": "forcePushed"}, {"oid": "411915be0bc05c26cfb0f5edcfd23d0d2bdf1090", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/411915be0bc05c26cfb0f5edcfd23d0d2bdf1090", "message": "FM2-53 : Added mappings for Observation.interpretation and Observation.status for 2.1.0 and newer", "committedDate": "2020-02-13T20:41:14Z", "type": "commit"}, {"oid": "411915be0bc05c26cfb0f5edcfd23d0d2bdf1090", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/411915be0bc05c26cfb0f5edcfd23d0d2bdf1090", "message": "FM2-53 : Added mappings for Observation.interpretation and Observation.status for 2.1.0 and newer", "committedDate": "2020-02-13T20:41:14Z", "type": "forcePushed"}]}