{"pr_number": 200, "pr_title": "FM2-101:Implement sorting for AllergyIntolerance resource", "pr_author": "gitcliff", "pr_createdAt": "2020-06-10T20:06:07Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200", "timeline": [{"oid": "15da7d372baab3d0ebf34ed47bcf6a90d55f96a5", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/15da7d372baab3d0ebf34ed47bcf6a90d55f96a5", "message": "FM2-101:Implement sorting for AllegyIntolerance resource", "committedDate": "2020-06-11T08:37:38Z", "type": "forcePushed"}, {"oid": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d", "message": "FM2-101:Implement sorting for AllergyIntolerance resource", "committedDate": "2020-06-14T18:39:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1MDY0OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r441750649", "body": "@gitcliff  Instead of doing `get(results)` so many times and considering it repeatedly queries the database, it's better to store it in a variable once and then use it. You may refer to other search query test classes for reference like `LocationSearchQueryImplTest`. Please find this useful throughout the PR.", "bodyText": "@gitcliff  Instead of doing get(results) so many times and considering it repeatedly queries the database, it's better to store it in a variable once and then use it. You may refer to other search query test classes for reference like LocationSearchQueryImplTest. Please find this useful throughout the PR.", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/gitcliff/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gitcliff\">@gitcliff</a>  Instead of doing <code>get(results)</code> so many times and considering it repeatedly queries the database, it's better to store it in a variable once and then use it. You may refer to other search query test classes for reference like <code>LocationSearchQueryImplTest</code>. Please find this useful throughout the PR.</p>", "author": "varung-31", "createdAt": "2020-06-17T18:39:06Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tfor (int i = 1; i < get(results).size(); i++) {", "originalCommit": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r445810563", "body": "@gitcliff This should be something like:\r\n\r\n```suggestion\r\n\t\tList<AllergyIntolerance> fullResults = (List<AllergyIntolerance>) get(results);\r\n\t\tfor (int i = 1; i < fullResults.size(); i++) {\r\n\t\t\tassertThat(fullResults.get(i - 1).getReactionFirstRep().getSeverity(),\r\n\t\t\t\t    lessThanOrEqualTo(fullResults.get(i).getReactionFirstRep().getSeverity()));\t\r\n\t\t}\r\n```", "bodyText": "@gitcliff This should be something like:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfor (int i = 1; i < get(results).size(); i++) {\n          \n          \n            \n            \t\t\t\n          \n          \n            \n            \t\t\tassertThat(((AllergyIntolerance) get(results).get(i - 1)).getReactionFirstRep().getSeverity(),\n          \n          \n            \n            \t\t\t\t    lessThanOrEqualTo(((AllergyIntolerance) get(results).get(i)).getReactionFirstRep().getSeverity()));\t\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tList<AllergyIntolerance> fullResults = (List<AllergyIntolerance>) get(results);\n          \n          \n            \n            \t\tfor (int i = 1; i < fullResults.size(); i++) {\n          \n          \n            \n            \t\t\tassertThat(fullResults.get(i - 1).getReactionFirstRep().getSeverity(),\n          \n          \n            \n            \t\t\t\t    lessThanOrEqualTo(fullResults.get(i).getReactionFirstRep().getSeverity()));\t\n          \n          \n            \n            \t\t}", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/gitcliff/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gitcliff\">@gitcliff</a> This should be something like:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"782\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-k x x-first\">for</span><span class=\"x\"> (</span><span class=\"pl-k x\">int</span><span class=\"x\"> i </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">1</span><span class=\"x\">; i </span><span class=\"pl-k x x-last\">&lt;</span> get(results)<span class=\"pl-k x x-first\">.</span><span class=\"x\">size(); i</span><span class=\"pl-k x\">++</span><span class=\"x x-last\">) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"783\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"x x-first x-last\">\t</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"784\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\tassertThat(<span class=\"x x-first\">((</span><span class=\"pl-smi x\">AllergyIntolerance</span><span class=\"x x-last\">) get(results)</span><span class=\"pl-k\">.</span>get(i <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span><span class=\"x x-first x-last\">)</span>)<span class=\"pl-k\">.</span>getReactionFirstRep()<span class=\"pl-k\">.</span>getSeverity(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"785\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t    lessThanOrEqualTo(<span class=\"x x-first\">((</span><span class=\"pl-smi x\">AllergyIntolerance</span><span class=\"x x-last\">) get(results)</span><span class=\"pl-k\">.</span>get(i<span class=\"x x-first x-last\">)</span>)<span class=\"pl-k\">.</span>getReactionFirstRep()<span class=\"pl-k\">.</span>getSeverity()));\t</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"786\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t}</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"782\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-k\"><span class=\"x x-first\">List&lt;</span><span class=\"pl-smi x\">AllergyIntolerance</span><span class=\"x\">&gt;</span></span><span class=\"x\"> fullResults </span><span class=\"pl-k x\">=</span><span class=\"x\"> (</span><span class=\"pl-k\"><span class=\"x\">List&lt;</span><span class=\"pl-smi x\">AllergyIntolerance</span><span class=\"x\">&gt;</span></span><span class=\"x x-last\">)</span> get(results)<span class=\"x x-first x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"783\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-k x x-first\">for</span><span class=\"x\"> (</span><span class=\"pl-k x\">int</span><span class=\"x\"> i </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">1</span><span class=\"x\">; i </span><span class=\"pl-k x\">&lt;</span><span class=\"x\"> fullResults</span><span class=\"pl-k x\">.</span><span class=\"x\">size(); i</span><span class=\"pl-k x\">++</span><span class=\"x x-last\">) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"784\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\tassertThat(<span class=\"x x-first x-last\">fullResults</span><span class=\"pl-k\">.</span>get(i <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>)<span class=\"pl-k\">.</span>getReactionFirstRep()<span class=\"pl-k\">.</span>getSeverity(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"785\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t    lessThanOrEqualTo(<span class=\"x x-first x-last\">fullResults</span><span class=\"pl-k\">.</span>get(i)<span class=\"pl-k\">.</span>getReactionFirstRep()<span class=\"pl-k\">.</span>getSeverity()));\t</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"786\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t}</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ibacher", "createdAt": "2020-06-25T20:11:08Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tfor (int i = 1; i < get(results).size(); i++) {\n+\t\t\t\n+\t\t\tassertThat(((AllergyIntolerance) get(results).get(i - 1)).getReactionFirstRep().getSeverity(),\n+\t\t\t\t    lessThanOrEqualTo(((AllergyIntolerance) get(results).get(i)).getReactionFirstRep().getSeverity()));\t\n+\t\t}", "originalCommit": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDkzOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r445810939", "bodyText": "Similar comments apply to the rest of the sorting test methods.", "author": "ibacher", "createdAt": "2020-06-25T20:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNzk1OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447217958", "bodyText": "@ibacher  the above change you suggested which involves casting drops Cannot cast from List<IBaseResource> to List<AllergyIntolerance> compilation error", "author": "gitcliff", "createdAt": "2020-06-29T19:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyMDAzNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447220035", "bodyText": "You can do it using the following approach-\nget(results).stream().map(p -> (AllergyIntolerance)p).collect(Collectors.toList());", "author": "varung-31", "createdAt": "2020-06-29T20:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxMzkyNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447413927", "bodyText": "thanks @varung-31  let me try it out", "author": "gitcliff", "createdAt": "2020-06-30T05:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDY4NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r445810685", "body": "This should be *after* the for loop.", "bodyText": "This should be after the for loop.", "bodyHTML": "<p dir=\"auto\">This should be <em>after</em> the for loop.</p>", "author": "ibacher", "createdAt": "2020-06-25T20:11:25Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);", "originalCommit": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyNTI0Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447425243", "bodyText": "@ibacher i have fixed it ,,,kindly review", "author": "gitcliff", "createdAt": "2020-06-30T05:50:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDY4NQ=="}], "type": "inlineReview"}, {"oid": "a27f51433ba672605fb64b8b5ab08aba0d4204b0", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a27f51433ba672605fb64b8b5ab08aba0d4204b0", "message": "FM2-101:Implement sorting for AllergyIntolerance resource", "committedDate": "2020-06-30T05:49:11Z", "type": "forcePushed"}, {"oid": "f8edf70581ba75d8079a38c07548caf17edb154b", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f8edf70581ba75d8079a38c07548caf17edb154b", "message": "FM2-101:Implement sorting for AllergyIntolerance resource", "committedDate": "2020-06-30T06:11:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4Nzk0NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447487944", "body": "Do you think we need to cast it again to AllergyIntolerance given that the list contains AllergyIntolerance objects?\r\nPlease use this for all other sorting tests added.", "bodyText": "Do you think we need to cast it again to AllergyIntolerance given that the list contains AllergyIntolerance objects?\nPlease use this for all other sorting tests added.", "bodyHTML": "<p dir=\"auto\">Do you think we need to cast it again to AllergyIntolerance given that the list contains AllergyIntolerance objects?<br>\nPlease use this for all other sorting tests added.</p>", "author": "varung-31", "createdAt": "2020-06-30T08:00:14Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -760,4 +764,91 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tList<AllergyIntolerance> fullResults = get(results).stream().map(p -> (AllergyIntolerance)p).collect(Collectors.toList());\n+\t\tfor (int i = 1; i < fullResults.size(); i++) {\n+\t\t\t\n+\t\t\tassertThat(((AllergyIntolerance) fullResults.get(i - 1)).getReactionFirstRep().getSeverity(),\n+\t\t\t\t    lessThanOrEqualTo(((AllergyIntolerance) fullResults.get(i)).getReactionFirstRep().getSeverity()));\t", "originalCommit": "f8edf70581ba75d8079a38c07548caf17edb154b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4OTAwMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447489002", "body": "We don't need to add `FhirConstants.GLOBAL_PROPERTY_SEVERE`. Check the dao implementation.\r\nPlease use this for all other sorting tests added.", "bodyText": "We don't need to add FhirConstants.GLOBAL_PROPERTY_SEVERE. Check the dao implementation.\nPlease use this for all other sorting tests added.", "bodyHTML": "<p dir=\"auto\">We don't need to add <code>FhirConstants.GLOBAL_PROPERTY_SEVERE</code>. Check the dao implementation.<br>\nPlease use this for all other sorting tests added.</p>", "author": "varung-31", "createdAt": "2020-06-30T08:01:41Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -760,4 +764,91 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));", "originalCommit": "f8edf70581ba75d8079a38c07548caf17edb154b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "20dd5feaeb65f362bdf59209135ba1cd5835a831", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/20dd5feaeb65f362bdf59209135ba1cd5835a831", "message": "FM2-101:Implement sorting for AllergyIntolerance resource", "committedDate": "2020-06-30T10:55:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMzE1NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447603155", "body": "@gitcliff \r\nYou forgot to remove the casting I guess.", "bodyText": "@gitcliff\nYou forgot to remove the casting I guess.", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/gitcliff/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gitcliff\">@gitcliff</a><br>\nYou forgot to remove the casting I guess.</p>", "author": "varung-31", "createdAt": "2020-06-30T11:12:36Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -760,4 +764,91 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tList<AllergyIntolerance> fullResults = get(results).stream().map(p -> (AllergyIntolerance)p).collect(Collectors.toList());\n+\t\tfor (int i = 1; i < fullResults.size(); i++) {\n+\t\t\t\n+\t\t\tassertThat(((AllergyIntolerance) fullResults.get(i - 1)).getReactionFirstRep().getSeverity(),", "originalCommit": "20dd5feaeb65f362bdf59209135ba1cd5835a831", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a8ce45b1e7fee659535812bb5fadd467ed2bb536", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a8ce45b1e7fee659535812bb5fadd467ed2bb536", "message": "FM2-101:Implement sorting for AllergyIntolerance resource", "committedDate": "2020-06-30T11:59:09Z", "type": "commit"}, {"oid": "a8ce45b1e7fee659535812bb5fadd467ed2bb536", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a8ce45b1e7fee659535812bb5fadd467ed2bb536", "message": "FM2-101:Implement sorting for AllergyIntolerance resource", "committedDate": "2020-06-30T11:59:09Z", "type": "forcePushed"}]}