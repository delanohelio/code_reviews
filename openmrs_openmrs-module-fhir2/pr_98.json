{"pr_number": 98, "pr_title": "FM2-80: Improve Search for Location Resource", "pr_author": "varung-31", "pr_createdAt": "2020-03-01T17:45:46Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3MjE4OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r386372188", "body": "Remove these changes from this commit.", "bodyText": "Remove these changes from this commit.", "bodyHTML": "<p dir=\"auto\">Remove these changes from this commit.</p>", "author": "corneliouzbett", "createdAt": "2020-03-02T12:48:14Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest.java", "diffHunk": "@@ -36,166 +43,258 @@\n \n @ContextConfiguration(classes = TestFhirSpringConfiguration.class, inheritLocations = false)\n public class FhirLocationDaoImplTest extends BaseModuleContextSensitiveTest {\n-\t\n+\n \tprivate static final String LOCATION_UUID = \"c0938432-1691-11df-97a5-7038c432aaba\";\n-\t\n+\n \tprivate static final String UNKNOWN_LOCATION_UUID = \"c0938432-1691-11df-97a5-7038c432aabz\";\n-\t\n-\tprivate static final String LOCATION_NAME = \"Test location 1\";\n-\t\n+\n+\tprivate static final String LOCATION_NAME = \"Test location 7\";\n+\n \tprivate static final String UNKNOWN_LOCATION_NAME = \"Location2\";\n-\t\n+\n \tprivate static final String LOCATION_CITY = \"Artuor\";\n-\t\n+\n \tprivate static final String UNKNOWN_LOCATION_CITY = \"ArtuorA\";\n-\t\n+\n \tprivate static final String LOCATION_COUNTRY = \"Kenya\";\n-\t\n+\n \tprivate static final String UNKNOWN_LOCATION_COUNTRY = \"KenyaA\";\n-\t\n+\n \tprivate static final String POSTAL_CODE = \"4069-3100\";\n-\t\n+\n \tprivate static final String UNKNOWN_POSTAL_CODE = \"4015-3100\";\n-\t\n+\n \tprivate static final String LOCATION_STATE = \"province\";\n-\t\n+\n \tprivate static final String UNKNOWN_LOCATION_STATE = \"province state\";\n-\t", "originalCommit": "761142c8267328eab6da66ef89fad0d86fe82e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NTE1NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r386375155", "bodyText": "mvn clean install or mvn package before pushing your changes", "author": "corneliouzbett", "createdAt": "2020-03-02T12:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3MjE4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4MDU2Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r386580567", "bodyText": "Done", "author": "varung-31", "createdAt": "2020-03-02T18:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3MjE4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMTc4Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r386401783", "body": " Please refer to this [comment](https://github.com/openmrs/openmrs-module-fhir2/pull/85#issuecomment-591442869) on implementing sorting on other parameters.", "bodyText": "Please refer to this comment on implementing sorting on other parameters.", "bodyHTML": "<p dir=\"auto\">Please refer to this <a href=\"https://github.com/openmrs/openmrs-module-fhir2/pull/85#issuecomment-591442869\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/openmrs/openmrs-module-fhir2/pull/85/hovercard\">comment</a> on implementing sorting on other parameters.</p>", "author": "CaptainDaVinci", "createdAt": "2020-03-02T13:48:48Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -30,49 +39,99 @@\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirLocationDaoImpl implements FhirLocationDao {\n-\t\n+public class FhirLocationDaoImpl extends BaseDaoImpl implements FhirLocationDao {\n+\n \t@Inject\n \tLocationService locationService;\n-\t\n+\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tSessionFactory sessionFactory;\n-\t\n+\n \t@Override\n \tpublic Location getLocationByUuid(String uuid) {\n \t\treturn locationService.getLocationByUuid(uuid);\n \t}\n-\t\n-\t@Override\n-\tpublic Collection<Location> findLocationByName(String name) {\n-\t\treturn locationService.getLocations(name);\n+\n+\tprivate void handleName(Criteria criteria, StringParam namePattern) {\n+\t\tif(namePattern != null) {\n+\t\t\tpropertyLike(\"name\", namePattern).ifPresent(criteria::add);\n+\t\t}\n \t}\n-\t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCity(String city) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"cityVillage\", city)).list();\n+\n+\tprivate void handleCity(Criteria criteria, StringParam city) {\n+\t\tif(city != null) {\n+\t\t\tpropertyLike(\"cityVillage\", city).ifPresent(criteria::add);\n+\t\t}\n \t}\n-\t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCountry(String country) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"country\", country)).list();\n+\n+\tprivate void handleCountry(Criteria criteria, StringParam country) {\n+\t\tif(country != null) {\n+\t\t\tpropertyLike(\"country\", country).ifPresent(criteria::add);\n+\t\t}\n \t}\n-\t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByPostalCode(String postalCode) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"postalCode\", postalCode)).list();\n+\n+\tprivate void handlePostalCode(Criteria criteria, StringParam postalCode) {\n+\t\tif(postalCode != null) {\n+\t\t\tpropertyLike(\"postalCode\", postalCode).ifPresent(criteria::add);\n+\t\t}\n \t}\n-\t\n+\n+\tprivate void handleState(Criteria criteria, StringParam state) {\n+\t\tif(state != null) {\n+\t\t\tpropertyLike(\"stateProvince\", state).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\n+\tprivate void handleTag(Criteria criteria, TokenParam tag) {\n+\t\tif(tag != null) {\n+\t\t\tcriteria.createAlias(\"tags\", \"t\");\n+\t\t\tpropertyLike(\"t.name\", tag).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\n+\t// handle queries of the form /Location?partof=parent_name\n+\tprivate void handleParentLocation(Criteria criteria, StringParam parent) {\n+\t\tif (parent != null) {\n+\t\t\tProjectionList projList = Projections.projectionList();\n+\t\t\tprojList.add(Projections.property(\"locationId\"));\n+\n+\t\t\tCriteria criteriaForParent = this.sessionFactory.getCurrentSession().createCriteria(Location.class);\n+\t\t\tpropertyLike(\"name\", parent).ifPresent(criteriaForParent::add);\n+\n+\t\t\tSet<Object> possibleParentLocationIdList = new HashSet<>(criteriaForParent.setProjection(projList).list());\n+\n+\t\t\tcriteria.createCriteria(\"parentLocation\").add(in(\"locationId\", possibleParentLocationIdList));\n+\t\t}\n+\t}\n+\n \t@Override\n-\tpublic Collection<Location> findLocationsByState(String state) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"stateProvince\", state)).list();\n+\tprotected String paramToProp(@NotNull String paramName) {", "originalCommit": "761142c8267328eab6da66ef89fad0d86fe82e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU1NjMwOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r386556308", "bodyText": "I have already done that for \"name\". In this PR, I only sorted by name.\nI'll implement others in the new revision.", "author": "varung-31", "createdAt": "2020-03-02T18:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMTc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMzIxOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r386403219", "body": "Using something like,\r\n```\r\nassertThat(resultsList.get(i - 1).getName(), lessThanOrEqualTo(resultsList.get(i).getName());\r\n```\r\nWould make the tests more readable. Also, the comments would not be required then.", "bodyText": "Using something like,\nassertThat(resultsList.get(i - 1).getName(), lessThanOrEqualTo(resultsList.get(i).getName());\n\nWould make the tests more readable. Also, the comments would not be required then.", "bodyHTML": "<p dir=\"auto\">Using something like,</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(resultsList.get(i - 1).getName(), lessThanOrEqualTo(resultsList.get(i).getName());\"><pre><code>assertThat(resultsList.get(i - 1).getName(), lessThanOrEqualTo(resultsList.get(i).getName());\n</code></pre></div>\n<p dir=\"auto\">Would make the tests more readable. Also, the comments would not be required then.</p>", "author": "CaptainDaVinci", "createdAt": "2020-03-02T13:51:30Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest.java", "diffHunk": "@@ -36,166 +43,258 @@\n \n @ContextConfiguration(classes = TestFhirSpringConfiguration.class, inheritLocations = false)\n public class FhirLocationDaoImplTest extends BaseModuleContextSensitiveTest {\n-\t\n+\n \tprivate static final String LOCATION_UUID = \"c0938432-1691-11df-97a5-7038c432aaba\";\n-\t\n+\n \tprivate static final String UNKNOWN_LOCATION_UUID = \"c0938432-1691-11df-97a5-7038c432aabz\";\n-\t\n-\tprivate static final String LOCATION_NAME = \"Test location 1\";\n-\t\n+\n+\tprivate static final String LOCATION_NAME = \"Test location 7\";\n+\n \tprivate static final String UNKNOWN_LOCATION_NAME = \"Location2\";\n-\t\n+\n \tprivate static final String LOCATION_CITY = \"Artuor\";\n-\t\n+\n \tprivate static final String UNKNOWN_LOCATION_CITY = \"ArtuorA\";\n-\t\n+\n \tprivate static final String LOCATION_COUNTRY = \"Kenya\";\n-\t\n+\n \tprivate static final String UNKNOWN_LOCATION_COUNTRY = \"KenyaA\";\n-\t\n+\n \tprivate static final String POSTAL_CODE = \"4069-3100\";\n-\t\n+\n \tprivate static final String UNKNOWN_POSTAL_CODE = \"4015-3100\";\n-\t\n+\n \tprivate static final String LOCATION_STATE = \"province\";\n-\t\n+\n \tprivate static final String UNKNOWN_LOCATION_STATE = \"province state\";\n-\t\n+\n \tprivate static final String LOGIN_LOCATION_TAG_NAME = \"login\";\n-\t\n+\n+\tprivate static final String LOCATION_PARENT_NAME = \"Test location 1\";\n+\n+\tprivate static final String UNKNOWN_LOCATION_PARENT_NAME = \"Test location 10\";\n+\n \tprivate static final String LOCATION_ATTRIBUTE_TYPE_UUID = \"abcde432-1691-11df-97a5-7038c432abcd\";\n-\t\n+\n \tprivate static final String LOCATION_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest_initial_data.xml\";\n-\t\n+\n \tprivate FhirLocationDaoImpl fhirLocationDao;\n-\t\n+\n \t@Inject\n \t@Named(\"locationService\")\n \tprivate Provider<LocationService> locationServiceProvider;\n-\t\n+\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate Provider<SessionFactory> sessionFactoryProvider;\n-\t\n+\n \t@Before\n \tpublic void setup() throws Exception {\n \t\tfhirLocationDao = new FhirLocationDaoImpl();\n \t\tfhirLocationDao.setLocationService(locationServiceProvider.get());\n \t\tfhirLocationDao.setSessionFactory(sessionFactoryProvider.get());\n \t\texecuteDataSet(LOCATION_INITIAL_DATA_XML);\n \t}\n-\t\n+\n \t@Test\n \tpublic void getLocationByUuid_shouldReturnMatchingLocation() {\n \t\tLocation location = fhirLocationDao.getLocationByUuid(LOCATION_UUID);\n-\t\t\n+\n \t\tassertThat(location, notNullValue());\n \t\tassertThat(location.getUuid(), equalTo(LOCATION_UUID));\n \t}\n-\t\n+\n \t@Test\n \tpublic void getLocationByUuid_shouldReturnNullWithUnknownUuid() {\n \t\tLocation location = fhirLocationDao.getLocationByUuid(UNKNOWN_LOCATION_UUID);\n-\t\t\n+\n \t\tassertThat(location, nullValue());\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationByName_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(LOCATION_NAME);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(1));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationByName_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(UNKNOWN_LOCATION_NAME);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(UNKNOWN_LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(LOCATION_CITY);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCity() {\n+\t\tStringParam city = new StringParam();\n+\t\tcity.setValue(LOCATION_CITY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(locations.size(), equalTo(1));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(UNKNOWN_LOCATION_CITY);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n+\t\tStringParam city = new StringParam();\n+\t\tcity.setValue(UNKNOWN_LOCATION_CITY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationByCountry_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCountry(LOCATION_COUNTRY);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCountry() {\n+\t\tStringParam country = new StringParam();\n+\t\tcountry.setValue(LOCATION_COUNTRY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, country, null,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationByCountry_shouldReturnEmptyCollectionWhenCalledWithUnknownCountry() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCountry(UNKNOWN_LOCATION_COUNTRY);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCountry() {\n+\t\tStringParam country = new StringParam();\n+\t\tcountry.setValue(UNKNOWN_LOCATION_COUNTRY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, country, null,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationsByPostalCode_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByPostalCode(POSTAL_CODE);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByPostalCode() {\n+\t\tStringParam postalCode = new StringParam();\n+\t\tpostalCode.setValue(POSTAL_CODE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, postalCode,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationsByPostalCode_shouldReturnEmptyCollectionWhenCalledWithUnknownCode() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByPostalCode(UNKNOWN_POSTAL_CODE);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCode() {\n+\t\tStringParam postalCode = new StringParam();\n+\t\tpostalCode.setValue(UNKNOWN_POSTAL_CODE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, postalCode,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationsByState_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByState(LOCATION_STATE);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByState() {\n+\t\tStringParam state = new StringParam();\n+\t\tstate.setValue(LOCATION_STATE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null,\n+\t\t\t\tnull, state, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(locations.size(), equalTo(2));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationsByState_shouldReturnEmptyCollectionWhenCalledWithUnknownState() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByState(UNKNOWN_LOCATION_STATE);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownState() {\n+\t\tStringParam state = new StringParam();\n+\t\tstate.setValue(UNKNOWN_LOCATION_STATE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null,\n+\t\t\t\tnull, state, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationsByTag_shouldReturnLocationsContainingGivenTag() {\n+\tpublic void searchForLocations_shouldReturnLocationsContainingGivenTag() {\n \t\tTokenParam locationTag = new TokenParam(FhirConstants.OPENMRS_FHIR_EXT_LOCATION_TAG, LOGIN_LOCATION_TAG_NAME);\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByTag(locationTag);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null,\n+\t\t\t\tnull, null, locationTag, null, null);\n+\n+\t\tassertThat(locations, notNullValue());\n+\t\tassertThat(locations.size(), equalTo(2));\n+\t}\n+\n+\t@Test\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByParent() {\n+\t\tStringParam parentLocation = new StringParam();\n+\t\tparentLocation.setValue(LOCATION_PARENT_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao\n+\t\t\t\t.searchForLocations(null, null, null, null, null, null, parentLocation, null);\n+\n+\t\tassertThat(locations, notNullValue());\n+\t\tassertThat(locations.size(), equalTo(1));\n+\t}\n+\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownParent() {\n+\t\tStringParam parentLocation = new StringParam();\n+\t\tparentLocation.setValue(UNKNOWN_LOCATION_PARENT_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao\n+\t\t\t\t.searchForLocations(null, null, null, null, null, null, parentLocation, null);\n+\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(0));\n \t}\n-\t\n+\n \t@Test\n \tpublic void getActiveAttributesByLocationAndAttributeTypeUuid_shouldReturnLocationAttribute() {\n \t\tLocation location = new Location();\n \t\tlocation.setUuid(LOCATION_UUID);\n-\t\t\n+\n \t\tList<LocationAttribute> attributeList = fhirLocationDao.getActiveAttributesByLocationAndAttributeTypeUuid(location,\n-\t\t    LOCATION_ATTRIBUTE_TYPE_UUID);\n-\t\t\n+\t\t\t\tLOCATION_ATTRIBUTE_TYPE_UUID);\n+\n \t\tassertThat(attributeList, notNullValue());\n \t}\n+\n+\t@Test\n+\tpublic void searchForLocations_shouldSortLocationsAsRequested() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"name\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\n+\t\tCollection<Location> results = fhirLocationDao.searchForLocations(null, null, null, null,\n+\t\t\t\tnull, null, null, sort);\n+\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), greaterThan(1));\n+\n+\t\tList<Location> resultsList = new ArrayList<>(results);\n+\t\t// check if the sorting is indeed correct by ascending order\n+\t\tfor (int i = 1; i < resultsList.size(); i++) {\n+\t\t\tassertTrue(resultsList.get(i - 1).getName().compareTo(resultsList.get(i).getName()) <= 0);", "originalCommit": "761142c8267328eab6da66ef89fad0d86fe82e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4MDI1OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r386580258", "bodyText": "Done", "author": "varung-31", "createdAt": "2020-03-02T18:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMzIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMzI5MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r386403291", "body": "Same here.", "bodyText": "Same here.", "bodyHTML": "<p dir=\"auto\">Same here.</p>", "author": "CaptainDaVinci", "createdAt": "2020-03-02T13:51:39Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest.java", "diffHunk": "@@ -36,166 +43,258 @@\n \n @ContextConfiguration(classes = TestFhirSpringConfiguration.class, inheritLocations = false)\n public class FhirLocationDaoImplTest extends BaseModuleContextSensitiveTest {\n-\t\n+\n \tprivate static final String LOCATION_UUID = \"c0938432-1691-11df-97a5-7038c432aaba\";\n-\t\n+\n \tprivate static final String UNKNOWN_LOCATION_UUID = \"c0938432-1691-11df-97a5-7038c432aabz\";\n-\t\n-\tprivate static final String LOCATION_NAME = \"Test location 1\";\n-\t\n+\n+\tprivate static final String LOCATION_NAME = \"Test location 7\";\n+\n \tprivate static final String UNKNOWN_LOCATION_NAME = \"Location2\";\n-\t\n+\n \tprivate static final String LOCATION_CITY = \"Artuor\";\n-\t\n+\n \tprivate static final String UNKNOWN_LOCATION_CITY = \"ArtuorA\";\n-\t\n+\n \tprivate static final String LOCATION_COUNTRY = \"Kenya\";\n-\t\n+\n \tprivate static final String UNKNOWN_LOCATION_COUNTRY = \"KenyaA\";\n-\t\n+\n \tprivate static final String POSTAL_CODE = \"4069-3100\";\n-\t\n+\n \tprivate static final String UNKNOWN_POSTAL_CODE = \"4015-3100\";\n-\t\n+\n \tprivate static final String LOCATION_STATE = \"province\";\n-\t\n+\n \tprivate static final String UNKNOWN_LOCATION_STATE = \"province state\";\n-\t\n+\n \tprivate static final String LOGIN_LOCATION_TAG_NAME = \"login\";\n-\t\n+\n+\tprivate static final String LOCATION_PARENT_NAME = \"Test location 1\";\n+\n+\tprivate static final String UNKNOWN_LOCATION_PARENT_NAME = \"Test location 10\";\n+\n \tprivate static final String LOCATION_ATTRIBUTE_TYPE_UUID = \"abcde432-1691-11df-97a5-7038c432abcd\";\n-\t\n+\n \tprivate static final String LOCATION_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest_initial_data.xml\";\n-\t\n+\n \tprivate FhirLocationDaoImpl fhirLocationDao;\n-\t\n+\n \t@Inject\n \t@Named(\"locationService\")\n \tprivate Provider<LocationService> locationServiceProvider;\n-\t\n+\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate Provider<SessionFactory> sessionFactoryProvider;\n-\t\n+\n \t@Before\n \tpublic void setup() throws Exception {\n \t\tfhirLocationDao = new FhirLocationDaoImpl();\n \t\tfhirLocationDao.setLocationService(locationServiceProvider.get());\n \t\tfhirLocationDao.setSessionFactory(sessionFactoryProvider.get());\n \t\texecuteDataSet(LOCATION_INITIAL_DATA_XML);\n \t}\n-\t\n+\n \t@Test\n \tpublic void getLocationByUuid_shouldReturnMatchingLocation() {\n \t\tLocation location = fhirLocationDao.getLocationByUuid(LOCATION_UUID);\n-\t\t\n+\n \t\tassertThat(location, notNullValue());\n \t\tassertThat(location.getUuid(), equalTo(LOCATION_UUID));\n \t}\n-\t\n+\n \t@Test\n \tpublic void getLocationByUuid_shouldReturnNullWithUnknownUuid() {\n \t\tLocation location = fhirLocationDao.getLocationByUuid(UNKNOWN_LOCATION_UUID);\n-\t\t\n+\n \t\tassertThat(location, nullValue());\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationByName_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(LOCATION_NAME);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(1));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationByName_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(UNKNOWN_LOCATION_NAME);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(UNKNOWN_LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(LOCATION_CITY);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCity() {\n+\t\tStringParam city = new StringParam();\n+\t\tcity.setValue(LOCATION_CITY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(locations.size(), equalTo(1));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(UNKNOWN_LOCATION_CITY);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n+\t\tStringParam city = new StringParam();\n+\t\tcity.setValue(UNKNOWN_LOCATION_CITY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationByCountry_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCountry(LOCATION_COUNTRY);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCountry() {\n+\t\tStringParam country = new StringParam();\n+\t\tcountry.setValue(LOCATION_COUNTRY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, country, null,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationByCountry_shouldReturnEmptyCollectionWhenCalledWithUnknownCountry() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCountry(UNKNOWN_LOCATION_COUNTRY);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCountry() {\n+\t\tStringParam country = new StringParam();\n+\t\tcountry.setValue(UNKNOWN_LOCATION_COUNTRY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, country, null,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationsByPostalCode_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByPostalCode(POSTAL_CODE);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByPostalCode() {\n+\t\tStringParam postalCode = new StringParam();\n+\t\tpostalCode.setValue(POSTAL_CODE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, postalCode,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationsByPostalCode_shouldReturnEmptyCollectionWhenCalledWithUnknownCode() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByPostalCode(UNKNOWN_POSTAL_CODE);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCode() {\n+\t\tStringParam postalCode = new StringParam();\n+\t\tpostalCode.setValue(UNKNOWN_POSTAL_CODE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, postalCode,\n+\t\t\t\tnull, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationsByState_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByState(LOCATION_STATE);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByState() {\n+\t\tStringParam state = new StringParam();\n+\t\tstate.setValue(LOCATION_STATE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null,\n+\t\t\t\tnull, state, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(locations.size(), equalTo(2));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationsByState_shouldReturnEmptyCollectionWhenCalledWithUnknownState() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByState(UNKNOWN_LOCATION_STATE);\n-\t\t\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownState() {\n+\t\tStringParam state = new StringParam();\n+\t\tstate.setValue(UNKNOWN_LOCATION_STATE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null,\n+\t\t\t\tnull, state, null, null, null);\n+\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n-\t\n+\n \t@Test\n-\tpublic void findLocationsByTag_shouldReturnLocationsContainingGivenTag() {\n+\tpublic void searchForLocations_shouldReturnLocationsContainingGivenTag() {\n \t\tTokenParam locationTag = new TokenParam(FhirConstants.OPENMRS_FHIR_EXT_LOCATION_TAG, LOGIN_LOCATION_TAG_NAME);\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByTag(locationTag);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null,\n+\t\t\t\tnull, null, locationTag, null, null);\n+\n+\t\tassertThat(locations, notNullValue());\n+\t\tassertThat(locations.size(), equalTo(2));\n+\t}\n+\n+\t@Test\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByParent() {\n+\t\tStringParam parentLocation = new StringParam();\n+\t\tparentLocation.setValue(LOCATION_PARENT_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao\n+\t\t\t\t.searchForLocations(null, null, null, null, null, null, parentLocation, null);\n+\n+\t\tassertThat(locations, notNullValue());\n+\t\tassertThat(locations.size(), equalTo(1));\n+\t}\n+\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownParent() {\n+\t\tStringParam parentLocation = new StringParam();\n+\t\tparentLocation.setValue(UNKNOWN_LOCATION_PARENT_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao\n+\t\t\t\t.searchForLocations(null, null, null, null, null, null, parentLocation, null);\n+\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(0));\n \t}\n-\t\n+\n \t@Test\n \tpublic void getActiveAttributesByLocationAndAttributeTypeUuid_shouldReturnLocationAttribute() {\n \t\tLocation location = new Location();\n \t\tlocation.setUuid(LOCATION_UUID);\n-\t\t\n+\n \t\tList<LocationAttribute> attributeList = fhirLocationDao.getActiveAttributesByLocationAndAttributeTypeUuid(location,\n-\t\t    LOCATION_ATTRIBUTE_TYPE_UUID);\n-\t\t\n+\t\t\t\tLOCATION_ATTRIBUTE_TYPE_UUID);\n+\n \t\tassertThat(attributeList, notNullValue());\n \t}\n+\n+\t@Test\n+\tpublic void searchForLocations_shouldSortLocationsAsRequested() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"name\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\n+\t\tCollection<Location> results = fhirLocationDao.searchForLocations(null, null, null, null,\n+\t\t\t\tnull, null, null, sort);\n+\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), greaterThan(1));\n+\n+\t\tList<Location> resultsList = new ArrayList<>(results);\n+\t\t// check if the sorting is indeed correct by ascending order\n+\t\tfor (int i = 1; i < resultsList.size(); i++) {\n+\t\t\tassertTrue(resultsList.get(i - 1).getName().compareTo(resultsList.get(i).getName()) <= 0);\n+\t\t}\n+\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\n+\t\tresults = fhirLocationDao.searchForLocations(null, null, null, null,\n+\t\t\t\tnull, null, null, sort);\n+\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), greaterThan(1));\n+\n+\t\tresultsList = new ArrayList<>(results);\n+\t\t// check if the sorting is indeed correct by descending order\n+\t\tfor (int i = 1; i < resultsList.size(); i++) {\n+\t\t\tassertTrue(resultsList.get(i - 1).getName().compareTo(resultsList.get(i).getName()) >= 0);", "originalCommit": "761142c8267328eab6da66ef89fad0d86fe82e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4MDIxOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r386580219", "bodyText": "Done", "author": "varung-31", "createdAt": "2020-03-02T18:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMzI5MQ=="}], "type": "inlineReview"}, {"oid": "7187751292ff0c39a9a454e7ce9564acbff0b918", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7187751292ff0c39a9a454e7ce9564acbff0b918", "message": "FM2-80: Improve Search for Location Resource", "committedDate": "2020-03-02T18:41:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3NDY3OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r387074679", "body": "I'd prefer `boolean` to `Boolean`. `Boolean` allows the value to be set to `null` which can cause unexpected issues.", "bodyText": "I'd prefer boolean to Boolean. Boolean allows the value to be set to null which can cause unexpected issues.", "bodyHTML": "<p dir=\"auto\">I'd prefer <code>boolean</code> to <code>Boolean</code>. <code>Boolean</code> allows the value to be set to <code>null</code> which can cause unexpected issues.</p>", "author": "ibacher", "createdAt": "2020-03-03T14:55:54Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -339,15 +339,19 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t// the string matches \"true\". We could potentially be passed a non-valid Boolean value here.\n \t\treturn handleOrListParam(booleanToken, token -> {\n \t\t\tif (token.getValue().equalsIgnoreCase(\"true\")) {\n-\t\t\t\treturn Optional.of(eq(propertyName, true));\n+\t\t\t\treturn handleBooleanProperty(propertyName, true);\n \t\t\t} else if (token.getValue().equalsIgnoreCase(\"false\")) {\n-\t\t\t\treturn Optional.of(eq(propertyName, false));\n+\t\t\t\treturn handleBooleanProperty(propertyName, false);\n \t\t\t}\n \t\t\t\n \t\t\treturn Optional.empty();\n \t\t});\n \t}\n \t\n+\tprotected Optional<Criterion> handleBooleanProperty(String propertyName, Boolean booleanVal) {", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3OTUxNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r387079514", "body": "I don't think we should actually be adding this. For `TokenParam` unlike `StringParam`, the match should always be equality, i.e., so instead of `propertyLike(\"t.uuid\", tag)`, we should really just be doing `eq(\"t.uuid\", tag)`.\r\n\r\n", "bodyText": "I don't think we should actually be adding this. For TokenParam unlike StringParam, the match should always be equality, i.e., so instead of propertyLike(\"t.uuid\", tag), we should really just be doing eq(\"t.uuid\", tag).", "bodyHTML": "<p dir=\"auto\">I don't think we should actually be adding this. For <code>TokenParam</code> unlike <code>StringParam</code>, the match should always be equality, i.e., so instead of <code>propertyLike(\"t.uuid\", tag)</code>, we should really just be doing <code>eq(\"t.uuid\", tag)</code>.</p>", "author": "ibacher", "createdAt": "2020-03-03T15:02:40Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -693,19 +697,27 @@ protected String paramToProp(@NotNull String param) {\n \t\t\treturn Optional.of(ilike(propertyName, param.getValue(), MatchMode.EXACT));\n \t\t} else if (param.isContains()) {\n \t\t\treturn Optional.of(ilike(propertyName, param.getValue(), MatchMode.ANYWHERE));\n-\t\t} else {\n-\t\t\treturn Optional.of(ilike(propertyName, param.getValue(), MatchMode.START));\n \t\t}\n+\t\t\n+\t\treturn Optional.of(ilike(propertyName, param.getValue(), MatchMode.START));\n+\t}\n+\t\n+\tprotected Optional<Criterion> propertyLike(@NotNull String propertyName, TokenParam tag) {\n+\t\tif (tag == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\treturn propertyLike(propertyName, new StringParam(tag.getValue()));", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MDM4NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r387080385", "body": "See above.\r\n\r\n```java\r\ncritieria.add(eq(\"t.name\", tag.getValue()))\r\n```", "bodyText": "See above.\ncritieria.add(eq(\"t.name\", tag.getValue()))", "bodyHTML": "<p dir=\"auto\">See above.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"critieria.add(eq(&quot;t.name&quot;, tag.getValue()))\"><pre>critieria<span class=\"pl-k\">.</span>add(eq(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>t.name<span class=\"pl-pds\">\"</span></span>, tag<span class=\"pl-k\">.</span>getValue()))</pre></div>", "author": "ibacher", "createdAt": "2020-03-03T15:03:56Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -44,35 +53,93 @@ public Location getLocationByUuid(String uuid) {\n \t\treturn locationService.getLocationByUuid(uuid);\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationByName(String name) {\n-\t\treturn locationService.getLocations(name);\n+\tprivate void handleName(Criteria criteria, StringParam namePattern) {\n+\t\tif (namePattern != null) {\n+\t\t\tpropertyLike(\"name\", namePattern).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCity(String city) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"cityVillage\", city)).list();\n+\tprivate void handleCity(Criteria criteria, StringParam city) {\n+\t\tif (city != null) {\n+\t\t\tpropertyLike(\"cityVillage\", city).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCountry(String country) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"country\", country)).list();\n+\tprivate void handleCountry(Criteria criteria, StringParam country) {\n+\t\tif (country != null) {\n+\t\t\tpropertyLike(\"country\", country).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByPostalCode(String postalCode) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"postalCode\", postalCode)).list();\n+\tprivate void handlePostalCode(Criteria criteria, StringParam postalCode) {\n+\t\tif (postalCode != null) {\n+\t\t\tpropertyLike(\"postalCode\", postalCode).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleState(Criteria criteria, StringParam state) {\n+\t\tif (state != null) {\n+\t\t\tpropertyLike(\"stateProvince\", state).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleTag(Criteria criteria, TokenParam tag) {\n+\t\tif (tag != null) {\n+\t\t\tcriteria.createAlias(\"tags\", \"t\");\n+\t\t\tpropertyLike(\"t.name\", tag).ifPresent(criteria::add);", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MTIwNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r387081206", "body": "`parent` should be defined as a `referenceParam`. See the definition [here](https://www.hl7.org/fhir/location.html#search).", "bodyText": "parent should be defined as a referenceParam. See the definition here.", "bodyHTML": "<p dir=\"auto\"><code>parent</code> should be defined as a <code>referenceParam</code>. See the definition <a href=\"https://www.hl7.org/fhir/location.html#search\" rel=\"nofollow\">here</a>.</p>", "author": "ibacher", "createdAt": "2020-03-03T15:05:11Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -44,35 +53,93 @@ public Location getLocationByUuid(String uuid) {\n \t\treturn locationService.getLocationByUuid(uuid);\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationByName(String name) {\n-\t\treturn locationService.getLocations(name);\n+\tprivate void handleName(Criteria criteria, StringParam namePattern) {\n+\t\tif (namePattern != null) {\n+\t\t\tpropertyLike(\"name\", namePattern).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCity(String city) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"cityVillage\", city)).list();\n+\tprivate void handleCity(Criteria criteria, StringParam city) {\n+\t\tif (city != null) {\n+\t\t\tpropertyLike(\"cityVillage\", city).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCountry(String country) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"country\", country)).list();\n+\tprivate void handleCountry(Criteria criteria, StringParam country) {\n+\t\tif (country != null) {\n+\t\t\tpropertyLike(\"country\", country).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByPostalCode(String postalCode) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"postalCode\", postalCode)).list();\n+\tprivate void handlePostalCode(Criteria criteria, StringParam postalCode) {\n+\t\tif (postalCode != null) {\n+\t\t\tpropertyLike(\"postalCode\", postalCode).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleState(Criteria criteria, StringParam state) {\n+\t\tif (state != null) {\n+\t\t\tpropertyLike(\"stateProvince\", state).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleTag(Criteria criteria, TokenParam tag) {\n+\t\tif (tag != null) {\n+\t\t\tcriteria.createAlias(\"tags\", \"t\");\n+\t\t\tpropertyLike(\"t.name\", tag).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\t// handle queries of the form /Location?partof=parent_name\n+\tprivate void handleParentLocation(Criteria criteria, StringParam parent) {", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MTY1Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r387081657", "body": "If you're going to do something like this, used `DetachedCriteria` instead of `Criteria`.", "bodyText": "If you're going to do something like this, used DetachedCriteria instead of Criteria.", "bodyHTML": "<p dir=\"auto\">If you're going to do something like this, used <code>DetachedCriteria</code> instead of <code>Criteria</code>.</p>", "author": "ibacher", "createdAt": "2020-03-03T15:05:50Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -44,35 +53,93 @@ public Location getLocationByUuid(String uuid) {\n \t\treturn locationService.getLocationByUuid(uuid);\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationByName(String name) {\n-\t\treturn locationService.getLocations(name);\n+\tprivate void handleName(Criteria criteria, StringParam namePattern) {\n+\t\tif (namePattern != null) {\n+\t\t\tpropertyLike(\"name\", namePattern).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCity(String city) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"cityVillage\", city)).list();\n+\tprivate void handleCity(Criteria criteria, StringParam city) {\n+\t\tif (city != null) {\n+\t\t\tpropertyLike(\"cityVillage\", city).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCountry(String country) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"country\", country)).list();\n+\tprivate void handleCountry(Criteria criteria, StringParam country) {\n+\t\tif (country != null) {\n+\t\t\tpropertyLike(\"country\", country).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByPostalCode(String postalCode) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"postalCode\", postalCode)).list();\n+\tprivate void handlePostalCode(Criteria criteria, StringParam postalCode) {\n+\t\tif (postalCode != null) {\n+\t\t\tpropertyLike(\"postalCode\", postalCode).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleState(Criteria criteria, StringParam state) {\n+\t\tif (state != null) {\n+\t\t\tpropertyLike(\"stateProvince\", state).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleTag(Criteria criteria, TokenParam tag) {\n+\t\tif (tag != null) {\n+\t\t\tcriteria.createAlias(\"tags\", \"t\");\n+\t\t\tpropertyLike(\"t.name\", tag).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\t// handle queries of the form /Location?partof=parent_name\n+\tprivate void handleParentLocation(Criteria criteria, StringParam parent) {\n+\t\tif (parent != null) {\n+\t\t\tProjectionList projList = Projections.projectionList();\n+\t\t\tprojList.add(Projections.property(\"locationId\"));\n+\t\t\t\n+\t\t\tCriteria criteriaForParent = this.sessionFactory.getCurrentSession().createCriteria(Location.class);", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MjkwNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r387082905", "body": "Instead of this:\r\n\r\n```java\r\ncriteriaForParent.setProjection(projectionList);\r\n\r\ncriteria.add(Subqueries.in(\"parent.locationId\", criteriaForParent));\r\n```\r\n\r\nYour current implementation results in 2 db queries. This results in just one, which should be our goal.", "bodyText": "Instead of this:\ncriteriaForParent.setProjection(projectionList);\n\ncriteria.add(Subqueries.in(\"parent.locationId\", criteriaForParent));\nYour current implementation results in 2 db queries. This results in just one, which should be our goal.", "bodyHTML": "<p dir=\"auto\">Instead of this:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"criteriaForParent.setProjection(projectionList);\n\ncriteria.add(Subqueries.in(&quot;parent.locationId&quot;, criteriaForParent));\"><pre>criteriaForParent<span class=\"pl-k\">.</span>setProjection(projectionList);\n\ncriteria<span class=\"pl-k\">.</span>add(<span class=\"pl-smi\">Subqueries</span><span class=\"pl-k\">.</span>in(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>parent.locationId<span class=\"pl-pds\">\"</span></span>, criteriaForParent));</pre></div>\n<p dir=\"auto\">Your current implementation results in 2 db queries. This results in just one, which should be our goal.</p>", "author": "ibacher", "createdAt": "2020-03-03T15:07:39Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -44,35 +53,93 @@ public Location getLocationByUuid(String uuid) {\n \t\treturn locationService.getLocationByUuid(uuid);\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationByName(String name) {\n-\t\treturn locationService.getLocations(name);\n+\tprivate void handleName(Criteria criteria, StringParam namePattern) {\n+\t\tif (namePattern != null) {\n+\t\t\tpropertyLike(\"name\", namePattern).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCity(String city) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"cityVillage\", city)).list();\n+\tprivate void handleCity(Criteria criteria, StringParam city) {\n+\t\tif (city != null) {\n+\t\t\tpropertyLike(\"cityVillage\", city).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCountry(String country) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"country\", country)).list();\n+\tprivate void handleCountry(Criteria criteria, StringParam country) {\n+\t\tif (country != null) {\n+\t\t\tpropertyLike(\"country\", country).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByPostalCode(String postalCode) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"postalCode\", postalCode)).list();\n+\tprivate void handlePostalCode(Criteria criteria, StringParam postalCode) {\n+\t\tif (postalCode != null) {\n+\t\t\tpropertyLike(\"postalCode\", postalCode).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleState(Criteria criteria, StringParam state) {\n+\t\tif (state != null) {\n+\t\t\tpropertyLike(\"stateProvince\", state).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleTag(Criteria criteria, TokenParam tag) {\n+\t\tif (tag != null) {\n+\t\t\tcriteria.createAlias(\"tags\", \"t\");\n+\t\t\tpropertyLike(\"t.name\", tag).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\t// handle queries of the form /Location?partof=parent_name\n+\tprivate void handleParentLocation(Criteria criteria, StringParam parent) {\n+\t\tif (parent != null) {\n+\t\t\tProjectionList projList = Projections.projectionList();\n+\t\t\tprojList.add(Projections.property(\"locationId\"));\n+\t\t\t\n+\t\t\tCriteria criteriaForParent = this.sessionFactory.getCurrentSession().createCriteria(Location.class);\n+\t\t\tpropertyLike(\"name\", parent).ifPresent(criteriaForParent::add);\n+\t\t\t\n+\t\t\tSet<Object> possibleParentLocationIdList = new HashSet<>(criteriaForParent.setProjection(projList).list());", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4ODcxOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r389388719", "bodyText": "I was stuck on this for a while because we need to use \"Subqueries.propertyIn\" and not \"Subqueries.in\" as the test was failing repeatedly. Thanks for the hint though :)", "author": "varung-31", "createdAt": "2020-03-08T17:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MjkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MzQyNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r387083425", "body": "`private LocationService locationService`", "bodyText": "private LocationService locationService", "bodyHTML": "<p dir=\"auto\"><code>private LocationService locationService</code></p>", "author": "ibacher", "createdAt": "2020-03-03T15:08:25Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -30,7 +39,7 @@\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirLocationDaoImpl implements FhirLocationDao {\n+public class FhirLocationDaoImpl extends BaseDaoImpl implements FhirLocationDao {\n \t\n \t@Inject\n \tLocationService locationService;", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MzYxNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r387083615", "body": "As this is a `public` method, it should be near the top of the class.", "bodyText": "As this is a public method, it should be near the top of the class.", "bodyHTML": "<p dir=\"auto\">As this is a <code>public</code> method, it should be near the top of the class.</p>", "author": "ibacher", "createdAt": "2020-03-03T15:08:42Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -44,35 +53,93 @@ public Location getLocationByUuid(String uuid) {\n \t\treturn locationService.getLocationByUuid(uuid);\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationByName(String name) {\n-\t\treturn locationService.getLocations(name);\n+\tprivate void handleName(Criteria criteria, StringParam namePattern) {\n+\t\tif (namePattern != null) {\n+\t\t\tpropertyLike(\"name\", namePattern).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCity(String city) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"cityVillage\", city)).list();\n+\tprivate void handleCity(Criteria criteria, StringParam city) {\n+\t\tif (city != null) {\n+\t\t\tpropertyLike(\"cityVillage\", city).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCountry(String country) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"country\", country)).list();\n+\tprivate void handleCountry(Criteria criteria, StringParam country) {\n+\t\tif (country != null) {\n+\t\t\tpropertyLike(\"country\", country).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByPostalCode(String postalCode) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"postalCode\", postalCode)).list();\n+\tprivate void handlePostalCode(Criteria criteria, StringParam postalCode) {\n+\t\tif (postalCode != null) {\n+\t\t\tpropertyLike(\"postalCode\", postalCode).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleState(Criteria criteria, StringParam state) {\n+\t\tif (state != null) {\n+\t\t\tpropertyLike(\"stateProvince\", state).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleTag(Criteria criteria, TokenParam tag) {\n+\t\tif (tag != null) {\n+\t\t\tcriteria.createAlias(\"tags\", \"t\");\n+\t\t\tpropertyLike(\"t.name\", tag).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\t// handle queries of the form /Location?partof=parent_name\n+\tprivate void handleParentLocation(Criteria criteria, StringParam parent) {\n+\t\tif (parent != null) {\n+\t\t\tProjectionList projList = Projections.projectionList();\n+\t\t\tprojList.add(Projections.property(\"locationId\"));\n+\t\t\t\n+\t\t\tCriteria criteriaForParent = this.sessionFactory.getCurrentSession().createCriteria(Location.class);\n+\t\t\tpropertyLike(\"name\", parent).ifPresent(criteriaForParent::add);\n+\t\t\t\n+\t\t\tSet<Object> possibleParentLocationIdList = new HashSet<>(criteriaForParent.setProjection(projList).list());\n+\t\t\t\n+\t\t\tcriteria.createCriteria(\"parentLocation\").add(in(\"locationId\", possibleParentLocationIdList));\n+\t\t}\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationsByState(String state) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"stateProvince\", state)).list();\n+\tprotected String paramToProp(@NotNull String paramName) {\n+\t\tswitch (paramName) {\n+\t\t\tcase \"name\":\n+\t\t\t\treturn \"name\";\n+\t\t\tcase \"address-city\":\n+\t\t\t\treturn \"cityVillage\";\n+\t\t\tcase \"address-state\":\n+\t\t\t\treturn \"stateProvince\";\n+\t\t\tcase \"address-country\":\n+\t\t\t\treturn \"country\";\n+\t\t\tcase \"address-postalCode\":\n+\t\t\t\treturn \"postalCode\";\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationsByTag(TokenParam tag) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).createAlias(\"tags\", \"t\")\n-\t\t        .add(eq(\"t.name\", tag.getValue())).list();\n+\tpublic Collection<Location> searchForLocations(StringParam name, StringParam city, StringParam country,", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NDIxMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r387084212", "body": "These should be `StringOrListParam`s", "bodyText": "These should be StringOrListParams", "bodyHTML": "<p dir=\"auto\">These should be <code>StringOrListParam</code>s</p>", "author": "ibacher", "createdAt": "2020-03-03T15:09:37Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/LocationFhirResourceProvider.java", "diffHunk": "@@ -56,37 +58,13 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\n \t@Search\n \t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByName(@RequiredParam(name = Location.SP_NAME) StringParam name) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationByName(name.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByCity(@RequiredParam(name = Location.SP_ADDRESS_CITY) StringParam city) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByCity(city.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByCountry(@RequiredParam(name = Location.SP_ADDRESS_COUNTRY) StringParam country) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByCountry(country.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByPostalCode(@RequiredParam(name = Location.SP_ADDRESS_POSTALCODE) StringParam postalCode) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByPostalCode(postalCode.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByState(@RequiredParam(name = Location.SP_ADDRESS_STATE) StringParam state) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByState(state.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationsByTag(@RequiredParam(name = \"_tag\") TokenParam tag) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByTag(tag));\n+\tpublic Bundle searchLocations(@OptionalParam(name = Location.SP_NAME) StringParam name,", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NDY3OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r387084678", "body": "This should be a `ReferenceParam` or, better, a `ReferenceOrListParam`. Note you can add searches for additional properties as we do for `Patient` elsewhere.", "bodyText": "This should be a ReferenceParam or, better, a ReferenceOrListParam. Note you can add searches for additional properties as we do for Patient elsewhere.", "bodyHTML": "<p dir=\"auto\">This should be a <code>ReferenceParam</code> or, better, a <code>ReferenceOrListParam</code>. Note you can add searches for additional properties as we do for <code>Patient</code> elsewhere.</p>", "author": "ibacher", "createdAt": "2020-03-03T15:10:19Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/LocationFhirResourceProvider.java", "diffHunk": "@@ -56,37 +58,13 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\n \t@Search\n \t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByName(@RequiredParam(name = Location.SP_NAME) StringParam name) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationByName(name.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByCity(@RequiredParam(name = Location.SP_ADDRESS_CITY) StringParam city) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByCity(city.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByCountry(@RequiredParam(name = Location.SP_ADDRESS_COUNTRY) StringParam country) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByCountry(country.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByPostalCode(@RequiredParam(name = Location.SP_ADDRESS_POSTALCODE) StringParam postalCode) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByPostalCode(postalCode.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByState(@RequiredParam(name = Location.SP_ADDRESS_STATE) StringParam state) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByState(state.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationsByTag(@RequiredParam(name = \"_tag\") TokenParam tag) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByTag(tag));\n+\tpublic Bundle searchLocations(@OptionalParam(name = Location.SP_NAME) StringParam name,\n+\t        @OptionalParam(name = Location.SP_ADDRESS_CITY) StringParam city,\n+\t        @OptionalParam(name = Location.SP_ADDRESS_COUNTRY) StringParam country,\n+\t        @OptionalParam(name = Location.SP_ADDRESS_POSTALCODE) StringParam postalCode,\n+\t        @OptionalParam(name = Location.SP_ADDRESS_STATE) StringParam state, @OptionalParam(name = \"_tag\") TokenParam tag,\n+\t        @OptionalParam(name = Location.SP_PARTOF) StringParam parent, @Sort SortSpec sort) {", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMzg5Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r389303893", "body": "@varung-31 I would suggest you to add some more tests here to confirm that the method is working in the desired manner. For example\r\n```java\r\n\t\tassertThat(locations.iterator().next().getCityVillage(),equalTo(LOCATION_CITY));\r\n\r\n```\r\n@ibacher Please have a say on this", "bodyText": "@varung-31 I would suggest you to add some more tests here to confirm that the method is working in the desired manner. For example\n\t\tassertThat(locations.iterator().next().getCityVillage(),equalTo(LOCATION_CITY));\n\n@ibacher Please have a say on this", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/varung-31/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/varung-31\">@varung-31</a> I would suggest you to add some more tests here to confirm that the method is working in the desired manner. For example</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\t\tassertThat(locations.iterator().next().getCityVillage(),equalTo(LOCATION_CITY));\n\"><pre>\t\tassertThat(locations<span class=\"pl-k\">.</span>iterator()<span class=\"pl-k\">.</span>next()<span class=\"pl-k\">.</span>getCityVillage(),equalTo(<span class=\"pl-c1\">LOCATION_CITY</span>));\n</pre></div>\n<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ibacher/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ibacher\">@ibacher</a> Please have a say on this</p>", "author": "VaishSiddharth", "createdAt": "2020-03-07T18:54:54Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest.java", "diffHunk": "@@ -101,91 +113,140 @@ public void getLocationByUuid_shouldReturnNullWithUnknownUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByName_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(LOCATION_NAME);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(1));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByName_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(UNKNOWN_LOCATION_NAME);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(UNKNOWN_LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(LOCATION_CITY);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCity() {\n+\t\tStringParam city = new StringParam();\n+\t\tcity.setValue(LOCATION_CITY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null, null, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(locations.size(), equalTo(1));", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MDQ0NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r389350444", "bodyText": "I've noticed these in few other tests as well, shouldn't every resource item be tested to see if contains the correct value according to the search query?", "author": "CaptainDaVinci", "createdAt": "2020-03-08T09:13:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMzg5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTgzMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r389355833", "bodyText": "Yes every test should check according to query where every possible", "author": "VaishSiddharth", "createdAt": "2020-03-08T10:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMzg5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MTYzMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390281631", "bodyText": "I concur with @VaishSiddharth here and elsewhere. We should be checking that the property we're querying by is in the actual results.", "author": "ibacher", "createdAt": "2020-03-10T12:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMzg5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMzkzNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r389303935", "body": "Similarly here \r\n```java \r\n\t\tassertThat(locations.iterator().next().getCountry(),equalTo(LOCATION_COUNTRY));\r\n\r\n```", "bodyText": "Similarly here\n\t\tassertThat(locations.iterator().next().getCountry(),equalTo(LOCATION_COUNTRY));", "bodyHTML": "<p dir=\"auto\">Similarly here</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\t\tassertThat(locations.iterator().next().getCountry(),equalTo(LOCATION_COUNTRY));\n\"><pre>\t\tassertThat(locations<span class=\"pl-k\">.</span>iterator()<span class=\"pl-k\">.</span>next()<span class=\"pl-k\">.</span>getCountry(),equalTo(<span class=\"pl-c1\">LOCATION_COUNTRY</span>));\n</pre></div>", "author": "VaishSiddharth", "createdAt": "2020-03-07T18:55:40Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest.java", "diffHunk": "@@ -101,91 +113,140 @@ public void getLocationByUuid_shouldReturnNullWithUnknownUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByName_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(LOCATION_NAME);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(1));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByName_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(UNKNOWN_LOCATION_NAME);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(UNKNOWN_LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(LOCATION_CITY);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCity() {\n+\t\tStringParam city = new StringParam();\n+\t\tcity.setValue(LOCATION_CITY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null, null, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(locations.size(), equalTo(1));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(UNKNOWN_LOCATION_CITY);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n+\t\tStringParam city = new StringParam();\n+\t\tcity.setValue(UNKNOWN_LOCATION_CITY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null, null, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCountry_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCountry(LOCATION_COUNTRY);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCountry() {\n+\t\tStringParam country = new StringParam();\n+\t\tcountry.setValue(LOCATION_COUNTRY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, country, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNDAwMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r389304000", "body": "similarly here \r\n\r\n```java \r\n\t\tassertThat(locations.iterator().next().getPostalCode(),equalTo(POSTAL_CODE));\r\n\r\n```", "bodyText": "similarly here\n\t\tassertThat(locations.iterator().next().getPostalCode(),equalTo(POSTAL_CODE));", "bodyHTML": "<p dir=\"auto\">similarly here</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\t\tassertThat(locations.iterator().next().getPostalCode(),equalTo(POSTAL_CODE));\n\"><pre>\t\tassertThat(locations<span class=\"pl-k\">.</span>iterator()<span class=\"pl-k\">.</span>next()<span class=\"pl-k\">.</span>getPostalCode(),equalTo(<span class=\"pl-c1\">POSTAL_CODE</span>));\n</pre></div>", "author": "VaishSiddharth", "createdAt": "2020-03-07T18:56:24Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest.java", "diffHunk": "@@ -101,91 +113,140 @@ public void getLocationByUuid_shouldReturnNullWithUnknownUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByName_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(LOCATION_NAME);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(1));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByName_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(UNKNOWN_LOCATION_NAME);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(UNKNOWN_LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(LOCATION_CITY);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCity() {\n+\t\tStringParam city = new StringParam();\n+\t\tcity.setValue(LOCATION_CITY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null, null, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(locations.size(), equalTo(1));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(UNKNOWN_LOCATION_CITY);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n+\t\tStringParam city = new StringParam();\n+\t\tcity.setValue(UNKNOWN_LOCATION_CITY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null, null, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCountry_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCountry(LOCATION_COUNTRY);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCountry() {\n+\t\tStringParam country = new StringParam();\n+\t\tcountry.setValue(LOCATION_COUNTRY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, country, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCountry_shouldReturnEmptyCollectionWhenCalledWithUnknownCountry() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCountry(UNKNOWN_LOCATION_COUNTRY);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCountry() {\n+\t\tStringParam country = new StringParam();\n+\t\tcountry.setValue(UNKNOWN_LOCATION_COUNTRY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, country, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByPostalCode_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByPostalCode(POSTAL_CODE);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByPostalCode() {\n+\t\tStringParam postalCode = new StringParam();\n+\t\tpostalCode.setValue(POSTAL_CODE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, postalCode, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNDA4NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r389304085", "body": "Here\r\n\r\n```java \r\n\t\tassertThat(locations.iterator().next().getStateProvince(),equalTo(LOCATION_STATE));\r\n\r\n```", "bodyText": "Here\n\t\tassertThat(locations.iterator().next().getStateProvince(),equalTo(LOCATION_STATE));", "bodyHTML": "<p dir=\"auto\">Here</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\t\tassertThat(locations.iterator().next().getStateProvince(),equalTo(LOCATION_STATE));\n\"><pre>\t\tassertThat(locations<span class=\"pl-k\">.</span>iterator()<span class=\"pl-k\">.</span>next()<span class=\"pl-k\">.</span>getStateProvince(),equalTo(<span class=\"pl-c1\">LOCATION_STATE</span>));\n</pre></div>", "author": "VaishSiddharth", "createdAt": "2020-03-07T18:57:30Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest.java", "diffHunk": "@@ -101,91 +113,140 @@ public void getLocationByUuid_shouldReturnNullWithUnknownUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByName_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(LOCATION_NAME);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(1));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByName_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(UNKNOWN_LOCATION_NAME);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(UNKNOWN_LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(LOCATION_CITY);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCity() {\n+\t\tStringParam city = new StringParam();\n+\t\tcity.setValue(LOCATION_CITY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null, null, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(locations.size(), equalTo(1));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(UNKNOWN_LOCATION_CITY);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n+\t\tStringParam city = new StringParam();\n+\t\tcity.setValue(UNKNOWN_LOCATION_CITY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null, null, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCountry_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCountry(LOCATION_COUNTRY);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCountry() {\n+\t\tStringParam country = new StringParam();\n+\t\tcountry.setValue(LOCATION_COUNTRY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, country, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCountry_shouldReturnEmptyCollectionWhenCalledWithUnknownCountry() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCountry(UNKNOWN_LOCATION_COUNTRY);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCountry() {\n+\t\tStringParam country = new StringParam();\n+\t\tcountry.setValue(UNKNOWN_LOCATION_COUNTRY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, country, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByPostalCode_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByPostalCode(POSTAL_CODE);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByPostalCode() {\n+\t\tStringParam postalCode = new StringParam();\n+\t\tpostalCode.setValue(POSTAL_CODE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, postalCode, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByPostalCode_shouldReturnEmptyCollectionWhenCalledWithUnknownCode() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByPostalCode(UNKNOWN_POSTAL_CODE);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCode() {\n+\t\tStringParam postalCode = new StringParam();\n+\t\tpostalCode.setValue(UNKNOWN_POSTAL_CODE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, postalCode, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByState_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByState(LOCATION_STATE);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByState() {\n+\t\tStringParam state = new StringParam();\n+\t\tstate.setValue(LOCATION_STATE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, null, state, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(locations.size(), equalTo(2));", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNDM1Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r389304357", "body": "Here something like this might work\r\n\r\n```java \r\n\t\tassertThat(locations.iterator().next().getTags().iterator().next().getLocationTagId(),equalTo(LOCATIONT_TAG));\r\n```", "bodyText": "Here something like this might work\n\t\tassertThat(locations.iterator().next().getTags().iterator().next().getLocationTagId(),equalTo(LOCATIONT_TAG));", "bodyHTML": "<p dir=\"auto\">Here something like this might work</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\t\tassertThat(locations.iterator().next().getTags().iterator().next().getLocationTagId(),equalTo(LOCATIONT_TAG));\"><pre>\t\tassertThat(locations<span class=\"pl-k\">.</span>iterator()<span class=\"pl-k\">.</span>next()<span class=\"pl-k\">.</span>getTags()<span class=\"pl-k\">.</span>iterator()<span class=\"pl-k\">.</span>next()<span class=\"pl-k\">.</span>getLocationTagId(),equalTo(<span class=\"pl-c1\">LOCATIONT_TAG</span>));</pre></div>", "author": "VaishSiddharth", "createdAt": "2020-03-07T19:01:16Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest.java", "diffHunk": "@@ -101,91 +113,140 @@ public void getLocationByUuid_shouldReturnNullWithUnknownUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByName_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(LOCATION_NAME);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(1));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByName_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(UNKNOWN_LOCATION_NAME);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n+\t\tStringParam location = new StringParam();\n+\t\tlocation.setValue(UNKNOWN_LOCATION_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(LOCATION_CITY);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCity() {\n+\t\tStringParam city = new StringParam();\n+\t\tcity.setValue(LOCATION_CITY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null, null, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(locations.size(), equalTo(1));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(UNKNOWN_LOCATION_CITY);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n+\t\tStringParam city = new StringParam();\n+\t\tcity.setValue(UNKNOWN_LOCATION_CITY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null, null, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCountry_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCountry(LOCATION_COUNTRY);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCountry() {\n+\t\tStringParam country = new StringParam();\n+\t\tcountry.setValue(LOCATION_COUNTRY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, country, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCountry_shouldReturnEmptyCollectionWhenCalledWithUnknownCountry() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCountry(UNKNOWN_LOCATION_COUNTRY);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCountry() {\n+\t\tStringParam country = new StringParam();\n+\t\tcountry.setValue(UNKNOWN_LOCATION_COUNTRY);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, country, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByPostalCode_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByPostalCode(POSTAL_CODE);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByPostalCode() {\n+\t\tStringParam postalCode = new StringParam();\n+\t\tpostalCode.setValue(POSTAL_CODE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, postalCode, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByPostalCode_shouldReturnEmptyCollectionWhenCalledWithUnknownCode() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByPostalCode(UNKNOWN_POSTAL_CODE);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCode() {\n+\t\tStringParam postalCode = new StringParam();\n+\t\tpostalCode.setValue(UNKNOWN_POSTAL_CODE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, postalCode, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByState_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByState(LOCATION_STATE);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByState() {\n+\t\tStringParam state = new StringParam();\n+\t\tstate.setValue(LOCATION_STATE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, null, state, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(locations.size(), equalTo(2));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByState_shouldReturnEmptyCollectionWhenCalledWithUnknownState() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByState(UNKNOWN_LOCATION_STATE);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownState() {\n+\t\tStringParam state = new StringParam();\n+\t\tstate.setValue(UNKNOWN_LOCATION_STATE);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, null, state, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByTag_shouldReturnLocationsContainingGivenTag() {\n+\tpublic void searchForLocations_shouldReturnLocationsContainingGivenTag() {\n \t\tTokenParam locationTag = new TokenParam(FhirConstants.OPENMRS_FHIR_EXT_LOCATION_TAG, LOGIN_LOCATION_TAG_NAME);\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByTag(locationTag);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, null, null, locationTag, null,\n+\t\t    null);\n+\t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1Mjk1NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r389352955", "body": "You can replace the literal `\"_tag\"` by `PARAM_TAG` present in `ca.uhn.fhir.rest.api.Constants`", "bodyText": "You can replace the literal \"_tag\" by PARAM_TAG present in ca.uhn.fhir.rest.api.Constants", "bodyHTML": "<p dir=\"auto\">You can replace the literal <code>\"_tag\"</code> by <code>PARAM_TAG</code> present in <code>ca.uhn.fhir.rest.api.Constants</code></p>", "author": "CaptainDaVinci", "createdAt": "2020-03-08T09:49:10Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/LocationFhirResourceProvider.java", "diffHunk": "@@ -56,37 +58,13 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\n \t@Search\n \t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByName(@RequiredParam(name = Location.SP_NAME) StringParam name) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationByName(name.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByCity(@RequiredParam(name = Location.SP_ADDRESS_CITY) StringParam city) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByCity(city.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByCountry(@RequiredParam(name = Location.SP_ADDRESS_COUNTRY) StringParam country) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByCountry(country.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByPostalCode(@RequiredParam(name = Location.SP_ADDRESS_POSTALCODE) StringParam postalCode) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByPostalCode(postalCode.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationByState(@RequiredParam(name = Location.SP_ADDRESS_STATE) StringParam state) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByState(state.getValue()));\n-\t}\n-\t\n-\t@Search\n-\t@SuppressWarnings(\"unused\")\n-\tpublic Bundle findLocationsByTag(@RequiredParam(name = \"_tag\") TokenParam tag) {\n-\t\treturn FhirUtils.convertSearchResultsToBundle(fhirLocationService.findLocationsByTag(tag));\n+\tpublic Bundle searchLocations(@OptionalParam(name = Location.SP_NAME) StringParam name,\n+\t        @OptionalParam(name = Location.SP_ADDRESS_CITY) StringParam city,\n+\t        @OptionalParam(name = Location.SP_ADDRESS_COUNTRY) StringParam country,\n+\t        @OptionalParam(name = Location.SP_ADDRESS_POSTALCODE) StringParam postalCode,\n+\t        @OptionalParam(name = Location.SP_ADDRESS_STATE) StringParam state, @OptionalParam(name = \"_tag\") TokenParam tag,", "originalCommit": "7187751292ff0c39a9a454e7ce9564acbff0b918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c9cc6886767eda1994307473ea39527ab2208bd5", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c9cc6886767eda1994307473ea39527ab2208bd5", "message": "FM2-80: Improve Search for Location Resource", "committedDate": "2020-03-08T20:21:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI3NjU4Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390276587", "body": "I prefer to have a space before the `return` line.", "bodyText": "I prefer to have a space before the return line.", "bodyHTML": "<p dir=\"auto\">I prefer to have a space before the <code>return</code> line.</p>", "author": "ibacher", "createdAt": "2020-03-10T12:25:03Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -470,6 +474,28 @@ protected void handleLocationReference(Criteria criteria, ReferenceParam locatio\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> handleParentReference(ReferenceParam parentReference) {\n+\t\tif (parentReference != null) {\n+\t\t\tif (parentReference.getChain() != null) {\n+\t\t\t\tswitch (parentReference.getChain()) {\n+\t\t\t\t\tcase Location.SP_NAME:\n+\t\t\t\t\t\treturn propertyLike(\"name\", parentReference.getValue());\n+\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\t\treturn propertyLike(\"cityVillage\", parentReference.getValue());\n+\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n+\t\t\t\t\t\treturn propertyLike(\"stateProvince\", parentReference.getValue());\n+\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n+\t\t\t\t\t\treturn propertyLike(\"country\", parentReference.getValue());\n+\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n+\t\t\t\t\t\treturn propertyLike(\"postalCode\", parentReference.getValue());\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\treturn Optional.of(eq(\"locationId\", Integer.parseInt(parentReference.getValue())));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn Optional.empty();", "originalCommit": "c9cc6886767eda1994307473ea39527ab2208bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI3NzAxMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390277010", "body": "I'd group these with the other `handle...` calls.", "bodyText": "I'd group these with the other handle... calls.", "bodyHTML": "<p dir=\"auto\">I'd group these with the other <code>handle...</code> calls.</p>", "author": "ibacher", "createdAt": "2020-03-10T12:25:51Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -42,43 +55,97 @@ public Location getLocationByUuid(String uuid) {\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationByName(String name) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"name\", name)).list();\n+\tpublic Collection<Location> searchForLocations(StringOrListParam name, StringOrListParam city, StringOrListParam country,\n+\t        StringOrListParam postalCode, StringOrListParam state, TokenOrListParam tag, ReferenceOrListParam parent,\n+\t        SortSpec sort) {\n+\t\t\n+\t\tCriteria criteria = this.sessionFactory.getCurrentSession().createCriteria(Location.class);\n+\t\thandleBooleanProperty(\"retired\", false).ifPresent(criteria::add);", "originalCommit": "c9cc6886767eda1994307473ea39527ab2208bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI3NzUzMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390277532", "body": "`givenName` really only applies to things with a `PersonName` (OpenMRS) or `HumanName` (FHIR). This should just be called `name`, i.e., it gets called \"givenName\" to distinguish it from \"familyName\" (it makes a bit more sense in French where they're, respectively, \"pr\u00e9nom\" and \"nom\"). Very European-parochial. ", "bodyText": "givenName really only applies to things with a PersonName (OpenMRS) or HumanName (FHIR). This should just be called name, i.e., it gets called \"givenName\" to distinguish it from \"familyName\" (it makes a bit more sense in French where they're, respectively, \"pr\u00e9nom\" and \"nom\"). Very European-parochial.", "bodyHTML": "<p dir=\"auto\"><code>givenName</code> really only applies to things with a <code>PersonName</code> (OpenMRS) or <code>HumanName</code> (FHIR). This should just be called <code>name</code>, i.e., it gets called \"givenName\" to distinguish it from \"familyName\" (it makes a bit more sense in French where they're, respectively, \"pr\u00e9nom\" and \"nom\"). Very European-parochial.</p>", "author": "ibacher", "createdAt": "2020-03-10T12:26:57Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -42,43 +55,97 @@ public Location getLocationByUuid(String uuid) {\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationByName(String name) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"name\", name)).list();\n+\tpublic Collection<Location> searchForLocations(StringOrListParam name, StringOrListParam city, StringOrListParam country,\n+\t        StringOrListParam postalCode, StringOrListParam state, TokenOrListParam tag, ReferenceOrListParam parent,\n+\t        SortSpec sort) {\n+\t\t\n+\t\tCriteria criteria = this.sessionFactory.getCurrentSession().createCriteria(Location.class);\n+\t\thandleBooleanProperty(\"retired\", false).ifPresent(criteria::add);\n+\t\t\n+\t\thandleName(criteria, name);\n+\t\thandleCity(criteria, city);\n+\t\thandleCountry(criteria, country);\n+\t\thandlePostalCode(criteria, postalCode);\n+\t\thandleState(criteria, state);\n+\t\thandleTag(criteria, tag);\n+\t\thandleParentLocation(criteria, parent);\n+\t\thandleSort(criteria, sort);\n+\t\t\n+\t\treturn criteria.list();\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationsByCity(String city) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"cityVillage\", city)).list();\n+\tpublic List<LocationAttribute> getActiveAttributesByLocationAndAttributeTypeUuid(Location location,\n+\t        String locationAttributeTypeUuid) {\n+\t\treturn (List<LocationAttribute>) sessionFactory.getCurrentSession().createCriteria(LocationAttribute.class)\n+\t\t        .createAlias(\"location\", \"l\", JoinType.INNER_JOIN, eq(\"l.id\", location.getId()))\n+\t\t        .createAlias(\"attributeType\", \"lat\").add(eq(\"lat.uuid\", locationAttributeTypeUuid)).add(eq(\"voided\", false))\n+\t\t        .list();\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCountry(String country) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"country\", country)).list();\n+\tprivate void handleName(Criteria criteria, StringOrListParam namePattern) {\n+\t\tif (namePattern != null) {\n+\t\t\thandleOrListParam(namePattern, (givenName) -> propertyLike(\"name\", givenName)).ifPresent(criteria::add);", "originalCommit": "c9cc6886767eda1994307473ea39527ab2208bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI3NzgxOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390277818", "body": "Ditto on removing `given`", "bodyText": "Ditto on removing given", "bodyHTML": "<p dir=\"auto\">Ditto on removing <code>given</code></p>", "author": "ibacher", "createdAt": "2020-03-10T12:27:32Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -42,43 +55,97 @@ public Location getLocationByUuid(String uuid) {\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationByName(String name) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"name\", name)).list();\n+\tpublic Collection<Location> searchForLocations(StringOrListParam name, StringOrListParam city, StringOrListParam country,\n+\t        StringOrListParam postalCode, StringOrListParam state, TokenOrListParam tag, ReferenceOrListParam parent,\n+\t        SortSpec sort) {\n+\t\t\n+\t\tCriteria criteria = this.sessionFactory.getCurrentSession().createCriteria(Location.class);\n+\t\thandleBooleanProperty(\"retired\", false).ifPresent(criteria::add);\n+\t\t\n+\t\thandleName(criteria, name);\n+\t\thandleCity(criteria, city);\n+\t\thandleCountry(criteria, country);\n+\t\thandlePostalCode(criteria, postalCode);\n+\t\thandleState(criteria, state);\n+\t\thandleTag(criteria, tag);\n+\t\thandleParentLocation(criteria, parent);\n+\t\thandleSort(criteria, sort);\n+\t\t\n+\t\treturn criteria.list();\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationsByCity(String city) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"cityVillage\", city)).list();\n+\tpublic List<LocationAttribute> getActiveAttributesByLocationAndAttributeTypeUuid(Location location,\n+\t        String locationAttributeTypeUuid) {\n+\t\treturn (List<LocationAttribute>) sessionFactory.getCurrentSession().createCriteria(LocationAttribute.class)\n+\t\t        .createAlias(\"location\", \"l\", JoinType.INNER_JOIN, eq(\"l.id\", location.getId()))\n+\t\t        .createAlias(\"attributeType\", \"lat\").add(eq(\"lat.uuid\", locationAttributeTypeUuid)).add(eq(\"voided\", false))\n+\t\t        .list();\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCountry(String country) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"country\", country)).list();\n+\tprivate void handleName(Criteria criteria, StringOrListParam namePattern) {\n+\t\tif (namePattern != null) {\n+\t\t\thandleOrListParam(namePattern, (givenName) -> propertyLike(\"name\", givenName)).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByPostalCode(String postalCode) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"postalCode\", postalCode)).list();\n+\tprivate void handleCity(Criteria criteria, StringOrListParam city) {\n+\t\tif (city != null) {\n+\t\t\thandleOrListParam(city, (givenCity) -> propertyLike(\"cityVillage\", givenCity)).ifPresent(criteria::add);", "originalCommit": "c9cc6886767eda1994307473ea39527ab2208bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI3ODgxNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390278817", "body": "Ditto given", "bodyText": "Ditto given", "bodyHTML": "<p dir=\"auto\">Ditto given</p>", "author": "ibacher", "createdAt": "2020-03-10T12:29:44Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -42,43 +55,97 @@ public Location getLocationByUuid(String uuid) {\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationByName(String name) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"name\", name)).list();\n+\tpublic Collection<Location> searchForLocations(StringOrListParam name, StringOrListParam city, StringOrListParam country,\n+\t        StringOrListParam postalCode, StringOrListParam state, TokenOrListParam tag, ReferenceOrListParam parent,\n+\t        SortSpec sort) {\n+\t\t\n+\t\tCriteria criteria = this.sessionFactory.getCurrentSession().createCriteria(Location.class);\n+\t\thandleBooleanProperty(\"retired\", false).ifPresent(criteria::add);\n+\t\t\n+\t\thandleName(criteria, name);\n+\t\thandleCity(criteria, city);\n+\t\thandleCountry(criteria, country);\n+\t\thandlePostalCode(criteria, postalCode);\n+\t\thandleState(criteria, state);\n+\t\thandleTag(criteria, tag);\n+\t\thandleParentLocation(criteria, parent);\n+\t\thandleSort(criteria, sort);\n+\t\t\n+\t\treturn criteria.list();\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationsByCity(String city) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"cityVillage\", city)).list();\n+\tpublic List<LocationAttribute> getActiveAttributesByLocationAndAttributeTypeUuid(Location location,\n+\t        String locationAttributeTypeUuid) {\n+\t\treturn (List<LocationAttribute>) sessionFactory.getCurrentSession().createCriteria(LocationAttribute.class)\n+\t\t        .createAlias(\"location\", \"l\", JoinType.INNER_JOIN, eq(\"l.id\", location.getId()))\n+\t\t        .createAlias(\"attributeType\", \"lat\").add(eq(\"lat.uuid\", locationAttributeTypeUuid)).add(eq(\"voided\", false))\n+\t\t        .list();\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCountry(String country) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"country\", country)).list();\n+\tprivate void handleName(Criteria criteria, StringOrListParam namePattern) {\n+\t\tif (namePattern != null) {\n+\t\t\thandleOrListParam(namePattern, (givenName) -> propertyLike(\"name\", givenName)).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByPostalCode(String postalCode) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"postalCode\", postalCode)).list();\n+\tprivate void handleCity(Criteria criteria, StringOrListParam city) {\n+\t\tif (city != null) {\n+\t\t\thandleOrListParam(city, (givenCity) -> propertyLike(\"cityVillage\", givenCity)).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByState(String state) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"stateProvince\", state)).list();\n+\tprivate void handleCountry(Criteria criteria, StringOrListParam country) {\n+\t\tif (country != null) {\n+\t\t\thandleOrListParam(country, (givenCountry) -> propertyLike(\"country\", givenCountry)).ifPresent(criteria::add);", "originalCommit": "c9cc6886767eda1994307473ea39527ab2208bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI3OTAzNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390279035", "body": "Ditto given", "bodyText": "Ditto given", "bodyHTML": "<p dir=\"auto\">Ditto given</p>", "author": "ibacher", "createdAt": "2020-03-10T12:30:12Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -42,43 +55,97 @@ public Location getLocationByUuid(String uuid) {\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationByName(String name) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"name\", name)).list();\n+\tpublic Collection<Location> searchForLocations(StringOrListParam name, StringOrListParam city, StringOrListParam country,\n+\t        StringOrListParam postalCode, StringOrListParam state, TokenOrListParam tag, ReferenceOrListParam parent,\n+\t        SortSpec sort) {\n+\t\t\n+\t\tCriteria criteria = this.sessionFactory.getCurrentSession().createCriteria(Location.class);\n+\t\thandleBooleanProperty(\"retired\", false).ifPresent(criteria::add);\n+\t\t\n+\t\thandleName(criteria, name);\n+\t\thandleCity(criteria, city);\n+\t\thandleCountry(criteria, country);\n+\t\thandlePostalCode(criteria, postalCode);\n+\t\thandleState(criteria, state);\n+\t\thandleTag(criteria, tag);\n+\t\thandleParentLocation(criteria, parent);\n+\t\thandleSort(criteria, sort);\n+\t\t\n+\t\treturn criteria.list();\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationsByCity(String city) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"cityVillage\", city)).list();\n+\tpublic List<LocationAttribute> getActiveAttributesByLocationAndAttributeTypeUuid(Location location,\n+\t        String locationAttributeTypeUuid) {\n+\t\treturn (List<LocationAttribute>) sessionFactory.getCurrentSession().createCriteria(LocationAttribute.class)\n+\t\t        .createAlias(\"location\", \"l\", JoinType.INNER_JOIN, eq(\"l.id\", location.getId()))\n+\t\t        .createAlias(\"attributeType\", \"lat\").add(eq(\"lat.uuid\", locationAttributeTypeUuid)).add(eq(\"voided\", false))\n+\t\t        .list();\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCountry(String country) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"country\", country)).list();\n+\tprivate void handleName(Criteria criteria, StringOrListParam namePattern) {\n+\t\tif (namePattern != null) {\n+\t\t\thandleOrListParam(namePattern, (givenName) -> propertyLike(\"name\", givenName)).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByPostalCode(String postalCode) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"postalCode\", postalCode)).list();\n+\tprivate void handleCity(Criteria criteria, StringOrListParam city) {\n+\t\tif (city != null) {\n+\t\t\thandleOrListParam(city, (givenCity) -> propertyLike(\"cityVillage\", givenCity)).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByState(String state) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"stateProvince\", state)).list();\n+\tprivate void handleCountry(Criteria criteria, StringOrListParam country) {\n+\t\tif (country != null) {\n+\t\t\thandleOrListParam(country, (givenCountry) -> propertyLike(\"country\", givenCountry)).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByTag(TokenParam tag) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).createAlias(\"tags\", \"t\")\n-\t\t        .add(eq(\"t.name\", tag.getValue())).list();\n+\tprivate void handlePostalCode(Criteria criteria, StringOrListParam postalCode) {\n+\t\tif (postalCode != null) {\n+\t\t\thandleOrListParam(postalCode, (givenPostalCode) -> propertyLike(\"postalCode\", givenPostalCode))\n+\t\t\t        .ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleState(Criteria criteria, StringOrListParam state) {\n+\t\tif (state != null) {\n+\t\t\thandleOrListParam(state, (givenState) -> propertyLike(\"stateProvince\", givenState)).ifPresent(criteria::add);", "originalCommit": "c9cc6886767eda1994307473ea39527ab2208bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI3OTIyMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390279223", "body": "The `tag` parameter should be called `tags`", "bodyText": "The tag parameter should be called tags", "bodyHTML": "<p dir=\"auto\">The <code>tag</code> parameter should be called <code>tags</code></p>", "author": "ibacher", "createdAt": "2020-03-10T12:30:38Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -42,43 +55,97 @@ public Location getLocationByUuid(String uuid) {\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationByName(String name) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"name\", name)).list();\n+\tpublic Collection<Location> searchForLocations(StringOrListParam name, StringOrListParam city, StringOrListParam country,\n+\t        StringOrListParam postalCode, StringOrListParam state, TokenOrListParam tag, ReferenceOrListParam parent,\n+\t        SortSpec sort) {\n+\t\t\n+\t\tCriteria criteria = this.sessionFactory.getCurrentSession().createCriteria(Location.class);\n+\t\thandleBooleanProperty(\"retired\", false).ifPresent(criteria::add);\n+\t\t\n+\t\thandleName(criteria, name);\n+\t\thandleCity(criteria, city);\n+\t\thandleCountry(criteria, country);\n+\t\thandlePostalCode(criteria, postalCode);\n+\t\thandleState(criteria, state);\n+\t\thandleTag(criteria, tag);\n+\t\thandleParentLocation(criteria, parent);\n+\t\thandleSort(criteria, sort);\n+\t\t\n+\t\treturn criteria.list();\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationsByCity(String city) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"cityVillage\", city)).list();\n+\tpublic List<LocationAttribute> getActiveAttributesByLocationAndAttributeTypeUuid(Location location,\n+\t        String locationAttributeTypeUuid) {\n+\t\treturn (List<LocationAttribute>) sessionFactory.getCurrentSession().createCriteria(LocationAttribute.class)\n+\t\t        .createAlias(\"location\", \"l\", JoinType.INNER_JOIN, eq(\"l.id\", location.getId()))\n+\t\t        .createAlias(\"attributeType\", \"lat\").add(eq(\"lat.uuid\", locationAttributeTypeUuid)).add(eq(\"voided\", false))\n+\t\t        .list();\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCountry(String country) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"country\", country)).list();\n+\tprivate void handleName(Criteria criteria, StringOrListParam namePattern) {\n+\t\tif (namePattern != null) {\n+\t\t\thandleOrListParam(namePattern, (givenName) -> propertyLike(\"name\", givenName)).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByPostalCode(String postalCode) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"postalCode\", postalCode)).list();\n+\tprivate void handleCity(Criteria criteria, StringOrListParam city) {\n+\t\tif (city != null) {\n+\t\t\thandleOrListParam(city, (givenCity) -> propertyLike(\"cityVillage\", givenCity)).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByState(String state) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"stateProvince\", state)).list();\n+\tprivate void handleCountry(Criteria criteria, StringOrListParam country) {\n+\t\tif (country != null) {\n+\t\t\thandleOrListParam(country, (givenCountry) -> propertyLike(\"country\", givenCountry)).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByTag(TokenParam tag) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).createAlias(\"tags\", \"t\")\n-\t\t        .add(eq(\"t.name\", tag.getValue())).list();\n+\tprivate void handlePostalCode(Criteria criteria, StringOrListParam postalCode) {\n+\t\tif (postalCode != null) {\n+\t\t\thandleOrListParam(postalCode, (givenPostalCode) -> propertyLike(\"postalCode\", givenPostalCode))\n+\t\t\t        .ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleState(Criteria criteria, StringOrListParam state) {\n+\t\tif (state != null) {\n+\t\t\thandleOrListParam(state, (givenState) -> propertyLike(\"stateProvince\", givenState)).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleTag(Criteria criteria, TokenOrListParam tag) {", "originalCommit": "c9cc6886767eda1994307473ea39527ab2208bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI3OTQyNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390279427", "body": "Ditto given.", "bodyText": "Ditto given.", "bodyHTML": "<p dir=\"auto\">Ditto given.</p>", "author": "ibacher", "createdAt": "2020-03-10T12:31:01Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImpl.java", "diffHunk": "@@ -42,43 +55,97 @@ public Location getLocationByUuid(String uuid) {\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationByName(String name) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"name\", name)).list();\n+\tpublic Collection<Location> searchForLocations(StringOrListParam name, StringOrListParam city, StringOrListParam country,\n+\t        StringOrListParam postalCode, StringOrListParam state, TokenOrListParam tag, ReferenceOrListParam parent,\n+\t        SortSpec sort) {\n+\t\t\n+\t\tCriteria criteria = this.sessionFactory.getCurrentSession().createCriteria(Location.class);\n+\t\thandleBooleanProperty(\"retired\", false).ifPresent(criteria::add);\n+\t\t\n+\t\thandleName(criteria, name);\n+\t\thandleCity(criteria, city);\n+\t\thandleCountry(criteria, country);\n+\t\thandlePostalCode(criteria, postalCode);\n+\t\thandleState(criteria, state);\n+\t\thandleTag(criteria, tag);\n+\t\thandleParentLocation(criteria, parent);\n+\t\thandleSort(criteria, sort);\n+\t\t\n+\t\treturn criteria.list();\n \t}\n \t\n \t@Override\n-\tpublic Collection<Location> findLocationsByCity(String city) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"cityVillage\", city)).list();\n+\tpublic List<LocationAttribute> getActiveAttributesByLocationAndAttributeTypeUuid(Location location,\n+\t        String locationAttributeTypeUuid) {\n+\t\treturn (List<LocationAttribute>) sessionFactory.getCurrentSession().createCriteria(LocationAttribute.class)\n+\t\t        .createAlias(\"location\", \"l\", JoinType.INNER_JOIN, eq(\"l.id\", location.getId()))\n+\t\t        .createAlias(\"attributeType\", \"lat\").add(eq(\"lat.uuid\", locationAttributeTypeUuid)).add(eq(\"voided\", false))\n+\t\t        .list();\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByCountry(String country) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"country\", country)).list();\n+\tprivate void handleName(Criteria criteria, StringOrListParam namePattern) {\n+\t\tif (namePattern != null) {\n+\t\t\thandleOrListParam(namePattern, (givenName) -> propertyLike(\"name\", givenName)).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByPostalCode(String postalCode) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"postalCode\", postalCode)).list();\n+\tprivate void handleCity(Criteria criteria, StringOrListParam city) {\n+\t\tif (city != null) {\n+\t\t\thandleOrListParam(city, (givenCity) -> propertyLike(\"cityVillage\", givenCity)).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByState(String state) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).add(eq(\"stateProvince\", state)).list();\n+\tprivate void handleCountry(Criteria criteria, StringOrListParam country) {\n+\t\tif (country != null) {\n+\t\t\thandleOrListParam(country, (givenCountry) -> propertyLike(\"country\", givenCountry)).ifPresent(criteria::add);\n+\t\t}\n \t}\n \t\n-\t@Override\n-\tpublic Collection<Location> findLocationsByTag(TokenParam tag) {\n-\t\treturn sessionFactory.getCurrentSession().createCriteria(Location.class).createAlias(\"tags\", \"t\")\n-\t\t        .add(eq(\"t.name\", tag.getValue())).list();\n+\tprivate void handlePostalCode(Criteria criteria, StringOrListParam postalCode) {\n+\t\tif (postalCode != null) {\n+\t\t\thandleOrListParam(postalCode, (givenPostalCode) -> propertyLike(\"postalCode\", givenPostalCode))\n+\t\t\t        .ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleState(Criteria criteria, StringOrListParam state) {\n+\t\tif (state != null) {\n+\t\t\thandleOrListParam(state, (givenState) -> propertyLike(\"stateProvince\", givenState)).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleTag(Criteria criteria, TokenOrListParam tag) {\n+\t\tif (tag != null) {\n+\t\t\tcriteria.createAlias(\"tags\", \"t\");\n+\t\t\thandleOrListParam(tag, (givenTag) -> Optional.of(eq(\"t.name\", givenTag.getValue()))).ifPresent(criteria::add);", "originalCommit": "c9cc6886767eda1994307473ea39527ab2208bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MDE5NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390280195", "body": "Why is this here instead of in the `LocationDaoImpl`? Unlike other reference handlers, this is pretty specific to `Location`s.", "bodyText": "Why is this here instead of in the LocationDaoImpl? Unlike other reference handlers, this is pretty specific to Locations.", "bodyHTML": "<p dir=\"auto\">Why is this here instead of in the <code>LocationDaoImpl</code>? Unlike other reference handlers, this is pretty specific to <code>Location</code>s.</p>", "author": "ibacher", "createdAt": "2020-03-10T12:32:38Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -470,6 +474,28 @@ protected void handleLocationReference(Criteria criteria, ReferenceParam locatio\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> handleParentReference(ReferenceParam parentReference) {", "originalCommit": "c9cc6886767eda1994307473ea39527ab2208bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MDg0OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390280849", "body": "We shouldn't expect a `locationId` passed in here. We should expect a `uuid` for the location instead. Generally speaking, except for the special case of concepts, we should only be dealing with UUIDs (concepts are special for historical reasons).", "bodyText": "We shouldn't expect a locationId passed in here. We should expect a uuid for the location instead. Generally speaking, except for the special case of concepts, we should only be dealing with UUIDs (concepts are special for historical reasons).", "bodyHTML": "<p dir=\"auto\">We shouldn't expect a <code>locationId</code> passed in here. We should expect a <code>uuid</code> for the location instead. Generally speaking, except for the special case of concepts, we should only be dealing with UUIDs (concepts are special for historical reasons).</p>", "author": "ibacher", "createdAt": "2020-03-10T12:33:57Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -470,6 +474,28 @@ protected void handleLocationReference(Criteria criteria, ReferenceParam locatio\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> handleParentReference(ReferenceParam parentReference) {\n+\t\tif (parentReference != null) {\n+\t\t\tif (parentReference.getChain() != null) {\n+\t\t\t\tswitch (parentReference.getChain()) {\n+\t\t\t\t\tcase Location.SP_NAME:\n+\t\t\t\t\t\treturn propertyLike(\"name\", parentReference.getValue());\n+\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\t\treturn propertyLike(\"cityVillage\", parentReference.getValue());\n+\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n+\t\t\t\t\t\treturn propertyLike(\"stateProvince\", parentReference.getValue());\n+\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n+\t\t\t\t\t\treturn propertyLike(\"country\", parentReference.getValue());\n+\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n+\t\t\t\t\t\treturn propertyLike(\"postalCode\", parentReference.getValue());\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\treturn Optional.of(eq(\"locationId\", Integer.parseInt(parentReference.getValue())));", "originalCommit": "c9cc6886767eda1994307473ea39527ab2208bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4Mjc0Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390282746", "body": "I wouldn't import this statically for consistency with the other parameters.", "bodyText": "I wouldn't import this statically for consistency with the other parameters.", "bodyHTML": "<p dir=\"auto\">I wouldn't import this statically for consistency with the other parameters.</p>", "author": "ibacher", "createdAt": "2020-03-10T12:37:50Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/LocationFhirResourceProvider.java", "diffHunk": "@@ -9,18 +9,23 @@\n  */\n package org.openmrs.module.fhir2.providers;\n \n+import static ca.uhn.fhir.rest.api.Constants.PARAM_TAG;", "originalCommit": "c9cc6886767eda1994307473ea39527ab2208bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MzE3OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390283178", "body": "We actually do want most of these tests, even if they need to be modified.", "bodyText": "We actually do want most of these tests, even if they need to be modified.", "bodyHTML": "<p dir=\"auto\">We actually do want most of these tests, even if they need to be modified.</p>", "author": "ibacher", "createdAt": "2020-03-10T12:38:45Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/LocationFhirResourceProviderTest.java", "diffHunk": "@@ -129,124 +121,22 @@ public void getLocationWithWrongUuid_shouldThrowResourceNotFoundException() {\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByName_shouldReturnMatchingBundleOfLocations() {", "originalCommit": "c9cc6886767eda1994307473ea39527ab2208bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5ecbc70d13f872e7817bbfca3942c8a836eb221d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5ecbc70d13f872e7817bbfca3942c8a836eb221d", "message": "FM2-80: Improve Search for Location Resource", "committedDate": "2020-03-10T17:42:41Z", "type": "forcePushed"}, {"oid": "1c598b44593fe4dda5d2d6dec43a3b4fa22c73c0", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/1c598b44593fe4dda5d2d6dec43a3b4fa22c73c0", "message": "FM2-80: Improve Search for Location Resource", "committedDate": "2020-03-10T17:47:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0NjU5OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390546599", "body": "Don't include this in this PR", "bodyText": "Don't include this in this PR", "bodyHTML": "<p dir=\"auto\">Don't include this in this PR</p>", "author": "ibacher", "createdAt": "2020-03-10T19:05:47Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirTaskDaoImpl.java", "diffHunk": "@@ -78,7 +78,8 @@ public FhirTask getTaskByUuid(String uuid) {\n \t\t// TODO: Handle optional params\n \t\t// Task.basedOn\n \t\tif (validReferenceParam(basedOnReference)) {\n-\t\t\tcriteria.createAlias(\"basedOnReferences\", \"bo\").add(Restrictions.eq(\"bo.reference\", basedOnReference.getIdPart()))", "originalCommit": "1c598b44593fe4dda5d2d6dec43a3b4fa22c73c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTExODQyMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r391118420", "bodyText": "I really don't know how it came here!", "author": "varung-31", "createdAt": "2020-03-11T16:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0NjU5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1MDY0Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r390550647", "body": "This should actually be `.setValue(...).setChain(...)` and so on for the others. The reason is that the `.setValue()` method resets the value of the chain. This will probably fix the coverage.", "bodyText": "This should actually be .setValue(...).setChain(...) and so on for the others. The reason is that the .setValue() method resets the value of the chain. This will probably fix the coverage.", "bodyHTML": "<p dir=\"auto\">This should actually be <code>.setValue(...).setChain(...)</code> and so on for the others. The reason is that the <code>.setValue()</code> method resets the value of the chain. This will probably fix the coverage.</p>", "author": "ibacher", "createdAt": "2020-03-10T19:12:40Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest.java", "diffHunk": "@@ -95,91 +118,201 @@ public void getLocationByUuid_shouldReturnNullWithUnknownUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByName_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(LOCATION_NAME);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByName() {\n+\t\tStringOrListParam location = new StringOrListParam().add(new StringParam(LOCATION_NAME));\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(1));\n+\t\tassertThat(locations.iterator().next().getName(), equalTo(LOCATION_NAME));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByName_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationByName(UNKNOWN_LOCATION_NAME);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownName() {\n+\t\tStringOrListParam location = new StringOrListParam().add(new StringParam(UNKNOWN_LOCATION_NAME));\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(location, null, null, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(LOCATION_CITY);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCity() {\n+\t\tStringOrListParam city = new StringOrListParam().add(new StringParam(LOCATION_CITY));\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null, null, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(locations.size(), equalTo(1));\n+\t\tassertThat(locations.iterator().next().getCityVillage(), equalTo(LOCATION_CITY));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCity_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCity(UNKNOWN_LOCATION_CITY);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCity() {\n+\t\tStringOrListParam city = new StringOrListParam().add(new StringParam(UNKNOWN_LOCATION_CITY));\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, city, null, null, null, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCountry_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCountry(LOCATION_COUNTRY);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByCountry() {\n+\t\tStringOrListParam country = new StringOrListParam().add(new StringParam(LOCATION_COUNTRY));\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, country, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));\n+\t\tassertThat(locations.iterator().next().getCountry(), equalTo(LOCATION_COUNTRY));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationByCountry_shouldReturnEmptyCollectionWhenCalledWithUnknownCountry() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByCountry(UNKNOWN_LOCATION_COUNTRY);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCountry() {\n+\t\tStringOrListParam country = new StringOrListParam().add(new StringParam(UNKNOWN_LOCATION_COUNTRY));\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, country, null, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByPostalCode_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByPostalCode(POSTAL_CODE);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByPostalCode() {\n+\t\tStringOrListParam postalCode = new StringOrListParam().add(new StringParam(POSTAL_CODE));\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, postalCode, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(2));\n+\t\tassertThat(locations.iterator().next().getPostalCode(), equalTo(POSTAL_CODE));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByPostalCode_shouldReturnEmptyCollectionWhenCalledWithUnknownCode() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByPostalCode(UNKNOWN_POSTAL_CODE);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownCode() {\n+\t\tStringOrListParam postalCode = new StringOrListParam().add(new StringParam(UNKNOWN_POSTAL_CODE));\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, postalCode, null, null, null,\n+\t\t    null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByState_shouldReturnCorrectLocation() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByState(LOCATION_STATE);\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByState() {\n+\t\tStringOrListParam state = new StringOrListParam().add(new StringParam(LOCATION_STATE));\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, null, state, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(locations.size(), equalTo(2));\n+\t\tassertThat(locations.iterator().next().getStateProvince(), equalTo(LOCATION_STATE));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByState_shouldReturnEmptyCollectionWhenCalledWithUnknownState() {\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByState(UNKNOWN_LOCATION_STATE);\n+\tpublic void searchForLocations_shouldReturnEmptyCollectionWhenCalledWithUnknownState() {\n+\t\tStringOrListParam state = new StringOrListParam().add(new StringParam(UNKNOWN_LOCATION_STATE));\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, null, state, null, null, null);\n \t\t\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n \t\n \t@Test\n-\tpublic void findLocationsByTag_shouldReturnLocationsContainingGivenTag() {\n-\t\tTokenParam locationTag = new TokenParam(FhirConstants.OPENMRS_FHIR_EXT_LOCATION_TAG, LOGIN_LOCATION_TAG_NAME);\n-\t\tCollection<Location> locations = fhirLocationDao.findLocationsByTag(locationTag);\n+\tpublic void searchForLocations_shouldReturnLocationsContainingGivenTag() {\n+\t\tTokenOrListParam locationTag = new TokenOrListParam(FhirConstants.OPENMRS_FHIR_EXT_LOCATION_TAG,\n+\t\t        LOGIN_LOCATION_TAG_NAME);\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, null, null, locationTag, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(locations, notNullValue());\n+\t\tassertThat(locations.size(), equalTo(2));\n+\t\tassertThat(locations.iterator().next().getTags().iterator().next().getName(), equalTo(LOGIN_LOCATION_TAG_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByParentUUID() {\n+\t\tReferenceOrListParam parentLocation = new ReferenceOrListParam()\n+\t\t        .add(new ReferenceParam().setChain(\"\").setValue(LOCATION_PARENT_ID));\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, null, null, null,\n+\t\t    parentLocation, null);\n+\t\t\n \t\tassertThat(locations, notNullValue());\n-\t\tassertThat(locations.size(), greaterThanOrEqualTo(2));\n+\t\tassertThat(locations.size(), equalTo(1));\n+\t\tassertThat(locations.iterator().next().getParentLocation().getUuid(), equalTo(LOCATION_PARENT_ID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByParentName() {\n+\t\tReferenceOrListParam parentLocation = new ReferenceOrListParam()\n+\t\t        .add(new ReferenceParam().setChain(\"name\").setValue(LOCATION_PARENT_NAME));", "originalCommit": "1c598b44593fe4dda5d2d6dec43a3b4fa22c73c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzODYwNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r391138607", "bodyText": "This did fix the coverage! Thanks.", "author": "varung-31", "createdAt": "2020-03-11T17:25:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1MDY0Nw=="}], "type": "inlineReview"}, {"oid": "f80ae72b9a1a59df5ef632b162b2727332acc8b6", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f80ae72b9a1a59df5ef632b162b2727332acc8b6", "message": "FM2-80: Improve Search for Location Resource", "committedDate": "2020-03-11T17:06:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNjk1Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r391136953", "body": "`address-postalcode`", "bodyText": "address-postalcode", "bodyHTML": "<p dir=\"auto\"><code>address-postalcode</code></p>", "author": "ibacher", "createdAt": "2020-03-11T17:22:59Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest.java", "diffHunk": "@@ -192,4 +325,140 @@ public void getActiveAttributesByLocationAndAttributeTypeUuid_shouldReturnLocati\n \t\t\n \t\tassertThat(attributeList, notNullValue());\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForLocations_shouldSortLocationsByNameAsRequested() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"name\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Location> resultsList = new ArrayList<>(getNonNullLocationListForSorting(sort));\n+\t\t// check if the sorting is indeed correct by ascending order\n+\t\tfor (int i = 1; i < resultsList.size(); i++) {\n+\t\t\tassertThat(resultsList.get(i - 1).getName(), lessThanOrEqualTo(resultsList.get(i).getName()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tresultsList = new ArrayList<>(getNonNullLocationListForSorting(sort));\n+\t\t// check if the sorting is indeed correct by descending order\n+\t\tfor (int i = 1; i < resultsList.size(); i++) {\n+\t\t\tassertThat(resultsList.get(i - 1).getName(), greaterThanOrEqualTo(resultsList.get(i).getName()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForLocations_shouldSortLocationsByCountryAsRequested() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"address-country\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Location> resultsList = new ArrayList<>(getNonNullLocationListForSorting(sort));\n+\t\t// check if the sorting is indeed correct by ascending order\n+\t\tfor (int i = 1; i < resultsList.size(); i++) {\n+\t\t\tassertThat(resultsList.get(i - 1).getCountry(), lessThanOrEqualTo(resultsList.get(i).getCountry()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tresultsList = new ArrayList<>(getNonNullLocationListForSorting(sort));\n+\t\t// check if the sorting is indeed correct by descending order\n+\t\tfor (int i = 1; i < resultsList.size(); i++) {\n+\t\t\tassertThat(resultsList.get(i - 1).getCountry(), greaterThanOrEqualTo(resultsList.get(i).getCountry()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForLocations_shouldSortLocationsByStateAsRequested() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"address-state\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Location> resultsList = new ArrayList<>(getNonNullLocationListForSorting(sort));\n+\t\t// check if the sorting is indeed correct by ascending order\n+\t\tfor (int i = 1; i < resultsList.size(); i++) {\n+\t\t\tassertThat(resultsList.get(i - 1).getStateProvince(), lessThanOrEqualTo(resultsList.get(i).getStateProvince()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tresultsList = new ArrayList<>(getNonNullLocationListForSorting(sort));\n+\t\t// check if the sorting is indeed correct by descending order\n+\t\tfor (int i = 1; i < resultsList.size(); i++) {\n+\t\t\tassertThat(resultsList.get(i - 1).getStateProvince(),\n+\t\t\t    greaterThanOrEqualTo(resultsList.get(i).getStateProvince()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForLocations_shouldSortLocationsByPostalCodeAsRequested() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"address-postalCode\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Location> resultsList = new ArrayList<>(getNonNullLocationListForSorting(sort));\n+\t\t// check if the sorting is indeed correct by ascending order\n+\t\tfor (int i = 1; i < resultsList.size(); i++) {\n+\t\t\tassertThat(resultsList.get(i - 1).getPostalCode(), lessThanOrEqualTo(resultsList.get(i).getPostalCode()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tresultsList = new ArrayList<>(getNonNullLocationListForSorting(sort));\n+\t\t// check if the sorting is indeed correct by descending order\n+\t\tfor (int i = 1; i < resultsList.size(); i++) {\n+\t\t\tassertThat(resultsList.get(i - 1).getPostalCode(), greaterThanOrEqualTo(resultsList.get(i).getPostalCode()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForLocations_shouldSortLocationsByCityAsRequested() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"address-city\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Location> resultsList = new ArrayList<>(getNonNullLocationListForSorting(sort));\n+\t\t// check if the sorting is indeed correct by ascending order\n+\t\tfor (int i = 1; i < resultsList.size(); i++) {\n+\t\t\tassertThat(resultsList.get(i - 1).getCityVillage(), lessThanOrEqualTo(resultsList.get(i).getCityVillage()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tresultsList = new ArrayList<>(getNonNullLocationListForSorting(sort));\n+\t\t// check if the sorting is indeed correct by descending order\n+\t\tfor (int i = 1; i < resultsList.size(); i++) {\n+\t\t\tassertThat(resultsList.get(i - 1).getCityVillage(), greaterThanOrEqualTo(resultsList.get(i).getCityVillage()));\n+\t\t}\n+\t}\n+\t\n+\tprivate List<Location> getNonNullLocationListForSorting(SortSpec sort) {\n+\t\tCollection<Location> locations = fhirLocationDao.searchForLocations(null, null, null, null, null, null, null, sort);\n+\t\t\n+\t\tassertThat(locations, notNullValue());\n+\t\tassertThat(locations, not(empty()));\n+\t\tassertThat(locations.size(), greaterThan(1));\n+\t\t\n+\t\tList<Location> locationList = new ArrayList<>(locations);\n+\t\t// Remove people with sort parameter value null, to allow comparison while asserting.\n+\t\tswitch (sort.getParamName()) {\n+\t\t\tcase \"name\":\n+\t\t\t\tlocationList.removeIf(p -> p.getName() == null);\n+\t\t\t\tbreak;\n+\t\t\tcase \"address-city\":\n+\t\t\t\tlocationList.removeIf(p -> p.getCityVillage() == null);\n+\t\t\t\tbreak;\n+\t\t\tcase \"address-state\":\n+\t\t\t\tlocationList.removeIf(p -> p.getStateProvince() == null);\n+\t\t\t\tbreak;\n+\t\t\tcase \"address-postalCode\":", "originalCommit": "f80ae72b9a1a59df5ef632b162b2727332acc8b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzOTA5Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/98#discussion_r391139097", "bodyText": "Yeah I noticed that because of the coverage :P", "author": "varung-31", "createdAt": "2020-03-11T17:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNjk1Mw=="}], "type": "inlineReview"}, {"oid": "796b9fdc9709203d335192e646813b04f529ec40", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/796b9fdc9709203d335192e646813b04f529ec40", "message": "FM2-80: Improve Search for Location Resource", "committedDate": "2020-03-11T17:23:15Z", "type": "commit"}, {"oid": "796b9fdc9709203d335192e646813b04f529ec40", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/796b9fdc9709203d335192e646813b04f529ec40", "message": "FM2-80: Improve Search for Location Resource", "committedDate": "2020-03-11T17:23:15Z", "type": "forcePushed"}]}