{"pr_number": 299, "pr_title": "FM2-305: Create Integration Tests for Practitioner.", "pr_author": "Akayeshmantha", "pr_createdAt": "2020-09-06T16:53:14Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/299", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4MDg1Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/299#discussion_r484480853", "body": "```suggestion\r\n\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n          \n          \n            \n            \t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tresponse <span class=\"pl-k\">=</span> put(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/Practitioner/<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">WRONG_PRACTITIONER_UUID</span>)<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">jsonContent(toJson</span>(practitioner))<span class=\"pl-k\">.</span>go();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tresponse <span class=\"pl-k\">=</span> put(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/Practitioner/<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">WRONG_PRACTITIONER_UUID</span>)<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">xmlContext(toXML</span>(practitioner))<span class=\"pl-k\">.</span>go();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "varung-31", "createdAt": "2020-09-07T14:59:31Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PractitionerFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Practitioner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PractitionerFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<org.openmrs.module.fhir2.providers.r3.PractitionerFhirResourceProvider, org.hl7.fhir.dstu3.model.Practitioner> {\n+\t\n+\tprivate static final String PRACTITIONER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirPractitionerDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.xml\";\n+\t\n+\tprivate static final String PRACTITIONER_UUID = \"f9badd80-ab76-11e2-9e96-0800200c9a66\";\n+\t\n+\tprivate static final String WRONG_PRACTITIONER_UUID = \"f8bc0122-21db-4e91-a5d3-92ae01cafe92\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PractitionerFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(PRACTITIONER_INITIAL_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.JSON).jsonContent(jsonPractitioner)\n+\t\t        .go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.XML).xmlContext(xmlPractitioner).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(updatedPractitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();", "originalCommit": "cbbd390d867c8bf4e40cf56dac2801302a390e7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0NDQ2NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/299#discussion_r484544465", "bodyText": "oh bad mistakes \ud83d\udc4d", "author": "Akayeshmantha", "createdAt": "2020-09-07T18:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4MDg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4MDk3MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/299#discussion_r484480970", "body": "```suggestion\r\n\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n          \n          \n            \n            \t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThat(response<span class=\"pl-k\">.</span>getContentType(), is(<span class=\"pl-smi\">FhirMediaTypes</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">JSON</span></span><span class=\"pl-k\">.</span>toString()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThat(response<span class=\"pl-k\">.</span>getContentType(), is(<span class=\"pl-smi\">FhirMediaTypes</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">XML</span></span><span class=\"pl-k\">.</span>toString()));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "varung-31", "createdAt": "2020-09-07T14:59:46Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PractitionerFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Practitioner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PractitionerFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<org.openmrs.module.fhir2.providers.r3.PractitionerFhirResourceProvider, org.hl7.fhir.dstu3.model.Practitioner> {\n+\t\n+\tprivate static final String PRACTITIONER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirPractitionerDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.xml\";\n+\t\n+\tprivate static final String PRACTITIONER_UUID = \"f9badd80-ab76-11e2-9e96-0800200c9a66\";\n+\t\n+\tprivate static final String WRONG_PRACTITIONER_UUID = \"f8bc0122-21db-4e91-a5d3-92ae01cafe92\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PractitionerFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(PRACTITIONER_INITIAL_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.JSON).jsonContent(jsonPractitioner)\n+\t\t        .go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.XML).xmlContext(xmlPractitioner).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(updatedPractitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));", "originalCommit": "cbbd390d867c8bf4e40cf56dac2801302a390e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4MjI4MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/299#discussion_r484482281", "body": "Can we use some other search parameter such that we get multiple entries in the search results? With this, we are not able to justify if sorting works correctly as search returns just 1 result.", "bodyText": "Can we use some other search parameter such that we get multiple entries in the search results? With this, we are not able to justify if sorting works correctly as search returns just 1 result.", "bodyHTML": "<p dir=\"auto\">Can we use some other search parameter such that we get multiple entries in the search results? With this, we are not able to justify if sorting works correctly as search returns just 1 result.</p>", "author": "varung-31", "createdAt": "2020-09-07T15:02:42Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PractitionerFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Practitioner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PractitionerFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<org.openmrs.module.fhir2.providers.r3.PractitionerFhirResourceProvider, org.hl7.fhir.dstu3.model.Practitioner> {\n+\t\n+\tprivate static final String PRACTITIONER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirPractitionerDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.xml\";\n+\t\n+\tprivate static final String PRACTITIONER_UUID = \"f9badd80-ab76-11e2-9e96-0800200c9a66\";\n+\t\n+\tprivate static final String WRONG_PRACTITIONER_UUID = \"f8bc0122-21db-4e91-a5d3-92ae01cafe92\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PractitionerFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(PRACTITIONER_INITIAL_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.JSON).jsonContent(jsonPractitioner)\n+\t\t        .go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.XML).xmlContext(xmlPractitioner).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(updatedPractitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingPractitioner() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, statusEquals(HttpStatus.GONE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenDeletingNonExistentPractitioner() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPractitionersAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/Practitioner/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Practitioner.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPractitionersAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner?family=Doe&_sort=given\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"family\", startsWith(\"Doe\"))))));\n+\t\tassertThat(entries, containsInRelativeOrder(", "originalCommit": "cbbd390d867c8bf4e40cf56dac2801302a390e7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0ODg4MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/299#discussion_r486248880", "bodyText": "Hi @varung-31  sort was not implemented, in-service class. Removing sort tests.", "author": "Akayeshmantha", "createdAt": "2020-09-10T11:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4MjI4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4MjYyMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/299#discussion_r484482620", "body": "Ditto", "bodyText": "Ditto", "bodyHTML": "<p dir=\"auto\">Ditto</p>", "author": "varung-31", "createdAt": "2020-09-07T15:03:26Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PractitionerFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Practitioner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PractitionerFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<org.openmrs.module.fhir2.providers.r3.PractitionerFhirResourceProvider, org.hl7.fhir.dstu3.model.Practitioner> {\n+\t\n+\tprivate static final String PRACTITIONER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirPractitionerDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.xml\";\n+\t\n+\tprivate static final String PRACTITIONER_UUID = \"f9badd80-ab76-11e2-9e96-0800200c9a66\";\n+\t\n+\tprivate static final String WRONG_PRACTITIONER_UUID = \"f8bc0122-21db-4e91-a5d3-92ae01cafe92\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PractitionerFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(PRACTITIONER_INITIAL_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.JSON).jsonContent(jsonPractitioner)\n+\t\t        .go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.XML).xmlContext(xmlPractitioner).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(updatedPractitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingPractitioner() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, statusEquals(HttpStatus.GONE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenDeletingNonExistentPractitioner() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPractitionersAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/Practitioner/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Practitioner.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPractitionersAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner?family=Doe&_sort=given\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"family\", startsWith(\"Doe\"))))));\n+\t\tassertThat(entries, containsInRelativeOrder(\n+\t\t    hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"givenAsSingleString\", containsString(\"John\"))))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPractitionersAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner\").accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/Practitioner/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Practitioner.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPractitionersAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner?family=Doe&_sort=given\").accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"family\", startsWith(\"Doe\"))))));\n+\t\tassertThat(entries, containsInRelativeOrder(", "originalCommit": "cbbd390d867c8bf4e40cf56dac2801302a390e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4MzMxNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/299#discussion_r484483314", "body": "```suggestion\r\n\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n          \n          \n            \n            \t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tresponse <span class=\"pl-k\">=</span> put(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/Practitioner/<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">WRONG_PRACTITIONER_UUID</span>)<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">jsonContent(toJson</span>(practitioner))<span class=\"pl-k\">.</span>go();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tresponse <span class=\"pl-k\">=</span> put(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/Practitioner/<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">WRONG_PRACTITIONER_UUID</span>)<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">xmlContext(toXML</span>(practitioner))<span class=\"pl-k\">.</span>go();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "varung-31", "createdAt": "2020-09-07T15:05:00Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r4/PractitionerFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r4;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.time.DateUtils;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.Enumerations;\n+import org.hl7.fhir.r4.model.OperationOutcome;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PractitionerFhirResourceProviderIntegrationTest extends BaseFhirR4IntegrationTest<PractitionerFhirResourceProvider, Practitioner> {\n+\t\n+\tprivate static final String PRACTITIONER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirPractitionerDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.xml\";\n+\t\n+\tprivate static final String PRACTITIONER_UUID = \"f9badd80-ab76-11e2-9e96-0800200c9a66\";\n+\t\n+\tprivate static final String WRONG_PRACTITIONER_UUID = \"f8bc0122-21db-4e91-a5d3-92ae01cafe92\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PractitionerFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(PRACTITIONER_INITIAL_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.JSON).jsonContent(jsonPractitioner)\n+\t\t        .go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.XML).xmlContext(xmlPractitioner).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(updatedPractitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();", "originalCommit": "cbbd390d867c8bf4e40cf56dac2801302a390e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4MzM5Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/299#discussion_r484483392", "body": "```suggestion\r\n\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n          \n          \n            \n            \t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThat(response<span class=\"pl-k\">.</span>getContentType(), is(<span class=\"pl-smi\">FhirMediaTypes</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">JSON</span></span><span class=\"pl-k\">.</span>toString()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThat(response<span class=\"pl-k\">.</span>getContentType(), is(<span class=\"pl-smi\">FhirMediaTypes</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">XML</span></span><span class=\"pl-k\">.</span>toString()));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "varung-31", "createdAt": "2020-09-07T15:05:09Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r4/PractitionerFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r4;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.time.DateUtils;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.Enumerations;\n+import org.hl7.fhir.r4.model.OperationOutcome;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PractitionerFhirResourceProviderIntegrationTest extends BaseFhirR4IntegrationTest<PractitionerFhirResourceProvider, Practitioner> {\n+\t\n+\tprivate static final String PRACTITIONER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirPractitionerDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.xml\";\n+\t\n+\tprivate static final String PRACTITIONER_UUID = \"f9badd80-ab76-11e2-9e96-0800200c9a66\";\n+\t\n+\tprivate static final String WRONG_PRACTITIONER_UUID = \"f8bc0122-21db-4e91-a5d3-92ae01cafe92\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PractitionerFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(PRACTITIONER_INITIAL_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.JSON).jsonContent(jsonPractitioner)\n+\t\t        .go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.XML).xmlContext(xmlPractitioner).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(updatedPractitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));", "originalCommit": "cbbd390d867c8bf4e40cf56dac2801302a390e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4MzU4NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/299#discussion_r484483584", "body": "Ditto", "bodyText": "Ditto", "bodyHTML": "<p dir=\"auto\">Ditto</p>", "author": "varung-31", "createdAt": "2020-09-07T15:05:38Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r4/PractitionerFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r4;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.time.DateUtils;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.Enumerations;\n+import org.hl7.fhir.r4.model.OperationOutcome;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PractitionerFhirResourceProviderIntegrationTest extends BaseFhirR4IntegrationTest<PractitionerFhirResourceProvider, Practitioner> {\n+\t\n+\tprivate static final String PRACTITIONER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirPractitionerDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.xml\";\n+\t\n+\tprivate static final String PRACTITIONER_UUID = \"f9badd80-ab76-11e2-9e96-0800200c9a66\";\n+\t\n+\tprivate static final String WRONG_PRACTITIONER_UUID = \"f8bc0122-21db-4e91-a5d3-92ae01cafe92\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PractitionerFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(PRACTITIONER_INITIAL_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.JSON).jsonContent(jsonPractitioner)\n+\t\t        .go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.XML).xmlContext(xmlPractitioner).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(updatedPractitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingPractitioner() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, statusEquals(HttpStatus.GONE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenDeletingNonExistentPractitioner() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPractitionersAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R4/Practitioner/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Practitioner.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPractitionersAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner?family=Doe&_sort=given\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"family\", startsWith(\"Doe\"))))));\n+\t\tassertThat(entries, containsInRelativeOrder(\n+\t\t    hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"givenAsSingleString\", containsString(\"John\"))))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPractitionersAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner\").accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R4/Practitioner/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Practitioner.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPractitionersAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner?family=Doe&_sort=given\").accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"family\", startsWith(\"Doe\"))))));\n+\t\tassertThat(entries, containsInRelativeOrder(", "originalCommit": "cbbd390d867c8bf4e40cf56dac2801302a390e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4MzY0MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/299#discussion_r484483640", "body": "Ditto", "bodyText": "Ditto", "bodyHTML": "<p dir=\"auto\">Ditto</p>", "author": "varung-31", "createdAt": "2020-09-07T15:05:46Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r4/PractitionerFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r4;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.time.DateUtils;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.Enumerations;\n+import org.hl7.fhir.r4.model.OperationOutcome;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PractitionerFhirResourceProviderIntegrationTest extends BaseFhirR4IntegrationTest<PractitionerFhirResourceProvider, Practitioner> {\n+\t\n+\tprivate static final String PRACTITIONER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirPractitionerDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PRACTITIONER_DOCUMENT = \"org/openmrs/module/fhir2/providers/PractitionerWebTest_create.xml\";\n+\t\n+\tprivate static final String PRACTITIONER_UUID = \"f9badd80-ab76-11e2-9e96-0800200c9a66\";\n+\t\n+\tprivate static final String WRONG_PRACTITIONER_UUID = \"f8bc0122-21db-4e91-a5d3-92ae01cafe92\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PractitionerFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(PRACTITIONER_INITIAL_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPractitionerAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(practitioner, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenPractitionerNotFoundAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.JSON).jsonContent(jsonPractitioner)\n+\t\t        .go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPractitionerAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PRACTITIONER_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create practitioner\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").accept(FhirMediaTypes.XML).xmlContext(xmlPractitioner).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Practitioner/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(practitioner, notNullValue());\n+\t\tassertThat(practitioner.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(practitioner.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(practitioner.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(practitioner.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(practitioner.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(practitioner.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(practitioner.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// try to get new practitioner\n+\t\tresponse = get(\"/Practitioner/\" + practitioner.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPractitioner newPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(newPractitioner.getId(), equalTo(practitioner.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(updatedPractitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tpractitioner.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPractitioner updatedPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPractitioner, notNullValue());\n+\t\tassertThat(updatedPractitioner.getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n+\t\tassertThat(updatedPractitioner.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(practitioner, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner reReadPractitioner = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPractitioner.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPractitionerIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + PRACTITIONER_UUID).xmlContext(toXML(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPractitionerAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPractitioner practitioner = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tpractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).jsonContent(toJson(practitioner)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingPractitioner() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tresponse = get(\"/Practitioner/\" + PRACTITIONER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, statusEquals(HttpStatus.GONE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenDeletingNonExistentPractitioner() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Practitioner/\" + WRONG_PRACTITIONER_UUID).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPractitionersAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R4/Practitioner/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Practitioner.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPractitionersAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Practitioner?family=Doe&_sort=given\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"family\", startsWith(\"Doe\"))))));\n+\t\tassertThat(entries, containsInRelativeOrder(", "originalCommit": "cbbd390d867c8bf4e40cf56dac2801302a390e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4MzkwMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/299#discussion_r484483901", "body": "Could you please add some tests for the translator changes?", "bodyText": "Could you please add some tests for the translator changes?", "bodyHTML": "<p dir=\"auto\">Could you please add some tests for the translator changes?</p>", "author": "varung-31", "createdAt": "2020-09-07T15:06:21Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/PractitionerTranslatorProviderImpl.java", "diffHunk": "@@ -72,9 +75,25 @@ public Provider toOpenmrsType(Provider existingProvider, Practitioner practition\n \t\t\n \t\texistingProvider.setUuid(practitioner.getId());\n \t\t\n-\t\tValidate.notEmpty(practitioner.getIdentifier(), \"Practitioner Identifier cannot be empty\");\n+\t\tnotEmpty(practitioner.getIdentifier(), \"Practitioner Identifier cannot be empty\");\n \t\texistingProvider.setIdentifier(practitioner.getIdentifier().get(0).getValue());\n \t\t\n+\t\tif (existingProvider.getPerson() == null) {", "originalCommit": "cbbd390d867c8bf4e40cf56dac2801302a390e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "23d52b5f1e1b4611dc863bdbb8f3a08f1134f9da", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/23d52b5f1e1b4611dc863bdbb8f3a08f1134f9da", "message": "FM2-305: Create Integration Tests for Practitioner.", "committedDate": "2020-09-10T10:58:09Z", "type": "commit"}, {"oid": "23d52b5f1e1b4611dc863bdbb8f3a08f1134f9da", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/23d52b5f1e1b4611dc863bdbb8f3a08f1134f9da", "message": "FM2-305: Create Integration Tests for Practitioner.", "committedDate": "2020-09-10T10:58:09Z", "type": "forcePushed"}]}