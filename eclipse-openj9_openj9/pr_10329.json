{"pr_number": 10329, "pr_title": "Selectively enforce lookup class package check", "pr_author": "JasonFengJ9", "pr_createdAt": "2020-08-04T18:53:13Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10329", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1OTg4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466459888", "body": "This looks wrong - code that's explicitly asking for the check should be updated for 15 rather than discarding the value here.", "bodyText": "This looks wrong - code that's explicitly asking for the check should be updated for 15 rather than discarding the value here.", "bodyHTML": "<p dir=\"auto\">This looks wrong - code that's explicitly asking for the check should be updated for 15 rather than discarding the value here.</p>", "author": "DanHeidinga", "createdAt": "2020-08-06T14:36:35Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -216,11 +216,23 @@\n \t\t}\n \t\t\n \t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n-\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode,\n+\t\t\t/*[IF Java15]\n+\t\t\t\tfalse\n+\t\t\t/*[ELSE] Java15*/\n+\t\t\t\ttrue\n+\t\t\t/*[ENDIF] Java15*/\n+\t\t\t);\n \t\t}\n \t\t\n \t\tLookup(Class<?> lookupClass, int lookupMode, boolean doCheck) {\n-\t\t\tthis(lookupClass, null, lookupMode, doCheck);\n+\t\t\tthis(lookupClass, null, lookupMode,\n+\t\t\t/*[IF Java15]\n+\t\t\t\tfalse\n+\t\t\t/*[ELSE] Java15*/\n+\t\t\t\tdoCheck\n+\t\t\t/*[ENDIF] Java15*/", "originalCommit": "95985f5e4fdaef53e8ae4ff4edd7a09977a7a08a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4Mzc2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466483765", "bodyText": "The approach of this PR is to always skip the package check other than those three APIs in question for JDK15. Those three have been modified to invoke the Lookup constructor with true flag for JDK15 (to match RI behaviours). The expectation is that all other JDK15 API don't perform such check.\nDoes this make sense?", "author": "JasonFengJ9", "createdAt": "2020-08-06T15:10:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1OTg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MzA3Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466463072", "body": "Something like this may be clearer by putting the behaviour in a helper method like `lookupJLIPackageCheckDefault`\r\n```suggestion\r\n\t\t\tthis(lookupClass, prevLookupClass, lookupMode, lookupJLIPackageCheckDefault());\r\n\t\t}\r\n\r\n/* For Java 15, the default is not to check for the \"java.lang.invoke\" package.\r\n * For earlier releases, these lookups are illegal\r\n  */\r\nstatic boolean lookupJLIPackageCheckDefault() {\r\n\t/*[IF Java15]\r\n\treturn false;\r\n\t/*[ELSE] Java15*/\r\n\treturn true;\r\n\t/*[ENDIF] Java15*/\r\n}\r\n```", "bodyText": "Something like this may be clearer by putting the behaviour in a helper method like lookupJLIPackageCheckDefault\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tthis(lookupClass, prevLookupClass, lookupMode,\n          \n          \n            \n            \t\t\t/*[IF Java15]\n          \n          \n            \n            \t\t\t\tfalse\n          \n          \n            \n            \t\t\t/*[ELSE] Java15*/\n          \n          \n            \n            \t\t\t\ttrue\n          \n          \n            \n            \t\t\t/*[ENDIF] Java15*/\n          \n          \n            \n            \t\t\t);\n          \n          \n            \n            \t\t\tthis(lookupClass, prevLookupClass, lookupMode, lookupJLIPackageCheckDefault());\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            /* For Java 15, the default is not to check for the \"java.lang.invoke\" package.\n          \n          \n            \n             * For earlier releases, these lookups are illegal\n          \n          \n            \n              */\n          \n          \n            \n            static boolean lookupJLIPackageCheckDefault() {\n          \n          \n            \n            \t/*[IF Java15]\n          \n          \n            \n            \treturn false;\n          \n          \n            \n            \t/*[ELSE] Java15*/\n          \n          \n            \n            \treturn true;\n          \n          \n            \n            \t/*[ENDIF] Java15*/\n          \n          \n            \n            }", "bodyHTML": "<p dir=\"auto\">Something like this may be clearer by putting the behaviour in a helper method like <code>lookupJLIPackageCheckDefault</code></p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t<span class=\"pl-c1\">this</span>(lookupClass, prevLookupClass, lookupMode,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">/*</span>[IF Java15]</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-c1\">false</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">/*</span>[ELSE] Java15<span class=\"pl-c\">*/</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-c1\">true</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">/*</span>[ENDIF] Java15<span class=\"pl-c\">*/</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t<span class=\"pl-c1\">this</span>(lookupClass, prevLookupClass, lookupMode, lookupJLIPackageCheckDefault());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t}</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-c\"><span class=\"pl-c\">/*</span> For Java 15, the default is not to check for the \"java.lang.invoke\" package.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">For</span> earlier releases, these lookups are illegal</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">*/</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">static</span> <span class=\"pl-k\">boolean</span> lookupJLIPackageCheckDefault() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-c\"><span class=\"pl-c\">/*</span>[IF Java15]</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-c\"><span class=\"pl-c\">/*</span>[ELSE] Java15<span class=\"pl-c\">*/</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-c\"><span class=\"pl-c\">/*</span>[ENDIF] Java15<span class=\"pl-c\">*/</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">}</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "DanHeidinga", "createdAt": "2020-08-06T14:41:16Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -216,11 +216,23 @@\n \t\t}\n \t\t\n \t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n-\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode,\n+\t\t\t/*[IF Java15]\n+\t\t\t\tfalse\n+\t\t\t/*[ELSE] Java15*/\n+\t\t\t\ttrue\n+\t\t\t/*[ENDIF] Java15*/\n+\t\t\t);", "originalCommit": "95985f5e4fdaef53e8ae4ff4edd7a09977a7a08a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4NzM5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466487393", "bodyText": "Agreed. Updated the PR.", "author": "JasonFengJ9", "createdAt": "2020-08-06T15:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MzA3Mg=="}], "type": "inlineReview"}, {"oid": "52293889c8063582d0cc7c997c07470ef06eb9d4", "url": "https://github.com/eclipse-openj9/openj9/commit/52293889c8063582d0cc7c997c07470ef06eb9d4", "message": "Selectively enforce lookup class package check\n\nOnly following APIs are subject to lookup class package check:\n\nMethodHandles.Lookup\t.in\u200b(Class<?> lookupClass)\nMethodHandles.Lookup.dropLookupMode\u200b(int modeToDrop)\nMethodHandles.Lookup\t.privateLookupIn\u200b(Class<?> targetClass,\nMethodHandles.Lookup caller)\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-08-06T15:14:11Z", "type": "commit"}, {"oid": "52293889c8063582d0cc7c997c07470ef06eb9d4", "url": "https://github.com/eclipse-openj9/openj9/commit/52293889c8063582d0cc7c997c07470ef06eb9d4", "message": "Selectively enforce lookup class package check\n\nOnly following APIs are subject to lookup class package check:\n\nMethodHandles.Lookup\t.in\u200b(Class<?> lookupClass)\nMethodHandles.Lookup.dropLookupMode\u200b(int modeToDrop)\nMethodHandles.Lookup\t.privateLookupIn\u200b(Class<?> targetClass,\nMethodHandles.Lookup caller)\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-08-06T15:14:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2OTYyOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466569629", "body": "This doesn't look right as it discards `doCheck`.  It should be\r\n```suggestion\r\n\t\t\tthis(lookupClass, null, lookupMode, doCheck);\r\n```\r\n\r\nIt's up to the calling code to pass the right default or not supply one by using a different ctor.", "bodyText": "This doesn't look right as it discards doCheck.  It should be\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tthis(lookupClass, null, lookupMode, lookupJLIPackageCheckDefault());\n          \n          \n            \n            \t\t\tthis(lookupClass, null, lookupMode, doCheck);\n          \n      \n    \n    \n  \n\nIt's up to the calling code to pass the right default or not supply one by using a different ctor.", "bodyHTML": "<p dir=\"auto\">This doesn't look right as it discards <code>doCheck</code>.  It should be</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"234\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t<span class=\"pl-c1\">this</span>(lookupClass, <span class=\"pl-c1\">null</span>, lookupMode, <span class=\"x x-first x-last\">lookupJLIPackageCheckDefault()</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"234\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t<span class=\"pl-c1\">this</span>(lookupClass, <span class=\"pl-c1\">null</span>, lookupMode, <span class=\"x x-first x-last\">doCheck</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">It's up to the calling code to pass the right default or not supply one by using a different ctor.</p>", "author": "DanHeidinga", "createdAt": "2020-08-06T17:24:11Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -215,12 +215,23 @@\n \t\t\taccessMode = lookupMode;\n \t\t}\n \t\t\n+\t\t/* For Java 15, the default is not to check for the \"java.lang.invoke\" package.\n+\t\t * For earlier releases, these lookups are illegal\n+\t\t  */\n+\t\tprivate static boolean lookupJLIPackageCheckDefault() {\n+\t\t\t/*[IF Java15]\n+\t\t\treturn false;\n+\t\t\t/*[ELSE] Java15*/\n+\t\t\treturn true;\n+\t\t\t/*[ENDIF] Java15*/\n+\t\t}\n+\t\t\n \t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n-\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode, lookupJLIPackageCheckDefault());\n \t\t}\n \t\t\n \t\tLookup(Class<?> lookupClass, int lookupMode, boolean doCheck) {\n-\t\t\tthis(lookupClass, null, lookupMode, doCheck);\n+\t\t\tthis(lookupClass, null, lookupMode, lookupJLIPackageCheckDefault());", "originalCommit": "52293889c8063582d0cc7c997c07470ef06eb9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNjUwOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466616509", "bodyText": "Modified the helper method as following:\n\t\tprivate static boolean lookupJLIPackageCheckDefault(boolean doCheck) {\n\t\t\t/*[IF Java15]\n\t\t\treturn false;\n\t\t\t/*[ELSE] Java15*/\n\t\t\treturn doCheck;\n\t\t\t/*[ENDIF] Java15*/\n\t\t}\n\nThis is to skip the package check in JDK15 regardless of incoming doCheck flag while keep same behaviours for pre-JDK15 levels.\nHere it invokes lookupJLIPackageCheckDefault(doCheck) instead.", "author": "JasonFengJ9", "createdAt": "2020-08-06T18:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2OTYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3MDgzOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466570838", "body": "Shouldn't this be false?  If the user already has a Lookup in the `java.lang.invoke` package, why would we restrict dropping access?", "bodyText": "Shouldn't this be false?  If the user already has a Lookup in the java.lang.invoke package, why would we restrict dropping access?", "bodyHTML": "<p dir=\"auto\">Shouldn't this be false?  If the user already has a Lookup in the <code>java.lang.invoke</code> package, why would we restrict dropping access?</p>", "author": "DanHeidinga", "createdAt": "2020-08-06T17:25:37Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2214,7 +2225,7 @@ public VarHandle unreflectVarHandle(Field field) throws IllegalAccessException {\n \t\t\t\tnewPrevAccessClass = null;\n \t\t\t}\n \t\t\t\n-\t\t\treturn new Lookup(accessClass, newPrevAccessClass, newAccessMode);\n+\t\t\treturn new Lookup(accessClass, newPrevAccessClass, newAccessMode, true);", "originalCommit": "52293889c8063582d0cc7c997c07470ef06eb9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNjU5OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466616598", "bodyText": "new Lookup(accessClass, newPrevAccessClass, newAccessMode)  invokes this(lookupClass, prevLookupClass, lookupMode, true), so the flag was true in current code base, i.e., always check the package.\nThis check matches RI behaviours which was introduced for defense-in-depth fix [1], and still presents in JDK15.\n[1] http://mail.openjdk.java.net/pipermail/jigsaw-dev/2017-April/012268.html", "author": "JasonFengJ9", "createdAt": "2020-08-06T18:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3MDgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNjQ4NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r467026485", "bodyText": "It's an odd restriction to leave at this point but as it matches the RI, we'll do the same for 15.", "author": "DanHeidinga", "createdAt": "2020-08-07T13:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3MDgzOA=="}], "type": "inlineReview"}]}