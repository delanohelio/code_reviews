{"pr_number": 11088, "pr_title": "Accelerate two-dimensional new array with second dimension being zero", "pr_author": "dchopra001", "pr_createdAt": "2020-11-03T14:59:29Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11088", "merge_commit": "f6fcc177cc1679c3fa7214c2cb1ea834ba318a24", "timeline": [{"oid": "6240663d966ffed91823c9688591caeffb3a0c61", "url": "https://github.com/eclipse-openj9/openj9/commit/6240663d966ffed91823c9688591caeffb3a0c61", "message": "Use MVHI to store constants\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-11-13T19:02:41Z", "type": "forcePushed"}, {"oid": "fcb9ecf5318e844e2f5c852fe7ce4fee10dfff5e", "url": "https://github.com/eclipse-openj9/openj9/commit/fcb9ecf5318e844e2f5c852fe7ce4fee10dfff5e", "message": "-Remove unnecessary LR instructions.\n-Add assert to make sure elementSize <= 8\n-Add assert for discontiguousArrayHeaderSizeInBytes == 16\n-Use OMR::align API to do element alignment\n-Remove use of performHelperCall routine\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-11-23T04:42:51Z", "type": "forcePushed"}, {"oid": "0c0a523fb2d8f29f7ebf068ecba2e3b4633d3c66", "url": "https://github.com/eclipse-openj9/openj9/commit/0c0a523fb2d8f29f7ebf068ecba2e3b4633d3c66", "message": "Address PR change requests\n\n-Remove unnecessary LR instructions.\n-Add assert to make sure elementSize <= 8\n-Add assert for discontiguousArrayHeaderSizeInBytes == 16\n-Use OMR::align API to do element alignment\n-Remove use of performHelperCall routine\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-11-23T04:46:11Z", "type": "forcePushed"}, {"oid": "e5263da19db7f55f00d638cc6d8ca672dfe11c20", "url": "https://github.com/eclipse-openj9/openj9/commit/e5263da19db7f55f00d638cc6d8ca672dfe11c20", "message": "Add tests\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-11-24T18:18:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2ODQwMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r529768400", "body": "Copyright should be 2020, 2020.", "bodyText": "Copyright should be 2020, 2020.", "bodyHTML": "<p dir=\"auto\">Copyright should be 2020, 2020.</p>", "author": "fjeremic", "createdAt": "2020-11-24T17:53:00Z", "path": "test/functional/JIT_Test/src/jit/test/jitt/array/multianewarray.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2001, 2020 IBM Corp. and others", "originalCommit": "54d6632c18ac873641e83f53e51c247f24db7052", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIyOTQxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r531229412", "bodyText": "Fixed in d825ed9", "author": "dchopra001", "createdAt": "2020-11-26T21:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2ODQwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3MTI1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r529771251", "body": "Do we need this? Can't we just use `AssertJUnit.assertEquals` which is much more standard and pretty prints everything for us already.", "bodyText": "Do we need this? Can't we just use AssertJUnit.assertEquals which is much more standard and pretty prints everything for us already.", "bodyHTML": "<p dir=\"auto\">Do we need this? Can't we just use <code>AssertJUnit.assertEquals</code> which is much more standard and pretty prints everything for us already.</p>", "author": "fjeremic", "createdAt": "2020-11-24T17:57:27Z", "path": "test/functional/JIT_Test/src/jit/test/jitt/array/multianewarray.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2001, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package jit.test.jitt.array;\n+\n+import org.testng.annotations.Test;\n+import org.testng.log4testng.Logger;\n+import org.testng.Assert;\n+\n+@Test(groups = { \"level.sanity\",\"component.jit\" })\n+\n+public class multianewarray extends jit.test.jitt.Test\n+   {\n+\n+   private static Logger logger = Logger.getLogger(multianewarray.class);", "originalCommit": "54d6632c18ac873641e83f53e51c247f24db7052", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIyOTM4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r531229384", "bodyText": "Switch to AssertJUnit class in d825ed9", "author": "dchopra001", "createdAt": "2020-11-26T21:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3MTI1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3MjMyNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r529772324", "body": "Do we need to extend this class? What functionality does it provide?", "bodyText": "Do we need to extend this class? What functionality does it provide?", "bodyHTML": "<p dir=\"auto\">Do we need to extend this class? What functionality does it provide?</p>", "author": "fjeremic", "createdAt": "2020-11-24T17:59:09Z", "path": "test/functional/JIT_Test/src/jit/test/jitt/array/multianewarray.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2001, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package jit.test.jitt.array;\n+\n+import org.testng.annotations.Test;\n+import org.testng.log4testng.Logger;\n+import org.testng.Assert;\n+\n+@Test(groups = { \"level.sanity\",\"component.jit\" })\n+\n+public class multianewarray extends jit.test.jitt.Test", "originalCommit": "54d6632c18ac873641e83f53e51c247f24db7052", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5MzM4NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r531193385", "bodyText": "I don't think this provides anything we need specifically, but this is the convention used throughout the other tests in this directory. We use this convention to add the test names inside testng.xml as well. So I think if we want to change it here, we should do it for all the other tests as well.\n@llxia Can you confirm or deny this? I might be missing something here.", "author": "dchopra001", "createdAt": "2020-11-26T19:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3MjMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIzNjk5MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r531236991", "bodyText": "jit.test.jitt.Test is not needed for testng. The entry in testng.xml is the class name of the test <class name=\"jit.test.jitt.array.multianewarray\"/>. If we do not need anything from jit.test.jitt.Test, we do not need to extend the class.", "author": "llxia", "createdAt": "2020-11-26T22:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3MjMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY1NTI5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r531655294", "bodyText": "Thank you for the explanation. I've removed the class extension here: 51ffa13", "author": "dchopra001", "createdAt": "2020-11-27T15:14:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3MjMyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3NzI1Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r529777257", "body": "Can we add an invocation count here to run the test twice:\r\n\r\n```\r\n@Test(groups = {\"level.sanity\"}, invocationCount=2)\r\n```\r\n\r\nAnd then modify playlist.xml for `jit_jitt` to add a variation which runs `-Xjit:count=1,disalbeAsyncCompilation`. This will ensure everything in here is properly resolved.", "bodyText": "Can we add an invocation count here to run the test twice:\n@Test(groups = {\"level.sanity\"}, invocationCount=2)\n\nAnd then modify playlist.xml for jit_jitt to add a variation which runs -Xjit:count=1,disalbeAsyncCompilation. This will ensure everything in here is properly resolved.", "bodyHTML": "<p dir=\"auto\">Can we add an invocation count here to run the test twice:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Test(groups = {&quot;level.sanity&quot;}, invocationCount=2)\"><pre><code>@Test(groups = {\"level.sanity\"}, invocationCount=2)\n</code></pre></div>\n<p dir=\"auto\">And then modify playlist.xml for <code>jit_jitt</code> to add a variation which runs <code>-Xjit:count=1,disalbeAsyncCompilation</code>. This will ensure everything in here is properly resolved.</p>", "author": "fjeremic", "createdAt": "2020-11-24T18:06:12Z", "path": "test/functional/JIT_Test/src/jit/test/jitt/array/multianewarray.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2001, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package jit.test.jitt.array;\n+\n+import org.testng.annotations.Test;\n+import org.testng.log4testng.Logger;\n+import org.testng.Assert;\n+\n+@Test(groups = { \"level.sanity\",\"component.jit\" })", "originalCommit": "54d6632c18ac873641e83f53e51c247f24db7052", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIyOTI0Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r531229246", "bodyText": "Added in 0a0f545", "author": "dchopra001", "createdAt": "2020-11-26T21:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3NzI1Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3NzY3Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r529777676", "body": "Brace styles should match that of VM Java code (tabs, braces in Java style, etc.). See:\r\nhttps://github.com/dchopra001/openj9/blob/arrayDim-Final/test/functional/JIT_Test/src/jit/test/recognizedMethod/TestRecognizedCallTransformer.java\r\n\r\nas an example.", "bodyText": "Brace styles should match that of VM Java code (tabs, braces in Java style, etc.). See:\nhttps://github.com/dchopra001/openj9/blob/arrayDim-Final/test/functional/JIT_Test/src/jit/test/recognizedMethod/TestRecognizedCallTransformer.java\nas an example.", "bodyHTML": "<p dir=\"auto\">Brace styles should match that of VM Java code (tabs, braces in Java style, etc.). See:<br>\n<a href=\"https://github.com/dchopra001/openj9/blob/arrayDim-Final/test/functional/JIT_Test/src/jit/test/recognizedMethod/TestRecognizedCallTransformer.java\">https://github.com/dchopra001/openj9/blob/arrayDim-Final/test/functional/JIT_Test/src/jit/test/recognizedMethod/TestRecognizedCallTransformer.java</a></p>\n<p dir=\"auto\">as an example.</p>", "author": "fjeremic", "createdAt": "2020-11-24T18:06:51Z", "path": "test/functional/JIT_Test/src/jit/test/jitt/array/multianewarray.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2001, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package jit.test.jitt.array;\n+\n+import org.testng.annotations.Test;\n+import org.testng.log4testng.Logger;\n+import org.testng.Assert;\n+\n+@Test(groups = { \"level.sanity\",\"component.jit\" })\n+\n+public class multianewarray extends jit.test.jitt.Test\n+   {", "originalCommit": "54d6632c18ac873641e83f53e51c247f24db7052", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIyODg0OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r531228849", "bodyText": "Formatting fixed in: d825ed9", "author": "dchopra001", "createdAt": "2020-11-26T21:27:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3NzY3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NTE3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r529845170", "body": "Can we instead use a non-built in type of non-trivial length. For example can use use:\r\n\r\n```\r\n\tpublic static class Vector {\r\n\t\tlong x;\r\n\t\tlong y;\r\n\t}\r\n```\r\n\r\ninstead. This will have more coverage and ensure we handle classes with at least two fields. An instance of the above class will be greater than the object alignment, so that is covered as well.", "bodyText": "Can we instead use a non-built in type of non-trivial length. For example can use use:\n\tpublic static class Vector {\n\t\tlong x;\n\t\tlong y;\n\t}\n\ninstead. This will have more coverage and ensure we handle classes with at least two fields. An instance of the above class will be greater than the object alignment, so that is covered as well.", "bodyHTML": "<p dir=\"auto\">Can we instead use a non-built in type of non-trivial length. For example can use use:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\tpublic static class Vector {\n\t\tlong x;\n\t\tlong y;\n\t}\n\"><pre><code>\tpublic static class Vector {\n\t\tlong x;\n\t\tlong y;\n\t}\n</code></pre></div>\n<p dir=\"auto\">instead. This will have more coverage and ensure we handle classes with at least two fields. An instance of the above class will be greater than the object alignment, so that is covered as well.</p>", "author": "fjeremic", "createdAt": "2020-11-24T20:03:31Z", "path": "test/functional/JIT_Test/src/jit/test/jitt/array/multianewarray.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2001, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package jit.test.jitt.array;\n+\n+import org.testng.annotations.Test;\n+import org.testng.log4testng.Logger;\n+import org.testng.Assert;\n+\n+@Test(groups = { \"level.sanity\",\"component.jit\" })\n+\n+public class multianewarray extends jit.test.jitt.Test\n+   {\n+\n+   private static Logger logger = Logger.getLogger(multianewarray.class);\n+\n+   private Integer[][] createMultiArray(int firstDimLength, int secondDimLength)\n+      {\n+      Integer[][] multiarray = new Integer[firstDimLength][secondDimLength];", "originalCommit": "e5263da19db7f55f00d638cc6d8ca672dfe11c20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIyODgzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r531228830", "bodyText": "We now test for both Integer and a Vector class: d825ed9.", "author": "dchopra001", "createdAt": "2020-11-26T21:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NTE3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NjQ1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r529846455", "body": "We should just use `AssertJUnit.assertTrue`.", "bodyText": "We should just use AssertJUnit.assertTrue.", "bodyHTML": "<p dir=\"auto\">We should just use <code>AssertJUnit.assertTrue</code>.</p>", "author": "fjeremic", "createdAt": "2020-11-24T20:05:58Z", "path": "test/functional/JIT_Test/src/jit/test/jitt/array/multianewarray.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2001, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package jit.test.jitt.array;\n+\n+import org.testng.annotations.Test;\n+import org.testng.log4testng.Logger;\n+import org.testng.Assert;\n+\n+@Test(groups = { \"level.sanity\",\"component.jit\" })\n+\n+public class multianewarray extends jit.test.jitt.Test\n+   {\n+\n+   private static Logger logger = Logger.getLogger(multianewarray.class);\n+\n+   private Integer[][] createMultiArray(int firstDimLength, int secondDimLength)\n+      {\n+      Integer[][] multiarray = new Integer[firstDimLength][secondDimLength];\n+      for (int i = 0; i < firstDimLength; i++)\n+         {\n+         for (int j = 0; j < secondDimLength; j++)\n+            {\n+            multiarray[i][j] = i * j;\n+            }\n+         }\n+      return multiarray;\n+      }\n+\n+   private boolean testMultiArray(Integer[][] inputArray)\n+      {\n+      for (int i = 0; i < inputArray.length; i++)\n+         {\n+         for (int j = 0; j < inputArray[0].length; j++)\n+            {\n+            if (inputArray[i][j] != i*j)\n+               {\n+               logger.error(\"testmultianewarray failed! Value at array[\" + i + \"][\" + j + \"] is \" + inputArray[i][j] + \" but expected to be \" + i*j);\n+               return false;\n+               }\n+            }\n+         }\n+      return true;\n+      }\n+\n+   @Test\n+   public void testmultianewarray()\n+      {\n+      Integer[][] inputArray;\n+\n+      for (int i = 0; i < 10000; i++)\n+         {\n+         inputArray = createMultiArray(0, 0);\n+         if (!testMultiArray(inputArray))\n+                 Assert.fail(\"input array not constructed correctly for array of length 0,0 at iteration\" + i);", "originalCommit": "e5263da19db7f55f00d638cc6d8ca672dfe11c20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIyODMwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r531228303", "bodyText": "I've rewritten the tests so we now only JUnit asserts inside the test functions only: d825ed9", "author": "dchopra001", "createdAt": "2020-11-26T21:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NjQ1NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MzMwNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r529883304", "body": "We should also validate the lengths of the arrays are what we think they are, just in case the inline code doesn't allocate the arrays of correct sizes.", "bodyText": "We should also validate the lengths of the arrays are what we think they are, just in case the inline code doesn't allocate the arrays of correct sizes.", "bodyHTML": "<p dir=\"auto\">We should also validate the lengths of the arrays are what we think they are, just in case the inline code doesn't allocate the arrays of correct sizes.</p>", "author": "fjeremic", "createdAt": "2020-11-24T21:17:11Z", "path": "test/functional/JIT_Test/src/jit/test/jitt/array/multianewarray.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2001, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package jit.test.jitt.array;\n+\n+import org.testng.annotations.Test;\n+import org.testng.log4testng.Logger;\n+import org.testng.Assert;\n+\n+@Test(groups = { \"level.sanity\",\"component.jit\" })\n+\n+public class multianewarray extends jit.test.jitt.Test\n+   {\n+\n+   private static Logger logger = Logger.getLogger(multianewarray.class);\n+\n+   private Integer[][] createMultiArray(int firstDimLength, int secondDimLength)\n+      {\n+      Integer[][] multiarray = new Integer[firstDimLength][secondDimLength];\n+      for (int i = 0; i < firstDimLength; i++)\n+         {\n+         for (int j = 0; j < secondDimLength; j++)\n+            {\n+            multiarray[i][j] = i * j;\n+            }\n+         }\n+      return multiarray;\n+      }\n+\n+   private boolean testMultiArray(Integer[][] inputArray)", "originalCommit": "e5263da19db7f55f00d638cc6d8ca672dfe11c20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIyOTQ5Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r531229496", "bodyText": "The test methods now test for length as well: d825ed9", "author": "dchopra001", "createdAt": "2020-11-26T21:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MzMwNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "96a5c5234fa62e73ea3e4ceba64bd5c0d782421d", "url": "https://github.com/eclipse-openj9/openj9/commit/96a5c5234fa62e73ea3e4ceba64bd5c0d782421d", "message": "Newline and formatting changes\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-11-26T21:32:58Z", "type": "forcePushed"}, {"oid": "226b06d9b0f332ac3613850b231c1a2525115a13", "url": "https://github.com/eclipse-openj9/openj9/commit/226b06d9b0f332ac3613850b231c1a2525115a13", "message": "Rewrite multianewarray evaluator on Z\n\nThis commit adds support for 2-dimensional arrays\nwhere the second dimension has length=0 in the\nmultianewarrayEvaluator. Additionally, some new tests\nare also added to test this functionality.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-11-27T18:41:47Z", "type": "forcePushed"}, {"oid": "bd8761af7859a8690f90f86da594d5d63ba68f5b", "url": "https://github.com/eclipse-openj9/openj9/commit/bd8761af7859a8690f90f86da594d5d63ba68f5b", "message": "Rewrite multianewarray evaluator on Z\n\nThis commit adds support for 2-dimensional arrays\nwhere the second dimension has length=0 in the\nmultianewarrayEvaluator. Additionally, some new tests\nare also added to test this functionality.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-11-30T19:02:18Z", "type": "forcePushed"}, {"oid": "885bb78e242d05f5865d3e4ddfe6d9c8b1beef0a", "url": "https://github.com/eclipse-openj9/openj9/commit/885bb78e242d05f5865d3e4ddfe6d9c8b1beef0a", "message": "Rewrite multianewarray evaluator on Z\n\nThis commit adds support for 2-dimensional arrays\nwhere the second dimension has length=0 in the\nmultianewarrayEvaluator. Additionally, some new tests\nare also added to test this functionality.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-11-30T19:07:03Z", "type": "forcePushed"}, {"oid": "f85779ba406f57f872f3765b1546487d3f16dc4e", "url": "https://github.com/eclipse-openj9/openj9/commit/f85779ba406f57f872f3765b1546487d3f16dc4e", "message": "Rewrite multianewarray evaluator on Z\n\nThis commit adds support for 2-dimensional arrays\nwhere the second dimension has length=0 in the\nmultianewarrayEvaluator. Additionally, some new tests\nare also added to test this functionality.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-11-30T19:35:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0MTY4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r532941684", "body": "I think the 10000 here may be causing timeout issues on Power. For example see here:\r\nhttps://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/95/console\r\n\r\n```\r\n16:28:11  variation: -Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump\r\n16:28:11  JVM_OPTIONS:  -Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump \r\n16:28:11  { itercnt=1; \\\r\n16:28:11  mkdir -p \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/jit_jitt_1\"; \\\r\n16:28:11  cd \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/jit_jitt_1\"; \\\r\n16:28:11  \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdkbinary/j2sdk-image/bin/java\"  -Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump  \\\r\n16:28:11  -cp \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../../jvmtest/TestConfig/resources:/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/lib/testng.jar:/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/lib/jcommander.jar:/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../../jvmtest/functional/JIT_Test/jitt.jar\" \\\r\n16:28:11  org.testng.TestNG -d \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/jit_jitt_1\" \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../../jvmtest/functional/JIT_Test/testng.xml\" \\\r\n16:28:11  -testnames \\\r\n16:28:11  arrayTest,\\\r\n16:28:11  assemblerTest,\\\r\n16:28:11  castingTest,\\\r\n16:28:11  cfgTest,\\\r\n16:28:11  crashesTest,\\\r\n16:28:11  ctresolvesTest,\\\r\n16:28:11  exceptionsTest,\\\r\n16:28:11  fieldsTest,\\\r\n16:28:11  floatsTest,\\\r\n16:28:11  gcTest,\\\r\n16:28:11  geCastingTest,\\\r\n16:28:11  immedOpTest,\\\r\n16:28:11  invokeTest,\\\r\n16:28:11  mathTest,\\\r\n16:28:11  math2Test,\\\r\n16:28:11  miscTest,\\\r\n16:28:11  os390LinkageTest,\\\r\n16:28:11  promotionTest,\\\r\n16:28:11  resolvesTest,\\\r\n16:28:11  sieveTest,\\\r\n16:28:11  transitionsTest \\\r\n16:28:11  -groups level.sanity \\\r\n16:28:11  -excludegroups d.*.aix_ppc-64_cmprssptrs,d.*.arch.ppc,d.*.os.aix,d.*.bits.64,d.*.generic-all; \\\r\n16:28:11  if [ $? -eq 0 ] ; then echo \"\"; echo \"jit_jitt_1\"\"_PASSED\"; echo \"\"; cd /home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/..;  else echo \"\"; echo \"jit_jitt_1\"\"_FAILED\"; echo \"\"; fi; } 2>&1 | tee -a \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/TestTargetResult\";\r\n16:28:17  [IncludeExcludeTestAnnotationTransformer] [INFO] exclude file is /home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TestConfig/resources/excludes/latest_exclude_8.txt\r\n16:28:17  ...\r\n16:28:17  ... TestNG 6.14.2 by C\u00e9dric Beust (cedric@beust.com)\r\n16:28:17  ...\r\n16:28:17  \r\nCalling Pipeline was cancelled\r\n16:34:50  Sending interrupt signal to process\r\n16:35:04  /bin/sh[4]: 20316372 Terminated\r\n16:35:04  \r\n16:35:04  jit_jitt_1_FAILED\r\n```\r\n\r\nIt was spinning for 5 mins. then got cancelled. Can we tone this down to something more reasonable, perhaps 64 would be enough?", "bodyText": "I think the 10000 here may be causing timeout issues on Power. For example see here:\nhttps://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/95/console\n16:28:11  variation: -Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump\n16:28:11  JVM_OPTIONS:  -Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump \n16:28:11  { itercnt=1; \\\n16:28:11  mkdir -p \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/jit_jitt_1\"; \\\n16:28:11  cd \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/jit_jitt_1\"; \\\n16:28:11  \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdkbinary/j2sdk-image/bin/java\"  -Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump  \\\n16:28:11  -cp \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../../jvmtest/TestConfig/resources:/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/lib/testng.jar:/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/lib/jcommander.jar:/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../../jvmtest/functional/JIT_Test/jitt.jar\" \\\n16:28:11  org.testng.TestNG -d \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/jit_jitt_1\" \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../../jvmtest/functional/JIT_Test/testng.xml\" \\\n16:28:11  -testnames \\\n16:28:11  arrayTest,\\\n16:28:11  assemblerTest,\\\n16:28:11  castingTest,\\\n16:28:11  cfgTest,\\\n16:28:11  crashesTest,\\\n16:28:11  ctresolvesTest,\\\n16:28:11  exceptionsTest,\\\n16:28:11  fieldsTest,\\\n16:28:11  floatsTest,\\\n16:28:11  gcTest,\\\n16:28:11  geCastingTest,\\\n16:28:11  immedOpTest,\\\n16:28:11  invokeTest,\\\n16:28:11  mathTest,\\\n16:28:11  math2Test,\\\n16:28:11  miscTest,\\\n16:28:11  os390LinkageTest,\\\n16:28:11  promotionTest,\\\n16:28:11  resolvesTest,\\\n16:28:11  sieveTest,\\\n16:28:11  transitionsTest \\\n16:28:11  -groups level.sanity \\\n16:28:11  -excludegroups d.*.aix_ppc-64_cmprssptrs,d.*.arch.ppc,d.*.os.aix,d.*.bits.64,d.*.generic-all; \\\n16:28:11  if [ $? -eq 0 ] ; then echo \"\"; echo \"jit_jitt_1\"\"_PASSED\"; echo \"\"; cd /home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/..;  else echo \"\"; echo \"jit_jitt_1\"\"_FAILED\"; echo \"\"; fi; } 2>&1 | tee -a \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/TestTargetResult\";\n16:28:17  [IncludeExcludeTestAnnotationTransformer] [INFO] exclude file is /home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TestConfig/resources/excludes/latest_exclude_8.txt\n16:28:17  ...\n16:28:17  ... TestNG 6.14.2 by C\u00e9dric Beust (cedric@beust.com)\n16:28:17  ...\n16:28:17  \nCalling Pipeline was cancelled\n16:34:50  Sending interrupt signal to process\n16:35:04  /bin/sh[4]: 20316372 Terminated\n16:35:04  \n16:35:04  jit_jitt_1_FAILED\n\nIt was spinning for 5 mins. then got cancelled. Can we tone this down to something more reasonable, perhaps 64 would be enough?", "bodyHTML": "<p dir=\"auto\">I think the 10000 here may be causing timeout issues on Power. For example see here:<br>\n<a href=\"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/95/console\" rel=\"nofollow\">https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/95/console</a></p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"16:28:11  variation: -Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump\n16:28:11  JVM_OPTIONS:  -Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump \n16:28:11  { itercnt=1; \\\n16:28:11  mkdir -p &quot;/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/jit_jitt_1&quot;; \\\n16:28:11  cd &quot;/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/jit_jitt_1&quot;; \\\n16:28:11  &quot;/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdkbinary/j2sdk-image/bin/java&quot;  -Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump  \\\n16:28:11  -cp &quot;/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../../jvmtest/TestConfig/resources:/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/lib/testng.jar:/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/lib/jcommander.jar:/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../../jvmtest/functional/JIT_Test/jitt.jar&quot; \\\n16:28:11  org.testng.TestNG -d &quot;/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/jit_jitt_1&quot; &quot;/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../../jvmtest/functional/JIT_Test/testng.xml&quot; \\\n16:28:11  -testnames \\\n16:28:11  arrayTest,\\\n16:28:11  assemblerTest,\\\n16:28:11  castingTest,\\\n16:28:11  cfgTest,\\\n16:28:11  crashesTest,\\\n16:28:11  ctresolvesTest,\\\n16:28:11  exceptionsTest,\\\n16:28:11  fieldsTest,\\\n16:28:11  floatsTest,\\\n16:28:11  gcTest,\\\n16:28:11  geCastingTest,\\\n16:28:11  immedOpTest,\\\n16:28:11  invokeTest,\\\n16:28:11  mathTest,\\\n16:28:11  math2Test,\\\n16:28:11  miscTest,\\\n16:28:11  os390LinkageTest,\\\n16:28:11  promotionTest,\\\n16:28:11  resolvesTest,\\\n16:28:11  sieveTest,\\\n16:28:11  transitionsTest \\\n16:28:11  -groups level.sanity \\\n16:28:11  -excludegroups d.*.aix_ppc-64_cmprssptrs,d.*.arch.ppc,d.*.os.aix,d.*.bits.64,d.*.generic-all; \\\n16:28:11  if [ $? -eq 0 ] ; then echo &quot;&quot;; echo &quot;jit_jitt_1&quot;&quot;_PASSED&quot;; echo &quot;&quot;; cd /home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/..;  else echo &quot;&quot;; echo &quot;jit_jitt_1&quot;&quot;_FAILED&quot;; echo &quot;&quot;; fi; } 2&gt;&amp;1 | tee -a &quot;/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/TestTargetResult&quot;;\n16:28:17  [IncludeExcludeTestAnnotationTransformer] [INFO] exclude file is /home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TestConfig/resources/excludes/latest_exclude_8.txt\n16:28:17  ...\n16:28:17  ... TestNG 6.14.2 by C\u00e9dric Beust (cedric@beust.com)\n16:28:17  ...\n16:28:17  \nCalling Pipeline was cancelled\n16:34:50  Sending interrupt signal to process\n16:35:04  /bin/sh[4]: 20316372 Terminated\n16:35:04  \n16:35:04  jit_jitt_1_FAILED\"><pre><code>16:28:11  variation: -Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump\n16:28:11  JVM_OPTIONS:  -Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump \n16:28:11  { itercnt=1; \\\n16:28:11  mkdir -p \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/jit_jitt_1\"; \\\n16:28:11  cd \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/jit_jitt_1\"; \\\n16:28:11  \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdkbinary/j2sdk-image/bin/java\"  -Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump  \\\n16:28:11  -cp \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../../jvmtest/TestConfig/resources:/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/lib/testng.jar:/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/lib/jcommander.jar:/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../../jvmtest/functional/JIT_Test/jitt.jar\" \\\n16:28:11  org.testng.TestNG -d \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/jit_jitt_1\" \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../../jvmtest/functional/JIT_Test/testng.xml\" \\\n16:28:11  -testnames \\\n16:28:11  arrayTest,\\\n16:28:11  assemblerTest,\\\n16:28:11  castingTest,\\\n16:28:11  cfgTest,\\\n16:28:11  crashesTest,\\\n16:28:11  ctresolvesTest,\\\n16:28:11  exceptionsTest,\\\n16:28:11  fieldsTest,\\\n16:28:11  floatsTest,\\\n16:28:11  gcTest,\\\n16:28:11  geCastingTest,\\\n16:28:11  immedOpTest,\\\n16:28:11  invokeTest,\\\n16:28:11  mathTest,\\\n16:28:11  math2Test,\\\n16:28:11  miscTest,\\\n16:28:11  os390LinkageTest,\\\n16:28:11  promotionTest,\\\n16:28:11  resolvesTest,\\\n16:28:11  sieveTest,\\\n16:28:11  transitionsTest \\\n16:28:11  -groups level.sanity \\\n16:28:11  -excludegroups d.*.aix_ppc-64_cmprssptrs,d.*.arch.ppc,d.*.os.aix,d.*.bits.64,d.*.generic-all; \\\n16:28:11  if [ $? -eq 0 ] ; then echo \"\"; echo \"jit_jitt_1\"\"_PASSED\"; echo \"\"; cd /home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/..;  else echo \"\"; echo \"jit_jitt_1\"\"_FAILED\"; echo \"\"; fi; } 2&gt;&amp;1 | tee -a \"/home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TKG/test_output_16067716828123/TestTargetResult\";\n16:28:17  [IncludeExcludeTestAnnotationTransformer] [INFO] exclude file is /home/jenkins/workspace/Test_openjdk8_j9_sanity.functional_ppc64_aix_Personal_testList_1/openjdk-tests/TKG/../TestConfig/resources/excludes/latest_exclude_8.txt\n16:28:17  ...\n16:28:17  ... TestNG 6.14.2 by C\u00e9dric Beust (cedric@beust.com)\n16:28:17  ...\n16:28:17  \nCalling Pipeline was cancelled\n16:34:50  Sending interrupt signal to process\n16:35:04  /bin/sh[4]: 20316372 Terminated\n16:35:04  \n16:35:04  jit_jitt_1_FAILED\n</code></pre></div>\n<p dir=\"auto\">It was spinning for 5 mins. then got cancelled. Can we tone this down to something more reasonable, perhaps 64 would be enough?</p>", "author": "fjeremic", "createdAt": "2020-11-30T22:21:36Z", "path": "test/functional/JIT_Test/src/jit/test/jitt/array/multianewarray.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+package jit.test.jitt.array;\n+\n+import org.testng.annotations.Test;\n+import org.testng.Assert;\t\n+import org.testng.AssertJUnit;\n+\n+@Test(groups = { \"level.sanity\",\"component.jit\" }, invocationCount=2)\n+public class multianewarray {\n+\tclass Vector {\n+\t\tlong x;\n+\t\tlong y;\n+\t}\n+\n+\tprivate Integer[][] createMultiArray(int firstDimLength, int secondDimLength) {\n+\t\tInteger[][] multiarray = new Integer[firstDimLength][secondDimLength];\n+\t\tfor (int i = 0; i < firstDimLength; i++) {\n+\t\t\tfor (int j = 0; j < secondDimLength; j++) {\n+\t\t\t\tmultiarray[i][j] = i * j;\n+\t\t\t}\n+\t\t}\n+\t\treturn multiarray;\n+\t}\n+\n+\tprivate Vector[][] createMultiVector(int firstDimLength, int secondDimLength) {\n+\t\tVector[][] multiVector = new Vector[firstDimLength][secondDimLength];\n+\t\tfor (int i = 0; i < firstDimLength; i++) {\n+\t\t\tfor (int j = 0; j < secondDimLength; j++) {\n+\t\t\t\tmultiVector[i][j] = new Vector();\n+\t\t\t\tmultiVector[i][j].x = i * j;\n+\t\t\t\tmultiVector[i][j].y = i * i + j * j;\n+\t\t\t}\n+\t\t}\n+\t\treturn multiVector;\n+\t}\n+\n+\tprivate void testMultiVector(Vector[][] inputVector, int dim1Length, int dim2Length) {\n+\t\tAssertJUnit.assertEquals(dim1Length, inputVector.length);\n+\t\tif (inputVector.length > 0)\n+\t\t\tAssertJUnit.assertEquals(dim2Length, inputVector[0].length);\n+\n+\t\tfor (int i = 0; i < inputVector.length; i++) {\n+\t\t\tfor (int j = 0; j < inputVector[0].length; j++) {\n+\t\t\t\tAssertJUnit.assertEquals(i*j, (inputVector[i][j]).x);\n+\t\t\t\tAssertJUnit.assertEquals(i*i + j*j, (inputVector[i][j]).y);\n+\t\t\t}\n+\t\t}\n+\t}\n+\tprivate void testMultiArray(Integer[][] inputArray, int dim1Length, int dim2Length) {\n+\t\tAssertJUnit.assertEquals(dim1Length, inputArray.length);\n+\t\tif (inputArray.length > 0)\n+\t\t\tAssertJUnit.assertEquals(dim2Length, inputArray[0].length);\n+\t\tfor (int i = 0; i < inputArray.length; i++) {\n+\t\t\tfor (int j = 0; j < inputArray[0].length; j++) {\n+\t\t\t\tAssertJUnit.assertEquals(i*j, (inputArray[i][j]).intValue());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t@Test\n+\tpublic void testmultianewarray() {\n+\t\tInteger[][] inputArray;\n+\t\tVector[][] inputVector;\n+\t\tfor (int i = 0; i < 10000; i++) {\n+\t\t\tinputVector = createMultiVector(0, 0);\n+\t\t\ttestMultiVector(inputVector, 0, 0);\n+\t\t\tinputArray = createMultiArray(0, 0);\n+\t\t\ttestMultiArray(inputArray, 0, 0);\n+\t\t}\n+\t\tfor (int i = 0; i < 10000; i++) {\n+\t\t\tinputVector = createMultiVector(i, 0);\n+\t\t\ttestMultiVector(inputVector, i, 0);\n+\t\t\tinputArray = createMultiArray(i, 0);\n+\t\t\ttestMultiArray(inputArray, i, 0);\n+\t\t}\n+\t\tfor (int i = 0; i < 10000; i++) {", "originalCommit": "f85779ba406f57f872f3765b1546487d3f16dc4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0NDc0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11088#discussion_r532944748", "bodyText": "Changed in : cfd7aa6", "author": "dchopra001", "createdAt": "2020-11-30T22:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0MTY4NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "cfd7aa6e7164f3ba2a7d30e51a5c78ae657b70a3", "url": "https://github.com/eclipse-openj9/openj9/commit/cfd7aa6e7164f3ba2a7d30e51a5c78ae657b70a3", "message": "Rewrite multianewarray evaluator on Z\n\nThis commit adds support for 2-dimensional arrays\nwhere the second dimension has length=0 in the\nmultianewarrayEvaluator. Additionally, some new tests\nare also added to test this functionality.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-11-30T22:26:03Z", "type": "commit"}, {"oid": "cfd7aa6e7164f3ba2a7d30e51a5c78ae657b70a3", "url": "https://github.com/eclipse-openj9/openj9/commit/cfd7aa6e7164f3ba2a7d30e51a5c78ae657b70a3", "message": "Rewrite multianewarray evaluator on Z\n\nThis commit adds support for 2-dimensional arrays\nwhere the second dimension has length=0 in the\nmultianewarrayEvaluator. Additionally, some new tests\nare also added to test this functionality.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-11-30T22:26:03Z", "type": "forcePushed"}]}