{"pr_number": 2778, "pr_title": "Add ability to set Platform when building an image from scratch ", "pr_author": "mpeddada1", "pr_createdAt": "2020-09-22T18:00:51Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2778", "timeline": [{"oid": "49648e69dedaf522ccc6dd1621f782a0f3d3c3fe", "url": "https://github.com/GoogleContainerTools/jib/commit/49648e69dedaf522ccc6dd1621f782a0f3d3c3fe", "message": " Add ability to set platform when building an image from scratch", "committedDate": "2020-09-22T17:24:46Z", "type": "commit"}, {"oid": "e9a581ee731134a85d8e20ed359a40889848d9a3", "url": "https://github.com/GoogleContainerTools/jib/commit/e9a581ee731134a85d8e20ed359a40889848d9a3", "message": "fix formatting and tests", "committedDate": "2020-09-22T17:43:09Z", "type": "commit"}, {"oid": "eb9c20bb95876c0b10b26ceb051c38b1b32f826c", "url": "https://github.com/GoogleContainerTools/jib/commit/eb9c20bb95876c0b10b26ceb051c38b1b32f826c", "message": "assert on registry client in test", "committedDate": "2020-09-22T17:54:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0NDg5MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r492944890", "body": "If multiple platforms are given, this method should return multiple `Image`s (i.e., `List<Image>` as `ImagesAndRegistryClient.images`). That is, it shouldn't use `Collections.singletonList()` on line 112.\r\n\r\nWe should also add a test for the case of multiple platforms.", "bodyText": "If multiple platforms are given, this method should return multiple Images (i.e., List<Image> as ImagesAndRegistryClient.images). That is, it shouldn't use Collections.singletonList() on line 112.\nWe should also add a test for the case of multiple platforms.", "bodyHTML": "<p dir=\"auto\">If multiple platforms are given, this method should return multiple <code>Image</code>s (i.e., <code>List&lt;Image&gt;</code> as <code>ImagesAndRegistryClient.images</code>). That is, it shouldn't use <code>Collections.singletonList()</code> on line 112.</p>\n<p dir=\"auto\">We should also add a test for the case of multiple platforms.</p>", "author": "chanseokoh", "createdAt": "2020-09-22T18:24:31Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -97,9 +97,19 @@ public ImagesAndRegistryClient call()\n     // Skip this step if this is a scratch image\n     ImageReference imageReference = buildContext.getBaseImageConfiguration().getImage();\n     if (imageReference.isScratch()) {\n+      String architecture = \"\";\n+      String os = \"\";\n+      for (Platform platform : buildContext.getContainerConfiguration().getPlatforms()) {", "originalCommit": "eb9c20bb95876c0b10b26ceb051c38b1b32f826c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3ODU4Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493778582", "bodyText": "Right, good call. Changed this method to return multiple images if multiple platforms are given.", "author": "mpeddada1", "createdAt": "2020-09-23T17:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0NDg5MA=="}], "type": "inlineReview"}, {"oid": "7ba877d072512abd0fe000c1c850c4f6e47389dc", "url": "https://github.com/GoogleContainerTools/jib/commit/7ba877d072512abd0fe000c1c850c4f6e47389dc", "message": "Add ability to return multiple images when multiple platforms are given", "committedDate": "2020-09-23T17:28:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4NTk1Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493885956", "body": "By the way we designed this, we can assume `platforms` is never empty. Let's just say\r\n```java\r\nVerify.verify(!platforms.isEmpty());\r\n```", "bodyText": "By the way we designed this, we can assume platforms is never empty. Let's just say\nVerify.verify(!platforms.isEmpty());", "bodyHTML": "<p dir=\"auto\">By the way we designed this, we can assume <code>platforms</code> is never empty. Let's just say</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Verify.verify(!platforms.isEmpty());\n\"><pre><span class=\"pl-smi\">Verify</span><span class=\"pl-k\">.</span>verify(<span class=\"pl-k\">!</span>platforms<span class=\"pl-k\">.</span>isEmpty());</pre></div>", "author": "chanseokoh", "createdAt": "2020-09-23T20:48:32Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -97,9 +98,19 @@ public ImagesAndRegistryClient call()\n     // Skip this step if this is a scratch image\n     ImageReference imageReference = buildContext.getBaseImageConfiguration().getImage();\n     if (imageReference.isScratch()) {\n+      ImmutableSet<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n       eventHandlers.dispatch(LogEvent.progress(\"Getting scratch base image...\"));\n-      return new ImagesAndRegistryClient(\n-          Collections.singletonList(Image.builder(buildContext.getTargetFormat()).build()), null);\n+      if (platforms.isEmpty()) {\n+        return new ImagesAndRegistryClient(\n+            Collections.singletonList(Image.builder(buildContext.getTargetFormat()).build()), null);\n+      }", "originalCommit": "7ba877d072512abd0fe000c1c850c4f6e47389dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4NzEzNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493887135", "body": "Since the platform is actually specified as \"slim arch\" and \"fat system\",\r\n\r\n```suggestion\r\n  public void testCall_scratch_singlePlatform()\r\n```", "bodyText": "Since the platform is actually specified as \"slim arch\" and \"fat system\",\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void testCall_scratch_noPlatformSpecified()\n          \n          \n            \n              public void testCall_scratch_singlePlatform()", "bodyHTML": "<p dir=\"auto\">Since the platform is actually specified as \"slim arch\" and \"fat system\",</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">testCall_scratch_noPlatformSpecified</span>()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">testCall_scratch_singlePlatform</span>()</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "chanseokoh", "createdAt": "2020-09-23T20:50:45Z", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -87,6 +87,40 @@ public void setUp() {\n     pullBaseImageStep = new PullBaseImageStep(buildContext, progressDispatcherFactory);\n   }\n \n+  @Test\n+  public void testCall_scratch_noPlatformSpecified()", "originalCommit": "7ba877d072512abd0fe000c1c850c4f6e47389dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4Nzg1Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493887857", "body": "Nit: how about `Mockito.when(imageConfiguration.getImage()).thenReturn(ImageReference.scratch());`?", "bodyText": "Nit: how about Mockito.when(imageConfiguration.getImage()).thenReturn(ImageReference.scratch());?", "bodyHTML": "<p dir=\"auto\">Nit: how about <code>Mockito.when(imageConfiguration.getImage()).thenReturn(ImageReference.scratch());</code>?</p>", "author": "chanseokoh", "createdAt": "2020-09-23T20:52:06Z", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -87,6 +87,40 @@ public void setUp() {\n     pullBaseImageStep = new PullBaseImageStep(buildContext, progressDispatcherFactory);\n   }\n \n+  @Test\n+  public void testCall_scratch_noPlatformSpecified()\n+      throws LayerPropertyNotFoundException, IOException, RegistryException,\n+          LayerCountMismatchException, BadContainerConfigurationFormatException,\n+          CacheCorruptedException, CredentialRetrievalException {\n+    ImageReference imageReference = ImageReference.scratch();\n+    Mockito.when(imageConfiguration.getImage()).thenReturn(imageReference);", "originalCommit": "7ba877d072512abd0fe000c1c850c4f6e47389dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4ODA3Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493888076", "body": "Also\r\n```java\r\nAssert.assertEquals(1, result.images.size());\r\n```", "bodyText": "Also\nAssert.assertEquals(1, result.images.size());", "bodyHTML": "<p dir=\"auto\">Also</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Assert.assertEquals(1, result.images.size());\"><pre><span class=\"pl-smi\">Assert</span><span class=\"pl-k\">.</span>assertEquals(<span class=\"pl-c1\">1</span>, result<span class=\"pl-k\">.</span>images<span class=\"pl-k\">.</span>size());</pre></div>", "author": "chanseokoh", "createdAt": "2020-09-23T20:52:30Z", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -87,6 +87,40 @@ public void setUp() {\n     pullBaseImageStep = new PullBaseImageStep(buildContext, progressDispatcherFactory);\n   }\n \n+  @Test\n+  public void testCall_scratch_noPlatformSpecified()\n+      throws LayerPropertyNotFoundException, IOException, RegistryException,\n+          LayerCountMismatchException, BadContainerConfigurationFormatException,\n+          CacheCorruptedException, CredentialRetrievalException {\n+    ImageReference imageReference = ImageReference.scratch();\n+    Mockito.when(imageConfiguration.getImage()).thenReturn(imageReference);\n+    ImagesAndRegistryClient result = pullBaseImageStep.call();\n+\n+    Assert.assertEquals(\"slim arch\", result.images.get(0).getArchitecture());", "originalCommit": "7ba877d072512abd0fe000c1c850c4f6e47389dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4ODE2OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493888168", "body": "Also\r\n```java\r\nAssert.assertEquals(2, result.images.size());\r\n```", "bodyText": "Also\nAssert.assertEquals(2, result.images.size());", "bodyHTML": "<p dir=\"auto\">Also</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Assert.assertEquals(2, result.images.size());\n\"><pre><span class=\"pl-smi\">Assert</span><span class=\"pl-k\">.</span>assertEquals(<span class=\"pl-c1\">2</span>, result<span class=\"pl-k\">.</span>images<span class=\"pl-k\">.</span>size());</pre></div>", "author": "chanseokoh", "createdAt": "2020-09-23T20:52:42Z", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -87,6 +87,40 @@ public void setUp() {\n     pullBaseImageStep = new PullBaseImageStep(buildContext, progressDispatcherFactory);\n   }\n \n+  @Test\n+  public void testCall_scratch_noPlatformSpecified()\n+      throws LayerPropertyNotFoundException, IOException, RegistryException,\n+          LayerCountMismatchException, BadContainerConfigurationFormatException,\n+          CacheCorruptedException, CredentialRetrievalException {\n+    ImageReference imageReference = ImageReference.scratch();\n+    Mockito.when(imageConfiguration.getImage()).thenReturn(imageReference);\n+    ImagesAndRegistryClient result = pullBaseImageStep.call();\n+\n+    Assert.assertEquals(\"slim arch\", result.images.get(0).getArchitecture());\n+    Assert.assertEquals(\"fat system\", result.images.get(0).getOs());\n+    Assert.assertNull(result.registryClient);\n+  }\n+\n+  @Test\n+  public void testCall_scratch_multiplePlatformsSpecified()\n+      throws LayerPropertyNotFoundException, IOException, RegistryException,\n+          LayerCountMismatchException, BadContainerConfigurationFormatException,\n+          CacheCorruptedException, CredentialRetrievalException {\n+    ImageReference imageReference = ImageReference.scratch();\n+    Mockito.when(imageConfiguration.getImage()).thenReturn(imageReference);\n+    Mockito.when(containerConfig.getPlatforms())\n+        .thenReturn(\n+            ImmutableSet.of(\n+                new Platform(\"architecture1\", \"os1\"), new Platform(\"architecture2\", \"os2\")));\n+    ImagesAndRegistryClient result = pullBaseImageStep.call();\n+\n+    Assert.assertEquals(\"architecture1\", result.images.get(0).getArchitecture());", "originalCommit": "7ba877d072512abd0fe000c1c850c4f6e47389dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4ODMwOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493888308", "body": "ditto", "bodyText": "ditto", "bodyHTML": "<p dir=\"auto\">ditto</p>", "author": "chanseokoh", "createdAt": "2020-09-23T20:52:58Z", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -87,6 +87,40 @@ public void setUp() {\n     pullBaseImageStep = new PullBaseImageStep(buildContext, progressDispatcherFactory);\n   }\n \n+  @Test\n+  public void testCall_scratch_noPlatformSpecified()\n+      throws LayerPropertyNotFoundException, IOException, RegistryException,\n+          LayerCountMismatchException, BadContainerConfigurationFormatException,\n+          CacheCorruptedException, CredentialRetrievalException {\n+    ImageReference imageReference = ImageReference.scratch();\n+    Mockito.when(imageConfiguration.getImage()).thenReturn(imageReference);\n+    ImagesAndRegistryClient result = pullBaseImageStep.call();\n+\n+    Assert.assertEquals(\"slim arch\", result.images.get(0).getArchitecture());\n+    Assert.assertEquals(\"fat system\", result.images.get(0).getOs());\n+    Assert.assertNull(result.registryClient);\n+  }\n+\n+  @Test\n+  public void testCall_scratch_multiplePlatformsSpecified()\n+      throws LayerPropertyNotFoundException, IOException, RegistryException,\n+          LayerCountMismatchException, BadContainerConfigurationFormatException,\n+          CacheCorruptedException, CredentialRetrievalException {\n+    ImageReference imageReference = ImageReference.scratch();\n+    Mockito.when(imageConfiguration.getImage()).thenReturn(imageReference);", "originalCommit": "7ba877d072512abd0fe000c1c850c4f6e47389dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4OTg5NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493889895", "body": "I think we should test non-default values, such as \"windows.\"", "bodyText": "I think we should test non-default values, such as \"windows.\"", "bodyHTML": "<p dir=\"auto\">I think we should test non-default values, such as \"windows.\"</p>", "author": "chanseokoh", "createdAt": "2020-09-23T20:56:04Z", "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/JibIntegrationTest.java", "diffHunk": "@@ -220,19 +222,44 @@ public void testBasic_tarBaseImage_jibImageToDockerDaemon()\n   }\n \n   @Test\n-  public void testScratch()\n+  public void testScratch_singlePlatform()\n       throws IOException, InterruptedException, ExecutionException, RegistryException,\n           CacheDirectoryCreationException {\n     ImageReference targetImageReference =\n         ImageReference.of(\"localhost:5000\", \"jib-core\", \"basic-scratch\");\n-    Jib.fromScratch().containerize(getLocalRegistryContainerizer(targetImageReference));\n+    Jib.fromScratch()\n+        .setPlatforms(ImmutableSet.of(new Platform(\"arm64\", \"linux\")))", "originalCommit": "7ba877d072512abd0fe000c1c850c4f6e47389dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NTAxMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r496755012", "bodyText": "Modified the tests to use non-default values.", "author": "mpeddada1", "createdAt": "2020-09-29T14:17:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4OTg5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg5MDA4Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493890083", "body": "ditto", "bodyText": "ditto", "bodyHTML": "<p dir=\"auto\">ditto</p>", "author": "chanseokoh", "createdAt": "2020-09-23T20:56:25Z", "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/JibIntegrationTest.java", "diffHunk": "@@ -220,19 +222,44 @@ public void testBasic_tarBaseImage_jibImageToDockerDaemon()\n   }\n \n   @Test\n-  public void testScratch()\n+  public void testScratch_singlePlatform()\n       throws IOException, InterruptedException, ExecutionException, RegistryException,\n           CacheDirectoryCreationException {\n     ImageReference targetImageReference =\n         ImageReference.of(\"localhost:5000\", \"jib-core\", \"basic-scratch\");\n-    Jib.fromScratch().containerize(getLocalRegistryContainerizer(targetImageReference));\n+    Jib.fromScratch()\n+        .setPlatforms(ImmutableSet.of(new Platform(\"arm64\", \"linux\")))\n+        .containerize(getLocalRegistryContainerizer(targetImageReference));\n \n     // Check that resulting image has no layers\n     localRegistry.pull(targetImageReference.toString());\n     String inspectOutput = new Command(\"docker\", \"inspect\", targetImageReference.toString()).run();\n     Assert.assertFalse(\n         \"docker inspect output contained layers: \" + inspectOutput,\n         inspectOutput.contains(\"\\\"Layers\\\": [\"));\n+\n+    // Check that resulting image has specified architecture and os set.\n+    Assert.assertTrue(inspectOutput.contains(\"\\\"Architecture\\\": \\\"arm64\\\"\"));\n+    Assert.assertTrue(inspectOutput.contains(\"\\\"Os\\\": \\\"linux\\\"\"));\n+  }\n+\n+  @Test\n+  public void testScratch_multiPlatform()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    // TODO: Modify this test to check for multiple platforms instead of throwing exception once\n+    // multi-platform feature is enabled.\n+    ImageReference targetImageReference =\n+        ImageReference.of(\"localhost:5000\", \"jib-core\", \"basic-scratch\");\n+    try {\n+      Jib.fromScratch()\n+          .setPlatforms(\n+              ImmutableSet.of(new Platform(\"arm64\", \"linux\"), new Platform(\"amd64\", \"linux\")))", "originalCommit": "7ba877d072512abd0fe000c1c850c4f6e47389dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NTU5Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r496755596", "bodyText": "Done:)", "author": "mpeddada1", "createdAt": "2020-09-29T14:17:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg5MDA4Mw=="}], "type": "inlineReview"}, {"oid": "3a940136cb6bba804e28784d877fff2dd4ff291f", "url": "https://github.com/GoogleContainerTools/jib/commit/3a940136cb6bba804e28784d877fff2dd4ff291f", "message": "assume platforms is never empty and fix tests", "committedDate": "2020-09-24T22:24:45Z", "type": "commit"}, {"oid": "aba0cd6fa10ea7c0894e193399738f65a65fd6bb", "url": "https://github.com/GoogleContainerTools/jib/commit/aba0cd6fa10ea7c0894e193399738f65a65fd6bb", "message": "use non-default values for integration tests", "committedDate": "2020-09-29T14:11:03Z", "type": "commit"}, {"oid": "3aea8ec594c804555142947d67cf82c1791dfc17", "url": "https://github.com/GoogleContainerTools/jib/commit/3aea8ec594c804555142947d67cf82c1791dfc17", "message": "small fix", "committedDate": "2020-09-29T14:14:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwNzEwMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r496807100", "body": "`private static`", "bodyText": "private static", "bodyHTML": "<p dir=\"auto\"><code>private static</code></p>", "author": "chanseokoh", "createdAt": "2020-09-29T15:21:28Z", "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/JibIntegrationTest.java", "diffHunk": "@@ -326,4 +386,18 @@ public void testManifestListReferenceByShaDoesNotFail()\n     Jib.from(sourceImageReferenceAsManifestList).containerize(containerizer);\n     // pass, no exceptions thrown\n   }\n+\n+  public RegistryClient getRegistryClient(ImageReference imageReference, Credential credential) {", "originalCommit": "3aea8ec594c804555142947d67cf82c1791dfc17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1148bf7c97d52fbb82f0637d757ef98891691a08", "url": "https://github.com/GoogleContainerTools/jib/commit/1148bf7c97d52fbb82f0637d757ef98891691a08", "message": "minor change to CHANGELOG and make helper method private static", "committedDate": "2020-09-29T15:41:22Z", "type": "commit"}]}