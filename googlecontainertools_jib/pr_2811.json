{"pr_number": 2811, "pr_title": "Add (new) Jib Cli parameters in base command class.", "pr_author": "loosebazooka", "pr_createdAt": "2020-10-07T23:56:37Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2811", "timeline": [{"oid": "070f6c32cdd633c330f4963323c749a6f2c84ebf", "url": "https://github.com/GoogleContainerTools/jib/commit/070f6c32cdd633c330f4963323c749a6f2c84ebf", "message": "Add (new) Jib Cli parameters in base command class.", "committedDate": "2020-10-07T23:57:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2MTk3NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2811#discussion_r503361975", "body": "How about doing something like this: \r\n```suggestion\r\n    MissingParameterExceptin mpe = assertThrows(MissingParameterException.class, () ->  CommandLine.populateCommand(new JibCli(), \"\"));\r\n    assertThat(mpe).hasMessageThat().contains(\"Missing required option: '--target=<target-image>'\");\r\n```", "bodyText": "How about doing something like this:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try {\n          \n          \n            \n                  CommandLine.populateCommand(new JibCli(), \"\");\n          \n          \n            \n                  fail();\n          \n          \n            \n                } catch (CommandLine.MissingParameterException mpe) {\n          \n          \n            \n                  assertThat(mpe.getMessage()).isEqualTo(\"Missing required option: '--target=<target-image>'\");\n          \n          \n            \n                }\n          \n          \n            \n                MissingParameterExceptin mpe = assertThrows(MissingParameterException.class, () ->  CommandLine.populateCommand(new JibCli(), \"\"));\n          \n          \n            \n                assertThat(mpe).hasMessageThat().contains(\"Missing required option: '--target=<target-image>'\");", "bodyHTML": "<p dir=\"auto\">How about doing something like this:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">CommandLine</span><span class=\"pl-k\">.</span>populateCommand(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">JibCli</span>(), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      fail();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">CommandLine</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">MissingParameterException</span> mpe) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      assertThat(mpe<span class=\"pl-k\">.</span>getMessage())<span class=\"pl-k\">.</span>isEqualTo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Missing required option: '--target=&lt;target-image&gt;'<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-smi\">MissingParameterExceptin</span> mpe <span class=\"pl-k\">=</span> assertThrows(<span class=\"pl-smi\">MissingParameterException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span>  <span class=\"pl-smi\">CommandLine</span><span class=\"pl-k\">.</span>populateCommand(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">JibCli</span>(), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    assertThat(mpe)<span class=\"pl-k\">.</span>hasMessageThat()<span class=\"pl-k\">.</span>contains(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Missing required option: '--target=&lt;target-image&gt;'<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mpeddada1", "createdAt": "2020-10-12T15:11:04Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import com.google.cloud.tools.jib.api.Credential;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import picocli.CommandLine;\n+\n+public class JibCliTest {\n+  @Test\n+  public void testParse_missingRequiredParams() {\n+    try {\n+      CommandLine.populateCommand(new JibCli(), \"\");\n+      fail();\n+    } catch (CommandLine.MissingParameterException mpe) {\n+      assertThat(mpe.getMessage()).isEqualTo(\"Missing required option: '--target=<target-image>'\");\n+    }", "originalCommit": "97917975e106bea8886c770618c7943786cda533", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzNDAyMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2811#discussion_r503434021", "bodyText": "oh interesting, new in junit 4.13?", "author": "loosebazooka", "createdAt": "2020-10-12T17:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2MTk3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2MzU1NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2811#discussion_r503363555", "body": "same here, with using assertThrows and assertThat().hasMessageThat().contains()", "bodyText": "same here, with using assertThrows and assertThat().hasMessageThat().contains()", "bodyHTML": "<p dir=\"auto\">same here, with using assertThrows and assertThat().hasMessageThat().contains()</p>", "author": "mpeddada1", "createdAt": "2020-10-12T15:13:44Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import com.google.cloud.tools.jib.api.Credential;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import picocli.CommandLine;\n+\n+public class JibCliTest {\n+  @Test\n+  public void testParse_missingRequiredParams() {\n+    try {\n+      CommandLine.populateCommand(new JibCli(), \"\");\n+      fail();\n+    } catch (CommandLine.MissingParameterException mpe) {\n+      assertThat(mpe.getMessage()).isEqualTo(\"Missing required option: '--target=<target-image>'\");\n+    }\n+  }\n+\n+  @Test\n+  public void testParse_defaults() {\n+    JibCli jibCli = CommandLine.populateCommand(new JibCli(), \"-t\", \"test-image-ref\");\n+\n+    assertThat(jibCli.getTargetImage()).isEqualTo(\"test-image-ref\");\n+    assertThat(jibCli.getUsernamePassword()).isEmpty();\n+    assertThat(jibCli.getToUsernamePassword()).isEmpty();\n+    assertThat(jibCli.getFromUsernamePassword()).isEmpty();\n+    assertThat(jibCli.getCredentialHelpers()).isEmpty();\n+    assertThat(jibCli.getBuildFile()).isEqualTo(Paths.get(\"./jib.yaml\"));\n+    assertThat(jibCli.getContextRoot()).isEqualTo(Paths.get(\".\"));\n+    assertThat(jibCli.getTags()).isEmpty();\n+    assertThat(jibCli.getTemplateParameters()).isEmpty();\n+    assertThat(jibCli.getApplicationCache()).isEmpty();\n+    assertThat(jibCli.getBaseImageCache()).isEmpty();\n+    assertThat(jibCli.isAllowInsecureRegistries()).isFalse();\n+    assertThat(jibCli.isSendCredentialsOverHttp()).isFalse();\n+    assertThat(jibCli.getVerbosity()).isEqualTo(\"lifecycle\");\n+    assertThat(jibCli.isStacktrace()).isFalse();\n+    assertThat(jibCli.isHttpTrace()).isFalse();\n+    assertThat(jibCli.isSerialize()).isFalse();\n+  }\n+\n+  @Test\n+  public void testParse_shortFormParams() {\n+    JibCli jibCli =\n+        CommandLine.populateCommand(\n+            new JibCli(),\n+            \"-t\",\n+            \"test-image-ref\",\n+            \"-c\",\n+            \"test-context\",\n+            \"-b\",\n+            \"test-build-file\",\n+            \"-p\",\n+            \"param1=value1\",\n+            \"-p\",\n+            \"param2=value2\");\n+\n+    assertThat(jibCli.getTargetImage()).isEqualTo(\"test-image-ref\");\n+    assertThat(jibCli.getUsernamePassword()).isEmpty();\n+    assertThat(jibCli.getToUsernamePassword()).isEmpty();\n+    assertThat(jibCli.getFromUsernamePassword()).isEmpty();\n+    assertThat(jibCli.getCredentialHelpers()).isEmpty();\n+    assertThat(jibCli.getBuildFile()).isEqualTo(Paths.get(\"test-build-file\"));\n+    assertThat(jibCli.getContextRoot()).isEqualTo(Paths.get(\"test-context\"));\n+    assertThat(jibCli.getTags()).isEmpty();\n+    assertThat(jibCli.getTemplateParameters())\n+        .isEqualTo(ImmutableMap.of(\"param1\", \"value1\", \"param2\", \"value2\"));\n+    assertThat(jibCli.getApplicationCache()).isEmpty();\n+    assertThat(jibCli.getBaseImageCache()).isEmpty();\n+    assertThat(jibCli.isAllowInsecureRegistries()).isFalse();\n+    assertThat(jibCli.isSendCredentialsOverHttp()).isFalse();\n+    assertThat(jibCli.getVerbosity()).isEqualTo(\"lifecycle\");\n+    assertThat(jibCli.isStacktrace()).isFalse();\n+    assertThat(jibCli.isStacktrace()).isFalse();\n+    assertThat(jibCli.isHttpTrace()).isFalse();\n+    assertThat(jibCli.isSerialize()).isFalse();\n+  }\n+\n+  @Test\n+  public void testParse_longFormParams() {\n+    JibCli jibCli =\n+        CommandLine.populateCommand(\n+            new JibCli(),\n+            \"--target\",\n+            \"test-image-ref\",\n+            \"--context\",\n+            \"test-context\",\n+            \"--build-file\",\n+            \"test-build-file\",\n+            \"--parameter\",\n+            \"param1=value1\",\n+            \"--parameter\",\n+            \"param2=value2\",\n+            \"--credential-helper\",\n+            \"helper1\",\n+            \"--credential-helper\",\n+            \"helper2\",\n+            \"--tags\",\n+            \"tag1,tag2,tag3\",\n+            \"--allow-insecure-registries\",\n+            \"--send-credentials-over-http\",\n+            \"--application-cache\",\n+            \"test-application-cache\",\n+            \"--base-image-cache\",\n+            \"test-base-image-cache\",\n+            \"--verbosity\",\n+            \"info\",\n+            \"--stacktrace\",\n+            \"--http-trace\",\n+            \"--serialize\");\n+\n+    assertThat(jibCli.getTargetImage()).isEqualTo(\"test-image-ref\");\n+    assertThat(jibCli.getUsernamePassword()).isEmpty();\n+    assertThat(jibCli.getToUsernamePassword()).isEmpty();\n+    assertThat(jibCli.getFromUsernamePassword()).isEmpty();\n+    assertThat(jibCli.getCredentialHelpers()).isEqualTo(ImmutableList.of(\"helper1\", \"helper2\"));\n+    assertThat(jibCli.getBuildFile()).isEqualTo(Paths.get(\"test-build-file\"));\n+    assertThat(jibCli.getContextRoot()).isEqualTo(Paths.get(\"test-context\"));\n+    assertThat(jibCli.getTags()).isEqualTo(ImmutableList.of(\"tag1\", \"tag2\", \"tag3\"));\n+    assertThat(jibCli.getTemplateParameters())\n+        .isEqualTo(ImmutableMap.of(\"param1\", \"value1\", \"param2\", \"value2\"));\n+    assertThat(jibCli.getApplicationCache()).hasValue(Paths.get(\"test-application-cache\"));\n+    assertThat(jibCli.getBaseImageCache()).hasValue(Paths.get(\"test-base-image-cache\"));\n+    assertThat(jibCli.isAllowInsecureRegistries()).isTrue();\n+    assertThat(jibCli.isSendCredentialsOverHttp()).isTrue();\n+    assertThat(jibCli.getVerbosity()).isEqualTo(\"info\");\n+    assertThat(jibCli.isStacktrace()).isTrue();\n+    assertThat(jibCli.isHttpTrace()).isTrue();\n+    assertThat(jibCli.isSerialize()).isTrue();\n+  }\n+\n+  @Test\n+  public void testParse_buildFileDefaultForContext() {\n+    JibCli jibCli =\n+        CommandLine.populateCommand(\n+            new JibCli(), \"--target\", \"test-image-ref\", \"--context\", \"test-context\");\n+\n+    assertThat(jibCli.getBuildFile()).isEqualTo(Paths.get(\"test-context/jib.yaml\"));\n+    assertThat(jibCli.getContextRoot()).isEqualTo(Paths.get(\"test-context\"));\n+  }\n+\n+  @Test\n+  public void testParse_usernamePassword() {\n+    JibCli jibCli =\n+        CommandLine.populateCommand(\n+            new JibCli(),\n+            \"--target\",\n+            \"test-image-ref\",\n+            \"--username\",\n+            \"test-username\",\n+            \"--password\",\n+            \"test-password\");\n+\n+    assertThat(jibCli.getUsernamePassword())\n+        .hasValue(Credential.from(\"test-username\", \"test-password\"));\n+    assertThat(jibCli.getToUsernamePassword()).isEmpty();\n+    assertThat(jibCli.getFromUsernamePassword()).isEmpty();\n+  }\n+\n+  @Test\n+  public void testParse_toUsernamePassword() {\n+    JibCli jibCli =\n+        CommandLine.populateCommand(\n+            new JibCli(),\n+            \"--target\",\n+            \"test-image-ref\",\n+            \"--to-username\",\n+            \"test-username\",\n+            \"--to-password\",\n+            \"test-password\");\n+\n+    assertThat(jibCli.getToUsernamePassword())\n+        .hasValue(Credential.from(\"test-username\", \"test-password\"));\n+    assertThat(jibCli.getFromUsernamePassword()).isEmpty();\n+    assertThat(jibCli.getUsernamePassword()).isEmpty();\n+  }\n+\n+  @Test\n+  public void testParse_fromUsernamePassword() {\n+    JibCli jibCli =\n+        CommandLine.populateCommand(\n+            new JibCli(),\n+            \"--target\",\n+            \"test-image-ref\",\n+            \"--from-username\",\n+            \"test-username\",\n+            \"--from-password\",\n+            \"test-password\");\n+\n+    assertThat(jibCli.getFromUsernamePassword())\n+        .hasValue(Credential.from(\"test-username\", \"test-password\"));\n+    assertThat(jibCli.getToUsernamePassword()).isEmpty();\n+    assertThat(jibCli.getUsernamePassword()).isEmpty();\n+  }\n+\n+  @Test\n+  public void testParse_toAndFromUsernamePassword() {\n+    JibCli jibCli =\n+        CommandLine.populateCommand(\n+            new JibCli(),\n+            \"--target\",\n+            \"test-image-ref\",\n+            \"--to-username\",\n+            \"test-username-1\",\n+            \"--to-password\",\n+            \"test-password-1\",\n+            \"--from-username\",\n+            \"test-username-2\",\n+            \"--from-password\",\n+            \"test-password-2\");\n+\n+    assertThat(jibCli.getToUsernamePassword())\n+        .hasValue(Credential.from(\"test-username-1\", \"test-password-1\"));\n+    assertThat(jibCli.getFromUsernamePassword())\n+        .hasValue(Credential.from(\"test-username-2\", \"test-password-2\"));\n+    assertThat(jibCli.getUsernamePassword()).isEmpty();\n+  }\n+\n+  @RunWith(Parameterized.class)\n+  public static class UsernamePasswordBothRequired {\n+    @Parameterized.Parameters(name = \"{0},{1}\")\n+    public static Collection<Object[]> data() {\n+      return Arrays.asList(\n+          new Object[][] {\n+            {\"--username\", \"--password\"},\n+            {\"--to-username\", \"--to-password\"},\n+            {\"--from-username\", \"--from-password\"}\n+          });\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public String usernameField;\n+\n+    @Parameterized.Parameter(1)\n+    public String passwordField;\n+\n+    @Test\n+    public void testParse_usernameWithoutPassword() {\n+      try {\n+        CommandLine.populateCommand(\n+            new JibCli(), \"--target\", \"test-image-ref\", usernameField, \"test-username\");\n+        fail();\n+      } catch (CommandLine.MissingParameterException mpe) {\n+        assertThat(mpe.getMessage())\n+            .isEqualTo(\"Error: Missing required argument(s): \" + passwordField);\n+      }\n+    }\n+\n+    @Test\n+    public void testParse_passwordWithoutUsername() {\n+      try {\n+        CommandLine.populateCommand(\n+            new JibCli(), \"--target\", \"test-image-ref\", passwordField, \"test-password\");\n+        fail();\n+      } catch (CommandLine.MissingParameterException mpe) {\n+        assertThat(mpe.getMessage())\n+            .isEqualTo(\"Error: Missing required argument(s): \" + usernameField + \"=<username>\");\n+      }\n+    }\n+  }\n+\n+  @RunWith(Parameterized.class)\n+  public static class UsernamePasswordNotAllowedWithToAndFrom {\n+    @Parameterized.Parameters(name = \"{0},{1}\")\n+    public static Collection<Object[]> data() {\n+      return Arrays.asList(\n+          new Object[][] {\n+            {\"--to-username\", \"--to-password\"},\n+            {\"--from-username\", \"--from-password\"}\n+          });\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public String usernameField;\n+\n+    @Parameterized.Parameter(1)\n+    public String passwordField;\n+\n+    @Test\n+    public void testParse_usernameWithoutPassword() {", "originalCommit": "97917975e106bea8886c770618c7943786cda533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM3MjQ2MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2811#discussion_r503372461", "body": "description incorrect", "bodyText": "description incorrect", "bodyHTML": "<p dir=\"auto\">description incorrect</p>", "author": "chanseokoh", "createdAt": "2020-10-12T15:28:16Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/JibCli.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Credential;\n+import com.google.common.base.Verify;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import picocli.CommandLine;\n+import picocli.CommandLine.ArgGroup;\n+import picocli.CommandLine.Option;\n+\n+@CommandLine.Command(\n+    name = \"jib\",\n+    versionProvider = VersionInfo.class,\n+    mixinStandardHelpOptions = true,\n+    showAtFileInUsageHelp = true,\n+    synopsisSubcommandLabel = \"COMMAND\",\n+    description = \"A tool for creating container images\")\n+public class JibCli {\n+  @Option(\n+      names = \"--verbosity\",\n+      paramLabel = \"<level>\",\n+      defaultValue = \"lifecycle\",\n+      description = \"set logging verbosity (error, warn, lifecycle (default), info, debug)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private String verbosity;\n+\n+  // Hidden debug parameters\n+  @Option(names = \"--stacktrace\", hidden = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean stacktrace;\n+\n+  @Option(names = \"--http-trace\", hidden = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean httpTrace;\n+\n+  @Option(names = \"--serialize\", hidden = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean serialize;\n+\n+  // Build Configuration\n+  @Option(\n+      names = {\"-t\", \"--target\"},\n+      required = true,\n+      paramLabel = \"<target-image>\",\n+      description =\n+          \"The destination image reference or jib style url,%nexamples:%n gcr.io/project/image,%n registry://image-ref,%n docker://image,%n tar://path\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private String targetImage;\n+\n+  @Option(\n+      names = {\"-c\", \"--context\"},\n+      defaultValue = \".\",\n+      paramLabel = \"<project-root>\",\n+      description = \"The context root directory of the build (ex: path/to/my/build/things)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path contextRoot;\n+\n+  @Option(\n+      names = {\"-b\", \"--build-file\"},\n+      paramLabel = \"<build-file>\",\n+      description = \"The path to the build file (ex: path/to/other-jib.yaml)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path buildFile;\n+\n+  // unfortunately we cannot verify for --target=tar://... this is required, we must do this after\n+  // pico cli is done parsing\n+  @Option(\n+      names = \"--name\",\n+      paramLabel = \"<image-reference>\",\n+      description =\n+          \"The image reference to inject into the tar configuration (required when using --target tar://...)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private String name;\n+\n+  @Option(\n+      names = {\"-p\", \"--parameter\"},\n+      paramLabel = \"<name>=<value>\",\n+      description =\n+          \"templating parameter to inject into build file, replace $${<name>} with <value> (repeatable)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Map<String, String> templateParameters = new HashMap<String, String>();\n+\n+  @Option(\n+      names = \"--tags\",\n+      paramLabel = \"<tag>\",\n+      split = \",\",\n+      description = \"Additional tags for target image\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private List<String> tags = new ArrayList<String>();\n+\n+  @Option(\n+      names = \"--base-image-cache\",\n+      paramLabel = \"<cache-directory>\",\n+      description = \"A path to a base image cache\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path baseImageCache;\n+\n+  @Option(\n+      names = \"--application-cache\",\n+      paramLabel = \"<cache-directory>\",\n+      description = \"A path to an application cache\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path applicationCache;\n+\n+  // Auth/Security\n+  @Option(\n+      names = \"--allow-insecure-registries\",\n+      description = \"Allow jib to communicate with registries over https\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean allowInsecureRegistries;\n+\n+  @Option(\n+      names = \"--send-credentials-over-http\",\n+      description = \"Allow jib to communicate with registries over https\")", "originalCommit": "97917975e106bea8886c770618c7943786cda533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM3NzU1NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2811#discussion_r503377555", "body": "How about calling this `--additional-tags`?\r\n\r\nI've seen many occasions people put `latest` into `<tags>` unnecessarily. And actually our code can cause confusion too, as we call this `getTags()` at the front (as the param name is `<tags>`) and later `getAdditionalTags()`. `BuildContext` also has `getAllTargetImageTags()` and `setAdditionalTargetImageTags()` to distinguish them.", "bodyText": "How about calling this --additional-tags?\nI've seen many occasions people put latest into <tags> unnecessarily. And actually our code can cause confusion too, as we call this getTags() at the front (as the param name is <tags>) and later getAdditionalTags(). BuildContext also has getAllTargetImageTags() and setAdditionalTargetImageTags() to distinguish them.", "bodyHTML": "<p dir=\"auto\">How about calling this <code>--additional-tags</code>?</p>\n<p dir=\"auto\">I've seen many occasions people put <code>latest</code> into <code>&lt;tags&gt;</code> unnecessarily. And actually our code can cause confusion too, as we call this <code>getTags()</code> at the front (as the param name is <code>&lt;tags&gt;</code>) and later <code>getAdditionalTags()</code>. <code>BuildContext</code> also has <code>getAllTargetImageTags()</code> and <code>setAdditionalTargetImageTags()</code> to distinguish them.</p>", "author": "chanseokoh", "createdAt": "2020-10-12T15:36:48Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/JibCli.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Credential;\n+import com.google.common.base.Verify;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import picocli.CommandLine;\n+import picocli.CommandLine.ArgGroup;\n+import picocli.CommandLine.Option;\n+\n+@CommandLine.Command(\n+    name = \"jib\",\n+    versionProvider = VersionInfo.class,\n+    mixinStandardHelpOptions = true,\n+    showAtFileInUsageHelp = true,\n+    synopsisSubcommandLabel = \"COMMAND\",\n+    description = \"A tool for creating container images\")\n+public class JibCli {\n+  @Option(\n+      names = \"--verbosity\",\n+      paramLabel = \"<level>\",\n+      defaultValue = \"lifecycle\",\n+      description = \"set logging verbosity (error, warn, lifecycle (default), info, debug)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private String verbosity;\n+\n+  // Hidden debug parameters\n+  @Option(names = \"--stacktrace\", hidden = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean stacktrace;\n+\n+  @Option(names = \"--http-trace\", hidden = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean httpTrace;\n+\n+  @Option(names = \"--serialize\", hidden = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean serialize;\n+\n+  // Build Configuration\n+  @Option(\n+      names = {\"-t\", \"--target\"},\n+      required = true,\n+      paramLabel = \"<target-image>\",\n+      description =\n+          \"The destination image reference or jib style url,%nexamples:%n gcr.io/project/image,%n registry://image-ref,%n docker://image,%n tar://path\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private String targetImage;\n+\n+  @Option(\n+      names = {\"-c\", \"--context\"},\n+      defaultValue = \".\",\n+      paramLabel = \"<project-root>\",\n+      description = \"The context root directory of the build (ex: path/to/my/build/things)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path contextRoot;\n+\n+  @Option(\n+      names = {\"-b\", \"--build-file\"},\n+      paramLabel = \"<build-file>\",\n+      description = \"The path to the build file (ex: path/to/other-jib.yaml)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path buildFile;\n+\n+  // unfortunately we cannot verify for --target=tar://... this is required, we must do this after\n+  // pico cli is done parsing\n+  @Option(\n+      names = \"--name\",\n+      paramLabel = \"<image-reference>\",\n+      description =\n+          \"The image reference to inject into the tar configuration (required when using --target tar://...)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private String name;\n+\n+  @Option(\n+      names = {\"-p\", \"--parameter\"},\n+      paramLabel = \"<name>=<value>\",\n+      description =\n+          \"templating parameter to inject into build file, replace $${<name>} with <value> (repeatable)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Map<String, String> templateParameters = new HashMap<String, String>();\n+\n+  @Option(\n+      names = \"--tags\",", "originalCommit": "97917975e106bea8886c770618c7943786cda533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4MDI2Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2811#discussion_r503380262", "body": "```suggestion\r\n   * @return an optional Credential\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return a optional Credential\n          \n          \n            \n               * @return an optional Credential", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> <span class=\"x x-first x-last\">a</span> optional <span class=\"pl-smi\">Credential</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> <span class=\"x x-first x-last\">an</span> optional <span class=\"pl-smi\">Credential</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "chanseokoh", "createdAt": "2020-10-12T15:41:30Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/JibCli.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Credential;\n+import com.google.common.base.Verify;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import picocli.CommandLine;\n+import picocli.CommandLine.ArgGroup;\n+import picocli.CommandLine.Option;\n+\n+@CommandLine.Command(\n+    name = \"jib\",\n+    versionProvider = VersionInfo.class,\n+    mixinStandardHelpOptions = true,\n+    showAtFileInUsageHelp = true,\n+    synopsisSubcommandLabel = \"COMMAND\",\n+    description = \"A tool for creating container images\")\n+public class JibCli {\n+  @Option(\n+      names = \"--verbosity\",\n+      paramLabel = \"<level>\",\n+      defaultValue = \"lifecycle\",\n+      description = \"set logging verbosity (error, warn, lifecycle (default), info, debug)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private String verbosity;\n+\n+  // Hidden debug parameters\n+  @Option(names = \"--stacktrace\", hidden = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean stacktrace;\n+\n+  @Option(names = \"--http-trace\", hidden = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean httpTrace;\n+\n+  @Option(names = \"--serialize\", hidden = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean serialize;\n+\n+  // Build Configuration\n+  @Option(\n+      names = {\"-t\", \"--target\"},\n+      required = true,\n+      paramLabel = \"<target-image>\",\n+      description =\n+          \"The destination image reference or jib style url,%nexamples:%n gcr.io/project/image,%n registry://image-ref,%n docker://image,%n tar://path\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private String targetImage;\n+\n+  @Option(\n+      names = {\"-c\", \"--context\"},\n+      defaultValue = \".\",\n+      paramLabel = \"<project-root>\",\n+      description = \"The context root directory of the build (ex: path/to/my/build/things)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path contextRoot;\n+\n+  @Option(\n+      names = {\"-b\", \"--build-file\"},\n+      paramLabel = \"<build-file>\",\n+      description = \"The path to the build file (ex: path/to/other-jib.yaml)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path buildFile;\n+\n+  // unfortunately we cannot verify for --target=tar://... this is required, we must do this after\n+  // pico cli is done parsing\n+  @Option(\n+      names = \"--name\",\n+      paramLabel = \"<image-reference>\",\n+      description =\n+          \"The image reference to inject into the tar configuration (required when using --target tar://...)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private String name;\n+\n+  @Option(\n+      names = {\"-p\", \"--parameter\"},\n+      paramLabel = \"<name>=<value>\",\n+      description =\n+          \"templating parameter to inject into build file, replace $${<name>} with <value> (repeatable)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Map<String, String> templateParameters = new HashMap<String, String>();\n+\n+  @Option(\n+      names = \"--tags\",\n+      paramLabel = \"<tag>\",\n+      split = \",\",\n+      description = \"Additional tags for target image\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private List<String> tags = new ArrayList<String>();\n+\n+  @Option(\n+      names = \"--base-image-cache\",\n+      paramLabel = \"<cache-directory>\",\n+      description = \"A path to a base image cache\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path baseImageCache;\n+\n+  @Option(\n+      names = \"--application-cache\",\n+      paramLabel = \"<cache-directory>\",\n+      description = \"A path to an application cache\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path applicationCache;\n+\n+  // Auth/Security\n+  @Option(\n+      names = \"--allow-insecure-registries\",\n+      description = \"Allow jib to communicate with registries over https\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean allowInsecureRegistries;\n+\n+  @Option(\n+      names = \"--send-credentials-over-http\",\n+      description = \"Allow jib to communicate with registries over https\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean sendCredentialsOverHttp;\n+\n+  @Option(\n+      names = {\"--credential-helper\"},\n+      paramLabel = \"<credential-helper>\",\n+      description =\n+          \"Add a credential helper, either a path to the helper, or a suffix for an executable named `docker-credential-<suffix>` (repeatable)\")\n+  private List<String> credentialHelpers = new ArrayList<>();\n+\n+  @ArgGroup(exclusive = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private UsernamePassword usernamePassword;\n+\n+  private static class UsernamePassword {\n+    @ArgGroup(exclusive = false)\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    SingleUsernamePassword single;\n+\n+    @ArgGroup(exclusive = false)\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    MultiUsernamePassword multi;\n+  }\n+\n+  private static class MultiUsernamePassword {\n+    @ArgGroup(exclusive = false)\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    ToUsernamePassword to;\n+\n+    @ArgGroup(exclusive = false)\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    FromUsernamePassword from;\n+  }\n+\n+  private static class SingleUsernamePassword {\n+    @Option(\n+        names = \"--username\",\n+        required = true,\n+        description = \"username for communicating with target/base image registry\")\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    String username;\n+\n+    @Option(\n+        names = \"--password\",\n+        arity = \"0..1\",\n+        required = true,\n+        interactive = true,\n+        description = \"password for communicating with target/base image registry\")\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    String password;\n+  }\n+\n+  private static class ToUsernamePassword {\n+    @Option(\n+        names = \"--to-username\",\n+        required = true,\n+        description = \"username for communicating with target image registry\")\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    String username;\n+\n+    @Option(\n+        names = \"--to-password\",\n+        arity = \"0..1\",\n+        interactive = true,\n+        required = true,\n+        description = \"password for communicating with target image registry\")\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    String password;\n+  }\n+\n+  private static class FromUsernamePassword {\n+    @Option(\n+        names = \"--from-username\",\n+        required = true,\n+        description = \"username for communicating with base image registry\")\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    String username;\n+\n+    @Option(\n+        names = \"--from-password\",\n+        arity = \"0..1\",\n+        required = true,\n+        interactive = true,\n+        description = \"password for communicating with base image registry\")\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    String password;\n+  }\n+\n+  public String getVerbosity() {\n+    Verify.verifyNotNull(verbosity);\n+    return verbosity;\n+  }\n+\n+  public boolean isStacktrace() {\n+    return stacktrace;\n+  }\n+\n+  public String getTargetImage() {\n+    return targetImage;\n+  }\n+\n+  public Path getContextRoot() {\n+    Verify.verifyNotNull(contextRoot);\n+    return contextRoot;\n+  }\n+\n+  /**\n+   * Returns a user configured Path to a buildfile and if none is configured returns jib.yaml in\n+   * {@link #getContextRoot()}.\n+   *\n+   * @return a path to a bulidfile\n+   */\n+  public Path getBuildFile() {\n+    if (buildFile == null) {\n+      return getContextRoot().resolve(\"jib.yaml\");\n+    }\n+    return buildFile;\n+  }\n+\n+  public Map<String, String> getTemplateParameters() {\n+    Verify.verifyNotNull(templateParameters);\n+    return templateParameters;\n+  }\n+\n+  public List<String> getTags() {\n+    Verify.verifyNotNull(tags);\n+    return tags;\n+  }\n+\n+  public Optional<Path> getBaseImageCache() {\n+    return Optional.ofNullable(baseImageCache);\n+  }\n+\n+  public Optional<Path> getApplicationCache() {\n+    return Optional.ofNullable(applicationCache);\n+  }\n+\n+  public boolean isAllowInsecureRegistries() {\n+    return allowInsecureRegistries;\n+  }\n+\n+  public boolean isSendCredentialsOverHttp() {\n+    return sendCredentialsOverHttp;\n+  }\n+\n+  public List<String> getCredentialHelpers() {\n+    return credentialHelpers;\n+  }\n+\n+  public boolean isHttpTrace() {\n+    return httpTrace;\n+  }\n+\n+  public boolean isSerialize() {\n+    return serialize;\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  /**\n+   * If configured, returns a {@link Credential} created from user configured username/password.\n+   *\n+   * @return a optional Credential", "originalCommit": "97917975e106bea8886c770618c7943786cda533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4MTc2Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2811#discussion_r503381762", "body": "QQ: what is this?", "bodyText": "QQ: what is this?", "bodyHTML": "<p dir=\"auto\">QQ: what is this?</p>", "author": "chanseokoh", "createdAt": "2020-10-12T15:44:10Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/JibCli.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Credential;\n+import com.google.common.base.Verify;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import picocli.CommandLine;\n+import picocli.CommandLine.ArgGroup;\n+import picocli.CommandLine.Option;\n+\n+@CommandLine.Command(\n+    name = \"jib\",\n+    versionProvider = VersionInfo.class,\n+    mixinStandardHelpOptions = true,\n+    showAtFileInUsageHelp = true,\n+    synopsisSubcommandLabel = \"COMMAND\",\n+    description = \"A tool for creating container images\")\n+public class JibCli {\n+  @Option(\n+      names = \"--verbosity\",\n+      paramLabel = \"<level>\",\n+      defaultValue = \"lifecycle\",\n+      description = \"set logging verbosity (error, warn, lifecycle (default), info, debug)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private String verbosity;\n+\n+  // Hidden debug parameters\n+  @Option(names = \"--stacktrace\", hidden = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean stacktrace;\n+\n+  @Option(names = \"--http-trace\", hidden = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean httpTrace;\n+\n+  @Option(names = \"--serialize\", hidden = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean serialize;\n+\n+  // Build Configuration\n+  @Option(\n+      names = {\"-t\", \"--target\"},\n+      required = true,\n+      paramLabel = \"<target-image>\",\n+      description =\n+          \"The destination image reference or jib style url,%nexamples:%n gcr.io/project/image,%n registry://image-ref,%n docker://image,%n tar://path\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private String targetImage;\n+\n+  @Option(\n+      names = {\"-c\", \"--context\"},\n+      defaultValue = \".\",\n+      paramLabel = \"<project-root>\",\n+      description = \"The context root directory of the build (ex: path/to/my/build/things)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path contextRoot;\n+\n+  @Option(\n+      names = {\"-b\", \"--build-file\"},\n+      paramLabel = \"<build-file>\",\n+      description = \"The path to the build file (ex: path/to/other-jib.yaml)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path buildFile;\n+\n+  // unfortunately we cannot verify for --target=tar://... this is required, we must do this after\n+  // pico cli is done parsing\n+  @Option(\n+      names = \"--name\",\n+      paramLabel = \"<image-reference>\",\n+      description =\n+          \"The image reference to inject into the tar configuration (required when using --target tar://...)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private String name;\n+\n+  @Option(\n+      names = {\"-p\", \"--parameter\"},\n+      paramLabel = \"<name>=<value>\",\n+      description =\n+          \"templating parameter to inject into build file, replace $${<name>} with <value> (repeatable)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Map<String, String> templateParameters = new HashMap<String, String>();\n+\n+  @Option(\n+      names = \"--tags\",\n+      paramLabel = \"<tag>\",\n+      split = \",\",\n+      description = \"Additional tags for target image\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private List<String> tags = new ArrayList<String>();\n+\n+  @Option(\n+      names = \"--base-image-cache\",\n+      paramLabel = \"<cache-directory>\",\n+      description = \"A path to a base image cache\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path baseImageCache;\n+\n+  @Option(\n+      names = \"--application-cache\",\n+      paramLabel = \"<cache-directory>\",\n+      description = \"A path to an application cache\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path applicationCache;\n+\n+  // Auth/Security\n+  @Option(\n+      names = \"--allow-insecure-registries\",\n+      description = \"Allow jib to communicate with registries over https\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean allowInsecureRegistries;\n+\n+  @Option(\n+      names = \"--send-credentials-over-http\",\n+      description = \"Allow jib to communicate with registries over https\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private boolean sendCredentialsOverHttp;\n+\n+  @Option(\n+      names = {\"--credential-helper\"},\n+      paramLabel = \"<credential-helper>\",\n+      description =\n+          \"Add a credential helper, either a path to the helper, or a suffix for an executable named `docker-credential-<suffix>` (repeatable)\")\n+  private List<String> credentialHelpers = new ArrayList<>();\n+\n+  @ArgGroup(exclusive = true)\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private UsernamePassword usernamePassword;\n+\n+  private static class UsernamePassword {\n+    @ArgGroup(exclusive = false)\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    SingleUsernamePassword single;\n+\n+    @ArgGroup(exclusive = false)\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    MultiUsernamePassword multi;\n+  }\n+\n+  private static class MultiUsernamePassword {\n+    @ArgGroup(exclusive = false)\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    ToUsernamePassword to;\n+\n+    @ArgGroup(exclusive = false)\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    FromUsernamePassword from;\n+  }\n+\n+  private static class SingleUsernamePassword {\n+    @Option(\n+        names = \"--username\",\n+        required = true,\n+        description = \"username for communicating with target/base image registry\")\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    String username;\n+\n+    @Option(\n+        names = \"--password\",\n+        arity = \"0..1\",\n+        required = true,\n+        interactive = true,\n+        description = \"password for communicating with target/base image registry\")\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    String password;\n+  }\n+\n+  private static class ToUsernamePassword {\n+    @Option(\n+        names = \"--to-username\",\n+        required = true,\n+        description = \"username for communicating with target image registry\")\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    String username;\n+\n+    @Option(\n+        names = \"--to-password\",\n+        arity = \"0..1\",\n+        interactive = true,\n+        required = true,\n+        description = \"password for communicating with target image registry\")\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    String password;\n+  }\n+\n+  private static class FromUsernamePassword {\n+    @Option(\n+        names = \"--from-username\",\n+        required = true,\n+        description = \"username for communicating with base image registry\")\n+    @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+    String username;\n+\n+    @Option(\n+        names = \"--from-password\",\n+        arity = \"0..1\",", "originalCommit": "97917975e106bea8886c770618c7943786cda533", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMjM2OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2811#discussion_r503432369", "bodyText": "arity is how many args this option can have.\n0 args, trigger interactive flow\n--from-password\n\n1 arg, password on command line\n--password <password>\n\nA little more info here: https://picocli.info/#_interactive_password_options", "author": "loosebazooka", "createdAt": "2020-10-12T17:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4MTc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIyNjg3Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2811#discussion_r504226873", "bodyText": "Oh, it's nice that they have an interactive password option.", "author": "chanseokoh", "createdAt": "2020-10-13T20:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4MTc2Mg=="}], "type": "inlineReview"}, {"oid": "c6389163851cb37783d208b71fe9649449495fd1", "url": "https://github.com/GoogleContainerTools/jib/commit/c6389163851cb37783d208b71fe9649449495fd1", "message": "Add (new) Jib Cli parameters in base command class.", "committedDate": "2020-10-12T21:04:03Z", "type": "commit"}, {"oid": "94d266692542a58642ef7cb7e8f536ad59bc8482", "url": "https://github.com/GoogleContainerTools/jib/commit/94d266692542a58642ef7cb7e8f536ad59bc8482", "message": "Change to getters, use optional", "committedDate": "2020-10-12T21:04:44Z", "type": "commit"}, {"oid": "d19f77900b5f6d9fe001e3ee2d278890365306f3", "url": "https://github.com/GoogleContainerTools/jib/commit/d19f77900b5f6d9fe001e3ee2d278890365306f3", "message": "descriptions, assertions, tag to additional-tags", "committedDate": "2020-10-12T21:04:45Z", "type": "commit"}, {"oid": "d19f77900b5f6d9fe001e3ee2d278890365306f3", "url": "https://github.com/GoogleContainerTools/jib/commit/d19f77900b5f6d9fe001e3ee2d278890365306f3", "message": "descriptions, assertions, tag to additional-tags", "committedDate": "2020-10-12T21:04:45Z", "type": "forcePushed"}]}