{"pr_number": 2885, "pr_title": "Add integration testing for jib cli jar command. ", "pr_author": "mpeddada1", "pr_createdAt": "2020-11-05T19:25:01Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2885", "timeline": [{"oid": "80123dc8587545d350f7ee041ba227761d9f6a1a", "url": "https://github.com/GoogleContainerTools/jib/commit/80123dc8587545d350f7ee041ba227761d9f6a1a", "message": "Add integration testing for jib cli jar command", "committedDate": "2020-11-05T16:53:53Z", "type": "commit"}, {"oid": "f4ebcb7466c8acf24fa1f1394fe1e253200e032a", "url": "https://github.com/GoogleContainerTools/jib/commit/f4ebcb7466c8acf24fa1f1394fe1e253200e032a", "message": "formatting and call method to terminate executor service", "committedDate": "2020-11-05T19:07:46Z", "type": "commit"}, {"oid": "2a71454d49f07524c5fb6d03567f992ad602b96c", "url": "https://github.com/GoogleContainerTools/jib/commit/2a71454d49f07524c5fb6d03567f992ad602b96c", "message": "modify javadoc", "committedDate": "2020-11-05T19:20:09Z", "type": "commit"}, {"oid": "d0c3c361f4dba7d91de5581f459562878cbe1b0e", "url": "https://github.com/GoogleContainerTools/jib/commit/d0c3c361f4dba7d91de5581f459562878cbe1b0e", "message": "modify test", "committedDate": "2020-11-05T19:22:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518327452", "body": "This is a creative trick, but I feel it isn't really safe to replace stdout and stderr. For example, the unit framework depends on it, and I think we will not be able to see test failures.\r\n\r\nI have been thinking of two options for verifying command output: run as a separate process, or refactor the code. I didn't really like refactoring code only to be able to check log messages. Eventually I think we will reach the point where we really need to check log messages. And we will eventually find a way to run Jib CLI as a standalone process. Maybe for now, if we can't easily find a way to check log messages, I'm fine punting it.", "bodyText": "This is a creative trick, but I feel it isn't really safe to replace stdout and stderr. For example, the unit framework depends on it, and I think we will not be able to see test failures.\nI have been thinking of two options for verifying command output: run as a separate process, or refactor the code. I didn't really like refactoring code only to be able to check log messages. Eventually I think we will reach the point where we really need to check log messages. And we will eventually find a way to run Jib CLI as a standalone process. Maybe for now, if we can't easily find a way to check log messages, I'm fine punting it.", "bodyHTML": "<p dir=\"auto\">This is a creative trick, but I feel it isn't really safe to replace stdout and stderr. For example, the unit framework depends on it, and I think we will not be able to see test failures.</p>\n<p dir=\"auto\">I have been thinking of two options for verifying command output: run as a separate process, or refactor the code. I didn't really like refactoring code only to be able to check log messages. Eventually I think we will reach the point where we really need to check log messages. And we will eventually find a way to run Jib CLI as a standalone process. Maybe for now, if we can't easily find a way to check log messages, I'm fine punting it.</p>", "author": "chanseokoh", "createdAt": "2020-11-05T19:56:24Z", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  private static final Integer SUCCESS_CODE = 0;\n+  private static final Integer FAILURE_CODE = 1;\n+\n+  private final PrintStream originalOut = System.out;\n+  private final PrintStream originalErr = System.err;\n+  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+\n+  @Before\n+  public void setUp() {\n+    out.reset();\n+    err.reset();\n+    System.setOut(new PrintStream(out));", "originalCommit": "d0c3c361f4dba7d91de5581f459562878cbe1b0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1Mjc1OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518352759", "bodyText": "Ah yeah this doesn't seem too great. Maybe we should create an issue to make the logger use PrintWriter instead of printing to System.err or System.out - https://picocli.info/#_testing_your_application.", "author": "mpeddada1", "createdAt": "2020-11-05T20:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3ODM0MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518378340", "bodyText": "Oh, nice documentation. I think setOut and setErr will just work without us having to change the logger. Have you tried that?", "author": "chanseokoh", "createdAt": "2020-11-05T21:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3NDIwMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518474203", "bodyText": "I agree haha. And sorry, are you referring to this approach?:\nMyApp app = new MyApp();\nCommandLine cmd = new CommandLine(app);\nStringWriter sw = new StringWriter();\ncmd.setOut(new PrintWriter(sw));", "author": "mpeddada1", "createdAt": "2020-11-06T01:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3NDU1Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518474553", "bodyText": "Yes. I feel like this will work.", "author": "chanseokoh", "createdAt": "2020-11-06T01:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5NjQ4OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518796488", "bodyText": "When I had attempted this approach the output and the error messages could not be set using setOut/Err and were getting printed onto the console. I think it's because we are currently directly printing to System.out/err in the logger instead of writing to the picocli writer?\nThis assumes that the application uses the PrintWriter provided by CommandLine.getOut or CommandLine.getErr", "author": "mpeddada1", "createdAt": "2020-11-06T14:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwMDIxNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518800215", "bodyText": "Ah, you're right. Let's change the logger. I think it'll be pretty straightforward.", "author": "chanseokoh", "createdAt": "2020-11-06T14:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxNjQyOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518816428", "bodyText": "Sounds good! Added #2886.", "author": "mpeddada1", "createdAt": "2020-11-06T15:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyNDY3Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518824672", "bodyText": "\ud83d\udc4d Let's fix #2886 first before this PR.", "author": "chanseokoh", "createdAt": "2020-11-06T15:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1NDc3NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r519054775", "bodyText": "Done.", "author": "mpeddada1", "createdAt": "2020-11-06T23:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzY4MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518327681", "body": "Let's just go for\r\n```suggestion\r\n    assertThat(exitCode).isEqualTo(1);\r\n```", "bodyText": "Let's just go for\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(actual).isEqualTo(FAILURE_CODE);\n          \n          \n            \n                assertThat(exitCode).isEqualTo(1);", "bodyHTML": "<p dir=\"auto\">Let's just go for</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    assertThat(<span class=\"x x-first x-last\">actual</span>)<span class=\"pl-k\">.</span>isEqualTo(<span class=\"pl-c1 x x-first x-last\">FAILURE_CODE</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    assertThat(<span class=\"x x-first x-last\">exitCode</span>)<span class=\"pl-k\">.</span>isEqualTo(<span class=\"pl-c1 x x-first x-last\">1</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "chanseokoh", "createdAt": "2020-11-05T19:56:50Z", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  private static final Integer SUCCESS_CODE = 0;\n+  private static final Integer FAILURE_CODE = 1;\n+\n+  private final PrintStream originalOut = System.out;\n+  private final PrintStream originalErr = System.err;\n+  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+\n+  @Before\n+  public void setUp() {\n+    out.reset();\n+    err.reset();\n+    System.setOut(new PrintStream(out));\n+    System.setErr(new PrintStream(err));\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(originalOut);\n+    System.setErr(originalErr);\n+  }\n+\n+  @Test\n+  public void testErrorLogging_fileDoesNotExist() {\n+    Integer actual =\n+        new CommandLine(new JibCli())\n+            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", \"unknown.jar\");\n+\n+    assertThat(actual).isEqualTo(FAILURE_CODE);\n+    assertThat(err.toString())\n+        .contains(\"[ERROR] The file path provided does not exist: unknown.jar\");\n+  }\n+\n+  @Test\n+  public void testErrorLogging_directoryGiven() throws URISyntaxException {\n+    Path jarFile = Paths.get(Resources.getResource(\"emptyDir\").toURI());\n+    Integer actual =\n+        new CommandLine(new JibCli())\n+            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString());\n+\n+    assertThat(actual).isEqualTo(FAILURE_CODE);", "originalCommit": "d0c3c361f4dba7d91de5581f459562878cbe1b0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2bb2202235832c9772975c822a83bb6063ac354b", "url": "https://github.com/GoogleContainerTools/jib/commit/2bb2202235832c9772975c822a83bb6063ac354b", "message": "renaming variable in test", "committedDate": "2020-11-05T20:59:02Z", "type": "commit"}, {"oid": "ac17e8f382f51ca65f3aa0860b23d94621969497", "url": "https://github.com/GoogleContainerTools/jib/commit/ac17e8f382f51ca65f3aa0860b23d94621969497", "message": "Merge branch 'master' of github.com:GoogleContainerTools/jib into jar-integration-test", "committedDate": "2020-11-06T02:02:00Z", "type": "commit"}, {"oid": "cd2ac6a7e17bd2fb6c50ebcdf5f77a01edb1f940", "url": "https://github.com/GoogleContainerTools/jib/commit/cd2ac6a7e17bd2fb6c50ebcdf5f77a01edb1f940", "message": "make tests use PrintWriter", "committedDate": "2020-11-06T23:28:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkxODU4MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r519918580", "body": "I don't think we have \"emptyDir\" in our test runtime classpath. Maybe just `Paths.get(\"/\")`?", "bodyText": "I don't think we have \"emptyDir\" in our test runtime classpath. Maybe just Paths.get(\"/\")?", "bodyHTML": "<p dir=\"auto\">I don't think we have \"emptyDir\" in our test runtime classpath. Maybe just <code>Paths.get(\"/\")</code>?</p>", "author": "chanseokoh", "createdAt": "2020-11-09T15:53:56Z", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  @Test\n+  public void testErrorLogging_fileDoesNotExist() {\n+    CommandLine jibCli = new CommandLine(new JibCli());\n+    StringWriter sw = new StringWriter();\n+    jibCli.setErr(new PrintWriter(sw));\n+\n+    Integer exitCode = jibCli.execute(\"--target\", \"docker://jib-cli-image\", \"jar\", \"unknown.jar\");\n+\n+    assertThat(exitCode).isEqualTo(1);\n+    assertThat(sw.toString())\n+        .isEqualTo(\"[ERROR] The file path provided does not exist: unknown.jar\\n\");\n+  }\n+\n+  @Test\n+  public void testErrorLogging_directoryGiven() throws URISyntaxException {\n+    CommandLine jibCli = new CommandLine(new JibCli());\n+    StringWriter sw = new StringWriter();\n+    jibCli.setErr(new PrintWriter(sw));\n+\n+    Path jarFile = Paths.get(Resources.getResource(\"emptyDir\").toURI());", "originalCommit": "cd2ac6a7e17bd2fb6c50ebcdf5f77a01edb1f940", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkxODYzMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r519918631", "body": "The Google style doesn't allow 'sw'. I think we can go for\r\n```suggestion\r\n    StringWriter stringWriter = new StringWriter();\r\n```", "bodyText": "The Google style doesn't allow 'sw'. I think we can go for\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                StringWriter sw = new StringWriter();\n          \n          \n            \n                StringWriter stringWriter = new StringWriter();", "bodyHTML": "<p dir=\"auto\">The Google style doesn't allow 'sw'. I think we can go for</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">StringWriter</span> <span class=\"x x-first x-last\">sw</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-smi\">StringWriter</span> <span class=\"x x-first x-last\">stringWriter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "chanseokoh", "createdAt": "2020-11-09T15:53:59Z", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  @Test\n+  public void testErrorLogging_fileDoesNotExist() {\n+    CommandLine jibCli = new CommandLine(new JibCli());\n+    StringWriter sw = new StringWriter();", "originalCommit": "cd2ac6a7e17bd2fb6c50ebcdf5f77a01edb1f940", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkyMTA0Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r519921043", "body": "exitCode", "bodyText": "exitCode", "bodyHTML": "<p dir=\"auto\">exitCode</p>", "author": "chanseokoh", "createdAt": "2020-11-09T15:56:42Z", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  @Test\n+  public void testErrorLogging_fileDoesNotExist() {\n+    CommandLine jibCli = new CommandLine(new JibCli());\n+    StringWriter sw = new StringWriter();\n+    jibCli.setErr(new PrintWriter(sw));\n+\n+    Integer exitCode = jibCli.execute(\"--target\", \"docker://jib-cli-image\", \"jar\", \"unknown.jar\");\n+\n+    assertThat(exitCode).isEqualTo(1);\n+    assertThat(sw.toString())\n+        .isEqualTo(\"[ERROR] The file path provided does not exist: unknown.jar\\n\");\n+  }\n+\n+  @Test\n+  public void testErrorLogging_directoryGiven() throws URISyntaxException {\n+    CommandLine jibCli = new CommandLine(new JibCli());\n+    StringWriter sw = new StringWriter();\n+    jibCli.setErr(new PrintWriter(sw));\n+\n+    Path jarFile = Paths.get(Resources.getResource(\"emptyDir\").toURI());\n+    Integer exitCode =\n+        jibCli.execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString());\n+\n+    assertThat(exitCode).isEqualTo(1);\n+    assertThat(sw.toString())\n+        .isEqualTo(\n+            \"[ERROR] The file path provided is for a directory. Please provide a path to a jar file: \"\n+                + jarFile.toString()\n+                + \"\\n\");\n+  }\n+\n+  @Test\n+  public void testJar_toDocker() throws IOException, InterruptedException, URISyntaxException {\n+    Path jarFile = Paths.get(Resources.getResource(\"simpleJar.jar\").toURI());\n+    Integer actual =\n+        new CommandLine(new JibCli())\n+            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString());\n+    String output = new Command(\"docker\", \"run\", \"--rm\", \"jib-cli-image\").run();\n+\n+    assertThat(actual).isEqualTo(0);", "originalCommit": "cd2ac6a7e17bd2fb6c50ebcdf5f77a01edb1f940", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bd02ab2d1252337fc1e7cee5f19b8f07f3bd71f7", "url": "https://github.com/GoogleContainerTools/jib/commit/bd02ab2d1252337fc1e7cee5f19b8f07f3bd71f7", "message": "cleanup", "committedDate": "2020-11-09T16:32:12Z", "type": "commit"}, {"oid": "df578e761a9e76f9a25f3b38d275b6e1bb1dbca5", "url": "https://github.com/GoogleContainerTools/jib/commit/df578e761a9e76f9a25f3b38d275b6e1bb1dbca5", "message": "fix test to use root directory instead of empty directory", "committedDate": "2020-11-09T22:40:40Z", "type": "commit"}]}