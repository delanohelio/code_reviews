{"pr_number": 2646, "pr_title": "obtainBaseImageLayers for multiple images", "pr_author": "louismurerwa", "pr_createdAt": "2020-07-30T20:28:36Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2646", "timeline": [{"oid": "119ae86bccb1c83b8eee62e9259656c257dc9ab8", "url": "https://github.com/GoogleContainerTools/jib/commit/119ae86bccb1c83b8eee62e9259656c257dc9ab8", "message": "Adding functionality to pull layers for multiple images", "committedDate": "2020-07-30T20:26:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3MDM4MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463270381", "body": "And probably you don't need `{ return ... }` but keep the original syntactic sugar `() -> expr`.", "bodyText": "And probably you don't need { return ... } but keep the original syntactic sugar () -> expr.", "bodyHTML": "<p dir=\"auto\">And probably you don't need <code>{ return ... }</code> but keep the original syntactic sugar <code>() -&gt; expr</code>.</p>", "author": "chanseokoh", "createdAt": "2020-07-30T21:04:27Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -271,14 +273,28 @@ private void extractTar() {\n   }\n \n   private void assignLocalImageResult(Future<LocalImage> localImage) {\n-    results.baseImageLayers = executorService.submit(() -> localImage.get().layers);\n+\n+    Future<List<Future<PreparedLayer>>> localBaseImageLayers =\n+        executorService.submit(() -> localImage.get().layers);\n+\n     results.baseImageAndRegistryClient =\n         executorService.submit(\n-            () ->\n-                LocalBaseImageSteps.returnImageAndRegistryClientStep(\n-                        realizeFutures(results.baseImageLayers.get()),\n-                        localImage.get().configurationTemplate)\n-                    .call());\n+            () -> {", "originalCommit": "119ae86bccb1c83b8eee62e9259656c257dc9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzNDU3MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463634571", "bodyText": "Adding back the sugar so that our code can be sweet again hahah . Done.", "author": "louismurerwa", "createdAt": "2020-07-31T14:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3MDM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3NDUxNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463274516", "body": "`localImage.get().layers` should work. No need to defined `localBaseImageLayers` on line 277.\r\n\r\nand this will probably work:\r\n```java\r\n.submit( () -> Collections.singletonMap(\r\n            results.baseImageAndRegistryClient.get().images.get(0),\r\n            localImage.get().layers) );\r\n```", "bodyText": "localImage.get().layers should work. No need to defined localBaseImageLayers on line 277.\nand this will probably work:\n.submit( () -> Collections.singletonMap(\n            results.baseImageAndRegistryClient.get().images.get(0),\n            localImage.get().layers) );", "bodyHTML": "<p dir=\"auto\"><code>localImage.get().layers</code> should work. No need to defined <code>localBaseImageLayers</code> on line 277.</p>\n<p dir=\"auto\">and this will probably work:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\".submit( () -&gt; Collections.singletonMap(\n            results.baseImageAndRegistryClient.get().images.get(0),\n            localImage.get().layers) );\"><pre>.submit( () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>singletonMap(\n            results<span class=\"pl-k\">.</span>baseImageAndRegistryClient<span class=\"pl-k\">.</span>get()<span class=\"pl-k\">.</span>images<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>),\n            localImage<span class=\"pl-k\">.</span>get()<span class=\"pl-k\">.</span>layers) );</pre></div>", "author": "chanseokoh", "createdAt": "2020-07-30T21:13:16Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -271,14 +273,28 @@ private void extractTar() {\n   }\n \n   private void assignLocalImageResult(Future<LocalImage> localImage) {\n-    results.baseImageLayers = executorService.submit(() -> localImage.get().layers);\n+\n+    Future<List<Future<PreparedLayer>>> localBaseImageLayers =\n+        executorService.submit(() -> localImage.get().layers);\n+\n     results.baseImageAndRegistryClient =\n         executorService.submit(\n-            () ->\n-                LocalBaseImageSteps.returnImageAndRegistryClientStep(\n-                        realizeFutures(results.baseImageLayers.get()),\n-                        localImage.get().configurationTemplate)\n-                    .call());\n+            () -> {\n+              return LocalBaseImageSteps.returnImageAndRegistryClientStep(\n+                      realizeFutures(localBaseImageLayers.get()),\n+                      localImage.get().configurationTemplate)\n+                  .call();\n+            });\n+\n+    results.baseImageLayers =\n+        executorService.submit(\n+            () -> {\n+              Map<Image, List<Future<PreparedLayer>>> baseImageLayers = new HashMap<>();\n+              baseImageLayers.put(\n+                  results.baseImageAndRegistryClient.get().images.get(0),\n+                  localBaseImageLayers.get());", "originalCommit": "119ae86bccb1c83b8eee62e9259656c257dc9ab8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NTcyNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463285726", "body": "I realized we could have increased concurrency further. `PullBaseImageStep` is now designed to return all manifests all at once, meaning that downloading base image layers can start only after _all_ manifests have been downloaded. Moreover, in `PullBaseImageStep`, we will probably end up having to download all manifests synchronously and sequentially. Theoretically and ideally we should be able to concurrently download manifests as well as start downloading base image layers while there are still pending manifest downloads. However, because this requires significant redesign of `PullBaseImageStep` (i.e., we should schedule multiple threads (multiple step instances) each downloading an assigned manifest, resulting in `List<Future<Image>>` instead of the current `List<Image>`) and because manifests are small and generally quick to download, I think the current implementation is reasonable. We just need to keep track of this issue so that we can eventually implement this.", "bodyText": "I realized we could have increased concurrency further. PullBaseImageStep is now designed to return all manifests all at once, meaning that downloading base image layers can start only after all manifests have been downloaded. Moreover, in PullBaseImageStep, we will probably end up having to download all manifests synchronously and sequentially. Theoretically and ideally we should be able to concurrently download manifests as well as start downloading base image layers while there are still pending manifest downloads. However, because this requires significant redesign of PullBaseImageStep (i.e., we should schedule multiple threads (multiple step instances) each downloading an assigned manifest, resulting in List<Future<Image>> instead of the current List<Image>) and because manifests are small and generally quick to download, I think the current implementation is reasonable. We just need to keep track of this issue so that we can eventually implement this.", "bodyHTML": "<p dir=\"auto\">I realized we could have increased concurrency further. <code>PullBaseImageStep</code> is now designed to return all manifests all at once, meaning that downloading base image layers can start only after <em>all</em> manifests have been downloaded. Moreover, in <code>PullBaseImageStep</code>, we will probably end up having to download all manifests synchronously and sequentially. Theoretically and ideally we should be able to concurrently download manifests as well as start downloading base image layers while there are still pending manifest downloads. However, because this requires significant redesign of <code>PullBaseImageStep</code> (i.e., we should schedule multiple threads (multiple step instances) each downloading an assigned manifest, resulting in <code>List&lt;Future&lt;Image&gt;&gt;</code> instead of the current <code>List&lt;Image&gt;</code>) and because manifests are small and generally quick to download, I think the current implementation is reasonable. We just need to keep track of this issue so that we can eventually implement this.</p>", "author": "chanseokoh", "createdAt": "2020-07-30T21:37:18Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -292,23 +308,31 @@ private void pullBaseImage() {\n   private void obtainBaseImageLayers(boolean layersRequiredLocally) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n-\n     results.baseImageLayers =\n         executorService.submit(\n-            () ->\n-                scheduleCallables(\n-                    layersRequiredLocally\n-                        ? ObtainBaseImageLayerStep.makeListForForcedDownload(\n-                            buildContext,\n-                            childProgressDispatcherFactory,\n-                            results.baseImageAndRegistryClient.get().images.get(0),\n-                            results.baseImageAndRegistryClient.get().registryClient)\n-                        : ObtainBaseImageLayerStep.makeListForSelectiveDownload(\n-                            buildContext,\n-                            childProgressDispatcherFactory,\n-                            results.baseImageAndRegistryClient.get().images.get(0),\n-                            results.baseImageAndRegistryClient.get().registryClient,\n-                            results.targetRegistryClient.get())));\n+            () -> {\n+              Map<Image, List<Future<PreparedLayer>>> baseImageLayers = new HashMap<>();\n+              for (Image image : results.baseImageAndRegistryClient.get().images) {", "originalCommit": "119ae86bccb1c83b8eee62e9259656c257dc9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzOTI4NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463639285", "bodyText": "This is a very good point .I hadn't realized that we are using a future<List> instead of List<Future> . As you said the manifest files are really small and thus there is a lower chance of them slowing down the build process I support the fact that we can refactor this later.I have put this point on the list for items to be improved once a working multi-image is completed.\nIn the future we should be able to do this for (Image image : results.baseImageAndRegistryClient.images.get()) { which enables us to use Future objects", "author": "louismurerwa", "createdAt": "2020-07-31T14:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NTcyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY0Njg5NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463646894", "bodyText": "because manifests are small and generally quick to download, I think the current implementation is reasonable.\n\nFor your insight, this is somewhat acceptable, but we've seen many, many Jib users working in a slow network where it takes, e.g., 4~5 seconds to download a manifest. So, if you are sequentially downloading 3 manifests, they will add up to ~15 seconds. 15 seconds would still be a small fraction considering that the entire build would take far more time in such a slow network, but it will be a significant bottleneck, e.g., when not pushing to a remote registry.", "author": "chanseokoh", "createdAt": "2020-07-31T14:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NTcyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY0OTM4Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463649383", "body": "What is the best name for this map object that maps Image - baseImageLayers ? I was thinking of ` imageLayers` or ` baseImagesAndLayers `", "bodyText": "What is the best name for this map object that maps Image - baseImageLayers ? I was thinking of  imageLayers or baseImagesAndLayers", "bodyHTML": "<p dir=\"auto\">What is the best name for this map object that maps Image - baseImageLayers ? I was thinking of <code> imageLayers</code> or <code>baseImagesAndLayers</code></p>", "author": "louismurerwa", "createdAt": "2020-07-31T14:37:19Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -64,7 +66,7 @@\n     }\n \n     private Future<ImagesAndRegistryClient> baseImageAndRegistryClient = failedFuture();\n-    private Future<List<Future<PreparedLayer>>> baseImageLayers = failedFuture();\n+    private Future<Map<Image, List<Future<PreparedLayer>>>> baseImageLayers = failedFuture();", "originalCommit": "119ae86bccb1c83b8eee62e9259656c257dc9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY1MzU3Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463653577", "bodyText": "baseImagesAndLayers sounds good to me.", "author": "chanseokoh", "createdAt": "2020-07-31T14:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY0OTM4Mw=="}], "type": "inlineReview"}, {"oid": "f6e956e65249fc09d98a0b7210e79ceb104b9cb8", "url": "https://github.com/GoogleContainerTools/jib/commit/f6e956e65249fc09d98a0b7210e79ceb104b9cb8", "message": "Style Fixes", "committedDate": "2020-07-31T15:00:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MDI2MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463680260", "body": "I didn't bother in the last PR as the overall implementation is in the transitioning state from a single image to multiple images, but given the current state, I think we should rename this to baseImage**s**AndRegistryClient to be consistent.", "bodyText": "I didn't bother in the last PR as the overall implementation is in the transitioning state from a single image to multiple images, but given the current state, I think we should rename this to baseImagesAndRegistryClient to be consistent.", "bodyHTML": "<p dir=\"auto\">I didn't bother in the last PR as the overall implementation is in the transitioning state from a single image to multiple images, but given the current state, I think we should rename this to baseImage<strong>s</strong>AndRegistryClient to be consistent.</p>", "author": "chanseokoh", "createdAt": "2020-07-31T15:31:40Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -271,14 +273,22 @@ private void extractTar() {\n   }\n \n   private void assignLocalImageResult(Future<LocalImage> localImage) {\n-    results.baseImageLayers = executorService.submit(() -> localImage.get().layers);\n     results.baseImageAndRegistryClient =", "originalCommit": "f6e956e65249fc09d98a0b7210e79ceb104b9cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MDgyMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463680821", "body": "`Collections.signletonMap` (https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463274516)?", "bodyText": "Collections.signletonMap (#2646 (comment))?", "bodyHTML": "<p dir=\"auto\"><code>Collections.signletonMap</code> (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"669167987\" data-permission-text=\"Title is private\" data-url=\"https://github.com/GoogleContainerTools/jib/issues/2646\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/GoogleContainerTools/jib/pull/2646/hovercard?comment_id=463274516&amp;comment_type=review_comment\" href=\"https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463274516\">#2646 (comment)</a>)?</p>", "author": "chanseokoh", "createdAt": "2020-07-31T15:32:33Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -271,14 +273,22 @@ private void extractTar() {\n   }\n \n   private void assignLocalImageResult(Future<LocalImage> localImage) {\n-    results.baseImageLayers = executorService.submit(() -> localImage.get().layers);\n     results.baseImageAndRegistryClient =\n         executorService.submit(\n             () ->\n                 LocalBaseImageSteps.returnImageAndRegistryClientStep(\n-                        realizeFutures(results.baseImageLayers.get()),\n+                        realizeFutures(localImage.get().layers),\n                         localImage.get().configurationTemplate)\n                     .call());\n+\n+    results.baseImagesAndLayers =\n+        executorService.submit(\n+            () -> {\n+              Map<Image, List<Future<PreparedLayer>>> baseImageAndLayers = new HashMap<>();\n+              baseImageAndLayers.put(\n+                  results.baseImageAndRegistryClient.get().images.get(0), localImage.get().layers);\n+              return baseImageAndLayers;", "originalCommit": "f6e956e65249fc09d98a0b7210e79ceb104b9cb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4NjQwNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463686404", "bodyText": "I had missed this review", "author": "louismurerwa", "createdAt": "2020-07-31T15:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MDgyMQ=="}], "type": "inlineReview"}, {"oid": "fb761f1d80268b44e5b31faca9c60531fd621e83", "url": "https://github.com/GoogleContainerTools/jib/commit/fb761f1d80268b44e5b31faca9c60531fd621e83", "message": "Style Fixes", "committedDate": "2020-07-31T15:57:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc0NzY5MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2646#discussion_r463747690", "body": "baseImage*s*AndLayers", "bodyText": "baseImagesAndLayers", "bodyHTML": "<p dir=\"auto\">baseImage<em>s</em>AndLayers</p>", "author": "chanseokoh", "createdAt": "2020-07-31T17:49:54Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -271,44 +274,56 @@ private void extractTar() {\n   }\n \n   private void assignLocalImageResult(Future<LocalImage> localImage) {\n-    results.baseImageLayers = executorService.submit(() -> localImage.get().layers);\n-    results.baseImageAndRegistryClient =\n+    results.baseImagesAndRegistryClient =\n         executorService.submit(\n             () ->\n                 LocalBaseImageSteps.returnImageAndRegistryClientStep(\n-                        realizeFutures(results.baseImageLayers.get()),\n+                        realizeFutures(localImage.get().layers),\n                         localImage.get().configurationTemplate)\n                     .call());\n+\n+    results.baseImagesAndLayers =\n+        executorService.submit(\n+            () ->\n+                Collections.singletonMap(\n+                    results.baseImagesAndRegistryClient.get().images.get(0),\n+                    localImage.get().layers));\n   }\n \n   private void pullBaseImage() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.baseImageAndRegistryClient =\n+    results.baseImagesAndRegistryClient =\n         executorService.submit(new PullBaseImageStep(buildContext, childProgressDispatcherFactory));\n   }\n \n   private void obtainBaseImageLayers(boolean layersRequiredLocally) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n-\n-    results.baseImageLayers =\n+    results.baseImagesAndLayers =\n         executorService.submit(\n-            () ->\n-                scheduleCallables(\n-                    layersRequiredLocally\n-                        ? ObtainBaseImageLayerStep.makeListForForcedDownload(\n-                            buildContext,\n-                            childProgressDispatcherFactory,\n-                            results.baseImageAndRegistryClient.get().images.get(0),\n-                            results.baseImageAndRegistryClient.get().registryClient)\n-                        : ObtainBaseImageLayerStep.makeListForSelectiveDownload(\n-                            buildContext,\n-                            childProgressDispatcherFactory,\n-                            results.baseImageAndRegistryClient.get().images.get(0),\n-                            results.baseImageAndRegistryClient.get().registryClient,\n-                            results.targetRegistryClient.get())));\n+            () -> {\n+              Map<Image, List<Future<PreparedLayer>>> baseImageAndLayers = new HashMap<>();", "originalCommit": "fb761f1d80268b44e5b31faca9c60531fd621e83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f71bbb4d00e1941250cda53db56567cfa28832bd", "url": "https://github.com/GoogleContainerTools/jib/commit/f71bbb4d00e1941250cda53db56567cfa28832bd", "message": "Fixing Styles", "committedDate": "2020-07-31T18:04:34Z", "type": "commit"}]}