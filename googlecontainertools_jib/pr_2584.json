{"pr_number": 2584, "pr_title": "Adding the platform config methods to the ContainerBuildPlan api", "pr_author": "louismurerwa", "pr_createdAt": "2020-07-14T14:54:13Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2584", "timeline": [{"oid": "6198132362f6d144179a6b2a13e8033a435289ac", "url": "https://github.com/GoogleContainerTools/jib/commit/6198132362f6d144179a6b2a13e8033a435289ac", "message": "Adding platforms to Build Plan", "committedDate": "2020-07-13T21:01:29Z", "type": "commit"}, {"oid": "ab257027b270a12179fec4bf40c6fdc497a74dfb", "url": "https://github.com/GoogleContainerTools/jib/commit/ab257027b270a12179fec4bf40c6fdc497a74dfb", "message": "Platforms Api Methods", "committedDate": "2020-07-14T14:44:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyMDU0Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454420547", "body": "nit: remove `this`", "bodyText": "nit: remove this", "bodyHTML": "<p dir=\"auto\">nit: remove <code>this</code></p>", "author": "chanseokoh", "createdAt": "2020-07-14T14:57:15Z", "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -93,6 +94,38 @@ public Builder setOsHint(String osHint) {\n       return this;\n     }\n \n+    /**\n+     * Adds a desired platform i.e image os and architecture pair. If the base image reference is a\n+     * Docker manifest list or an OCI image index, must be set so that an image builder can select\n+     * the image matching the given platform. If the base image reference is an image manifest, this\n+     * value is ignored and the platform of the built image follows that of the base image. The\n+     * default is {@code linux amd64 }.\n+     *\n+     * @param os value to select a base image in case of a manifest list\n+     * @param architecture value to select a base image in case of a manifest list\n+     * @return this\n+     */\n+    public Builder addPlatform(String os, String architecture) {\n+      this.platforms.add(new Platform(os, architecture));", "originalCommit": "ab257027b270a12179fec4bf40c6fdc497a74dfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3OTg0MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454479841", "bodyText": "Since we have decided to remove get/setOs/ArchitectureHint() all together  , I wont be working on the @deprecated feature.", "author": "louismurerwa", "createdAt": "2020-07-14T16:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyMDU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5MDg5NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454490895", "bodyText": "I was taking about qualifying platforms with the this keyword. This line can just be platforms.add(...). You will have to qualify with this if there is another variable with the same name to distinguish between variables, but this isn't just a case.\nAnd please remove everything related to get/setOs/ArchitectureHint() in this PR. We don't want to check in code to HEAD that is incomplete or temporarily broken. The assumption is the code at HEAD should work correctly at any point of time.", "author": "chanseokoh", "createdAt": "2020-07-14T16:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyMDU0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b770518fd58e35f4274f10c5c64a797d9236c4a9", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 989cfc7c1..8ccd49e56 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -106,22 +75,27 @@ public class ContainerBuildPlan {\n      * @return this\n      */\n     public Builder addPlatform(String os, String architecture) {\n-      this.platforms.add(new Platform(os, architecture));\n+      platforms.add(new Platform(os, architecture));\n       return this;\n     }\n \n     /**\n-     * Sets a desired platform list i.e os and architecture pairs. If the base image reference is a\n-     * Docker manifest list or an OCI image index, must be set so that an image builder can select\n-     * the images matching the given platforms. If the base image reference is an image manifest,\n-     * this value is ignored and the platform of the built image follows that of the base image. The\n-     * default is {@code linux amd64 }.\n+     * Sets a desired platform list ,a list containing (OS and architecture pairs). If the base\n+     * image reference is a Docker manifest list or an OCI image index, must be set so that an image\n+     * builder can select the images matching the given platforms. If the base image reference is an\n+     * image manifest, this value is ignored and the platform of the built image follows that of the\n+     * base image. The default is {@code linux amd64 }.\n      *\n-     * @param platforms a list of platform objects to be used to select base images in case of a\n+     * @param platforms is a list of platform objects to be used to select base images in case of a\n      *     manifest list\n      * @return this\n+     * @throws IllegalArgumentException if a user passes in an empty platform list\n      */\n-    public Builder setPlatforms(List<Platform> platforms) {\n+    public Builder setPlatforms(List<Platform> platforms) throws IllegalArgumentException {\n+      if (platforms.isEmpty()) {\n+        throw new IllegalArgumentException(\n+            \"platforms list cannot be empty.Please pass in a non-empty platforms list.\");\n+      }\n       this.platforms = new ArrayList<>(platforms);\n       return this;\n     }\n", "next_change": {"commit": "d53153f3dd7ef9066caea2d0c23f3a3d8a6ed527", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 8ccd49e56..5dfd0ec96 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -91,12 +101,11 @@ public class ContainerBuildPlan {\n      * @return this\n      * @throws IllegalArgumentException if a user passes in an empty platform list\n      */\n-    public Builder setPlatforms(List<Platform> platforms) throws IllegalArgumentException {\n+    public Builder setPlatforms(Set<Platform> platforms) throws IllegalArgumentException {\n       if (platforms.isEmpty()) {\n-        throw new IllegalArgumentException(\n-            \"platforms list cannot be empty.Please pass in a non-empty platforms list.\");\n+        throw new IllegalArgumentException(\"platforms list cannot be empty.\");\n       }\n-      this.platforms = new ArrayList<>(platforms);\n+      this.platforms = new LinkedHashSet<>(platforms);\n       return this;\n     }\n \n", "next_change": {"commit": "97e4a87fd150656488a2826190bbeea0f526a18b", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 5dfd0ec96..f0f3d6bfa 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -103,7 +102,7 @@ public class ContainerBuildPlan {\n      */\n     public Builder setPlatforms(Set<Platform> platforms) throws IllegalArgumentException {\n       if (platforms.isEmpty()) {\n-        throw new IllegalArgumentException(\"platforms list cannot be empty.\");\n+        throw new IllegalArgumentException(\"platforms set cannot be empty.\");\n       }\n       this.platforms = new LinkedHashSet<>(platforms);\n       return this;\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyMTM4NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454421385", "body": "\"... platform list (for example, OS and architecture) ...\"\r\n\r\nWe will expand platform to include more properties later. ", "bodyText": "\"... platform list (for example, OS and architecture) ...\"\nWe will expand platform to include more properties later.", "bodyHTML": "<p dir=\"auto\">\"... platform list (for example, OS and architecture) ...\"</p>\n<p dir=\"auto\">We will expand platform to include more properties later.</p>", "author": "chanseokoh", "createdAt": "2020-07-14T14:58:22Z", "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -93,6 +94,38 @@ public Builder setOsHint(String osHint) {\n       return this;\n     }\n \n+    /**\n+     * Adds a desired platform i.e image os and architecture pair. If the base image reference is a\n+     * Docker manifest list or an OCI image index, must be set so that an image builder can select\n+     * the image matching the given platform. If the base image reference is an image manifest, this\n+     * value is ignored and the platform of the built image follows that of the base image. The\n+     * default is {@code linux amd64 }.\n+     *\n+     * @param os value to select a base image in case of a manifest list\n+     * @param architecture value to select a base image in case of a manifest list\n+     * @return this\n+     */\n+    public Builder addPlatform(String os, String architecture) {\n+      this.platforms.add(new Platform(os, architecture));\n+      return this;\n+    }\n+\n+    /**\n+     * Sets a desired platform list i.e os and architecture pairs. If the base image reference is a", "originalCommit": "ab257027b270a12179fec4bf40c6fdc497a74dfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b770518fd58e35f4274f10c5c64a797d9236c4a9", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 989cfc7c1..8ccd49e56 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -106,22 +75,27 @@ public class ContainerBuildPlan {\n      * @return this\n      */\n     public Builder addPlatform(String os, String architecture) {\n-      this.platforms.add(new Platform(os, architecture));\n+      platforms.add(new Platform(os, architecture));\n       return this;\n     }\n \n     /**\n-     * Sets a desired platform list i.e os and architecture pairs. If the base image reference is a\n-     * Docker manifest list or an OCI image index, must be set so that an image builder can select\n-     * the images matching the given platforms. If the base image reference is an image manifest,\n-     * this value is ignored and the platform of the built image follows that of the base image. The\n-     * default is {@code linux amd64 }.\n+     * Sets a desired platform list ,a list containing (OS and architecture pairs). If the base\n+     * image reference is a Docker manifest list or an OCI image index, must be set so that an image\n+     * builder can select the images matching the given platforms. If the base image reference is an\n+     * image manifest, this value is ignored and the platform of the built image follows that of the\n+     * base image. The default is {@code linux amd64 }.\n      *\n-     * @param platforms a list of platform objects to be used to select base images in case of a\n+     * @param platforms is a list of platform objects to be used to select base images in case of a\n      *     manifest list\n      * @return this\n+     * @throws IllegalArgumentException if a user passes in an empty platform list\n      */\n-    public Builder setPlatforms(List<Platform> platforms) {\n+    public Builder setPlatforms(List<Platform> platforms) throws IllegalArgumentException {\n+      if (platforms.isEmpty()) {\n+        throw new IllegalArgumentException(\n+            \"platforms list cannot be empty.Please pass in a non-empty platforms list.\");\n+      }\n       this.platforms = new ArrayList<>(platforms);\n       return this;\n     }\n", "next_change": {"commit": "d53153f3dd7ef9066caea2d0c23f3a3d8a6ed527", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 8ccd49e56..5dfd0ec96 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -91,12 +101,11 @@ public class ContainerBuildPlan {\n      * @return this\n      * @throws IllegalArgumentException if a user passes in an empty platform list\n      */\n-    public Builder setPlatforms(List<Platform> platforms) throws IllegalArgumentException {\n+    public Builder setPlatforms(Set<Platform> platforms) throws IllegalArgumentException {\n       if (platforms.isEmpty()) {\n-        throw new IllegalArgumentException(\n-            \"platforms list cannot be empty.Please pass in a non-empty platforms list.\");\n+        throw new IllegalArgumentException(\"platforms list cannot be empty.\");\n       }\n-      this.platforms = new ArrayList<>(platforms);\n+      this.platforms = new LinkedHashSet<>(platforms);\n       return this;\n     }\n \n", "next_change": {"commit": "97e4a87fd150656488a2826190bbeea0f526a18b", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 5dfd0ec96..f0f3d6bfa 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -103,7 +102,7 @@ public class ContainerBuildPlan {\n      */\n     public Builder setPlatforms(Set<Platform> platforms) throws IllegalArgumentException {\n       if (platforms.isEmpty()) {\n-        throw new IllegalArgumentException(\"platforms list cannot be empty.\");\n+        throw new IllegalArgumentException(\"platforms set cannot be empty.\");\n       }\n       this.platforms = new LinkedHashSet<>(platforms);\n       return this;\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyNTUwNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454425505", "body": "We don't use `@Nonnull`. Everything not `@Nullable` is assumed non-null.\r\n\r\nAlso, always add `final` if field references never change.", "bodyText": "We don't use @Nonnull. Everything not @Nullable is assumed non-null.\nAlso, always add final if field references never change.", "bodyHTML": "<p dir=\"auto\">We don't use <code>@Nonnull</code>. Everything not <code>@Nullable</code> is assumed non-null.</p>\n<p dir=\"auto\">Also, always add <code>final</code> if field references never change.</p>", "author": "chanseokoh", "createdAt": "2020-07-14T15:03:42Z", "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/Platform.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.api.buildplan;\n+\n+import javax.annotation.Nonnull;\n+\n+public class Platform {\n+  @Nonnull private String os;\n+  @Nonnull private String architecture;", "originalCommit": "ab257027b270a12179fec4bf40c6fdc497a74dfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ2MjgzNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454462836", "bodyText": "Intresting !! Done", "author": "louismurerwa", "createdAt": "2020-07-14T15:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyNTUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b770518fd58e35f4274f10c5c64a797d9236c4a9", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/Platform.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/Platform.java\nindex 78f3c668d..be55ce42b 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/Platform.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/Platform.java\n", "chunk": "@@ -16,11 +16,13 @@\n \n package com.google.cloud.tools.jib.api.buildplan;\n \n-import javax.annotation.Nonnull;\n+import javax.annotation.concurrent.Immutable;\n \n+/** Configuration of a platform. */\n+@Immutable\n public class Platform {\n-  @Nonnull private String os;\n-  @Nonnull private String architecture;\n+  private final String os;\n+  private final String architecture;\n \n   public Platform(String os, String architecture) {\n     this.os = os;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyNjY1Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454426653", "body": "Add `@Immutable` as other classes.\r\n\r\nAlso our repo policy is to add a Javadoc for a public class. Can be a short one.", "bodyText": "Add @Immutable as other classes.\nAlso our repo policy is to add a Javadoc for a public class. Can be a short one.", "bodyHTML": "<p dir=\"auto\">Add <code>@Immutable</code> as other classes.</p>\n<p dir=\"auto\">Also our repo policy is to add a Javadoc for a public class. Can be a short one.</p>", "author": "chanseokoh", "createdAt": "2020-07-14T15:05:19Z", "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/Platform.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.api.buildplan;\n+\n+import javax.annotation.Nonnull;\n+\n+public class Platform {", "originalCommit": "ab257027b270a12179fec4bf40c6fdc497a74dfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b770518fd58e35f4274f10c5c64a797d9236c4a9", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/Platform.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/Platform.java\nindex 78f3c668d..be55ce42b 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/Platform.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/Platform.java\n", "chunk": "@@ -16,11 +16,13 @@\n \n package com.google.cloud.tools.jib.api.buildplan;\n \n-import javax.annotation.Nonnull;\n+import javax.annotation.concurrent.Immutable;\n \n+/** Configuration of a platform. */\n+@Immutable\n public class Platform {\n-  @Nonnull private String os;\n-  @Nonnull private String architecture;\n+  private final String os;\n+  private final String architecture;\n \n   public Platform(String os, String architecture) {\n     this.os = os;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyODE3NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454428174", "body": "nit: let's just inline this.\r\n```suggestion\r\n        .setPlatforms(Arrays.asList(new Platform(\"os1\", \"arch1\")))\r\n```", "bodyText": "nit: let's just inline this.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .setPlatforms(Arrays.asList(platform))\n          \n          \n            \n                    .setPlatforms(Arrays.asList(new Platform(\"os1\", \"arch1\")))", "bodyHTML": "<p dir=\"auto\">nit: let's just inline this.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        .setPlatforms(<span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>asList(<span class=\"x x-first x-last\">platform</span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        .setPlatforms(<span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>asList(<span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">Platform</span><span class=\"x\">(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">os1</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">arch1</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">)</span>))</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "chanseokoh", "createdAt": "2020-07-14T15:07:26Z", "path": "jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java", "diffHunk": "@@ -121,10 +127,12 @@ private ContainerBuildPlan createSamplePlan() {\n         FileEntriesLayer.builder()\n             .addEntry(Paths.get(\"/src/file/foo\"), AbsoluteUnixPath.get(\"/path/in/container\"))\n             .build();\n+    Platform platform = new Platform(\"os1\", \"arch1\");\n     return ContainerBuildPlan.builder()\n         .setBaseImage(\"base/image\")\n         .setArchitectureHint(\"arch\")\n         .setOsHint(\"os\")\n+        .setPlatforms(Arrays.asList(platform))", "originalCommit": "ab257027b270a12179fec4bf40c6fdc497a74dfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b770518fd58e35f4274f10c5c64a797d9236c4a9", "changed_code": [{"header": "diff --git a/jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java b/jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java\nindex a7bb8af29..776a44d8a 100644\n--- a/jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java\n+++ b/jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java\n", "chunk": "@@ -127,12 +121,10 @@ public class ContainerBuildPlanTest {\n         FileEntriesLayer.builder()\n             .addEntry(Paths.get(\"/src/file/foo\"), AbsoluteUnixPath.get(\"/path/in/container\"))\n             .build();\n-    Platform platform = new Platform(\"os1\", \"arch1\");\n+\n     return ContainerBuildPlan.builder()\n         .setBaseImage(\"base/image\")\n-        .setArchitectureHint(\"arch\")\n-        .setOsHint(\"os\")\n-        .setPlatforms(Arrays.asList(platform))\n+        .setPlatforms(Arrays.asList(new Platform(\"testOs\", \"testArchitecture\")))\n         .setFormat(ImageFormat.OCI)\n         .setCreationTime(Instant.ofEpochMilli(30))\n         .setEnvironment(ImmutableMap.of(\"env\", \"var\"))\n", "next_change": {"commit": "d53153f3dd7ef9066caea2d0c23f3a3d8a6ed527", "changed_code": [{"header": "diff --git a/jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java b/jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java\nindex 776a44d8a..b61cc59bb 100644\n--- a/jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java\n+++ b/jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java\n", "chunk": "@@ -124,7 +123,7 @@ public class ContainerBuildPlanTest {\n \n     return ContainerBuildPlan.builder()\n         .setBaseImage(\"base/image\")\n-        .setPlatforms(Arrays.asList(new Platform(\"testOs\", \"testArchitecture\")))\n+        .setPlatforms(ImmutableSet.of(new Platform(\"testOs\", \"testArchitecture\")))\n         .setFormat(ImageFormat.OCI)\n         .setCreationTime(Instant.ofEpochMilli(30))\n         .setEnvironment(ImmutableMap.of(\"env\", \"var\"))\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MTEyMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454441121", "body": "We need to think about if this behavior is logical. For example,\r\n\r\n- case 1\r\n  1. Someone calls `getPlatforms()` at the beginning. It returns linux/amd64.\r\n  2. They call `addPlatform(linux/arm64)`.\r\n  3. `getPlatforms()` returns linux/am64.\r\n\r\n- case 2\r\n  1. Someone calls `setPlatforms( [ linux/amd64 ] )`.\r\n  2. `getPlatforms()` returns linux/amd64.\r\n  3. They call `addPlatform(linux/arm64)`.\r\n  4. `getPlatforms()` returns [ linux/amd64, linux/arm64 ].\r\n\r\nI think it's a bit counter-intuitive and may become a surprise. ", "bodyText": "We need to think about if this behavior is logical. For example,\n\n\ncase 1\n\nSomeone calls getPlatforms() at the beginning. It returns linux/amd64.\nThey call addPlatform(linux/arm64).\ngetPlatforms() returns linux/am64.\n\n\n\ncase 2\n\nSomeone calls setPlatforms( [ linux/amd64 ] ).\ngetPlatforms() returns linux/amd64.\nThey call addPlatform(linux/arm64).\ngetPlatforms() returns [ linux/amd64, linux/arm64 ].\n\n\n\nI think it's a bit counter-intuitive and may become a surprise.", "bodyHTML": "<p dir=\"auto\">We need to think about if this behavior is logical. For example,</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">case 1</p>\n<ol dir=\"auto\">\n<li>Someone calls <code>getPlatforms()</code> at the beginning. It returns linux/amd64.</li>\n<li>They call <code>addPlatform(linux/arm64)</code>.</li>\n<li><code>getPlatforms()</code> returns linux/am64.</li>\n</ol>\n</li>\n<li>\n<p dir=\"auto\">case 2</p>\n<ol dir=\"auto\">\n<li>Someone calls <code>setPlatforms( [ linux/amd64 ] )</code>.</li>\n<li><code>getPlatforms()</code> returns linux/amd64.</li>\n<li>They call <code>addPlatform(linux/arm64)</code>.</li>\n<li><code>getPlatforms()</code> returns [ linux/amd64, linux/arm64 ].</li>\n</ol>\n</li>\n</ul>\n<p dir=\"auto\">I think it's a bit counter-intuitive and may become a surprise.</p>", "author": "chanseokoh", "createdAt": "2020-07-14T15:25:03Z", "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -422,6 +459,20 @@ public String getOsHint() {\n     return osHint;\n   }\n \n+  /**\n+   * Creates and adds the user specified platform to the platforms list if user opts to use\n+   * setOsHint and setArchitectureHint methods.Else the method just returns the platforms list set\n+   * by the user using addPlatform or setPlatforms methods.\n+   *\n+   * @return platforms a list of desired platforms.\n+   */\n+  public List<Platform> getPlatforms() {\n+    if (platforms.isEmpty()) {\n+      platforms.add(new Platform(osHint, architectureHint));\n+    }\n+    return new ArrayList<>(platforms);", "originalCommit": "ab257027b270a12179fec4bf40c6fdc497a74dfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1NDQzNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454454435", "bodyText": "I agree with you that case 1 and case 2 are a bit illogical once you pair them but the current implementation of case 1 makes sense to some extent , we dont want the user to get stuck with the default platform.\nI have made case 1 similiar to case 2 but this has made it that the user will always have linux/amd64 in their platforms list if they use addPlatform().", "author": "louismurerwa", "createdAt": "2020-07-14T15:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MTEyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4NTcxMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454485711", "bodyText": "@chanseokoh What are your thoughts? Should i make case 1 point 3 more like case 2 point 3?", "author": "louismurerwa", "createdAt": "2020-07-14T16:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MTEyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4ODkxMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454488913", "bodyText": "How do we see people using getArchitectureHint/getOs now? And how do we see people using getPlatform?", "author": "loosebazooka", "createdAt": "2020-07-14T16:35:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MTEyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2ODQ2Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454568466", "bodyText": "I expect no external users using get/setOs/ArchitecureHint as of now, since they have no effect.\nThinking about this, I think addPlatform() should work in a consistent manner regardless of whether it's called for the first time or the second time. That is, considering the nature of the method name \"add\", I think it makes sense to always add a new platform.\nAt the same time, I'd like to have amd64/linux as the default. We can clearly document in the Javadoc of addPlatform() something along the line of saying \"note that the build plan starts with amd64/linux as the default platform. If you want to reset the default platform instead of adding a new one, use setPlatforms()\" or something like that.\nAnd I remember we had a discussion about handling duplicate values. I think we can take care of it easily if we use Set<Platform> instead of List<Platform>. And this behavior should also be documented. (For an actual Set implementation, we want to choose LinkedHashSet instead of, e.g., HashSet in order to preserve the element order.) But just using Set doesn't automatically make it remove duplicates, because Java will always think one Platform instance is different from another instance even if their OS and arch values are same. We need to tell Java that two different Platform instances are essentially \"equal\" if their internal values are same. To do so, you need to implement Platform.equals() and Platform.hashCode(). Take a look at the sibling FileEntry class.", "author": "chanseokoh", "createdAt": "2020-07-14T18:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MTEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b770518fd58e35f4274f10c5c64a797d9236c4a9", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 989cfc7c1..8ccd49e56 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -468,7 +426,7 @@ public class ContainerBuildPlan {\n    */\n   public List<Platform> getPlatforms() {\n     if (platforms.isEmpty()) {\n-      platforms.add(new Platform(osHint, architectureHint));\n+      platforms.add(new Platform(\"linux\", \"amd64\"));\n     }\n     return new ArrayList<>(platforms);\n   }\n", "next_change": {"commit": "4da89a964274a73c8144ce4204f1cabbb366ddd4", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 8ccd49e56..0ba06147b 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -418,11 +421,10 @@ public class ContainerBuildPlan {\n   }\n \n   /**\n-   * Creates and adds the user specified platform to the platforms list if user opts to use\n-   * setOsHint and setArchitectureHint methods.Else the method just returns the platforms list set\n-   * by the user using addPlatform or setPlatforms methods.\n+   * Creates and returns a default platform if the user hasn't added or set any platforms ,else\n+   * returns a list of user specified platforms .\n    *\n-   * @return platforms a list of desired platforms.\n+   * @return platforms a list of user specified platforms.\n    */\n   public List<Platform> getPlatforms() {\n     if (platforms.isEmpty()) {\n", "next_change": {"commit": "d53153f3dd7ef9066caea2d0c23f3a3d8a6ed527", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 0ba06147b..5dfd0ec96 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -426,11 +432,11 @@ public class ContainerBuildPlan {\n    *\n    * @return platforms a list of user specified platforms.\n    */\n-  public List<Platform> getPlatforms() {\n+  public Set<Platform> getPlatforms() {\n     if (platforms.isEmpty()) {\n       platforms.add(new Platform(\"linux\", \"amd64\"));\n     }\n-    return new ArrayList<>(platforms);\n+    return new LinkedHashSet<>(platforms);\n   }\n \n   public ImageFormat getFormat() {\n", "next_change": {"commit": "a55cafcbdaf65b191dd71a23e2ebcd4f718c7c91", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 5dfd0ec96..58ba40e20 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -433,9 +432,6 @@ public class ContainerBuildPlan {\n    * @return platforms a list of user specified platforms.\n    */\n   public Set<Platform> getPlatforms() {\n-    if (platforms.isEmpty()) {\n-      platforms.add(new Platform(\"linux\", \"amd64\"));\n-    }\n     return new LinkedHashSet<>(platforms);\n   }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0Mjc2Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454442766", "body": "Should we guard against passing an empty input?\r\n\r\n```java\r\n    if (platforms.isEmpty()) {\r\n      throw new IllegalArgumentException(\"some error message telling the caller that the list cannot be empty\");\r\n    }\r\n```\r\n\r\nIf we disallow an empty list, it should also be documented in the Javadoc.", "bodyText": "Should we guard against passing an empty input?\n    if (platforms.isEmpty()) {\n      throw new IllegalArgumentException(\"some error message telling the caller that the list cannot be empty\");\n    }\nIf we disallow an empty list, it should also be documented in the Javadoc.", "bodyHTML": "<p dir=\"auto\">Should we guard against passing an empty input?</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    if (platforms.isEmpty()) {\n      throw new IllegalArgumentException(&quot;some error message telling the caller that the list cannot be empty&quot;);\n    }\n\"><pre>    <span class=\"pl-k\">if</span> (platforms<span class=\"pl-k\">.</span>isEmpty()) {\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>some error message telling the caller that the list cannot be empty<span class=\"pl-pds\">\"</span></span>);\n    }</pre></div>\n<p dir=\"auto\">If we disallow an empty list, it should also be documented in the Javadoc.</p>", "author": "chanseokoh", "createdAt": "2020-07-14T15:27:16Z", "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -93,6 +94,38 @@ public Builder setOsHint(String osHint) {\n       return this;\n     }\n \n+    /**\n+     * Adds a desired platform i.e image os and architecture pair. If the base image reference is a\n+     * Docker manifest list or an OCI image index, must be set so that an image builder can select\n+     * the image matching the given platform. If the base image reference is an image manifest, this\n+     * value is ignored and the platform of the built image follows that of the base image. The\n+     * default is {@code linux amd64 }.\n+     *\n+     * @param os value to select a base image in case of a manifest list\n+     * @param architecture value to select a base image in case of a manifest list\n+     * @return this\n+     */\n+    public Builder addPlatform(String os, String architecture) {\n+      this.platforms.add(new Platform(os, architecture));\n+      return this;\n+    }\n+\n+    /**\n+     * Sets a desired platform list i.e os and architecture pairs. If the base image reference is a\n+     * Docker manifest list or an OCI image index, must be set so that an image builder can select\n+     * the images matching the given platforms. If the base image reference is an image manifest,\n+     * this value is ignored and the platform of the built image follows that of the base image. The\n+     * default is {@code linux amd64 }.\n+     *\n+     * @param platforms a list of platform objects to be used to select base images in case of a\n+     *     manifest list\n+     * @return this\n+     */\n+    public Builder setPlatforms(List<Platform> platforms) {\n+      this.platforms = new ArrayList<>(platforms);", "originalCommit": "ab257027b270a12179fec4bf40c6fdc497a74dfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1NjUyNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454456526", "bodyText": "Good Point !! I think its necessary to disallow empty lists .\n@chanseokoh  should I also guard against Null values or the system automatically does that ?", "author": "louismurerwa", "createdAt": "2020-07-14T15:46:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0Mjc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4Nzc4MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454487781", "bodyText": "In our case, we have set up a system for checking null, so unless marked with @Nullable, our code assumes it's never null. Of course, because this is a public API and our internal null checking system can't prevent the user from passing null, but I think it's fine. They should understand that our API doesn't accept null unless marked with @Nullable.", "author": "chanseokoh", "createdAt": "2020-07-14T16:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0Mjc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4OTE5Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454489197", "bodyText": "You can also use Preconditions.checkArgument()", "author": "loosebazooka", "createdAt": "2020-07-14T16:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0Mjc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b770518fd58e35f4274f10c5c64a797d9236c4a9", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 989cfc7c1..8ccd49e56 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -106,22 +75,27 @@ public class ContainerBuildPlan {\n      * @return this\n      */\n     public Builder addPlatform(String os, String architecture) {\n-      this.platforms.add(new Platform(os, architecture));\n+      platforms.add(new Platform(os, architecture));\n       return this;\n     }\n \n     /**\n-     * Sets a desired platform list i.e os and architecture pairs. If the base image reference is a\n-     * Docker manifest list or an OCI image index, must be set so that an image builder can select\n-     * the images matching the given platforms. If the base image reference is an image manifest,\n-     * this value is ignored and the platform of the built image follows that of the base image. The\n-     * default is {@code linux amd64 }.\n+     * Sets a desired platform list ,a list containing (OS and architecture pairs). If the base\n+     * image reference is a Docker manifest list or an OCI image index, must be set so that an image\n+     * builder can select the images matching the given platforms. If the base image reference is an\n+     * image manifest, this value is ignored and the platform of the built image follows that of the\n+     * base image. The default is {@code linux amd64 }.\n      *\n-     * @param platforms a list of platform objects to be used to select base images in case of a\n+     * @param platforms is a list of platform objects to be used to select base images in case of a\n      *     manifest list\n      * @return this\n+     * @throws IllegalArgumentException if a user passes in an empty platform list\n      */\n-    public Builder setPlatforms(List<Platform> platforms) {\n+    public Builder setPlatforms(List<Platform> platforms) throws IllegalArgumentException {\n+      if (platforms.isEmpty()) {\n+        throw new IllegalArgumentException(\n+            \"platforms list cannot be empty.Please pass in a non-empty platforms list.\");\n+      }\n       this.platforms = new ArrayList<>(platforms);\n       return this;\n     }\n", "next_change": {"commit": "d53153f3dd7ef9066caea2d0c23f3a3d8a6ed527", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 8ccd49e56..5dfd0ec96 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -91,12 +101,11 @@ public class ContainerBuildPlan {\n      * @return this\n      * @throws IllegalArgumentException if a user passes in an empty platform list\n      */\n-    public Builder setPlatforms(List<Platform> platforms) throws IllegalArgumentException {\n+    public Builder setPlatforms(Set<Platform> platforms) throws IllegalArgumentException {\n       if (platforms.isEmpty()) {\n-        throw new IllegalArgumentException(\n-            \"platforms list cannot be empty.Please pass in a non-empty platforms list.\");\n+        throw new IllegalArgumentException(\"platforms list cannot be empty.\");\n       }\n-      this.platforms = new ArrayList<>(platforms);\n+      this.platforms = new LinkedHashSet<>(platforms);\n       return this;\n     }\n \n", "next_change": {"commit": "97e4a87fd150656488a2826190bbeea0f526a18b", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 5dfd0ec96..f0f3d6bfa 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -103,7 +102,7 @@ public class ContainerBuildPlan {\n      */\n     public Builder setPlatforms(Set<Platform> platforms) throws IllegalArgumentException {\n       if (platforms.isEmpty()) {\n-        throw new IllegalArgumentException(\"platforms list cannot be empty.\");\n+        throw new IllegalArgumentException(\"platforms set cannot be empty.\");\n       }\n       this.platforms = new LinkedHashSet<>(platforms);\n       return this;\n", "next_change": null}]}}]}}]}}, {"oid": "b770518fd58e35f4274f10c5c64a797d9236c4a9", "url": "https://github.com/GoogleContainerTools/jib/commit/b770518fd58e35f4274f10c5c64a797d9236c4a9", "message": "Removed get/set/os/archHint", "committedDate": "2020-07-14T18:04:54Z", "type": "commit"}, {"oid": "4803cecc5a3e225c7518ee55ed1f48d1c5b7c557", "url": "https://github.com/GoogleContainerTools/jib/commit/4803cecc5a3e225c7518ee55ed1f48d1c5b7c557", "message": "Comment Fixes", "committedDate": "2020-07-14T18:12:15Z", "type": "commit"}, {"oid": "4da89a964274a73c8144ce4204f1cabbb366ddd4", "url": "https://github.com/GoogleContainerTools/jib/commit/4da89a964274a73c8144ce4204f1cabbb366ddd4", "message": "Adding default platform to addPlatform", "committedDate": "2020-07-14T18:27:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3MzY4Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454573687", "body": "```suggestion\r\n            \"platforms list cannot be empty.\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"platforms list cannot be empty.Please pass in a non-empty platforms list.\");\n          \n          \n            \n                        \"platforms list cannot be empty.\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>platforms list cannot be empty.<span class=\"x x-first x-last\">Please pass in a non-empty platforms list.</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>platforms list cannot be empty.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "chanseokoh", "createdAt": "2020-07-14T18:54:40Z", "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -65,31 +64,42 @@ public Builder setBaseImage(String baseImage) {\n     }\n \n     /**\n-     * Desired image architecture. If the base image reference is a Docker manifest list or an OCI\n-     * image index, must be set so that an image builder can select the image matching the given\n-     * architecture. If the base image reference is not a manifest list or an OCI image index, this\n-     * value is ignored and the architecture of the built image follows that of the base image. The\n-     * default is {@code amd64}.\n+     * Adds a desired platform (OS and architecture pair). If the base image reference is a Docker\n+     * manifest list or an OCI image index, must be set so that an image builder can select the\n+     * image matching the given platform. If the base image reference is an image manifest, this\n+     * value is ignored and the platform of the built image follows that of the base image. The\n+     * default is {@code linux amd64 }.\n      *\n-     * @param architectureHint architecture value to select a base image in case of a manifest list\n+     * @param os value to select a base image in case of a manifest list\n+     * @param architecture value to select a base image in case of a manifest list\n      * @return this\n      */\n-    public Builder setArchitectureHint(String architectureHint) {\n-      this.architectureHint = architectureHint;\n+    public Builder addPlatform(String os, String architecture) {\n+      if (platforms.isEmpty()) {\n+        platforms.add(new Platform(\"linux\", \"amd64\"));\n+      }\n+      platforms.add(new Platform(os, architecture));\n       return this;\n     }\n \n     /**\n-     * Desired image OS. If the base image reference is a Docker manifest list or an OCI image\n-     * index, must be set so that an image builder can select the image matching the given OS. If\n-     * the base image reference is an image manifest, this value is ignored and the OS of the built\n-     * image follows that of the base image. The default is {@code linux}.\n+     * Sets a desired platform list ,a list containing (OS and architecture pairs). If the base\n+     * image reference is a Docker manifest list or an OCI image index, must be set so that an image\n+     * builder can select the images matching the given platforms. If the base image reference is an\n+     * image manifest, this value is ignored and the platform of the built image follows that of the\n+     * base image. The default is {@code linux amd64 }.\n      *\n-     * @param osHint OS value to select a base image in case of a manifest list\n+     * @param platforms is a list of platform objects to be used to select base images in case of a\n+     *     manifest list\n      * @return this\n+     * @throws IllegalArgumentException if a user passes in an empty platform list\n      */\n-    public Builder setOsHint(String osHint) {\n-      this.osHint = osHint;\n+    public Builder setPlatforms(List<Platform> platforms) throws IllegalArgumentException {\n+      if (platforms.isEmpty()) {\n+        throw new IllegalArgumentException(\n+            \"platforms list cannot be empty.Please pass in a non-empty platforms list.\");", "originalCommit": "4da89a964274a73c8144ce4204f1cabbb366ddd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxMDk3OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454610979", "bodyText": "Done", "author": "louismurerwa", "createdAt": "2020-07-14T20:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3MzY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d53153f3dd7ef9066caea2d0c23f3a3d8a6ed527", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 0ba06147b..5dfd0ec96 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -94,12 +101,11 @@ public class ContainerBuildPlan {\n      * @return this\n      * @throws IllegalArgumentException if a user passes in an empty platform list\n      */\n-    public Builder setPlatforms(List<Platform> platforms) throws IllegalArgumentException {\n+    public Builder setPlatforms(Set<Platform> platforms) throws IllegalArgumentException {\n       if (platforms.isEmpty()) {\n-        throw new IllegalArgumentException(\n-            \"platforms list cannot be empty.Please pass in a non-empty platforms list.\");\n+        throw new IllegalArgumentException(\"platforms list cannot be empty.\");\n       }\n-      this.platforms = new ArrayList<>(platforms);\n+      this.platforms = new LinkedHashSet<>(platforms);\n       return this;\n     }\n \n", "next_change": {"commit": "97e4a87fd150656488a2826190bbeea0f526a18b", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 5dfd0ec96..f0f3d6bfa 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -103,7 +102,7 @@ public class ContainerBuildPlan {\n      */\n     public Builder setPlatforms(Set<Platform> platforms) throws IllegalArgumentException {\n       if (platforms.isEmpty()) {\n-        throw new IllegalArgumentException(\"platforms list cannot be empty.\");\n+        throw new IllegalArgumentException(\"platforms set cannot be empty.\");\n       }\n       this.platforms = new LinkedHashSet<>(platforms);\n       return this;\n", "next_change": null}]}}]}}, {"oid": "d53153f3dd7ef9066caea2d0c23f3a3d8a6ed527", "url": "https://github.com/GoogleContainerTools/jib/commit/d53153f3dd7ef9066caea2d0c23f3a3d8a6ed527", "message": "Implemanting the functionality to check for duplicate platforms", "committedDate": "2020-07-14T20:02:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNTU3OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454615578", "body": "```java\r\n    private Set<Platform> platforms = new LinkedHashSet<>(Collections.singleton(new Platform(\"linux\", \"amd64\")));\r\n```\r\n\r\nYou can then remove all the \"if empty then add amd64/linux as a default\" code in multiple places.", "bodyText": "private Set<Platform> platforms = new LinkedHashSet<>(Collections.singleton(new Platform(\"linux\", \"amd64\")));\nYou can then remove all the \"if empty then add amd64/linux as a default\" code in multiple places.", "bodyHTML": "<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    private Set&lt;Platform&gt; platforms = new LinkedHashSet&lt;&gt;(Collections.singleton(new Platform(&quot;linux&quot;, &quot;amd64&quot;)));\"><pre>    <span class=\"pl-k\">private</span> <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">Platform</span>&gt;</span> platforms <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">LinkedHashSet&lt;&gt;</span>(<span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>singleton(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Platform</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>linux<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>amd64<span class=\"pl-pds\">\"</span></span>)));</pre></div>\n<p dir=\"auto\">You can then remove all the \"if empty then add amd64/linux as a default\" code in multiple places.</p>", "author": "chanseokoh", "createdAt": "2020-07-14T20:12:05Z", "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -34,11 +35,13 @@\n   public static class Builder {\n \n     private String baseImage = \"scratch\";\n-    private String architectureHint = \"amd64\";\n-    private String osHint = \"linux\";\n     private Instant creationTime = Instant.EPOCH;\n     private ImageFormat format = ImageFormat.Docker;\n \n+    // note that a LinkedHashSet instead of HashSet has been used so as to preserve the platform\n+    // order\n+    private Set<Platform> platforms = new LinkedHashSet<>();", "originalCommit": "d53153f3dd7ef9066caea2d0c23f3a3d8a6ed527", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY0NjczMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454646732", "bodyText": "Good Point", "author": "louismurerwa", "createdAt": "2020-07-14T21:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNTU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "a55cafcbdaf65b191dd71a23e2ebcd4f718c7c91", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 5dfd0ec96..58ba40e20 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -40,7 +41,8 @@ public class ContainerBuildPlan {\n \n     // note that a LinkedHashSet instead of HashSet has been used so as to preserve the platform\n     // order\n-    private Set<Platform> platforms = new LinkedHashSet<>();\n+    private Set<Platform> platforms =\n+        new LinkedHashSet<>(Collections.singleton(new Platform(\"linux\", \"amd64\")));\n \n     // image execution parameters\n     private Map<String, String> environment = new HashMap<>();\n", "next_change": null}]}}, {"oid": "a55cafcbdaf65b191dd71a23e2ebcd4f718c7c91", "url": "https://github.com/GoogleContainerTools/jib/commit/a55cafcbdaf65b191dd71a23e2ebcd4f718c7c91", "message": "Style FIxes", "committedDate": "2020-07-14T20:26:50Z", "type": "commit"}, {"oid": "5b97d19c6963cc15b13253a4cb249a1a7431423e", "url": "https://github.com/GoogleContainerTools/jib/commit/5b97d19c6963cc15b13253a4cb249a1a7431423e", "message": "set/addPlatforms Testing", "committedDate": "2020-07-15T15:07:12Z", "type": "commit"}, {"oid": "95da631902ff3cb7cd59dbf4e67c07484f28f382", "url": "https://github.com/GoogleContainerTools/jib/commit/95da631902ff3cb7cd59dbf4e67c07484f28f382", "message": "Merge remote-tracking branch 'origin' into ContainerBuildPlan", "committedDate": "2020-07-15T15:12:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NjI0MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r455256241", "body": "` platforms set cannot be empty ` - I will correct this", "bodyText": "platforms set cannot be empty - I will correct this", "bodyHTML": "<p dir=\"auto\"><code>platforms set cannot be empty</code> - I will correct this</p>", "author": "louismurerwa", "createdAt": "2020-07-15T18:27:42Z", "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -65,31 +70,41 @@ public Builder setBaseImage(String baseImage) {\n     }\n \n     /**\n-     * Desired image architecture. If the base image reference is a Docker manifest list or an OCI\n-     * image index, must be set so that an image builder can select the image matching the given\n-     * architecture. If the base image reference is not a manifest list or an OCI image index, this\n-     * value is ignored and the architecture of the built image follows that of the base image. The\n-     * default is {@code amd64}.\n+     * Adds a desired platform (OS and architecture pair). If the base image reference is a Docker\n+     * manifest list or an OCI image index, must be set so that an image builder can select the\n+     * image matching the given platform. If the base image reference is an image manifest, this\n+     * value is ignored and the platform of the built image follows that of the base image. The\n+     * default is {@code linux amd64 }.\n+     *\n+     * <p>Note that the build plan starts with amd64/linux as the default platform. If you want to\n+     * reset the default platform instead of adding a new one, use setPlatforms()\"\n      *\n-     * @param architectureHint architecture value to select a base image in case of a manifest list\n+     * @param os value to select a base image in case of a manifest list\n+     * @param architecture value to select a base image in case of a manifest list\n      * @return this\n      */\n-    public Builder setArchitectureHint(String architectureHint) {\n-      this.architectureHint = architectureHint;\n+    public Builder addPlatform(String os, String architecture) {\n+      platforms.add(new Platform(os, architecture));\n       return this;\n     }\n \n     /**\n-     * Desired image OS. If the base image reference is a Docker manifest list or an OCI image\n-     * index, must be set so that an image builder can select the image matching the given OS. If\n-     * the base image reference is an image manifest, this value is ignored and the OS of the built\n-     * image follows that of the base image. The default is {@code linux}.\n+     * Sets a desired platform list ,a list containing (OS and architecture pairs). If the base\n+     * image reference is a Docker manifest list or an OCI image index, must be set so that an image\n+     * builder can select the images matching the given platforms. If the base image reference is an\n+     * image manifest, this value is ignored and the platform of the built image follows that of the\n+     * base image. The default is {@code linux amd64 }.\n      *\n-     * @param osHint OS value to select a base image in case of a manifest list\n+     * @param platforms is a list of platform objects to be used to select base images in case of a\n+     *     manifest list\n      * @return this\n+     * @throws IllegalArgumentException if a user passes in an empty platform list\n      */\n-    public Builder setOsHint(String osHint) {\n-      this.osHint = osHint;\n+    public Builder setPlatforms(Set<Platform> platforms) throws IllegalArgumentException {\n+      if (platforms.isEmpty()) {\n+        throw new IllegalArgumentException(\"platforms list cannot be empty.\");", "originalCommit": "95da631902ff3cb7cd59dbf4e67c07484f28f382", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "97e4a87fd150656488a2826190bbeea0f526a18b", "changed_code": [{"header": "diff --git a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\nindex 58ba40e20..f0f3d6bfa 100644\n--- a/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n+++ b/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java\n", "chunk": "@@ -102,7 +102,7 @@ public class ContainerBuildPlan {\n      */\n     public Builder setPlatforms(Set<Platform> platforms) throws IllegalArgumentException {\n       if (platforms.isEmpty()) {\n-        throw new IllegalArgumentException(\"platforms list cannot be empty.\");\n+        throw new IllegalArgumentException(\"platforms set cannot be empty.\");\n       }\n       this.platforms = new LinkedHashSet<>(platforms);\n       return this;\n", "next_change": null}]}}, {"oid": "97e4a87fd150656488a2826190bbeea0f526a18b", "url": "https://github.com/GoogleContainerTools/jib/commit/97e4a87fd150656488a2826190bbeea0f526a18b", "message": "Style Fixes", "committedDate": "2020-07-16T14:33:08Z", "type": "commit"}, {"oid": "97115faa9c69493bd98deab16dc6fccd2a8bcde6", "url": "https://github.com/GoogleContainerTools/jib/commit/97115faa9c69493bd98deab16dc6fccd2a8bcde6", "message": "Test Fixes", "committedDate": "2020-07-16T15:18:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg2ODI0Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r455868247", "body": "e --> ex per Google Java style", "bodyText": "e --> ex per Google Java style", "bodyHTML": "<p dir=\"auto\">e --&gt; ex per Google Java style</p>", "author": "chanseokoh", "createdAt": "2020-07-16T15:19:52Z", "path": "jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java", "diffHunk": "@@ -116,15 +115,37 @@ public void testToBuilder() {\n         ((FileEntriesLayer) plan.getLayers().get(0)).getEntries());\n   }\n \n+  @Test\n+  public void testAddPlatform_DuplicatePlatforms() {\n+    ContainerBuildPlan plan =\n+        ContainerBuildPlan.builder()\n+            .addPlatform(\"testOS\", \"testArchitecture\")\n+            .addPlatform(\"testOS\", \"testArchitecture\")\n+            .build();\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"linux\", \"amd64\"), new Platform(\"testOS\", \"testArchitecture\")),\n+        plan.getPlatforms());\n+  }\n+\n+  @Test\n+  public void testSetPlatforms_EmptyPlatformsSet() {\n+    try {\n+      ContainerBuildPlan.builder().setPlatforms(Collections.emptySet()).build();\n+      Assert.fail();\n+    } catch (IllegalArgumentException e) {", "originalCommit": "97115faa9c69493bd98deab16dc6fccd2a8bcde6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d34b63cb5a8e30f7ef722895a10a69a57f3112ee", "changed_code": [{"header": "diff --git a/jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java b/jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java\nindex 6fb12a792..6e08dd846 100644\n--- a/jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java\n+++ b/jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java\n", "chunk": "@@ -132,8 +132,8 @@ public class ContainerBuildPlanTest {\n     try {\n       ContainerBuildPlan.builder().setPlatforms(Collections.emptySet()).build();\n       Assert.fail();\n-    } catch (IllegalArgumentException e) {\n-      Assert.assertEquals(\"platforms set cannot be empty.\", e.getMessage());\n+    } catch (IllegalArgumentException ex) {\n+      Assert.assertEquals(\"platforms set cannot be empty.\", ex.getMessage());\n     }\n   }\n \n", "next_change": null}]}}, {"oid": "d34b63cb5a8e30f7ef722895a10a69a57f3112ee", "url": "https://github.com/GoogleContainerTools/jib/commit/d34b63cb5a8e30f7ef722895a10a69a57f3112ee", "message": "Style Fix", "committedDate": "2020-07-16T15:22:48Z", "type": "commit"}]}