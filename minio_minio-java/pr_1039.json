{"pr_number": 1039, "pr_title": "add ldap identity credential provider", "pr_author": "balamurugana", "pr_createdAt": "2020-08-15T04:35:48Z", "pr_url": "https://github.com/minio/minio-java/pull/1039", "timeline": [{"oid": "d2fe83416a3caa870736dea1b0ff356c3cf703f1", "url": "https://github.com/minio/minio-java/commit/d2fe83416a3caa870736dea1b0ff356c3cf703f1", "message": "add ldap identity credential provider", "committedDate": "2020-08-17T16:29:01Z", "type": "forcePushed"}, {"oid": "957c3c823cbc1eca098508cd53d6496f89a28000", "url": "https://github.com/minio/minio-java/commit/957c3c823cbc1eca098508cd53d6496f89a28000", "message": "add ldap identity credential provider", "committedDate": "2020-08-21T11:24:09Z", "type": "forcePushed"}, {"oid": "152d313175b259eef0ae65a664c278a5c68c6b0b", "url": "https://github.com/minio/minio-java/commit/152d313175b259eef0ae65a664c278a5c68c6b0b", "message": "add ldap identity credential provider", "committedDate": "2020-09-01T08:24:35Z", "type": "forcePushed"}, {"oid": "cdb10297a03429eb9c1e414b3fe4852b6bf109d4", "url": "https://github.com/minio/minio-java/commit/cdb10297a03429eb9c1e414b3fe4852b6bf109d4", "message": "add ldap identity credential provider", "committedDate": "2020-09-03T12:06:52Z", "type": "forcePushed"}, {"oid": "d6035748ed30055c51eab80fabf3c46eba67688b", "url": "https://github.com/minio/minio-java/commit/d6035748ed30055c51eab80fabf3c46eba67688b", "message": "add ldap identity credential provider", "committedDate": "2020-09-03T12:57:19Z", "type": "forcePushed"}, {"oid": "76581999b527583e520465699f1714d6c8f591cf", "url": "https://github.com/minio/minio-java/commit/76581999b527583e520465699f1714d6c8f591cf", "message": "add ldap identity credential provider", "committedDate": "2020-09-14T05:28:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5MzU2NA==", "url": "https://github.com/minio/minio-java/pull/1039#discussion_r488393564", "body": "```suggestion\r\n    if (ldapUsername == null || ldapUsername.isEmpty()) {\r\n      throw new IllegalArgumentException(\"LDAP username must be provided\");\r\n    }\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Objects.requireNonNull(ldapUsername, \"LDAP username must not be null\");\n          \n          \n            \n                if (ldapUsername.isEmpty()) {\n          \n          \n            \n                  throw new IllegalArgumentException(\"LDAP username must not be empty\");\n          \n          \n            \n                }\n          \n          \n            \n                if (ldapUsername == null || ldapUsername.isEmpty()) {\n          \n          \n            \n                  throw new IllegalArgumentException(\"LDAP username must be provided\");\n          \n          \n            \n                }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"52\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">Objects</span><span class=\"pl-k\">.</span>requireNonNull(ldapUsername, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>LDAP username must not be null<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"53\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">if</span> (ldapUsername<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"54\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>LDAP username must not be empty<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"55\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"52\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">if</span> (ldapUsername <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> ldapUsername<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"53\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>LDAP username must be provided<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"54\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "anjalshireesh", "createdAt": "2020-09-15T05:25:55Z", "path": "api/src/main/java/io/minio/credentials/LdapIdentityProvider.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import io.minio.Xml;\n+import io.minio.errors.XmlParserException;\n+import java.io.IOException;\n+import java.util.Objects;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import okhttp3.HttpUrl;\n+import okhttp3.MediaType;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.RequestBody;\n+import okhttp3.Response;\n+import org.simpleframework.xml.Element;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Path;\n+import org.simpleframework.xml.Root;\n+\n+/**\n+ * Credential provider using <a\n+ * href=\"https://github.com/minio/minio/blob/master/docs/sts/ldap.md\">AssumeRoleWithLDAPIdentity\n+ * API</a>.\n+ */\n+public class LdapIdentityProvider extends AssumeRoleBaseProvider {\n+  private static final RequestBody EMPTY_BODY =\n+      RequestBody.create(new byte[] {}, MediaType.parse(\"application/octet-stream\"));\n+  private final Request request;\n+\n+  public LdapIdentityProvider(\n+      @Nonnull String stsEndpoint,\n+      @Nonnull String ldapUsername,\n+      @Nonnull String ldapPassword,\n+      @Nullable OkHttpClient customHttpClient) {\n+    super(customHttpClient);\n+    stsEndpoint = Objects.requireNonNull(stsEndpoint, \"STS endpoint cannot be empty\");\n+    HttpUrl url = Objects.requireNonNull(HttpUrl.parse(stsEndpoint), \"Invalid STS endpoint\");\n+    Objects.requireNonNull(ldapUsername, \"LDAP username must not be null\");\n+    if (ldapUsername.isEmpty()) {\n+      throw new IllegalArgumentException(\"LDAP username must not be empty\");\n+    }", "originalCommit": "76581999b527583e520465699f1714d6c8f591cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNjYyOA==", "url": "https://github.com/minio/minio-java/pull/1039#discussion_r488406628", "body": "Looking at how this code of parsing response and returning credentials is almost same in three other providers, here's an idea:\r\n\r\n1) Introduce an interface called `HasCredentials` that has a method called `credentials()` and make all these response classes (`AssumeRoleResponse, ClientGrantsResponse, WebIdentityResponse and AssumeRoleWithLdapIdentityResponse`) implement it\r\n\r\n2) Add an abstract method in `AssumeRoleBaseProvider` called `getResponseClass()` that just returns the response class and implement it in all its concrete subclasses. In case of this class (`LdapIdentityProvider`), it will return `AssumeRoleWithLdapIdentityResponse.class`\r\n\r\n3) Make `AssumeRoleBaseProvider#parseResponse` concrete and implement it as follows:\r\n\r\n```\r\nprotected Credentials parseResponse(Response response) throws XmlParserException, IOException {\r\n    HasCredentials result =\r\n        Xml.unmarshal(getResponseClass(), response.body().charStream());\r\n    return result.credentials();\r\n  }\r\n```\r\n\r\n4) Remove all the overridden versions of `parseResponse` from the subclasses.", "bodyText": "Looking at how this code of parsing response and returning credentials is almost same in three other providers, here's an idea:\n\n\nIntroduce an interface called HasCredentials that has a method called credentials() and make all these response classes (AssumeRoleResponse, ClientGrantsResponse, WebIdentityResponse and AssumeRoleWithLdapIdentityResponse) implement it\n\n\nAdd an abstract method in AssumeRoleBaseProvider called getResponseClass() that just returns the response class and implement it in all its concrete subclasses. In case of this class (LdapIdentityProvider), it will return AssumeRoleWithLdapIdentityResponse.class\n\n\nMake AssumeRoleBaseProvider#parseResponse concrete and implement it as follows:\n\n\nprotected Credentials parseResponse(Response response) throws XmlParserException, IOException {\n    HasCredentials result =\n        Xml.unmarshal(getResponseClass(), response.body().charStream());\n    return result.credentials();\n  }\n\n\nRemove all the overridden versions of parseResponse from the subclasses.", "bodyHTML": "<p dir=\"auto\">Looking at how this code of parsing response and returning credentials is almost same in three other providers, here's an idea:</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">Introduce an interface called <code>HasCredentials</code> that has a method called <code>credentials()</code> and make all these response classes (<code>AssumeRoleResponse, ClientGrantsResponse, WebIdentityResponse and AssumeRoleWithLdapIdentityResponse</code>) implement it</p>\n</li>\n<li>\n<p dir=\"auto\">Add an abstract method in <code>AssumeRoleBaseProvider</code> called <code>getResponseClass()</code> that just returns the response class and implement it in all its concrete subclasses. In case of this class (<code>LdapIdentityProvider</code>), it will return <code>AssumeRoleWithLdapIdentityResponse.class</code></p>\n</li>\n<li>\n<p dir=\"auto\">Make <code>AssumeRoleBaseProvider#parseResponse</code> concrete and implement it as follows:</p>\n</li>\n</ol>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"protected Credentials parseResponse(Response response) throws XmlParserException, IOException {\n    HasCredentials result =\n        Xml.unmarshal(getResponseClass(), response.body().charStream());\n    return result.credentials();\n  }\"><pre><code>protected Credentials parseResponse(Response response) throws XmlParserException, IOException {\n    HasCredentials result =\n        Xml.unmarshal(getResponseClass(), response.body().charStream());\n    return result.credentials();\n  }\n</code></pre></div>\n<ol start=\"4\" dir=\"auto\">\n<li>Remove all the overridden versions of <code>parseResponse</code> from the subclasses.</li>\n</ol>", "author": "anjalshireesh", "createdAt": "2020-09-15T06:03:52Z", "path": "api/src/main/java/io/minio/credentials/LdapIdentityProvider.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import io.minio.Xml;\n+import io.minio.errors.XmlParserException;\n+import java.io.IOException;\n+import java.util.Objects;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import okhttp3.HttpUrl;\n+import okhttp3.MediaType;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.RequestBody;\n+import okhttp3.Response;\n+import org.simpleframework.xml.Element;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Path;\n+import org.simpleframework.xml.Root;\n+\n+/**\n+ * Credential provider using <a\n+ * href=\"https://github.com/minio/minio/blob/master/docs/sts/ldap.md\">AssumeRoleWithLDAPIdentity\n+ * API</a>.\n+ */\n+public class LdapIdentityProvider extends AssumeRoleBaseProvider {\n+  private static final RequestBody EMPTY_BODY =\n+      RequestBody.create(new byte[] {}, MediaType.parse(\"application/octet-stream\"));\n+  private final Request request;\n+\n+  public LdapIdentityProvider(\n+      @Nonnull String stsEndpoint,\n+      @Nonnull String ldapUsername,\n+      @Nonnull String ldapPassword,\n+      @Nullable OkHttpClient customHttpClient) {\n+    super(customHttpClient);\n+    stsEndpoint = Objects.requireNonNull(stsEndpoint, \"STS endpoint cannot be empty\");\n+    HttpUrl url = Objects.requireNonNull(HttpUrl.parse(stsEndpoint), \"Invalid STS endpoint\");\n+    Objects.requireNonNull(ldapUsername, \"LDAP username must not be null\");\n+    if (ldapUsername.isEmpty()) {\n+      throw new IllegalArgumentException(\"LDAP username must not be empty\");\n+    }\n+    Objects.requireNonNull(ldapPassword, \"LDAP password must not be null\");\n+\n+    HttpUrl.Builder urlBuilder =\n+        newUrlBuilder(url, \"AssumeRoleWithLDAPIdentity\", 0, null, null, null);\n+    url =\n+        urlBuilder\n+            .addQueryParameter(\"LDAPUsername\", ldapUsername)\n+            .addQueryParameter(\"LDAPPassword\", ldapPassword)\n+            .build();\n+    this.request = new Request.Builder().url(url).method(\"POST\", EMPTY_BODY).build();\n+  }\n+\n+  @Override\n+  protected Request getRequest() {\n+    return this.request;\n+  }\n+\n+  @Override\n+  protected Credentials parseResponse(Response response) throws XmlParserException, IOException {\n+    AssumeRoleWithLdapIdentityResponse result =\n+        Xml.unmarshal(AssumeRoleWithLdapIdentityResponse.class, response.body().charStream());\n+    return result.credentials();\n+  }", "originalCommit": "76581999b527583e520465699f1714d6c8f591cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "967d88e58b4150dc379274bec6dbf48bb811ab70", "url": "https://github.com/minio/minio-java/commit/967d88e58b4150dc379274bec6dbf48bb811ab70", "message": "add ldap identity credential provider", "committedDate": "2020-09-15T17:13:08Z", "type": "commit"}, {"oid": "c3b0008fd07594f776ad6b9b3231a2b638e1c5e3", "url": "https://github.com/minio/minio-java/commit/c3b0008fd07594f776ad6b9b3231a2b638e1c5e3", "message": "address review comments", "committedDate": "2020-09-15T17:13:08Z", "type": "commit"}, {"oid": "c3b0008fd07594f776ad6b9b3231a2b638e1c5e3", "url": "https://github.com/minio/minio-java/commit/c3b0008fd07594f776ad6b9b3231a2b638e1c5e3", "message": "address review comments", "committedDate": "2020-09-15T17:13:08Z", "type": "forcePushed"}]}