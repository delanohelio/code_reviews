{"pr_number": 904, "pr_title": "Rectify the validation condition & add functional test", "pr_author": "sinhaashish", "pr_createdAt": "2020-04-15T06:27:52Z", "pr_url": "https://github.com/minio/minio-java/pull/904", "timeline": [{"oid": "190dc46512c590b69ad11cd72064ecce965d5e23", "url": "https://github.com/minio/minio-java/commit/190dc46512c590b69ad11cd72064ecce965d5e23", "message": "Rectify the validation condition", "committedDate": "2020-04-15T07:03:31Z", "type": "forcePushed"}, {"oid": "d2e781996355554e7c6b499be28fb890d1e4e0f0", "url": "https://github.com/minio/minio-java/commit/d2e781996355554e7c6b499be28fb890d1e4e0f0", "message": "Rectify the validation condition", "committedDate": "2020-04-15T07:07:37Z", "type": "forcePushed"}, {"oid": "a8881b56f1021c2ad67693ff2870ae4ef0e74721", "url": "https://github.com/minio/minio-java/commit/a8881b56f1021c2ad67693ff2870ae4ef0e74721", "message": "Rectify the validation condition & add functionalTest", "committedDate": "2020-04-15T10:20:52Z", "type": "forcePushed"}, {"oid": "bc0b914021d3f3a1a49e22dd87881bc70c269e3a", "url": "https://github.com/minio/minio-java/commit/bc0b914021d3f3a1a49e22dd87881bc70c269e3a", "message": "Rectify the validation condition & add functionalTest", "committedDate": "2020-04-15T10:58:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTM4MQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408779381", "body": "Shouldn't this be `bucketConfig.duration()` instead of `bucketConfig.duration().duration()`", "bodyText": "Shouldn't this be bucketConfig.duration() instead of bucketConfig.duration().duration()", "bodyHTML": "<p dir=\"auto\">Shouldn't this be <code>bucketConfig.duration()</code> instead of <code>bucketConfig.duration().duration()</code></p>", "author": "nitisht", "createdAt": "2020-04-15T11:44:11Z", "path": "examples/SetGetBucketObjectLockConfig.java", "diffHunk": "@@ -56,7 +56,8 @@ public static void main(String[] args)\n \n       System.out.println(\"Default retention configuration of bucket\");\n       System.out.println(\"Mode: \" + bucketConfig.mode());\n-      System.out.println(\"Duration: \" + bucketConfig.duration());\n+      System.out.println(\n+          \"Duration: \" + bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit());", "originalCommit": "bc0b914021d3f3a1a49e22dd87881bc70c269e3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwNDMyOQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408804329", "bodyText": "bucketConfig.duration() returns a RetentionDuration object which actually contains the duration and unit i.e. days or years.\nReturning bucketConfig.duration()  will  just print the object which is  composed of the name of the class, an @ symbol and the hashcode of the object in hexadecimal.\nWe need to fetch the exact duration and unit and thus this change is needed.", "author": "sinhaashish", "createdAt": "2020-04-15T12:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3MTk5Ng==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408871996", "bodyText": "Have toString() to RetentionDurationDays and RetentionDurationYears classes to have friendlier message.", "author": "balamurugana", "createdAt": "2020-04-15T14:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3MDg3OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408870879", "body": "Have no arg constructor to `RetentionDurationYears` too.", "bodyText": "Have no arg constructor to RetentionDurationYears too.", "bodyHTML": "<p dir=\"auto\">Have no arg constructor to <code>RetentionDurationYears</code> too.</p>", "author": "balamurugana", "createdAt": "2020-04-15T14:08:31Z", "path": "api/src/main/java/io/minio/messages/RetentionDurationDays.java", "diffHunk": "@@ -25,6 +25,8 @@\n   @Text(required = false)\n   private Integer days;\n \n+  public RetentionDurationDays() {}", "originalCommit": "bc0b914021d3f3a1a49e22dd87881bc70c269e3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e27280352c089c5a5b14f45c164562e58d653bc0", "url": "https://github.com/minio/minio-java/commit/e27280352c089c5a5b14f45c164562e58d653bc0", "message": "Rectify the validation condition & add functionalTest", "committedDate": "2020-04-15T14:14:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxOTM2Mw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408919363", "body": "`days` may be `null`. Below is the right way to fix\r\n```java\r\nif (days == null) {\r\n  return null;\r\n}\r\n\r\nreturn days.toString() + ((days == 1) ? \" day\" : \" days\");\r\n```", "bodyText": "days may be null. Below is the right way to fix\nif (days == null) {\n  return null;\n}\n\nreturn days.toString() + ((days == 1) ? \" day\" : \" days\");", "bodyHTML": "<p dir=\"auto\"><code>days</code> may be <code>null</code>. Below is the right way to fix</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (days == null) {\n  return null;\n}\n\nreturn days.toString() + ((days == 1) ? &quot; day&quot; : &quot; days&quot;);\"><pre><span class=\"pl-k\">if</span> (days <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;\n}\n\n<span class=\"pl-k\">return</span> days<span class=\"pl-k\">.</span>toString() <span class=\"pl-k\">+</span> ((days <span class=\"pl-k\">==</span> <span class=\"pl-c1\">1</span>) <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> day<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> days<span class=\"pl-pds\">\"</span></span>);</pre></div>", "author": "balamurugana", "createdAt": "2020-04-15T15:10:59Z", "path": "api/src/main/java/io/minio/messages/RetentionDurationDays.java", "diffHunk": "@@ -36,4 +38,10 @@ public RetentionDurationUnit unit() {\n   public int duration() {\n     return days;\n   }\n+\n+  /** Returns RetentionDurationDays as string. */\n+  @Override\n+  public String toString() {\n+    return (days == 1) ? days + \" day\" : days + \" days\";", "originalCommit": "6745475e46b3d6c92bbea3982a3af10676262d31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxOTcxMA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408919710", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "balamurugana", "createdAt": "2020-04-15T15:11:25Z", "path": "api/src/main/java/io/minio/messages/RetentionDurationYears.java", "diffHunk": "@@ -36,4 +38,10 @@ public RetentionDurationUnit unit() {\n   public int duration() {\n     return years;\n   }\n+\n+  /** Returns RetentionDurationYears as string. */\n+  @Override\n+  public String toString() {\n+    return (years == 1) ? years + \" year\" : years + \" years\";", "originalCommit": "6745475e46b3d6c92bbea3982a3af10676262d31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMDQ2Mw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408920463", "body": "no change required", "bodyText": "no change required", "bodyHTML": "<p dir=\"auto\">no change required</p>", "author": "balamurugana", "createdAt": "2020-04-15T15:12:25Z", "path": "examples/SetGetBucketObjectLockConfig.java", "diffHunk": "@@ -54,9 +54,8 @@ public static void main(String[] args)\n       // Get object lock configuration\n       ObjectLockConfiguration bucketConfig = s3Client.getDefaultRetention(\"my-bucketname\");\n \n-      System.out.println(\"Default retention configuration of bucket\");\n-      System.out.println(\"Mode: \" + bucketConfig.mode());\n-      System.out.println(\"Duration: \" + bucketConfig.duration());\n+      System.out.print(\"Default retention configuration of bucket is \");\n+      System.out.println(bucketConfig.mode() + \" mode for \" + bucketConfig.duration().toString());", "originalCommit": "6745475e46b3d6c92bbea3982a3af10676262d31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3OTc0Ng==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408979746", "body": "Why not a new line?", "bodyText": "Why not a new line?", "bodyHTML": "<p dir=\"auto\">Why not a new line?</p>", "author": "balamurugana", "createdAt": "2020-04-15T16:36:24Z", "path": "examples/SetGetBucketObjectLockConfig.java", "diffHunk": "@@ -54,7 +54,7 @@ public static void main(String[] args)\n       // Get object lock configuration\n       ObjectLockConfiguration bucketConfig = s3Client.getDefaultRetention(\"my-bucketname\");\n \n-      System.out.println(\"Default retention configuration of bucket\");\n+      System.out.print(\"Default retention configuration of bucket  \");", "originalCommit": "0eed207fdf77067c0c6a4d02115a6252552a566c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "823aa4f280607779145306d93a22a0adcfd54732", "url": "https://github.com/minio/minio-java/commit/823aa4f280607779145306d93a22a0adcfd54732", "message": "Implement toString()", "committedDate": "2020-04-15T17:32:44Z", "type": "forcePushed"}, {"oid": "8bdbc4a876de4884683c25d1dd1f6de8373cae96", "url": "https://github.com/minio/minio-java/commit/8bdbc4a876de4884683c25d1dd1f6de8373cae96", "message": "Implement toString()", "committedDate": "2020-04-15T17:41:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzMTE5Ng==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409031196", "body": "This fix is incorrect. Either both values non-null or null. i.e. `mode != null && duration != null` and `mode == null && duration == null` are valid.\r\n\r\nBasically you need to have current `if` as `else if`", "bodyText": "This fix is incorrect. Either both values non-null or null. i.e. mode != null && duration != null and mode == null && duration == null are valid.\nBasically you need to have current if as else if", "bodyHTML": "<p dir=\"auto\">This fix is incorrect. Either both values non-null or null. i.e. <code>mode != null &amp;&amp; duration != null</code> and <code>mode == null &amp;&amp; duration == null</code> are valid.</p>\n<p dir=\"auto\">Basically you need to have current <code>if</code> as <code>else if</code></p>", "author": "balamurugana", "createdAt": "2020-04-15T18:00:15Z", "path": "api/src/main/java/io/minio/messages/ObjectLockConfiguration.java", "diffHunk": "@@ -45,7 +45,7 @@ public ObjectLockConfiguration(RetentionMode mode, RetentionDuration duration)\n       this.rule = new Rule(mode, duration);\n     }\n \n-    if (mode != null || duration != null) {\n+    if (mode == null || duration == null) {", "originalCommit": "8bdbc4a876de4884683c25d1dd1f6de8373cae96", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzMjc3Mw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409032773", "body": "use `ContentInputStream` here with 1 KB size.", "bodyText": "use ContentInputStream here with 1 KB size.", "bodyHTML": "<p dir=\"auto\">use <code>ContentInputStream</code> here with 1 KB size.</p>", "author": "balamurugana", "createdAt": "2020-04-15T18:03:03Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,196 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      StringBuilder builder = new StringBuilder();\n+      for (int i = 0; i < 10; i++) {\n+        builder.append(\n+            \"Sphinx of black quartz, judge my vow: Used by Adobe InDesign to display font samples. \");\n+        builder.append(\"(29 letters)\\n\");\n+        builder.append(\n+            \"Jackdaws love my big sphinx of quartz: Similarly, used by Windows XP for some fonts. \");\n+        builder.append(\"---\\n\");\n+      }\n+      // Create a InputStream for object upload.\n+      ByteArrayInputStream bais = new ByteArrayInputStream(builder.toString().getBytes(\"UTF-8\"));", "originalCommit": "8bdbc4a876de4884683c25d1dd1f6de8373cae96", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzNTU5OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409035599", "body": "we would need to have two separate tests here.\r\n1. `enableObjectLegalHold()` - enable legal hold on an object; on success, overwrite/delete object should fail\r\n2. `disableObjectLegalHold()` - disable legal hold on an object; on success, overwrite/delete object should succeed", "bodyText": "we would need to have two separate tests here.\n\nenableObjectLegalHold() - enable legal hold on an object; on success, overwrite/delete object should fail\ndisableObjectLegalHold() - disable legal hold on an object; on success, overwrite/delete object should succeed", "bodyHTML": "<p dir=\"auto\">we would need to have two separate tests here.</p>\n<ol dir=\"auto\">\n<li><code>enableObjectLegalHold()</code> - enable legal hold on an object; on success, overwrite/delete object should fail</li>\n<li><code>disableObjectLegalHold()</code> - disable legal hold on an object; on success, overwrite/delete object should succeed</li>\n</ol>", "author": "balamurugana", "createdAt": "2020-04-15T18:07:58Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,196 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");", "originalCommit": "8bdbc4a876de4884683c25d1dd1f6de8373cae96", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1ODA5MA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409058090", "body": "Can we not elaborate a bit more on the error here? by doing \r\n\r\n```\r\nif (mode != null && duration != null) {\r\n} else if (mode == null) {\r\n       IllegalArgumentException(\"mode is null\");\r\n} else if (duration == null) {\r\n       IllegalArgumentException(\"duration is null\");\r\n}\r\n```\r\n ", "bodyText": "Can we not elaborate a bit more on the error here? by doing\nif (mode != null && duration != null) {\n} else if (mode == null) {\n       IllegalArgumentException(\"mode is null\");\n} else if (duration == null) {\n       IllegalArgumentException(\"duration is null\");\n}", "bodyHTML": "<p dir=\"auto\">Can we not elaborate a bit more on the error here? by doing</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (mode != null &amp;&amp; duration != null) {\n} else if (mode == null) {\n       IllegalArgumentException(&quot;mode is null&quot;);\n} else if (duration == null) {\n       IllegalArgumentException(&quot;duration is null&quot;);\n}\"><pre><code>if (mode != null &amp;&amp; duration != null) {\n} else if (mode == null) {\n       IllegalArgumentException(\"mode is null\");\n} else if (duration == null) {\n       IllegalArgumentException(\"duration is null\");\n}\n</code></pre></div>", "author": "harshavardhana", "createdAt": "2020-04-15T18:46:27Z", "path": "api/src/main/java/io/minio/messages/ObjectLockConfiguration.java", "diffHunk": "@@ -43,9 +43,7 @@ public ObjectLockConfiguration(RetentionMode mode, RetentionDuration duration)\n       throws IllegalArgumentException {\n     if (mode != null && duration != null) {\n       this.rule = new Rule(mode, duration);\n-    }\n-\n-    if (mode == null || duration == null) {\n+    } else if (mode != null || duration != null) {\n       throw new IllegalArgumentException(\"mode or duration is null\");", "originalCommit": "b8583469e670b627c2fc976a786890bfa9a816fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4851b03fca36e3809a0c50aadf4dd807b590e9f1", "url": "https://github.com/minio/minio-java/commit/4851b03fca36e3809a0c50aadf4dd807b590e9f1", "message": "Add test for enableObjectLegalHold & disableObjectLegalHold", "committedDate": "2020-04-15T19:23:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4ODU3OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409088579", "body": "This is wrong check. You would need to preserve current `if` with `else if` with specific error message is requested\r\n```java\r\n    else if (mode != null || duration != null) {\r\n      if (mode == null) {\r\n        throw new IllegalArgumentException(\"mode is null\");\r\n      }\r\n      throw new IllegalArgumentException(\"duration is null\");\r\n    }\r\n```", "bodyText": "This is wrong check. You would need to preserve current if with else if with specific error message is requested\n    else if (mode != null || duration != null) {\n      if (mode == null) {\n        throw new IllegalArgumentException(\"mode is null\");\n      }\n      throw new IllegalArgumentException(\"duration is null\");\n    }", "bodyHTML": "<p dir=\"auto\">This is wrong check. You would need to preserve current <code>if</code> with <code>else if</code> with specific error message is requested</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    else if (mode != null || duration != null) {\n      if (mode == null) {\n        throw new IllegalArgumentException(&quot;mode is null&quot;);\n      }\n      throw new IllegalArgumentException(&quot;duration is null&quot;);\n    }\"><pre>    <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (mode <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> duration <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {\n      <span class=\"pl-k\">if</span> (mode <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {\n        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mode is null<span class=\"pl-pds\">\"</span></span>);\n      }\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>duration is null<span class=\"pl-pds\">\"</span></span>);\n    }</pre></div>", "author": "balamurugana", "createdAt": "2020-04-15T19:40:11Z", "path": "api/src/main/java/io/minio/messages/ObjectLockConfiguration.java", "diffHunk": "@@ -43,10 +43,10 @@ public ObjectLockConfiguration(RetentionMode mode, RetentionDuration duration)\n       throws IllegalArgumentException {\n     if (mode != null && duration != null) {\n       this.rule = new Rule(mode, duration);\n-    }\n-\n-    if (mode != null || duration != null) {\n-      throw new IllegalArgumentException(\"mode or duration is null\");\n+    } else if (mode == null) {\n+      throw new IllegalArgumentException(\"mode is null\");\n+    } else if (duration == null) {\n+      throw new IllegalArgumentException(\"duration is null\");", "originalCommit": "4851b03fca36e3809a0c50aadf4dd807b590e9f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a", "url": "https://github.com/minio/minio-java/commit/a56f177b7cd72462843f01890ab1eb379a06549a", "message": "Add test for enableObjectLegalHold & disableObjectLegalHold", "committedDate": "2020-04-16T00:48:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2ODg1Ng==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409268856", "body": "`bucketName` is good enough.", "bodyText": "bucketName is good enough.", "bodyHTML": "<p dir=\"auto\"><code>bucketName</code> is good enough.</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:06:06Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTA5NQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409269095", "body": "Is this error message same in AWS S3?", "bodyText": "Is this error message same in AWS S3?", "bodyHTML": "<p dir=\"auto\">Is this error message same in AWS S3?</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:07:05Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4NjgwNw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409986807", "bodyText": "AWS doesn't error out if  version is  not passed. So removed this check.", "author": "sinhaashish", "createdAt": "2020-04-17T04:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTA5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTQwNg==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409269406", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:08:28Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTczMA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409269730", "body": "just `bucketName` is good enough", "bodyText": "just bucketName is good enough", "bodyHTML": "<p dir=\"auto\">just <code>bucketName</code> is good enough</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:09:43Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MDA2OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409270068", "body": "align with method name i.e. `setDefaultRetention`", "bodyText": "align with method name i.e. setDefaultRetention", "bodyHTML": "<p dir=\"auto\">align with method name i.e. <code>setDefaultRetention</code></p>", "author": "balamurugana", "createdAt": "2020-04-16T04:11:14Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MDE4OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409270189", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:11:50Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MDM0NQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409270345", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:12:20Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MTM0OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409271349", "body": "use `==` operator to avoid `NullPointerException`", "bodyText": "use == operator to avoid NullPointerException", "bodyHTML": "<p dir=\"auto\">use <code>==</code> operator to avoid <code>NullPointerException</code></p>", "author": "balamurugana", "createdAt": "2020-04-16T04:16:17Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjE4Mw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409272183", "body": "For AWS S3, `versionId` should be passed i.e. this call will fail. Can you confirm?", "bodyText": "For AWS S3, versionId should be passed i.e. this call will fail. Can you confirm?", "bodyHTML": "<p dir=\"auto\">For AWS S3, <code>versionId</code> should be passed i.e. this call will fail. Can you confirm?</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:19:48Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NTIxMQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409395211", "bodyText": "Modified the code in MinioClient.java to\n    if (versionId != null && !versionId.isEmpty()) {\n      queryParamMap.put(\"versionId\", versionId);\n    }\n\nSo here in test case if we pass \"\" , the versionId is not set and this test passes against S3.", "author": "sinhaashish", "createdAt": "2020-04-16T08:59:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNDc5MA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409404790", "bodyText": "We may need to use this logic in all methods accepting versionId argument.", "author": "balamurugana", "createdAt": "2020-04-16T09:14:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjE4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjkxNg==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409272916", "body": "you are not capturing this error in case of mint mode. we need this error in mint mode too.", "bodyText": "you are not capturing this error in case of mint mode. we need this error in mint mode too.", "bodyHTML": "<p dir=\"auto\">you are not capturing this error in case of mint mode. we need this error in mint mode too.</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:22:35Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MzU0NQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409273545", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:24:53Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NDEwOA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409274108", "body": "this cleanup won't be executed if one of above conditions throw exceptions. you would need to fix it accordingly.", "bodyText": "this cleanup won't be executed if one of above conditions throw exceptions. you would need to fix it accordingly.", "bodyHTML": "<p dir=\"auto\">this cleanup won't be executed if one of above conditions throw exceptions. you would need to fix it accordingly.</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:27:05Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4Njk0OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409986949", "bodyText": "added finally block for cleanup", "author": "sinhaashish", "createdAt": "2020-04-17T04:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NDEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NDM3NA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409274374", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:28:11Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NDQzMA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409274430", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:28:25Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTE3OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409275178", "body": "repetitive `catch` block here.", "bodyText": "repetitive catch block here.", "bodyHTML": "<p dir=\"auto\">repetitive <code>catch</code> block here.</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:31:23Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTIwNw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409275207", "body": "repetitive `catch` block here.", "bodyText": "repetitive catch block here.", "bodyHTML": "<p dir=\"auto\">repetitive <code>catch</code> block here.</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:31:33Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTMwMQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409275301", "body": "this `try` has no meaning", "bodyText": "this try has no meaning", "bodyHTML": "<p dir=\"auto\">this <code>try</code> has no meaning</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:31:52Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTQ3OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409275478", "body": "this clean up won't be executed if above throws an exception.", "bodyText": "this clean up won't be executed if above throws an exception.", "bodyHTML": "<p dir=\"auto\">this clean up won't be executed if above throws an exception.</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:32:39Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NjI0NQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409276245", "body": "rename has `expectedConfig`", "bodyText": "rename has expectedConfig", "bodyHTML": "<p dir=\"auto\">rename has <code>expectedConfig</code></p>", "author": "balamurugana", "createdAt": "2020-04-16T04:35:37Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NjI5OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409276298", "body": "have it as `config`", "bodyText": "have it as config", "bodyHTML": "<p dir=\"auto\">have it as <code>config</code></p>", "author": "balamurugana", "createdAt": "2020-04-16T04:35:53Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NjQyOA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409276428", "body": "this should be captured in mint mode as well", "bodyText": "this should be captured in mint mode as well", "bodyHTML": "<p dir=\"auto\">this should be captured in mint mode as well</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:36:24Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzEyMA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277120", "body": "This check should be optimal\r\n```java\r\nconfig.duration().unit() == expectedConfig.duration().unit() && config.duration().duration() == expectedConfig.duration().duration()\r\n```", "bodyText": "This check should be optimal\nconfig.duration().unit() == expectedConfig.duration().unit() && config.duration().duration() == expectedConfig.duration().duration()", "bodyHTML": "<p dir=\"auto\">This check should be optimal</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"config.duration().unit() == expectedConfig.duration().unit() &amp;&amp; config.duration().duration() == expectedConfig.duration().duration()\"><pre>config<span class=\"pl-k\">.</span>duration()<span class=\"pl-k\">.</span>unit() <span class=\"pl-k\">==</span> expectedConfig<span class=\"pl-k\">.</span>duration()<span class=\"pl-k\">.</span>unit() <span class=\"pl-k\">&amp;&amp;</span> config<span class=\"pl-k\">.</span>duration()<span class=\"pl-k\">.</span>duration() <span class=\"pl-k\">==</span> expectedConfig<span class=\"pl-k\">.</span>duration()<span class=\"pl-k\">.</span>duration()</pre></div>", "author": "balamurugana", "createdAt": "2020-04-16T04:39:23Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzI2Mw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277263", "body": "capture in mint mode too", "bodyText": "capture in mint mode too", "bodyHTML": "<p dir=\"auto\">capture in mint mode too</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:39:57Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {\n+        System.out.println(", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzQzMA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277430", "body": "there is already stringifier.", "bodyText": "there is already stringifier.", "bodyHTML": "<p dir=\"auto\">there is already stringifier.</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:40:36Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {\n+        System.out.println(\n+            \"FAILED. expected duration : \"\n+                + \"10 DAYS\"\n+                + \", got: \"\n+                + (bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit()));", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzUzMQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277531", "body": "you should use `expectedConfig.duration()`", "bodyText": "you should use expectedConfig.duration()", "bodyHTML": "<p dir=\"auto\">you should use <code>expectedConfig.duration()</code></p>", "author": "balamurugana", "createdAt": "2020-04-16T04:40:56Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {\n+        System.out.println(\n+            \"FAILED. expected duration : \"\n+                + \"10 DAYS\"", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzY0Ng==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277646", "body": "cleanup issue in case of exception raised.", "bodyText": "cleanup issue in case of exception raised.", "bodyHTML": "<p dir=\"auto\">cleanup issue in case of exception raised.</p>", "author": "balamurugana", "createdAt": "2020-04-16T04:41:28Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {\n+        System.out.println(\n+            \"FAILED. expected duration : \"\n+                + \"10 DAYS\"\n+                + \", got: \"\n+                + (bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit()));\n+      }\n+\n+      client.removeBucket(bucketNameWithLock);", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "url": "https://github.com/minio/minio-java/commit/fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "message": "Rectify the validation condition & add functionalTest", "committedDate": "2020-04-16T19:26:02Z", "type": "commit"}, {"oid": "56232d8e6c58ed6a0ffe94a8c44651051ed33fe2", "url": "https://github.com/minio/minio-java/commit/56232d8e6c58ed6a0ffe94a8c44651051ed33fe2", "message": "Address Bala's comment", "committedDate": "2020-04-16T19:26:02Z", "type": "commit"}, {"oid": "93acc1b946d4b3f4f96761905f23c444be499661", "url": "https://github.com/minio/minio-java/commit/93acc1b946d4b3f4f96761905f23c444be499661", "message": "Implement toString()", "committedDate": "2020-04-16T19:26:02Z", "type": "commit"}, {"oid": "51a7cc078b4c65c084f9ce84d22cbc44ffefc08f", "url": "https://github.com/minio/minio-java/commit/51a7cc078b4c65c084f9ce84d22cbc44ffefc08f", "message": "Can pass either mode and duration or none", "committedDate": "2020-04-16T19:26:02Z", "type": "commit"}, {"oid": "28ea7c27b87d1573dcea3f0152f7846bbf4cd7d9", "url": "https://github.com/minio/minio-java/commit/28ea7c27b87d1573dcea3f0152f7846bbf4cd7d9", "message": "Add test for enableObjectLegalHold & disableObjectLegalHold", "committedDate": "2020-04-16T19:26:02Z", "type": "commit"}, {"oid": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "url": "https://github.com/minio/minio-java/commit/f7a2e3b1873442104f1558678f991dcc1043b2dd", "message": "Address Bala's review comment in Functional Test", "committedDate": "2020-04-16T19:26:02Z", "type": "commit"}, {"oid": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "url": "https://github.com/minio/minio-java/commit/f7a2e3b1873442104f1558678f991dcc1043b2dd", "message": "Address Bala's review comment in Functional Test", "committedDate": "2020-04-16T19:26:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1ODI5Nw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409958297", "body": "keep this list sorted", "bodyText": "keep this list sorted", "bodyHTML": "<p dir=\"auto\">keep this list sorted</p>", "author": "balamurugana", "createdAt": "2020-04-17T02:36:25Z", "path": "api/src/main/java/io/minio/ErrorCode.java", "diffHunk": "@@ -156,7 +156,10 @@\n   USER_KEY_MUST_BE_SPECIFIED(\n       \"UserKeyMustBeSpecified\",\n       \"The bucket POST must contain the specified field name or check the order of the fields\"),\n-  X_AMZ_CONTENT_SHA256_MISMATCH(\"XAmzContentSHA256Mismatch\", \"content SHA256 mismatch\");\n+  X_AMZ_CONTENT_SHA256_MISMATCH(\"XAmzContentSHA256Mismatch\", \"content SHA256 mismatch\"),\n+  NO_SUCH_OBJECT_LOCK_CONFIGURATION(", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1OTkzNw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409959937", "body": "use try-with-resource.\r\n```java\r\ntry (Response response = executeGet(bucketName, objectName, null, queryParamMap) {\r\n...\r\n...\r\n} catch (ErrorResponseException e) {\r\n  if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\r\n    throw e;\r\n  }\r\n}\r\n\r\nreturn null;\r\n```", "bodyText": "use try-with-resource.\ntry (Response response = executeGet(bucketName, objectName, null, queryParamMap) {\n...\n...\n} catch (ErrorResponseException e) {\n  if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n    throw e;\n  }\n}\n\nreturn null;", "bodyHTML": "<p dir=\"auto\">use try-with-resource.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"try (Response response = executeGet(bucketName, objectName, null, queryParamMap) {\n...\n...\n} catch (ErrorResponseException e) {\n  if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n    throw e;\n  }\n}\n\nreturn null;\"><pre><span class=\"pl-k\">try</span> (<span class=\"pl-smi\">Response</span> response <span class=\"pl-k\">=</span> executeGet(bucketName, objectName, <span class=\"pl-c1\">null</span>, queryParamMap) {\n<span class=\"pl-c1\">...</span>\n<span class=\"pl-c1\">...</span>\n} <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">ErrorResponseException</span> e) {\n  <span class=\"pl-k\">if</span> (e<span class=\"pl-k\">.</span>errorResponse()<span class=\"pl-k\">.</span>errorCode() <span class=\"pl-k\">!=</span> <span class=\"pl-smi\">ErrorCode</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>NO_SUCH_OBJECT_LOCK_CONFIGURATION</span>) {\n    <span class=\"pl-k\">throw</span> e;\n  }\n}\n\n<span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;</pre></div>", "author": "balamurugana", "createdAt": "2020-04-17T02:41:59Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3517,16 +3515,27 @@ public Retention getObjectRetention(String bucketName, String objectName, String\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"retention\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n \n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n-    try (ResponseBody body = response.body()) {\n-      return Xml.unmarshal(Retention.class, body.charStream());\n+    Response response = null;\n+    Retention retention = new Retention();\n+    try {", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2MTMxOQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409961319", "body": "use try-with-resource.\r\n```java\r\ntry (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\r\n....\r\n....\r\n} catch (ErrorResponseException e) {\r\n  if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\r\n    throw e;\r\n  }\r\n}\r\n\r\nreturn false;\r\n```", "bodyText": "use try-with-resource.\ntry (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n....\n....\n} catch (ErrorResponseException e) {\n  if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n    throw e;\n  }\n}\n\nreturn false;", "bodyHTML": "<p dir=\"auto\">use try-with-resource.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n....\n....\n} catch (ErrorResponseException e) {\n  if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n    throw e;\n  }\n}\n\nreturn false;\"><pre><span class=\"pl-k\">try</span> (<span class=\"pl-smi\">Response</span> response <span class=\"pl-k\">=</span> executeGet(bucketName, objectName, <span class=\"pl-c1\">null</span>, queryParamMap)) {\n<span class=\"pl-c1\">....</span>\n<span class=\"pl-c1\">....</span>\n} <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">ErrorResponseException</span> e) {\n  <span class=\"pl-k\">if</span> (e<span class=\"pl-k\">.</span>errorResponse()<span class=\"pl-k\">.</span>errorCode() <span class=\"pl-k\">!=</span> <span class=\"pl-smi\">ErrorCode</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>NO_SUCH_OBJECT_LOCK_CONFIGURATION</span>) {\n    <span class=\"pl-k\">throw</span> e;\n  }\n}\n\n<span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;</pre></div>", "author": "balamurugana", "createdAt": "2020-04-17T02:47:15Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3641,23 +3646,31 @@ public void disableObjectLegalHold(String bucketName, String objectName, String\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n   public boolean isObjectLegalHoldEnabled(String bucketName, String objectName, String versionId)\n-      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n-          InternalException, InvalidBucketNameException, InvalidKeyException,\n-          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+      throws IllegalArgumentException, InsufficientDataException, InternalException,\n+          InvalidBucketNameException, InvalidKeyException, InvalidResponseException, IOException,\n+          NoSuchAlgorithmException, XmlParserException {\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"legal-hold\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n-\n-    try (ResponseBody body = response.body()) {\n+    Response response = null;\n+    try {", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2NjM3Mg==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409966372", "body": "This is problematic to have an failure here. Below logic is better to handle corners.\r\n```java\r\n    try {\r\n      client.makeBucket(...);\r\n      try {\r\n        client.putObject(...);\r\n        client.enableObjectLegalHold(...);\r\n        if (!client.isObjectLegalHoldEnabled(...)) {\r\n          throw Exception(...);\r\n        }\r\n        client.disableObjectLegalHold(...);\r\n        mintSucessLog(...);\r\n      } finally {\r\n        client.removeObject(...);\r\n        client.removeBucket(...);\r\n      }\r\n    } catch (Exception e) {\r\n      ErrorResponse errorResponse = null;\r\n      if (e instanceof ErrorResponseException) {\r\n        ErrorResponseException exp = (ErrorResponseException) e;\r\n        errorResponse = exp.errorResponse();\r\n      }\r\n\r\n      // Ignore NotImplemented error\r\n      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\r\n        mintIgnoredLog(\r\n            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\r\n            null,\r\n            startTime);\r\n      } else {\r\n        mintFailedLog(\r\n            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\r\n            null,\r\n            startTime,\r\n            null,\r\n            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\r\n        throw e;\r\n      }\r\n    }\r\n```", "bodyText": "This is problematic to have an failure here. Below logic is better to handle corners.\n    try {\n      client.makeBucket(...);\n      try {\n        client.putObject(...);\n        client.enableObjectLegalHold(...);\n        if (!client.isObjectLegalHoldEnabled(...)) {\n          throw Exception(...);\n        }\n        client.disableObjectLegalHold(...);\n        mintSucessLog(...);\n      } finally {\n        client.removeObject(...);\n        client.removeBucket(...);\n      }\n    } catch (Exception e) {\n      ErrorResponse errorResponse = null;\n      if (e instanceof ErrorResponseException) {\n        ErrorResponseException exp = (ErrorResponseException) e;\n        errorResponse = exp.errorResponse();\n      }\n\n      // Ignore NotImplemented error\n      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n        mintIgnoredLog(\n            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n            null,\n            startTime);\n      } else {\n        mintFailedLog(\n            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n            null,\n            startTime,\n            null,\n            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n        throw e;\n      }\n    }", "bodyHTML": "<p dir=\"auto\">This is problematic to have an failure here. Below logic is better to handle corners.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    try {\n      client.makeBucket(...);\n      try {\n        client.putObject(...);\n        client.enableObjectLegalHold(...);\n        if (!client.isObjectLegalHoldEnabled(...)) {\n          throw Exception(...);\n        }\n        client.disableObjectLegalHold(...);\n        mintSucessLog(...);\n      } finally {\n        client.removeObject(...);\n        client.removeBucket(...);\n      }\n    } catch (Exception e) {\n      ErrorResponse errorResponse = null;\n      if (e instanceof ErrorResponseException) {\n        ErrorResponseException exp = (ErrorResponseException) e;\n        errorResponse = exp.errorResponse();\n      }\n\n      // Ignore NotImplemented error\n      if (errorResponse != null &amp;&amp; errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n        mintIgnoredLog(\n            &quot;enableObjectLegalHold(String bucketName, String objectName, String versionId)&quot;,\n            null,\n            startTime);\n      } else {\n        mintFailedLog(\n            &quot;enableObjectLegalHold(String bucketName, String objectName, String versionId)&quot;,\n            null,\n            startTime,\n            null,\n            e.toString() + &quot; &gt;&gt;&gt; &quot; + Arrays.toString(e.getStackTrace()));\n        throw e;\n      }\n    }\"><pre>    <span class=\"pl-k\">try</span> {\n      client<span class=\"pl-k\">.</span>makeBucket(<span class=\"pl-c1\">...</span>);\n      <span class=\"pl-k\">try</span> {\n        client<span class=\"pl-k\">.</span>putObject(<span class=\"pl-c1\">...</span>);\n        client<span class=\"pl-k\">.</span>enableObjectLegalHold(<span class=\"pl-c1\">...</span>);\n        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>client<span class=\"pl-k\">.</span>isObjectLegalHoldEnabled(<span class=\"pl-c1\">...</span>)) {\n          <span class=\"pl-k\">throw</span> Exception(<span class=\"pl-c1\">...</span>);\n        }\n        client<span class=\"pl-k\">.</span>disableObjectLegalHold(<span class=\"pl-c1\">...</span>);\n        mintSucessLog(<span class=\"pl-c1\">...</span>);\n      } <span class=\"pl-k\">finally</span> {\n        client<span class=\"pl-k\">.</span>removeObject(<span class=\"pl-c1\">...</span>);\n        client<span class=\"pl-k\">.</span>removeBucket(<span class=\"pl-c1\">...</span>);\n      }\n    } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> e) {\n      <span class=\"pl-smi\">ErrorResponse</span> errorResponse <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;\n      <span class=\"pl-k\">if</span> (e <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">ErrorResponseException</span>) {\n        <span class=\"pl-smi\">ErrorResponseException</span> exp <span class=\"pl-k\">=</span> (<span class=\"pl-smi\">ErrorResponseException</span>) e;\n        errorResponse <span class=\"pl-k\">=</span> exp<span class=\"pl-k\">.</span>errorResponse();\n      }\n\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Ignore NotImplemented error</span>\n      <span class=\"pl-k\">if</span> (errorResponse <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> errorResponse<span class=\"pl-k\">.</span>errorCode() <span class=\"pl-k\">==</span> <span class=\"pl-smi\">ErrorCode</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>NOT_IMPLEMENTED</span>) {\n        mintIgnoredLog(\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enableObjectLegalHold(String bucketName, String objectName, String versionId)<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-c1\">null</span>,\n            startTime);\n      } <span class=\"pl-k\">else</span> {\n        mintFailedLog(\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enableObjectLegalHold(String bucketName, String objectName, String versionId)<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-c1\">null</span>,\n            startTime,\n            <span class=\"pl-c1\">null</span>,\n            e<span class=\"pl-k\">.</span>toString() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> &gt;&gt;&gt; <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>toString(e<span class=\"pl-k\">.</span>getStackTrace()));\n        <span class=\"pl-k\">throw</span> e;\n      }\n    }</pre></div>", "author": "balamurugana", "createdAt": "2020-04-17T03:06:33Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+\n+        mintFailedLog(\n+            \"enableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+      }\n+\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2Njc3OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409966778", "body": "return `null` to `versionId` than empty string. you can fix this everywhere in `FunctionalTest`", "bodyText": "return null to versionId than empty string. you can fix this everywhere in FunctionalTest", "bodyHTML": "<p dir=\"auto\">return <code>null</code> to <code>versionId</code> than empty string. you can fix this everywhere in <code>FunctionalTest</code></p>", "author": "balamurugana", "createdAt": "2020-04-17T03:08:13Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2NzQ2OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409967468", "body": "We still throw `ErrorResponseException`, hence there is no change here.", "bodyText": "We still throw ErrorResponseException, hence there is no change here.", "bodyHTML": "<p dir=\"auto\">We still throw <code>ErrorResponseException</code>, hence there is no change here.</p>", "author": "balamurugana", "createdAt": "2020-04-17T03:10:52Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3641,23 +3646,31 @@ public void disableObjectLegalHold(String bucketName, String objectName, String\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n   public boolean isObjectLegalHoldEnabled(String bucketName, String objectName, String versionId)\n-      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n-          InternalException, InvalidBucketNameException, InvalidKeyException,\n-          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+      throws IllegalArgumentException, InsufficientDataException, InternalException,\n+          InvalidBucketNameException, InvalidKeyException, InvalidResponseException, IOException,\n+          NoSuchAlgorithmException, XmlParserException {", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2NzgxNg==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409967816", "body": "above logic applies here.", "bodyText": "above logic applies here.", "bodyHTML": "<p dir=\"auto\">above logic applies here.</p>", "author": "balamurugana", "createdAt": "2020-04-17T03:12:30Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+\n+        mintFailedLog(\n+            \"enableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+      }\n+\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2ODA0Mw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409968043", "body": "above logic applies here.", "bodyText": "above logic applies here.", "bodyHTML": "<p dir=\"auto\">above logic applies here.</p>", "author": "balamurugana", "createdAt": "2020-04-17T03:13:27Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+\n+        mintFailedLog(\n+            \"enableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+      }\n+\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        if (client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+          System.out.println(\n+              \"FAILED. expected Object Legal Hold Enabled to be : \" + \"False\" + \", got: True\");\n+        }\n+\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"False\" + \", got: True\");\n+      }\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2ODE0Mg==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409968142", "body": "above logic applies here.", "bodyText": "above logic applies here.", "bodyHTML": "<p dir=\"auto\">above logic applies here.</p>", "author": "balamurugana", "createdAt": "2020-04-17T03:13:46Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+\n+        mintFailedLog(\n+            \"enableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+      }\n+\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        if (client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+          System.out.println(\n+              \"FAILED. expected Object Legal Hold Enabled to be : \" + \"False\" + \", got: True\");\n+        }\n+\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"False\" + \", got: True\");\n+      }\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketName, config);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultRetention_test() throws Exception {", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "url": "https://github.com/minio/minio-java/commit/9560470e32d6469ea0d42d72fafd0795607f9ff4", "message": "Address few more review comments", "committedDate": "2020-04-17T10:20:33Z", "type": "commit"}, {"oid": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "url": "https://github.com/minio/minio-java/commit/9560470e32d6469ea0d42d72fafd0795607f9ff4", "message": "Address few more review comments", "committedDate": "2020-04-17T10:20:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1MjE1Nw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410352157", "body": "you could directly use `response.body().charStream()`", "bodyText": "you could directly use response.body().charStream()", "bodyHTML": "<p dir=\"auto\">you could directly use <code>response.body().charStream()</code></p>", "author": "balamurugana", "createdAt": "2020-04-17T17:00:04Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3517,16 +3515,20 @@ public Retention getObjectRetention(String bucketName, String objectName, String\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"retention\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n \n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n-    try (ResponseBody body = response.body()) {\n-      return Xml.unmarshal(Retention.class, body.charStream());\n+    try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n+      ResponseBody body = response.body();\n+      Retention retention = Xml.unmarshal(Retention.class, body.charStream());", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1MjU2OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410352569", "body": "wrong check. `e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION`", "bodyText": "wrong check. e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION", "bodyHTML": "<p dir=\"auto\">wrong check. <code>e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION</code></p>", "author": "balamurugana", "createdAt": "2020-04-17T17:00:50Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3517,16 +3515,20 @@ public Retention getObjectRetention(String bucketName, String objectName, String\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"retention\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n \n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n-    try (ResponseBody body = response.body()) {\n-      return Xml.unmarshal(Retention.class, body.charStream());\n+    try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n+      ResponseBody body = response.body();\n+      Retention retention = Xml.unmarshal(Retention.class, body.charStream());\n+      return retention;\n+    } catch (ErrorResponseException e) {\n+      if (e.errorResponse().errorCode() == ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1Mjk2NA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410352964", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "balamurugana", "createdAt": "2020-04-17T17:01:35Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3647,17 +3645,20 @@ public boolean isObjectLegalHoldEnabled(String bucketName, String objectName, St\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"legal-hold\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n \n-    try (ResponseBody body = response.body()) {\n+    try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n+      ResponseBody body = response.body();\n       LegalHold result = Xml.unmarshal(LegalHold.class, body.charStream());", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1ODE1NA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410358154", "body": "you could directly use and remove unused variables.\r\n```java\r\nif (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\r\n  throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\r\n}\r\n```\r\n", "bodyText": "you could directly use and remove unused variables.\nif (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n  throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n}", "bodyHTML": "<p dir=\"auto\">you could directly use and remove unused variables.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n  throw new Exception(&quot;[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false&quot;);\n}\"><pre><span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>client<span class=\"pl-k\">.</span>isObjectLegalHoldEnabled(bucketName, objectName, <span class=\"pl-c1\">null</span>)) {\n  <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Exception</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false<span class=\"pl-pds\">\"</span></span>);\n}</pre></div>", "author": "balamurugana", "createdAt": "2020-04-17T17:12:04Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1ODg3MQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410358871", "body": "you could directly use and remove unused variables.\r\n```java\r\nif (client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\r\n  throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: false, got: true\");\r\n}\r\n```\r\n", "bodyText": "you could directly use and remove unused variables.\nif (client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n  throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: false, got: true\");\n}", "bodyHTML": "<p dir=\"auto\">you could directly use and remove unused variables.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n  throw new Exception(&quot;[FAILED] isObjectLegalHoldEnabled(): expected: false, got: true&quot;);\n}\"><pre><span class=\"pl-k\">if</span> (client<span class=\"pl-k\">.</span>isObjectLegalHoldEnabled(bucketName, objectName, <span class=\"pl-c1\">null</span>)) {\n  <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Exception</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[FAILED] isObjectLegalHoldEnabled(): expected: false, got: true<span class=\"pl-pds\">\"</span></span>);\n}</pre></div>", "author": "balamurugana", "createdAt": "2020-04-17T17:13:28Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        // Enable object legal hold.\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        // Enable object legal hold.\n+        boolean expectedStatus = false;\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+\n+        if (isObjectLockEnabled) {", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1OTYxOA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410359618", "body": "you can remove these obvious comments.", "bodyText": "you can remove these obvious comments.", "bodyHTML": "<p dir=\"auto\">you can remove these obvious comments.</p>", "author": "balamurugana", "createdAt": "2020-04-17T17:14:46Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        // Enable object legal hold.\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        // Enable object legal hold.\n+        boolean expectedStatus = false;\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+\n+        if (isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        // Declaring config with Retention mode as Compliance and duration as 10 day", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1OTc3MA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410359770", "body": "you can remove these obvious comments everywhere.", "bodyText": "you can remove these obvious comments everywhere.", "bodyHTML": "<p dir=\"auto\">you can remove these obvious comments everywhere.</p>", "author": "balamurugana", "createdAt": "2020-04-17T17:15:02Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        // Enable object legal hold.\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        // Enable object legal hold.\n+        boolean expectedStatus = false;\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+\n+        if (isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        // Declaring config with Retention mode as Compliance and duration as 10 day\n+        ObjectLockConfiguration config =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+        // Set object lock configuration", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM2MDgyOQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410360829", "body": "you can use `new RetentionDurationYears(N)` for completeness.", "bodyText": "you can use new RetentionDurationYears(N) for completeness.", "bodyHTML": "<p dir=\"auto\">you can use <code>new RetentionDurationYears(N)</code> for completeness.</p>", "author": "balamurugana", "createdAt": "2020-04-17T17:17:02Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        // Enable object legal hold.\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        // Enable object legal hold.\n+        boolean expectedStatus = false;\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+\n+        if (isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        // Declaring config with Retention mode as Compliance and duration as 10 day\n+        ObjectLockConfiguration config =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+        // Set object lock configuration\n+        client.setDefaultRetention(bucketName, config);\n+      } finally {\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        // Declaring config with Retention mode as Compliance and duration as 10 day\n+        ObjectLockConfiguration expectedConfig =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "url": "https://github.com/minio/minio-java/commit/b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "message": "Remove comments in FunctionalTest", "committedDate": "2020-04-19T01:34:09Z", "type": "commit"}, {"oid": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "url": "https://github.com/minio/minio-java/commit/b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "message": "Remove comments in FunctionalTest", "committedDate": "2020-04-19T01:34:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwOTczOA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411509738", "body": "After setting `enableObjectLegalHold` we should attempt deleting the object and confirm that fails.", "bodyText": "After setting enableObjectLegalHold we should attempt deleting the object and confirm that fails.", "bodyHTML": "<p dir=\"auto\">After setting <code>enableObjectLegalHold</code> we should attempt deleting the object and confirm that fails.</p>", "author": "nitisht", "createdAt": "2020-04-20T16:16:14Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,230 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);", "originalCommit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxODQ2OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411518468", "bodyText": "This was earlier implemented, but removed as of now as it works with MinIO, but when ran against S3 with versionId as null it succeeds. (deleted the object).\nYou need specific object version to fail thus it was removed.", "author": "sinhaashish", "createdAt": "2020-04-20T16:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwOTczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNjA5Mg==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411526092", "bodyText": "IMO we can target to validate MinIO implementation", "author": "nitisht", "createdAt": "2020-04-20T16:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwOTczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTA5Nw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411511097", "body": "Here after `disableObjectLegalHold` we can attempt a delete and confirm that works", "bodyText": "Here after disableObjectLegalHold we can attempt a delete and confirm that works", "bodyHTML": "<p dir=\"auto\">Here after <code>disableObjectLegalHold</code> we can attempt a delete and confirm that works</p>", "author": "nitisht", "createdAt": "2020-04-20T16:18:07Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,230 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        client.disableObjectLegalHold(bucketName, objectName, null);", "originalCommit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTc2OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411511769", "body": "Here also we can attempt an upload and confirm the uploaded object can't be deleted. ", "bodyText": "Here also we can attempt an upload and confirm the uploaded object can't be deleted.", "bodyHTML": "<p dir=\"auto\">Here also we can attempt an upload and confirm the uploaded object can't be deleted.</p>", "author": "nitisht", "createdAt": "2020-04-20T16:19:01Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,230 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        if (client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: false, got: true\");\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        ObjectLockConfiguration config =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+        client.setDefaultRetention(bucketName, config);", "originalCommit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNzAwNQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411517005", "bodyText": "If we do so, we can't do clean up of the test.", "author": "balamurugana", "createdAt": "2020-04-20T16:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyMzk2MQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411523961", "bodyText": "IMO Testing the MinIO Server's behaviour is more important, since this test will become part of Mint. It will be used to validate MinIO Server behaviour. We generally test against Play or Local MinIO instances - in both cases cleanup is not that important", "author": "nitisht", "createdAt": "2020-04-20T16:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTc2OQ=="}], "type": "inlineReview"}]}