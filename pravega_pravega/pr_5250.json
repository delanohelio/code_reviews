{"pr_number": 5250, "pr_title": "Issue 5221: Port CLI security changes from Pravega Tools to Pravega core", "pr_createdAt": "2020-10-13T12:47:02Z", "pr_url": "https://github.com/pravega/pravega/pull/5250", "timeline": [{"oid": "8cd9e167a223ac94bac6427e355d28201f751b91", "url": "https://github.com/pravega/pravega/commit/8cd9e167a223ac94bac6427e355d28201f751b91", "message": "added security related changes\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-10-12T05:59:16Z", "type": "commit"}, {"oid": "b152d1e10318ff4ca806791f08fc8f851f7a36f8", "url": "https://github.com/pravega/pravega/commit/b152d1e10318ff4ca806791f08fc8f851f7a36f8", "message": "Added more tests for controller commands in secure scenarios\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-10-13T09:49:29Z", "type": "commit"}, {"oid": "23f4acb5403afa478f29eb5e433e41f78774d8f0", "url": "https://github.com/pravega/pravega/commit/23f4acb5403afa478f29eb5e433e41f78774d8f0", "message": "Fixed checkstyle, added a SecureSetupUtils for secure env testing, modified tests\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-10-14T05:53:21Z", "type": "commit"}, {"oid": "d2a1e98c26dce8018fba0d9de847e13a87c65c01", "url": "https://github.com/pravega/pravega/commit/d2a1e98c26dce8018fba0d9de847e13a87c65c01", "message": "Fixed admin cli spotbug fail\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-10-14T07:58:59Z", "type": "commit"}, {"oid": "1241943d2cfdba7dab52b4630a911bb3101718fc", "url": "https://github.com/pravega/pravega/commit/1241943d2cfdba7dab52b4630a911bb3101718fc", "message": "Merge remote-tracking branch 'upstream/master' into issue-5221-secure-cli", "committedDate": "2020-10-16T04:29:52Z", "type": "commit"}, {"oid": "1c6d1cf48800d4f5b6187053398b8a98c7f38b70", "url": "https://github.com/pravega/pravega/commit/1c6d1cf48800d4f5b6187053398b8a98c7f38b70", "message": "ControllerWrapper auth is enabled in SecureSetupUtils\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-10-16T05:31:50Z", "type": "commit"}, {"oid": "716561dfdea93524f880eccdef691a77a7ea33b1", "url": "https://github.com/pravega/pravega/commit/716561dfdea93524f880eccdef691a77a7ea33b1", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-10-19T04:42:55Z", "type": "commit"}, {"oid": "958f481ceb915cc7a9c893b37c7db5d4fa92e48e", "url": "https://github.com/pravega/pravega/commit/958f481ceb915cc7a9c893b37c7db5d4fa92e48e", "message": "Added changes to user-cli for secure environments\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-10-21T10:17:50Z", "type": "commit"}, {"oid": "b3446d8925062ac47c37dc812ba5561e454432be", "url": "https://github.com/pravega/pravega/commit/b3446d8925062ac47c37dc812ba5561e454432be", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-10-21T10:18:39Z", "type": "commit"}, {"oid": "b3446d8925062ac47c37dc812ba5561e454432be", "url": "https://github.com/pravega/pravega/commit/b3446d8925062ac47c37dc812ba5561e454432be", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-10-21T10:18:39Z", "type": "forcePushed"}, {"oid": "28080901e73ba9f1278c0bad59458a65378e48ce", "url": "https://github.com/pravega/pravega/commit/28080901e73ba9f1278c0bad59458a65378e48ce", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-10-22T10:35:56Z", "type": "commit"}, {"oid": "b6bc12bfb99346b5456ca02013d33828893c2b28", "url": "https://github.com/pravega/pravega/commit/b6bc12bfb99346b5456ca02013d33828893c2b28", "message": "Added auth tests for user commands, added standalone based tls, secure tests for admin\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-10-22T12:49:48Z", "type": "commit"}, {"oid": "b6bc12bfb99346b5456ca02013d33828893c2b28", "url": "https://github.com/pravega/pravega/commit/b6bc12bfb99346b5456ca02013d33828893c2b28", "message": "Added auth tests for user commands, added standalone based tls, secure tests for admin\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-10-22T12:49:48Z", "type": "forcePushed"}, {"oid": "d4bb324655b5b3c0639caa134504aa1a0a6a1ab3", "url": "https://github.com/pravega/pravega/commit/d4bb324655b5b3c0639caa134504aa1a0a6a1ab3", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-10-23T10:17:44Z", "type": "commit"}, {"oid": "2572fe32258bd2161c355bb69e114433f72568e4", "url": "https://github.com/pravega/pravega/commit/2572fe32258bd2161c355bb69e114433f72568e4", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-10-28T09:48:07Z", "type": "commit"}, {"oid": "64aefb5947586ab85025715fe60484460c955c16", "url": "https://github.com/pravega/pravega/commit/64aefb5947586ab85025715fe60484460c955c16", "message": "Changes to build.gradle to resolve dependencies, added tests for user cli cases\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-10-28T09:52:24Z", "type": "commit"}, {"oid": "7a905eec32cdafbea6730b94b1d2b57b93da6252", "url": "https://github.com/pravega/pravega/commit/7a905eec32cdafbea6730b94b1d2b57b93da6252", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-10-29T11:06:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0ODA4OA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516048088", "bodyText": "output supports formatted text. Please use that api.", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:24:40Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +61,39 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            InputStream trustStore = null;\n+            try {\n+                trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+                trustStore.close();\n+\n+            } catch (KeyStoreException e) {\n+                output(\"The keystore file is invalid, the keystore type is not supported: \" + e.toString());", "originalCommit": "64aefb5947586ab85025715fe60484460c955c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTcyNA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121724", "bodyText": "Used the api for formatted text.", "author": "anirudhkovuru", "createdAt": "2020-11-04T06:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0ODA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex b83cd1b01..c042c3685 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -67,21 +68,20 @@ public abstract class ControllerCommand extends AdminCommand {\n         // If tls parameters are configured, set them in client\n         if (getCLIControllerConfig().isTlsEnabled()) {\n             KeyStore ks = null;\n-            InputStream trustStore = null;\n             try {\n-                trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n                 ks = KeyStore.getInstance(\"JKS\");\n                 ks.load(trustStore, null);\n-                trustStore.close();\n \n             } catch (KeyStoreException e) {\n-                output(\"The keystore file is invalid, the keystore type is not supported: \" + e.toString());\n+                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n             } catch (IOException e) {\n-                output(\"The keystore file is invalid, check if the file exists: \" + e.toString());\n+                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n             } catch (NoSuchAlgorithmException e) {\n-                output(\"The keystore file is invalid, the keystore file might be in the wrong format: \" + e.toString());\n+                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n             } catch (CertificateException e) {\n-                output(\"The keystore file is invalid, check if the certificates are valid: \" + e.toString());\n+                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n             }\n \n             HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex c042c3685..ac7da01ea 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -59,45 +58,39 @@ public abstract class ControllerCommand extends AdminCommand {\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n \n         Client client;\n \n-        // If tls parameters are configured, set them in client\n-        if (getCLIControllerConfig().isTlsEnabled()) {\n-            KeyStore ks = null;\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n             try {\n-                @Cleanup\n-                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n-                ks = KeyStore.getInstance(\"JKS\");\n-                ks.load(trustStore, null);\n-\n-            } catch (KeyStoreException e) {\n-                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n-            } catch (IOException e) {\n-                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n-            } catch (NoSuchAlgorithmException e) {\n-                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n-            } catch (CertificateException e) {\n-                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n+                e.printStackTrace();\n+                return null;\n             }\n-\n-            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n             client = ClientBuilder.newBuilder()\n                     .withConfig(clientConfig)\n-                    .trustStore(ks)\n-                    .hostnameVerifier(controllerHostnameVerifier)\n+                    .sslContext(tlsContext)\n                     .build();\n         } else {\n             client = ClientBuilder.newClient(clientConfig);\n         }\n \n         // If authorization parameters are configured, set them in the client.\n-        if (getCLIControllerConfig().isAuthEnabled()) {\n-            HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(getCLIControllerConfig().getUserName(),\n-                    getCLIControllerConfig().getPassword());\n+        if (config.isAuthEnabled()) {\n+            HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n+                    config.getPassword());\n             client = client.register(auth);\n         }\n         return new Context(client);\n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex ac7da01ea..8f1c49e99 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -76,17 +76,12 @@ public abstract class ControllerCommand extends AdminCommand {\n                 tlsContext.init(null, tmf.getTrustManagers(), null);\n             } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n                 output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n-                e.printStackTrace();\n+                output(e.getMessage());\n                 return null;\n             }\n-            client = ClientBuilder.newBuilder()\n-                    .withConfig(clientConfig)\n-                    .sslContext(tlsContext)\n-                    .build();\n-        } else {\n-            client = ClientBuilder.newClient(clientConfig);\n+            builder.sslContext(tlsContext);\n         }\n-\n+        Client client = builder.build();\n         // If authorization parameters are configured, set them in the client.\n         if (config.isAuthEnabled()) {\n             HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0OTIzOA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516049238", "bodyText": "I suggest using try-with-resources or annotating with with @Cleanup to ensure this is closed. If you get an error between here and line 75, your input stream will not be closed.", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:26:11Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +61,39 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            InputStream trustStore = null;\n+            try {\n+                trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));", "originalCommit": "64aefb5947586ab85025715fe60484460c955c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTc2NA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121764", "bodyText": "Used @Cleanup on the InputStream as suggested.", "author": "anirudhkovuru", "createdAt": "2020-11-04T06:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0OTIzOA=="}], "type": "inlineReview", "revised_code": {"commit": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex b83cd1b01..c042c3685 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -67,21 +68,20 @@ public abstract class ControllerCommand extends AdminCommand {\n         // If tls parameters are configured, set them in client\n         if (getCLIControllerConfig().isTlsEnabled()) {\n             KeyStore ks = null;\n-            InputStream trustStore = null;\n             try {\n-                trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n                 ks = KeyStore.getInstance(\"JKS\");\n                 ks.load(trustStore, null);\n-                trustStore.close();\n \n             } catch (KeyStoreException e) {\n-                output(\"The keystore file is invalid, the keystore type is not supported: \" + e.toString());\n+                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n             } catch (IOException e) {\n-                output(\"The keystore file is invalid, check if the file exists: \" + e.toString());\n+                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n             } catch (NoSuchAlgorithmException e) {\n-                output(\"The keystore file is invalid, the keystore file might be in the wrong format: \" + e.toString());\n+                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n             } catch (CertificateException e) {\n-                output(\"The keystore file is invalid, check if the certificates are valid: \" + e.toString());\n+                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n             }\n \n             HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex c042c3685..ac7da01ea 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -59,45 +58,39 @@ public abstract class ControllerCommand extends AdminCommand {\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n \n         Client client;\n \n-        // If tls parameters are configured, set them in client\n-        if (getCLIControllerConfig().isTlsEnabled()) {\n-            KeyStore ks = null;\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n             try {\n-                @Cleanup\n-                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n-                ks = KeyStore.getInstance(\"JKS\");\n-                ks.load(trustStore, null);\n-\n-            } catch (KeyStoreException e) {\n-                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n-            } catch (IOException e) {\n-                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n-            } catch (NoSuchAlgorithmException e) {\n-                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n-            } catch (CertificateException e) {\n-                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n+                e.printStackTrace();\n+                return null;\n             }\n-\n-            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n             client = ClientBuilder.newBuilder()\n                     .withConfig(clientConfig)\n-                    .trustStore(ks)\n-                    .hostnameVerifier(controllerHostnameVerifier)\n+                    .sslContext(tlsContext)\n                     .build();\n         } else {\n             client = ClientBuilder.newClient(clientConfig);\n         }\n \n         // If authorization parameters are configured, set them in the client.\n-        if (getCLIControllerConfig().isAuthEnabled()) {\n-            HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(getCLIControllerConfig().getUserName(),\n-                    getCLIControllerConfig().getPassword());\n+        if (config.isAuthEnabled()) {\n+            HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n+                    config.getPassword());\n             client = client.register(auth);\n         }\n         return new Context(client);\n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex ac7da01ea..8f1c49e99 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -76,17 +76,12 @@ public abstract class ControllerCommand extends AdminCommand {\n                 tlsContext.init(null, tmf.getTrustManagers(), null);\n             } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n                 output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n-                e.printStackTrace();\n+                output(e.getMessage());\n                 return null;\n             }\n-            client = ClientBuilder.newBuilder()\n-                    .withConfig(clientConfig)\n-                    .sslContext(tlsContext)\n-                    .build();\n-        } else {\n-            client = ClientBuilder.newClient(clientConfig);\n+            builder.sslContext(tlsContext);\n         }\n-\n+        Client client = builder.build();\n         // If authorization parameters are configured, set them in the client.\n         if (config.isAuthEnabled()) {\n             HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MDA5OA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516050098", "bodyText": "Use TestUtils to get randomized ports. Hardcoding ports in unit tests is a recipe for failure due to ports already being used.", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:27:25Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;", "originalCommit": "64aefb5947586ab85025715fe60484460c955c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTc3NQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121775", "bodyText": "Used TestUtils for randomized ports.", "author": "anirudhkovuru", "createdAt": "2020-11-04T06:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MDA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 6dda32d9e..031edb415 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -26,15 +27,14 @@ import java.util.concurrent.atomic.AtomicReference;\n public abstract class AbstractTlsAdminCommandTest {\n \n     // Security related flags and instantiate local pravega server.\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-\n-    private static final Integer CONTROLLER_PORT = 9090;\n-    private static final Integer SEGMENT_STORE_PORT = 6000;\n-    private static final Integer REST_SERVER_PORT = 9091;\n+    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n+    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n+    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n \n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n+    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n     protected boolean authEnabled = false;\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n", "next_change": {"commit": "1c42424d927ca524e53ad0291cb6958c8122f273", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 031edb415..390b71056 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -26,11 +26,6 @@ import java.util.concurrent.atomic.AtomicReference;\n \n public abstract class AbstractTlsAdminCommandTest {\n \n-    // Security related flags and instantiate local pravega server.\n-    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n-\n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n", "next_change": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 390b71056..d9bdc1324 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -9,21 +9,37 @@\n  */\n package io.pravega.cli.admin;\n \n+import io.pravega.cli.admin.controller.ControllerDescribeStreamCommand;\n+import io.pravega.cli.admin.controller.ControllerListReaderGroupsInScopeCommand;\n+import io.pravega.cli.admin.controller.ControllerListScopesCommand;\n+import io.pravega.cli.admin.controller.ControllerListStreamsInScopeCommand;\n import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n import io.pravega.client.stream.impl.DefaultCredentials;\n import io.pravega.local.LocalPravegaEmulator;\n import io.pravega.test.common.SecurityConfigDefaults;\n import io.pravega.test.common.TestUtils;\n+import lombok.Cleanup;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n+import org.junit.Test;\n import org.junit.rules.Timeout;\n \n import java.net.URI;\n import java.util.Properties;\n+import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n public abstract class AbstractTlsAdminCommandTest {\n \n     @Rule\n", "next_change": {"commit": "25ad699eeda86b64d09879c28aacd16e3e79a03a", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex d9bdc1324..549fcae60 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -9,56 +9,43 @@\n  */\n package io.pravega.cli.admin;\n \n-import io.pravega.cli.admin.controller.ControllerDescribeStreamCommand;\n-import io.pravega.cli.admin.controller.ControllerListReaderGroupsInScopeCommand;\n-import io.pravega.cli.admin.controller.ControllerListScopesCommand;\n-import io.pravega.cli.admin.controller.ControllerListStreamsInScopeCommand;\n import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.ReaderGroupManager;\n import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ReaderGroupConfig;\n import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.Stream;\n import io.pravega.client.stream.StreamConfiguration;\n import io.pravega.client.stream.impl.DefaultCredentials;\n import io.pravega.local.LocalPravegaEmulator;\n import io.pravega.test.common.SecurityConfigDefaults;\n import io.pravega.test.common.TestUtils;\n import lombok.Cleanup;\n-import org.junit.After;\n-import org.junit.Before;\n+import lombok.SneakyThrows;\n+import lombok.val;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Rule;\n-import org.junit.Test;\n import org.junit.rules.Timeout;\n \n import java.net.URI;\n-import java.util.Properties;\n-import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n+import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n public abstract class AbstractTlsAdminCommandTest {\n \n+    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n-    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    public void setUp() throws Exception {\n-\n-        // Create the secure pravega server to test commands against.\n+    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n+        final int controllerPort = TestUtils.getAvailableListenPort();\n+        final int segmentStorePort = TestUtils.getAvailableListenPort();\n+        final int restServerPort = TestUtils.getAvailableListenPort();\n+        // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n                 .segmentStorePort(segmentStorePort)\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 549fcae60..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,134 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.Cleanup;\n-import lombok.SneakyThrows;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n-import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n-        final int controllerPort = TestUtils.getAvailableListenPort();\n-        final int segmentStorePort = TestUtils.getAvailableListenPort();\n-        final int restServerPort = TestUtils.getAvailableListenPort();\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(pathToConfig() + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(pathToConfig() + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(pathToConfig() + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-        LOCAL_PRAVEGA.set(emulatorBuilder.build());\n-        LOCAL_PRAVEGA.get().start();\n-        setAdminCLIProperties(\"localhost:\" + restServerPort,\n-                \"localhost:\" + controllerPort,\n-                LOCAL_PRAVEGA.get().getInProcPravegaCluster().getZkUrl(),\n-                4, authEnabled, \"secret\", tlsEnabled, STATE);\n-\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        assertTrue(\"Failed to create the stream \", isStreamCreated);\n-    }\n-\n-    @BeforeClass\n-    @SneakyThrows\n-    public static void setUp() {\n-        setUpLocalPravegaEmulator(false, true);\n-    }\n-\n-    @AfterClass\n-    @SneakyThrows\n-    public static void tearDown() {\n-        val localPravega = LOCAL_PRAVEGA.get();\n-        if (LOCAL_PRAVEGA.get() != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected static ClientConfig prepareValidClientConfig(boolean authEnabled, boolean tlsEnabled) {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(LOCAL_PRAVEGA.get().getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(pathToConfig() + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}, {"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 390b71056..d9bdc1324 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -34,7 +50,7 @@ public abstract class AbstractTlsAdminCommandTest {\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n \n-    // Security related flags and instantiate local pravega server.\n+    // Security related flags and instantiate local Pravega server.\n     private final Integer controllerPort = TestUtils.getAvailableListenPort();\n     private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n", "next_change": {"commit": "d10a1a235e6a28a9fc99e05a842ef07c18680af6", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex d9bdc1324..6c425221c 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -58,7 +58,7 @@ public abstract class AbstractTlsAdminCommandTest {\n     @Before\n     public void setUp() throws Exception {\n \n-        // Create the secure pravega server to test commands against.\n+        // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n                 .segmentStorePort(segmentStorePort)\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 6c425221c..4b045d90b 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -56,7 +58,8 @@ public abstract class AbstractTlsAdminCommandTest {\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n \n     @Before\n-    public void setUp() throws Exception {\n+    @SneakyThrows\n+    public void setUp() {\n \n         // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n", "next_change": {"commit": "25ad699eeda86b64d09879c28aacd16e3e79a03a", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 4b045d90b..549fcae60 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -26,41 +19,32 @@ import io.pravega.test.common.SecurityConfigDefaults;\n import io.pravega.test.common.TestUtils;\n import lombok.Cleanup;\n import lombok.SneakyThrows;\n-import org.junit.After;\n-import org.junit.Before;\n+import lombok.val;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Rule;\n-import org.junit.Test;\n import org.junit.rules.Timeout;\n \n import java.net.URI;\n-import java.util.Properties;\n-import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n+import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n public abstract class AbstractTlsAdminCommandTest {\n \n+    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n-    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-    private final String location = \"../../config/\";\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    @SneakyThrows\n-    public void setUp() {\n-\n+    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n+        final int controllerPort = TestUtils.getAvailableListenPort();\n+        final int segmentStorePort = TestUtils.getAvailableListenPort();\n+        final int restServerPort = TestUtils.getAvailableListenPort();\n         // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 549fcae60..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,134 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.Cleanup;\n-import lombok.SneakyThrows;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n-import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n-        final int controllerPort = TestUtils.getAvailableListenPort();\n-        final int segmentStorePort = TestUtils.getAvailableListenPort();\n-        final int restServerPort = TestUtils.getAvailableListenPort();\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(pathToConfig() + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(pathToConfig() + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(pathToConfig() + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-        LOCAL_PRAVEGA.set(emulatorBuilder.build());\n-        LOCAL_PRAVEGA.get().start();\n-        setAdminCLIProperties(\"localhost:\" + restServerPort,\n-                \"localhost:\" + controllerPort,\n-                LOCAL_PRAVEGA.get().getInProcPravegaCluster().getZkUrl(),\n-                4, authEnabled, \"secret\", tlsEnabled, STATE);\n-\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        assertTrue(\"Failed to create the stream \", isStreamCreated);\n-    }\n-\n-    @BeforeClass\n-    @SneakyThrows\n-    public static void setUp() {\n-        setUpLocalPravegaEmulator(false, true);\n-    }\n-\n-    @AfterClass\n-    @SneakyThrows\n-    public static void tearDown() {\n-        val localPravega = LOCAL_PRAVEGA.get();\n-        if (LOCAL_PRAVEGA.get() != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected static ClientConfig prepareValidClientConfig(boolean authEnabled, boolean tlsEnabled) {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(LOCAL_PRAVEGA.get().getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(pathToConfig() + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 031edb415..390b71056 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -39,17 +34,22 @@ public abstract class AbstractTlsAdminCommandTest {\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n \n+    // Security related flags and instantiate local pravega server.\n+    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n+    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n+    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n+\n     @Before\n     public void setUp() throws Exception {\n \n         // Create the secure pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(CONTROLLER_PORT)\n-                .segmentStorePort(SEGMENT_STORE_PORT)\n-                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .controllerPort(controllerPort)\n+                .segmentStorePort(segmentStorePort)\n+                .zkPort(TestUtils.getAvailableListenPort())\n+                .restServerPort(TestUtils.getAvailableListenPort())\n                 .enableRestServer(true)\n-                .restServerPort(REST_SERVER_PORT)\n+                .restServerPort(restServerPort)\n                 .enableAuth(authEnabled)\n                 .enableTls(tlsEnabled);\n \n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 390b71056..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,114 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.Properties;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-\n-    // Security related flags and instantiate local pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    public void setUp() throws Exception {\n-\n-        // Create the secure pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-\n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        // Set the CLI properties.\n-        state.set(new AdminCommandState());\n-        Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.controller.rest.uri\", \"localhost:\" + restServerPort.toString());\n-        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", \"localhost:\" + controllerPort.toString());\n-        pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", localPravega.getInProcPravegaCluster().getZkUrl());\n-        pravegaProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(authEnabled));\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        pravegaProperties.setProperty(\"cli.security.tls.enable\", Boolean.toString(tlsEnabled));\n-        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME);\n-\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-    }\n-\n-    @After\n-    public void tearDown() throws Exception {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected ClientConfig prepareValidClientConfig() {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(this.localPravega.getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(\"../../config/\" + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MDQ3MQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516050471", "bodyText": "Any reason why these shouldn't be static or final?", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:27:54Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;", "originalCommit": "64aefb5947586ab85025715fe60484460c955c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTc4MQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121781", "bodyText": "@Rule requires the variable to be final only and not static. The variables authEnabled and tlsEnabled cannot be final as these flags are set before calling super.setUp() in the test classes based on whether we test with authentication or TLS enabled or both.\nAlso static non final variables cannot be declared according to the checkstyle.", "author": "anirudhkovuru", "createdAt": "2020-11-04T06:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MDQ3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 6dda32d9e..031edb415 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -26,15 +27,14 @@ import java.util.concurrent.atomic.AtomicReference;\n public abstract class AbstractTlsAdminCommandTest {\n \n     // Security related flags and instantiate local pravega server.\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-\n-    private static final Integer CONTROLLER_PORT = 9090;\n-    private static final Integer SEGMENT_STORE_PORT = 6000;\n-    private static final Integer REST_SERVER_PORT = 9091;\n+    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n+    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n+    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n \n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n+    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n     protected boolean authEnabled = false;\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n", "next_change": {"commit": "1c42424d927ca524e53ad0291cb6958c8122f273", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 031edb415..390b71056 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -26,11 +26,6 @@ import java.util.concurrent.atomic.AtomicReference;\n \n public abstract class AbstractTlsAdminCommandTest {\n \n-    // Security related flags and instantiate local pravega server.\n-    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n-\n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n", "next_change": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 390b71056..d9bdc1324 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -9,21 +9,37 @@\n  */\n package io.pravega.cli.admin;\n \n+import io.pravega.cli.admin.controller.ControllerDescribeStreamCommand;\n+import io.pravega.cli.admin.controller.ControllerListReaderGroupsInScopeCommand;\n+import io.pravega.cli.admin.controller.ControllerListScopesCommand;\n+import io.pravega.cli.admin.controller.ControllerListStreamsInScopeCommand;\n import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n import io.pravega.client.stream.impl.DefaultCredentials;\n import io.pravega.local.LocalPravegaEmulator;\n import io.pravega.test.common.SecurityConfigDefaults;\n import io.pravega.test.common.TestUtils;\n+import lombok.Cleanup;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n+import org.junit.Test;\n import org.junit.rules.Timeout;\n \n import java.net.URI;\n import java.util.Properties;\n+import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n public abstract class AbstractTlsAdminCommandTest {\n \n     @Rule\n", "next_change": {"commit": "25ad699eeda86b64d09879c28aacd16e3e79a03a", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex d9bdc1324..549fcae60 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -9,56 +9,43 @@\n  */\n package io.pravega.cli.admin;\n \n-import io.pravega.cli.admin.controller.ControllerDescribeStreamCommand;\n-import io.pravega.cli.admin.controller.ControllerListReaderGroupsInScopeCommand;\n-import io.pravega.cli.admin.controller.ControllerListScopesCommand;\n-import io.pravega.cli.admin.controller.ControllerListStreamsInScopeCommand;\n import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.ReaderGroupManager;\n import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ReaderGroupConfig;\n import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.Stream;\n import io.pravega.client.stream.StreamConfiguration;\n import io.pravega.client.stream.impl.DefaultCredentials;\n import io.pravega.local.LocalPravegaEmulator;\n import io.pravega.test.common.SecurityConfigDefaults;\n import io.pravega.test.common.TestUtils;\n import lombok.Cleanup;\n-import org.junit.After;\n-import org.junit.Before;\n+import lombok.SneakyThrows;\n+import lombok.val;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Rule;\n-import org.junit.Test;\n import org.junit.rules.Timeout;\n \n import java.net.URI;\n-import java.util.Properties;\n-import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n+import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n public abstract class AbstractTlsAdminCommandTest {\n \n+    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n-    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    public void setUp() throws Exception {\n-\n-        // Create the secure pravega server to test commands against.\n+    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n+        final int controllerPort = TestUtils.getAvailableListenPort();\n+        final int segmentStorePort = TestUtils.getAvailableListenPort();\n+        final int restServerPort = TestUtils.getAvailableListenPort();\n+        // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n                 .segmentStorePort(segmentStorePort)\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 549fcae60..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,134 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.Cleanup;\n-import lombok.SneakyThrows;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n-import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n-        final int controllerPort = TestUtils.getAvailableListenPort();\n-        final int segmentStorePort = TestUtils.getAvailableListenPort();\n-        final int restServerPort = TestUtils.getAvailableListenPort();\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(pathToConfig() + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(pathToConfig() + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(pathToConfig() + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-        LOCAL_PRAVEGA.set(emulatorBuilder.build());\n-        LOCAL_PRAVEGA.get().start();\n-        setAdminCLIProperties(\"localhost:\" + restServerPort,\n-                \"localhost:\" + controllerPort,\n-                LOCAL_PRAVEGA.get().getInProcPravegaCluster().getZkUrl(),\n-                4, authEnabled, \"secret\", tlsEnabled, STATE);\n-\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        assertTrue(\"Failed to create the stream \", isStreamCreated);\n-    }\n-\n-    @BeforeClass\n-    @SneakyThrows\n-    public static void setUp() {\n-        setUpLocalPravegaEmulator(false, true);\n-    }\n-\n-    @AfterClass\n-    @SneakyThrows\n-    public static void tearDown() {\n-        val localPravega = LOCAL_PRAVEGA.get();\n-        if (LOCAL_PRAVEGA.get() != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected static ClientConfig prepareValidClientConfig(boolean authEnabled, boolean tlsEnabled) {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(LOCAL_PRAVEGA.get().getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(pathToConfig() + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}, {"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 390b71056..d9bdc1324 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -34,7 +50,7 @@ public abstract class AbstractTlsAdminCommandTest {\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n \n-    // Security related flags and instantiate local pravega server.\n+    // Security related flags and instantiate local Pravega server.\n     private final Integer controllerPort = TestUtils.getAvailableListenPort();\n     private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n", "next_change": {"commit": "d10a1a235e6a28a9fc99e05a842ef07c18680af6", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex d9bdc1324..6c425221c 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -58,7 +58,7 @@ public abstract class AbstractTlsAdminCommandTest {\n     @Before\n     public void setUp() throws Exception {\n \n-        // Create the secure pravega server to test commands against.\n+        // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n                 .segmentStorePort(segmentStorePort)\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 6c425221c..4b045d90b 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -56,7 +58,8 @@ public abstract class AbstractTlsAdminCommandTest {\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n \n     @Before\n-    public void setUp() throws Exception {\n+    @SneakyThrows\n+    public void setUp() {\n \n         // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n", "next_change": {"commit": "25ad699eeda86b64d09879c28aacd16e3e79a03a", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 4b045d90b..549fcae60 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -26,41 +19,32 @@ import io.pravega.test.common.SecurityConfigDefaults;\n import io.pravega.test.common.TestUtils;\n import lombok.Cleanup;\n import lombok.SneakyThrows;\n-import org.junit.After;\n-import org.junit.Before;\n+import lombok.val;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Rule;\n-import org.junit.Test;\n import org.junit.rules.Timeout;\n \n import java.net.URI;\n-import java.util.Properties;\n-import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n+import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n public abstract class AbstractTlsAdminCommandTest {\n \n+    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n-    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-    private final String location = \"../../config/\";\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    @SneakyThrows\n-    public void setUp() {\n-\n+    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n+        final int controllerPort = TestUtils.getAvailableListenPort();\n+        final int segmentStorePort = TestUtils.getAvailableListenPort();\n+        final int restServerPort = TestUtils.getAvailableListenPort();\n         // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 549fcae60..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,134 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.Cleanup;\n-import lombok.SneakyThrows;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n-import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n-        final int controllerPort = TestUtils.getAvailableListenPort();\n-        final int segmentStorePort = TestUtils.getAvailableListenPort();\n-        final int restServerPort = TestUtils.getAvailableListenPort();\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(pathToConfig() + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(pathToConfig() + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(pathToConfig() + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-        LOCAL_PRAVEGA.set(emulatorBuilder.build());\n-        LOCAL_PRAVEGA.get().start();\n-        setAdminCLIProperties(\"localhost:\" + restServerPort,\n-                \"localhost:\" + controllerPort,\n-                LOCAL_PRAVEGA.get().getInProcPravegaCluster().getZkUrl(),\n-                4, authEnabled, \"secret\", tlsEnabled, STATE);\n-\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        assertTrue(\"Failed to create the stream \", isStreamCreated);\n-    }\n-\n-    @BeforeClass\n-    @SneakyThrows\n-    public static void setUp() {\n-        setUpLocalPravegaEmulator(false, true);\n-    }\n-\n-    @AfterClass\n-    @SneakyThrows\n-    public static void tearDown() {\n-        val localPravega = LOCAL_PRAVEGA.get();\n-        if (LOCAL_PRAVEGA.get() != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected static ClientConfig prepareValidClientConfig(boolean authEnabled, boolean tlsEnabled) {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(LOCAL_PRAVEGA.get().getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(pathToConfig() + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 031edb415..390b71056 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -39,17 +34,22 @@ public abstract class AbstractTlsAdminCommandTest {\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n \n+    // Security related flags and instantiate local pravega server.\n+    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n+    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n+    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n+\n     @Before\n     public void setUp() throws Exception {\n \n         // Create the secure pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(CONTROLLER_PORT)\n-                .segmentStorePort(SEGMENT_STORE_PORT)\n-                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .controllerPort(controllerPort)\n+                .segmentStorePort(segmentStorePort)\n+                .zkPort(TestUtils.getAvailableListenPort())\n+                .restServerPort(TestUtils.getAvailableListenPort())\n                 .enableRestServer(true)\n-                .restServerPort(REST_SERVER_PORT)\n+                .restServerPort(restServerPort)\n                 .enableAuth(authEnabled)\n                 .enableTls(tlsEnabled);\n \n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 390b71056..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,114 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.Properties;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-\n-    // Security related flags and instantiate local pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    public void setUp() throws Exception {\n-\n-        // Create the secure pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-\n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        // Set the CLI properties.\n-        state.set(new AdminCommandState());\n-        Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.controller.rest.uri\", \"localhost:\" + restServerPort.toString());\n-        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", \"localhost:\" + controllerPort.toString());\n-        pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", localPravega.getInProcPravegaCluster().getZkUrl());\n-        pravegaProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(authEnabled));\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        pravegaProperties.setProperty(\"cli.security.tls.enable\", Boolean.toString(tlsEnabled));\n-        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME);\n-\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-    }\n-\n-    @After\n-    public void tearDown() throws Exception {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected ClientConfig prepareValidClientConfig() {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(this.localPravega.getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(\"../../config/\" + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MTE3MQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516051171", "bodyText": "Why is this static?\nDo not use static fields that you set during your execution. This will prevent us from eventually running tests in parallel.", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:28:50Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();", "originalCommit": "64aefb5947586ab85025715fe60484460c955c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTc5Mg==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121792", "bodyText": "I've made this field non-static as suggested.", "author": "anirudhkovuru", "createdAt": "2020-11-04T06:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MTE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 6dda32d9e..031edb415 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -26,15 +27,14 @@ import java.util.concurrent.atomic.AtomicReference;\n public abstract class AbstractTlsAdminCommandTest {\n \n     // Security related flags and instantiate local pravega server.\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-\n-    private static final Integer CONTROLLER_PORT = 9090;\n-    private static final Integer SEGMENT_STORE_PORT = 6000;\n-    private static final Integer REST_SERVER_PORT = 9091;\n+    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n+    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n+    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n \n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n+    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n     protected boolean authEnabled = false;\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n", "next_change": {"commit": "1c42424d927ca524e53ad0291cb6958c8122f273", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 031edb415..390b71056 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -26,11 +26,6 @@ import java.util.concurrent.atomic.AtomicReference;\n \n public abstract class AbstractTlsAdminCommandTest {\n \n-    // Security related flags and instantiate local pravega server.\n-    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n-\n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n", "next_change": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 390b71056..d9bdc1324 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -9,21 +9,37 @@\n  */\n package io.pravega.cli.admin;\n \n+import io.pravega.cli.admin.controller.ControllerDescribeStreamCommand;\n+import io.pravega.cli.admin.controller.ControllerListReaderGroupsInScopeCommand;\n+import io.pravega.cli.admin.controller.ControllerListScopesCommand;\n+import io.pravega.cli.admin.controller.ControllerListStreamsInScopeCommand;\n import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n import io.pravega.client.stream.impl.DefaultCredentials;\n import io.pravega.local.LocalPravegaEmulator;\n import io.pravega.test.common.SecurityConfigDefaults;\n import io.pravega.test.common.TestUtils;\n+import lombok.Cleanup;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n+import org.junit.Test;\n import org.junit.rules.Timeout;\n \n import java.net.URI;\n import java.util.Properties;\n+import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n public abstract class AbstractTlsAdminCommandTest {\n \n     @Rule\n", "next_change": {"commit": "25ad699eeda86b64d09879c28aacd16e3e79a03a", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex d9bdc1324..549fcae60 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -9,56 +9,43 @@\n  */\n package io.pravega.cli.admin;\n \n-import io.pravega.cli.admin.controller.ControllerDescribeStreamCommand;\n-import io.pravega.cli.admin.controller.ControllerListReaderGroupsInScopeCommand;\n-import io.pravega.cli.admin.controller.ControllerListScopesCommand;\n-import io.pravega.cli.admin.controller.ControllerListStreamsInScopeCommand;\n import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.ReaderGroupManager;\n import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ReaderGroupConfig;\n import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.Stream;\n import io.pravega.client.stream.StreamConfiguration;\n import io.pravega.client.stream.impl.DefaultCredentials;\n import io.pravega.local.LocalPravegaEmulator;\n import io.pravega.test.common.SecurityConfigDefaults;\n import io.pravega.test.common.TestUtils;\n import lombok.Cleanup;\n-import org.junit.After;\n-import org.junit.Before;\n+import lombok.SneakyThrows;\n+import lombok.val;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Rule;\n-import org.junit.Test;\n import org.junit.rules.Timeout;\n \n import java.net.URI;\n-import java.util.Properties;\n-import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n+import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n public abstract class AbstractTlsAdminCommandTest {\n \n+    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n-    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    public void setUp() throws Exception {\n-\n-        // Create the secure pravega server to test commands against.\n+    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n+        final int controllerPort = TestUtils.getAvailableListenPort();\n+        final int segmentStorePort = TestUtils.getAvailableListenPort();\n+        final int restServerPort = TestUtils.getAvailableListenPort();\n+        // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n                 .segmentStorePort(segmentStorePort)\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 549fcae60..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,134 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.Cleanup;\n-import lombok.SneakyThrows;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n-import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n-        final int controllerPort = TestUtils.getAvailableListenPort();\n-        final int segmentStorePort = TestUtils.getAvailableListenPort();\n-        final int restServerPort = TestUtils.getAvailableListenPort();\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(pathToConfig() + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(pathToConfig() + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(pathToConfig() + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-        LOCAL_PRAVEGA.set(emulatorBuilder.build());\n-        LOCAL_PRAVEGA.get().start();\n-        setAdminCLIProperties(\"localhost:\" + restServerPort,\n-                \"localhost:\" + controllerPort,\n-                LOCAL_PRAVEGA.get().getInProcPravegaCluster().getZkUrl(),\n-                4, authEnabled, \"secret\", tlsEnabled, STATE);\n-\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        assertTrue(\"Failed to create the stream \", isStreamCreated);\n-    }\n-\n-    @BeforeClass\n-    @SneakyThrows\n-    public static void setUp() {\n-        setUpLocalPravegaEmulator(false, true);\n-    }\n-\n-    @AfterClass\n-    @SneakyThrows\n-    public static void tearDown() {\n-        val localPravega = LOCAL_PRAVEGA.get();\n-        if (LOCAL_PRAVEGA.get() != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected static ClientConfig prepareValidClientConfig(boolean authEnabled, boolean tlsEnabled) {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(LOCAL_PRAVEGA.get().getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(pathToConfig() + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}, {"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 390b71056..d9bdc1324 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -34,7 +50,7 @@ public abstract class AbstractTlsAdminCommandTest {\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n \n-    // Security related flags and instantiate local pravega server.\n+    // Security related flags and instantiate local Pravega server.\n     private final Integer controllerPort = TestUtils.getAvailableListenPort();\n     private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n", "next_change": {"commit": "d10a1a235e6a28a9fc99e05a842ef07c18680af6", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex d9bdc1324..6c425221c 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -58,7 +58,7 @@ public abstract class AbstractTlsAdminCommandTest {\n     @Before\n     public void setUp() throws Exception {\n \n-        // Create the secure pravega server to test commands against.\n+        // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n                 .segmentStorePort(segmentStorePort)\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 6c425221c..4b045d90b 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -56,7 +58,8 @@ public abstract class AbstractTlsAdminCommandTest {\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n \n     @Before\n-    public void setUp() throws Exception {\n+    @SneakyThrows\n+    public void setUp() {\n \n         // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n", "next_change": {"commit": "25ad699eeda86b64d09879c28aacd16e3e79a03a", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 4b045d90b..549fcae60 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -26,41 +19,32 @@ import io.pravega.test.common.SecurityConfigDefaults;\n import io.pravega.test.common.TestUtils;\n import lombok.Cleanup;\n import lombok.SneakyThrows;\n-import org.junit.After;\n-import org.junit.Before;\n+import lombok.val;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Rule;\n-import org.junit.Test;\n import org.junit.rules.Timeout;\n \n import java.net.URI;\n-import java.util.Properties;\n-import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n+import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n public abstract class AbstractTlsAdminCommandTest {\n \n+    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n-    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-    private final String location = \"../../config/\";\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    @SneakyThrows\n-    public void setUp() {\n-\n+    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n+        final int controllerPort = TestUtils.getAvailableListenPort();\n+        final int segmentStorePort = TestUtils.getAvailableListenPort();\n+        final int restServerPort = TestUtils.getAvailableListenPort();\n         // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 549fcae60..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,134 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.Cleanup;\n-import lombok.SneakyThrows;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n-import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n-        final int controllerPort = TestUtils.getAvailableListenPort();\n-        final int segmentStorePort = TestUtils.getAvailableListenPort();\n-        final int restServerPort = TestUtils.getAvailableListenPort();\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(pathToConfig() + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(pathToConfig() + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(pathToConfig() + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-        LOCAL_PRAVEGA.set(emulatorBuilder.build());\n-        LOCAL_PRAVEGA.get().start();\n-        setAdminCLIProperties(\"localhost:\" + restServerPort,\n-                \"localhost:\" + controllerPort,\n-                LOCAL_PRAVEGA.get().getInProcPravegaCluster().getZkUrl(),\n-                4, authEnabled, \"secret\", tlsEnabled, STATE);\n-\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        assertTrue(\"Failed to create the stream \", isStreamCreated);\n-    }\n-\n-    @BeforeClass\n-    @SneakyThrows\n-    public static void setUp() {\n-        setUpLocalPravegaEmulator(false, true);\n-    }\n-\n-    @AfterClass\n-    @SneakyThrows\n-    public static void tearDown() {\n-        val localPravega = LOCAL_PRAVEGA.get();\n-        if (LOCAL_PRAVEGA.get() != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected static ClientConfig prepareValidClientConfig(boolean authEnabled, boolean tlsEnabled) {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(LOCAL_PRAVEGA.get().getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(pathToConfig() + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 031edb415..390b71056 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -39,17 +34,22 @@ public abstract class AbstractTlsAdminCommandTest {\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n \n+    // Security related flags and instantiate local pravega server.\n+    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n+    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n+    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n+\n     @Before\n     public void setUp() throws Exception {\n \n         // Create the secure pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(CONTROLLER_PORT)\n-                .segmentStorePort(SEGMENT_STORE_PORT)\n-                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .controllerPort(controllerPort)\n+                .segmentStorePort(segmentStorePort)\n+                .zkPort(TestUtils.getAvailableListenPort())\n+                .restServerPort(TestUtils.getAvailableListenPort())\n                 .enableRestServer(true)\n-                .restServerPort(REST_SERVER_PORT)\n+                .restServerPort(restServerPort)\n                 .enableAuth(authEnabled)\n                 .enableTls(tlsEnabled);\n \n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 390b71056..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,114 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.Properties;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-\n-    // Security related flags and instantiate local pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    public void setUp() throws Exception {\n-\n-        // Create the secure pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-\n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        // Set the CLI properties.\n-        state.set(new AdminCommandState());\n-        Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.controller.rest.uri\", \"localhost:\" + restServerPort.toString());\n-        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", \"localhost:\" + controllerPort.toString());\n-        pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", localPravega.getInProcPravegaCluster().getZkUrl());\n-        pravegaProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(authEnabled));\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        pravegaProperties.setProperty(\"cli.security.tls.enable\", Boolean.toString(tlsEnabled));\n-        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME);\n-\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-    }\n-\n-    @After\n-    public void tearDown() throws Exception {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected ClientConfig prepareValidClientConfig() {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(this.localPravega.getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(\"../../config/\" + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MTY4Mw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516051683", "bodyText": "Do not do this. Find a different way to figure out when the server has started.\n20 seconds may be too long in most cases and may not be sufficient if Travis is super-slow when your test executes.", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:29:28Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(CONTROLLER_PORT)\n+                .segmentStorePort(SEGMENT_STORE_PORT)\n+                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(REST_SERVER_PORT)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n+        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n+        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n+        // explicit in the respective test classes.\n+\n+        if (authEnabled) {\n+            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n+                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n+                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n+        }\n+\n+        if (tlsEnabled) {\n+            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n+                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n+                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n+                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n+                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n+        }\n+\n+        localPravega = emulatorBuilder.build();\n+\n+        // The uri returned by LocalPravegaEmulator is in the form tcp://localhost:9090 (protocol + domain + port)\n+        // but for the CLI we need to set the GRPC uri as localhost:9090 (domain + port). Because the protocol\n+        // is decided based on whether security is enabled or not.\n+\n+        // Set the CLI properties.\n+        STATE.set(new AdminCommandState());\n+        Properties pravegaProperties = new Properties();\n+        pravegaProperties.setProperty(\"cli.controller.rest.uri\", \"localhost:\" + REST_SERVER_PORT.toString());\n+        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", \"localhost:\" + CONTROLLER_PORT.toString());\n+        pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", localPravega.getInProcPravegaCluster().getZkUrl());\n+        pravegaProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n+        pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(authEnabled));\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n+        pravegaProperties.setProperty(\"cli.security.tls.enable\", Boolean.toString(tlsEnabled));\n+        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME);\n+\n+        STATE.get().getConfigBuilder().include(pravegaProperties);\n+\n+        localPravega.start();\n+\n+        // Wait for the server to complete start-up.\n+        TimeUnit.SECONDS.sleep(20);", "originalCommit": "64aefb5947586ab85025715fe60484460c955c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTg3Nw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121877", "bodyText": "Will try to look for a better way to identify if the server has started.", "author": "anirudhkovuru", "createdAt": "2020-11-04T06:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MTY4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMjQwMw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529812403", "bodyText": "This has been removed.", "author": "anirudhkovuru", "createdAt": "2020-11-24T19:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MTY4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 6dda32d9e..031edb415 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -91,7 +91,7 @@ public abstract class AbstractTlsAdminCommandTest {\n         pravegaProperties.setProperty(\"cli.security.tls.enable\", Boolean.toString(tlsEnabled));\n         pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME);\n \n-        STATE.get().getConfigBuilder().include(pravegaProperties);\n+        state.get().getConfigBuilder().include(pravegaProperties);\n \n         localPravega.start();\n \n", "next_change": {"commit": "255984479ccaf137ea3f87cc7ae765ed291f7169", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 031edb415..713a57a36 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -92,11 +89,6 @@ public abstract class AbstractTlsAdminCommandTest {\n         pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME);\n \n         state.get().getConfigBuilder().include(pravegaProperties);\n-\n-        localPravega.start();\n-\n-        // Wait for the server to complete start-up.\n-        TimeUnit.SECONDS.sleep(20);\n     }\n \n     @After\n", "next_change": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 713a57a36..d9bdc1324 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -78,15 +94,16 @@ public abstract class AbstractTlsAdminCommandTest {\n         // Set the CLI properties.\n         state.set(new AdminCommandState());\n         Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.controller.rest.uri\", \"localhost:\" + REST_SERVER_PORT.toString());\n-        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", \"localhost:\" + CONTROLLER_PORT.toString());\n+        pravegaProperties.setProperty(\"cli.controller.rest.uri\", \"localhost:\" + restServerPort.toString());\n+        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", \"localhost:\" + controllerPort.toString());\n         pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", localPravega.getInProcPravegaCluster().getZkUrl());\n         pravegaProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n         pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(authEnabled));\n         pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n         pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n+        pravegaProperties.setProperty(\"cli.security.auth.token.signingKey\", \"secret\");\n         pravegaProperties.setProperty(\"cli.security.tls.enable\", Boolean.toString(tlsEnabled));\n-        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME);\n+        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../../config/\" + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n \n         state.get().getConfigBuilder().include(pravegaProperties);\n     }\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex d9bdc1324..4b045d90b 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -103,13 +106,14 @@ public abstract class AbstractTlsAdminCommandTest {\n         pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n         pravegaProperties.setProperty(\"cli.security.auth.token.signingKey\", \"secret\");\n         pravegaProperties.setProperty(\"cli.security.tls.enable\", Boolean.toString(tlsEnabled));\n-        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../../config/\" + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n+        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", location + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n \n         state.get().getConfigBuilder().include(pravegaProperties);\n     }\n \n     @After\n-    public void tearDown() throws Exception {\n+    @SneakyThrows\n+    public void tearDown() {\n         if (localPravega != null) {\n             localPravega.close();\n         }\n", "next_change": {"commit": "25ad699eeda86b64d09879c28aacd16e3e79a03a", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 4b045d90b..549fcae60 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -78,72 +62,28 @@ public abstract class AbstractTlsAdminCommandTest {\n         // explicit in the respective test classes.\n \n         if (authEnabled) {\n-            emulatorBuilder.passwdFile(location + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n+            emulatorBuilder.passwdFile(pathToConfig() + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n                     .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n                     .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n         }\n \n         if (tlsEnabled) {\n-            emulatorBuilder.certFile(location + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(location + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(location + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(location + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(location + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n+            emulatorBuilder.certFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n+                    .keyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n+                    .jksKeyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n+                    .jksTrustFile(pathToConfig() + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n+                    .keyPasswordFile(pathToConfig() + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n         }\n+        LOCAL_PRAVEGA.set(emulatorBuilder.build());\n+        LOCAL_PRAVEGA.get().start();\n+        setAdminCLIProperties(\"localhost:\" + restServerPort,\n+                \"localhost:\" + controllerPort,\n+                LOCAL_PRAVEGA.get().getInProcPravegaCluster().getZkUrl(),\n+                4, authEnabled, \"secret\", tlsEnabled, STATE);\n \n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        // Set the CLI properties.\n-        state.set(new AdminCommandState());\n-        Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.controller.rest.uri\", \"localhost:\" + restServerPort.toString());\n-        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", \"localhost:\" + controllerPort.toString());\n-        pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", localPravega.getInProcPravegaCluster().getZkUrl());\n-        pravegaProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(authEnabled));\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        pravegaProperties.setProperty(\"cli.security.auth.token.signingKey\", \"secret\");\n-        pravegaProperties.setProperty(\"cli.security.tls.enable\", Boolean.toString(tlsEnabled));\n-        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", location + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n-\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-    }\n-\n-    @After\n-    @SneakyThrows\n-    public void tearDown() {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected ClientConfig prepareValidClientConfig() {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(this.localPravega.getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(location + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-\n-    @Test\n-    @SneakyThrows\n-    public void testAllCommands() {\n         String scope = \"testScope\";\n         String testStream = \"testStream\";\n-        String readerGroup = UUID.randomUUID().toString().replace(\"-\", \"\");\n-        ReaderGroupConfig readerGroupConfig = ReaderGroupConfig.builder()\n-                .stream(Stream.of(scope, testStream))\n-                .disableAutomaticCheckpoints()\n-                .build();\n-        ClientConfig clientConfig = prepareValidClientConfig();\n+        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n \n         // Generate the scope and stream required for testing.\n         @Cleanup\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 549fcae60..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,134 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.Cleanup;\n-import lombok.SneakyThrows;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n-import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n-        final int controllerPort = TestUtils.getAvailableListenPort();\n-        final int segmentStorePort = TestUtils.getAvailableListenPort();\n-        final int restServerPort = TestUtils.getAvailableListenPort();\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(pathToConfig() + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(pathToConfig() + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(pathToConfig() + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-        LOCAL_PRAVEGA.set(emulatorBuilder.build());\n-        LOCAL_PRAVEGA.get().start();\n-        setAdminCLIProperties(\"localhost:\" + restServerPort,\n-                \"localhost:\" + controllerPort,\n-                LOCAL_PRAVEGA.get().getInProcPravegaCluster().getZkUrl(),\n-                4, authEnabled, \"secret\", tlsEnabled, STATE);\n-\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        assertTrue(\"Failed to create the stream \", isStreamCreated);\n-    }\n-\n-    @BeforeClass\n-    @SneakyThrows\n-    public static void setUp() {\n-        setUpLocalPravegaEmulator(false, true);\n-    }\n-\n-    @AfterClass\n-    @SneakyThrows\n-    public static void tearDown() {\n-        val localPravega = LOCAL_PRAVEGA.get();\n-        if (LOCAL_PRAVEGA.get() != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected static ClientConfig prepareValidClientConfig(boolean authEnabled, boolean tlsEnabled) {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(LOCAL_PRAVEGA.get().getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(pathToConfig() + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MjYwNg==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516052606", "bodyText": "Please be consistent in how you reference UTF8. Here you use StandardCharset, yet 4 lines above you use a string.", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:30:44Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        SETUP_UTILS.setAuthEnabled(true);\n+        super.setUp();\n+    }\n+\n+\n+    @Test\n+    public void testListScopesCommand() throws Exception {\n+        SETUP_UTILS.createTestStream(\"testListScopesCommand\", 2);\n+        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", STATE.get());\n+        // Check that both the new scope and the system one exist.\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertTrue(commandResult.contains(SETUP_UTILS.getScope()));\n+        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testDescribeScopeCommand() throws Exception {\n+        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertNotNull(ControllerDescribeStreamCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testListStreamsCommand() throws Exception {\n+        String testStream = \"testListStreamsCommand\";\n+        SETUP_UTILS.createTestStream(testStream, 1);\n+        String commandResult = TestUtils.executeCommand(\"controller list-streams \" + SETUP_UTILS.getScope(), STATE.get());\n+        // Check that the newly created stream is retrieved as part of the list of streams.\n+        Assert.assertTrue(commandResult.contains(testStream));\n+        Assert.assertNotNull(ControllerListStreamsInScopeCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testListReaderGroupsCommand() throws Exception {\n+        // Check that the system reader group can be listed.\n+        String commandResult = TestUtils.executeCommand(\"controller list-readergroups _system\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n+        Assert.assertNotNull(ControllerListReaderGroupsInScopeCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testDescribeReaderGroupCommand() throws Exception {\n+        // Check that the system reader group can be listed.\n+        String commandResult = TestUtils.executeCommand(\"controller describe-readergroup _system commitStreamReaders\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n+        Assert.assertNotNull(ControllerDescribeReaderGroupCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testDescribeStreamCommand() throws Exception {\n+        String scope = \"testScope\";\n+        String testStream = \"testStream\";\n+        ClientConfig clientConfig = SETUP_UTILS.generateValidClientConfig();\n+\n+        // Generate the scope and stream required for testing.\n+        @Cleanup\n+        StreamManager streamManager = StreamManager.create(clientConfig);\n+        Assert.assertNotNull(streamManager);\n+\n+        boolean isScopeCreated = streamManager.createScope(scope);\n+\n+        // Check if scope created successfully.\n+        Assert.assertTrue(\"Failed to create scope\", isScopeCreated);\n+\n+        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n+                .scalingPolicy(ScalingPolicy.fixed(1))\n+                .build());\n+\n+        // Check if stream created successfully.\n+        Assert.assertTrue(\"Failed to create the stream \", isStreamCreated);\n+\n+        String commandResult = executeCommand(\"controller describe-stream \" + scope + \" \" + testStream, STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"stream_config\"));\n+        Assert.assertTrue(commandResult.contains(\"stream_state\"));\n+        Assert.assertTrue(commandResult.contains(\"segment_count\"));\n+        Assert.assertTrue(commandResult.contains(\"is_sealed\"));\n+        Assert.assertTrue(commandResult.contains(\"active_epoch\"));\n+        Assert.assertTrue(commandResult.contains(\"truncation_record\"));\n+        Assert.assertTrue(commandResult.contains(\"scaling_info\"));\n+\n+        // Exercise actual instantiateSegmentHelper\n+        CommandArgs commandArgs = new CommandArgs(Arrays.asList(scope, testStream), STATE.get());\n+        ControllerDescribeStreamCommand command = new ControllerDescribeStreamCommand(commandArgs);\n+        @Cleanup\n+        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(SETUP_UTILS.getZkTestServer().getConnectString(),\n+                new RetryOneTime(5000));\n+        curatorFramework.start();\n+        Assert.assertNotNull(command.instantiateSegmentHelper(curatorFramework));\n+\n+        // Try the Zookeeper backend, which is expected to fail and be handled by the command.\n+        Properties properties = new Properties();\n+        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.ZOOKEEPER.name());\n+        STATE.get().getConfigBuilder().include(properties);\n+        commandArgs = new CommandArgs(Arrays.asList(scope, testStream), STATE.get());\n+        new ControllerDescribeStreamCommand(commandArgs).execute();\n+        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.SEGMENTSTORE.name());\n+        STATE.get().getConfigBuilder().include(properties);\n+    }\n+\n+    @Test\n+    public void testAuthConfig() throws Exception {\n+        SETUP_UTILS.createTestStream(\"testListScopesCommand\", 2);\n+        Properties pravegaProperties = new Properties();\n+        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"true\");\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n+        STATE.get().getConfigBuilder().include(pravegaProperties);\n+        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", STATE.get());\n+        // Check that both the new scope and the system one exist.\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertTrue(commandResult.contains(SETUP_UTILS.getScope()));\n+        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n+        // Restore config\n+        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"false\");\n+        STATE.get().getConfigBuilder().include(pravegaProperties);\n+\n+        // Exercise response codes for REST requests.\n+        CommandArgs commandArgs = new CommandArgs(Collections.emptyList(), new AdminCommandState());\n+        ControllerListScopesCommand command = new ControllerListScopesCommand(commandArgs);\n+        command.printResponseInfo(Response.status(Response.Status.UNAUTHORIZED).build());\n+        command.printResponseInfo(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n+    }\n+\n+    static String executeCommand(String inputCommand, AdminCommandState state) throws Exception {\n+        Parser.Command pc = Parser.parse(inputCommand);\n+        Assert.assertNotNull(pc.toString());\n+        CommandArgs args = new CommandArgs(pc.getArgs(), state);\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        TestingDescribeStreamCommand cmd = new TestingDescribeStreamCommand(args);\n+        try (PrintStream ps = new PrintStream(baos, true, \"UTF-8\")) {\n+            cmd.setOut(ps);\n+            cmd.execute();\n+        }\n+        return new String(baos.toByteArray(), StandardCharsets.UTF_8);", "originalCommit": "64aefb5947586ab85025715fe60484460c955c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTkwOQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121909", "bodyText": "The references are consistent now.", "author": "anirudhkovuru", "createdAt": "2020-11-04T06:31:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MjYwNg=="}], "type": "inlineReview", "revised_code": {"commit": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 580d3f3e9..035af7c2e 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -190,7 +190,7 @@ public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest\n         CommandArgs args = new CommandArgs(pc.getArgs(), state);\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         TestingDescribeStreamCommand cmd = new TestingDescribeStreamCommand(args);\n-        try (PrintStream ps = new PrintStream(baos, true, \"UTF-8\")) {\n+        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n             cmd.setOut(ps);\n             cmd.execute();\n         }\n", "next_change": {"commit": "1c42424d927ca524e53ad0291cb6958c8122f273", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 035af7c2e..4ff533d36 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -184,12 +184,12 @@ public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest\n         command.printResponseInfo(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n     }\n \n-    static String executeCommand(String inputCommand, AdminCommandState state) throws Exception {\n+    static String executeCommand(String inputCommand, AdminCommandState state, int servicePort) throws Exception {\n         Parser.Command pc = Parser.parse(inputCommand);\n         Assert.assertNotNull(pc.toString());\n         CommandArgs args = new CommandArgs(pc.getArgs(), state);\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        TestingDescribeStreamCommand cmd = new TestingDescribeStreamCommand(args);\n+        TestingDescribeStreamCommand cmd = new TestingDescribeStreamCommand(args, servicePort);\n         try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n             cmd.setOut(ps);\n             cmd.execute();\n", "next_change": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 4ff533d36..200683ffb 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -9,246 +9,14 @@\n  */\n package io.pravega.cli.admin.controller;\n \n-import com.google.common.base.Preconditions;\n-import io.pravega.cli.admin.AbstractAdminCommandTest;\n-import io.pravega.cli.admin.AdminCommandState;\n-import io.pravega.cli.admin.CommandArgs;\n-import io.pravega.cli.admin.Parser;\n-import io.pravega.cli.admin.utils.CLIControllerConfig;\n-import io.pravega.cli.admin.utils.TestUtils;\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.connection.impl.ConnectionPool;\n-import io.pravega.client.connection.impl.ConnectionPoolImpl;\n-import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.common.Exceptions;\n-import io.pravega.common.cluster.Host;\n-import io.pravega.controller.server.SegmentHelper;\n-import io.pravega.controller.store.client.StoreClientFactory;\n-import io.pravega.controller.store.host.HostControllerStore;\n-import io.pravega.controller.store.host.HostMonitorConfig;\n-import io.pravega.controller.store.host.HostStoreFactory;\n-import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n-import io.pravega.controller.util.Config;\n-import lombok.Cleanup;\n-import org.apache.curator.framework.CuratorFramework;\n-import org.apache.curator.framework.CuratorFrameworkFactory;\n-import org.apache.curator.retry.RetryOneTime;\n-import org.junit.Assert;\n import org.junit.Before;\n-import org.junit.Test;\n \n-import javax.ws.rs.core.Response;\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintStream;\n-import java.net.URI;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-\n-public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n \n     @Before\n     @Override\n     public void setUp() throws Exception {\n-        setupUtils.setAuthEnabled(true);\n+        authEnabled = true;\n         super.setUp();\n     }\n-\n-\n-    @Test\n-    public void testListScopesCommand() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeScopeCommand() throws Exception {\n-        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertNotNull(ControllerDescribeStreamCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListStreamsCommand() throws Exception {\n-        String testStream = \"testListStreamsCommand\";\n-        setupUtils.createTestStream(testStream, 1);\n-        String commandResult = TestUtils.executeCommand(\"controller list-streams \" + setupUtils.getScope(), state.get());\n-        // Check that the newly created stream is retrieved as part of the list of streams.\n-        Assert.assertTrue(commandResult.contains(testStream));\n-        Assert.assertNotNull(ControllerListStreamsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListReaderGroupsCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller list-readergroups _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerListReaderGroupsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeReaderGroupCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller describe-readergroup _system commitStreamReaders\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerDescribeReaderGroupCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeStreamCommand() throws Exception {\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = setupUtils.generateValidClientConfig();\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        Assert.assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        Assert.assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        Assert.assertTrue(\"Failed to create the stream \", isStreamCreated);\n-\n-        String commandResult = executeCommand(\"controller describe-stream \" + scope + \" \" + testStream, state.get(), setupUtils.getServicePort());\n-        Assert.assertTrue(commandResult.contains(\"stream_config\"));\n-        Assert.assertTrue(commandResult.contains(\"stream_state\"));\n-        Assert.assertTrue(commandResult.contains(\"segment_count\"));\n-        Assert.assertTrue(commandResult.contains(\"is_sealed\"));\n-        Assert.assertTrue(commandResult.contains(\"active_epoch\"));\n-        Assert.assertTrue(commandResult.contains(\"truncation_record\"));\n-        Assert.assertTrue(commandResult.contains(\"scaling_info\"));\n-\n-        // Exercise actual instantiateSegmentHelper\n-        CommandArgs commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        ControllerDescribeStreamCommand command = new ControllerDescribeStreamCommand(commandArgs);\n-        @Cleanup\n-        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(setupUtils.getZkTestServer().getConnectString(),\n-                new RetryOneTime(5000));\n-        curatorFramework.start();\n-        Assert.assertNotNull(command.instantiateSegmentHelper(curatorFramework));\n-\n-        // Try the Zookeeper backend, which is expected to fail and be handled by the command.\n-        Properties properties = new Properties();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.ZOOKEEPER.name());\n-        state.get().getConfigBuilder().include(properties);\n-        commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        new ControllerDescribeStreamCommand(commandArgs).execute();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.SEGMENTSTORE.name());\n-        state.get().getConfigBuilder().include(properties);\n-    }\n-\n-    @Test\n-    public void testAuthConfig() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"true\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-        // Restore config\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"false\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-\n-        // Exercise response codes for REST requests.\n-        CommandArgs commandArgs = new CommandArgs(Collections.emptyList(), new AdminCommandState());\n-        ControllerListScopesCommand command = new ControllerListScopesCommand(commandArgs);\n-        command.printResponseInfo(Response.status(Response.Status.UNAUTHORIZED).build());\n-        command.printResponseInfo(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n-    }\n-\n-    static String executeCommand(String inputCommand, AdminCommandState state, int servicePort) throws Exception {\n-        Parser.Command pc = Parser.parse(inputCommand);\n-        Assert.assertNotNull(pc.toString());\n-        CommandArgs args = new CommandArgs(pc.getArgs(), state);\n-        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        TestingDescribeStreamCommand cmd = new TestingDescribeStreamCommand(args, servicePort);\n-        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n-            cmd.setOut(ps);\n-            cmd.execute();\n-        }\n-        return new String(baos.toByteArray(), StandardCharsets.UTF_8);\n-    }\n-\n-    private static class TestingDescribeStreamCommand extends ControllerDescribeStreamCommand {\n-        private final int servicePort;\n-\n-        /**\n-         * Creates a new instance of the Command class.\n-         *\n-         * @param args The arguments for the command.\n-         */\n-        public TestingDescribeStreamCommand(CommandArgs args, int servicePort) {\n-            super(args);\n-            this.servicePort = servicePort;\n-        }\n-\n-        @Override\n-        protected SegmentHelper instantiateSegmentHelper(CuratorFramework zkClient) {\n-            HostMonitorConfig hostMonitorConfig = HostMonitorConfigImpl.builder()\n-                    .hostMonitorEnabled(false)\n-                    .hostContainerMap(getHostContainerMap(Collections.singletonList(\"localhost:\" + servicePort),\n-                            getServiceConfig().getContainerCount()))\n-                    .hostMonitorMinRebalanceInterval(Config.CLUSTER_MIN_REBALANCE_INTERVAL)\n-                    .containerCount(getServiceConfig().getContainerCount())\n-                    .build();\n-            HostControllerStore hostStore = HostStoreFactory.createStore(hostMonitorConfig, StoreClientFactory.createZKStoreClient(zkClient));\n-            ClientConfig clientConfig = ClientConfig.builder()\n-                    .controllerURI(URI.create(getCLIControllerConfig().getControllerGrpcURI()))\n-                    .validateHostName(false)\n-                    .credentials(new DefaultCredentials(getCLIControllerConfig().getPassword(),\n-                            getCLIControllerConfig().getUserName()))\n-                    .build();\n-            ConnectionPool pool = new ConnectionPoolImpl(clientConfig, new SocketConnectionFactoryImpl(clientConfig));\n-            return new SegmentHelper(pool, hostStore, pool.getInternalExecutor());\n-        }\n-\n-        private Map<Host, Set<Integer>> getHostContainerMap(List<String> uri, int containerCount) {\n-            Exceptions.checkNotNullOrEmpty(uri, \"uri\");\n-\n-            Map<Host, Set<Integer>> hostContainerMap = new HashMap<>();\n-            uri.forEach(x -> {\n-                // Get the host and port from the URI\n-                String host = x.split(\":\")[0];\n-                int port = Integer.parseInt(x.split(\":\")[1]);\n-                Preconditions.checkNotNull(host, \"host\");\n-                Preconditions.checkArgument(port > 0, \"port\");\n-                Preconditions.checkArgument(containerCount > 0, \"containerCount\");\n-                hostContainerMap.put(new Host(host, port, null), IntStream.range(0, containerCount).boxed().collect(Collectors.toSet()));\n-            });\n-            return hostContainerMap;\n-        }\n-\n-        @Override\n-        public void execute() {\n-            super.execute();\n-        }\n-    }\n }\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 200683ffb..2437480ba 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -15,7 +15,7 @@ public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n \n     @Before\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         authEnabled = true;\n         super.setUp();\n     }\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\ndeleted file mode 100644\nindex 2437480ba..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ /dev/null\n", "chunk": "@@ -1,22 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin.controller;\n-\n-import org.junit.Before;\n-\n-public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n-\n-    @Before\n-    @Override\n-    public void setUp() {\n-        authEnabled = true;\n-        super.setUp();\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 035af7c2e..4ff533d36 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -198,21 +198,23 @@ public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest\n     }\n \n     private static class TestingDescribeStreamCommand extends ControllerDescribeStreamCommand {\n+        private final int servicePort;\n \n         /**\n          * Creates a new instance of the Command class.\n          *\n          * @param args The arguments for the command.\n          */\n-        public TestingDescribeStreamCommand(CommandArgs args) {\n+        public TestingDescribeStreamCommand(CommandArgs args, int servicePort) {\n             super(args);\n+            this.servicePort = servicePort;\n         }\n \n         @Override\n         protected SegmentHelper instantiateSegmentHelper(CuratorFramework zkClient) {\n             HostMonitorConfig hostMonitorConfig = HostMonitorConfigImpl.builder()\n                     .hostMonitorEnabled(false)\n-                    .hostContainerMap(getHostContainerMap(Collections.singletonList(\"localhost:\" + SETUP_UTILS.getServicePort()),\n+                    .hostContainerMap(getHostContainerMap(Collections.singletonList(\"localhost:\" + servicePort),\n                             getServiceConfig().getContainerCount()))\n                     .hostMonitorMinRebalanceInterval(Config.CLUSTER_MIN_REBALANCE_INTERVAL)\n                     .containerCount(getServiceConfig().getContainerCount())\n", "next_change": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 4ff533d36..200683ffb 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -9,246 +9,14 @@\n  */\n package io.pravega.cli.admin.controller;\n \n-import com.google.common.base.Preconditions;\n-import io.pravega.cli.admin.AbstractAdminCommandTest;\n-import io.pravega.cli.admin.AdminCommandState;\n-import io.pravega.cli.admin.CommandArgs;\n-import io.pravega.cli.admin.Parser;\n-import io.pravega.cli.admin.utils.CLIControllerConfig;\n-import io.pravega.cli.admin.utils.TestUtils;\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.connection.impl.ConnectionPool;\n-import io.pravega.client.connection.impl.ConnectionPoolImpl;\n-import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.common.Exceptions;\n-import io.pravega.common.cluster.Host;\n-import io.pravega.controller.server.SegmentHelper;\n-import io.pravega.controller.store.client.StoreClientFactory;\n-import io.pravega.controller.store.host.HostControllerStore;\n-import io.pravega.controller.store.host.HostMonitorConfig;\n-import io.pravega.controller.store.host.HostStoreFactory;\n-import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n-import io.pravega.controller.util.Config;\n-import lombok.Cleanup;\n-import org.apache.curator.framework.CuratorFramework;\n-import org.apache.curator.framework.CuratorFrameworkFactory;\n-import org.apache.curator.retry.RetryOneTime;\n-import org.junit.Assert;\n import org.junit.Before;\n-import org.junit.Test;\n \n-import javax.ws.rs.core.Response;\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintStream;\n-import java.net.URI;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-\n-public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n \n     @Before\n     @Override\n     public void setUp() throws Exception {\n-        setupUtils.setAuthEnabled(true);\n+        authEnabled = true;\n         super.setUp();\n     }\n-\n-\n-    @Test\n-    public void testListScopesCommand() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeScopeCommand() throws Exception {\n-        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertNotNull(ControllerDescribeStreamCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListStreamsCommand() throws Exception {\n-        String testStream = \"testListStreamsCommand\";\n-        setupUtils.createTestStream(testStream, 1);\n-        String commandResult = TestUtils.executeCommand(\"controller list-streams \" + setupUtils.getScope(), state.get());\n-        // Check that the newly created stream is retrieved as part of the list of streams.\n-        Assert.assertTrue(commandResult.contains(testStream));\n-        Assert.assertNotNull(ControllerListStreamsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListReaderGroupsCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller list-readergroups _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerListReaderGroupsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeReaderGroupCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller describe-readergroup _system commitStreamReaders\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerDescribeReaderGroupCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeStreamCommand() throws Exception {\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = setupUtils.generateValidClientConfig();\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        Assert.assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        Assert.assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        Assert.assertTrue(\"Failed to create the stream \", isStreamCreated);\n-\n-        String commandResult = executeCommand(\"controller describe-stream \" + scope + \" \" + testStream, state.get(), setupUtils.getServicePort());\n-        Assert.assertTrue(commandResult.contains(\"stream_config\"));\n-        Assert.assertTrue(commandResult.contains(\"stream_state\"));\n-        Assert.assertTrue(commandResult.contains(\"segment_count\"));\n-        Assert.assertTrue(commandResult.contains(\"is_sealed\"));\n-        Assert.assertTrue(commandResult.contains(\"active_epoch\"));\n-        Assert.assertTrue(commandResult.contains(\"truncation_record\"));\n-        Assert.assertTrue(commandResult.contains(\"scaling_info\"));\n-\n-        // Exercise actual instantiateSegmentHelper\n-        CommandArgs commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        ControllerDescribeStreamCommand command = new ControllerDescribeStreamCommand(commandArgs);\n-        @Cleanup\n-        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(setupUtils.getZkTestServer().getConnectString(),\n-                new RetryOneTime(5000));\n-        curatorFramework.start();\n-        Assert.assertNotNull(command.instantiateSegmentHelper(curatorFramework));\n-\n-        // Try the Zookeeper backend, which is expected to fail and be handled by the command.\n-        Properties properties = new Properties();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.ZOOKEEPER.name());\n-        state.get().getConfigBuilder().include(properties);\n-        commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        new ControllerDescribeStreamCommand(commandArgs).execute();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.SEGMENTSTORE.name());\n-        state.get().getConfigBuilder().include(properties);\n-    }\n-\n-    @Test\n-    public void testAuthConfig() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"true\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-        // Restore config\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"false\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-\n-        // Exercise response codes for REST requests.\n-        CommandArgs commandArgs = new CommandArgs(Collections.emptyList(), new AdminCommandState());\n-        ControllerListScopesCommand command = new ControllerListScopesCommand(commandArgs);\n-        command.printResponseInfo(Response.status(Response.Status.UNAUTHORIZED).build());\n-        command.printResponseInfo(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n-    }\n-\n-    static String executeCommand(String inputCommand, AdminCommandState state, int servicePort) throws Exception {\n-        Parser.Command pc = Parser.parse(inputCommand);\n-        Assert.assertNotNull(pc.toString());\n-        CommandArgs args = new CommandArgs(pc.getArgs(), state);\n-        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        TestingDescribeStreamCommand cmd = new TestingDescribeStreamCommand(args, servicePort);\n-        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n-            cmd.setOut(ps);\n-            cmd.execute();\n-        }\n-        return new String(baos.toByteArray(), StandardCharsets.UTF_8);\n-    }\n-\n-    private static class TestingDescribeStreamCommand extends ControllerDescribeStreamCommand {\n-        private final int servicePort;\n-\n-        /**\n-         * Creates a new instance of the Command class.\n-         *\n-         * @param args The arguments for the command.\n-         */\n-        public TestingDescribeStreamCommand(CommandArgs args, int servicePort) {\n-            super(args);\n-            this.servicePort = servicePort;\n-        }\n-\n-        @Override\n-        protected SegmentHelper instantiateSegmentHelper(CuratorFramework zkClient) {\n-            HostMonitorConfig hostMonitorConfig = HostMonitorConfigImpl.builder()\n-                    .hostMonitorEnabled(false)\n-                    .hostContainerMap(getHostContainerMap(Collections.singletonList(\"localhost:\" + servicePort),\n-                            getServiceConfig().getContainerCount()))\n-                    .hostMonitorMinRebalanceInterval(Config.CLUSTER_MIN_REBALANCE_INTERVAL)\n-                    .containerCount(getServiceConfig().getContainerCount())\n-                    .build();\n-            HostControllerStore hostStore = HostStoreFactory.createStore(hostMonitorConfig, StoreClientFactory.createZKStoreClient(zkClient));\n-            ClientConfig clientConfig = ClientConfig.builder()\n-                    .controllerURI(URI.create(getCLIControllerConfig().getControllerGrpcURI()))\n-                    .validateHostName(false)\n-                    .credentials(new DefaultCredentials(getCLIControllerConfig().getPassword(),\n-                            getCLIControllerConfig().getUserName()))\n-                    .build();\n-            ConnectionPool pool = new ConnectionPoolImpl(clientConfig, new SocketConnectionFactoryImpl(clientConfig));\n-            return new SegmentHelper(pool, hostStore, pool.getInternalExecutor());\n-        }\n-\n-        private Map<Host, Set<Integer>> getHostContainerMap(List<String> uri, int containerCount) {\n-            Exceptions.checkNotNullOrEmpty(uri, \"uri\");\n-\n-            Map<Host, Set<Integer>> hostContainerMap = new HashMap<>();\n-            uri.forEach(x -> {\n-                // Get the host and port from the URI\n-                String host = x.split(\":\")[0];\n-                int port = Integer.parseInt(x.split(\":\")[1]);\n-                Preconditions.checkNotNull(host, \"host\");\n-                Preconditions.checkArgument(port > 0, \"port\");\n-                Preconditions.checkArgument(containerCount > 0, \"containerCount\");\n-                hostContainerMap.put(new Host(host, port, null), IntStream.range(0, containerCount).boxed().collect(Collectors.toSet()));\n-            });\n-            return hostContainerMap;\n-        }\n-\n-        @Override\n-        public void execute() {\n-            super.execute();\n-        }\n-    }\n }\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 200683ffb..2437480ba 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -15,7 +15,7 @@ public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n \n     @Before\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         authEnabled = true;\n         super.setUp();\n     }\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\ndeleted file mode 100644\nindex 2437480ba..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ /dev/null\n", "chunk": "@@ -1,22 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin.controller;\n-\n-import org.junit.Before;\n-\n-public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n-\n-    @Before\n-    @Override\n-    public void setUp() {\n-        authEnabled = true;\n-        super.setUp();\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1Mzg4NA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516053884", "bodyText": "randomize", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:32:30Z", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;", "originalCommit": "64aefb5947586ab85025715fe60484460c955c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTkyMg==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121922", "bodyText": "done", "author": "anirudhkovuru", "createdAt": "2020-11-04T06:31:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1Mzg4NA=="}], "type": "inlineReview", "revised_code": {"commit": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex 686606555..e8d36eaed 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -26,15 +27,14 @@ import java.util.concurrent.atomic.AtomicReference;\n public abstract class AbstractTlsUserCommandTest {\n \n     // Security related flags and instantiate local pravega server.\n-    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n-\n-    private static final Integer CONTROLLER_PORT = 9090;\n-    private static final Integer SEGMENT_STORE_PORT = 6000;\n-    private static final Integer REST_SERVER_PORT = 9091;\n+    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n+    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n+    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n \n     @Rule\n     public final Timeout globalTimeout = new Timeout(120, TimeUnit.SECONDS);\n \n+    protected final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n     protected boolean authEnabled = false;\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n", "next_change": {"commit": "255984479ccaf137ea3f87cc7ae765ed291f7169", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex e8d36eaed..c69a79eb6 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -31,10 +28,10 @@ public abstract class AbstractTlsUserCommandTest {\n     private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n     private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n \n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(120, TimeUnit.SECONDS);\n+     @Rule\n+     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n \n-    protected final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n     protected boolean authEnabled = false;\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n", "next_change": {"commit": "1c42424d927ca524e53ad0291cb6958c8122f273", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex c69a79eb6..923add2ad 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -22,12 +22,6 @@ import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n public abstract class AbstractTlsUserCommandTest {\n-\n-    // Security related flags and instantiate local pravega server.\n-    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n-\n      @Rule\n      public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n \n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex 923add2ad..6f567cab7 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -29,16 +30,18 @@ public abstract class AbstractTlsUserCommandTest {\n     protected boolean authEnabled = false;\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n+    String location = \"../../config/\";\n \n-    // Security related flags and instantiate local pravega server.\n+    // Security related flags and instantiate local Pravega server.\n     private final Integer controllerPort = TestUtils.getAvailableListenPort();\n     private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n \n     @Before\n-    public void setUp() throws Exception {\n+    @SneakyThrows\n+    public void setUp() {\n \n-        // Create the secure pravega server to test commands against.\n+        // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n                 .segmentStorePort(segmentStorePort)\n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\ndeleted file mode 100644\nindex 6f567cab7..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,97 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.SneakyThrows;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public abstract class AbstractTlsUserCommandTest {\n-     @Rule\n-     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n-\n-    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-    String location = \"../../config/\";\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    @SneakyThrows\n-    public void setUp() {\n-\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(location + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(location + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(location + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(location + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(location + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(location + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-\n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(\"localhost:\" + controllerPort.toString());\n-        interactiveConfig.setDefaultSegmentCount(4);\n-        interactiveConfig.setMaxListItems(100);\n-        interactiveConfig.setTimeoutMillis(10000);\n-        interactiveConfig.setAuthEnabled(authEnabled);\n-        interactiveConfig.setUserName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        interactiveConfig.setPassword(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        interactiveConfig.setTlsEnabled(tlsEnabled);\n-        interactiveConfig.setTruststore(location + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n-        config.set(interactiveConfig);\n-    }\n-\n-    @After\n-    @SneakyThrows\n-    public void tearDown() {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}, {"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex c69a79eb6..923add2ad 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -36,17 +30,22 @@ public abstract class AbstractTlsUserCommandTest {\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n \n+    // Security related flags and instantiate local pravega server.\n+    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n+    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n+    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n+\n     @Before\n     public void setUp() throws Exception {\n \n         // Create the secure pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(CONTROLLER_PORT)\n-                .segmentStorePort(SEGMENT_STORE_PORT)\n+                .controllerPort(controllerPort)\n+                .segmentStorePort(segmentStorePort)\n                 .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n                 .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n                 .enableRestServer(true)\n-                .restServerPort(REST_SERVER_PORT)\n+                .restServerPort(restServerPort)\n                 .enableAuth(authEnabled)\n                 .enableTls(tlsEnabled);\n \n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\ndeleted file mode 100644\nindex 923add2ad..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,93 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public abstract class AbstractTlsUserCommandTest {\n-     @Rule\n-     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n-\n-    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-\n-    // Security related flags and instantiate local pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    public void setUp() throws Exception {\n-\n-        // Create the secure pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-\n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(\"localhost:\" + controllerPort.toString());\n-        interactiveConfig.setDefaultSegmentCount(4);\n-        interactiveConfig.setMaxListItems(100);\n-        interactiveConfig.setTimeoutMillis(10000);\n-        interactiveConfig.setAuthEnabled(authEnabled);\n-        interactiveConfig.setUserName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        interactiveConfig.setPassword(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        interactiveConfig.setTlsEnabled(tlsEnabled);\n-        interactiveConfig.setTruststore(\"../../config/\" + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n-        config.set(interactiveConfig);\n-    }\n-\n-    @After\n-    public void tearDown() throws Exception {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDA0MQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516054041", "bodyText": "same comment about static shared variables.", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:32:43Z", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();", "originalCommit": "64aefb5947586ab85025715fe60484460c955c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTk2MQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121961", "bodyText": "made non-static", "author": "anirudhkovuru", "createdAt": "2020-11-04T06:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex 686606555..e8d36eaed 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -26,15 +27,14 @@ import java.util.concurrent.atomic.AtomicReference;\n public abstract class AbstractTlsUserCommandTest {\n \n     // Security related flags and instantiate local pravega server.\n-    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n-\n-    private static final Integer CONTROLLER_PORT = 9090;\n-    private static final Integer SEGMENT_STORE_PORT = 6000;\n-    private static final Integer REST_SERVER_PORT = 9091;\n+    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n+    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n+    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n \n     @Rule\n     public final Timeout globalTimeout = new Timeout(120, TimeUnit.SECONDS);\n \n+    protected final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n     protected boolean authEnabled = false;\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n", "next_change": {"commit": "255984479ccaf137ea3f87cc7ae765ed291f7169", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex e8d36eaed..c69a79eb6 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -31,10 +28,10 @@ public abstract class AbstractTlsUserCommandTest {\n     private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n     private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n \n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(120, TimeUnit.SECONDS);\n+     @Rule\n+     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n \n-    protected final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n     protected boolean authEnabled = false;\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n", "next_change": {"commit": "1c42424d927ca524e53ad0291cb6958c8122f273", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex c69a79eb6..923add2ad 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -22,12 +22,6 @@ import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n public abstract class AbstractTlsUserCommandTest {\n-\n-    // Security related flags and instantiate local pravega server.\n-    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n-\n      @Rule\n      public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n \n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex 923add2ad..6f567cab7 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -29,16 +30,18 @@ public abstract class AbstractTlsUserCommandTest {\n     protected boolean authEnabled = false;\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n+    String location = \"../../config/\";\n \n-    // Security related flags and instantiate local pravega server.\n+    // Security related flags and instantiate local Pravega server.\n     private final Integer controllerPort = TestUtils.getAvailableListenPort();\n     private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n \n     @Before\n-    public void setUp() throws Exception {\n+    @SneakyThrows\n+    public void setUp() {\n \n-        // Create the secure pravega server to test commands against.\n+        // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n                 .segmentStorePort(segmentStorePort)\n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\ndeleted file mode 100644\nindex 6f567cab7..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,97 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.SneakyThrows;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public abstract class AbstractTlsUserCommandTest {\n-     @Rule\n-     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n-\n-    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-    String location = \"../../config/\";\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    @SneakyThrows\n-    public void setUp() {\n-\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(location + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(location + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(location + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(location + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(location + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(location + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-\n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(\"localhost:\" + controllerPort.toString());\n-        interactiveConfig.setDefaultSegmentCount(4);\n-        interactiveConfig.setMaxListItems(100);\n-        interactiveConfig.setTimeoutMillis(10000);\n-        interactiveConfig.setAuthEnabled(authEnabled);\n-        interactiveConfig.setUserName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        interactiveConfig.setPassword(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        interactiveConfig.setTlsEnabled(tlsEnabled);\n-        interactiveConfig.setTruststore(location + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n-        config.set(interactiveConfig);\n-    }\n-\n-    @After\n-    @SneakyThrows\n-    public void tearDown() {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}, {"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex c69a79eb6..923add2ad 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -36,17 +30,22 @@ public abstract class AbstractTlsUserCommandTest {\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n \n+    // Security related flags and instantiate local pravega server.\n+    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n+    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n+    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n+\n     @Before\n     public void setUp() throws Exception {\n \n         // Create the secure pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(CONTROLLER_PORT)\n-                .segmentStorePort(SEGMENT_STORE_PORT)\n+                .controllerPort(controllerPort)\n+                .segmentStorePort(segmentStorePort)\n                 .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n                 .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n                 .enableRestServer(true)\n-                .restServerPort(REST_SERVER_PORT)\n+                .restServerPort(restServerPort)\n                 .enableAuth(authEnabled)\n                 .enableTls(tlsEnabled);\n \n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\ndeleted file mode 100644\nindex 923add2ad..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,93 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public abstract class AbstractTlsUserCommandTest {\n-     @Rule\n-     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n-\n-    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-\n-    // Security related flags and instantiate local pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    public void setUp() throws Exception {\n-\n-        // Create the secure pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-\n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(\"localhost:\" + controllerPort.toString());\n-        interactiveConfig.setDefaultSegmentCount(4);\n-        interactiveConfig.setMaxListItems(100);\n-        interactiveConfig.setTimeoutMillis(10000);\n-        interactiveConfig.setAuthEnabled(authEnabled);\n-        interactiveConfig.setUserName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        interactiveConfig.setPassword(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        interactiveConfig.setTlsEnabled(tlsEnabled);\n-        interactiveConfig.setTruststore(\"../../config/\" + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n-        config.set(interactiveConfig);\n-    }\n-\n-    @After\n-    public void tearDown() throws Exception {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDEzNw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516054137", "bodyText": "final", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:32:50Z", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(120, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;", "originalCommit": "64aefb5947586ab85025715fe60484460c955c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMjAyNQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517122025", "bodyText": "authEnabled and tlsEnabled cannot be final as they will be changed according to the tests in which they are used. Explained above", "author": "anirudhkovuru", "createdAt": "2020-11-04T06:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDEzNw=="}], "type": "inlineReview", "revised_code": {"commit": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex 686606555..e8d36eaed 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -26,15 +27,14 @@ import java.util.concurrent.atomic.AtomicReference;\n public abstract class AbstractTlsUserCommandTest {\n \n     // Security related flags and instantiate local pravega server.\n-    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n-\n-    private static final Integer CONTROLLER_PORT = 9090;\n-    private static final Integer SEGMENT_STORE_PORT = 6000;\n-    private static final Integer REST_SERVER_PORT = 9091;\n+    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n+    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n+    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n \n     @Rule\n     public final Timeout globalTimeout = new Timeout(120, TimeUnit.SECONDS);\n \n+    protected final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n     protected boolean authEnabled = false;\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n", "next_change": {"commit": "255984479ccaf137ea3f87cc7ae765ed291f7169", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex e8d36eaed..c69a79eb6 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -31,10 +28,10 @@ public abstract class AbstractTlsUserCommandTest {\n     private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n     private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n \n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(120, TimeUnit.SECONDS);\n+     @Rule\n+     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n \n-    protected final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n     protected boolean authEnabled = false;\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n", "next_change": {"commit": "1c42424d927ca524e53ad0291cb6958c8122f273", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex c69a79eb6..923add2ad 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -22,12 +22,6 @@ import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n public abstract class AbstractTlsUserCommandTest {\n-\n-    // Security related flags and instantiate local pravega server.\n-    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n-\n      @Rule\n      public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n \n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex 923add2ad..6f567cab7 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -29,16 +30,18 @@ public abstract class AbstractTlsUserCommandTest {\n     protected boolean authEnabled = false;\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n+    String location = \"../../config/\";\n \n-    // Security related flags and instantiate local pravega server.\n+    // Security related flags and instantiate local Pravega server.\n     private final Integer controllerPort = TestUtils.getAvailableListenPort();\n     private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n \n     @Before\n-    public void setUp() throws Exception {\n+    @SneakyThrows\n+    public void setUp() {\n \n-        // Create the secure pravega server to test commands against.\n+        // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n                 .segmentStorePort(segmentStorePort)\n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\ndeleted file mode 100644\nindex 6f567cab7..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,97 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.SneakyThrows;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public abstract class AbstractTlsUserCommandTest {\n-     @Rule\n-     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n-\n-    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-    String location = \"../../config/\";\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    @SneakyThrows\n-    public void setUp() {\n-\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(location + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(location + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(location + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(location + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(location + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(location + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-\n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(\"localhost:\" + controllerPort.toString());\n-        interactiveConfig.setDefaultSegmentCount(4);\n-        interactiveConfig.setMaxListItems(100);\n-        interactiveConfig.setTimeoutMillis(10000);\n-        interactiveConfig.setAuthEnabled(authEnabled);\n-        interactiveConfig.setUserName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        interactiveConfig.setPassword(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        interactiveConfig.setTlsEnabled(tlsEnabled);\n-        interactiveConfig.setTruststore(location + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n-        config.set(interactiveConfig);\n-    }\n-\n-    @After\n-    @SneakyThrows\n-    public void tearDown() {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}, {"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex c69a79eb6..923add2ad 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -36,17 +30,22 @@ public abstract class AbstractTlsUserCommandTest {\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n \n+    // Security related flags and instantiate local pravega server.\n+    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n+    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n+    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n+\n     @Before\n     public void setUp() throws Exception {\n \n         // Create the secure pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(CONTROLLER_PORT)\n-                .segmentStorePort(SEGMENT_STORE_PORT)\n+                .controllerPort(controllerPort)\n+                .segmentStorePort(segmentStorePort)\n                 .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n                 .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n                 .enableRestServer(true)\n-                .restServerPort(REST_SERVER_PORT)\n+                .restServerPort(restServerPort)\n                 .enableAuth(authEnabled)\n                 .enableTls(tlsEnabled);\n \n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\ndeleted file mode 100644\nindex 923add2ad..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,93 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public abstract class AbstractTlsUserCommandTest {\n-     @Rule\n-     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n-\n-    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-\n-    // Security related flags and instantiate local pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    public void setUp() throws Exception {\n-\n-        // Create the secure pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-\n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(\"localhost:\" + controllerPort.toString());\n-        interactiveConfig.setDefaultSegmentCount(4);\n-        interactiveConfig.setMaxListItems(100);\n-        interactiveConfig.setTimeoutMillis(10000);\n-        interactiveConfig.setAuthEnabled(authEnabled);\n-        interactiveConfig.setUserName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        interactiveConfig.setPassword(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        interactiveConfig.setTlsEnabled(tlsEnabled);\n-        interactiveConfig.setTruststore(\"../../config/\" + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n-        config.set(interactiveConfig);\n-    }\n-\n-    @After\n-    public void tearDown() throws Exception {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDI1NA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516054254", "bodyText": "No sleeping please.", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:33:02Z", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(120, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(CONTROLLER_PORT)\n+                .segmentStorePort(SEGMENT_STORE_PORT)\n+                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(REST_SERVER_PORT)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n+        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n+        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n+        // explicit in the respective test classes.\n+\n+        if (authEnabled) {\n+            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n+                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n+                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n+        }\n+\n+        if (tlsEnabled) {\n+            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n+                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n+                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n+                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n+                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n+        }\n+\n+        localPravega = emulatorBuilder.build();\n+        localPravega.start();\n+\n+        // Wait for the server to complete start-up.\n+        TimeUnit.SECONDS.sleep(20);", "originalCommit": "64aefb5947586ab85025715fe60484460c955c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMjA1Ng==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517122056", "bodyText": "Will look for another way.", "author": "anirudhkovuru", "createdAt": "2020-11-04T06:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMjcwNw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529812707", "bodyText": "Removed this.", "author": "anirudhkovuru", "createdAt": "2020-11-24T19:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "255984479ccaf137ea3f87cc7ae765ed291f7169", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex 686606555..c69a79eb6 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -75,9 +72,6 @@ public abstract class AbstractTlsUserCommandTest {\n         localPravega = emulatorBuilder.build();\n         localPravega.start();\n \n-        // Wait for the server to complete start-up.\n-        TimeUnit.SECONDS.sleep(20);\n-\n         InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n         interactiveConfig.setControllerUri(\"localhost:\" + CONTROLLER_PORT.toString());\n         interactiveConfig.setDefaultSegmentCount(4);\n", "next_change": {"commit": "1c42424d927ca524e53ad0291cb6958c8122f273", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex c69a79eb6..923add2ad 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -73,7 +72,7 @@ public abstract class AbstractTlsUserCommandTest {\n         localPravega.start();\n \n         InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(\"localhost:\" + CONTROLLER_PORT.toString());\n+        interactiveConfig.setControllerUri(\"localhost:\" + controllerPort.toString());\n         interactiveConfig.setDefaultSegmentCount(4);\n         interactiveConfig.setMaxListItems(100);\n         interactiveConfig.setTimeoutMillis(10000);\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex 923add2ad..6f567cab7 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -80,12 +83,13 @@ public abstract class AbstractTlsUserCommandTest {\n         interactiveConfig.setUserName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n         interactiveConfig.setPassword(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n         interactiveConfig.setTlsEnabled(tlsEnabled);\n-        interactiveConfig.setTruststore(\"../../config/\" + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n+        interactiveConfig.setTruststore(location + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n         config.set(interactiveConfig);\n     }\n \n     @After\n-    public void tearDown() throws Exception {\n+    @SneakyThrows\n+    public void tearDown() {\n         if (localPravega != null) {\n             localPravega.close();\n         }\n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\ndeleted file mode 100644\nindex 6f567cab7..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,97 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.SneakyThrows;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public abstract class AbstractTlsUserCommandTest {\n-     @Rule\n-     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n-\n-    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-    String location = \"../../config/\";\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    @SneakyThrows\n-    public void setUp() {\n-\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(location + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(location + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(location + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(location + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(location + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(location + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-\n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(\"localhost:\" + controllerPort.toString());\n-        interactiveConfig.setDefaultSegmentCount(4);\n-        interactiveConfig.setMaxListItems(100);\n-        interactiveConfig.setTimeoutMillis(10000);\n-        interactiveConfig.setAuthEnabled(authEnabled);\n-        interactiveConfig.setUserName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        interactiveConfig.setPassword(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        interactiveConfig.setTlsEnabled(tlsEnabled);\n-        interactiveConfig.setTruststore(location + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n-        config.set(interactiveConfig);\n-    }\n-\n-    @After\n-    @SneakyThrows\n-    public void tearDown() {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NzUwOQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516057509", "bodyText": "Make all these fields final. Initialize them in the class constructor, and start the services only when you invoke startAllServices", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:37:19Z", "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n+import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils {\n+\n+    // The different services.\n+    @Getter", "originalCommit": "64aefb5947586ab85025715fe60484460c955c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NzkwMA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516057900", "bodyText": "Also make this class implement AutoCloseable and in the close method make sure you shut down and close all these services. Otherwise you risk leaving them running in the background when your test is done.", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NzUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMjA5MA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517122090", "bodyText": "The class implements AutoCloseable and the close method. Will look into making the fields final.", "author": "anirudhkovuru", "createdAt": "2020-11-04T06:32:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NzUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1MTAzMw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529651033", "bodyText": "Ping! Please make the fields final. If you only set them in the constructor, then final is how they should be.", "author": "andreipaduroiu", "createdAt": "2020-11-24T15:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NzUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3NTEzNw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r530375137", "bodyText": "I've made all these fields final as suggested.", "author": "anirudhkovuru", "createdAt": "2020-11-25T13:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NzUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "changed_code": [{"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\nindex d19152b33..78051a46a 100644\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n", "chunk": "@@ -57,7 +57,7 @@ import java.util.concurrent.atomic.AtomicBoolean;\n  */\n @Slf4j\n @NotThreadSafe\n-public final class SecureSetupUtils {\n+public final class SecureSetupUtils implements AutoCloseable {\n \n     // The different services.\n     @Getter\n", "next_change": {"commit": "6db78188c2dc556d68bb4923de89c304e0452a8c", "changed_code": [{"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\nindex 78051a46a..8946143cf 100644\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n", "chunk": "@@ -61,20 +61,20 @@ public final class SecureSetupUtils implements AutoCloseable {\n \n     // The different services.\n     @Getter\n-    private ScheduledExecutorService executor = null;\n+    private final ScheduledExecutorService executor;\n     @Getter\n-    private Controller controller = null;\n+    private final Controller controller;\n     @Getter\n-    private EventStreamClientFactory clientFactory = null;\n-    private ControllerWrapper controllerWrapper = null;\n+    private final EventStreamClientFactory clientFactory;\n+    private final ControllerWrapper controllerWrapper;\n     private PravegaConnectionListener server = null;\n     @Getter\n-    private TestingServer zkTestServer = null;\n-    private ServiceBuilder serviceBuilder = null;\n+    private final TestingServer zkTestServer;\n+    private final ServiceBuilder serviceBuilder;\n \n     @Getter\n     @Setter\n-    private boolean authEnabled = false;\n+    private boolean authEnabled;\n \n     // Manage the state of the class.\n     private final AtomicBoolean started = new AtomicBoolean(false);\n", "next_change": {"commit": "fecaac6f6c54c42f3742720340066bdb1894d39b", "changed_code": [{"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\nindex 8946143cf..3f7d794c7 100644\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n", "chunk": "@@ -67,14 +67,13 @@ public final class SecureSetupUtils implements AutoCloseable {\n     @Getter\n     private final EventStreamClientFactory clientFactory;\n     private final ControllerWrapper controllerWrapper;\n-    private PravegaConnectionListener server = null;\n+    private final PravegaConnectionListener server;\n     @Getter\n     private final TestingServer zkTestServer;\n     private final ServiceBuilder serviceBuilder;\n \n     @Getter\n-    @Setter\n-    private boolean authEnabled;\n+    private final boolean authEnabled;\n \n     // Manage the state of the class.\n     private final AtomicBoolean started = new AtomicBoolean(false);\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\ndeleted file mode 100644\nindex 3f7d794c7..000000000\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ /dev/null\n", "chunk": "@@ -1,238 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.test.integration.utils;\n-\n-import com.google.common.base.Preconditions;\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.EventStreamClientFactory;\n-import io.pravega.client.admin.ReaderGroupManager;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.control.impl.Controller;\n-import io.pravega.client.control.impl.ControllerImpl;\n-import io.pravega.client.control.impl.ControllerImplConfig;\n-import io.pravega.client.stream.EventStreamReader;\n-import io.pravega.client.stream.EventStreamWriter;\n-import io.pravega.client.stream.EventWriterConfig;\n-import io.pravega.client.stream.ReaderConfig;\n-import io.pravega.client.stream.ReaderGroupConfig;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.Stream;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.ClientFactoryImpl;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.common.concurrent.ExecutorServiceHelpers;\n-import io.pravega.controller.util.Config;\n-import io.pravega.segmentstore.contracts.StreamSegmentStore;\n-import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n-import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n-import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n-import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n-import io.pravega.segmentstore.server.store.ServiceBuilder;\n-import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import io.pravega.test.common.TestingServerStarter;\n-import io.pravega.test.integration.demo.ControllerWrapper;\n-import lombok.Cleanup;\n-import lombok.Getter;\n-import lombok.Setter;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.curator.test.TestingServer;\n-\n-import javax.annotation.concurrent.NotThreadSafe;\n-import java.net.URI;\n-import java.util.UUID;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n-/**\n- * Utility functions for creating the test setup.\n- */\n-@Slf4j\n-@NotThreadSafe\n-public final class SecureSetupUtils implements AutoCloseable {\n-\n-    // The different services.\n-    @Getter\n-    private final ScheduledExecutorService executor;\n-    @Getter\n-    private final Controller controller;\n-    @Getter\n-    private final EventStreamClientFactory clientFactory;\n-    private final ControllerWrapper controllerWrapper;\n-    private final PravegaConnectionListener server;\n-    @Getter\n-    private final TestingServer zkTestServer;\n-    private final ServiceBuilder serviceBuilder;\n-\n-    @Getter\n-    private final boolean authEnabled;\n-\n-    // Manage the state of the class.\n-    private final AtomicBoolean started = new AtomicBoolean(false);\n-\n-    // The test Scope name.\n-    @Getter\n-    private final String scope = \"scope\";\n-    private final int controllerRPCPort = TestUtils.getAvailableListenPort();\n-    private final int controllerRESTPort = TestUtils.getAvailableListenPort();\n-    @Getter\n-    private final int servicePort = TestUtils.getAvailableListenPort();\n-    private final ClientConfig clientConfig;\n-\n-    public ClientConfig generateValidClientConfig() {\n-        ClientConfig.ClientConfigBuilder clientConfigBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(\"tcp://localhost:\" + controllerRPCPort));\n-        if (this.authEnabled) {\n-            clientConfigBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        return clientConfigBuilder.build();\n-    }\n-\n-    public SecureSetupUtils(boolean authEnabled) throws Exception {\n-        this.authEnabled = authEnabled;\n-        this.clientConfig = generateValidClientConfig();\n-        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(2, \"Controller pool\");\n-        this.controller = new ControllerImpl(ControllerImplConfig.builder().clientConfig(clientConfig).build(),\n-                executor);\n-        this.clientFactory = new ClientFactoryImpl(scope, controller, clientConfig);\n-        this.zkTestServer = new TestingServerStarter().start();\n-        this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n-        StreamSegmentStore store = this.serviceBuilder.createStreamSegmentService();\n-        this.server = new PravegaConnectionListener(false, servicePort, store, this.serviceBuilder.createTableStoreService(),\n-                this.serviceBuilder.getLowPriorityExecutor());\n-        this.controllerWrapper = new ControllerWrapper(\n-                this.zkTestServer.getConnectString(), false, true, controllerRPCPort, \"localhost\", servicePort,\n-                Config.HOST_STORE_CONTAINER_COUNT, controllerRESTPort, this.authEnabled,\n-                \"../\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_PATH, \"secret\", 600);\n-    }\n-\n-    /**\n-     * Start all pravega related services required for the test deployment.\n-     *\n-     * @throws Exception on any errors.\n-     */\n-    public void startAllServices() throws Exception {\n-        startAllServices(null);\n-    }\n-\n-    /**\n-     * Start all pravega related services required for the test deployment.\n-     *\n-     * @param numThreads the number of threads for the internal client threadpool.\n-     * @throws Exception on any errors.\n-     */\n-    public void startAllServices(Integer numThreads) throws Exception {\n-        if (!this.started.compareAndSet(false, true)) {\n-            log.warn(\"Services already started, not attempting to start again\");\n-            return;\n-        }\n-\n-        // Start zookeeper.\n-        this.zkTestServer.start();\n-        this.serviceBuilder.initialize();\n-        this.server.startListening();\n-        log.info(\"Started Pravega Service\");\n-\n-        // Start Controller.\n-        this.controllerWrapper.awaitRunning();\n-        this.controllerWrapper.getController().createScope(scope).get();\n-        log.info(\"Initialized Pravega Controller\");\n-    }\n-\n-    /**\n-     * Stop the pravega cluster and release all resources.\n-     *\n-     * @throws Exception on any errors.\n-     */\n-    @Override\n-    public void close() throws Exception {\n-        if (!this.started.compareAndSet(true, false)) {\n-            log.warn(\"Services not yet started or already stopped, not attempting to stop\");\n-            return;\n-        }\n-\n-        this.controllerWrapper.close();\n-        this.server.close();\n-        this.zkTestServer.close();\n-        this.serviceBuilder.close();\n-        this.clientFactory.close();\n-        this.controller.close();\n-        ExecutorServiceHelpers.shutdown(executor);\n-    }\n-\n-    /**\n-     * Create the test stream.\n-     *\n-     * @param streamName     Name of the test stream.\n-     * @param numSegments    Number of segments to be created for this stream.\n-     *\n-     */\n-    public void createTestStream(final String streamName, final int numSegments) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-        Preconditions.checkArgument(numSegments > 0);\n-\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        streamManager.createScope(scope);\n-        streamManager.createStream(scope, streamName,\n-                StreamConfiguration.builder()\n-                        .scalingPolicy(ScalingPolicy.fixed(numSegments))\n-                        .build());\n-        log.info(\"Created stream: \" + streamName);\n-    }\n-\n-    /**\n-     * Create a stream writer for writing Integer events.\n-     *\n-     * @param streamName    Name of the test stream.\n-     *\n-     * @return Stream writer instance.\n-     */\n-    public EventStreamWriter<Integer> getIntegerWriter(final String streamName) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-\n-        return clientFactory.createEventWriter(streamName, new IntegerSerializer(),\n-                EventWriterConfig.builder().build());\n-    }\n-\n-    /**\n-     * Create a stream reader for reading Integer events.\n-     *\n-     * @param streamName    Name of the test stream.\n-     *\n-     * @return Stream reader instance.\n-     */\n-    public EventStreamReader<Integer> getIntegerReader(final String streamName) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-\n-        ReaderGroupManager readerGroupManager = ReaderGroupManager.withScope(scope, clientConfig);\n-        final String readerGroup = \"testReaderGroup\" + scope + streamName;\n-        readerGroupManager.createReaderGroup(\n-                readerGroup,\n-                ReaderGroupConfig.builder().stream(Stream.of(scope, streamName)).build());\n-\n-        final String readerGroupId = UUID.randomUUID().toString();\n-        return clientFactory.createReader(readerGroupId, readerGroup, new IntegerSerializer(),\n-                ReaderConfig.builder().build());\n-    }\n-\n-    public URI getControllerUri() {\n-        return URI.create(clientConfig.getControllerURI().toString());\n-    }\n-\n-    public URI getControllerRestUri() {\n-        return URI.create(\"localhost:\" + controllerRESTPort);\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1ODU2OA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516058568", "bodyText": "You never shut this down. You need to keep a pointer to it and close it in your close method.", "author": "andreipaduroiu", "createdAt": "2020-11-02T15:38:53Z", "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n+import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils {\n+\n+    // The different services.\n+    @Getter\n+    private ScheduledExecutorService executor = null;\n+    @Getter\n+    private Controller controller = null;\n+    @Getter\n+    private EventStreamClientFactory clientFactory = null;\n+    private ControllerWrapper controllerWrapper = null;\n+    private PravegaConnectionListener server = null;\n+    @Getter\n+    private TestingServer zkTestServer = null;\n+\n+    @Getter\n+    @Setter\n+    private boolean authEnabled = false;\n+    @Getter\n+    @Setter\n+    private boolean tlsEnabled = false;\n+\n+    // Manage the state of the class.\n+    private final AtomicBoolean started = new AtomicBoolean(false);\n+\n+    // The test Scope name.\n+    @Getter\n+    private final String scope = \"scope\";\n+    private final int controllerRPCPort = TestUtils.getAvailableListenPort();\n+    private final int controllerRESTPort = TestUtils.getAvailableListenPort();\n+    @Getter\n+    private final int servicePort = TestUtils.getAvailableListenPort();\n+    private ClientConfig clientConfig = null;\n+\n+    public ClientConfig generateValidClientConfig() {\n+        ClientConfig.ClientConfigBuilder clientConfigBuilder = ClientConfig.builder()\n+                .controllerURI(URI.create((this.tlsEnabled ? \"tls\" : \"tcp\") + \"://localhost:\" + controllerRPCPort));\n+        if (this.authEnabled) {\n+            clientConfigBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n+                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n+        }\n+        if (this.tlsEnabled) {\n+            clientConfigBuilder.trustStore(\"../\" + SecurityConfigDefaults.TLS_CA_CERT_PATH)\n+                    .validateHostName(false);\n+        }\n+        return clientConfigBuilder.build();\n+    }\n+\n+    /**\n+     * Start all pravega related services required for the test deployment.\n+     *\n+     * @throws Exception on any errors.\n+     */\n+    public void startAllServices() throws Exception {\n+        startAllServices(null);\n+    }\n+\n+    /**\n+     * Start all pravega related services required for the test deployment.\n+     *\n+     * @param numThreads the number of threads for the internal client threadpool.\n+     * @throws Exception on any errors.\n+     */\n+    public void startAllServices(Integer numThreads) throws Exception {\n+        if (!this.started.compareAndSet(false, true)) {\n+            log.warn(\"Services already started, not attempting to start again\");\n+            return;\n+        }\n+        this.clientConfig = generateValidClientConfig();\n+        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(2, \"Controller pool\");\n+        this.controller = new ControllerImpl(ControllerImplConfig.builder().clientConfig(clientConfig).build(),\n+                executor);\n+        this.clientFactory = new ClientFactoryImpl(scope, controller, clientConfig);\n+\n+        // Start zookeeper.\n+        this.zkTestServer = new TestingServerStarter().start();\n+        this.zkTestServer.start();\n+\n+        // Start Pravega Service.\n+        ServiceBuilder serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());", "originalCommit": "64aefb5947586ab85025715fe60484460c955c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMjEyOA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517122128", "bodyText": "I've added this as a field and close it in the close method", "author": "anirudhkovuru", "createdAt": "2020-11-04T06:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1ODU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "changed_code": [{"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\nindex d19152b33..78051a46a 100644\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n", "chunk": "@@ -135,19 +129,12 @@ public final class SecureSetupUtils {\n         this.zkTestServer.start();\n \n         // Start Pravega Service.\n-        ServiceBuilder serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n-\n-        serviceBuilder.initialize();\n-        StreamSegmentStore store = serviceBuilder.createStreamSegmentService();\n-        if (this.tlsEnabled) {\n-            this.server =  new PravegaConnectionListener(true, false, \"localhost\", servicePort, store,\n-                    serviceBuilder.createTableStoreService(), SegmentStatsRecorder.noOp(), TableSegmentStatsRecorder.noOp(),\n-                    new PassingTokenVerifier(), \"../\" + SecurityConfigDefaults.TLS_SERVER_CERT_PATH,\n-                    \"../\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_PATH, true, serviceBuilder.getLowPriorityExecutor());\n-        } else {\n-            this.server = new PravegaConnectionListener(false, servicePort, store, serviceBuilder.createTableStoreService(),\n-                    serviceBuilder.getLowPriorityExecutor());\n-        }\n+        this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n+\n+        this.serviceBuilder.initialize();\n+        StreamSegmentStore store = this.serviceBuilder.createStreamSegmentService();\n+        this.server = new PravegaConnectionListener(false, servicePort, store, this.serviceBuilder.createTableStoreService(),\n+                this.serviceBuilder.getLowPriorityExecutor());\n         this.server.startListening();\n         log.info(\"Started Pravega Service\");\n \n", "next_change": {"commit": "6db78188c2dc556d68bb4923de89c304e0452a8c", "changed_code": [{"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\nindex 78051a46a..8946143cf 100644\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n", "chunk": "@@ -118,19 +133,9 @@ public final class SecureSetupUtils implements AutoCloseable {\n             log.warn(\"Services already started, not attempting to start again\");\n             return;\n         }\n-        this.clientConfig = generateValidClientConfig();\n-        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(2, \"Controller pool\");\n-        this.controller = new ControllerImpl(ControllerImplConfig.builder().clientConfig(clientConfig).build(),\n-                executor);\n-        this.clientFactory = new ClientFactoryImpl(scope, controller, clientConfig);\n \n         // Start zookeeper.\n-        this.zkTestServer = new TestingServerStarter().start();\n         this.zkTestServer.start();\n-\n-        // Start Pravega Service.\n-        this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n-\n         this.serviceBuilder.initialize();\n         StreamSegmentStore store = this.serviceBuilder.createStreamSegmentService();\n         this.server = new PravegaConnectionListener(false, servicePort, store, this.serviceBuilder.createTableStoreService(),\n", "next_change": {"commit": "fecaac6f6c54c42f3742720340066bdb1894d39b", "changed_code": [{"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\nindex 8946143cf..3f7d794c7 100644\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n", "chunk": "@@ -137,9 +139,6 @@ public final class SecureSetupUtils implements AutoCloseable {\n         // Start zookeeper.\n         this.zkTestServer.start();\n         this.serviceBuilder.initialize();\n-        StreamSegmentStore store = this.serviceBuilder.createStreamSegmentService();\n-        this.server = new PravegaConnectionListener(false, servicePort, store, this.serviceBuilder.createTableStoreService(),\n-                this.serviceBuilder.getLowPriorityExecutor());\n         this.server.startListening();\n         log.info(\"Started Pravega Service\");\n \n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\ndeleted file mode 100644\nindex 3f7d794c7..000000000\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ /dev/null\n", "chunk": "@@ -1,238 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.test.integration.utils;\n-\n-import com.google.common.base.Preconditions;\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.EventStreamClientFactory;\n-import io.pravega.client.admin.ReaderGroupManager;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.control.impl.Controller;\n-import io.pravega.client.control.impl.ControllerImpl;\n-import io.pravega.client.control.impl.ControllerImplConfig;\n-import io.pravega.client.stream.EventStreamReader;\n-import io.pravega.client.stream.EventStreamWriter;\n-import io.pravega.client.stream.EventWriterConfig;\n-import io.pravega.client.stream.ReaderConfig;\n-import io.pravega.client.stream.ReaderGroupConfig;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.Stream;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.ClientFactoryImpl;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.common.concurrent.ExecutorServiceHelpers;\n-import io.pravega.controller.util.Config;\n-import io.pravega.segmentstore.contracts.StreamSegmentStore;\n-import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n-import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n-import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n-import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n-import io.pravega.segmentstore.server.store.ServiceBuilder;\n-import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import io.pravega.test.common.TestingServerStarter;\n-import io.pravega.test.integration.demo.ControllerWrapper;\n-import lombok.Cleanup;\n-import lombok.Getter;\n-import lombok.Setter;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.curator.test.TestingServer;\n-\n-import javax.annotation.concurrent.NotThreadSafe;\n-import java.net.URI;\n-import java.util.UUID;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n-/**\n- * Utility functions for creating the test setup.\n- */\n-@Slf4j\n-@NotThreadSafe\n-public final class SecureSetupUtils implements AutoCloseable {\n-\n-    // The different services.\n-    @Getter\n-    private final ScheduledExecutorService executor;\n-    @Getter\n-    private final Controller controller;\n-    @Getter\n-    private final EventStreamClientFactory clientFactory;\n-    private final ControllerWrapper controllerWrapper;\n-    private final PravegaConnectionListener server;\n-    @Getter\n-    private final TestingServer zkTestServer;\n-    private final ServiceBuilder serviceBuilder;\n-\n-    @Getter\n-    private final boolean authEnabled;\n-\n-    // Manage the state of the class.\n-    private final AtomicBoolean started = new AtomicBoolean(false);\n-\n-    // The test Scope name.\n-    @Getter\n-    private final String scope = \"scope\";\n-    private final int controllerRPCPort = TestUtils.getAvailableListenPort();\n-    private final int controllerRESTPort = TestUtils.getAvailableListenPort();\n-    @Getter\n-    private final int servicePort = TestUtils.getAvailableListenPort();\n-    private final ClientConfig clientConfig;\n-\n-    public ClientConfig generateValidClientConfig() {\n-        ClientConfig.ClientConfigBuilder clientConfigBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(\"tcp://localhost:\" + controllerRPCPort));\n-        if (this.authEnabled) {\n-            clientConfigBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        return clientConfigBuilder.build();\n-    }\n-\n-    public SecureSetupUtils(boolean authEnabled) throws Exception {\n-        this.authEnabled = authEnabled;\n-        this.clientConfig = generateValidClientConfig();\n-        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(2, \"Controller pool\");\n-        this.controller = new ControllerImpl(ControllerImplConfig.builder().clientConfig(clientConfig).build(),\n-                executor);\n-        this.clientFactory = new ClientFactoryImpl(scope, controller, clientConfig);\n-        this.zkTestServer = new TestingServerStarter().start();\n-        this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n-        StreamSegmentStore store = this.serviceBuilder.createStreamSegmentService();\n-        this.server = new PravegaConnectionListener(false, servicePort, store, this.serviceBuilder.createTableStoreService(),\n-                this.serviceBuilder.getLowPriorityExecutor());\n-        this.controllerWrapper = new ControllerWrapper(\n-                this.zkTestServer.getConnectString(), false, true, controllerRPCPort, \"localhost\", servicePort,\n-                Config.HOST_STORE_CONTAINER_COUNT, controllerRESTPort, this.authEnabled,\n-                \"../\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_PATH, \"secret\", 600);\n-    }\n-\n-    /**\n-     * Start all pravega related services required for the test deployment.\n-     *\n-     * @throws Exception on any errors.\n-     */\n-    public void startAllServices() throws Exception {\n-        startAllServices(null);\n-    }\n-\n-    /**\n-     * Start all pravega related services required for the test deployment.\n-     *\n-     * @param numThreads the number of threads for the internal client threadpool.\n-     * @throws Exception on any errors.\n-     */\n-    public void startAllServices(Integer numThreads) throws Exception {\n-        if (!this.started.compareAndSet(false, true)) {\n-            log.warn(\"Services already started, not attempting to start again\");\n-            return;\n-        }\n-\n-        // Start zookeeper.\n-        this.zkTestServer.start();\n-        this.serviceBuilder.initialize();\n-        this.server.startListening();\n-        log.info(\"Started Pravega Service\");\n-\n-        // Start Controller.\n-        this.controllerWrapper.awaitRunning();\n-        this.controllerWrapper.getController().createScope(scope).get();\n-        log.info(\"Initialized Pravega Controller\");\n-    }\n-\n-    /**\n-     * Stop the pravega cluster and release all resources.\n-     *\n-     * @throws Exception on any errors.\n-     */\n-    @Override\n-    public void close() throws Exception {\n-        if (!this.started.compareAndSet(true, false)) {\n-            log.warn(\"Services not yet started or already stopped, not attempting to stop\");\n-            return;\n-        }\n-\n-        this.controllerWrapper.close();\n-        this.server.close();\n-        this.zkTestServer.close();\n-        this.serviceBuilder.close();\n-        this.clientFactory.close();\n-        this.controller.close();\n-        ExecutorServiceHelpers.shutdown(executor);\n-    }\n-\n-    /**\n-     * Create the test stream.\n-     *\n-     * @param streamName     Name of the test stream.\n-     * @param numSegments    Number of segments to be created for this stream.\n-     *\n-     */\n-    public void createTestStream(final String streamName, final int numSegments) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-        Preconditions.checkArgument(numSegments > 0);\n-\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        streamManager.createScope(scope);\n-        streamManager.createStream(scope, streamName,\n-                StreamConfiguration.builder()\n-                        .scalingPolicy(ScalingPolicy.fixed(numSegments))\n-                        .build());\n-        log.info(\"Created stream: \" + streamName);\n-    }\n-\n-    /**\n-     * Create a stream writer for writing Integer events.\n-     *\n-     * @param streamName    Name of the test stream.\n-     *\n-     * @return Stream writer instance.\n-     */\n-    public EventStreamWriter<Integer> getIntegerWriter(final String streamName) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-\n-        return clientFactory.createEventWriter(streamName, new IntegerSerializer(),\n-                EventWriterConfig.builder().build());\n-    }\n-\n-    /**\n-     * Create a stream reader for reading Integer events.\n-     *\n-     * @param streamName    Name of the test stream.\n-     *\n-     * @return Stream reader instance.\n-     */\n-    public EventStreamReader<Integer> getIntegerReader(final String streamName) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-\n-        ReaderGroupManager readerGroupManager = ReaderGroupManager.withScope(scope, clientConfig);\n-        final String readerGroup = \"testReaderGroup\" + scope + streamName;\n-        readerGroupManager.createReaderGroup(\n-                readerGroup,\n-                ReaderGroupConfig.builder().stream(Stream.of(scope, streamName)).build());\n-\n-        final String readerGroupId = UUID.randomUUID().toString();\n-        return clientFactory.createReader(readerGroupId, readerGroup, new IntegerSerializer(),\n-                ReaderConfig.builder().build());\n-    }\n-\n-    public URI getControllerUri() {\n-        return URI.create(clientConfig.getControllerURI().toString());\n-    }\n-\n-    public URI getControllerRestUri() {\n-        return URI.create(\"localhost:\" + controllerRESTPort);\n-    }\n-}\n", "next_change": null}]}}]}}, {"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\nindex 78051a46a..8946143cf 100644\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n", "chunk": "@@ -139,10 +144,6 @@ public final class SecureSetupUtils implements AutoCloseable {\n         log.info(\"Started Pravega Service\");\n \n         // Start Controller.\n-        this.controllerWrapper = new ControllerWrapper(\n-                this.zkTestServer.getConnectString(), false, true, controllerRPCPort, \"localhost\", servicePort,\n-                Config.HOST_STORE_CONTAINER_COUNT, controllerRESTPort, this.authEnabled,\n-                \"../\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_PATH, \"secret\", 600);\n         this.controllerWrapper.awaitRunning();\n         this.controllerWrapper.getController().createScope(scope).get();\n         log.info(\"Initialized Pravega Controller\");\n", "next_change": {"commit": "fecaac6f6c54c42f3742720340066bdb1894d39b", "changed_code": [{"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\nindex 8946143cf..3f7d794c7 100644\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n", "chunk": "@@ -137,9 +139,6 @@ public final class SecureSetupUtils implements AutoCloseable {\n         // Start zookeeper.\n         this.zkTestServer.start();\n         this.serviceBuilder.initialize();\n-        StreamSegmentStore store = this.serviceBuilder.createStreamSegmentService();\n-        this.server = new PravegaConnectionListener(false, servicePort, store, this.serviceBuilder.createTableStoreService(),\n-                this.serviceBuilder.getLowPriorityExecutor());\n         this.server.startListening();\n         log.info(\"Started Pravega Service\");\n \n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\ndeleted file mode 100644\nindex 3f7d794c7..000000000\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ /dev/null\n", "chunk": "@@ -1,238 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.test.integration.utils;\n-\n-import com.google.common.base.Preconditions;\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.EventStreamClientFactory;\n-import io.pravega.client.admin.ReaderGroupManager;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.control.impl.Controller;\n-import io.pravega.client.control.impl.ControllerImpl;\n-import io.pravega.client.control.impl.ControllerImplConfig;\n-import io.pravega.client.stream.EventStreamReader;\n-import io.pravega.client.stream.EventStreamWriter;\n-import io.pravega.client.stream.EventWriterConfig;\n-import io.pravega.client.stream.ReaderConfig;\n-import io.pravega.client.stream.ReaderGroupConfig;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.Stream;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.ClientFactoryImpl;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.common.concurrent.ExecutorServiceHelpers;\n-import io.pravega.controller.util.Config;\n-import io.pravega.segmentstore.contracts.StreamSegmentStore;\n-import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n-import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n-import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n-import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n-import io.pravega.segmentstore.server.store.ServiceBuilder;\n-import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import io.pravega.test.common.TestingServerStarter;\n-import io.pravega.test.integration.demo.ControllerWrapper;\n-import lombok.Cleanup;\n-import lombok.Getter;\n-import lombok.Setter;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.curator.test.TestingServer;\n-\n-import javax.annotation.concurrent.NotThreadSafe;\n-import java.net.URI;\n-import java.util.UUID;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n-/**\n- * Utility functions for creating the test setup.\n- */\n-@Slf4j\n-@NotThreadSafe\n-public final class SecureSetupUtils implements AutoCloseable {\n-\n-    // The different services.\n-    @Getter\n-    private final ScheduledExecutorService executor;\n-    @Getter\n-    private final Controller controller;\n-    @Getter\n-    private final EventStreamClientFactory clientFactory;\n-    private final ControllerWrapper controllerWrapper;\n-    private final PravegaConnectionListener server;\n-    @Getter\n-    private final TestingServer zkTestServer;\n-    private final ServiceBuilder serviceBuilder;\n-\n-    @Getter\n-    private final boolean authEnabled;\n-\n-    // Manage the state of the class.\n-    private final AtomicBoolean started = new AtomicBoolean(false);\n-\n-    // The test Scope name.\n-    @Getter\n-    private final String scope = \"scope\";\n-    private final int controllerRPCPort = TestUtils.getAvailableListenPort();\n-    private final int controllerRESTPort = TestUtils.getAvailableListenPort();\n-    @Getter\n-    private final int servicePort = TestUtils.getAvailableListenPort();\n-    private final ClientConfig clientConfig;\n-\n-    public ClientConfig generateValidClientConfig() {\n-        ClientConfig.ClientConfigBuilder clientConfigBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(\"tcp://localhost:\" + controllerRPCPort));\n-        if (this.authEnabled) {\n-            clientConfigBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        return clientConfigBuilder.build();\n-    }\n-\n-    public SecureSetupUtils(boolean authEnabled) throws Exception {\n-        this.authEnabled = authEnabled;\n-        this.clientConfig = generateValidClientConfig();\n-        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(2, \"Controller pool\");\n-        this.controller = new ControllerImpl(ControllerImplConfig.builder().clientConfig(clientConfig).build(),\n-                executor);\n-        this.clientFactory = new ClientFactoryImpl(scope, controller, clientConfig);\n-        this.zkTestServer = new TestingServerStarter().start();\n-        this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n-        StreamSegmentStore store = this.serviceBuilder.createStreamSegmentService();\n-        this.server = new PravegaConnectionListener(false, servicePort, store, this.serviceBuilder.createTableStoreService(),\n-                this.serviceBuilder.getLowPriorityExecutor());\n-        this.controllerWrapper = new ControllerWrapper(\n-                this.zkTestServer.getConnectString(), false, true, controllerRPCPort, \"localhost\", servicePort,\n-                Config.HOST_STORE_CONTAINER_COUNT, controllerRESTPort, this.authEnabled,\n-                \"../\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_PATH, \"secret\", 600);\n-    }\n-\n-    /**\n-     * Start all pravega related services required for the test deployment.\n-     *\n-     * @throws Exception on any errors.\n-     */\n-    public void startAllServices() throws Exception {\n-        startAllServices(null);\n-    }\n-\n-    /**\n-     * Start all pravega related services required for the test deployment.\n-     *\n-     * @param numThreads the number of threads for the internal client threadpool.\n-     * @throws Exception on any errors.\n-     */\n-    public void startAllServices(Integer numThreads) throws Exception {\n-        if (!this.started.compareAndSet(false, true)) {\n-            log.warn(\"Services already started, not attempting to start again\");\n-            return;\n-        }\n-\n-        // Start zookeeper.\n-        this.zkTestServer.start();\n-        this.serviceBuilder.initialize();\n-        this.server.startListening();\n-        log.info(\"Started Pravega Service\");\n-\n-        // Start Controller.\n-        this.controllerWrapper.awaitRunning();\n-        this.controllerWrapper.getController().createScope(scope).get();\n-        log.info(\"Initialized Pravega Controller\");\n-    }\n-\n-    /**\n-     * Stop the pravega cluster and release all resources.\n-     *\n-     * @throws Exception on any errors.\n-     */\n-    @Override\n-    public void close() throws Exception {\n-        if (!this.started.compareAndSet(true, false)) {\n-            log.warn(\"Services not yet started or already stopped, not attempting to stop\");\n-            return;\n-        }\n-\n-        this.controllerWrapper.close();\n-        this.server.close();\n-        this.zkTestServer.close();\n-        this.serviceBuilder.close();\n-        this.clientFactory.close();\n-        this.controller.close();\n-        ExecutorServiceHelpers.shutdown(executor);\n-    }\n-\n-    /**\n-     * Create the test stream.\n-     *\n-     * @param streamName     Name of the test stream.\n-     * @param numSegments    Number of segments to be created for this stream.\n-     *\n-     */\n-    public void createTestStream(final String streamName, final int numSegments) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-        Preconditions.checkArgument(numSegments > 0);\n-\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        streamManager.createScope(scope);\n-        streamManager.createStream(scope, streamName,\n-                StreamConfiguration.builder()\n-                        .scalingPolicy(ScalingPolicy.fixed(numSegments))\n-                        .build());\n-        log.info(\"Created stream: \" + streamName);\n-    }\n-\n-    /**\n-     * Create a stream writer for writing Integer events.\n-     *\n-     * @param streamName    Name of the test stream.\n-     *\n-     * @return Stream writer instance.\n-     */\n-    public EventStreamWriter<Integer> getIntegerWriter(final String streamName) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-\n-        return clientFactory.createEventWriter(streamName, new IntegerSerializer(),\n-                EventWriterConfig.builder().build());\n-    }\n-\n-    /**\n-     * Create a stream reader for reading Integer events.\n-     *\n-     * @param streamName    Name of the test stream.\n-     *\n-     * @return Stream reader instance.\n-     */\n-    public EventStreamReader<Integer> getIntegerReader(final String streamName) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-\n-        ReaderGroupManager readerGroupManager = ReaderGroupManager.withScope(scope, clientConfig);\n-        final String readerGroup = \"testReaderGroup\" + scope + streamName;\n-        readerGroupManager.createReaderGroup(\n-                readerGroup,\n-                ReaderGroupConfig.builder().stream(Stream.of(scope, streamName)).build());\n-\n-        final String readerGroupId = UUID.randomUUID().toString();\n-        return clientFactory.createReader(readerGroupId, readerGroup, new IntegerSerializer(),\n-                ReaderConfig.builder().build());\n-    }\n-\n-    public URI getControllerUri() {\n-        return URI.create(clientConfig.getControllerURI().toString());\n-    }\n-\n-    public URI getControllerRestUri() {\n-        return URI.create(\"localhost:\" + controllerRESTPort);\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}, {"oid": "875c102dbb9cb9baea6c7d8d048701881a286fce", "url": "https://github.com/pravega/pravega/commit/875c102dbb9cb9baea6c7d8d048701881a286fce", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-11-03T14:03:33Z", "type": "commit"}, {"oid": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "url": "https://github.com/pravega/pravega/commit/d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "message": "Addressing review comments\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-04T06:30:02Z", "type": "commit"}, {"oid": "d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "url": "https://github.com/pravega/pravega/commit/d7b9bf29f0f9dc103b46d87cf6c13fa1c2627bfa", "message": "Addressing review comments\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-04T06:30:02Z", "type": "forcePushed"}, {"oid": "1bc054938cddacae143f99ff4304be09819da0b8", "url": "https://github.com/pravega/pravega/commit/1bc054938cddacae143f99ff4304be09819da0b8", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-11-09T05:52:43Z", "type": "commit"}, {"oid": "a1984f8f1f9e618e89b63ebb0fc4005d2301f30e", "url": "https://github.com/pravega/pravega/commit/a1984f8f1f9e618e89b63ebb0fc4005d2301f30e", "message": "Tweaked tests, following comments\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-09T13:30:31Z", "type": "commit"}, {"oid": "e330f208f2318ab2851e851bcc6f209d23567367", "url": "https://github.com/pravega/pravega/commit/e330f208f2318ab2851e851bcc6f209d23567367", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-11-17T11:04:21Z", "type": "commit"}, {"oid": "255984479ccaf137ea3f87cc7ae765ed291f7169", "url": "https://github.com/pravega/pravega/commit/255984479ccaf137ea3f87cc7ae765ed291f7169", "message": "Made changes to TLS and secure tests for admin and user\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-18T05:31:54Z", "type": "commit"}, {"oid": "9b5020ed6bdad79fd9a0d3e3ad938309d39be385", "url": "https://github.com/pravega/pravega/commit/9b5020ed6bdad79fd9a0d3e3ad938309d39be385", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-11-24T06:39:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY0NzQ0Nw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529647447", "bodyText": "Do not make these static. Keeping state (available ports is a form of state) in static variables prevents these tests from being run in parallel.", "author": "andreipaduroiu", "createdAt": "2020-11-24T15:36:54Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();", "originalCommit": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODU5OA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529798598", "bodyText": "Made these non static.", "author": "anirudhkovuru", "createdAt": "2020-11-24T18:41:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY0NzQ0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1c42424d927ca524e53ad0291cb6958c8122f273", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 713a57a36..390b71056 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -26,11 +26,6 @@ import java.util.concurrent.atomic.AtomicReference;\n \n public abstract class AbstractTlsAdminCommandTest {\n \n-    // Security related flags and instantiate local pravega server.\n-    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n-\n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n", "next_change": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 390b71056..d9bdc1324 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -9,21 +9,37 @@\n  */\n package io.pravega.cli.admin;\n \n+import io.pravega.cli.admin.controller.ControllerDescribeStreamCommand;\n+import io.pravega.cli.admin.controller.ControllerListReaderGroupsInScopeCommand;\n+import io.pravega.cli.admin.controller.ControllerListScopesCommand;\n+import io.pravega.cli.admin.controller.ControllerListStreamsInScopeCommand;\n import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n import io.pravega.client.stream.impl.DefaultCredentials;\n import io.pravega.local.LocalPravegaEmulator;\n import io.pravega.test.common.SecurityConfigDefaults;\n import io.pravega.test.common.TestUtils;\n+import lombok.Cleanup;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n+import org.junit.Test;\n import org.junit.rules.Timeout;\n \n import java.net.URI;\n import java.util.Properties;\n+import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n public abstract class AbstractTlsAdminCommandTest {\n \n     @Rule\n", "next_change": {"commit": "25ad699eeda86b64d09879c28aacd16e3e79a03a", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex d9bdc1324..549fcae60 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -9,56 +9,43 @@\n  */\n package io.pravega.cli.admin;\n \n-import io.pravega.cli.admin.controller.ControllerDescribeStreamCommand;\n-import io.pravega.cli.admin.controller.ControllerListReaderGroupsInScopeCommand;\n-import io.pravega.cli.admin.controller.ControllerListScopesCommand;\n-import io.pravega.cli.admin.controller.ControllerListStreamsInScopeCommand;\n import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.ReaderGroupManager;\n import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ReaderGroupConfig;\n import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.Stream;\n import io.pravega.client.stream.StreamConfiguration;\n import io.pravega.client.stream.impl.DefaultCredentials;\n import io.pravega.local.LocalPravegaEmulator;\n import io.pravega.test.common.SecurityConfigDefaults;\n import io.pravega.test.common.TestUtils;\n import lombok.Cleanup;\n-import org.junit.After;\n-import org.junit.Before;\n+import lombok.SneakyThrows;\n+import lombok.val;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Rule;\n-import org.junit.Test;\n import org.junit.rules.Timeout;\n \n import java.net.URI;\n-import java.util.Properties;\n-import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n+import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n public abstract class AbstractTlsAdminCommandTest {\n \n+    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n-    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    public void setUp() throws Exception {\n-\n-        // Create the secure pravega server to test commands against.\n+    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n+        final int controllerPort = TestUtils.getAvailableListenPort();\n+        final int segmentStorePort = TestUtils.getAvailableListenPort();\n+        final int restServerPort = TestUtils.getAvailableListenPort();\n+        // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n                 .segmentStorePort(segmentStorePort)\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 549fcae60..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,134 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.Cleanup;\n-import lombok.SneakyThrows;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n-import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n-        final int controllerPort = TestUtils.getAvailableListenPort();\n-        final int segmentStorePort = TestUtils.getAvailableListenPort();\n-        final int restServerPort = TestUtils.getAvailableListenPort();\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(pathToConfig() + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(pathToConfig() + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(pathToConfig() + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-        LOCAL_PRAVEGA.set(emulatorBuilder.build());\n-        LOCAL_PRAVEGA.get().start();\n-        setAdminCLIProperties(\"localhost:\" + restServerPort,\n-                \"localhost:\" + controllerPort,\n-                LOCAL_PRAVEGA.get().getInProcPravegaCluster().getZkUrl(),\n-                4, authEnabled, \"secret\", tlsEnabled, STATE);\n-\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        assertTrue(\"Failed to create the stream \", isStreamCreated);\n-    }\n-\n-    @BeforeClass\n-    @SneakyThrows\n-    public static void setUp() {\n-        setUpLocalPravegaEmulator(false, true);\n-    }\n-\n-    @AfterClass\n-    @SneakyThrows\n-    public static void tearDown() {\n-        val localPravega = LOCAL_PRAVEGA.get();\n-        if (LOCAL_PRAVEGA.get() != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected static ClientConfig prepareValidClientConfig(boolean authEnabled, boolean tlsEnabled) {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(LOCAL_PRAVEGA.get().getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(pathToConfig() + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}, {"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 390b71056..d9bdc1324 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -34,7 +50,7 @@ public abstract class AbstractTlsAdminCommandTest {\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n \n-    // Security related flags and instantiate local pravega server.\n+    // Security related flags and instantiate local Pravega server.\n     private final Integer controllerPort = TestUtils.getAvailableListenPort();\n     private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n", "next_change": {"commit": "d10a1a235e6a28a9fc99e05a842ef07c18680af6", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex d9bdc1324..6c425221c 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -58,7 +58,7 @@ public abstract class AbstractTlsAdminCommandTest {\n     @Before\n     public void setUp() throws Exception {\n \n-        // Create the secure pravega server to test commands against.\n+        // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n                 .segmentStorePort(segmentStorePort)\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 6c425221c..4b045d90b 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -56,7 +58,8 @@ public abstract class AbstractTlsAdminCommandTest {\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n \n     @Before\n-    public void setUp() throws Exception {\n+    @SneakyThrows\n+    public void setUp() {\n \n         // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n", "next_change": {"commit": "25ad699eeda86b64d09879c28aacd16e3e79a03a", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 4b045d90b..549fcae60 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -26,41 +19,32 @@ import io.pravega.test.common.SecurityConfigDefaults;\n import io.pravega.test.common.TestUtils;\n import lombok.Cleanup;\n import lombok.SneakyThrows;\n-import org.junit.After;\n-import org.junit.Before;\n+import lombok.val;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Rule;\n-import org.junit.Test;\n import org.junit.rules.Timeout;\n \n import java.net.URI;\n-import java.util.Properties;\n-import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n+import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n public abstract class AbstractTlsAdminCommandTest {\n \n+    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n-    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-    private final String location = \"../../config/\";\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    @SneakyThrows\n-    public void setUp() {\n-\n+    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n+        final int controllerPort = TestUtils.getAvailableListenPort();\n+        final int segmentStorePort = TestUtils.getAvailableListenPort();\n+        final int restServerPort = TestUtils.getAvailableListenPort();\n         // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 549fcae60..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,134 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.Cleanup;\n-import lombok.SneakyThrows;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n-import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n-        final int controllerPort = TestUtils.getAvailableListenPort();\n-        final int segmentStorePort = TestUtils.getAvailableListenPort();\n-        final int restServerPort = TestUtils.getAvailableListenPort();\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(pathToConfig() + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(pathToConfig() + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(pathToConfig() + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-        LOCAL_PRAVEGA.set(emulatorBuilder.build());\n-        LOCAL_PRAVEGA.get().start();\n-        setAdminCLIProperties(\"localhost:\" + restServerPort,\n-                \"localhost:\" + controllerPort,\n-                LOCAL_PRAVEGA.get().getInProcPravegaCluster().getZkUrl(),\n-                4, authEnabled, \"secret\", tlsEnabled, STATE);\n-\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        assertTrue(\"Failed to create the stream \", isStreamCreated);\n-    }\n-\n-    @BeforeClass\n-    @SneakyThrows\n-    public static void setUp() {\n-        setUpLocalPravegaEmulator(false, true);\n-    }\n-\n-    @AfterClass\n-    @SneakyThrows\n-    public static void tearDown() {\n-        val localPravega = LOCAL_PRAVEGA.get();\n-        if (LOCAL_PRAVEGA.get() != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected static ClientConfig prepareValidClientConfig(boolean authEnabled, boolean tlsEnabled) {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(LOCAL_PRAVEGA.get().getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(pathToConfig() + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1MTkzOA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529651938", "bodyText": "Same here. Do not make this thing static.", "author": "andreipaduroiu", "createdAt": "2020-11-24T15:40:03Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java", "diffHunk": "@@ -22,28 +23,34 @@\n public abstract class AbstractAdminCommandTest {\n \n     // Setup utility.\n-    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+    protected static final SecureSetupUtils SETUP_UTILS = new SecureSetupUtils();", "originalCommit": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODU3Ng==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529798576", "bodyText": "Made it non static.", "author": "anirudhkovuru", "createdAt": "2020-11-24T18:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1MTkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "1c42424d927ca524e53ad0291cb6958c8122f273", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\nindex 9bbe53a99..92abd28bb 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\n", "chunk": "@@ -22,24 +22,22 @@ import java.util.concurrent.atomic.AtomicReference;\n \n public abstract class AbstractAdminCommandTest {\n \n-    // Setup utility.\n-    protected static final SecureSetupUtils SETUP_UTILS = new SecureSetupUtils();\n-\n     @Rule\n     public final Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);\n-\n+    // Setup utility.\n+    protected final SecureSetupUtils setupUtils = new SecureSetupUtils();\n     protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n \n     @Before\n     public void setUp() throws Exception {\n-        SETUP_UTILS.startAllServices();\n+        setupUtils.startAllServices();\n         state.set(new AdminCommandState());\n         Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.controller.rest.uri\", SETUP_UTILS.getControllerRestUri().toString());\n-        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", SETUP_UTILS.getControllerUri().toString());\n-        pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", SETUP_UTILS.getZkTestServer().getConnectString());\n+        pravegaProperties.setProperty(\"cli.controller.rest.uri\", setupUtils.getControllerRestUri().toString());\n+        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", setupUtils.getControllerUri().toString());\n+        pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", setupUtils.getZkTestServer().getConnectString());\n         pravegaProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(SETUP_UTILS.isAuthEnabled()));\n+        pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(setupUtils.isAuthEnabled()));\n         pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n         pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n         pravegaProperties.setProperty(\"cli.security.tls.enable\", \"false\");\n", "next_change": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\nindex 92abd28bb..2f02f5b42 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\n", "chunk": "@@ -40,6 +42,7 @@ public abstract class AbstractAdminCommandTest {\n         pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(setupUtils.isAuthEnabled()));\n         pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n         pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n+        pravegaProperties.setProperty(\"cli.security.auth.token.signingKey\", \"secret\");\n         pravegaProperties.setProperty(\"cli.security.tls.enable\", \"false\");\n         pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_PATH);\n         state.get().getConfigBuilder().include(pravegaProperties);\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\nindex 2f02f5b42..38ce774ac 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\n", "chunk": "@@ -49,7 +51,8 @@ public abstract class AbstractAdminCommandTest {\n     }\n \n     @After\n-    public void tearDown() throws Exception {\n+    @SneakyThrows\n+    public void tearDown() {\n         setupUtils.close();\n         state.get().close();\n     }\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\nindex 38ce774ac..b22f4aa56 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\n", "chunk": "@@ -9,51 +9,96 @@\n  */\n package io.pravega.cli.admin;\n \n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.integration.utils.SecureSetupUtils;\n-import lombok.SneakyThrows;\n-import org.junit.After;\n-import org.junit.Before;\n+import io.pravega.test.integration.demo.ClusterWrapper;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.rules.Timeout;\n \n-import java.util.Properties;\n+import java.net.URI;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.admin.utils.TestUtils.createPravegaCluster;\n+import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n+import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n public abstract class AbstractAdminCommandTest {\n \n+    protected static final AtomicReference<ClusterWrapper> CLUSTER = new AtomicReference<>();\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n     @Rule\n-    public final Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);\n-    // Setup utility.\n-    protected SecureSetupUtils setupUtils;\n-    protected boolean authEnabled = false;\n-    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n-\n-    @Before\n-    @SneakyThrows\n-    public void setUp() {\n-        setupUtils = new SecureSetupUtils(authEnabled);\n-        setupUtils.startAllServices();\n-        state.set(new AdminCommandState());\n-        Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.controller.rest.uri\", setupUtils.getControllerRestUri().toString());\n-        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", setupUtils.getControllerUri().toString());\n-        pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", setupUtils.getZkTestServer().getConnectString());\n-        pravegaProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(setupUtils.isAuthEnabled()));\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n-        pravegaProperties.setProperty(\"cli.security.auth.token.signingKey\", \"secret\");\n-        pravegaProperties.setProperty(\"cli.security.tls.enable\", \"false\");\n-        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_PATH);\n-        state.get().getConfigBuilder().include(pravegaProperties);\n+    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n+\n+    public static void setUpCluster(boolean authEnabled, boolean tlsEnabled) throws Exception {\n+        CLUSTER.set(createPravegaCluster(authEnabled, tlsEnabled));\n+        CLUSTER.get().start();\n+        setAdminCLIProperties(CLUSTER.get().controllerRestUri().replace(\"http://\", \"\").replace(\"https://\", \"\"),\n+                CLUSTER.get().controllerUri().replace(\"tcp://\", \"\").replace(\"tls://\", \"\"),\n+                CLUSTER.get().zookeeperConnectString(),\n+                CLUSTER.get().getContainerCount(),\n+                authEnabled,\n+                CLUSTER.get().getTokenSigningKeyBasis(),\n+                tlsEnabled,\n+                STATE);\n+\n+        String scope = \"testScope\";\n+        String testStream = \"testStream\";\n+        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n+\n+        // Generate the scope and stream required for testing.\n+        @Cleanup\n+        StreamManager streamManager = StreamManager.create(clientConfig);\n+        assertNotNull(streamManager);\n+\n+        boolean isScopeCreated = streamManager.createScope(scope);\n+\n+        // Check if scope created successfully.\n+        assertTrue(\"Failed to create scope\", isScopeCreated);\n+\n+        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n+                .scalingPolicy(ScalingPolicy.fixed(1))\n+                .build());\n+\n+        // Check if stream created successfully.\n+        assertTrue(\"Failed to create the stream \", isStreamCreated);\n+    }\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        setUpCluster(false, true);\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() {\n+        val cluster = CLUSTER.getAndSet(null);\n+        if (cluster != null) {\n+            cluster.close();\n+        }\n+        STATE.get().close();\n     }\n \n-    @After\n-    @SneakyThrows\n-    public void tearDown() {\n-        setupUtils.close();\n-        state.get().close();\n+    protected static ClientConfig prepareValidClientConfig(boolean authEnabled, boolean tlsEnabled) {\n+        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n+                .controllerURI(URI.create(CLUSTER.get().controllerUri()));\n+        if (authEnabled) {\n+            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n+                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n+        }\n+        if (tlsEnabled) {\n+            clientBuilder.trustStore(pathToConfig() + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n+                    .validateHostName(false);\n+        }\n+        return clientBuilder.build();\n     }\n }\n", "next_change": {"commit": "41242028f81bb61a32e819e248ce25318457998f", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\nindex b22f4aa56..6d5ea5bfe 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java\n", "chunk": "@@ -9,96 +9,41 @@\n  */\n package io.pravega.cli.admin;\n \n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.integration.demo.ClusterWrapper;\n-import lombok.Cleanup;\n-import lombok.val;\n+import io.pravega.test.integration.utils.SetupUtils;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.rules.Timeout;\n \n-import java.net.URI;\n+import java.util.Properties;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n-import static io.pravega.cli.admin.utils.TestUtils.createPravegaCluster;\n-import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n-import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n public abstract class AbstractAdminCommandTest {\n \n-    protected static final AtomicReference<ClusterWrapper> CLUSTER = new AtomicReference<>();\n+    // Setup utility.\n+    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n     protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    public static void setUpCluster(boolean authEnabled, boolean tlsEnabled) throws Exception {\n-        CLUSTER.set(createPravegaCluster(authEnabled, tlsEnabled));\n-        CLUSTER.get().start();\n-        setAdminCLIProperties(CLUSTER.get().controllerRestUri().replace(\"http://\", \"\").replace(\"https://\", \"\"),\n-                CLUSTER.get().controllerUri().replace(\"tcp://\", \"\").replace(\"tls://\", \"\"),\n-                CLUSTER.get().zookeeperConnectString(),\n-                CLUSTER.get().getContainerCount(),\n-                authEnabled,\n-                CLUSTER.get().getTokenSigningKeyBasis(),\n-                tlsEnabled,\n-                STATE);\n-\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n \n-        // Check if scope created successfully.\n-        assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        assertTrue(\"Failed to create the stream \", isStreamCreated);\n-    }\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);\n \n     @BeforeClass\n     public static void setUp() throws Exception {\n-        setUpCluster(false, true);\n+        SETUP_UTILS.startAllServices();\n+        STATE.set(new AdminCommandState());\n+        Properties pravegaProperties = new Properties();\n+        pravegaProperties.setProperty(\"cli.controller.rest.uri\", SETUP_UTILS.getControllerRestUri().toString());\n+        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", SETUP_UTILS.getControllerUri().toString());\n+        pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", SETUP_UTILS.getZkTestServer().getConnectString());\n+        pravegaProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n+        STATE.get().getConfigBuilder().include(pravegaProperties);\n     }\n \n     @AfterClass\n-    public static void tearDown() {\n-        val cluster = CLUSTER.getAndSet(null);\n-        if (cluster != null) {\n-            cluster.close();\n-        }\n+    public static void tearDown() throws Exception {\n+        SETUP_UTILS.stopAllServices();\n         STATE.get().close();\n     }\n \n-    protected static ClientConfig prepareValidClientConfig(boolean authEnabled, boolean tlsEnabled) {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(CLUSTER.get().controllerUri()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(pathToConfig() + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1NDUwNA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529654504", "bodyText": "not static", "author": "andreipaduroiu", "createdAt": "2020-11-24T15:41:47Z", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();", "originalCommit": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODU1NA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529798554", "bodyText": "same", "author": "anirudhkovuru", "createdAt": "2020-11-24T18:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1NDUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "1c42424d927ca524e53ad0291cb6958c8122f273", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex c69a79eb6..923add2ad 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -22,12 +22,6 @@ import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n public abstract class AbstractTlsUserCommandTest {\n-\n-    // Security related flags and instantiate local pravega server.\n-    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer SEGMENT_STORE_PORT = TestUtils.getAvailableListenPort();\n-    private static final Integer REST_SERVER_PORT = TestUtils.getAvailableListenPort();\n-\n      @Rule\n      public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n \n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\nindex 923add2ad..6f567cab7 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n", "chunk": "@@ -29,16 +30,18 @@ public abstract class AbstractTlsUserCommandTest {\n     protected boolean authEnabled = false;\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n+    String location = \"../../config/\";\n \n-    // Security related flags and instantiate local pravega server.\n+    // Security related flags and instantiate local Pravega server.\n     private final Integer controllerPort = TestUtils.getAvailableListenPort();\n     private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n \n     @Before\n-    public void setUp() throws Exception {\n+    @SneakyThrows\n+    public void setUp() {\n \n-        // Create the secure pravega server to test commands against.\n+        // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n                 .segmentStorePort(segmentStorePort)\n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\ndeleted file mode 100644\nindex 6f567cab7..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,97 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.SneakyThrows;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public abstract class AbstractTlsUserCommandTest {\n-     @Rule\n-     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n-\n-    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-    String location = \"../../config/\";\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    @SneakyThrows\n-    public void setUp() {\n-\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(location + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(location + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(location + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(location + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(location + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(location + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-\n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(\"localhost:\" + controllerPort.toString());\n-        interactiveConfig.setDefaultSegmentCount(4);\n-        interactiveConfig.setMaxListItems(100);\n-        interactiveConfig.setTimeoutMillis(10000);\n-        interactiveConfig.setAuthEnabled(authEnabled);\n-        interactiveConfig.setUserName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        interactiveConfig.setPassword(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        interactiveConfig.setTlsEnabled(tlsEnabled);\n-        interactiveConfig.setTruststore(location + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n-        config.set(interactiveConfig);\n-    }\n-\n-    @After\n-    @SneakyThrows\n-    public void tearDown() {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1NTMyMQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529655321", "bodyText": "not static", "author": "andreipaduroiu", "createdAt": "2020-11-24T15:42:19Z", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java", "diffHunk": "@@ -22,26 +23,32 @@\n public abstract class AbstractUserCommandTest {\n \n     // Setup utility.\n-    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n-    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+    protected static final SecureSetupUtils SETUP_UTILS = new SecureSetupUtils();", "originalCommit": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODUzNg==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529798536", "bodyText": "same", "author": "anirudhkovuru", "createdAt": "2020-11-24T18:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1NTMyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1c42424d927ca524e53ad0291cb6958c8122f273", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\nindex 6cbf92ed1..49df563b2 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n", "chunk": "@@ -22,23 +22,21 @@ import java.util.concurrent.atomic.AtomicReference;\n \n public abstract class AbstractUserCommandTest {\n \n-    // Setup utility.\n-    protected static final SecureSetupUtils SETUP_UTILS = new SecureSetupUtils();\n-\n     @Rule\n     public final Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);\n-\n+    // Setup utility.\n+    protected final SecureSetupUtils setupUtils = new SecureSetupUtils();\n     protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n \n     @Before\n     public void setUp() throws Exception {\n-        SETUP_UTILS.startAllServices();\n+        setupUtils.startAllServices();\n         InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(SETUP_UTILS.getControllerUri().toString().replace(\"tcp://\", \"\"));\n+        interactiveConfig.setControllerUri(setupUtils.getControllerUri().toString().replace(\"tcp://\", \"\"));\n         interactiveConfig.setDefaultSegmentCount(4);\n         interactiveConfig.setMaxListItems(100);\n         interactiveConfig.setTimeoutMillis(1000);\n-        interactiveConfig.setAuthEnabled(SETUP_UTILS.isAuthEnabled());\n+        interactiveConfig.setAuthEnabled(setupUtils.isAuthEnabled());\n         interactiveConfig.setUserName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n         interactiveConfig.setPassword(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n         interactiveConfig.setTlsEnabled(false);\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\nindex 49df563b2..244e71666 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n", "chunk": "@@ -45,7 +49,8 @@ public abstract class AbstractUserCommandTest {\n     }\n \n     @After\n-    public void tearDown() throws Exception {\n+    @SneakyThrows\n+    public void tearDown() {\n         setupUtils.close();\n     }\n \n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\nindex 244e71666..471a44b9c 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n", "chunk": "@@ -10,48 +10,38 @@\n package io.pravega.cli.user;\n \n import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.integration.utils.SecureSetupUtils;\n+import io.pravega.test.integration.utils.SetupUtils;\n import lombok.SneakyThrows;\n-import org.junit.After;\n-import org.junit.Before;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.rules.Timeout;\n \n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.user.TestUtils.setInteractiveConfig;\n+\n public abstract class AbstractUserCommandTest {\n \n+    // Setup utility.\n+    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+\n     @Rule\n     public final Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);\n-    // Setup utility.\n-    protected SecureSetupUtils setupUtils;\n-    protected boolean authEnabled = false;\n-    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n \n-    @Before\n+    @BeforeClass\n     @SneakyThrows\n-    public void setUp() {\n-        setupUtils = new SecureSetupUtils(authEnabled);\n-        setupUtils.startAllServices();\n-        InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(setupUtils.getControllerUri().toString().replace(\"tcp://\", \"\"));\n-        interactiveConfig.setDefaultSegmentCount(4);\n-        interactiveConfig.setMaxListItems(100);\n-        interactiveConfig.setTimeoutMillis(1000);\n-        interactiveConfig.setAuthEnabled(setupUtils.isAuthEnabled());\n-        interactiveConfig.setUserName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        interactiveConfig.setPassword(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        interactiveConfig.setTlsEnabled(false);\n-        interactiveConfig.setTruststore(\"../../config/\" + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n-        config.set(interactiveConfig);\n+    public static void setUp() {\n+        SETUP_UTILS.startAllServices();\n+        setInteractiveConfig(SETUP_UTILS.getControllerUri().toString().replace(\"tcp://\", \"\").replace(\"tls://\", \"\"),\n+                false, false, CONFIG);\n     }\n \n-    @After\n+    @AfterClass\n     @SneakyThrows\n-    public void tearDown() {\n-        setupUtils.close();\n+    public static void tearDown() {\n+        SETUP_UTILS.stopAllServices();\n     }\n-\n }\n\\ No newline at end of file\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\nindex 471a44b9c..2ea98acf0 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n", "chunk": "@@ -20,28 +20,33 @@ import org.junit.rules.Timeout;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.user.TestUtils.createPravegaCluster;\n import static io.pravega.cli.user.TestUtils.setInteractiveConfig;\n \n public abstract class AbstractUserCommandTest {\n \n-    // Setup utility.\n-    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n+    protected static final AtomicReference<ClusterWrapper> CLUSTER = new AtomicReference<>();\n     protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n-\n     @Rule\n     public final Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);\n \n+    public static void setUpCluster(boolean authEnabled, boolean tlsEnabled) {\n+        CLUSTER.set(createPravegaCluster(authEnabled, tlsEnabled));\n+        CLUSTER.get().start();\n+        setInteractiveConfig(CLUSTER.get().controllerUri().replace(\"tcp://\", \"\").replace(\"tls://\", \"\"),\n+                authEnabled, tlsEnabled, CONFIG);\n+    }\n+\n     @BeforeClass\n-    @SneakyThrows\n-    public static void setUp() {\n-        SETUP_UTILS.startAllServices();\n-        setInteractiveConfig(SETUP_UTILS.getControllerUri().toString().replace(\"tcp://\", \"\").replace(\"tls://\", \"\"),\n-                false, false, CONFIG);\n+    public static void start() {\n+        setUpCluster(false, false);\n     }\n \n     @AfterClass\n-    @SneakyThrows\n-    public static void tearDown() {\n-        SETUP_UTILS.stopAllServices();\n+    public static void stop() {\n+        val cluster = CLUSTER.getAndSet(null);\n+        if (cluster != null) {\n+            cluster.close();\n+        }\n     }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "97dfd86bceb04477d11554120eb730cbf7fe9e38", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\nindex 2ea98acf0..c271f19b4 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n", "chunk": "@@ -9,44 +9,6 @@\n  */\n package io.pravega.cli.user;\n \n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.test.integration.demo.ClusterWrapper;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.user.TestUtils.createPravegaCluster;\n-import static io.pravega.cli.user.TestUtils.setInteractiveConfig;\n-\n public abstract class AbstractUserCommandTest {\n \n-    protected static final AtomicReference<ClusterWrapper> CLUSTER = new AtomicReference<>();\n-    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);\n-\n-    public static void setUpCluster(boolean authEnabled, boolean tlsEnabled) {\n-        CLUSTER.set(createPravegaCluster(authEnabled, tlsEnabled));\n-        CLUSTER.get().start();\n-        setInteractiveConfig(CLUSTER.get().controllerUri().replace(\"tcp://\", \"\").replace(\"tls://\", \"\"),\n-                authEnabled, tlsEnabled, CONFIG);\n-    }\n-\n-    @BeforeClass\n-    public static void start() {\n-        setUpCluster(false, false);\n-    }\n-\n-    @AfterClass\n-    public static void stop() {\n-        val cluster = CLUSTER.getAndSet(null);\n-        if (cluster != null) {\n-            cluster.close();\n-        }\n-    }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "41242028f81bb61a32e819e248ce25318457998f", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\ndeleted file mode 100644\nindex c271f19b4..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,14 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-public abstract class AbstractUserCommandTest {\n-\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1ODU0NA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529658544", "bodyText": "This is the wrong way to shut down an executor. Use ExecutorServiceHelpers.shutdown(...)", "author": "andreipaduroiu", "createdAt": "2020-11-24T15:44:36Z", "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n+import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils implements AutoCloseable {\n+\n+    // The different services.\n+    @Getter\n+    private ScheduledExecutorService executor = null;\n+    @Getter\n+    private Controller controller = null;\n+    @Getter\n+    private EventStreamClientFactory clientFactory = null;\n+    private ControllerWrapper controllerWrapper = null;\n+    private PravegaConnectionListener server = null;\n+    @Getter\n+    private TestingServer zkTestServer = null;\n+    private ServiceBuilder serviceBuilder = null;\n+\n+    @Getter\n+    @Setter\n+    private boolean authEnabled = false;\n+\n+    // Manage the state of the class.\n+    private final AtomicBoolean started = new AtomicBoolean(false);\n+\n+    // The test Scope name.\n+    @Getter\n+    private final String scope = \"scope\";\n+    private final int controllerRPCPort = TestUtils.getAvailableListenPort();\n+    private final int controllerRESTPort = TestUtils.getAvailableListenPort();\n+    @Getter\n+    private final int servicePort = TestUtils.getAvailableListenPort();\n+    private ClientConfig clientConfig = null;\n+\n+    public ClientConfig generateValidClientConfig() {\n+        ClientConfig.ClientConfigBuilder clientConfigBuilder = ClientConfig.builder()\n+                .controllerURI(URI.create(\"tcp://localhost:\" + controllerRPCPort));\n+        if (this.authEnabled) {\n+            clientConfigBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n+                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n+        }\n+        return clientConfigBuilder.build();\n+    }\n+\n+    /**\n+     * Start all pravega related services required for the test deployment.\n+     *\n+     * @throws Exception on any errors.\n+     */\n+    public void startAllServices() throws Exception {\n+        startAllServices(null);\n+    }\n+\n+    /**\n+     * Start all pravega related services required for the test deployment.\n+     *\n+     * @param numThreads the number of threads for the internal client threadpool.\n+     * @throws Exception on any errors.\n+     */\n+    public void startAllServices(Integer numThreads) throws Exception {\n+        if (!this.started.compareAndSet(false, true)) {\n+            log.warn(\"Services already started, not attempting to start again\");\n+            return;\n+        }\n+        this.clientConfig = generateValidClientConfig();\n+        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(2, \"Controller pool\");\n+        this.controller = new ControllerImpl(ControllerImplConfig.builder().clientConfig(clientConfig).build(),\n+                executor);\n+        this.clientFactory = new ClientFactoryImpl(scope, controller, clientConfig);\n+\n+        // Start zookeeper.\n+        this.zkTestServer = new TestingServerStarter().start();\n+        this.zkTestServer.start();\n+\n+        // Start Pravega Service.\n+        this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n+\n+        this.serviceBuilder.initialize();\n+        StreamSegmentStore store = this.serviceBuilder.createStreamSegmentService();\n+        this.server = new PravegaConnectionListener(false, servicePort, store, this.serviceBuilder.createTableStoreService(),\n+                this.serviceBuilder.getLowPriorityExecutor());\n+        this.server.startListening();\n+        log.info(\"Started Pravega Service\");\n+\n+        // Start Controller.\n+        this.controllerWrapper = new ControllerWrapper(\n+                this.zkTestServer.getConnectString(), false, true, controllerRPCPort, \"localhost\", servicePort,\n+                Config.HOST_STORE_CONTAINER_COUNT, controllerRESTPort, this.authEnabled,\n+                \"../\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_PATH, \"secret\", 600);\n+        this.controllerWrapper.awaitRunning();\n+        this.controllerWrapper.getController().createScope(scope).get();\n+        log.info(\"Initialized Pravega Controller\");\n+    }\n+\n+    /**\n+     * Stop the pravega cluster and release all resources.\n+     *\n+     * @throws Exception on any errors.\n+     */\n+    @Override\n+    public void close() throws Exception {\n+        if (!this.started.compareAndSet(true, false)) {\n+            log.warn(\"Services not yet started or already stopped, not attempting to stop\");\n+            return;\n+        }\n+\n+        this.controllerWrapper.close();\n+        this.server.close();\n+        this.zkTestServer.close();\n+        this.serviceBuilder.close();\n+        this.clientFactory.close();\n+        this.controller.close();\n+        this.executor.shutdown();", "originalCommit": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODUyNg==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529798526", "bodyText": "Using the method mentioned above.", "author": "anirudhkovuru", "createdAt": "2020-11-24T18:41:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1ODU0NA=="}], "type": "inlineReview", "revised_code": {"commit": "1c42424d927ca524e53ad0291cb6958c8122f273", "changed_code": [{"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\nindex 78051a46a..f5803bafe 100644\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n", "chunk": "@@ -166,7 +166,7 @@ public final class SecureSetupUtils implements AutoCloseable {\n         this.serviceBuilder.close();\n         this.clientFactory.close();\n         this.controller.close();\n-        this.executor.shutdown();\n+        ExecutorServiceHelpers.shutdown(executor);\n     }\n \n     /**\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\ndeleted file mode 100644\nindex f5803bafe..000000000\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ /dev/null\n", "chunk": "@@ -1,238 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.test.integration.utils;\n-\n-import com.google.common.base.Preconditions;\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.EventStreamClientFactory;\n-import io.pravega.client.admin.ReaderGroupManager;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.control.impl.Controller;\n-import io.pravega.client.control.impl.ControllerImpl;\n-import io.pravega.client.control.impl.ControllerImplConfig;\n-import io.pravega.client.stream.EventStreamReader;\n-import io.pravega.client.stream.EventStreamWriter;\n-import io.pravega.client.stream.EventWriterConfig;\n-import io.pravega.client.stream.ReaderConfig;\n-import io.pravega.client.stream.ReaderGroupConfig;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.Stream;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.ClientFactoryImpl;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.common.concurrent.ExecutorServiceHelpers;\n-import io.pravega.controller.util.Config;\n-import io.pravega.segmentstore.contracts.StreamSegmentStore;\n-import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n-import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n-import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n-import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n-import io.pravega.segmentstore.server.store.ServiceBuilder;\n-import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import io.pravega.test.common.TestingServerStarter;\n-import io.pravega.test.integration.demo.ControllerWrapper;\n-import lombok.Cleanup;\n-import lombok.Getter;\n-import lombok.Setter;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.curator.test.TestingServer;\n-\n-import javax.annotation.concurrent.NotThreadSafe;\n-import java.net.URI;\n-import java.util.UUID;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n-/**\n- * Utility functions for creating the test setup.\n- */\n-@Slf4j\n-@NotThreadSafe\n-public final class SecureSetupUtils implements AutoCloseable {\n-\n-    // The different services.\n-    @Getter\n-    private ScheduledExecutorService executor = null;\n-    @Getter\n-    private Controller controller = null;\n-    @Getter\n-    private EventStreamClientFactory clientFactory = null;\n-    private ControllerWrapper controllerWrapper = null;\n-    private PravegaConnectionListener server = null;\n-    @Getter\n-    private TestingServer zkTestServer = null;\n-    private ServiceBuilder serviceBuilder = null;\n-\n-    @Getter\n-    @Setter\n-    private boolean authEnabled = false;\n-\n-    // Manage the state of the class.\n-    private final AtomicBoolean started = new AtomicBoolean(false);\n-\n-    // The test Scope name.\n-    @Getter\n-    private final String scope = \"scope\";\n-    private final int controllerRPCPort = TestUtils.getAvailableListenPort();\n-    private final int controllerRESTPort = TestUtils.getAvailableListenPort();\n-    @Getter\n-    private final int servicePort = TestUtils.getAvailableListenPort();\n-    private ClientConfig clientConfig = null;\n-\n-    public ClientConfig generateValidClientConfig() {\n-        ClientConfig.ClientConfigBuilder clientConfigBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(\"tcp://localhost:\" + controllerRPCPort));\n-        if (this.authEnabled) {\n-            clientConfigBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        return clientConfigBuilder.build();\n-    }\n-\n-    /**\n-     * Start all pravega related services required for the test deployment.\n-     *\n-     * @throws Exception on any errors.\n-     */\n-    public void startAllServices() throws Exception {\n-        startAllServices(null);\n-    }\n-\n-    /**\n-     * Start all pravega related services required for the test deployment.\n-     *\n-     * @param numThreads the number of threads for the internal client threadpool.\n-     * @throws Exception on any errors.\n-     */\n-    public void startAllServices(Integer numThreads) throws Exception {\n-        if (!this.started.compareAndSet(false, true)) {\n-            log.warn(\"Services already started, not attempting to start again\");\n-            return;\n-        }\n-        this.clientConfig = generateValidClientConfig();\n-        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(2, \"Controller pool\");\n-        this.controller = new ControllerImpl(ControllerImplConfig.builder().clientConfig(clientConfig).build(),\n-                executor);\n-        this.clientFactory = new ClientFactoryImpl(scope, controller, clientConfig);\n-\n-        // Start zookeeper.\n-        this.zkTestServer = new TestingServerStarter().start();\n-        this.zkTestServer.start();\n-\n-        // Start Pravega Service.\n-        this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n-\n-        this.serviceBuilder.initialize();\n-        StreamSegmentStore store = this.serviceBuilder.createStreamSegmentService();\n-        this.server = new PravegaConnectionListener(false, servicePort, store, this.serviceBuilder.createTableStoreService(),\n-                this.serviceBuilder.getLowPriorityExecutor());\n-        this.server.startListening();\n-        log.info(\"Started Pravega Service\");\n-\n-        // Start Controller.\n-        this.controllerWrapper = new ControllerWrapper(\n-                this.zkTestServer.getConnectString(), false, true, controllerRPCPort, \"localhost\", servicePort,\n-                Config.HOST_STORE_CONTAINER_COUNT, controllerRESTPort, this.authEnabled,\n-                \"../\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_PATH, \"secret\", 600);\n-        this.controllerWrapper.awaitRunning();\n-        this.controllerWrapper.getController().createScope(scope).get();\n-        log.info(\"Initialized Pravega Controller\");\n-    }\n-\n-    /**\n-     * Stop the pravega cluster and release all resources.\n-     *\n-     * @throws Exception on any errors.\n-     */\n-    @Override\n-    public void close() throws Exception {\n-        if (!this.started.compareAndSet(true, false)) {\n-            log.warn(\"Services not yet started or already stopped, not attempting to stop\");\n-            return;\n-        }\n-\n-        this.controllerWrapper.close();\n-        this.server.close();\n-        this.zkTestServer.close();\n-        this.serviceBuilder.close();\n-        this.clientFactory.close();\n-        this.controller.close();\n-        ExecutorServiceHelpers.shutdown(executor);\n-    }\n-\n-    /**\n-     * Create the test stream.\n-     *\n-     * @param streamName     Name of the test stream.\n-     * @param numSegments    Number of segments to be created for this stream.\n-     *\n-     */\n-    public void createTestStream(final String streamName, final int numSegments) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-        Preconditions.checkArgument(numSegments > 0);\n-\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        streamManager.createScope(scope);\n-        streamManager.createStream(scope, streamName,\n-                StreamConfiguration.builder()\n-                        .scalingPolicy(ScalingPolicy.fixed(numSegments))\n-                        .build());\n-        log.info(\"Created stream: \" + streamName);\n-    }\n-\n-    /**\n-     * Create a stream writer for writing Integer events.\n-     *\n-     * @param streamName    Name of the test stream.\n-     *\n-     * @return Stream writer instance.\n-     */\n-    public EventStreamWriter<Integer> getIntegerWriter(final String streamName) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-\n-        return clientFactory.createEventWriter(streamName, new IntegerSerializer(),\n-                EventWriterConfig.builder().build());\n-    }\n-\n-    /**\n-     * Create a stream reader for reading Integer events.\n-     *\n-     * @param streamName    Name of the test stream.\n-     *\n-     * @return Stream reader instance.\n-     */\n-    public EventStreamReader<Integer> getIntegerReader(final String streamName) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-\n-        ReaderGroupManager readerGroupManager = ReaderGroupManager.withScope(scope, clientConfig);\n-        final String readerGroup = \"testReaderGroup\" + scope + streamName;\n-        readerGroupManager.createReaderGroup(\n-                readerGroup,\n-                ReaderGroupConfig.builder().stream(Stream.of(scope, streamName)).build());\n-\n-        final String readerGroupId = UUID.randomUUID().toString();\n-        return clientFactory.createReader(readerGroupId, readerGroup, new IntegerSerializer(),\n-                ReaderConfig.builder().build());\n-    }\n-\n-    public URI getControllerUri() {\n-        return URI.create(clientConfig.getControllerURI().toString());\n-    }\n-\n-    public URI getControllerRestUri() {\n-        return URI.create(\"localhost:\" + controllerRESTPort);\n-    }\n-}\n", "next_change": null}]}}]}}, {"oid": "0e1a34947226571a67e0ab273fede21ca06fed4f", "url": "https://github.com/pravega/pravega/commit/0e1a34947226571a67e0ab273fede21ca06fed4f", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-11-24T15:54:47Z", "type": "commit"}, {"oid": "1c42424d927ca524e53ad0291cb6958c8122f273", "url": "https://github.com/pravega/pravega/commit/1c42424d927ca524e53ad0291cb6958c8122f273", "message": "Resolving comments\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-24T18:38:41Z", "type": "commit"}, {"oid": "1c42424d927ca524e53ad0291cb6958c8122f273", "url": "https://github.com/pravega/pravega/commit/1c42424d927ca524e53ad0291cb6958c8122f273", "message": "Resolving comments\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-24T18:38:41Z", "type": "forcePushed"}, {"oid": "ac0381247eb1f17130b45a6b5707ec34c9b4eb67", "url": "https://github.com/pravega/pravega/commit/ac0381247eb1f17130b45a6b5707ec34c9b4eb67", "message": "Added TODO for secure kvt tests\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-25T11:55:11Z", "type": "commit"}, {"oid": "6db78188c2dc556d68bb4923de89c304e0452a8c", "url": "https://github.com/pravega/pravega/commit/6db78188c2dc556d68bb4923de89c304e0452a8c", "message": "Tried making the fields of SecureSetupUtils final\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-25T13:12:18Z", "type": "commit"}, {"oid": "fecaac6f6c54c42f3742720340066bdb1894d39b", "url": "https://github.com/pravega/pravega/commit/fecaac6f6c54c42f3742720340066bdb1894d39b", "message": "Made all fields final in SecureSetupUtils\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-25T13:29:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MTA1OA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r530561058", "bodyText": "Are you going to resolve this TODO?\nWhat about the commented out code below?", "author": "andreipaduroiu", "createdAt": "2020-11-25T18:08:34Z", "path": "cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.scope.ScopeCommand;\n+import io.pravega.cli.user.stream.StreamCommand;\n+import io.pravega.shared.NameUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class SecureUserCommandsTest extends AbstractTlsUserCommandTest {\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        tlsEnabled = true;\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+\n+    @After\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    @Test\n+    public void testCommands() throws Exception {\n+        final String scope = \"SecureTestScope\";\n+        final String streamName = \"SecureTestStream\";\n+        String stream = NameUtils.getScopedStreamName(scope, streamName);\n+        final String tableName = \"SecureKvtTestTable\";\n+        final String table = NameUtils.getScopedStreamName(scope, tableName);\n+\n+        String commandResult = TestUtils.executeCommand(\"scope create \" + scope, config.get());\n+        Assert.assertTrue(\"ScopeCreateCommand failed.\", commandResult.contains(\"created successfully\"));\n+        Assert.assertNotNull(ScopeCommand.Create.descriptor());\n+\n+        // List Streams in scope when it is empty.\n+        commandResult = TestUtils.executeCommand(\"stream list \" + scope, config.get());\n+        Assert.assertFalse(\"StreamListCommand failed.\", commandResult.contains(streamName));\n+\n+        commandResult = TestUtils.executeCommand(\"stream create \" + stream, config.get());\n+        Assert.assertTrue(\"StreamCreateCommand failed.\", commandResult.contains(\"created successfully\"));\n+        Assert.assertNotNull(StreamCommand.Create.descriptor());\n+\n+        // List Streams in scope when we have one.\n+        commandResult = TestUtils.executeCommand(\"stream list \" + scope, config.get());\n+        Assert.assertTrue(\"StreamListCommand failed.\", commandResult.contains(streamName));\n+        Assert.assertNotNull(StreamCommand.List.descriptor());\n+\n+        commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" 100\", config.get());\n+        Assert.assertTrue(\"StreamAppendCommand failed.\", commandResult.contains(\"Done\"));\n+        Assert.assertNotNull(StreamCommand.Append.descriptor());\n+\n+        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" true 5\", config.get());\n+        Assert.assertTrue(\"StreamReadCommand failed.\", commandResult.contains(\"Done\"));\n+\n+        commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" key 100\", config.get());\n+        Assert.assertTrue(\"StreamAppendCommand failed.\", commandResult.contains(\"Done\"));\n+        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" 5\", config.get());\n+        Assert.assertTrue(\"StreamReadCommand failed.\", commandResult.contains(\"Done\"));\n+        Assert.assertNotNull(StreamCommand.Read.descriptor());\n+\n+        commandResult = TestUtils.executeCommand(\"stream delete \" + stream, config.get());\n+        Assert.assertTrue(\"StreamDeleteCommand failed.\", commandResult.contains(\"deleted successfully\"));\n+        Assert.assertNotNull(StreamCommand.Delete.descriptor());\n+\n+        // TODO: Test KVT commands in the secure scenario (auth+TLS).", "originalCommit": "fecaac6f6c54c42f3742720340066bdb1894d39b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MDQ2Ng==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r530590466", "bodyText": "@anirudhkovuru please, review the guidelines to add TODOs in the code: https://github.com/pravega/pravega/wiki/Contributing#todos, which requires to add a reference to the issue the TODO is related to.\n@andreipaduroiu  it looks like this test cannot work today due to a bug that ahs been found: #5374. Until the bug is fix, this test cannot work combining Auth+TLS.", "author": "RaulGracia", "createdAt": "2020-11-25T19:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MTA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMzYzMQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r530903631", "bodyText": "I've removed the commented code and mentioned only the issue.", "author": "anirudhkovuru", "createdAt": "2020-11-26T09:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MTA1OA=="}], "type": "inlineReview", "revised_code": {"commit": "fdb1bd82cec40a3d96dc0af437706b2703d63b41", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java b/cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java\nindex e11cde977..273a426a4 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java\n", "chunk": "@@ -79,57 +79,6 @@ public class SecureUserCommandsTest extends AbstractTlsUserCommandTest {\n         // Issue 5374: Updating a KeyValueTable throws an InvalidClaimException against standalone with auth and TLS enabled\n         // https://github.com/pravega/pravega/issues/5374\n \n-        // commandResult = TestUtils.executeCommand(\"kvt create \" + table, config.get());\n-        // Assert.assertTrue(\"KVTCreateCommand failed.\", commandResult.contains(\"created successfully\"));\n-        // Assert.assertNotNull(KeyValueTableCommand.Create.descriptor());\n-\n-        // commandResult = TestUtils.executeCommand(\"kvt list \" + scope, config.get());\n-        // Assert.assertTrue(\"KVTListCommand failed.\", commandResult.contains(tableName));\n-        // Assert.assertNotNull(KeyValueTableCommand.ListKVTables.descriptor());\n-\n-        // commandResult = TestUtils.executeCommand(\"kvt put \" + table + \" key-family-1 key1 value1\", config.get());\n-        // Assert.assertTrue(\"KVTPutCommand failed.\", commandResult.contains(\"updated successfully\"));\n-        // Assert.assertNotNull(KeyValueTableCommand.Put.descriptor());\n-\n-        // commandResult = TestUtils.executeCommand(\"kvt put-if \" + table + \" key-family-1 key1 0:0 value2\", config.get());\n-        // Assert.assertTrue(\"KVTPutIfCommand failed.\", commandResult.contains(\"BadKeyVersionException\"));\n-        // Assert.assertNotNull(KeyValueTableCommand.PutIf.descriptor());\n-\n-        // commandResult = TestUtils.executeCommand(\"kvt put-if-absent \" + table + \" key-family-1 key2 value1\", config.get());\n-        // Assert.assertTrue(\"KVTPutIfAbsentCommand failed.\", commandResult.contains(\"inserted successfully\"));\n-        // Assert.assertNotNull(KeyValueTableCommand.PutIfAbsent.descriptor());\n-\n-        // commandResult = TestUtils.executeCommand(\"kvt put-all \" + table + \" key-family-1 {[[key3, value2]]}\", config.get());\n-        // Assert.assertTrue(\"KVTPutAllCommand failed.\", commandResult.contains(\"Updated\"));\n-        // Assert.assertNotNull(KeyValueTableCommand.PutAll.descriptor());\n-\n-        // commandResult = TestUtils.executeCommand(\"kvt put-range \" + table + \" key-family-1 1 2\", config.get());\n-        // Assert.assertTrue(\"KVTPutRangeCommand failed.\", commandResult.contains(\"Bulk-updated\"));\n-        // Assert.assertNotNull(KeyValueTableCommand.PutRange.descriptor());\n-\n-        // Exercise list commands.\n-        // commandResult = TestUtils.executeCommand(\"kvt list-keys \" + table + \" key-family-1\", config.get());\n-        // Assert.assertTrue(\"KVTListKeysCommand failed.\", commandResult.contains(\"key1\"));\n-        // Assert.assertNotNull(KeyValueTableCommand.ListKeys.descriptor());\n-\n-        // commandResult = TestUtils.executeCommand(\"kvt list-entries \" + table + \" key-family-1\", config.get());\n-        // Assert.assertTrue(\"KVTListEntriesCommand failed.\", commandResult.contains(\"value1\"));\n-        // Assert.assertNotNull(KeyValueTableCommand.ListEntries.descriptor());\n-\n-        // Exercise Get command.\n-        // commandResult = TestUtils.executeCommand(\"kvt get \" + table + \" key-family-1 \\\"{[key1, key2]}\\\"\", config.get());\n-        // Assert.assertTrue(\"KVTGetCommand failed.\", commandResult.contains(\"Get\"));\n-        // Assert.assertNotNull(KeyValueTableCommand.Get.descriptor());\n-\n-        // Exercise Remove commands.\n-        // commandResult = TestUtils.executeCommand(\"kvt remove \" + table + \" key-family-1 {[[key1]]}\", config.get());\n-        // Assert.assertTrue(\"KVTRemoveCommand failed.\", commandResult.contains(\"Removed\"));\n-        // Assert.assertNotNull(KeyValueTableCommand.Remove.descriptor());\n-\n-        // commandResult = TestUtils.executeCommand(\"kvt delete \" + table, config.get());\n-        // Assert.assertTrue(\"KVTDeleteCommand failed.\", commandResult.contains(\"deleted successfully\"));\n-        // Assert.assertNotNull(KeyValueTableCommand.Delete.descriptor());\n-\n         commandResult = TestUtils.executeCommand(\"scope delete \" + scope, config.get());\n         Assert.assertTrue(\"ScopeDeleteCommand failed.\", commandResult.contains(\"deleted successfully\"));\n         Assert.assertNotNull(ScopeCommand.Delete.descriptor());\n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java b/cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java\nindex 273a426a4..c7e3b5e55 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java\n", "chunk": "@@ -9,78 +9,248 @@\n  */\n package io.pravega.cli.user;\n \n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.cli.user.kvs.KeyValueTableCommand;\n import io.pravega.cli.user.scope.ScopeCommand;\n import io.pravega.cli.user.stream.StreamCommand;\n import io.pravega.shared.NameUtils;\n-import org.junit.After;\n+import io.pravega.test.integration.demo.ClusterWrapper;\n+import lombok.SneakyThrows;\n+import lombok.val;\n+import org.junit.AfterClass;\n import org.junit.Assert;\n-import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.Timeout;\n \n-public class SecureUserCommandsTest extends AbstractTlsUserCommandTest {\n-    @Before\n-    @Override\n-    public void setUp() throws Exception {\n-        tlsEnabled = true;\n-        authEnabled = true;\n-        super.setUp();\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.pravega.cli.user.TestUtils.createPravegaCluster;\n+import static io.pravega.cli.user.TestUtils.setInteractiveConfig;\n+\n+public class SecureUserCommandsTest {\n+\n+    protected static final AtomicReference<ClusterWrapper> CLUSTER = new AtomicReference<>();\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+    private static final String SCOPE = \"SecureTestScope\";\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);\n+\n+    public static void setUpCluster(boolean authEnabled, boolean tlsEnabled) {\n+        CLUSTER.set(createPravegaCluster(authEnabled, tlsEnabled));\n+        CLUSTER.get().initialize();\n+        setInteractiveConfig(CLUSTER.get().controllerUri().replace(\"tcp://\", \"\").replace(\"tls://\", \"\"),\n+                authEnabled, tlsEnabled, CONFIG);\n+        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(SCOPE), CONFIG.get());\n+        new ScopeCommand.Create(commandArgs).execute();\n     }\n \n-    @After\n-    @Override\n-    public void tearDown() throws Exception {\n-        super.tearDown();\n+    @BeforeClass\n+    @SneakyThrows\n+    public static void start() {\n+        setUpCluster(true, true);\n     }\n \n-    @Test\n-    public void testCommands() throws Exception {\n-        final String scope = \"SecureTestScope\";\n-        final String streamName = \"SecureTestStream\";\n-        String stream = NameUtils.getScopedStreamName(scope, streamName);\n-        final String tableName = \"SecureKvtTestTable\";\n-        final String table = NameUtils.getScopedStreamName(scope, tableName);\n+    @AfterClass\n+    @SneakyThrows\n+    public static void stop() {\n+        val cluster = CLUSTER.getAndSet(null);\n+        if (cluster != null) {\n+            cluster.close();\n+        }\n+    }\n \n-        String commandResult = TestUtils.executeCommand(\"scope create \" + scope, config.get());\n-        Assert.assertTrue(\"ScopeCreateCommand failed.\", commandResult.contains(\"created successfully\"));\n+    @Test(timeout = 5000)\n+    @SneakyThrows\n+    public void testCreateScope() {\n+        final String scope = \"testCreate\";\n+        String commandResult = TestUtils.executeCommand(\"scope create \" + scope, CONFIG.get());\n+        Assert.assertTrue(commandResult.contains(\"created successfully\"));\n         Assert.assertNotNull(ScopeCommand.Create.descriptor());\n+    }\n \n-        // List Streams in scope when it is empty.\n-        commandResult = TestUtils.executeCommand(\"stream list \" + scope, config.get());\n-        Assert.assertFalse(\"StreamListCommand failed.\", commandResult.contains(streamName));\n+    @Test(timeout = 5000)\n+    @SneakyThrows\n+    public void testDeleteScope() {\n+        String scopeToDelete = \"toDelete\";\n+        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(scopeToDelete), CONFIG.get());\n+        Assert.assertNotNull(commandArgs.toString());\n+        new ScopeCommand.Create(commandArgs).execute();\n+        String commandResult = TestUtils.executeCommand(\"scope delete \" + scopeToDelete, CONFIG.get());\n+        Assert.assertTrue(commandResult.contains(\"deleted successfully\"));\n+        Assert.assertNotNull(ScopeCommand.Delete.descriptor());\n+    }\n \n-        commandResult = TestUtils.executeCommand(\"stream create \" + stream, config.get());\n-        Assert.assertTrue(\"StreamCreateCommand failed.\", commandResult.contains(\"created successfully\"));\n+    @Test(timeout = 5000)\n+    @SneakyThrows\n+    public void testCreateStream() {\n+        String stream = NameUtils.getScopedStreamName(SCOPE, \"newStream\");\n+\n+        String commandResult = TestUtils.executeCommand(\"stream create \" + stream, CONFIG.get());\n+        Assert.assertTrue(commandResult.contains(\"created successfully\"));\n         Assert.assertNotNull(StreamCommand.Create.descriptor());\n+    }\n+\n+    @Test(timeout = 5000)\n+    @SneakyThrows\n+    public void testDeleteStream() {\n+        String stream = NameUtils.getScopedStreamName(SCOPE, \"deleteStream\");\n+\n+        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(stream), CONFIG.get());\n+        new StreamCommand.Create(commandArgs).execute();\n+\n+        String commandResult = TestUtils.executeCommand(\"stream delete \" + stream, CONFIG.get());\n+        Assert.assertTrue(commandResult.contains(\"deleted successfully\"));\n+        Assert.assertNotNull(StreamCommand.Delete.descriptor());\n+    }\n+\n+    @Test(timeout = 5000)\n+    @SneakyThrows\n+    public void testListStream() {\n+        String scope = \"listStreamScope\";\n+        String stream = NameUtils.getScopedStreamName(scope, \"theStream\");\n+        CommandArgs commandArgsScope = new CommandArgs(Collections.singletonList(scope), CONFIG.get());\n+        new ScopeCommand.Create(commandArgsScope).execute();\n+\n+        // List Streams in scope when it is empty.\n+        String commandResult = TestUtils.executeCommand(\"stream list \" + scope, CONFIG.get());\n+        Assert.assertFalse(commandResult.contains(\"theStream\"));\n+\n+        CommandArgs commandArgsStream = new CommandArgs(Collections.singletonList(stream), CONFIG.get());\n+        new StreamCommand.Create(commandArgsStream).execute();\n \n         // List Streams in scope when we have one.\n-        commandResult = TestUtils.executeCommand(\"stream list \" + scope, config.get());\n-        Assert.assertTrue(\"StreamListCommand failed.\", commandResult.contains(streamName));\n+        commandResult = TestUtils.executeCommand(\"stream list \" + scope, CONFIG.get());\n+        Assert.assertTrue(commandResult.contains(\"theStream\"));\n         Assert.assertNotNull(StreamCommand.List.descriptor());\n+    }\n \n-        commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" 100\", config.get());\n-        Assert.assertTrue(\"StreamAppendCommand failed.\", commandResult.contains(\"Done\"));\n+    @Test(timeout = 20000)\n+    @SneakyThrows\n+    public void testAppendAndReadStream() {\n+        String stream = NameUtils.getScopedStreamName(SCOPE, \"appendAndReadStream\");\n+\n+        CommandArgs commandArgsStream = new CommandArgs(Collections.singletonList(stream), CONFIG.get());\n+        new StreamCommand.Create(commandArgsStream).execute();\n+\n+        String commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" 100\", CONFIG.get());\n+        Assert.assertTrue(commandResult.contains(\"Done\"));\n         Assert.assertNotNull(StreamCommand.Append.descriptor());\n \n-        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" true 5\", config.get());\n-        Assert.assertTrue(\"StreamReadCommand failed.\", commandResult.contains(\"Done\"));\n+        // Need to use a timeout for readers, otherwise the test never completes.\n+        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" true 5\", CONFIG.get());\n+        Assert.assertTrue(commandResult.contains(\"Done\"));\n \n-        commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" key 100\", config.get());\n-        Assert.assertTrue(\"StreamAppendCommand failed.\", commandResult.contains(\"Done\"));\n-        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" 5\", config.get());\n-        Assert.assertTrue(\"StreamReadCommand failed.\", commandResult.contains(\"Done\"));\n+        commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" key 100\", CONFIG.get());\n+        Assert.assertTrue(commandResult.contains(\"Done\"));\n+        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" 5\", CONFIG.get());\n+        Assert.assertTrue(commandResult.contains(\"Done\"));\n         Assert.assertNotNull(StreamCommand.Read.descriptor());\n+    }\n \n-        commandResult = TestUtils.executeCommand(\"stream delete \" + stream, config.get());\n-        Assert.assertTrue(\"StreamDeleteCommand failed.\", commandResult.contains(\"deleted successfully\"));\n-        Assert.assertNotNull(StreamCommand.Delete.descriptor());\n+    @Test(timeout = 10000)\n+    @SneakyThrows\n+    public void testCreateKVT() {\n+        final String table = NameUtils.getScopedStreamName(SCOPE, \"kvt1\");\n \n-        // TODO: Test KVT commands in the secure scenario (auth+TLS).\n-        // Cannot at this point due to the following issue:\n-        // Issue 5374: Updating a KeyValueTable throws an InvalidClaimException against standalone with auth and TLS enabled\n-        // https://github.com/pravega/pravega/issues/5374\n+        String commandResult = TestUtils.executeCommand(\"kvt create \" + table, CONFIG.get());\n+        Assert.assertTrue(commandResult.contains(\"created successfully\"));\n+        Assert.assertNotNull(KeyValueTableCommand.Create.descriptor());\n+    }\n \n-        commandResult = TestUtils.executeCommand(\"scope delete \" + scope, config.get());\n-        Assert.assertTrue(\"ScopeDeleteCommand failed.\", commandResult.contains(\"deleted successfully\"));\n-        Assert.assertNotNull(ScopeCommand.Delete.descriptor());\n+    @Test(timeout = 20000)\n+    @SneakyThrows\n+    public void testDeleteKVT() {\n+        final String table = NameUtils.getScopedStreamName(SCOPE, \"kvt2\");\n+\n+        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(table), CONFIG.get());\n+        new KeyValueTableCommand.Create(commandArgs).execute();\n+\n+        String commandResult = TestUtils.executeCommand(\"kvt delete \" + table, CONFIG.get());\n+        Assert.assertTrue(commandResult.contains(\"deleted successfully\"));\n+        Assert.assertNotNull(KeyValueTableCommand.Delete.descriptor());\n+    }\n+\n+    @Test(timeout = 10000)\n+    @SneakyThrows\n+    public void testListKVT() {\n+        final String table = NameUtils.getScopedStreamName(SCOPE, \"kvt3\");\n+\n+        CommandArgs commandArgsCreate = new CommandArgs(Collections.singletonList(table), CONFIG.get());\n+        new KeyValueTableCommand.Create(commandArgsCreate).execute();\n+\n+        String commandResult = TestUtils.executeCommand(\"kvt list \" + SCOPE, CONFIG.get());\n+        Assert.assertTrue(commandResult.contains(\"kvt3\"));\n+        Assert.assertNotNull(KeyValueTableCommand.ListKVTables.descriptor());\n+    }\n+\n+    // TODO: Test KVT commands in the secure scenario (auth+TLS).\n+    // Cannot at this point due to the following issue:\n+    // Issue 5374: Updating a KeyValueTable throws an InvalidClaimException against standalone with auth and TLS enabled\n+    // https://github.com/pravega/pravega/issues/5374\n+\n+    public static class AuthEnabledUserCommandsTest extends SecureUserCommandsTest {\n+        @BeforeClass\n+        public static void start() {\n+            setUpCluster(true, false);\n+        }\n+    }\n+\n+    public static class TLSEnabledUserCommandsTest extends SecureUserCommandsTest {\n+        @BeforeClass\n+        public static void start() {\n+            setUpCluster(false, true);\n+        }\n+\n+        @Test(timeout = 60000)\n+        @SneakyThrows\n+        public void testPutAndGetKVT() {\n+            final String table = NameUtils.getScopedStreamName(SCOPE, \"kvt4\");\n+            CommandArgs commandArgs = new CommandArgs(Collections.singletonList(table), CONFIG.get());\n+            new KeyValueTableCommand.Create(commandArgs).execute();\n+\n+            // Exercise puts first.\n+            String commandResult = TestUtils.executeCommand(\"kvt put \" + table + \" key-family-1 key1 value1\", CONFIG.get());\n+            Assert.assertTrue(commandResult.contains(\"updated successfully\"));\n+            Assert.assertNotNull(KeyValueTableCommand.Put.descriptor());\n+\n+            commandResult = TestUtils.executeCommand(\"kvt put-if \" + table + \" key-family-1 key1 0:0 value2\", CONFIG.get());\n+            Assert.assertTrue(commandResult.contains(\"BadKeyVersionException\"));\n+            Assert.assertNotNull(KeyValueTableCommand.PutIf.descriptor());\n+\n+            commandResult = TestUtils.executeCommand(\"kvt put-if-absent \" + table + \" key-family-1 key2 value1\", CONFIG.get());\n+            Assert.assertTrue(commandResult.contains(\"inserted successfully\"));\n+            Assert.assertNotNull(KeyValueTableCommand.PutIfAbsent.descriptor());\n+\n+            commandResult = TestUtils.executeCommand(\"kvt put-all \" + table + \" key-family-1 {[[key3, value2]]}\", CONFIG.get());\n+            Assert.assertTrue(commandResult.contains(\"Updated\"));\n+            Assert.assertNotNull(KeyValueTableCommand.PutAll.descriptor());\n+\n+            commandResult = TestUtils.executeCommand(\"kvt put-range \" + table + \" key-family-1 1 2\", CONFIG.get());\n+            Assert.assertTrue(commandResult.contains(\"Bulk-updated\"));\n+            Assert.assertNotNull(KeyValueTableCommand.PutRange.descriptor());\n+\n+            // Exercise list commands.\n+            commandResult = TestUtils.executeCommand(\"kvt list-keys \" + table + \" key-family-1\", CONFIG.get());\n+            Assert.assertTrue(commandResult.contains(\"key1\"));\n+            Assert.assertNotNull(KeyValueTableCommand.ListKeys.descriptor());\n+\n+            commandResult = TestUtils.executeCommand(\"kvt list-entries \" + table + \" key-family-1\", CONFIG.get());\n+            Assert.assertTrue(commandResult.contains(\"value1\"));\n+            Assert.assertNotNull(KeyValueTableCommand.ListEntries.descriptor());\n+\n+            // Exercise Get command.\n+            commandResult = TestUtils.executeCommand(\"kvt get \" + table + \" key-family-1 \\\"{[key1, key2]}\\\"\", CONFIG.get());\n+            Assert.assertTrue(commandResult.contains(\"Get\"));\n+            Assert.assertNotNull(KeyValueTableCommand.Get.descriptor());\n+\n+            // Exercise Remove commands.\n+            commandResult = TestUtils.executeCommand(\"kvt remove \" + table + \" key-family-1 {[[key1]]}\", CONFIG.get());\n+            Assert.assertTrue(commandResult.contains(\"Removed\"));\n+            Assert.assertNotNull(KeyValueTableCommand.Remove.descriptor());\n+        }\n     }\n }\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java b/cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java\ndeleted file mode 100644\nindex c7e3b5e55..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java\n+++ /dev/null\n", "chunk": "@@ -1,256 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.cli.user.kvs.KeyValueTableCommand;\n-import io.pravega.cli.user.scope.ScopeCommand;\n-import io.pravega.cli.user.stream.StreamCommand;\n-import io.pravega.shared.NameUtils;\n-import io.pravega.test.integration.demo.ClusterWrapper;\n-import lombok.SneakyThrows;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.Timeout;\n-\n-import java.util.Collections;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.user.TestUtils.createPravegaCluster;\n-import static io.pravega.cli.user.TestUtils.setInteractiveConfig;\n-\n-public class SecureUserCommandsTest {\n-\n-    protected static final AtomicReference<ClusterWrapper> CLUSTER = new AtomicReference<>();\n-    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n-    private static final String SCOPE = \"SecureTestScope\";\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);\n-\n-    public static void setUpCluster(boolean authEnabled, boolean tlsEnabled) {\n-        CLUSTER.set(createPravegaCluster(authEnabled, tlsEnabled));\n-        CLUSTER.get().initialize();\n-        setInteractiveConfig(CLUSTER.get().controllerUri().replace(\"tcp://\", \"\").replace(\"tls://\", \"\"),\n-                authEnabled, tlsEnabled, CONFIG);\n-        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(SCOPE), CONFIG.get());\n-        new ScopeCommand.Create(commandArgs).execute();\n-    }\n-\n-    @BeforeClass\n-    @SneakyThrows\n-    public static void start() {\n-        setUpCluster(true, true);\n-    }\n-\n-    @AfterClass\n-    @SneakyThrows\n-    public static void stop() {\n-        val cluster = CLUSTER.getAndSet(null);\n-        if (cluster != null) {\n-            cluster.close();\n-        }\n-    }\n-\n-    @Test(timeout = 5000)\n-    @SneakyThrows\n-    public void testCreateScope() {\n-        final String scope = \"testCreate\";\n-        String commandResult = TestUtils.executeCommand(\"scope create \" + scope, CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"created successfully\"));\n-        Assert.assertNotNull(ScopeCommand.Create.descriptor());\n-    }\n-\n-    @Test(timeout = 5000)\n-    @SneakyThrows\n-    public void testDeleteScope() {\n-        String scopeToDelete = \"toDelete\";\n-        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(scopeToDelete), CONFIG.get());\n-        Assert.assertNotNull(commandArgs.toString());\n-        new ScopeCommand.Create(commandArgs).execute();\n-        String commandResult = TestUtils.executeCommand(\"scope delete \" + scopeToDelete, CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"deleted successfully\"));\n-        Assert.assertNotNull(ScopeCommand.Delete.descriptor());\n-    }\n-\n-    @Test(timeout = 5000)\n-    @SneakyThrows\n-    public void testCreateStream() {\n-        String stream = NameUtils.getScopedStreamName(SCOPE, \"newStream\");\n-\n-        String commandResult = TestUtils.executeCommand(\"stream create \" + stream, CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"created successfully\"));\n-        Assert.assertNotNull(StreamCommand.Create.descriptor());\n-    }\n-\n-    @Test(timeout = 5000)\n-    @SneakyThrows\n-    public void testDeleteStream() {\n-        String stream = NameUtils.getScopedStreamName(SCOPE, \"deleteStream\");\n-\n-        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(stream), CONFIG.get());\n-        new StreamCommand.Create(commandArgs).execute();\n-\n-        String commandResult = TestUtils.executeCommand(\"stream delete \" + stream, CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"deleted successfully\"));\n-        Assert.assertNotNull(StreamCommand.Delete.descriptor());\n-    }\n-\n-    @Test(timeout = 5000)\n-    @SneakyThrows\n-    public void testListStream() {\n-        String scope = \"listStreamScope\";\n-        String stream = NameUtils.getScopedStreamName(scope, \"theStream\");\n-        CommandArgs commandArgsScope = new CommandArgs(Collections.singletonList(scope), CONFIG.get());\n-        new ScopeCommand.Create(commandArgsScope).execute();\n-\n-        // List Streams in scope when it is empty.\n-        String commandResult = TestUtils.executeCommand(\"stream list \" + scope, CONFIG.get());\n-        Assert.assertFalse(commandResult.contains(\"theStream\"));\n-\n-        CommandArgs commandArgsStream = new CommandArgs(Collections.singletonList(stream), CONFIG.get());\n-        new StreamCommand.Create(commandArgsStream).execute();\n-\n-        // List Streams in scope when we have one.\n-        commandResult = TestUtils.executeCommand(\"stream list \" + scope, CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"theStream\"));\n-        Assert.assertNotNull(StreamCommand.List.descriptor());\n-    }\n-\n-    @Test(timeout = 20000)\n-    @SneakyThrows\n-    public void testAppendAndReadStream() {\n-        String stream = NameUtils.getScopedStreamName(SCOPE, \"appendAndReadStream\");\n-\n-        CommandArgs commandArgsStream = new CommandArgs(Collections.singletonList(stream), CONFIG.get());\n-        new StreamCommand.Create(commandArgsStream).execute();\n-\n-        String commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" 100\", CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"Done\"));\n-        Assert.assertNotNull(StreamCommand.Append.descriptor());\n-\n-        // Need to use a timeout for readers, otherwise the test never completes.\n-        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" true 5\", CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"Done\"));\n-\n-        commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" key 100\", CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"Done\"));\n-        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" 5\", CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"Done\"));\n-        Assert.assertNotNull(StreamCommand.Read.descriptor());\n-    }\n-\n-    @Test(timeout = 10000)\n-    @SneakyThrows\n-    public void testCreateKVT() {\n-        final String table = NameUtils.getScopedStreamName(SCOPE, \"kvt1\");\n-\n-        String commandResult = TestUtils.executeCommand(\"kvt create \" + table, CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"created successfully\"));\n-        Assert.assertNotNull(KeyValueTableCommand.Create.descriptor());\n-    }\n-\n-    @Test(timeout = 20000)\n-    @SneakyThrows\n-    public void testDeleteKVT() {\n-        final String table = NameUtils.getScopedStreamName(SCOPE, \"kvt2\");\n-\n-        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(table), CONFIG.get());\n-        new KeyValueTableCommand.Create(commandArgs).execute();\n-\n-        String commandResult = TestUtils.executeCommand(\"kvt delete \" + table, CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"deleted successfully\"));\n-        Assert.assertNotNull(KeyValueTableCommand.Delete.descriptor());\n-    }\n-\n-    @Test(timeout = 10000)\n-    @SneakyThrows\n-    public void testListKVT() {\n-        final String table = NameUtils.getScopedStreamName(SCOPE, \"kvt3\");\n-\n-        CommandArgs commandArgsCreate = new CommandArgs(Collections.singletonList(table), CONFIG.get());\n-        new KeyValueTableCommand.Create(commandArgsCreate).execute();\n-\n-        String commandResult = TestUtils.executeCommand(\"kvt list \" + SCOPE, CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"kvt3\"));\n-        Assert.assertNotNull(KeyValueTableCommand.ListKVTables.descriptor());\n-    }\n-\n-    // TODO: Test KVT commands in the secure scenario (auth+TLS).\n-    // Cannot at this point due to the following issue:\n-    // Issue 5374: Updating a KeyValueTable throws an InvalidClaimException against standalone with auth and TLS enabled\n-    // https://github.com/pravega/pravega/issues/5374\n-\n-    public static class AuthEnabledUserCommandsTest extends SecureUserCommandsTest {\n-        @BeforeClass\n-        public static void start() {\n-            setUpCluster(true, false);\n-        }\n-    }\n-\n-    public static class TLSEnabledUserCommandsTest extends SecureUserCommandsTest {\n-        @BeforeClass\n-        public static void start() {\n-            setUpCluster(false, true);\n-        }\n-\n-        @Test(timeout = 60000)\n-        @SneakyThrows\n-        public void testPutAndGetKVT() {\n-            final String table = NameUtils.getScopedStreamName(SCOPE, \"kvt4\");\n-            CommandArgs commandArgs = new CommandArgs(Collections.singletonList(table), CONFIG.get());\n-            new KeyValueTableCommand.Create(commandArgs).execute();\n-\n-            // Exercise puts first.\n-            String commandResult = TestUtils.executeCommand(\"kvt put \" + table + \" key-family-1 key1 value1\", CONFIG.get());\n-            Assert.assertTrue(commandResult.contains(\"updated successfully\"));\n-            Assert.assertNotNull(KeyValueTableCommand.Put.descriptor());\n-\n-            commandResult = TestUtils.executeCommand(\"kvt put-if \" + table + \" key-family-1 key1 0:0 value2\", CONFIG.get());\n-            Assert.assertTrue(commandResult.contains(\"BadKeyVersionException\"));\n-            Assert.assertNotNull(KeyValueTableCommand.PutIf.descriptor());\n-\n-            commandResult = TestUtils.executeCommand(\"kvt put-if-absent \" + table + \" key-family-1 key2 value1\", CONFIG.get());\n-            Assert.assertTrue(commandResult.contains(\"inserted successfully\"));\n-            Assert.assertNotNull(KeyValueTableCommand.PutIfAbsent.descriptor());\n-\n-            commandResult = TestUtils.executeCommand(\"kvt put-all \" + table + \" key-family-1 {[[key3, value2]]}\", CONFIG.get());\n-            Assert.assertTrue(commandResult.contains(\"Updated\"));\n-            Assert.assertNotNull(KeyValueTableCommand.PutAll.descriptor());\n-\n-            commandResult = TestUtils.executeCommand(\"kvt put-range \" + table + \" key-family-1 1 2\", CONFIG.get());\n-            Assert.assertTrue(commandResult.contains(\"Bulk-updated\"));\n-            Assert.assertNotNull(KeyValueTableCommand.PutRange.descriptor());\n-\n-            // Exercise list commands.\n-            commandResult = TestUtils.executeCommand(\"kvt list-keys \" + table + \" key-family-1\", CONFIG.get());\n-            Assert.assertTrue(commandResult.contains(\"key1\"));\n-            Assert.assertNotNull(KeyValueTableCommand.ListKeys.descriptor());\n-\n-            commandResult = TestUtils.executeCommand(\"kvt list-entries \" + table + \" key-family-1\", CONFIG.get());\n-            Assert.assertTrue(commandResult.contains(\"value1\"));\n-            Assert.assertNotNull(KeyValueTableCommand.ListEntries.descriptor());\n-\n-            // Exercise Get command.\n-            commandResult = TestUtils.executeCommand(\"kvt get \" + table + \" key-family-1 \\\"{[key1, key2]}\\\"\", CONFIG.get());\n-            Assert.assertTrue(commandResult.contains(\"Get\"));\n-            Assert.assertNotNull(KeyValueTableCommand.Get.descriptor());\n-\n-            // Exercise Remove commands.\n-            commandResult = TestUtils.executeCommand(\"kvt remove \" + table + \" key-family-1 {[[key1]]}\", CONFIG.get());\n-            Assert.assertTrue(commandResult.contains(\"Removed\"));\n-            Assert.assertNotNull(KeyValueTableCommand.Remove.descriptor());\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"oid": "fdb1bd82cec40a3d96dc0af437706b2703d63b41", "url": "https://github.com/pravega/pravega/commit/fdb1bd82cec40a3d96dc0af437706b2703d63b41", "message": "Tweaking tests to avoid out of memory error\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-26T07:18:09Z", "type": "commit"}, {"oid": "b7cdf30ceb1bb3feb09eefcd7c2aac0730fd6179", "url": "https://github.com/pravega/pravega/commit/b7cdf30ceb1bb3feb09eefcd7c2aac0730fd6179", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-11-26T10:08:53Z", "type": "commit"}, {"oid": "fc306721dddc649295fcd733a9a589f99849363e", "url": "https://github.com/pravega/pravega/commit/fc306721dddc649295fcd733a9a589f99849363e", "message": "Added to InteractiveConfigTest\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-27T10:19:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMTI1Nw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531511257", "bodyText": "Nit: please, use caps for TLS and finish comments with dot . (see https://github.com/pravega/pravega/wiki/Contributing#codestyle).", "author": "RaulGracia", "createdAt": "2020-11-27T10:24:34Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0NzE0OA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532647148", "bodyText": "done", "author": "anirudhkovuru", "createdAt": "2020-11-30T14:42:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMTI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex c042c3685..0aa468f78 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -59,21 +57,18 @@ public abstract class ControllerCommand extends AdminCommand {\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n \n         Client client;\n \n-        // If tls parameters are configured, set them in client\n-        if (getCLIControllerConfig().isTlsEnabled()) {\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n             KeyStore ks = null;\n             try {\n-                @Cleanup\n-                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n-                ks = KeyStore.getInstance(\"JKS\");\n-                ks.load(trustStore, null);\n-\n+                ks = createTrustStore(config.getTruststore());\n             } catch (KeyStoreException e) {\n                 output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n             } catch (IOException e) {\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex 0aa468f78..ac7da01ea 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -66,24 +67,21 @@ public abstract class ControllerCommand extends AdminCommand {\n \n         // If TLS parameters are configured, set them in client.\n         if (config.isTlsEnabled()) {\n-            KeyStore ks = null;\n+            SSLContext tlsContext;\n             try {\n-                ks = createTrustStore(config.getTruststore());\n-            } catch (KeyStoreException e) {\n-                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n-            } catch (IOException e) {\n-                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n-            } catch (NoSuchAlgorithmException e) {\n-                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n-            } catch (CertificateException e) {\n-                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n+                e.printStackTrace();\n+                return null;\n             }\n-\n-            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n             client = ClientBuilder.newBuilder()\n                     .withConfig(clientConfig)\n-                    .trustStore(ks)\n-                    .hostnameVerifier(controllerHostnameVerifier)\n+                    .sslContext(tlsContext)\n                     .build();\n         } else {\n             client = ClientBuilder.newClient(clientConfig);\n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex ac7da01ea..8f1c49e99 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -76,17 +76,12 @@ public abstract class ControllerCommand extends AdminCommand {\n                 tlsContext.init(null, tmf.getTrustManagers(), null);\n             } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n                 output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n-                e.printStackTrace();\n+                output(e.getMessage());\n                 return null;\n             }\n-            client = ClientBuilder.newBuilder()\n-                    .withConfig(clientConfig)\n-                    .sslContext(tlsContext)\n-                    .build();\n-        } else {\n-            client = ClientBuilder.newClient(clientConfig);\n+            builder.sslContext(tlsContext);\n         }\n-\n+        Client client = builder.build();\n         // If authorization parameters are configured, set them in the client.\n         if (config.isAuthEnabled()) {\n             HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMTQyMg==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531511422", "bodyText": "Nit: extra line might be removed.", "author": "RaulGracia", "createdAt": "2020-11-27T10:24:54Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU0NTY1Ng==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531545656", "bodyText": "Use the utility we have to do this:\n\n  \n    \n      pravega/common/src/main/java/io/pravega/common/util/CertificateUtils.java\n    \n    \n         Line 89\n      in\n      6acd317\n    \n    \n    \n    \n\n        \n          \n           public static KeyStore createTrustStore(String certFilePath) \n        \n    \n  \n\n\nThis will help us in multiple ways:\n\nAllows us to more easily move to a different format - say from JKS to the PKCS12 format that Java uses by default now.\nAllows us to add additional functionality more easily, such as supporting password-protected truststores.", "author": "ravisharda", "createdAt": "2020-11-27T11:28:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMTQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzOTg3NQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532039875", "bodyText": "Using createTrustStore now.", "author": "anirudhkovuru", "createdAt": "2020-11-28T13:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMTQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex c042c3685..0aa468f78 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -59,21 +57,18 @@ public abstract class ControllerCommand extends AdminCommand {\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n \n         Client client;\n \n-        // If tls parameters are configured, set them in client\n-        if (getCLIControllerConfig().isTlsEnabled()) {\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n             KeyStore ks = null;\n             try {\n-                @Cleanup\n-                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n-                ks = KeyStore.getInstance(\"JKS\");\n-                ks.load(trustStore, null);\n-\n+                ks = createTrustStore(config.getTruststore());\n             } catch (KeyStoreException e) {\n                 output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n             } catch (IOException e) {\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex 0aa468f78..ac7da01ea 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -66,24 +67,21 @@ public abstract class ControllerCommand extends AdminCommand {\n \n         // If TLS parameters are configured, set them in client.\n         if (config.isTlsEnabled()) {\n-            KeyStore ks = null;\n+            SSLContext tlsContext;\n             try {\n-                ks = createTrustStore(config.getTruststore());\n-            } catch (KeyStoreException e) {\n-                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n-            } catch (IOException e) {\n-                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n-            } catch (NoSuchAlgorithmException e) {\n-                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n-            } catch (CertificateException e) {\n-                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n+                e.printStackTrace();\n+                return null;\n             }\n-\n-            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n             client = ClientBuilder.newBuilder()\n                     .withConfig(clientConfig)\n-                    .trustStore(ks)\n-                    .hostnameVerifier(controllerHostnameVerifier)\n+                    .sslContext(tlsContext)\n                     .build();\n         } else {\n             client = ClientBuilder.newClient(clientConfig);\n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex ac7da01ea..8f1c49e99 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -76,17 +76,12 @@ public abstract class ControllerCommand extends AdminCommand {\n                 tlsContext.init(null, tmf.getTrustManagers(), null);\n             } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n                 output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n-                e.printStackTrace();\n+                output(e.getMessage());\n                 return null;\n             }\n-            client = ClientBuilder.newBuilder()\n-                    .withConfig(clientConfig)\n-                    .sslContext(tlsContext)\n-                    .build();\n-        } else {\n-            client = ClientBuilder.newClient(clientConfig);\n+            builder.sslContext(tlsContext);\n         }\n-\n+        Client client = builder.build();\n         // If authorization parameters are configured, set them in the client.\n         if (config.isAuthEnabled()) {\n             HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMzM3OA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531513378", "bodyText": "If any of the previous settings is incorrect and caught on these catch blocks, it looks like we proceed anyway creating the client, right? I suppose that the result will be a non-functional client that won't be useful for the CLI. It is an option, but just want to double check that this is the behavior we want to implement there.", "author": "RaulGracia", "createdAt": "2020-11-27T10:28:21Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+\n+            } catch (KeyStoreException e) {\n+                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n+            } catch (IOException e) {\n+                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n+            } catch (NoSuchAlgorithmException e) {\n+                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n+            } catch (CertificateException e) {\n+                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+            }\n+\n+            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU0NjU4NQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531546585", "bodyText": "Proceeding won't work I suppose. No? @anirudhkovuru what do you say?", "author": "ravisharda", "createdAt": "2020-11-27T11:30:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMzM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0NzAwNA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532647004", "bodyText": "I've added a message. Printed the stack trace. I can't throw an exception as I do not want to change the method signature. Instead I return null. Is there a better way than this?", "author": "anirudhkovuru", "createdAt": "2020-11-30T14:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMzM3OA=="}], "type": "inlineReview", "revised_code": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex c042c3685..ac7da01ea 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -59,45 +58,39 @@ public abstract class ControllerCommand extends AdminCommand {\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n \n         Client client;\n \n-        // If tls parameters are configured, set them in client\n-        if (getCLIControllerConfig().isTlsEnabled()) {\n-            KeyStore ks = null;\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n             try {\n-                @Cleanup\n-                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n-                ks = KeyStore.getInstance(\"JKS\");\n-                ks.load(trustStore, null);\n-\n-            } catch (KeyStoreException e) {\n-                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n-            } catch (IOException e) {\n-                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n-            } catch (NoSuchAlgorithmException e) {\n-                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n-            } catch (CertificateException e) {\n-                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n+                e.printStackTrace();\n+                return null;\n             }\n-\n-            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n             client = ClientBuilder.newBuilder()\n                     .withConfig(clientConfig)\n-                    .trustStore(ks)\n-                    .hostnameVerifier(controllerHostnameVerifier)\n+                    .sslContext(tlsContext)\n                     .build();\n         } else {\n             client = ClientBuilder.newClient(clientConfig);\n         }\n \n         // If authorization parameters are configured, set them in the client.\n-        if (getCLIControllerConfig().isAuthEnabled()) {\n-            HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(getCLIControllerConfig().getUserName(),\n-                    getCLIControllerConfig().getPassword());\n+        if (config.isAuthEnabled()) {\n+            HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n+                    config.getPassword());\n             client = client.register(auth);\n         }\n         return new Context(client);\n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex ac7da01ea..8f1c49e99 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -76,17 +76,12 @@ public abstract class ControllerCommand extends AdminCommand {\n                 tlsContext.init(null, tmf.getTrustManagers(), null);\n             } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n                 output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n-                e.printStackTrace();\n+                output(e.getMessage());\n                 return null;\n             }\n-            client = ClientBuilder.newBuilder()\n-                    .withConfig(clientConfig)\n-                    .sslContext(tlsContext)\n-                    .build();\n-        } else {\n-            client = ClientBuilder.newClient(clientConfig);\n+            builder.sslContext(tlsContext);\n         }\n-\n+        Client client = builder.build();\n         // If authorization parameters are configured, set them in the client.\n         if (config.isAuthEnabled()) {\n             HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNTIwNw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531515207", "bodyText": "Are these hardcoded values correct on any environment? I mean, the accessTokenTTLInSeconds may be ok (while it could be on a constant variable for clarity), but what about the tokenSigningKey?", "author": "RaulGracia", "createdAt": "2020-11-27T10:31:45Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeStreamCommand.java", "diffHunk": "@@ -72,7 +72,12 @@ public void execute() {\n                 store = StreamStoreFactory.createZKStore(zkClient, executor);\n             } else {\n                 segmentHelper = instantiateSegmentHelper(zkClient);\n-                GrpcAuthHelper authHelper = GrpcAuthHelper.getDisabledAuthHelper();\n+                GrpcAuthHelper authHelper;\n+                if (getCLIControllerConfig().isAuthEnabled()) {\n+                    authHelper = new GrpcAuthHelper(true, \"secret\", 300);", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDExNQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040115", "bodyText": "tokenSigningKey can be subject to change. I've added a new property in the properties file for this.", "author": "anirudhkovuru", "createdAt": "2020-11-28T13:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNTIwNw=="}], "type": "inlineReview", "revised_code": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeStreamCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeStreamCommand.java\nindex 710a936b4..e78ce3789 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeStreamCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeStreamCommand.java\n", "chunk": "@@ -74,7 +74,7 @@ public class ControllerDescribeStreamCommand extends ControllerCommand {\n                 segmentHelper = instantiateSegmentHelper(zkClient);\n                 GrpcAuthHelper authHelper;\n                 if (getCLIControllerConfig().isAuthEnabled()) {\n-                    authHelper = new GrpcAuthHelper(true, \"secret\", 300);\n+                    authHelper = new GrpcAuthHelper(true, getCLIControllerConfig().getTokenSigningKey(), 300);\n                 } else {\n                     authHelper = GrpcAuthHelper.getDisabledAuthHelper();\n                 }\n", "next_change": {"commit": "97dfd86bceb04477d11554120eb730cbf7fe9e38", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeStreamCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeStreamCommand.java\nindex e78ce3789..8aa55f64b 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeStreamCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeStreamCommand.java\n", "chunk": "@@ -73,11 +73,7 @@ public class ControllerDescribeStreamCommand extends ControllerCommand {\n             } else {\n                 segmentHelper = instantiateSegmentHelper(zkClient);\n                 GrpcAuthHelper authHelper;\n-                if (getCLIControllerConfig().isAuthEnabled()) {\n-                    authHelper = new GrpcAuthHelper(true, getCLIControllerConfig().getTokenSigningKey(), 300);\n-                } else {\n-                    authHelper = GrpcAuthHelper.getDisabledAuthHelper();\n-                }\n+                authHelper = GrpcAuthHelper.getDisabledAuthHelper();\n                 store = StreamStoreFactory.createPravegaTablesStore(segmentHelper, authHelper, zkClient, executor);\n             }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNjEzNQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531516135", "bodyText": "Are we sure that none of these arguments can be null?", "author": "RaulGracia", "createdAt": "2020-11-27T10:33:27Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.utils;\n+\n+import javax.net.ssl.HostnameVerifier;\n+import javax.net.ssl.SSLSession;\n+\n+public class ControllerHostnameVerifier implements HostnameVerifier {\n+    @Override\n+    public boolean verify(String s, SSLSession sslSession) {\n+        return s.equalsIgnoreCase(sslSession.getPeerHost());", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0NTkxMw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532645913", "bodyText": "This file is not used anymore as the connection to TLS is made through the use of SSLContext instead.", "author": "anirudhkovuru", "createdAt": "2020-11-30T14:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNjEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java b/cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java\ndeleted file mode 100644\nindex 9ba40cedc..000000000\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java\n+++ /dev/null\n", "chunk": "@@ -1,20 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin.utils;\n-\n-import javax.net.ssl.HostnameVerifier;\n-import javax.net.ssl.SSLSession;\n-\n-public class ControllerHostnameVerifier implements HostnameVerifier {\n-    @Override\n-    public boolean verify(String s, SSLSession sslSession) {\n-        return s.equalsIgnoreCase(sslSession.getPeerHost());\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxODEyOQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531518129", "bodyText": "Nit: Pravega (starting with caps).", "author": "RaulGracia", "createdAt": "2020-11-27T10:35:10Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n+\n+    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    // Security related flags and instantiate local pravega server.", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 390b71056..d9bdc1324 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -34,7 +50,7 @@ public abstract class AbstractTlsAdminCommandTest {\n     protected boolean tlsEnabled = false;\n     LocalPravegaEmulator localPravega;\n \n-    // Security related flags and instantiate local pravega server.\n+    // Security related flags and instantiate local Pravega server.\n     private final Integer controllerPort = TestUtils.getAvailableListenPort();\n     private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n", "next_change": {"commit": "d10a1a235e6a28a9fc99e05a842ef07c18680af6", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex d9bdc1324..6c425221c 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -58,7 +58,7 @@ public abstract class AbstractTlsAdminCommandTest {\n     @Before\n     public void setUp() throws Exception {\n \n-        // Create the secure pravega server to test commands against.\n+        // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n                 .segmentStorePort(segmentStorePort)\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 6c425221c..4b045d90b 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -56,7 +58,8 @@ public abstract class AbstractTlsAdminCommandTest {\n     private final Integer restServerPort = TestUtils.getAvailableListenPort();\n \n     @Before\n-    public void setUp() throws Exception {\n+    @SneakyThrows\n+    public void setUp() {\n \n         // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n", "next_change": {"commit": "25ad699eeda86b64d09879c28aacd16e3e79a03a", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 4b045d90b..549fcae60 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -26,41 +19,32 @@ import io.pravega.test.common.SecurityConfigDefaults;\n import io.pravega.test.common.TestUtils;\n import lombok.Cleanup;\n import lombok.SneakyThrows;\n-import org.junit.After;\n-import org.junit.Before;\n+import lombok.val;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Rule;\n-import org.junit.Test;\n import org.junit.rules.Timeout;\n \n import java.net.URI;\n-import java.util.Properties;\n-import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n+import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n public abstract class AbstractTlsAdminCommandTest {\n \n+    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n     @Rule\n     public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n \n-    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-    private final String location = \"../../config/\";\n-\n-    // Security related flags and instantiate local Pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    @SneakyThrows\n-    public void setUp() {\n-\n+    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n+        final int controllerPort = TestUtils.getAvailableListenPort();\n+        final int segmentStorePort = TestUtils.getAvailableListenPort();\n+        final int restServerPort = TestUtils.getAvailableListenPort();\n         // Create the secure Pravega server to test commands against.\n         LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n                 .controllerPort(controllerPort)\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 549fcae60..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,134 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.Cleanup;\n-import lombok.SneakyThrows;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n-import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n-        final int controllerPort = TestUtils.getAvailableListenPort();\n-        final int segmentStorePort = TestUtils.getAvailableListenPort();\n-        final int restServerPort = TestUtils.getAvailableListenPort();\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(pathToConfig() + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(pathToConfig() + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(pathToConfig() + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-        LOCAL_PRAVEGA.set(emulatorBuilder.build());\n-        LOCAL_PRAVEGA.get().start();\n-        setAdminCLIProperties(\"localhost:\" + restServerPort,\n-                \"localhost:\" + controllerPort,\n-                LOCAL_PRAVEGA.get().getInProcPravegaCluster().getZkUrl(),\n-                4, authEnabled, \"secret\", tlsEnabled, STATE);\n-\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        assertTrue(\"Failed to create the stream \", isStreamCreated);\n-    }\n-\n-    @BeforeClass\n-    @SneakyThrows\n-    public static void setUp() {\n-        setUpLocalPravegaEmulator(false, true);\n-    }\n-\n-    @AfterClass\n-    @SneakyThrows\n-    public static void tearDown() {\n-        val localPravega = LOCAL_PRAVEGA.get();\n-        if (LOCAL_PRAVEGA.get() != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected static ClientConfig prepareValidClientConfig(boolean authEnabled, boolean tlsEnabled) {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(LOCAL_PRAVEGA.get().getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(pathToConfig() + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxOTYyNQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531519625", "bodyText": "Nit: remove extra blank line.", "author": "RaulGracia", "createdAt": "2020-11-27T10:36:55Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDIxOQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040219", "bodyText": "done", "author": "anirudhkovuru", "createdAt": "2020-11-28T13:27:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxOTYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex ac18f5189..200683ffb 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -9,54 +9,9 @@\n  */\n package io.pravega.cli.admin.controller;\n \n-import com.google.common.base.Preconditions;\n-import io.pravega.cli.admin.AbstractAdminCommandTest;\n-import io.pravega.cli.admin.AdminCommandState;\n-import io.pravega.cli.admin.CommandArgs;\n-import io.pravega.cli.admin.Parser;\n-import io.pravega.cli.admin.utils.CLIControllerConfig;\n-import io.pravega.cli.admin.utils.TestUtils;\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.connection.impl.ConnectionPool;\n-import io.pravega.client.connection.impl.ConnectionPoolImpl;\n-import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.common.Exceptions;\n-import io.pravega.common.cluster.Host;\n-import io.pravega.controller.server.SegmentHelper;\n-import io.pravega.controller.store.client.StoreClientFactory;\n-import io.pravega.controller.store.host.HostControllerStore;\n-import io.pravega.controller.store.host.HostMonitorConfig;\n-import io.pravega.controller.store.host.HostStoreFactory;\n-import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n-import io.pravega.controller.util.Config;\n-import lombok.Cleanup;\n-import org.apache.curator.framework.CuratorFramework;\n-import org.apache.curator.framework.CuratorFrameworkFactory;\n-import org.apache.curator.retry.RetryOneTime;\n-import org.junit.Assert;\n import org.junit.Before;\n-import org.junit.Test;\n \n-import javax.ws.rs.core.Response;\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintStream;\n-import java.net.URI;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-\n-public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n \n     @Before\n     @Override\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 200683ffb..2437480ba 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -15,7 +15,7 @@ public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n \n     @Before\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         authEnabled = true;\n         super.setUp();\n     }\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\ndeleted file mode 100644\nindex 2437480ba..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ /dev/null\n", "chunk": "@@ -1,22 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin.controller;\n-\n-import org.junit.Before;\n-\n-public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n-\n-    @Before\n-    @Override\n-    public void setUp() {\n-        authEnabled = true;\n-        super.setUp();\n-    }\n-}\n", "next_change": null}]}}]}}, {"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex ac18f5189..200683ffb 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -64,191 +19,4 @@ public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest\n         authEnabled = true;\n         super.setUp();\n     }\n-\n-\n-    @Test\n-    public void testListScopesCommand() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeScopeCommand() throws Exception {\n-        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertNotNull(ControllerDescribeStreamCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListStreamsCommand() throws Exception {\n-        String testStream = \"testListStreamsCommand\";\n-        setupUtils.createTestStream(testStream, 1);\n-        String commandResult = TestUtils.executeCommand(\"controller list-streams \" + setupUtils.getScope(), state.get());\n-        // Check that the newly created stream is retrieved as part of the list of streams.\n-        Assert.assertTrue(commandResult.contains(testStream));\n-        Assert.assertNotNull(ControllerListStreamsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListReaderGroupsCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller list-readergroups _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerListReaderGroupsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeReaderGroupCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller describe-readergroup _system commitStreamReaders\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerDescribeReaderGroupCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeStreamCommand() throws Exception {\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = setupUtils.generateValidClientConfig();\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        Assert.assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        Assert.assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        Assert.assertTrue(\"Failed to create the stream \", isStreamCreated);\n-\n-        String commandResult = executeCommand(\"controller describe-stream \" + scope + \" \" + testStream, state.get(), setupUtils.getServicePort());\n-        Assert.assertTrue(commandResult.contains(\"stream_config\"));\n-        Assert.assertTrue(commandResult.contains(\"stream_state\"));\n-        Assert.assertTrue(commandResult.contains(\"segment_count\"));\n-        Assert.assertTrue(commandResult.contains(\"is_sealed\"));\n-        Assert.assertTrue(commandResult.contains(\"active_epoch\"));\n-        Assert.assertTrue(commandResult.contains(\"truncation_record\"));\n-        Assert.assertTrue(commandResult.contains(\"scaling_info\"));\n-\n-        // Exercise actual instantiateSegmentHelper\n-        CommandArgs commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        ControllerDescribeStreamCommand command = new ControllerDescribeStreamCommand(commandArgs);\n-        @Cleanup\n-        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(setupUtils.getZkTestServer().getConnectString(),\n-                new RetryOneTime(5000));\n-        curatorFramework.start();\n-        Assert.assertNotNull(command.instantiateSegmentHelper(curatorFramework));\n-\n-        // Try the Zookeeper backend, which is expected to fail and be handled by the command.\n-        Properties properties = new Properties();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.ZOOKEEPER.name());\n-        state.get().getConfigBuilder().include(properties);\n-        commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        new ControllerDescribeStreamCommand(commandArgs).execute();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.SEGMENTSTORE.name());\n-        state.get().getConfigBuilder().include(properties);\n-    }\n-\n-    @Test\n-    public void testAuthConfig() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"true\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-        // Restore config\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"false\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-\n-        // Exercise response codes for REST requests.\n-        CommandArgs commandArgs = new CommandArgs(Collections.emptyList(), new AdminCommandState());\n-        ControllerListScopesCommand command = new ControllerListScopesCommand(commandArgs);\n-        command.printResponseInfo(Response.status(Response.Status.UNAUTHORIZED).build());\n-        command.printResponseInfo(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n-    }\n-\n-    static String executeCommand(String inputCommand, AdminCommandState state, int servicePort) throws Exception {\n-        Parser.Command pc = Parser.parse(inputCommand);\n-        Assert.assertNotNull(pc.toString());\n-        CommandArgs args = new CommandArgs(pc.getArgs(), state);\n-        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        TestingDescribeStreamCommand cmd = new TestingDescribeStreamCommand(args, servicePort);\n-        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n-            cmd.setOut(ps);\n-            cmd.execute();\n-        }\n-        return new String(baos.toByteArray(), StandardCharsets.UTF_8);\n-    }\n-\n-    private static class TestingDescribeStreamCommand extends ControllerDescribeStreamCommand {\n-        private final int servicePort;\n-\n-        /**\n-         * Creates a new instance of the Command class.\n-         *\n-         * @param args The arguments for the command.\n-         */\n-        public TestingDescribeStreamCommand(CommandArgs args, int servicePort) {\n-            super(args);\n-            this.servicePort = servicePort;\n-        }\n-\n-        @Override\n-        protected SegmentHelper instantiateSegmentHelper(CuratorFramework zkClient) {\n-            HostMonitorConfig hostMonitorConfig = HostMonitorConfigImpl.builder()\n-                    .hostMonitorEnabled(false)\n-                    .hostContainerMap(getHostContainerMap(Collections.singletonList(\"localhost:\" + servicePort),\n-                            getServiceConfig().getContainerCount()))\n-                    .hostMonitorMinRebalanceInterval(Config.CLUSTER_MIN_REBALANCE_INTERVAL)\n-                    .containerCount(getServiceConfig().getContainerCount())\n-                    .build();\n-            HostControllerStore hostStore = HostStoreFactory.createStore(hostMonitorConfig, StoreClientFactory.createZKStoreClient(zkClient));\n-            ClientConfig clientConfig = ClientConfig.builder()\n-                    .controllerURI(URI.create(getCLIControllerConfig().getControllerGrpcURI()))\n-                    .validateHostName(false)\n-                    .credentials(new DefaultCredentials(getCLIControllerConfig().getPassword(),\n-                            getCLIControllerConfig().getUserName()))\n-                    .build();\n-            ConnectionPool pool = new ConnectionPoolImpl(clientConfig, new SocketConnectionFactoryImpl(clientConfig));\n-            return new SegmentHelper(pool, hostStore, pool.getInternalExecutor());\n-        }\n-\n-        private Map<Host, Set<Integer>> getHostContainerMap(List<String> uri, int containerCount) {\n-            Exceptions.checkNotNullOrEmpty(uri, \"uri\");\n-\n-            Map<Host, Set<Integer>> hostContainerMap = new HashMap<>();\n-            uri.forEach(x -> {\n-                // Get the host and port from the URI\n-                String host = x.split(\":\")[0];\n-                int port = Integer.parseInt(x.split(\":\")[1]);\n-                Preconditions.checkNotNull(host, \"host\");\n-                Preconditions.checkArgument(port > 0, \"port\");\n-                Preconditions.checkArgument(containerCount > 0, \"containerCount\");\n-                hostContainerMap.put(new Host(host, port, null), IntStream.range(0, containerCount).boxed().collect(Collectors.toSet()));\n-            });\n-            return hostContainerMap;\n-        }\n-\n-        @Override\n-        public void execute() {\n-            super.execute();\n-        }\n-    }\n }\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 200683ffb..2437480ba 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -15,7 +15,7 @@ public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n \n     @Before\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         authEnabled = true;\n         super.setUp();\n     }\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\ndeleted file mode 100644\nindex 2437480ba..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ /dev/null\n", "chunk": "@@ -1,22 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin.controller;\n-\n-import org.junit.Before;\n-\n-public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n-\n-    @Before\n-    @Override\n-    public void setUp() {\n-        authEnabled = true;\n-        super.setUp();\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyMjM0Nw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531522347", "bodyText": "Why this test is exactly the same as testListScopesCommand() in ControllerCommandsTest.java? The whole point of this structure would be to have the same common tests in both auth and no auth tests, which can be inherited, right? I mean, AbstractAdminCommandTest may implement the \"common\" tests for both auth and no auth tests. Then, if you need some specific tests on either of them, you could implement them in their respective classes. But please, do not duplicate code, as it makes maintenance harder and it provides no benefit.", "author": "RaulGracia", "createdAt": "2020-11-27T10:42:03Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+\n+\n+    @Test\n+    public void testListScopesCommand() throws Exception {", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDQwOA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040408", "bodyText": "I've shifted the common tests to a single class so for example all the tests in ControllerCommandsTest.java are run by AuthEnabledControllerCommandsTest.java as it extends ControllerCommandsTest.java. Same changes have been made throughout admin and user cli", "author": "anirudhkovuru", "createdAt": "2020-11-28T13:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyMjM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex ac18f5189..200683ffb 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -64,191 +19,4 @@ public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest\n         authEnabled = true;\n         super.setUp();\n     }\n-\n-\n-    @Test\n-    public void testListScopesCommand() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeScopeCommand() throws Exception {\n-        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertNotNull(ControllerDescribeStreamCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListStreamsCommand() throws Exception {\n-        String testStream = \"testListStreamsCommand\";\n-        setupUtils.createTestStream(testStream, 1);\n-        String commandResult = TestUtils.executeCommand(\"controller list-streams \" + setupUtils.getScope(), state.get());\n-        // Check that the newly created stream is retrieved as part of the list of streams.\n-        Assert.assertTrue(commandResult.contains(testStream));\n-        Assert.assertNotNull(ControllerListStreamsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListReaderGroupsCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller list-readergroups _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerListReaderGroupsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeReaderGroupCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller describe-readergroup _system commitStreamReaders\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerDescribeReaderGroupCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeStreamCommand() throws Exception {\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = setupUtils.generateValidClientConfig();\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        Assert.assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        Assert.assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        Assert.assertTrue(\"Failed to create the stream \", isStreamCreated);\n-\n-        String commandResult = executeCommand(\"controller describe-stream \" + scope + \" \" + testStream, state.get(), setupUtils.getServicePort());\n-        Assert.assertTrue(commandResult.contains(\"stream_config\"));\n-        Assert.assertTrue(commandResult.contains(\"stream_state\"));\n-        Assert.assertTrue(commandResult.contains(\"segment_count\"));\n-        Assert.assertTrue(commandResult.contains(\"is_sealed\"));\n-        Assert.assertTrue(commandResult.contains(\"active_epoch\"));\n-        Assert.assertTrue(commandResult.contains(\"truncation_record\"));\n-        Assert.assertTrue(commandResult.contains(\"scaling_info\"));\n-\n-        // Exercise actual instantiateSegmentHelper\n-        CommandArgs commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        ControllerDescribeStreamCommand command = new ControllerDescribeStreamCommand(commandArgs);\n-        @Cleanup\n-        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(setupUtils.getZkTestServer().getConnectString(),\n-                new RetryOneTime(5000));\n-        curatorFramework.start();\n-        Assert.assertNotNull(command.instantiateSegmentHelper(curatorFramework));\n-\n-        // Try the Zookeeper backend, which is expected to fail and be handled by the command.\n-        Properties properties = new Properties();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.ZOOKEEPER.name());\n-        state.get().getConfigBuilder().include(properties);\n-        commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        new ControllerDescribeStreamCommand(commandArgs).execute();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.SEGMENTSTORE.name());\n-        state.get().getConfigBuilder().include(properties);\n-    }\n-\n-    @Test\n-    public void testAuthConfig() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"true\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-        // Restore config\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"false\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-\n-        // Exercise response codes for REST requests.\n-        CommandArgs commandArgs = new CommandArgs(Collections.emptyList(), new AdminCommandState());\n-        ControllerListScopesCommand command = new ControllerListScopesCommand(commandArgs);\n-        command.printResponseInfo(Response.status(Response.Status.UNAUTHORIZED).build());\n-        command.printResponseInfo(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n-    }\n-\n-    static String executeCommand(String inputCommand, AdminCommandState state, int servicePort) throws Exception {\n-        Parser.Command pc = Parser.parse(inputCommand);\n-        Assert.assertNotNull(pc.toString());\n-        CommandArgs args = new CommandArgs(pc.getArgs(), state);\n-        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        TestingDescribeStreamCommand cmd = new TestingDescribeStreamCommand(args, servicePort);\n-        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n-            cmd.setOut(ps);\n-            cmd.execute();\n-        }\n-        return new String(baos.toByteArray(), StandardCharsets.UTF_8);\n-    }\n-\n-    private static class TestingDescribeStreamCommand extends ControllerDescribeStreamCommand {\n-        private final int servicePort;\n-\n-        /**\n-         * Creates a new instance of the Command class.\n-         *\n-         * @param args The arguments for the command.\n-         */\n-        public TestingDescribeStreamCommand(CommandArgs args, int servicePort) {\n-            super(args);\n-            this.servicePort = servicePort;\n-        }\n-\n-        @Override\n-        protected SegmentHelper instantiateSegmentHelper(CuratorFramework zkClient) {\n-            HostMonitorConfig hostMonitorConfig = HostMonitorConfigImpl.builder()\n-                    .hostMonitorEnabled(false)\n-                    .hostContainerMap(getHostContainerMap(Collections.singletonList(\"localhost:\" + servicePort),\n-                            getServiceConfig().getContainerCount()))\n-                    .hostMonitorMinRebalanceInterval(Config.CLUSTER_MIN_REBALANCE_INTERVAL)\n-                    .containerCount(getServiceConfig().getContainerCount())\n-                    .build();\n-            HostControllerStore hostStore = HostStoreFactory.createStore(hostMonitorConfig, StoreClientFactory.createZKStoreClient(zkClient));\n-            ClientConfig clientConfig = ClientConfig.builder()\n-                    .controllerURI(URI.create(getCLIControllerConfig().getControllerGrpcURI()))\n-                    .validateHostName(false)\n-                    .credentials(new DefaultCredentials(getCLIControllerConfig().getPassword(),\n-                            getCLIControllerConfig().getUserName()))\n-                    .build();\n-            ConnectionPool pool = new ConnectionPoolImpl(clientConfig, new SocketConnectionFactoryImpl(clientConfig));\n-            return new SegmentHelper(pool, hostStore, pool.getInternalExecutor());\n-        }\n-\n-        private Map<Host, Set<Integer>> getHostContainerMap(List<String> uri, int containerCount) {\n-            Exceptions.checkNotNullOrEmpty(uri, \"uri\");\n-\n-            Map<Host, Set<Integer>> hostContainerMap = new HashMap<>();\n-            uri.forEach(x -> {\n-                // Get the host and port from the URI\n-                String host = x.split(\":\")[0];\n-                int port = Integer.parseInt(x.split(\":\")[1]);\n-                Preconditions.checkNotNull(host, \"host\");\n-                Preconditions.checkArgument(port > 0, \"port\");\n-                Preconditions.checkArgument(containerCount > 0, \"containerCount\");\n-                hostContainerMap.put(new Host(host, port, null), IntStream.range(0, containerCount).boxed().collect(Collectors.toSet()));\n-            });\n-            return hostContainerMap;\n-        }\n-\n-        @Override\n-        public void execute() {\n-            super.execute();\n-        }\n-    }\n }\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 200683ffb..2437480ba 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -15,7 +15,7 @@ public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n \n     @Before\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         authEnabled = true;\n         super.setUp();\n     }\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\ndeleted file mode 100644\nindex 2437480ba..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ /dev/null\n", "chunk": "@@ -1,22 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin.controller;\n-\n-import org.junit.Before;\n-\n-public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n-\n-    @Before\n-    @Override\n-    public void setUp() {\n-        authEnabled = true;\n-        super.setUp();\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyNDg1Ng==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531524856", "bodyText": "All this piece of code seems repeated here and in the previous test. Wondering about if we could add this logic in a utility method in testcommon package, which I assume will be available here too.", "author": "RaulGracia", "createdAt": "2020-11-27T10:46:48Z", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+     @Rule\n+     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n+\n+    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    // Security related flags and instantiate local pravega server.\n+    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n+    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n+    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(controllerPort)\n+                .segmentStorePort(segmentStorePort)\n+                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(restServerPort)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\ndeleted file mode 100644\nindex 923add2ad..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,93 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public abstract class AbstractTlsUserCommandTest {\n-     @Rule\n-     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n-\n-    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-\n-    // Security related flags and instantiate local pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    public void setUp() throws Exception {\n-\n-        // Create the secure pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-\n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(\"localhost:\" + controllerPort.toString());\n-        interactiveConfig.setDefaultSegmentCount(4);\n-        interactiveConfig.setMaxListItems(100);\n-        interactiveConfig.setTimeoutMillis(10000);\n-        interactiveConfig.setAuthEnabled(authEnabled);\n-        interactiveConfig.setUserName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        interactiveConfig.setPassword(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        interactiveConfig.setTlsEnabled(tlsEnabled);\n-        interactiveConfig.setTruststore(\"../../config/\" + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n-        config.set(interactiveConfig);\n-    }\n-\n-    @After\n-    public void tearDown() throws Exception {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyOTMxNw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531529317", "bodyText": "All this logic seems similar to what is written in AbstractTlsAdminCommandTest. Is there any possibility to use the same initialization logic for both and embed such a logic in a common place, like SecureSetupUtils.java or any other place? The point is to minimize code duplication.", "author": "RaulGracia", "createdAt": "2020-11-27T10:55:16Z", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+     @Rule\n+     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n+\n+    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    // Security related flags and instantiate local pravega server.\n+    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n+    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n+    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(controllerPort)\n+                .segmentStorePort(segmentStorePort)\n+                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(restServerPort)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\ndeleted file mode 100644\nindex 923add2ad..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,93 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public abstract class AbstractTlsUserCommandTest {\n-     @Rule\n-     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n-\n-    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n-    protected boolean authEnabled = false;\n-    protected boolean tlsEnabled = false;\n-    LocalPravegaEmulator localPravega;\n-\n-    // Security related flags and instantiate local pravega server.\n-    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n-    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n-    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n-\n-    @Before\n-    public void setUp() throws Exception {\n-\n-        // Create the secure pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-\n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(\"localhost:\" + controllerPort.toString());\n-        interactiveConfig.setDefaultSegmentCount(4);\n-        interactiveConfig.setMaxListItems(100);\n-        interactiveConfig.setTimeoutMillis(10000);\n-        interactiveConfig.setAuthEnabled(authEnabled);\n-        interactiveConfig.setUserName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        interactiveConfig.setPassword(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        interactiveConfig.setTlsEnabled(tlsEnabled);\n-        interactiveConfig.setTruststore(\"../../config/\" + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n-        config.set(interactiveConfig);\n-    }\n-\n-    @After\n-    public void tearDown() throws Exception {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzMTQ4Ng==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531531486", "bodyText": "Many tests here are the same as in ClusterCommandsTest.java, right? If so, for the tests that are shared between ClusterCommandsTest.java and AuthEnabledControllerCommandsTest, move them to AbstractAdminCommandTest so both classes can inherit them and we can prevent code duplication. Then, the specific tests can be implemented on their respective test classes.", "author": "RaulGracia", "createdAt": "2020-11-27T10:59:29Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+\n+\n+    @Test\n+    public void testListScopesCommand() throws Exception {", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDUxMw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040513", "bodyText": "Yeah as explained above now these tests are in ControllerCommandsTest, this file extends it so the tests transfer too.", "author": "anirudhkovuru", "createdAt": "2020-11-28T13:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzMTQ4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex ac18f5189..200683ffb 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -64,191 +19,4 @@ public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest\n         authEnabled = true;\n         super.setUp();\n     }\n-\n-\n-    @Test\n-    public void testListScopesCommand() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeScopeCommand() throws Exception {\n-        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertNotNull(ControllerDescribeStreamCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListStreamsCommand() throws Exception {\n-        String testStream = \"testListStreamsCommand\";\n-        setupUtils.createTestStream(testStream, 1);\n-        String commandResult = TestUtils.executeCommand(\"controller list-streams \" + setupUtils.getScope(), state.get());\n-        // Check that the newly created stream is retrieved as part of the list of streams.\n-        Assert.assertTrue(commandResult.contains(testStream));\n-        Assert.assertNotNull(ControllerListStreamsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListReaderGroupsCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller list-readergroups _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerListReaderGroupsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeReaderGroupCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller describe-readergroup _system commitStreamReaders\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerDescribeReaderGroupCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeStreamCommand() throws Exception {\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = setupUtils.generateValidClientConfig();\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        Assert.assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        Assert.assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        Assert.assertTrue(\"Failed to create the stream \", isStreamCreated);\n-\n-        String commandResult = executeCommand(\"controller describe-stream \" + scope + \" \" + testStream, state.get(), setupUtils.getServicePort());\n-        Assert.assertTrue(commandResult.contains(\"stream_config\"));\n-        Assert.assertTrue(commandResult.contains(\"stream_state\"));\n-        Assert.assertTrue(commandResult.contains(\"segment_count\"));\n-        Assert.assertTrue(commandResult.contains(\"is_sealed\"));\n-        Assert.assertTrue(commandResult.contains(\"active_epoch\"));\n-        Assert.assertTrue(commandResult.contains(\"truncation_record\"));\n-        Assert.assertTrue(commandResult.contains(\"scaling_info\"));\n-\n-        // Exercise actual instantiateSegmentHelper\n-        CommandArgs commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        ControllerDescribeStreamCommand command = new ControllerDescribeStreamCommand(commandArgs);\n-        @Cleanup\n-        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(setupUtils.getZkTestServer().getConnectString(),\n-                new RetryOneTime(5000));\n-        curatorFramework.start();\n-        Assert.assertNotNull(command.instantiateSegmentHelper(curatorFramework));\n-\n-        // Try the Zookeeper backend, which is expected to fail and be handled by the command.\n-        Properties properties = new Properties();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.ZOOKEEPER.name());\n-        state.get().getConfigBuilder().include(properties);\n-        commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        new ControllerDescribeStreamCommand(commandArgs).execute();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.SEGMENTSTORE.name());\n-        state.get().getConfigBuilder().include(properties);\n-    }\n-\n-    @Test\n-    public void testAuthConfig() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"true\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-        // Restore config\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"false\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-\n-        // Exercise response codes for REST requests.\n-        CommandArgs commandArgs = new CommandArgs(Collections.emptyList(), new AdminCommandState());\n-        ControllerListScopesCommand command = new ControllerListScopesCommand(commandArgs);\n-        command.printResponseInfo(Response.status(Response.Status.UNAUTHORIZED).build());\n-        command.printResponseInfo(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n-    }\n-\n-    static String executeCommand(String inputCommand, AdminCommandState state, int servicePort) throws Exception {\n-        Parser.Command pc = Parser.parse(inputCommand);\n-        Assert.assertNotNull(pc.toString());\n-        CommandArgs args = new CommandArgs(pc.getArgs(), state);\n-        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        TestingDescribeStreamCommand cmd = new TestingDescribeStreamCommand(args, servicePort);\n-        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n-            cmd.setOut(ps);\n-            cmd.execute();\n-        }\n-        return new String(baos.toByteArray(), StandardCharsets.UTF_8);\n-    }\n-\n-    private static class TestingDescribeStreamCommand extends ControllerDescribeStreamCommand {\n-        private final int servicePort;\n-\n-        /**\n-         * Creates a new instance of the Command class.\n-         *\n-         * @param args The arguments for the command.\n-         */\n-        public TestingDescribeStreamCommand(CommandArgs args, int servicePort) {\n-            super(args);\n-            this.servicePort = servicePort;\n-        }\n-\n-        @Override\n-        protected SegmentHelper instantiateSegmentHelper(CuratorFramework zkClient) {\n-            HostMonitorConfig hostMonitorConfig = HostMonitorConfigImpl.builder()\n-                    .hostMonitorEnabled(false)\n-                    .hostContainerMap(getHostContainerMap(Collections.singletonList(\"localhost:\" + servicePort),\n-                            getServiceConfig().getContainerCount()))\n-                    .hostMonitorMinRebalanceInterval(Config.CLUSTER_MIN_REBALANCE_INTERVAL)\n-                    .containerCount(getServiceConfig().getContainerCount())\n-                    .build();\n-            HostControllerStore hostStore = HostStoreFactory.createStore(hostMonitorConfig, StoreClientFactory.createZKStoreClient(zkClient));\n-            ClientConfig clientConfig = ClientConfig.builder()\n-                    .controllerURI(URI.create(getCLIControllerConfig().getControllerGrpcURI()))\n-                    .validateHostName(false)\n-                    .credentials(new DefaultCredentials(getCLIControllerConfig().getPassword(),\n-                            getCLIControllerConfig().getUserName()))\n-                    .build();\n-            ConnectionPool pool = new ConnectionPoolImpl(clientConfig, new SocketConnectionFactoryImpl(clientConfig));\n-            return new SegmentHelper(pool, hostStore, pool.getInternalExecutor());\n-        }\n-\n-        private Map<Host, Set<Integer>> getHostContainerMap(List<String> uri, int containerCount) {\n-            Exceptions.checkNotNullOrEmpty(uri, \"uri\");\n-\n-            Map<Host, Set<Integer>> hostContainerMap = new HashMap<>();\n-            uri.forEach(x -> {\n-                // Get the host and port from the URI\n-                String host = x.split(\":\")[0];\n-                int port = Integer.parseInt(x.split(\":\")[1]);\n-                Preconditions.checkNotNull(host, \"host\");\n-                Preconditions.checkArgument(port > 0, \"port\");\n-                Preconditions.checkArgument(containerCount > 0, \"containerCount\");\n-                hostContainerMap.put(new Host(host, port, null), IntStream.range(0, containerCount).boxed().collect(Collectors.toSet()));\n-            });\n-            return hostContainerMap;\n-        }\n-\n-        @Override\n-        public void execute() {\n-            super.execute();\n-        }\n-    }\n }\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 200683ffb..2437480ba 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -15,7 +15,7 @@ public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n \n     @Before\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         authEnabled = true;\n         super.setUp();\n     }\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\ndeleted file mode 100644\nindex 2437480ba..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ /dev/null\n", "chunk": "@@ -1,22 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin.controller;\n-\n-import org.junit.Before;\n-\n-public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n-\n-    @Before\n-    @Override\n-    public void setUp() {\n-        authEnabled = true;\n-        super.setUp();\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzMTYwMw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531531603", "bodyText": "Nit: remove extra blank line.", "author": "RaulGracia", "createdAt": "2020-11-27T10:59:42Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDUyNg==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040526", "bodyText": "done", "author": "anirudhkovuru", "createdAt": "2020-11-28T13:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzMTYwMw=="}], "type": "inlineReview", "revised_code": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex ac18f5189..200683ffb 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -9,54 +9,9 @@\n  */\n package io.pravega.cli.admin.controller;\n \n-import com.google.common.base.Preconditions;\n-import io.pravega.cli.admin.AbstractAdminCommandTest;\n-import io.pravega.cli.admin.AdminCommandState;\n-import io.pravega.cli.admin.CommandArgs;\n-import io.pravega.cli.admin.Parser;\n-import io.pravega.cli.admin.utils.CLIControllerConfig;\n-import io.pravega.cli.admin.utils.TestUtils;\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.connection.impl.ConnectionPool;\n-import io.pravega.client.connection.impl.ConnectionPoolImpl;\n-import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.common.Exceptions;\n-import io.pravega.common.cluster.Host;\n-import io.pravega.controller.server.SegmentHelper;\n-import io.pravega.controller.store.client.StoreClientFactory;\n-import io.pravega.controller.store.host.HostControllerStore;\n-import io.pravega.controller.store.host.HostMonitorConfig;\n-import io.pravega.controller.store.host.HostStoreFactory;\n-import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n-import io.pravega.controller.util.Config;\n-import lombok.Cleanup;\n-import org.apache.curator.framework.CuratorFramework;\n-import org.apache.curator.framework.CuratorFrameworkFactory;\n-import org.apache.curator.retry.RetryOneTime;\n-import org.junit.Assert;\n import org.junit.Before;\n-import org.junit.Test;\n \n-import javax.ws.rs.core.Response;\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintStream;\n-import java.net.URI;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-\n-public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n \n     @Before\n     @Override\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 200683ffb..2437480ba 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -15,7 +15,7 @@ public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n \n     @Before\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         authEnabled = true;\n         super.setUp();\n     }\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\ndeleted file mode 100644\nindex 2437480ba..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ /dev/null\n", "chunk": "@@ -1,22 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin.controller;\n-\n-import org.junit.Before;\n-\n-public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n-\n-    @Before\n-    @Override\n-    public void setUp() {\n-        authEnabled = true;\n-        super.setUp();\n-    }\n-}\n", "next_change": null}]}}]}}, {"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex ac18f5189..200683ffb 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -64,191 +19,4 @@ public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest\n         authEnabled = true;\n         super.setUp();\n     }\n-\n-\n-    @Test\n-    public void testListScopesCommand() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeScopeCommand() throws Exception {\n-        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertNotNull(ControllerDescribeStreamCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListStreamsCommand() throws Exception {\n-        String testStream = \"testListStreamsCommand\";\n-        setupUtils.createTestStream(testStream, 1);\n-        String commandResult = TestUtils.executeCommand(\"controller list-streams \" + setupUtils.getScope(), state.get());\n-        // Check that the newly created stream is retrieved as part of the list of streams.\n-        Assert.assertTrue(commandResult.contains(testStream));\n-        Assert.assertNotNull(ControllerListStreamsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListReaderGroupsCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller list-readergroups _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerListReaderGroupsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeReaderGroupCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller describe-readergroup _system commitStreamReaders\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerDescribeReaderGroupCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeStreamCommand() throws Exception {\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = setupUtils.generateValidClientConfig();\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        Assert.assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        Assert.assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        Assert.assertTrue(\"Failed to create the stream \", isStreamCreated);\n-\n-        String commandResult = executeCommand(\"controller describe-stream \" + scope + \" \" + testStream, state.get(), setupUtils.getServicePort());\n-        Assert.assertTrue(commandResult.contains(\"stream_config\"));\n-        Assert.assertTrue(commandResult.contains(\"stream_state\"));\n-        Assert.assertTrue(commandResult.contains(\"segment_count\"));\n-        Assert.assertTrue(commandResult.contains(\"is_sealed\"));\n-        Assert.assertTrue(commandResult.contains(\"active_epoch\"));\n-        Assert.assertTrue(commandResult.contains(\"truncation_record\"));\n-        Assert.assertTrue(commandResult.contains(\"scaling_info\"));\n-\n-        // Exercise actual instantiateSegmentHelper\n-        CommandArgs commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        ControllerDescribeStreamCommand command = new ControllerDescribeStreamCommand(commandArgs);\n-        @Cleanup\n-        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(setupUtils.getZkTestServer().getConnectString(),\n-                new RetryOneTime(5000));\n-        curatorFramework.start();\n-        Assert.assertNotNull(command.instantiateSegmentHelper(curatorFramework));\n-\n-        // Try the Zookeeper backend, which is expected to fail and be handled by the command.\n-        Properties properties = new Properties();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.ZOOKEEPER.name());\n-        state.get().getConfigBuilder().include(properties);\n-        commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        new ControllerDescribeStreamCommand(commandArgs).execute();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.SEGMENTSTORE.name());\n-        state.get().getConfigBuilder().include(properties);\n-    }\n-\n-    @Test\n-    public void testAuthConfig() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"true\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-        // Restore config\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"false\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-\n-        // Exercise response codes for REST requests.\n-        CommandArgs commandArgs = new CommandArgs(Collections.emptyList(), new AdminCommandState());\n-        ControllerListScopesCommand command = new ControllerListScopesCommand(commandArgs);\n-        command.printResponseInfo(Response.status(Response.Status.UNAUTHORIZED).build());\n-        command.printResponseInfo(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n-    }\n-\n-    static String executeCommand(String inputCommand, AdminCommandState state, int servicePort) throws Exception {\n-        Parser.Command pc = Parser.parse(inputCommand);\n-        Assert.assertNotNull(pc.toString());\n-        CommandArgs args = new CommandArgs(pc.getArgs(), state);\n-        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        TestingDescribeStreamCommand cmd = new TestingDescribeStreamCommand(args, servicePort);\n-        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n-            cmd.setOut(ps);\n-            cmd.execute();\n-        }\n-        return new String(baos.toByteArray(), StandardCharsets.UTF_8);\n-    }\n-\n-    private static class TestingDescribeStreamCommand extends ControllerDescribeStreamCommand {\n-        private final int servicePort;\n-\n-        /**\n-         * Creates a new instance of the Command class.\n-         *\n-         * @param args The arguments for the command.\n-         */\n-        public TestingDescribeStreamCommand(CommandArgs args, int servicePort) {\n-            super(args);\n-            this.servicePort = servicePort;\n-        }\n-\n-        @Override\n-        protected SegmentHelper instantiateSegmentHelper(CuratorFramework zkClient) {\n-            HostMonitorConfig hostMonitorConfig = HostMonitorConfigImpl.builder()\n-                    .hostMonitorEnabled(false)\n-                    .hostContainerMap(getHostContainerMap(Collections.singletonList(\"localhost:\" + servicePort),\n-                            getServiceConfig().getContainerCount()))\n-                    .hostMonitorMinRebalanceInterval(Config.CLUSTER_MIN_REBALANCE_INTERVAL)\n-                    .containerCount(getServiceConfig().getContainerCount())\n-                    .build();\n-            HostControllerStore hostStore = HostStoreFactory.createStore(hostMonitorConfig, StoreClientFactory.createZKStoreClient(zkClient));\n-            ClientConfig clientConfig = ClientConfig.builder()\n-                    .controllerURI(URI.create(getCLIControllerConfig().getControllerGrpcURI()))\n-                    .validateHostName(false)\n-                    .credentials(new DefaultCredentials(getCLIControllerConfig().getPassword(),\n-                            getCLIControllerConfig().getUserName()))\n-                    .build();\n-            ConnectionPool pool = new ConnectionPoolImpl(clientConfig, new SocketConnectionFactoryImpl(clientConfig));\n-            return new SegmentHelper(pool, hostStore, pool.getInternalExecutor());\n-        }\n-\n-        private Map<Host, Set<Integer>> getHostContainerMap(List<String> uri, int containerCount) {\n-            Exceptions.checkNotNullOrEmpty(uri, \"uri\");\n-\n-            Map<Host, Set<Integer>> hostContainerMap = new HashMap<>();\n-            uri.forEach(x -> {\n-                // Get the host and port from the URI\n-                String host = x.split(\":\")[0];\n-                int port = Integer.parseInt(x.split(\":\")[1]);\n-                Preconditions.checkNotNull(host, \"host\");\n-                Preconditions.checkArgument(port > 0, \"port\");\n-                Preconditions.checkArgument(containerCount > 0, \"containerCount\");\n-                hostContainerMap.put(new Host(host, port, null), IntStream.range(0, containerCount).boxed().collect(Collectors.toSet()));\n-            });\n-            return hostContainerMap;\n-        }\n-\n-        @Override\n-        public void execute() {\n-            super.execute();\n-        }\n-    }\n }\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 200683ffb..2437480ba 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -15,7 +15,7 @@ public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n \n     @Before\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         authEnabled = true;\n         super.setUp();\n     }\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\ndeleted file mode 100644\nindex 2437480ba..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ /dev/null\n", "chunk": "@@ -1,22 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin.controller;\n-\n-import org.junit.Before;\n-\n-public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n-\n-    @Before\n-    @Override\n-    public void setUp() {\n-        authEnabled = true;\n-        super.setUp();\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU0NzIxMA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531547210", "bodyText": "If auth is enabled, you'll need to specify Credentials too.", "author": "ravisharda", "createdAt": "2020-11-27T11:32:05Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+\n+            } catch (KeyStoreException e) {\n+                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n+            } catch (IOException e) {\n+                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n+            } catch (NoSuchAlgorithmException e) {\n+                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n+            } catch (CertificateException e) {\n+                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+            }\n+\n+            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n+            client = ClientBuilder.newBuilder()", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDU2OQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040569", "bodyText": "The credentials are registered in the next lines.", "author": "anirudhkovuru", "createdAt": "2020-11-28T13:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU0NzIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex c042c3685..ac7da01ea 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -59,45 +58,39 @@ public abstract class ControllerCommand extends AdminCommand {\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n \n         Client client;\n \n-        // If tls parameters are configured, set them in client\n-        if (getCLIControllerConfig().isTlsEnabled()) {\n-            KeyStore ks = null;\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n             try {\n-                @Cleanup\n-                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n-                ks = KeyStore.getInstance(\"JKS\");\n-                ks.load(trustStore, null);\n-\n-            } catch (KeyStoreException e) {\n-                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n-            } catch (IOException e) {\n-                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n-            } catch (NoSuchAlgorithmException e) {\n-                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n-            } catch (CertificateException e) {\n-                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n+                e.printStackTrace();\n+                return null;\n             }\n-\n-            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n             client = ClientBuilder.newBuilder()\n                     .withConfig(clientConfig)\n-                    .trustStore(ks)\n-                    .hostnameVerifier(controllerHostnameVerifier)\n+                    .sslContext(tlsContext)\n                     .build();\n         } else {\n             client = ClientBuilder.newClient(clientConfig);\n         }\n \n         // If authorization parameters are configured, set them in the client.\n-        if (getCLIControllerConfig().isAuthEnabled()) {\n-            HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(getCLIControllerConfig().getUserName(),\n-                    getCLIControllerConfig().getPassword());\n+        if (config.isAuthEnabled()) {\n+            HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n+                    config.getPassword());\n             client = client.register(auth);\n         }\n         return new Context(client);\n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex ac7da01ea..8f1c49e99 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -76,17 +76,12 @@ public abstract class ControllerCommand extends AdminCommand {\n                 tlsContext.init(null, tmf.getTrustManagers(), null);\n             } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n                 output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n-                e.printStackTrace();\n+                output(e.getMessage());\n                 return null;\n             }\n-            client = ClientBuilder.newBuilder()\n-                    .withConfig(clientConfig)\n-                    .sslContext(tlsContext)\n-                    .build();\n-        } else {\n-            client = ClientBuilder.newClient(clientConfig);\n+            builder.sslContext(tlsContext);\n         }\n-\n+        Client client = builder.build();\n         // If authorization parameters are configured, set them in the client.\n         if (config.isAuthEnabled()) {\n             HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2MTk1NA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531561954", "bodyText": "Curious, why do you need a custom hostname verifier here? You could use one of the standard ones.\nHere's how we do it in the client (for the call to segment store):\n\n  \n    \n      pravega/client/src/main/java/io/pravega/client/connection/impl/TcpClientConnection.java\n    \n    \n        Lines 243 to 251\n      in\n      899a82d\n    \n    \n    \n    \n\n        \n          \n           if (clientConfig.isValidateHostName()) { \n        \n\n        \n          \n               SSLParameters tlsParams = new SSLParameters(); \n        \n\n        \n          \n            \n        \n\n        \n          \n               // While the connection is to a TCP service and not an HTTP server, we use `HTTPS` as the endpoint \n        \n\n        \n          \n               // identification algorithm, which in turn ensures that the SSLSocket will verify the server's host \n        \n\n        \n          \n               // name during TLS handshake. This is a commonly used way of enabling hostname verification \n        \n\n        \n          \n               // regardless of whether the service itself is HTTP (no in this case). \n        \n\n        \n          \n               tlsParams.setEndpointIdentificationAlgorithm(\"HTTPS\"); \n        \n\n        \n          \n               tlsClientSocket.setSSLParameters(tlsParams);", "author": "ravisharda", "createdAt": "2020-11-27T12:02:09Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.utils;\n+\n+import javax.net.ssl.HostnameVerifier;\n+import javax.net.ssl.SSLSession;\n+\n+public class ControllerHostnameVerifier implements HostnameVerifier {", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0NDk2NQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532644965", "bodyText": "Instead of having a HostnameVerfier, using SSLContext as suggested.", "author": "anirudhkovuru", "createdAt": "2020-11-30T14:40:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2MTk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java b/cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java\ndeleted file mode 100644\nindex 9ba40cedc..000000000\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java\n+++ /dev/null\n", "chunk": "@@ -1,20 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin.utils;\n-\n-import javax.net.ssl.HostnameVerifier;\n-import javax.net.ssl.SSLSession;\n-\n-public class ControllerHostnameVerifier implements HostnameVerifier {\n-    @Override\n-    public boolean verify(String s, SSLSession sslSession) {\n-        return s.equalsIgnoreCase(sslSession.getPeerHost());\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2MzExMw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531563113", "bodyText": "The String \"../../config\" gets repeated many times below. Create a String constant and use it here and below.", "author": "ravisharda", "createdAt": "2020-11-27T12:04:39Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n+\n+    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    // Security related flags and instantiate local pravega server.\n+    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n+    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n+    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(controllerPort)\n+                .segmentStorePort(segmentStorePort)\n+                .zkPort(TestUtils.getAvailableListenPort())\n+                .restServerPort(TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(restServerPort)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n+        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n+        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n+        // explicit in the respective test classes.\n+\n+        if (authEnabled) {\n+            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0NDQ2MQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532644461", "bodyText": "Stored in a local variable.", "author": "anirudhkovuru", "createdAt": "2020-11-30T14:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2MzExMw=="}], "type": "inlineReview", "revised_code": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 390b71056..4b045d90b 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -59,17 +78,17 @@ public abstract class AbstractTlsAdminCommandTest {\n         // explicit in the respective test classes.\n \n         if (authEnabled) {\n-            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n+            emulatorBuilder.passwdFile(location + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n                     .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n                     .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n         }\n \n         if (tlsEnabled) {\n-            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n+            emulatorBuilder.certFile(location + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n+                    .keyFile(location + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n+                    .jksKeyFile(location + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n+                    .jksTrustFile(location + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n+                    .keyPasswordFile(location + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n         }\n \n         localPravega = emulatorBuilder.build();\n", "next_change": {"commit": "25ad699eeda86b64d09879c28aacd16e3e79a03a", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\nindex 4b045d90b..549fcae60 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n", "chunk": "@@ -78,72 +62,28 @@ public abstract class AbstractTlsAdminCommandTest {\n         // explicit in the respective test classes.\n \n         if (authEnabled) {\n-            emulatorBuilder.passwdFile(location + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n+            emulatorBuilder.passwdFile(pathToConfig() + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n                     .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n                     .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n         }\n \n         if (tlsEnabled) {\n-            emulatorBuilder.certFile(location + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(location + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(location + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(location + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(location + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n+            emulatorBuilder.certFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n+                    .keyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n+                    .jksKeyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n+                    .jksTrustFile(pathToConfig() + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n+                    .keyPasswordFile(pathToConfig() + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n         }\n+        LOCAL_PRAVEGA.set(emulatorBuilder.build());\n+        LOCAL_PRAVEGA.get().start();\n+        setAdminCLIProperties(\"localhost:\" + restServerPort,\n+                \"localhost:\" + controllerPort,\n+                LOCAL_PRAVEGA.get().getInProcPravegaCluster().getZkUrl(),\n+                4, authEnabled, \"secret\", tlsEnabled, STATE);\n \n-        localPravega = emulatorBuilder.build();\n-        localPravega.start();\n-\n-        // Set the CLI properties.\n-        state.set(new AdminCommandState());\n-        Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.controller.rest.uri\", \"localhost:\" + restServerPort.toString());\n-        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", \"localhost:\" + controllerPort.toString());\n-        pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", localPravega.getInProcPravegaCluster().getZkUrl());\n-        pravegaProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(authEnabled));\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        pravegaProperties.setProperty(\"cli.security.auth.token.signingKey\", \"secret\");\n-        pravegaProperties.setProperty(\"cli.security.tls.enable\", Boolean.toString(tlsEnabled));\n-        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", location + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME);\n-\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-    }\n-\n-    @After\n-    @SneakyThrows\n-    public void tearDown() {\n-        if (localPravega != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected ClientConfig prepareValidClientConfig() {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(this.localPravega.getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(location + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-\n-    @Test\n-    @SneakyThrows\n-    public void testAllCommands() {\n         String scope = \"testScope\";\n         String testStream = \"testStream\";\n-        String readerGroup = UUID.randomUUID().toString().replace(\"-\", \"\");\n-        ReaderGroupConfig readerGroupConfig = ReaderGroupConfig.builder()\n-                .stream(Stream.of(scope, testStream))\n-                .disableAutomaticCheckpoints()\n-                .build();\n-        ClientConfig clientConfig = prepareValidClientConfig();\n+        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n \n         // Generate the scope and stream required for testing.\n         @Cleanup\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\ndeleted file mode 100644\nindex 549fcae60..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,134 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin;\n-\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.local.LocalPravegaEmulator;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import lombok.Cleanup;\n-import lombok.SneakyThrows;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.net.URI;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.admin.utils.TestUtils.pathToConfig;\n-import static io.pravega.cli.admin.utils.TestUtils.setAdminCLIProperties;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-public abstract class AbstractTlsAdminCommandTest {\n-\n-    protected static final AtomicReference<LocalPravegaEmulator> LOCAL_PRAVEGA = new AtomicReference<>();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n-\n-    public static void setUpLocalPravegaEmulator(boolean authEnabled, boolean tlsEnabled) throws Exception {\n-        final int controllerPort = TestUtils.getAvailableListenPort();\n-        final int segmentStorePort = TestUtils.getAvailableListenPort();\n-        final int restServerPort = TestUtils.getAvailableListenPort();\n-        // Create the secure Pravega server to test commands against.\n-        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n-                .controllerPort(controllerPort)\n-                .segmentStorePort(segmentStorePort)\n-                .zkPort(TestUtils.getAvailableListenPort())\n-                .restServerPort(TestUtils.getAvailableListenPort())\n-                .enableRestServer(true)\n-                .restServerPort(restServerPort)\n-                .enableAuth(authEnabled)\n-                .enableTls(tlsEnabled);\n-\n-        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n-        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n-        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n-        // explicit in the respective test classes.\n-\n-        if (authEnabled) {\n-            emulatorBuilder.passwdFile(pathToConfig() + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n-                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n-                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n-        }\n-\n-        if (tlsEnabled) {\n-            emulatorBuilder.certFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                    .keyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                    .jksKeyFile(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n-                    .jksTrustFile(pathToConfig() + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n-                    .keyPasswordFile(pathToConfig() + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n-        }\n-        LOCAL_PRAVEGA.set(emulatorBuilder.build());\n-        LOCAL_PRAVEGA.get().start();\n-        setAdminCLIProperties(\"localhost:\" + restServerPort,\n-                \"localhost:\" + controllerPort,\n-                LOCAL_PRAVEGA.get().getInProcPravegaCluster().getZkUrl(),\n-                4, authEnabled, \"secret\", tlsEnabled, STATE);\n-\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = prepareValidClientConfig(authEnabled, tlsEnabled);\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        assertTrue(\"Failed to create the stream \", isStreamCreated);\n-    }\n-\n-    @BeforeClass\n-    @SneakyThrows\n-    public static void setUp() {\n-        setUpLocalPravegaEmulator(false, true);\n-    }\n-\n-    @AfterClass\n-    @SneakyThrows\n-    public static void tearDown() {\n-        val localPravega = LOCAL_PRAVEGA.get();\n-        if (LOCAL_PRAVEGA.get() != null) {\n-            localPravega.close();\n-        }\n-    }\n-\n-    protected static ClientConfig prepareValidClientConfig(boolean authEnabled, boolean tlsEnabled) {\n-        ClientConfig.ClientConfigBuilder clientBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(LOCAL_PRAVEGA.get().getInProcPravegaCluster().getControllerURI()));\n-        if (authEnabled) {\n-            clientBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        if (tlsEnabled) {\n-            clientBuilder.trustStore(pathToConfig() + SecurityConfigDefaults.TLS_CA_CERT_FILE_NAME)\n-                    .validateHostName(false);\n-        }\n-        return clientBuilder.build();\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NDU2OQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531564569", "bodyText": "In general, you should avoid throwing the base Exception. If you must throw, throw the specific exceptions. Here, in the tests, throwing exceptions is meaningless, so you could simplify the code a bit by adding a @SneakyThrows exception, if you will.", "author": "ravisharda", "createdAt": "2020-11-27T12:07:53Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+\n+\n+    @Test\n+    public void testListScopesCommand() throws Exception {\n+        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n+        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n+        // Check that both the new scope and the system one exist.\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n+        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testDescribeScopeCommand() throws Exception {\n+        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", state.get());\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertNotNull(ControllerDescribeStreamCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testListStreamsCommand() throws Exception {", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0NDIxMw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532644213", "bodyText": "Using @SneakyThrows now.", "author": "anirudhkovuru", "createdAt": "2020-11-30T14:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NDU2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex ac18f5189..200683ffb 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -64,191 +19,4 @@ public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest\n         authEnabled = true;\n         super.setUp();\n     }\n-\n-\n-    @Test\n-    public void testListScopesCommand() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeScopeCommand() throws Exception {\n-        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertNotNull(ControllerDescribeStreamCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListStreamsCommand() throws Exception {\n-        String testStream = \"testListStreamsCommand\";\n-        setupUtils.createTestStream(testStream, 1);\n-        String commandResult = TestUtils.executeCommand(\"controller list-streams \" + setupUtils.getScope(), state.get());\n-        // Check that the newly created stream is retrieved as part of the list of streams.\n-        Assert.assertTrue(commandResult.contains(testStream));\n-        Assert.assertNotNull(ControllerListStreamsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testListReaderGroupsCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller list-readergroups _system\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerListReaderGroupsInScopeCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeReaderGroupCommand() throws Exception {\n-        // Check that the system reader group can be listed.\n-        String commandResult = TestUtils.executeCommand(\"controller describe-readergroup _system commitStreamReaders\", state.get());\n-        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n-        Assert.assertNotNull(ControllerDescribeReaderGroupCommand.descriptor());\n-    }\n-\n-    @Test\n-    public void testDescribeStreamCommand() throws Exception {\n-        String scope = \"testScope\";\n-        String testStream = \"testStream\";\n-        ClientConfig clientConfig = setupUtils.generateValidClientConfig();\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        Assert.assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        Assert.assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        Assert.assertTrue(\"Failed to create the stream \", isStreamCreated);\n-\n-        String commandResult = executeCommand(\"controller describe-stream \" + scope + \" \" + testStream, state.get(), setupUtils.getServicePort());\n-        Assert.assertTrue(commandResult.contains(\"stream_config\"));\n-        Assert.assertTrue(commandResult.contains(\"stream_state\"));\n-        Assert.assertTrue(commandResult.contains(\"segment_count\"));\n-        Assert.assertTrue(commandResult.contains(\"is_sealed\"));\n-        Assert.assertTrue(commandResult.contains(\"active_epoch\"));\n-        Assert.assertTrue(commandResult.contains(\"truncation_record\"));\n-        Assert.assertTrue(commandResult.contains(\"scaling_info\"));\n-\n-        // Exercise actual instantiateSegmentHelper\n-        CommandArgs commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        ControllerDescribeStreamCommand command = new ControllerDescribeStreamCommand(commandArgs);\n-        @Cleanup\n-        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(setupUtils.getZkTestServer().getConnectString(),\n-                new RetryOneTime(5000));\n-        curatorFramework.start();\n-        Assert.assertNotNull(command.instantiateSegmentHelper(curatorFramework));\n-\n-        // Try the Zookeeper backend, which is expected to fail and be handled by the command.\n-        Properties properties = new Properties();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.ZOOKEEPER.name());\n-        state.get().getConfigBuilder().include(properties);\n-        commandArgs = new CommandArgs(Arrays.asList(scope, testStream), state.get());\n-        new ControllerDescribeStreamCommand(commandArgs).execute();\n-        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.SEGMENTSTORE.name());\n-        state.get().getConfigBuilder().include(properties);\n-    }\n-\n-    @Test\n-    public void testAuthConfig() throws Exception {\n-        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n-        Properties pravegaProperties = new Properties();\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"true\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n-        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        // Check that both the new scope and the system one exist.\n-        Assert.assertTrue(commandResult.contains(\"_system\"));\n-        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n-        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n-        // Restore config\n-        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"false\");\n-        state.get().getConfigBuilder().include(pravegaProperties);\n-\n-        // Exercise response codes for REST requests.\n-        CommandArgs commandArgs = new CommandArgs(Collections.emptyList(), new AdminCommandState());\n-        ControllerListScopesCommand command = new ControllerListScopesCommand(commandArgs);\n-        command.printResponseInfo(Response.status(Response.Status.UNAUTHORIZED).build());\n-        command.printResponseInfo(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n-    }\n-\n-    static String executeCommand(String inputCommand, AdminCommandState state, int servicePort) throws Exception {\n-        Parser.Command pc = Parser.parse(inputCommand);\n-        Assert.assertNotNull(pc.toString());\n-        CommandArgs args = new CommandArgs(pc.getArgs(), state);\n-        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        TestingDescribeStreamCommand cmd = new TestingDescribeStreamCommand(args, servicePort);\n-        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n-            cmd.setOut(ps);\n-            cmd.execute();\n-        }\n-        return new String(baos.toByteArray(), StandardCharsets.UTF_8);\n-    }\n-\n-    private static class TestingDescribeStreamCommand extends ControllerDescribeStreamCommand {\n-        private final int servicePort;\n-\n-        /**\n-         * Creates a new instance of the Command class.\n-         *\n-         * @param args The arguments for the command.\n-         */\n-        public TestingDescribeStreamCommand(CommandArgs args, int servicePort) {\n-            super(args);\n-            this.servicePort = servicePort;\n-        }\n-\n-        @Override\n-        protected SegmentHelper instantiateSegmentHelper(CuratorFramework zkClient) {\n-            HostMonitorConfig hostMonitorConfig = HostMonitorConfigImpl.builder()\n-                    .hostMonitorEnabled(false)\n-                    .hostContainerMap(getHostContainerMap(Collections.singletonList(\"localhost:\" + servicePort),\n-                            getServiceConfig().getContainerCount()))\n-                    .hostMonitorMinRebalanceInterval(Config.CLUSTER_MIN_REBALANCE_INTERVAL)\n-                    .containerCount(getServiceConfig().getContainerCount())\n-                    .build();\n-            HostControllerStore hostStore = HostStoreFactory.createStore(hostMonitorConfig, StoreClientFactory.createZKStoreClient(zkClient));\n-            ClientConfig clientConfig = ClientConfig.builder()\n-                    .controllerURI(URI.create(getCLIControllerConfig().getControllerGrpcURI()))\n-                    .validateHostName(false)\n-                    .credentials(new DefaultCredentials(getCLIControllerConfig().getPassword(),\n-                            getCLIControllerConfig().getUserName()))\n-                    .build();\n-            ConnectionPool pool = new ConnectionPoolImpl(clientConfig, new SocketConnectionFactoryImpl(clientConfig));\n-            return new SegmentHelper(pool, hostStore, pool.getInternalExecutor());\n-        }\n-\n-        private Map<Host, Set<Integer>> getHostContainerMap(List<String> uri, int containerCount) {\n-            Exceptions.checkNotNullOrEmpty(uri, \"uri\");\n-\n-            Map<Host, Set<Integer>> hostContainerMap = new HashMap<>();\n-            uri.forEach(x -> {\n-                // Get the host and port from the URI\n-                String host = x.split(\":\")[0];\n-                int port = Integer.parseInt(x.split(\":\")[1]);\n-                Preconditions.checkNotNull(host, \"host\");\n-                Preconditions.checkArgument(port > 0, \"port\");\n-                Preconditions.checkArgument(containerCount > 0, \"containerCount\");\n-                hostContainerMap.put(new Host(host, port, null), IntStream.range(0, containerCount).boxed().collect(Collectors.toSet()));\n-            });\n-            return hostContainerMap;\n-        }\n-\n-        @Override\n-        public void execute() {\n-            super.execute();\n-        }\n-    }\n }\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\nindex 200683ffb..2437480ba 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n", "chunk": "@@ -15,7 +15,7 @@ public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n \n     @Before\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         authEnabled = true;\n         super.setUp();\n     }\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\ndeleted file mode 100644\nindex 2437480ba..000000000\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java\n+++ /dev/null\n", "chunk": "@@ -1,22 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.admin.controller;\n-\n-import org.junit.Before;\n-\n-public class AuthEnabledControllerCommandsTest extends ControllerCommandsTest {\n-\n-    @Before\n-    @Override\n-    public void setUp() {\n-        authEnabled = true;\n-        super.setUp();\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MDgwNw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531570807", "bodyText": "You seem to be using getCLIControllerConfig() multiple times. (The name of that method is misleading - it actually does a bit of processing as opposed to returning a cached value that one'd usually expect from a method having a name starting with get). You might want to call it once, store the value in a variable and reuse it.", "author": "ravisharda", "createdAt": "2020-11-27T12:21:14Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+\n+            } catch (KeyStoreException e) {\n+                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n+            } catch (IOException e) {\n+                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n+            } catch (NoSuchAlgorithmException e) {\n+                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n+            } catch (CertificateException e) {\n+                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+            }\n+\n+            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n+            client = ClientBuilder.newBuilder()\n+                    .withConfig(clientConfig)\n+                    .trustStore(ks)\n+                    .hostnameVerifier(controllerHostnameVerifier)\n+                    .build();\n+        } else {\n+            client = ClientBuilder.newClient(clientConfig);\n+        }\n+\n         // If authorization parameters are configured, set them in the client.\n         if (getCLIControllerConfig().isAuthEnabled()) {", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDY2OA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040668", "bodyText": "Moved the return of getCLIControllerConfig() to a single variable which is used everywhere.", "author": "anirudhkovuru", "createdAt": "2020-11-28T13:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MDgwNw=="}], "type": "inlineReview", "revised_code": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex c042c3685..0aa468f78 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -95,9 +90,9 @@ public abstract class ControllerCommand extends AdminCommand {\n         }\n \n         // If authorization parameters are configured, set them in the client.\n-        if (getCLIControllerConfig().isAuthEnabled()) {\n-            HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(getCLIControllerConfig().getUserName(),\n-                    getCLIControllerConfig().getPassword());\n+        if (config.isAuthEnabled()) {\n+            HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n+                    config.getPassword());\n             client = client.register(auth);\n         }\n         return new Context(client);\n", "next_change": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex 0aa468f78..8f1c49e99 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -62,33 +63,25 @@ public abstract class ControllerCommand extends AdminCommand {\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n \n-        Client client;\n+        ClientBuilder builder = ClientBuilder.newBuilder().withConfig(clientConfig);\n \n         // If TLS parameters are configured, set them in client.\n         if (config.isTlsEnabled()) {\n-            KeyStore ks = null;\n+            SSLContext tlsContext;\n             try {\n-                ks = createTrustStore(config.getTruststore());\n-            } catch (KeyStoreException e) {\n-                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n-            } catch (IOException e) {\n-                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n-            } catch (NoSuchAlgorithmException e) {\n-                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n-            } catch (CertificateException e) {\n-                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n+                output(e.getMessage());\n+                return null;\n             }\n-\n-            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n-            client = ClientBuilder.newBuilder()\n-                    .withConfig(clientConfig)\n-                    .trustStore(ks)\n-                    .hostnameVerifier(controllerHostnameVerifier)\n-                    .build();\n-        } else {\n-            client = ClientBuilder.newClient(clientConfig);\n+            builder.sslContext(tlsContext);\n         }\n-\n+        Client client = builder.build();\n         // If authorization parameters are configured, set them in the client.\n         if (config.isAuthEnabled()) {\n             HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MzkxMw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531573913", "bodyText": "This test is too ambitious. It tests multiple behaviors in a single test. If one behavior fails later if something is changed, it'll mask failures in other behaviors. Please refactor this into multiple tests.", "author": "ravisharda", "createdAt": "2020-11-27T12:27:51Z", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import io.pravega.cli.admin.AbstractTlsAdminCommandTest;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import lombok.Cleanup;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.UUID;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TLSEnabledControllerCommandsTest extends AbstractTlsAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        tlsEnabled = true;\n+        super.setUp();\n+    }\n+\n+    @After\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    @Test\n+    public void testAllCommands() throws Exception {", "originalCommit": "fc306721dddc649295fcd733a9a589f99849363e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MTk5NA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534241994", "bodyText": "Resolved all ambitious tests", "author": "anirudhkovuru", "createdAt": "2020-12-02T15:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MzkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\nindex fcac0accd..8b2504033 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\n", "chunk": "@@ -36,59 +20,4 @@ public class TLSEnabledControllerCommandsTest extends AbstractTlsAdminCommandTes\n         tlsEnabled = true;\n         super.setUp();\n     }\n-\n-    @After\n-    @Override\n-    public void tearDown() throws Exception {\n-        super.tearDown();\n-    }\n-\n-    @Test\n-    public void testAllCommands() throws Exception {\n-        String scope = \"TLSEnabledScope\";\n-        String testStream = \"TLSEnabledStream\";\n-        String readerGroup = UUID.randomUUID().toString().replace(\"-\", \"\");\n-        ReaderGroupConfig readerGroupConfig = ReaderGroupConfig.builder()\n-                .stream(Stream.of(scope, testStream))\n-                .disableAutomaticCheckpoints()\n-                .build();\n-        ClientConfig clientConfig = prepareValidClientConfig();\n-\n-        // Generate the scope and stream required for testing.\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        assertNotNull(streamManager);\n-\n-        boolean isScopeCreated = streamManager.createScope(scope);\n-\n-        // Check if scope created successfully.\n-        assertTrue(\"Failed to create scope\", isScopeCreated);\n-\n-        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n-                .scalingPolicy(ScalingPolicy.fixed(1))\n-                .build());\n-\n-        // Check if stream created successfully.\n-        assertTrue(\"Failed to create the stream \", isStreamCreated);\n-\n-        @Cleanup\n-        ReaderGroupManager readerGroupManager = ReaderGroupManager.withScope(scope, clientConfig);\n-        readerGroupManager.createReaderGroup(readerGroup, readerGroupConfig);\n-\n-        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n-        assertTrue(\"ListScopesCommand failed.\", commandResult.contains(scope));\n-        assertNotNull(ControllerListScopesCommand.descriptor());\n-\n-        commandResult = TestUtils.executeCommand(\"controller list-streams \" + scope, state.get());\n-        assertTrue(\"ListStreamsCommand failed.\", commandResult.contains(testStream));\n-        assertNotNull(ControllerListStreamsInScopeCommand.descriptor());\n-\n-        commandResult = TestUtils.executeCommand(\"controller list-readergroups \" + scope, state.get());\n-        assertTrue(\"ListReaderGroupsCommand failed.\", commandResult.contains(readerGroup));\n-        assertNotNull(ControllerListReaderGroupsInScopeCommand.descriptor());\n-\n-        commandResult = TestUtils.executeCommand(\"controller describe-scope \" + scope, state.get());\n-        assertTrue(\"DescribeScopeCommand failed.\", commandResult.contains(scope));\n-        assertNotNull(ControllerDescribeStreamCommand.descriptor());\n-    }\n }\n", "next_change": {"commit": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\nindex 8b2504033..209b326c5 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\n", "chunk": "@@ -16,7 +16,7 @@ public class TLSEnabledControllerCommandsTest extends AbstractTlsAdminCommandTes\n \n     @Before\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         tlsEnabled = true;\n         super.setUp();\n     }\n", "next_change": {"commit": "25ad699eeda86b64d09879c28aacd16e3e79a03a", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\nindex 209b326c5..490cccef7 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\n", "chunk": "@@ -10,14 +10,40 @@\n package io.pravega.cli.admin.controller;\n \n import io.pravega.cli.admin.AbstractTlsAdminCommandTest;\n-import org.junit.Before;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import lombok.SneakyThrows;\n+import org.junit.Assert;\n+import org.junit.Test;\n \n public class TLSEnabledControllerCommandsTest extends AbstractTlsAdminCommandTest {\n \n-    @Before\n-    @Override\n-    public void setUp() {\n-        tlsEnabled = true;\n-        super.setUp();\n+    @Test\n+    @SneakyThrows\n+    public void testListScopesCommand() {\n+        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+    }\n+\n+    @Test\n+    @SneakyThrows\n+    public void testListStreamsCommand() {\n+        String commandResult = TestUtils.executeCommand(\"controller list-streams testScope\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"testStream\"));\n+    }\n+\n+    @Test\n+    @SneakyThrows\n+    public void testListReaderGroupsCommand() {\n+        String commandResult = TestUtils.executeCommand(\"controller list-readergroups _system\", STATE.get());\n+        System.out.println(commandResult);\n+        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n+    }\n+\n+    @Test\n+    @SneakyThrows\n+    public void testDescribeScopeCommand() {\n+        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", STATE.get());\n+        System.out.println(commandResult);\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n     }\n }\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\nindex 490cccef7..ad4e9ef2b 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\n", "chunk": "@@ -46,4 +55,39 @@ public class TLSEnabledControllerCommandsTest extends AbstractTlsAdminCommandTes\n         System.out.println(commandResult);\n         Assert.assertTrue(commandResult.contains(\"_system\"));\n     }\n+\n+    @Test\n+    @SneakyThrows\n+    public void testAuthConfig() {\n+        String scope = \"testScope\";\n+        Properties pravegaProperties = new Properties();\n+        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"true\");\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n+        STATE.get().getConfigBuilder().include(pravegaProperties);\n+        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", STATE.get());\n+        // Check that both the new scope and the system one exist.\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertTrue(commandResult.contains(scope));\n+        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n+        // Restore config\n+        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"false\");\n+        STATE.get().getConfigBuilder().include(pravegaProperties);\n+\n+        // Exercise response codes for REST requests.\n+        @Cleanup\n+        val c1 = new AdminCommandState();\n+        CommandArgs commandArgs = new CommandArgs(Collections.emptyList(), c1);\n+        ControllerListScopesCommand command = new ControllerListScopesCommand(commandArgs);\n+        command.printResponseInfo(Response.status(Response.Status.UNAUTHORIZED).build());\n+        command.printResponseInfo(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n+    }\n+\n+    public static class SecureControllerCommandsTest extends TLSEnabledControllerCommandsTest {\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            setUpCluster(true, true);\n+        }\n+    }\n }\n+\n", "next_change": {"commit": "97dfd86bceb04477d11554120eb730cbf7fe9e38", "changed_code": [{"header": "diff --git a/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java b/cli/admin/src/test/java/io/pravega/cli/admin/controller/SecureControllerCommandsTest.java\nsimilarity index 77%\nrename from cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\nrename to cli/admin/src/test/java/io/pravega/cli/admin/controller/SecureControllerCommandsTest.java\nindex ad4e9ef2b..7e76e6f54 100644\n--- a/cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java\n+++ b/cli/admin/src/test/java/io/pravega/cli/admin/controller/SecureControllerCommandsTest.java\n", "chunk": "@@ -83,10 +87,26 @@ public class TLSEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n         command.printResponseInfo(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n     }\n \n-    public static class SecureControllerCommandsTest extends TLSEnabledControllerCommandsTest {\n+    public static class AuthEnabledControllerCommandsTest extends SecureControllerCommandsTest {\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            setUpCluster(true, false);\n+        }\n+\n+        @Test\n+        @SneakyThrows\n+        public void testDescribeReaderGroupCommand() {\n+            // Check that the system reader group can be listed.\n+            String commandResult = TestUtils.executeCommand(\"controller describe-readergroup _system commitStreamReaders\", STATE.get());\n+            Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n+            Assert.assertNotNull(ControllerDescribeReaderGroupCommand.descriptor());\n+        }\n+    }\n+\n+    public static class TLSEnabledControllerCommandsTest extends SecureControllerCommandsTest {\n         @BeforeClass\n         public static void setUp() throws Exception {\n-            setUpCluster(true, true);\n+            setUpCluster(false, true);\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "url": "https://github.com/pravega/pravega/commit/ccc19ed1f9cde60ce792e5e12b3d454be0ef769d", "message": "Adding tokenSigningKey, removing duplicate tests\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-28T13:16:27Z", "type": "commit"}, {"oid": "c62eb73259427d44fd3866138919a5a60fff3fc8", "url": "https://github.com/pravega/pravega/commit/c62eb73259427d44fd3866138919a5a60fff3fc8", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-11-30T03:48:13Z", "type": "commit"}, {"oid": "d10a1a235e6a28a9fc99e05a842ef07c18680af6", "url": "https://github.com/pravega/pravega/commit/d10a1a235e6a28a9fc99e05a842ef07c18680af6", "message": "Adding coverage\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-30T05:54:56Z", "type": "commit"}, {"oid": "1e1114f90e0eca87a96d84142434ed09fc12fca0", "url": "https://github.com/pravega/pravega/commit/1e1114f90e0eca87a96d84142434ed09fc12fca0", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-11-30T11:16:01Z", "type": "commit"}, {"oid": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "url": "https://github.com/pravega/pravega/commit/a76190e6d970ddccc0ac5e107d170d488c046a8c", "message": "Streamlined admin TLS logic, sneakyThrows for tests\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-30T14:37:43Z", "type": "commit"}, {"oid": "a76190e6d970ddccc0ac5e107d170d488c046a8c", "url": "https://github.com/pravega/pravega/commit/a76190e6d970ddccc0ac5e107d170d488c046a8c", "message": "Streamlined admin TLS logic, sneakyThrows for tests\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-11-30T14:37:43Z", "type": "forcePushed"}, {"oid": "07a9f1196abe32c683a1703beca19a004b5bc1c2", "url": "https://github.com/pravega/pravega/commit/07a9f1196abe32c683a1703beca19a004b5bc1c2", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-12-01T04:12:35Z", "type": "commit"}, {"oid": "31f80bb02466f9f0a630af86f357403fb36b3095", "url": "https://github.com/pravega/pravega/commit/31f80bb02466f9f0a630af86f357403fb36b3095", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-12-01T08:59:21Z", "type": "commit"}, {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971", "url": "https://github.com/pravega/pravega/commit/275425d3fd8fe4b0f08a590d4deb700fc835d971", "message": "Changed wrong admin-cli.properties\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-01T11:38:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3Mzg4Mw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533873883", "bodyText": "Please remove printStackTrace.", "author": "ravisharda", "createdAt": "2020-12-02T03:33:17Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -47,14 +58,39 @@\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n+            try {\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n+                e.printStackTrace();", "originalCommit": "275425d3fd8fe4b0f08a590d4deb700fc835d971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MTczMA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534241730", "bodyText": "Removed", "author": "anirudhkovuru", "createdAt": "2020-12-02T15:09:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3Mzg4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex ac7da01ea..8f1c49e99 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -76,17 +76,12 @@ public abstract class ControllerCommand extends AdminCommand {\n                 tlsContext.init(null, tmf.getTrustManagers(), null);\n             } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n                 output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n-                e.printStackTrace();\n+                output(e.getMessage());\n                 return null;\n             }\n-            client = ClientBuilder.newBuilder()\n-                    .withConfig(clientConfig)\n-                    .sslContext(tlsContext)\n-                    .build();\n-        } else {\n-            client = ClientBuilder.newClient(clientConfig);\n+            builder.sslContext(tlsContext);\n         }\n-\n+        Client client = builder.build();\n         // If authorization parameters are configured, set them in the client.\n         if (config.isAuthEnabled()) {\n             HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NDI2NQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533874265", "bodyText": "Without the additional context, it'd be very difficult to debug this issue. Please output the exception message/trace too.\nCurious, why don't we add some logs to these methods too?", "author": "ravisharda", "createdAt": "2020-12-02T03:34:38Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -47,14 +58,39 @@\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n+            try {\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());", "originalCommit": "275425d3fd8fe4b0f08a590d4deb700fc835d971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MTYyNQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534241625", "bodyText": "I print the error message.", "author": "anirudhkovuru", "createdAt": "2020-12-02T15:09:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NDI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk2NDU5NQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534964595", "bodyText": "Printing the error message gives feedback to the user who is running the command. Logging'd help customer support/developers debugging issues. So, they'd serve different purposes.", "author": "ravisharda", "createdAt": "2020-12-03T08:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NDI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex ac7da01ea..8f1c49e99 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -76,17 +76,12 @@ public abstract class ControllerCommand extends AdminCommand {\n                 tlsContext.init(null, tmf.getTrustManagers(), null);\n             } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n                 output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n-                e.printStackTrace();\n+                output(e.getMessage());\n                 return null;\n             }\n-            client = ClientBuilder.newBuilder()\n-                    .withConfig(clientConfig)\n-                    .sslContext(tlsContext)\n-                    .build();\n-        } else {\n-            client = ClientBuilder.newClient(clientConfig);\n+            builder.sslContext(tlsContext);\n         }\n-\n+        Client client = builder.build();\n         // If authorization parameters are configured, set them in the client.\n         if (config.isAuthEnabled()) {\n             HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NjUyNw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533876527", "bodyText": "nit: The logic here'll be easier to follow with a slight rearrangement. Something like:\nbuilder = ClientBuilder.newBuilder().withConfig(clientConfig); \nif (tls enabled) {\n     builder.sslContext(...)\n} \nClient client = builder.build(); \n\nif (auth enabled) {\n     // do auth-specific stuff\n}\nClient client = builder.build();", "author": "ravisharda", "createdAt": "2020-12-02T03:43:01Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -47,14 +58,39 @@\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n+            try {\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n+                e.printStackTrace();\n+                return null;\n+            }\n+            client = ClientBuilder.newBuilder()\n+                    .withConfig(clientConfig)\n+                    .sslContext(tlsContext)\n+                    .build();\n+        } else {\n+            client = ClientBuilder.newClient(clientConfig);\n+        }\n+\n         // If authorization parameters are configured, set them in the client.\n-        if (getCLIControllerConfig().isAuthEnabled()) {\n-            HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(getCLIControllerConfig().getUserName(),\n-                    getCLIControllerConfig().getPassword());\n+        if (config.isAuthEnabled()) {", "originalCommit": "275425d3fd8fe4b0f08a590d4deb700fc835d971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MTM5MA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534241390", "bodyText": "Following a pattern like this", "author": "anirudhkovuru", "createdAt": "2020-12-02T15:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NjUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\nindex ac7da01ea..8f1c49e99 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java\n", "chunk": "@@ -76,17 +76,12 @@ public abstract class ControllerCommand extends AdminCommand {\n                 tlsContext.init(null, tmf.getTrustManagers(), null);\n             } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n                 output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n-                e.printStackTrace();\n+                output(e.getMessage());\n                 return null;\n             }\n-            client = ClientBuilder.newBuilder()\n-                    .withConfig(clientConfig)\n-                    .sslContext(tlsContext)\n-                    .build();\n-        } else {\n-            client = ClientBuilder.newClient(clientConfig);\n+            builder.sslContext(tlsContext);\n         }\n-\n+        Client client = builder.build();\n         // If authorization parameters are configured, set them in the client.\n         if (config.isAuthEnabled()) {\n             HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(config.getUserName(),\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NzYwNQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533877605", "bodyText": "Some of these config names are inconsistent with the scheme we use elsewhere in Pravega. See the following:\n\nConfiguration Naming Guidelines\nExisting examples\n\nHere are the suggested changes:\n\ncontroller.rest.uri -> controller.connect.rest.uri (because it is connecting to the Controller's REST URI)\ncontroller.grpc.uri -> controller.connect.grpc.uri\nsecurity.auth.credentials.username -> controller.connect.credentials.username\nsecurity.auth.credentials.password -> controller.connect.credentials.pwd (we avoid the term password so that scanners and other tools don't get confused)\nsecurity.auth.token.signingKey -- ? (what is this for, here?)\n\nEtc.\nAs for security.auth.enable (and similar items), it indicates you are enabling auth for CLI. If you are using it for specifying that auth be enabled for CLI to controller communication, the config name'd be different.", "author": "ravisharda", "createdAt": "2020-12-02T03:46:49Z", "path": "cli/admin/src/main/java/io/pravega/cli/admin/utils/CLIControllerConfig.java", "diffHunk": "@@ -24,11 +24,14 @@\n         SEGMENTSTORE, ZOOKEEPER\n     }\n \n-    private static final Property<String> CONTROLLER_REST_URI = Property.named(\"controller.rest.uri\", \"http://localhost:9091\");\n-    private static final Property<String> CONTROLLER_GRPC_URI = Property.named(\"controller.grpc.uri\", \"tcp://localhost:9090\");\n+    private static final Property<String> CONTROLLER_REST_URI = Property.named(\"controller.rest.uri\", \"localhost:9091\");", "originalCommit": "275425d3fd8fe4b0f08a590d4deb700fc835d971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMyMzI1Ng==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534323256", "bodyText": "I've used the guidelines.", "author": "anirudhkovuru", "createdAt": "2020-12-02T16:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NzYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "51efde1853960b302f98ae42a5116648b4999fd4", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/utils/CLIControllerConfig.java b/cli/admin/src/main/java/io/pravega/cli/admin/utils/CLIControllerConfig.java\nindex f4a05d5ac..efce41dab 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/utils/CLIControllerConfig.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/utils/CLIControllerConfig.java\n", "chunk": "@@ -24,14 +24,14 @@ public final class CLIControllerConfig {\n         SEGMENTSTORE, ZOOKEEPER\n     }\n \n-    private static final Property<String> CONTROLLER_REST_URI = Property.named(\"controller.rest.uri\", \"localhost:9091\");\n-    private static final Property<String> CONTROLLER_GRPC_URI = Property.named(\"controller.grpc.uri\", \"localhost:9090\");\n-    private static final Property<Boolean> AUTH_ENABLED = Property.named(\"security.auth.enable\", false);\n-    private static final Property<String> CONTROLLER_USER_NAME = Property.named(\"security.auth.credentials.username\", \"\");\n-    private static final Property<String> CONTROLLER_PASSWORD = Property.named(\"security.auth.credentials.password\", \"\");\n-    private static final Property<String> CONTROLLER_SIGNING_KEY = Property.named(\"security.auth.token.signingKey\", \"\");\n-    private static final Property<Boolean> TLS_ENABLED = Property.named(\"security.tls.enable\", false);\n-    private static final Property<String> TRUSTSTORE_JKS = Property.named(\"security.tls.trustStore.location\", \"\");\n+    private static final Property<String> CONTROLLER_REST_URI = Property.named(\"controller.connect.rest.uri\", \"localhost:9091\");\n+    private static final Property<String> CONTROLLER_GRPC_URI = Property.named(\"controller.connect.grpc.uri\", \"localhost:9090\");\n+    private static final Property<Boolean> AUTH_ENABLED = Property.named(\"controller.connect.channel.auth\", false);\n+    private static final Property<String> CONTROLLER_USER_NAME = Property.named(\"controller.connect.credentials.username\", \"\");\n+    private static final Property<String> CONTROLLER_PASSWORD = Property.named(\"controller.connect.credentials.pwd\", \"\");\n+    private static final Property<String> CONTROLLER_SIGNING_KEY = Property.named(\"controller.connect.delegationToken.signingKey.basis\", \"\");\n+    private static final Property<Boolean> TLS_ENABLED = Property.named(\"controller.connect.channel.tls\", false);\n+    private static final Property<String> TRUSTSTORE_JKS = Property.named(\"controller.connect.trustStore.location\", \"\");\n     private static final Property<String> METADATA_BACKEND = Property.named(\"store.metadata.backend\", MetadataBackends.SEGMENTSTORE.name());\n \n     private static final String COMPONENT_CODE = \"cli\";\n", "next_change": {"commit": "97dfd86bceb04477d11554120eb730cbf7fe9e38", "changed_code": [{"header": "diff --git a/cli/admin/src/main/java/io/pravega/cli/admin/utils/CLIControllerConfig.java b/cli/admin/src/main/java/io/pravega/cli/admin/utils/CLIControllerConfig.java\nindex efce41dab..3676a92f0 100644\n--- a/cli/admin/src/main/java/io/pravega/cli/admin/utils/CLIControllerConfig.java\n+++ b/cli/admin/src/main/java/io/pravega/cli/admin/utils/CLIControllerConfig.java\n", "chunk": "@@ -29,7 +29,6 @@ public final class CLIControllerConfig {\n     private static final Property<Boolean> AUTH_ENABLED = Property.named(\"controller.connect.channel.auth\", false);\n     private static final Property<String> CONTROLLER_USER_NAME = Property.named(\"controller.connect.credentials.username\", \"\");\n     private static final Property<String> CONTROLLER_PASSWORD = Property.named(\"controller.connect.credentials.pwd\", \"\");\n-    private static final Property<String> CONTROLLER_SIGNING_KEY = Property.named(\"controller.connect.delegationToken.signingKey.basis\", \"\");\n     private static final Property<Boolean> TLS_ENABLED = Property.named(\"controller.connect.channel.tls\", false);\n     private static final Property<String> TRUSTSTORE_JKS = Property.named(\"controller.connect.trustStore.location\", \"\");\n     private static final Property<String> METADATA_BACKEND = Property.named(\"store.metadata.backend\", MetadataBackends.SEGMENTSTORE.name());\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MjA4NQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533882085", "bodyText": "Please avoid using abbreviations like this one. A streamMgr or streamManager'd help reduce the cognitive burden on the person who reads the code. Same for sc below.", "author": "ravisharda", "createdAt": "2020-12-02T04:03:02Z", "path": "cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java", "diffHunk": "@@ -65,7 +63,7 @@ public Create(@NonNull CommandArgs commandArgs) {\n         public void execute() {\n             ensureMinArgCount(1);\n             @Cleanup\n-            val sm = StreamManager.create(URI.create(getConfig().getControllerUri()));\n+            val sm = StreamManager.create(getClientConfig());", "originalCommit": "275425d3fd8fe4b0f08a590d4deb700fc835d971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MDQ5Mg==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534240492", "bodyText": "done", "author": "anirudhkovuru", "createdAt": "2020-12-02T15:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MjA4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java b/cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java\nindex 78ace9dcd..d135c7e4a 100644\n--- a/cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java\n+++ b/cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java\n", "chunk": "@@ -63,8 +63,8 @@ public abstract class StreamCommand extends Command {\n         public void execute() {\n             ensureMinArgCount(1);\n             @Cleanup\n-            val sm = StreamManager.create(getClientConfig());\n-            val sc = StreamConfiguration.builder()\n+            val streamManager = StreamManager.create(getClientConfig());\n+            val streamConfiguration = StreamConfiguration.builder()\n                     .scalingPolicy(ScalingPolicy.builder()\n                             .scaleType(ScalingPolicy.ScaleType.FIXED_NUM_SEGMENTS)\n                             .minNumSegments(getConfig().getDefaultSegmentCount())\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MjE1OA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533882158", "bodyText": "same here.", "author": "ravisharda", "createdAt": "2020-12-02T04:03:22Z", "path": "cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java", "diffHunk": "@@ -247,7 +245,7 @@ public void execute() {\n             val readerGroup = UUID.randomUUID().toString().replace(\"-\", \"\");\n             val readerId = UUID.randomUUID().toString().replace(\"-\", \"\");\n \n-            val cc = ClientConfig.builder().controllerURI(getControllerUri()).build();\n+            val cc = getClientConfig();", "originalCommit": "275425d3fd8fe4b0f08a590d4deb700fc835d971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MDQzNA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534240434", "bodyText": "done", "author": "anirudhkovuru", "createdAt": "2020-12-02T15:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MjE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "changed_code": [{"header": "diff --git a/cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java b/cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java\nindex 78ace9dcd..d135c7e4a 100644\n--- a/cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java\n+++ b/cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java\n", "chunk": "@@ -245,12 +245,12 @@ public abstract class StreamCommand extends Command {\n             val readerGroup = UUID.randomUUID().toString().replace(\"-\", \"\");\n             val readerId = UUID.randomUUID().toString().replace(\"-\", \"\");\n \n-            val cc = getClientConfig();\n+            val clientConfig = getClientConfig();\n             val readerConfig = ReaderConfig.builder().build();\n             @Cleanup\n-            val factory = EventStreamClientFactory.withScope(scopedStream.getScope(), cc);\n+            val factory = EventStreamClientFactory.withScope(scopedStream.getScope(), clientConfig);\n             @Cleanup\n-            val rgManager = ReaderGroupManager.withScope(scopedStream.getScope(), cc);\n+            val rgManager = ReaderGroupManager.withScope(scopedStream.getScope(), clientConfig);\n             val rgConfig = ReaderGroupConfig.builder().stream(scopedStream.toString()).build();\n             rgManager.createReaderGroup(readerGroup, rgConfig);\n             try (val reader = factory.createReader(readerId, readerGroup, new UTF8StringSerializer(), readerConfig)) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MjU5Mw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533882593", "bodyText": "nit: The term factory is a bit abstract. A clientFactory is more precise, and eventStreamClientFactory even more so. In general, variable names should be as precise as possible (for reasons like reducing the work that a code reader needs to perform so that the person may focus more on the logic than the syntax). Here, it's not so much an issue as the factory is used right under this statement, so you may choose to leave it as-is.", "author": "ravisharda", "createdAt": "2020-12-02T04:04:47Z", "path": "cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java", "diffHunk": "@@ -183,7 +181,7 @@ public void execute() throws Exception {\n             }\n \n             @Cleanup\n-            val factory = EventStreamClientFactory.withScope(scopedStream.getScope(), ClientConfig.builder().controllerURI(getControllerUri()).build());\n+            val factory = EventStreamClientFactory.withScope(scopedStream.getScope(), getClientConfig());", "originalCommit": "275425d3fd8fe4b0f08a590d4deb700fc835d971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5NTIyNg==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r535095226", "bodyText": "done", "author": "anirudhkovuru", "createdAt": "2020-12-03T10:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MjU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6576cbf3ca30f119321ead6c5360e40160dbdf56", "changed_code": [{"header": "diff --git a/cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java b/cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java\nindex 78ace9dcd..090655427 100644\n--- a/cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java\n+++ b/cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java\n", "chunk": "@@ -181,9 +181,9 @@ public abstract class StreamCommand extends Command {\n             }\n \n             @Cleanup\n-            val factory = EventStreamClientFactory.withScope(scopedStream.getScope(), getClientConfig());\n+            val eventStreamClientFactory = EventStreamClientFactory.withScope(scopedStream.getScope(), getClientConfig());\n             @Cleanup\n-            val writer = factory.createEventWriter(scopedStream.getName(), new UTF8StringSerializer(), EventWriterConfig.builder().build());\n+            val writer = eventStreamClientFactory.createEventWriter(scopedStream.getName(), new UTF8StringSerializer(), EventWriterConfig.builder().build());\n \n             String eventPrefix = UUID.randomUUID().toString();\n             output(\"Appending %s Event(s) with payload prefix '%s' having routing key '%s'.\", eventCount, eventPrefix, routingKey);\n", "next_change": null}]}}, {"oid": "8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "url": "https://github.com/pravega/pravega/commit/8936add8f97aefe7caa8cea6fcb7bcfda67f08fc", "message": "Changed the test structure for user commands in security scenarios\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-02T11:31:31Z", "type": "commit"}, {"oid": "082f6f24f4f600c5a44d6f24cad91707474bd707", "url": "https://github.com/pravega/pravega/commit/082f6f24f4f600c5a44d6f24cad91707474bd707", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-12-02T11:32:16Z", "type": "commit"}, {"oid": "25ad699eeda86b64d09879c28aacd16e3e79a03a", "url": "https://github.com/pravega/pravega/commit/25ad699eeda86b64d09879c28aacd16e3e79a03a", "message": "Changed structure of the TLS tests for admin controller commands\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-02T15:04:41Z", "type": "commit"}, {"oid": "51efde1853960b302f98ae42a5116648b4999fd4", "url": "https://github.com/pravega/pravega/commit/51efde1853960b302f98ae42a5116648b4999fd4", "message": "Changed cli config names\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-02T16:50:37Z", "type": "commit"}, {"oid": "ac8067b0e14bed7dffab81a2c11032d6e3705e0a", "url": "https://github.com/pravega/pravega/commit/ac8067b0e14bed7dffab81a2c11032d6e3705e0a", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-12-03T04:03:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk3NjgyMg==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534976822", "bodyText": "nit: Please avoid abbreviations to the extent possible. testCreateKeyValueTable() sounds better. Same for other tests below.", "author": "ravisharda", "createdAt": "2020-12-03T09:06:48Z", "path": "cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java", "diffHunk": "@@ -22,7 +23,8 @@\n public class KVTCommandsTest extends AbstractUserCommandTest {\n \n     @Test(timeout = 10000)\n-    public void testCreateKVT() throws Exception {\n+    @SneakyThrows\n+    public void testCreateKVT() {", "originalCommit": "ac8067b0e14bed7dffab81a2c11032d6e3705e0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5NTAzMA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r535095030", "bodyText": "done", "author": "anirudhkovuru", "createdAt": "2020-12-03T10:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk3NjgyMg=="}], "type": "inlineReview", "revised_code": {"commit": "6576cbf3ca30f119321ead6c5360e40160dbdf56", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java b/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java\nindex b1053fe72..a2c6a1d52 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java\n", "chunk": "@@ -24,7 +24,7 @@ public class KVTCommandsTest extends AbstractUserCommandTest {\n \n     @Test(timeout = 10000)\n     @SneakyThrows\n-    public void testCreateKVT() {\n+    public void testCreateKeyValueTable() {\n         final String scope = \"createKVTable\";\n         final String table = NameUtils.getScopedStreamName(scope, \"kvt1\");\n         String commandResult = TestUtils.executeCommand(\"scope create \" + scope, CONFIG.get());\n", "next_change": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java b/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java\nindex a2c6a1d52..50a7ad72f 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java\n", "chunk": "@@ -9,67 +9,24 @@\n  */\n package io.pravega.cli.user.kvs;\n \n-import io.pravega.cli.user.AbstractUserCommandTest;\n import io.pravega.cli.user.CommandArgs;\n import io.pravega.cli.user.TestUtils;\n import io.pravega.cli.user.scope.ScopeCommand;\n import io.pravega.shared.NameUtils;\n-import lombok.SneakyThrows;\n import org.junit.Assert;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n \n import java.util.Collections;\n \n-public class KVTCommandsTest extends AbstractUserCommandTest {\n-\n-    @Test(timeout = 10000)\n-    @SneakyThrows\n-    public void testCreateKeyValueTable() {\n-        final String scope = \"createKVTable\";\n-        final String table = NameUtils.getScopedStreamName(scope, \"kvt1\");\n-        String commandResult = TestUtils.executeCommand(\"scope create \" + scope, CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"created successfully\"));\n-\n-        commandResult = TestUtils.executeCommand(\"kvt create \" + table, CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"created successfully\"));\n-        Assert.assertNotNull(KeyValueTableCommand.Create.descriptor());\n-    }\n-\n-    @Test(timeout = 20000)\n-    @SneakyThrows\n-    public void testDeleteKeyValueTable() {\n-        final String scope = \"deleteKVTable\";\n-        final String table = NameUtils.getScopedStreamName(scope, \"kvt1\");\n-        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(scope), CONFIG.get());\n-        new ScopeCommand.Create(commandArgs).execute();\n-\n-        commandArgs = new CommandArgs(Collections.singletonList(table), CONFIG.get());\n-        new KeyValueTableCommand.Create(commandArgs).execute();\n-\n-        String commandResult = TestUtils.executeCommand(\"kvt delete \" + table, CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"deleted successfully\"));\n-        Assert.assertNotNull(KeyValueTableCommand.Delete.descriptor());\n-    }\n-\n-    @Test(timeout = 10000)\n-    @SneakyThrows\n-    public void testListKeyValueTables() {\n-        final String scope = \"listKVTable\";\n-        final String table = scope + \"/kvt1\";\n-        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(scope), CONFIG.get());\n-        new ScopeCommand.Create(commandArgs).execute();\n-\n-        CommandArgs commandArgsCreate = new CommandArgs(Collections.singletonList(table), CONFIG.get());\n-        new KeyValueTableCommand.Create(commandArgsCreate).execute();\n-\n-        String commandResult = TestUtils.executeCommand(\"kvt list \" + scope, CONFIG.get());\n-        Assert.assertTrue(commandResult.contains(\"kvt1\"));\n-        Assert.assertNotNull(KeyValueTableCommand.ListKVTables.descriptor());\n+public class KVTCommandsTest extends AuthEnabledKVTCommandsTest {\n+    @BeforeClass\n+    public static void start() {\n+        setUpCluster(false, false);\n     }\n \n     @Test(timeout = 60000)\n-    @SneakyThrows\n-    public void testPutAndGetKeyValueTable() {\n+    public void testPutAndGetKVT() throws Exception {\n         final String scope = \"putAndGetKVTable\";\n         final String table = NameUtils.getScopedStreamName(scope, \"kvt1\");\n         CommandArgs commandArgs = new CommandArgs(Collections.singletonList(scope), CONFIG.get());\n", "next_change": {"commit": "97dfd86bceb04477d11554120eb730cbf7fe9e38", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java b/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java\nindex 50a7ad72f..da5e5522e 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java\n", "chunk": "@@ -11,74 +11,101 @@ package io.pravega.cli.user.kvs;\n \n import io.pravega.cli.user.CommandArgs;\n import io.pravega.cli.user.TestUtils;\n+import io.pravega.cli.user.config.InteractiveConfig;\n import io.pravega.cli.user.scope.ScopeCommand;\n import io.pravega.shared.NameUtils;\n+import io.pravega.test.integration.demo.ClusterWrapper;\n+import org.junit.AfterClass;\n import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n import java.util.Collections;\n \n+import static io.pravega.cli.user.TestUtils.createPravegaCluster;\n+import static io.pravega.cli.user.TestUtils.getCLIControllerUri;\n+import static io.pravega.cli.user.TestUtils.createCLIConfig;\n+\n public class KVTCommandsTest extends AuthEnabledKVTCommandsTest {\n+    static final ClusterWrapper CLUSTER = createPravegaCluster(false, false);\n+    static final InteractiveConfig CONFIG = createCLIConfig(getCLIControllerUri(CLUSTER.controllerUri()), false, false);\n+\n     @BeforeClass\n     public static void start() {\n-        setUpCluster(false, false);\n+        CLUSTER.start();\n+    }\n+\n+    @AfterClass\n+    public static void shutDown() {\n+        if (CLUSTER != null) {\n+            CLUSTER.close();\n+        }\n     }\n \n     @Test(timeout = 60000)\n     public void testPutAndGetKVT() throws Exception {\n         final String scope = \"putAndGetKVTable\";\n         final String table = NameUtils.getScopedStreamName(scope, \"kvt1\");\n-        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(scope), CONFIG.get());\n+        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(scope), CONFIG);\n         new ScopeCommand.Create(commandArgs).execute();\n-        commandArgs = new CommandArgs(Collections.singletonList(table), CONFIG.get());\n+        commandArgs = new CommandArgs(Collections.singletonList(table), CONFIG);\n         new KeyValueTableCommand.Create(commandArgs).execute();\n \n         // Exercise puts first.\n-        String commandResult = TestUtils.executeCommand(\"kvt put \" + table + \" key-family-1 key1 value1\", CONFIG.get());\n+        String commandResult = TestUtils.executeCommand(\"kvt put \" + table + \" key-family-1 key1 value1\", CONFIG);\n         Assert.assertTrue(commandResult.contains(\"updated successfully\"));\n         Assert.assertNotNull(KeyValueTableCommand.Put.descriptor());\n \n-        commandResult = TestUtils.executeCommand(\"kvt put-if \" + table + \" key-family-1 key1 0:0 value2\", CONFIG.get());\n+        commandResult = TestUtils.executeCommand(\"kvt put-if \" + table + \" key-family-1 key1 0:0 value2\", CONFIG);\n         Assert.assertTrue(commandResult.contains(\"BadKeyVersionException\"));\n         Assert.assertNotNull(KeyValueTableCommand.PutIf.descriptor());\n \n-        commandResult = TestUtils.executeCommand(\"kvt put-if-absent \" + table + \" key-family-1 key2 value1\", CONFIG.get());\n+        commandResult = TestUtils.executeCommand(\"kvt put-if-absent \" + table + \" key-family-1 key2 value1\", CONFIG);\n         Assert.assertTrue(commandResult.contains(\"inserted successfully\"));\n         Assert.assertNotNull(KeyValueTableCommand.PutIfAbsent.descriptor());\n \n-        commandResult = TestUtils.executeCommand(\"kvt put-all \" + table + \" key-family-1 {[[key3, value2]]}\", CONFIG.get());\n+        commandResult = TestUtils.executeCommand(\"kvt put-all \" + table + \" key-family-1 {[[key3, value2]]}\", CONFIG);\n         Assert.assertTrue(commandResult.contains(\"Updated\"));\n         Assert.assertNotNull(KeyValueTableCommand.PutAll.descriptor());\n \n-        commandResult = TestUtils.executeCommand(\"kvt put-range \" + table + \" key-family-1 1 2\", CONFIG.get());\n+        commandResult = TestUtils.executeCommand(\"kvt put-range \" + table + \" key-family-1 1 2\", CONFIG);\n         Assert.assertTrue(commandResult.contains(\"Bulk-updated\"));\n         Assert.assertNotNull(KeyValueTableCommand.PutRange.descriptor());\n \n         // Exercise list commands.\n-        commandResult = TestUtils.executeCommand(\"kvt list-keys \" + table + \" key-family-1\", CONFIG.get());\n+        commandResult = TestUtils.executeCommand(\"kvt list-keys \" + table + \" key-family-1\", CONFIG);\n         Assert.assertTrue(commandResult.contains(\"key1\"));\n         Assert.assertNotNull(KeyValueTableCommand.ListKeys.descriptor());\n \n-        commandResult = TestUtils.executeCommand(\"kvt list-entries \" + table + \" key-family-1\", CONFIG.get());\n+        commandResult = TestUtils.executeCommand(\"kvt list-entries \" + table + \" key-family-1\", CONFIG);\n         Assert.assertTrue(commandResult.contains(\"value1\"));\n         Assert.assertNotNull(KeyValueTableCommand.ListEntries.descriptor());\n \n         // Exercise Get command.\n-        commandResult = TestUtils.executeCommand(\"kvt get \" + table + \" key-family-1 \\\"{[key1, key2]}\\\"\", CONFIG.get());\n+        commandResult = TestUtils.executeCommand(\"kvt get \" + table + \" key-family-1 \\\"{[key1, key2]}\\\"\", CONFIG);\n         Assert.assertTrue(commandResult.contains(\"Get\"));\n         Assert.assertNotNull(KeyValueTableCommand.Get.descriptor());\n \n         // Exercise Remove commands.\n-        commandResult = TestUtils.executeCommand(\"kvt remove \" + table + \" key-family-1 {[[key1]]}\", CONFIG.get());\n+        commandResult = TestUtils.executeCommand(\"kvt remove \" + table + \" key-family-1 {[[key1]]}\", CONFIG);\n         Assert.assertTrue(commandResult.contains(\"Removed\"));\n         Assert.assertNotNull(KeyValueTableCommand.Remove.descriptor());\n     }\n \n     public static class TLSEnabledKVTCommandsTest extends KVTCommandsTest {\n+        protected static final ClusterWrapper CLUSTER = createPravegaCluster(false, true);\n+        static final InteractiveConfig CONFIG = createCLIConfig(getCLIControllerUri(CLUSTER.controllerUri()), false, true);\n+\n         @BeforeClass\n         public static void start() {\n-            setUpCluster(false, true);\n+            CLUSTER.start();\n+        }\n+\n+        @AfterClass\n+        public static void shutDown() {\n+            if (CLUSTER != null) {\n+                CLUSTER.close();\n+            }\n         }\n     }\n }\n", "next_change": {"commit": "41242028f81bb61a32e819e248ce25318457998f", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java b/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java\nindex da5e5522e..402e92383 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java\n", "chunk": "@@ -43,69 +49,53 @@ public class KVTCommandsTest extends AuthEnabledKVTCommandsTest {\n     }\n \n     @Test(timeout = 60000)\n-    public void testPutAndGetKVT() throws Exception {\n+    @SneakyThrows\n+    public void testPutAndGetKVT() {\n         final String scope = \"putAndGetKVTable\";\n         final String table = NameUtils.getScopedStreamName(scope, \"kvt1\");\n-        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(scope), CONFIG);\n+        CommandArgs commandArgs = new CommandArgs(Collections.singletonList(scope), cliConfig());\n         new ScopeCommand.Create(commandArgs).execute();\n-        commandArgs = new CommandArgs(Collections.singletonList(table), CONFIG);\n+        commandArgs = new CommandArgs(Collections.singletonList(table), cliConfig());\n         new KeyValueTableCommand.Create(commandArgs).execute();\n \n         // Exercise puts first.\n-        String commandResult = TestUtils.executeCommand(\"kvt put \" + table + \" key-family-1 key1 value1\", CONFIG);\n+        String commandResult = TestUtils.executeCommand(\"kvt put \" + table + \" key-family-1 key1 value1\", cliConfig());\n         Assert.assertTrue(commandResult.contains(\"updated successfully\"));\n         Assert.assertNotNull(KeyValueTableCommand.Put.descriptor());\n \n-        commandResult = TestUtils.executeCommand(\"kvt put-if \" + table + \" key-family-1 key1 0:0 value2\", CONFIG);\n+        commandResult = TestUtils.executeCommand(\"kvt put-if \" + table + \" key-family-1 key1 0:0 value2\", cliConfig());\n         Assert.assertTrue(commandResult.contains(\"BadKeyVersionException\"));\n         Assert.assertNotNull(KeyValueTableCommand.PutIf.descriptor());\n \n-        commandResult = TestUtils.executeCommand(\"kvt put-if-absent \" + table + \" key-family-1 key2 value1\", CONFIG);\n+        commandResult = TestUtils.executeCommand(\"kvt put-if-absent \" + table + \" key-family-1 key2 value1\", cliConfig());\n         Assert.assertTrue(commandResult.contains(\"inserted successfully\"));\n         Assert.assertNotNull(KeyValueTableCommand.PutIfAbsent.descriptor());\n \n-        commandResult = TestUtils.executeCommand(\"kvt put-all \" + table + \" key-family-1 {[[key3, value2]]}\", CONFIG);\n+        commandResult = TestUtils.executeCommand(\"kvt put-all \" + table + \" key-family-1 {[[key3, value2]]}\", cliConfig());\n         Assert.assertTrue(commandResult.contains(\"Updated\"));\n         Assert.assertNotNull(KeyValueTableCommand.PutAll.descriptor());\n \n-        commandResult = TestUtils.executeCommand(\"kvt put-range \" + table + \" key-family-1 1 2\", CONFIG);\n+        commandResult = TestUtils.executeCommand(\"kvt put-range \" + table + \" key-family-1 1 2\", cliConfig());\n         Assert.assertTrue(commandResult.contains(\"Bulk-updated\"));\n         Assert.assertNotNull(KeyValueTableCommand.PutRange.descriptor());\n \n         // Exercise list commands.\n-        commandResult = TestUtils.executeCommand(\"kvt list-keys \" + table + \" key-family-1\", CONFIG);\n+        commandResult = TestUtils.executeCommand(\"kvt list-keys \" + table + \" key-family-1\", cliConfig());\n         Assert.assertTrue(commandResult.contains(\"key1\"));\n         Assert.assertNotNull(KeyValueTableCommand.ListKeys.descriptor());\n \n-        commandResult = TestUtils.executeCommand(\"kvt list-entries \" + table + \" key-family-1\", CONFIG);\n+        commandResult = TestUtils.executeCommand(\"kvt list-entries \" + table + \" key-family-1\", cliConfig());\n         Assert.assertTrue(commandResult.contains(\"value1\"));\n         Assert.assertNotNull(KeyValueTableCommand.ListEntries.descriptor());\n \n         // Exercise Get command.\n-        commandResult = TestUtils.executeCommand(\"kvt get \" + table + \" key-family-1 \\\"{[key1, key2]}\\\"\", CONFIG);\n+        commandResult = TestUtils.executeCommand(\"kvt get \" + table + \" key-family-1 \\\"{[key1, key2]}\\\"\", cliConfig());\n         Assert.assertTrue(commandResult.contains(\"Get\"));\n         Assert.assertNotNull(KeyValueTableCommand.Get.descriptor());\n \n         // Exercise Remove commands.\n-        commandResult = TestUtils.executeCommand(\"kvt remove \" + table + \" key-family-1 {[[key1]]}\", CONFIG);\n+        commandResult = TestUtils.executeCommand(\"kvt remove \" + table + \" key-family-1 {[[key1]]}\", cliConfig());\n         Assert.assertTrue(commandResult.contains(\"Removed\"));\n         Assert.assertNotNull(KeyValueTableCommand.Remove.descriptor());\n     }\n-\n-    public static class TLSEnabledKVTCommandsTest extends KVTCommandsTest {\n-        protected static final ClusterWrapper CLUSTER = createPravegaCluster(false, true);\n-        static final InteractiveConfig CONFIG = createCLIConfig(getCLIControllerUri(CLUSTER.controllerUri()), false, true);\n-\n-        @BeforeClass\n-        public static void start() {\n-            CLUSTER.start();\n-        }\n-\n-        @AfterClass\n-        public static void shutDown() {\n-            if (CLUSTER != null) {\n-                CLUSTER.close();\n-            }\n-        }\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk4MjU3OA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534982578", "bodyText": "Please use the ClusterWrapper instead, as it already supports running clusters both with security (TLS and auth) on and off.", "author": "ravisharda", "createdAt": "2020-12-03T09:10:48Z", "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils implements AutoCloseable {", "originalCommit": "ac8067b0e14bed7dffab81a2c11032d6e3705e0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwNjMzOA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r540706338", "bodyText": "Using the ClusterWrapper now.", "author": "anirudhkovuru", "createdAt": "2020-12-11T05:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk4MjU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "0e838f384346d560af279595e2761a7a3c634029", "changed_code": [{"header": "diff --git a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java b/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\ndeleted file mode 100644\nindex 001ee034f..000000000\n--- a/test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java\n+++ /dev/null\n", "chunk": "@@ -1,234 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.test.integration.utils;\n-\n-import com.google.common.base.Preconditions;\n-import io.pravega.client.ClientConfig;\n-import io.pravega.client.EventStreamClientFactory;\n-import io.pravega.client.admin.ReaderGroupManager;\n-import io.pravega.client.admin.StreamManager;\n-import io.pravega.client.control.impl.Controller;\n-import io.pravega.client.control.impl.ControllerImpl;\n-import io.pravega.client.control.impl.ControllerImplConfig;\n-import io.pravega.client.stream.EventStreamReader;\n-import io.pravega.client.stream.EventStreamWriter;\n-import io.pravega.client.stream.EventWriterConfig;\n-import io.pravega.client.stream.ReaderConfig;\n-import io.pravega.client.stream.ReaderGroupConfig;\n-import io.pravega.client.stream.ScalingPolicy;\n-import io.pravega.client.stream.Stream;\n-import io.pravega.client.stream.StreamConfiguration;\n-import io.pravega.client.stream.impl.ClientFactoryImpl;\n-import io.pravega.client.stream.impl.DefaultCredentials;\n-import io.pravega.common.concurrent.ExecutorServiceHelpers;\n-import io.pravega.controller.util.Config;\n-import io.pravega.segmentstore.contracts.StreamSegmentStore;\n-import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n-import io.pravega.segmentstore.server.store.ServiceBuilder;\n-import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n-import io.pravega.test.common.SecurityConfigDefaults;\n-import io.pravega.test.common.TestUtils;\n-import io.pravega.test.common.TestingServerStarter;\n-import io.pravega.test.integration.demo.ControllerWrapper;\n-import lombok.Cleanup;\n-import lombok.Getter;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.curator.test.TestingServer;\n-\n-import javax.annotation.concurrent.NotThreadSafe;\n-import java.net.URI;\n-import java.util.UUID;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n-/**\n- * Utility functions for creating the test setup.\n- */\n-@Slf4j\n-@NotThreadSafe\n-public final class SecureSetupUtils implements AutoCloseable {\n-\n-    // The different services.\n-    @Getter\n-    private final ScheduledExecutorService executor;\n-    @Getter\n-    private final Controller controller;\n-    @Getter\n-    private final EventStreamClientFactory clientFactory;\n-    private final ControllerWrapper controllerWrapper;\n-    private final PravegaConnectionListener server;\n-    @Getter\n-    private final TestingServer zkTestServer;\n-    private final ServiceBuilder serviceBuilder;\n-\n-    @Getter\n-    private final boolean authEnabled;\n-\n-    // Manage the state of the class.\n-    private final AtomicBoolean started = new AtomicBoolean(false);\n-\n-    // The test Scope name.\n-    @Getter\n-    private final String scope = \"scope\";\n-    private final int controllerRPCPort = TestUtils.getAvailableListenPort();\n-    private final int controllerRESTPort = TestUtils.getAvailableListenPort();\n-    @Getter\n-    private final int servicePort = TestUtils.getAvailableListenPort();\n-    private final ClientConfig clientConfig;\n-\n-    public SecureSetupUtils(boolean authEnabled) throws Exception {\n-        this.authEnabled = authEnabled;\n-        this.clientConfig = generateValidClientConfig();\n-        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(2, \"Controller pool\");\n-        this.controller = new ControllerImpl(ControllerImplConfig.builder().clientConfig(clientConfig).build(),\n-                executor);\n-        this.clientFactory = new ClientFactoryImpl(scope, controller, clientConfig);\n-        this.zkTestServer = new TestingServerStarter().start();\n-        this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n-        StreamSegmentStore store = this.serviceBuilder.createStreamSegmentService();\n-        this.server = new PravegaConnectionListener(false, servicePort, store, this.serviceBuilder.createTableStoreService(),\n-                this.serviceBuilder.getLowPriorityExecutor());\n-        this.controllerWrapper = new ControllerWrapper(\n-                this.zkTestServer.getConnectString(), false, true, controllerRPCPort, \"localhost\", servicePort,\n-                Config.HOST_STORE_CONTAINER_COUNT, controllerRESTPort, this.authEnabled,\n-                \"../\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_PATH, \"secret\", 600);\n-    }\n-\n-    public ClientConfig generateValidClientConfig() {\n-        ClientConfig.ClientConfigBuilder clientConfigBuilder = ClientConfig.builder()\n-                .controllerURI(URI.create(\"tcp://localhost:\" + controllerRPCPort));\n-        if (this.authEnabled) {\n-            clientConfigBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n-                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n-        }\n-        return clientConfigBuilder.build();\n-    }\n-\n-    /**\n-     * Start all pravega related services required for the test deployment.\n-     *\n-     * @throws Exception on any errors.\n-     */\n-    public void startAllServices() throws Exception {\n-        startAllServices(null);\n-    }\n-\n-    /**\n-     * Start all pravega related services required for the test deployment.\n-     *\n-     * @param numThreads the number of threads for the internal client threadpool.\n-     * @throws Exception on any errors.\n-     */\n-    public void startAllServices(Integer numThreads) throws Exception {\n-        if (!this.started.compareAndSet(false, true)) {\n-            log.warn(\"Services already started, not attempting to start again\");\n-            return;\n-        }\n-\n-        // Start zookeeper.\n-        this.zkTestServer.start();\n-        this.serviceBuilder.initialize();\n-        this.server.startListening();\n-        log.info(\"Started Pravega Service\");\n-\n-        // Start Controller.\n-        this.controllerWrapper.awaitRunning();\n-        this.controllerWrapper.getController().createScope(scope).get();\n-        log.info(\"Initialized Pravega Controller\");\n-    }\n-\n-    /**\n-     * Stop the pravega cluster and release all resources.\n-     *\n-     * @throws Exception on any errors.\n-     */\n-    @Override\n-    public void close() throws Exception {\n-        if (!this.started.compareAndSet(true, false)) {\n-            log.warn(\"Services not yet started or already stopped, not attempting to stop\");\n-            return;\n-        }\n-\n-        this.controllerWrapper.close();\n-        this.server.close();\n-        this.zkTestServer.close();\n-        this.serviceBuilder.close();\n-        this.clientFactory.close();\n-        this.controller.close();\n-        ExecutorServiceHelpers.shutdown(executor);\n-    }\n-\n-    /**\n-     * Create the test stream.\n-     *\n-     * @param streamName     Name of the test stream.\n-     * @param numSegments    Number of segments to be created for this stream.\n-     *\n-     */\n-    public void createTestStream(final String streamName, final int numSegments) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-        Preconditions.checkArgument(numSegments > 0);\n-\n-        @Cleanup\n-        StreamManager streamManager = StreamManager.create(clientConfig);\n-        streamManager.createScope(scope);\n-        streamManager.createStream(scope, streamName,\n-                StreamConfiguration.builder()\n-                        .scalingPolicy(ScalingPolicy.fixed(numSegments))\n-                        .build());\n-        log.info(\"Created stream: \" + streamName);\n-    }\n-\n-    /**\n-     * Create a stream writer for writing Integer events.\n-     *\n-     * @param streamName    Name of the test stream.\n-     *\n-     * @return Stream writer instance.\n-     */\n-    public EventStreamWriter<Integer> getIntegerWriter(final String streamName) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-\n-        return clientFactory.createEventWriter(streamName, new IntegerSerializer(),\n-                EventWriterConfig.builder().build());\n-    }\n-\n-    /**\n-     * Create a stream reader for reading Integer events.\n-     *\n-     * @param streamName    Name of the test stream.\n-     *\n-     * @return Stream reader instance.\n-     */\n-    public EventStreamReader<Integer> getIntegerReader(final String streamName) {\n-        Preconditions.checkState(this.started.get(), \"Services not yet started\");\n-        Preconditions.checkNotNull(streamName);\n-\n-        ReaderGroupManager readerGroupManager = ReaderGroupManager.withScope(scope, clientConfig);\n-        final String readerGroup = \"testReaderGroup\" + scope + streamName;\n-        readerGroupManager.createReaderGroup(\n-                readerGroup,\n-                ReaderGroupConfig.builder().stream(Stream.of(scope, streamName)).build());\n-\n-        final String readerGroupId = UUID.randomUUID().toString();\n-        return clientFactory.createReader(readerGroupId, readerGroup, new IntegerSerializer(),\n-                ReaderConfig.builder().build());\n-    }\n-\n-    public URI getControllerUri() {\n-        return URI.create(clientConfig.getControllerURI().toString());\n-    }\n-\n-    public URI getControllerRestUri() {\n-        return URI.create(\"localhost:\" + controllerRESTPort);\n-    }\n-}\n", "next_change": null}]}}, {"oid": "6576cbf3ca30f119321ead6c5360e40160dbdf56", "url": "https://github.com/pravega/pravega/commit/6576cbf3ca30f119321ead6c5360e40160dbdf56", "message": "Addressing comments\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-03T10:46:11Z", "type": "commit"}, {"oid": "b06e08ef230c4bc7eee7226f5290e668232b8c79", "url": "https://github.com/pravega/pravega/commit/b06e08ef230c4bc7eee7226f5290e668232b8c79", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-12-04T04:27:27Z", "type": "commit"}, {"oid": "73c621125f9eef7f7f3d63d479e2ebf2a54ef82d", "url": "https://github.com/pravega/pravega/commit/73c621125f9eef7f7f3d63d479e2ebf2a54ef82d", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-12-04T09:30:48Z", "type": "commit"}, {"oid": "5ce8dc4a8e6b27107fc8b3d5efcac048748ed709", "url": "https://github.com/pravega/pravega/commit/5ce8dc4a8e6b27107fc8b3d5efcac048748ed709", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-12-07T04:13:39Z", "type": "commit"}, {"oid": "19156259e42e0c5981bb90500101ce5c7e56a70c", "url": "https://github.com/pravega/pravega/commit/19156259e42e0c5981bb90500101ce5c7e56a70c", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-12-07T05:32:12Z", "type": "commit"}, {"oid": "46b1437d1f208f5ab56b95cd7412391b53ea1ab6", "url": "https://github.com/pravega/pravega/commit/46b1437d1f208f5ab56b95cd7412391b53ea1ab6", "message": "Resolving merge conflict\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-09T09:16:40Z", "type": "commit"}, {"oid": "46b1437d1f208f5ab56b95cd7412391b53ea1ab6", "url": "https://github.com/pravega/pravega/commit/46b1437d1f208f5ab56b95cd7412391b53ea1ab6", "message": "Resolving merge conflict\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-09T09:16:40Z", "type": "forcePushed"}, {"oid": "811ad18455cb93ba5bdd0f9791e235cf84c0827b", "url": "https://github.com/pravega/pravega/commit/811ad18455cb93ba5bdd0f9791e235cf84c0827b", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-12-10T09:38:58Z", "type": "commit"}, {"oid": "e09d57742b909690a4f13ed339885ec0da655a0c", "url": "https://github.com/pravega/pravega/commit/e09d57742b909690a4f13ed339885ec0da655a0c", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-12-11T03:55:55Z", "type": "commit"}, {"oid": "0e838f384346d560af279595e2761a7a3c634029", "url": "https://github.com/pravega/pravega/commit/0e838f384346d560af279595e2761a7a3c634029", "message": "Changing tests to use ClusterWrapper\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-11T05:41:34Z", "type": "commit"}, {"oid": "25657718bf360f091b8a4436fb06a33ed1b38d32", "url": "https://github.com/pravega/pravega/commit/25657718bf360f091b8a4436fb06a33ed1b38d32", "message": "New doc for TestUtils\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-11T14:33:59Z", "type": "commit"}, {"oid": "cc7077535cb31cdaaf7947565ba969fa5067acdf", "url": "https://github.com/pravega/pravega/commit/cc7077535cb31cdaaf7947565ba969fa5067acdf", "message": "Fixed leaky test\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-11T14:59:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMjI2OA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r541822268", "bodyText": "Why are you using AtomicReference for CLUSTER and CONFIG?\nSince this CLUSTER variable is static, it will be shared across all classes that use it. This will cause a synchronization issue across different classes that use this or call setUpCluster(). You should instantiate this in the respective classes instead so that you don't prevent tests from different classes from running parallelly. Or, alternatively, you can have the setUpCluster() return a new instance.", "author": "ravisharda", "createdAt": "2020-12-13T02:01:43Z", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java", "diffHunk": "@@ -19,29 +20,33 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.user.TestUtils.createPravegaCluster;\n+import static io.pravega.cli.user.TestUtils.setInteractiveConfig;\n+\n public abstract class AbstractUserCommandTest {\n \n-    // Setup utility.\n-    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n+    protected static final AtomicReference<ClusterWrapper> CLUSTER = new AtomicReference<>();", "originalCommit": "ef00bfcefa8e62bb1614113ab5a31cd34f6a4162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM0Nzk5Mg==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r542347992", "bodyText": "As discussed, avoiding the use of AtomicReference.", "author": "anirudhkovuru", "createdAt": "2020-12-14T12:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMjI2OA=="}], "type": "inlineReview", "revised_code": {"commit": "97dfd86bceb04477d11554120eb730cbf7fe9e38", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\nindex 2ea98acf0..c271f19b4 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n", "chunk": "@@ -9,44 +9,6 @@\n  */\n package io.pravega.cli.user;\n \n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.test.integration.demo.ClusterWrapper;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.user.TestUtils.createPravegaCluster;\n-import static io.pravega.cli.user.TestUtils.setInteractiveConfig;\n-\n public abstract class AbstractUserCommandTest {\n \n-    protected static final AtomicReference<ClusterWrapper> CLUSTER = new AtomicReference<>();\n-    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);\n-\n-    public static void setUpCluster(boolean authEnabled, boolean tlsEnabled) {\n-        CLUSTER.set(createPravegaCluster(authEnabled, tlsEnabled));\n-        CLUSTER.get().start();\n-        setInteractiveConfig(CLUSTER.get().controllerUri().replace(\"tcp://\", \"\").replace(\"tls://\", \"\"),\n-                authEnabled, tlsEnabled, CONFIG);\n-    }\n-\n-    @BeforeClass\n-    public static void start() {\n-        setUpCluster(false, false);\n-    }\n-\n-    @AfterClass\n-    public static void stop() {\n-        val cluster = CLUSTER.getAndSet(null);\n-        if (cluster != null) {\n-            cluster.close();\n-        }\n-    }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "41242028f81bb61a32e819e248ce25318457998f", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\ndeleted file mode 100644\nindex c271f19b4..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,14 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-public abstract class AbstractUserCommandTest {\n-\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMjQ3MA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r541822470", "bodyText": "See comment earlier.", "author": "ravisharda", "createdAt": "2020-12-13T02:03:13Z", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java", "diffHunk": "@@ -19,29 +20,33 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.user.TestUtils.createPravegaCluster;\n+import static io.pravega.cli.user.TestUtils.setInteractiveConfig;\n+\n public abstract class AbstractUserCommandTest {\n \n-    // Setup utility.\n-    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n+    protected static final AtomicReference<ClusterWrapper> CLUSTER = new AtomicReference<>();\n     protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n-\n     @Rule\n     public final Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);\n \n+    public static void setUpCluster(boolean authEnabled, boolean tlsEnabled) {\n+        CLUSTER.set(createPravegaCluster(authEnabled, tlsEnabled));\n+        CLUSTER.get().start();\n+        setInteractiveConfig(CLUSTER.get().controllerUri().replace(\"tcp://\", \"\").replace(\"tls://\", \"\"),\n+                authEnabled, tlsEnabled, CONFIG);\n+    }\n+\n     @BeforeClass\n-    public static void setUp() throws Exception {\n-        SETUP_UTILS.startAllServices();\n-        InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(SETUP_UTILS.getControllerUri().toString());\n-        interactiveConfig.setDefaultSegmentCount(4);\n-        interactiveConfig.setMaxListItems(100);\n-        interactiveConfig.setTimeoutMillis(1000);\n-        CONFIG.set(interactiveConfig);\n+    public static void start() {", "originalCommit": "ef00bfcefa8e62bb1614113ab5a31cd34f6a4162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "97dfd86bceb04477d11554120eb730cbf7fe9e38", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\nindex 2ea98acf0..c271f19b4 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n", "chunk": "@@ -9,44 +9,6 @@\n  */\n package io.pravega.cli.user;\n \n-import io.pravega.cli.user.config.InteractiveConfig;\n-import io.pravega.test.integration.demo.ClusterWrapper;\n-import lombok.val;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.rules.Timeout;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static io.pravega.cli.user.TestUtils.createPravegaCluster;\n-import static io.pravega.cli.user.TestUtils.setInteractiveConfig;\n-\n public abstract class AbstractUserCommandTest {\n \n-    protected static final AtomicReference<ClusterWrapper> CLUSTER = new AtomicReference<>();\n-    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n-    @Rule\n-    public final Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);\n-\n-    public static void setUpCluster(boolean authEnabled, boolean tlsEnabled) {\n-        CLUSTER.set(createPravegaCluster(authEnabled, tlsEnabled));\n-        CLUSTER.get().start();\n-        setInteractiveConfig(CLUSTER.get().controllerUri().replace(\"tcp://\", \"\").replace(\"tls://\", \"\"),\n-                authEnabled, tlsEnabled, CONFIG);\n-    }\n-\n-    @BeforeClass\n-    public static void start() {\n-        setUpCluster(false, false);\n-    }\n-\n-    @AfterClass\n-    public static void stop() {\n-        val cluster = CLUSTER.getAndSet(null);\n-        if (cluster != null) {\n-            cluster.close();\n-        }\n-    }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "41242028f81bb61a32e819e248ce25318457998f", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java b/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\ndeleted file mode 100644\nindex c271f19b4..000000000\n--- a/cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java\n+++ /dev/null\n", "chunk": "@@ -1,14 +0,0 @@\n-/**\n- * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package io.pravega.cli.user;\n-\n-public abstract class AbstractUserCommandTest {\n-\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMjcxNw==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r541822717", "bodyText": "This assertion of assumption should be done right after the Command is initialized.", "author": "ravisharda", "createdAt": "2020-12-13T02:05:23Z", "path": "cli/user/src/test/java/io/pravega/cli/user/TestUtils.java", "diffHunk": "@@ -35,11 +38,60 @@ public static String executeCommand(String inputCommand, InteractiveConfig confi\n         CommandArgs args = new CommandArgs(pc.getArgs().getArgs(), config);\n         Command cmd = Command.Factory.get(pc.getComponent(), pc.getName(), args);\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (PrintStream ps = new PrintStream(baos, true, \"UTF-8\")) {\n+        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n             assert cmd != null;", "originalCommit": "ef00bfcefa8e62bb1614113ab5a31cd34f6a4162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMzIyOQ==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r541823229", "bodyText": "nit: this'd be shorter: baos.toString(StandardCharsets.UTF_8)", "author": "ravisharda", "createdAt": "2020-12-13T02:09:20Z", "path": "cli/user/src/test/java/io/pravega/cli/user/TestUtils.java", "diffHunk": "@@ -35,11 +38,60 @@ public static String executeCommand(String inputCommand, InteractiveConfig confi\n         CommandArgs args = new CommandArgs(pc.getArgs().getArgs(), config);\n         Command cmd = Command.Factory.get(pc.getComponent(), pc.getName(), args);\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (PrintStream ps = new PrintStream(baos, true, \"UTF-8\")) {\n+        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n             assert cmd != null;\n             cmd.setOut(ps);\n             cmd.execute();\n         }\n         return new String(baos.toByteArray(), StandardCharsets.UTF_8);", "originalCommit": "ef00bfcefa8e62bb1614113ab5a31cd34f6a4162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMzQyMA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r541823420", "bodyText": "This and the next two lines are unnecessary if TLS is disabled. Why don't you call them only if TLS is enabled?", "author": "ravisharda", "createdAt": "2020-12-13T02:10:50Z", "path": "cli/user/src/test/java/io/pravega/cli/user/TestUtils.java", "diffHunk": "@@ -35,11 +38,60 @@ public static String executeCommand(String inputCommand, InteractiveConfig confi\n         CommandArgs args = new CommandArgs(pc.getArgs().getArgs(), config);\n         Command cmd = Command.Factory.get(pc.getComponent(), pc.getName(), args);\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (PrintStream ps = new PrintStream(baos, true, \"UTF-8\")) {\n+        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n             assert cmd != null;\n             cmd.setOut(ps);\n             cmd.execute();\n         }\n         return new String(baos.toByteArray(), StandardCharsets.UTF_8);\n     }\n+\n+    /**\n+     * Returns the relative path to `pravega/config` source directory from cli/user tests.\n+     *\n+     * @return the path\n+     */\n+    public static String pathToConfig() {\n+        return \"../../config/\";\n+    }\n+\n+    /**\n+     * Creates a local Pravega cluster to test on using {@link ClusterWrapper}.\n+     *\n+     * @param authEnabled whether accessing the cluster require authentication or not.\n+     * @param tlsEnabled whether accessing the cluster require TLS or not.\n+     * @return A local Pravega cluster\n+     */\n+    public static ClusterWrapper createPravegaCluster(boolean authEnabled, boolean tlsEnabled) {\n+        return ClusterWrapper.builder()\n+                .authEnabled(authEnabled)\n+                .tlsEnabled(tlsEnabled)\n+                .tlsServerCertificatePath(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)", "originalCommit": "ef00bfcefa8e62bb1614113ab5a31cd34f6a4162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM0NzY1MA==", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r542347650", "bodyText": "Rearranged accordingly.", "author": "anirudhkovuru", "createdAt": "2020-12-14T12:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMzQyMA=="}], "type": "inlineReview", "revised_code": {"commit": "97dfd86bceb04477d11554120eb730cbf7fe9e38", "changed_code": [{"header": "diff --git a/cli/user/src/test/java/io/pravega/cli/user/TestUtils.java b/cli/user/src/test/java/io/pravega/cli/user/TestUtils.java\nindex 087cf6d26..8c292c4ff 100644\n--- a/cli/user/src/test/java/io/pravega/cli/user/TestUtils.java\n+++ b/cli/user/src/test/java/io/pravega/cli/user/TestUtils.java\n", "chunk": "@@ -63,25 +61,25 @@ public final class TestUtils {\n      * @return A local Pravega cluster\n      */\n     public static ClusterWrapper createPravegaCluster(boolean authEnabled, boolean tlsEnabled) {\n-        return ClusterWrapper.builder()\n-                .authEnabled(authEnabled)\n-                .tlsEnabled(tlsEnabled)\n-                .tlsServerCertificatePath(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n-                .tlsServerKeyPath(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n-                .tlsHostVerificationEnabled(false)\n-                .build();\n+        ClusterWrapper.ClusterWrapperBuilder clusterWrapperBuilder = ClusterWrapper.builder().authEnabled(authEnabled);\n+        if (tlsEnabled) {\n+            clusterWrapperBuilder\n+                    .tlsEnabled(true)\n+                    .tlsServerCertificatePath(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n+                    .tlsServerKeyPath(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n+                    .tlsHostVerificationEnabled(false);\n+        }\n+        return clusterWrapperBuilder.build();\n     }\n \n     /**\n-     * Sets the given config for the user-cli to use during testing.\n+     * Creates the required config for the user-cli to use during testing.\n      *\n      * @param controllerUri the controller URI.\n      * @param authEnabled whether the cli requires authentication to access the cluster.\n      * @param tlsEnabled whether the cli requires TLS to access the cluster\n-     * @param config the config to be set.\n      */\n-    public static void setInteractiveConfig(String controllerUri, boolean authEnabled, boolean tlsEnabled,\n-                                            AtomicReference<InteractiveConfig> config) {\n+    public static InteractiveConfig createCLIConfig(String controllerUri, boolean authEnabled, boolean tlsEnabled) {\n         InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n         interactiveConfig.setControllerUri(controllerUri);\n         interactiveConfig.setDefaultSegmentCount(4);\n", "next_change": null}]}}, {"oid": "4f412f0b22e1c08fdb70b992b006e467a645bfc5", "url": "https://github.com/pravega/pravega/commit/4f412f0b22e1c08fdb70b992b006e467a645bfc5", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-12-13T10:45:50Z", "type": "commit"}, {"oid": "97dfd86bceb04477d11554120eb730cbf7fe9e38", "url": "https://github.com/pravega/pravega/commit/97dfd86bceb04477d11554120eb730cbf7fe9e38", "message": "Removed token signing key, changed tests to not use AtomicReference\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-14T09:42:37Z", "type": "commit"}, {"oid": "97dfd86bceb04477d11554120eb730cbf7fe9e38", "url": "https://github.com/pravega/pravega/commit/97dfd86bceb04477d11554120eb730cbf7fe9e38", "message": "Removed token signing key, changed tests to not use AtomicReference\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-14T09:42:37Z", "type": "forcePushed"}, {"oid": "0381048093ff3f70317c77d60c132b26927aa518", "url": "https://github.com/pravega/pravega/commit/0381048093ff3f70317c77d60c132b26927aa518", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-5221-secure-cli", "committedDate": "2020-12-14T09:43:10Z", "type": "commit"}, {"oid": "41242028f81bb61a32e819e248ce25318457998f", "url": "https://github.com/pravega/pravega/commit/41242028f81bb61a32e819e248ce25318457998f", "message": "Updating admin tests\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-14T12:10:59Z", "type": "commit"}, {"oid": "826b068ab5565edf593c9cec681c4d5da3911269", "url": "https://github.com/pravega/pravega/commit/826b068ab5565edf593c9cec681c4d5da3911269", "message": "Added TODOs\n\nSigned-off-by: anirudhkovuru <anirudhkovuru@gmail.com>", "committedDate": "2020-12-14T12:26:19Z", "type": "commit"}]}