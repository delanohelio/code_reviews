{"pr_number": 4212, "pr_title": "Bugfix and typofix", "pr_author": "dmos62", "pr_createdAt": "2020-04-29T19:26:42Z", "pr_url": "https://github.com/bisq-network/bisq/pull/4212", "timeline": [{"oid": "da1a12206e7a4064fdde26ca4ba8340957c0bb37", "url": "https://github.com/bisq-network/bisq/commit/da1a12206e7a4064fdde26ca4ba8340957c0bb37", "message": "Typo short-circuit boolean operator\n\nNon-bug; only effect that the other instanceof is always evaluated.", "committedDate": "2020-04-29T19:05:07Z", "type": "commit"}, {"oid": "4ec6bac658ca5c8e3cd4d4a9e0ac7207bac8799b", "url": "https://github.com/bisq-network/bisq/commit/4ec6bac658ca5c8e3cd4d4a9e0ac7207bac8799b", "message": "Fix forgotten break in switch statement\n\nThis omission is currently not disruptive, since the next case clause only contains a break. Also converted a few `return false` to breaks, to align with the rest of the switch statement.", "committedDate": "2020-04-29T19:19:29Z", "type": "commit"}, {"oid": "fb76fd65481e882ae0e232c3d8c1814e29a9e878", "url": "https://github.com/bisq-network/bisq/commit/fb76fd65481e882ae0e232c3d8c1814e29a9e878", "message": "Fix forgotten break in switch statement\n\nWithout the break statement, the execution would continue through the subsequent case clauses until it encountered a break, executing `checkArgument` calls meant for `REIMBURSEMENT_MAX_AMOUNT`. More specifically, the bug would cause a failed check in the case where `inputValueAsCoin.value <= 200000000` is false.", "committedDate": "2020-04-29T19:20:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0OTk2Mg==", "url": "https://github.com/bisq-network/bisq/pull/4212#discussion_r420249962", "body": "I think the correct version would be:\r\n```\r\n            case REIMBURSEMENT_MIN_AMOUNT:\r\n            case COMPENSATION_REQUEST_MAX_AMOUNT:\r\n            case REIMBURSEMENT_MAX_AMOUNT:\r\n                checkArgument(inputValueAsCoin.value >= Restrictions.getMinNonDustOutput().value,\r\n                        Res.get(\"validation.amountBelowDust\", Restrictions.getMinNonDustOutput().value));\r\n                checkArgument(inputValueAsCoin.value <= 200000000,\r\n                        Res.get(\"validation.inputTooLarge\", \"200 000 BSQ\"));\r\n                break;\r\n```\r\nAlso MinAmount must not exceed the 200 000 BSQ. ", "bodyText": "I think the correct version would be:\n            case REIMBURSEMENT_MIN_AMOUNT:\n            case COMPENSATION_REQUEST_MAX_AMOUNT:\n            case REIMBURSEMENT_MAX_AMOUNT:\n                checkArgument(inputValueAsCoin.value >= Restrictions.getMinNonDustOutput().value,\n                        Res.get(\"validation.amountBelowDust\", Restrictions.getMinNonDustOutput().value));\n                checkArgument(inputValueAsCoin.value <= 200000000,\n                        Res.get(\"validation.inputTooLarge\", \"200 000 BSQ\"));\n                break;\n\nAlso MinAmount must not exceed the 200 000 BSQ.", "bodyHTML": "<p dir=\"auto\">I think the correct version would be:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"            case REIMBURSEMENT_MIN_AMOUNT:\n            case COMPENSATION_REQUEST_MAX_AMOUNT:\n            case REIMBURSEMENT_MAX_AMOUNT:\n                checkArgument(inputValueAsCoin.value &gt;= Restrictions.getMinNonDustOutput().value,\n                        Res.get(&quot;validation.amountBelowDust&quot;, Restrictions.getMinNonDustOutput().value));\n                checkArgument(inputValueAsCoin.value &lt;= 200000000,\n                        Res.get(&quot;validation.inputTooLarge&quot;, &quot;200 000 BSQ&quot;));\n                break;\"><pre><code>            case REIMBURSEMENT_MIN_AMOUNT:\n            case COMPENSATION_REQUEST_MAX_AMOUNT:\n            case REIMBURSEMENT_MAX_AMOUNT:\n                checkArgument(inputValueAsCoin.value &gt;= Restrictions.getMinNonDustOutput().value,\n                        Res.get(\"validation.amountBelowDust\", Restrictions.getMinNonDustOutput().value));\n                checkArgument(inputValueAsCoin.value &lt;= 200000000,\n                        Res.get(\"validation.inputTooLarge\", \"200 000 BSQ\"));\n                break;\n</code></pre></div>\n<p dir=\"auto\">Also MinAmount must not exceed the 200 000 BSQ.</p>", "author": "ManfredKarrer", "createdAt": "2020-05-05T16:39:41Z", "path": "core/src/main/java/bisq/core/dao/governance/proposal/param/ChangeParamValidator.java", "diffHunk": "@@ -144,6 +144,7 @@ private void validateBsqValue(Coin currentParamValueAsCoin, Coin inputValueAsCoi\n             case REIMBURSEMENT_MIN_AMOUNT:\n                 checkArgument(inputValueAsCoin.value >= Restrictions.getMinNonDustOutput().value,\n                         Res.get(\"validation.amountBelowDust\", Restrictions.getMinNonDustOutput().value));\n+                break;", "originalCommit": "fb76fd65481e882ae0e232c3d8c1814e29a9e878", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MzcyNA==", "url": "https://github.com/bisq-network/bisq/pull/4212#discussion_r420253724", "body": "I don't see any problem with that change but as it is a pure \"cosmetic\" change I prefer to not touch the code. Some could argue the early return is more readable. I don't have a strong opinion and the break is more consistent but evaluating benefit / risk just does not justify the change IMO even it seems a trivial and very low risk change. ", "bodyText": "I don't see any problem with that change but as it is a pure \"cosmetic\" change I prefer to not touch the code. Some could argue the early return is more readable. I don't have a strong opinion and the break is more consistent but evaluating benefit / risk just does not justify the change IMO even it seems a trivial and very low risk change.", "bodyHTML": "<p dir=\"auto\">I don't see any problem with that change but as it is a pure \"cosmetic\" change I prefer to not touch the code. Some could argue the early return is more readable. I don't have a strong opinion and the break is more consistent but evaluating benefit / risk just does not justify the change IMO even it seems a trivial and very low risk change.</p>", "author": "ManfredKarrer", "createdAt": "2020-05-05T16:45:33Z", "path": "core/src/main/java/bisq/core/dao/node/parser/TxOutputParser.java", "diffHunk": "@@ -285,14 +285,15 @@ private boolean isBtcOutputOfBurnFeeTx(TempTxOutput tempTxOutput) {\n                         // We always have the BSQ change before the burned BSQ output if both are present.\n                         checkArgument(optionalOpReturnIndex.isPresent());\n                         if (index != optionalOpReturnIndex.get() - 1) {\n-                            return false;\n+                            break;", "originalCommit": "4ec6bac658ca5c8e3cd4d4a9e0ac7207bac8799b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2NTE0OA==", "url": "https://github.com/bisq-network/bisq/pull/4212#discussion_r420265148", "body": "If the semantic changes in this file are reverted, take care not to revert adding this `break`.", "bodyText": "If the semantic changes in this file are reverted, take care not to revert adding this break.", "bodyHTML": "<p dir=\"auto\">If the semantic changes in this file are reverted, take care not to revert adding this <code>break</code>.</p>", "author": "dmos62", "createdAt": "2020-05-05T17:00:40Z", "path": "core/src/main/java/bisq/core/dao/node/parser/TxOutputParser.java", "diffHunk": "@@ -285,14 +285,15 @@ private boolean isBtcOutputOfBurnFeeTx(TempTxOutput tempTxOutput) {\n                         // We always have the BSQ change before the burned BSQ output if both are present.\n                         checkArgument(optionalOpReturnIndex.isPresent());\n                         if (index != optionalOpReturnIndex.get() - 1) {\n-                            return false;\n+                            break;\n                         }\n \n                         // Without checking the fee we would not be able to distinguish between 2 structurally same transactions, one\n                         // where the output is burned BSQ and one where it is a BSQ change output.\n                         long blindVoteFee = daoStateService.getParamValueAsCoin(Param.BLIND_VOTE_FEE, tempTxOutput.getBlockHeight()).value;\n                         return availableInputValue == blindVoteFee;\n                     }\n+                    break;", "originalCommit": "4ec6bac658ca5c8e3cd4d4a9e0ac7207bac8799b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3MDc0Ng==", "url": "https://github.com/bisq-network/bisq/pull/4212#discussion_r420270746", "bodyText": "I'm doing a revert of the whole PR. There was an easy to use button to do the revert.\nBest make a new PR with the good changes.", "author": "sqrrm", "createdAt": "2020-05-05T17:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2NTE0OA=="}], "type": "inlineReview"}]}