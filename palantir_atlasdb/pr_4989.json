{"pr_number": 4989, "pr_title": "Tl corr history", "pr_author": "sudiksha27", "pr_createdAt": "2020-09-21T09:42:35Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4989", "timeline": [{"oid": "0507ab572ed8d6298c40d1d839c3fb4bd20f4b82", "url": "https://github.com/palantir/atlasdb/commit/0507ab572ed8d6298c40d1d839c3fb4bd20f4b82", "message": "Local history loader", "committedDate": "2020-09-20T10:58:29Z", "type": "commit"}, {"oid": "5c1019fde989c5d2a45ec0b1b4f2e645b702c714", "url": "https://github.com/palantir/atlasdb/commit/5c1019fde989c5d2a45ec0b1b4f2e645b702c714", "message": "Refactor", "committedDate": "2020-09-20T15:55:18Z", "type": "commit"}, {"oid": "88d62be33679d53142ed6a715287eaa8fd13f3b9", "url": "https://github.com/palantir/atlasdb/commit/88d62be33679d53142ed6a715287eaa8fd13f3b9", "message": "Minor cleanup", "committedDate": "2020-09-20T17:19:42Z", "type": "commit"}, {"oid": "1041a0261a68eca3d2c02c811d47ba41830f5056", "url": "https://github.com/palantir/atlasdb/commit/1041a0261a68eca3d2c02c811d47ba41830f5056", "message": "Refactor", "committedDate": "2020-09-21T07:36:03Z", "type": "commit"}, {"oid": "559fea1333f8510e67f587a2083fd34d6508e482", "url": "https://github.com/palantir/atlasdb/commit/559fea1333f8510e67f587a2083fd34d6508e482", "message": "Test", "committedDate": "2020-09-21T07:58:13Z", "type": "commit"}, {"oid": "ce6816c71f0961690f6779401cd7f219112e13b9", "url": "https://github.com/palantir/atlasdb/commit/ce6816c71f0961690f6779401cd7f219112e13b9", "message": "Refactor + remove todos", "committedDate": "2020-09-21T08:57:32Z", "type": "commit"}, {"oid": "ab787fc039dae8f7ab2dc2da2a5ed889eaa2799a", "url": "https://github.com/palantir/atlasdb/commit/ab787fc039dae8f7ab2dc2da2a5ed889eaa2799a", "message": "More tests", "committedDate": "2020-09-21T09:34:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkxNDExMw==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r491914113", "body": "Maintain one map with paxosValue and accepted state merged", "bodyText": "Maintain one map with paxosValue and accepted state merged", "bodyHTML": "<p dir=\"auto\">Maintain one map with paxosValue and accepted state merged</p>", "author": "sudiksha27", "createdAt": "2020-09-21T09:45:48Z", "path": "timelock-corruption/src/main/java/com/palantir/history/models/CompletePaxosHistoryForNamespaceAndUsecase.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.models;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosValue;\n+\n+@Value.Immutable\n+public interface CompletePaxosHistoryForNamespaceAndUsecase {\n+    @Value.Parameter\n+    Client namespace();\n+\n+    @Value.Parameter\n+    String useCase();\n+\n+    @Value.Parameter\n+    List<ConcurrentSkipListMap<Long, PaxosValue>> localAndRemoteLearnerRecords();\n+", "originalCommit": "ab787fc039dae8f7ab2dc2da2a5ed889eaa2799a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "571683c81719223d1bf9d887640d218e3ee6c432", "url": "https://github.com/palantir/atlasdb/commit/571683c81719223d1bf9d887640d218e3ee6c432", "message": "Remove redundant + refactor", "committedDate": "2020-09-21T11:10:37Z", "type": "commit"}, {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "url": "https://github.com/palantir/atlasdb/commit/69fca64e69f8bf118ae7948cb89226f8c185bdac", "message": "Fix test?", "committedDate": "2020-09-21T12:12:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1ODE5OQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492058199", "body": "maybe not needed?", "bodyText": "maybe not needed?", "bodyHTML": "<p dir=\"auto\">maybe not needed?</p>", "author": "jeremyk-91", "createdAt": "2020-09-21T13:47:21Z", "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.history.models.CompletePaxosHistoryForNamespaceAndUsecase;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.history.sqlite.LocalHistoryLoader;\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class PaxosLogHistoryProvider {\n+    private final DataSource dataSource;\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final LocalHistoryLoader localHistoryLoader;\n+    private final Jdbi jdbi;\n+    private Map<NamespaceAndUseCase, Long> verificationProgressState = new ConcurrentHashMap<>();\n+\n+    private static final long INITIAL_PROGRESS = -1L;\n+\n+    public PaxosLogHistoryProvider(DataSource dataSource) {\n+        this.jdbi = init(dataSource);\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.localHistoryLoader = LocalHistoryLoader.create(dataSource);\n+        this.dataSource = dataSource;", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3MDc3Mw==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492070773", "body": "Be careful with race conditions here: this means that learner and acceptor logs are not read transactionally, which could lead to weird circumstances", "bodyText": "Be careful with race conditions here: this means that learner and acceptor logs are not read transactionally, which could lead to weird circumstances", "bodyHTML": "<p dir=\"auto\">Be careful with race conditions here: this means that learner and acceptor logs are not read transactionally, which could lead to weird circumstances</p>", "author": "jeremyk-91", "createdAt": "2020-09-21T14:04:19Z", "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LocalHistoryLoader.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.history.mappers.AcceptorPaxosRoundMapper;\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.history.models.ImmutableLearnerAndAcceptorRecords;\n+import com.palantir.history.models.ImmutablePaxosHistoryOnSingleNode;\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+//TBD cache implementation\n+public class LocalHistoryLoader {\n+    private final Jdbi jdbi;\n+\n+    private LocalHistoryLoader(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static LocalHistoryLoader create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+\n+        jdbi.registerRowMapper(new AcceptorPaxosRoundMapper());\n+        jdbi.registerRowMapper(new LearnerPaxosRoundMapper());\n+        jdbi.registerRowMapper(new NamespaceAndUseCaseMapper());\n+\n+        jdbi.withExtension(SqlitePaxosStateLogQueries.class, SqlitePaxosStateLogQueries::createTable);\n+        return new LocalHistoryLoader(jdbi);\n+    }\n+\n+    public PaxosHistoryOnSingleNode getLocalPaxosHistory(\n+            Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise) {\n+        return ImmutablePaxosHistoryOnSingleNode.of(KeyedStream.stream(laseVerifiedSeqNamespaceAndUseCaseWise)\n+                .map(this::loadLocalHistory)\n+                .collectToMap());\n+    }\n+\n+    private LearnerAndAcceptorRecords loadLocalHistory(NamespaceAndUseCase namespaceAndUseCase, Long seq) {\n+        return ImmutableLearnerAndAcceptorRecords.of(\n+                getLearnerLogsForNamespaceAndUseCaseSince(namespaceAndUseCase, seq),\n+                getAcceptorLogsForNamespaceAndUseCaseSince(namespaceAndUseCase, seq));\n+    }\n+\n+    private Map<Long, PaxosValue> getLearnerLogsForNamespaceAndUseCaseSince(\n+            NamespaceAndUseCase namespaceAndUseCase, long seq) {\n+        return execute(dao -> dao.getLearnerLogsSince(\n+                namespaceAndUseCase.namespace(),\n+                namespaceAndUseCase.useCase(),\n+                seq)).stream().collect(Collectors.toMap(PaxosRound::sequence, PaxosRound::value));\n+    }\n+\n+    private Map<Long, PaxosAcceptorState> getAcceptorLogsForNamespaceAndUseCaseSince(\n+            NamespaceAndUseCase namespaceAndUseCase, long seq) {\n+        return execute(dao -> dao.getAcceptorLogsSince(\n+                namespaceAndUseCase.namespace(),\n+                namespaceAndUseCase.useCase(),\n+                seq)).stream().collect(Collectors.toMap(PaxosRound::sequence, PaxosRound::value));", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3MTUzNQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492071535", "body": "nit: fix parameter name, `lastVerified...`\r\n\r\nProbably enough to just use `lastVerifiedSequences`, the type name covers what the map is!", "bodyText": "nit: fix parameter name, lastVerified...\nProbably enough to just use lastVerifiedSequences, the type name covers what the map is!", "bodyHTML": "<p dir=\"auto\">nit: fix parameter name, <code>lastVerified...</code></p>\n<p dir=\"auto\">Probably enough to just use <code>lastVerifiedSequences</code>, the type name covers what the map is!</p>", "author": "jeremyk-91", "createdAt": "2020-09-21T14:05:22Z", "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.history.models.CompletePaxosHistoryForNamespaceAndUsecase;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.history.sqlite.LocalHistoryLoader;\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class PaxosLogHistoryProvider {\n+    private final DataSource dataSource;\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final LocalHistoryLoader localHistoryLoader;\n+    private final Jdbi jdbi;\n+    private Map<NamespaceAndUseCase, Long> verificationProgressState = new ConcurrentHashMap<>();\n+\n+    private static final long INITIAL_PROGRESS = -1L;\n+\n+    public PaxosLogHistoryProvider(DataSource dataSource) {\n+        this.jdbi = init(dataSource);\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.localHistoryLoader = LocalHistoryLoader.create(dataSource);\n+        this.dataSource = dataSource;\n+    }\n+\n+    private Jdbi init(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.withExtension(SqlitePaxosStateLogQueries.class, SqlitePaxosStateLogQueries::createTable);\n+        return jdbi;\n+    }\n+\n+    private Set<NamespaceAndUseCase> getNamespaceAndUseCaseTuples() {\n+        return jdbi.withExtension(SqlitePaxosStateLogQueries.class,\n+                SqlitePaxosStateLogQueries::getAllNamespaceAndUseCaseTuples);\n+    }\n+\n+    private Long getOrInsertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        Optional<Long> lastVerifiedSeq = logVerificationProgressState.getLastVerifiedSeq(\n+                namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase());\n+        return lastVerifiedSeq.orElseGet(() -> insertVerificationState(namespaceAndUseCase));\n+    }\n+\n+    private Long insertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        logVerificationProgressState.updateProgress(namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase(),\n+                INITIAL_PROGRESS);\n+        return INITIAL_PROGRESS;\n+    }\n+\n+    public List<CompletePaxosHistoryForNamespaceAndUsecase> getHistory() {\n+        Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise = getNamespaceAndUseCaseTuples().stream()", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3MjM1MQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492072351", "body": "maybe just return `ImmutableList.of()` to avoid unexpected NPEs", "bodyText": "maybe just return ImmutableList.of() to avoid unexpected NPEs", "bodyHTML": "<p dir=\"auto\">maybe just return <code>ImmutableList.of()</code> to avoid unexpected NPEs</p>", "author": "jeremyk-91", "createdAt": "2020-09-21T14:06:27Z", "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.history.models.CompletePaxosHistoryForNamespaceAndUsecase;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.history.sqlite.LocalHistoryLoader;\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class PaxosLogHistoryProvider {\n+    private final DataSource dataSource;\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final LocalHistoryLoader localHistoryLoader;\n+    private final Jdbi jdbi;\n+    private Map<NamespaceAndUseCase, Long> verificationProgressState = new ConcurrentHashMap<>();\n+\n+    private static final long INITIAL_PROGRESS = -1L;\n+\n+    public PaxosLogHistoryProvider(DataSource dataSource) {\n+        this.jdbi = init(dataSource);\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.localHistoryLoader = LocalHistoryLoader.create(dataSource);\n+        this.dataSource = dataSource;\n+    }\n+\n+    private Jdbi init(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.withExtension(SqlitePaxosStateLogQueries.class, SqlitePaxosStateLogQueries::createTable);\n+        return jdbi;\n+    }\n+\n+    private Set<NamespaceAndUseCase> getNamespaceAndUseCaseTuples() {\n+        return jdbi.withExtension(SqlitePaxosStateLogQueries.class,\n+                SqlitePaxosStateLogQueries::getAllNamespaceAndUseCaseTuples);\n+    }\n+\n+    private Long getOrInsertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        Optional<Long> lastVerifiedSeq = logVerificationProgressState.getLastVerifiedSeq(\n+                namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase());\n+        return lastVerifiedSeq.orElseGet(() -> insertVerificationState(namespaceAndUseCase));\n+    }\n+\n+    private Long insertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        logVerificationProgressState.updateProgress(namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase(),\n+                INITIAL_PROGRESS);\n+        return INITIAL_PROGRESS;\n+    }\n+\n+    public List<CompletePaxosHistoryForNamespaceAndUsecase> getHistory() {\n+        Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise = getNamespaceAndUseCaseTuples().stream()\n+                .collect(Collectors.toMap(Function.identity(),\n+                        namespaceAndUseCase -> verificationProgressState\n+                                .computeIfAbsent(namespaceAndUseCase, this::getOrInsertVerificationState)));\n+        PaxosHistoryOnSingleNode localPaxosHistory = localHistoryLoader.getLocalPaxosHistory(\n+                laseVerifiedSeqNamespaceAndUseCaseWise);\n+\n+        // TBD get history from remotes, merge, return\n+        return null;", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3MzQ1NA==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492073454", "body": "nit: `logVerificationProgress` - the `paxosLog` table uses lower camel case so we should keep that.", "bodyText": "nit: logVerificationProgress - the paxosLog table uses lower camel case so we should keep that.", "bodyHTML": "<p dir=\"auto\">nit: <code>logVerificationProgress</code> - the <code>paxosLog</code> table uses lower camel case so we should keep that.</p>", "author": "jeremyk-91", "createdAt": "2020-09-21T14:08:00Z", "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LogVerificationProgressState.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import com.palantir.paxos.Client;\n+\n+public final class LogVerificationProgressState {\n+    private final Jdbi jdbi;\n+\n+    private LogVerificationProgressState(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static LogVerificationProgressState create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.getConfig(JdbiImmutables.class).registerImmutable(Client.class);\n+        LogVerificationProgressState state = new LogVerificationProgressState(jdbi);\n+        state.initialize();\n+        return state;\n+    }\n+\n+    private void initialize() {\n+        execute(LogVerificationProgressState.Queries::createVerificationProgressStateTable);\n+    }\n+\n+    public boolean updateProgress(Client client, String useCase, long seq) {\n+        return execute(dao -> dao.updateProgress(client, useCase, seq));\n+    }\n+\n+    public Optional<Long> getLastVerifiedSeq(Client client, String useCase) {\n+        return execute(dao -> dao.getLastVerifiedSeq(client, useCase));\n+    }\n+\n+    private <T> T execute(Function<LogVerificationProgressState.Queries, T> call) {\n+        return jdbi.withExtension(LogVerificationProgressState.Queries.class, call::apply);\n+    }\n+\n+    public interface Queries {\n+        @SqlUpdate(\"CREATE TABLE IF NOT EXISTS log_verification_progress (namespace TEXT, useCase TEXT, seq BIGINT,\"", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3NTU5Mw==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492075593", "body": "nit: You don't need to return this here, see `SqlitePaxosStateLog#writeRound()`", "bodyText": "nit: You don't need to return this here, see SqlitePaxosStateLog#writeRound()", "bodyHTML": "<p dir=\"auto\">nit: You don't need to return this here, see <code>SqlitePaxosStateLog#writeRound()</code></p>", "author": "jeremyk-91", "createdAt": "2020-09-21T14:10:29Z", "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LogVerificationProgressState.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import com.palantir.paxos.Client;\n+\n+public final class LogVerificationProgressState {\n+    private final Jdbi jdbi;\n+\n+    private LogVerificationProgressState(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static LogVerificationProgressState create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.getConfig(JdbiImmutables.class).registerImmutable(Client.class);\n+        LogVerificationProgressState state = new LogVerificationProgressState(jdbi);\n+        state.initialize();\n+        return state;\n+    }\n+\n+    private void initialize() {\n+        execute(LogVerificationProgressState.Queries::createVerificationProgressStateTable);\n+    }\n+\n+    public boolean updateProgress(Client client, String useCase, long seq) {", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3NzMzNg==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492077336", "body": "discussed offline: let's keep the queries where they were, we do want to minimise visibility", "bodyText": "discussed offline: let's keep the queries where they were, we do want to minimise visibility", "bodyHTML": "<p dir=\"auto\">discussed offline: let's keep the queries where they were, we do want to minimise visibility</p>", "author": "jeremyk-91", "createdAt": "2020-09-21T14:12:01Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLogQueries.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.util.OptionalLong;\n+import java.util.Set;\n+\n+import org.jdbi.v3.sqlobject.SingleValue;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlBatch;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import com.palantir.common.persist.Persistable;\n+\n+public interface SqlitePaxosStateLogQueries {", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4MTAxOA==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492081018", "body": "Needs javadocs: what does _complete_ here mean? I gather that this means \"across all nodes\" to contrast with the local one, but this should probably be documented.\r\n\r\nnit: `UseCase` two words to match the variable you have / we've been using", "bodyText": "Needs javadocs: what does complete here mean? I gather that this means \"across all nodes\" to contrast with the local one, but this should probably be documented.\nnit: UseCase two words to match the variable you have / we've been using", "bodyHTML": "<p dir=\"auto\">Needs javadocs: what does <em>complete</em> here mean? I gather that this means \"across all nodes\" to contrast with the local one, but this should probably be documented.</p>\n<p dir=\"auto\">nit: <code>UseCase</code> two words to match the variable you have / we've been using</p>", "author": "jeremyk-91", "createdAt": "2020-09-21T14:15:15Z", "path": "timelock-corruption/src/main/java/com/palantir/history/models/CompletePaxosHistoryForNamespaceAndUsecase.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.models;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.paxos.Client;\n+\n+@Value.Immutable\n+public interface CompletePaxosHistoryForNamespaceAndUsecase {", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4MjI4Mg==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492082282", "body": "it's not normal to depend on concrete collections, so is there a reason we'd mandate a ConcurrentSkipListMap?", "bodyText": "it's not normal to depend on concrete collections, so is there a reason we'd mandate a ConcurrentSkipListMap?", "bodyHTML": "<p dir=\"auto\">it's not normal to depend on concrete collections, so is there a reason we'd mandate a ConcurrentSkipListMap?</p>", "author": "jeremyk-91", "createdAt": "2020-09-21T14:16:23Z", "path": "timelock-corruption/src/main/java/com/palantir/history/models/CompletePaxosHistoryForNamespaceAndUsecase.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.models;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.paxos.Client;\n+\n+@Value.Immutable\n+public interface CompletePaxosHistoryForNamespaceAndUsecase {\n+    @Value.Parameter\n+    Client namespace();\n+\n+    @Value.Parameter\n+    String useCase();\n+\n+    @Value.Parameter\n+    List<ConcurrentSkipListMap<Long, LearnedAndAcceptedValue>> localAndRemoteLearnerAndAcceptorRecords();", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0NjExMQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492146111", "body": "move this logic into PLHP and do it ina single transaction", "bodyText": "move this logic into PLHP and do it ina single transaction", "bodyHTML": "<p dir=\"auto\">move this logic into PLHP and do it ina single transaction</p>", "author": "gmaretic", "createdAt": "2020-09-21T15:23:22Z", "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.history.models.CompletePaxosHistoryForNamespaceAndUsecase;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.history.sqlite.LocalHistoryLoader;\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class PaxosLogHistoryProvider {\n+    private final DataSource dataSource;\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final LocalHistoryLoader localHistoryLoader;\n+    private final Jdbi jdbi;\n+    private Map<NamespaceAndUseCase, Long> verificationProgressState = new ConcurrentHashMap<>();\n+\n+    private static final long INITIAL_PROGRESS = -1L;\n+\n+    public PaxosLogHistoryProvider(DataSource dataSource) {\n+        this.jdbi = init(dataSource);\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.localHistoryLoader = LocalHistoryLoader.create(dataSource);\n+        this.dataSource = dataSource;\n+    }\n+\n+    private Jdbi init(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.withExtension(SqlitePaxosStateLogQueries.class, SqlitePaxosStateLogQueries::createTable);\n+        return jdbi;\n+    }\n+\n+    private Set<NamespaceAndUseCase> getNamespaceAndUseCaseTuples() {\n+        return jdbi.withExtension(SqlitePaxosStateLogQueries.class,\n+                SqlitePaxosStateLogQueries::getAllNamespaceAndUseCaseTuples);\n+    }\n+\n+    private Long getOrInsertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        Optional<Long> lastVerifiedSeq = logVerificationProgressState.getLastVerifiedSeq(\n+                namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase());\n+        return lastVerifiedSeq.orElseGet(() -> insertVerificationState(namespaceAndUseCase));\n+    }\n+\n+    private Long insertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0Njk1Ng==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492146956", "body": "You want to limit these queries, don't forget to order first", "bodyText": "You want to limit these queries, don't forget to order first", "bodyHTML": "<p dir=\"auto\">You want to limit these queries, don't forget to order first</p>", "author": "gmaretic", "createdAt": "2020-09-21T15:24:06Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLogQueries.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.util.OptionalLong;\n+import java.util.Set;\n+\n+import org.jdbi.v3.sqlobject.SingleValue;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlBatch;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import com.palantir.common.persist.Persistable;\n+\n+public interface SqlitePaxosStateLogQueries {\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS paxosLog (\"\n+            + \"namespace TEXT,\"\n+            + \"useCase TEXT,\"\n+            + \"seq BIGINT,\"\n+            + \"val BLOB,\"\n+            + \"PRIMARY KEY(namespace, useCase, seq))\")\n+    boolean createTable();\n+\n+    @SqlUpdate(\"INSERT OR REPLACE INTO paxosLog (namespace, useCase, seq, val) VALUES (\"\n+            + \":namespace.value, :useCase, :seq, :value)\")\n+    boolean writeRound(\n+            @BindPojo(\"namespace\") Client namespace,\n+            @Bind(\"useCase\") String useCase,\n+            @Bind(\"seq\") long seq,\n+            @Bind(\"value\") byte[] value);\n+\n+    @SqlQuery(\"SELECT val FROM paxosLog WHERE namespace = :namespace.value AND useCase = :useCase AND seq = :seq\")\n+    @SingleValue\n+    byte[] readRound(\n+            @BindPojo(\"namespace\") Client namespace,\n+            @Bind(\"useCase\") String useCase,\n+            @Bind(\"seq\") long seq);\n+\n+    @SqlQuery(\"SELECT MIN(seq) FROM paxosLog WHERE namespace = :namespace.value AND useCase = :useCase\")\n+    OptionalLong getLeastLogEntry(@BindPojo(\"namespace\") Client namespace, @Bind(\"useCase\") String useCase);\n+\n+    @SqlQuery(\"SELECT MAX(seq) FROM paxosLog WHERE namespace = :namespace.value AND useCase = :useCase\")\n+    OptionalLong getGreatestLogEntry(@BindPojo(\"namespace\") Client namespace, @Bind(\"useCase\") String useCase);\n+\n+    @SqlUpdate(\"DELETE FROM paxosLog WHERE namespace = :namespace.value AND useCase = :useCase AND seq <= :seq\")\n+    boolean truncate(\n+            @BindPojo(\"namespace\") Client namespace,\n+            @Bind(\"useCase\") String useCase,\n+            @Bind(\"seq\") long seq);\n+\n+    @SqlBatch(\"INSERT OR REPLACE INTO paxosLog (namespace, useCase, seq, val) VALUES (\"\n+            + \":namespace.value, :useCase, :round.sequence, :round.valueBytes)\")\n+    <V extends Persistable & Versionable> boolean[] writeBatchOfRounds(\n+            @BindPojo(\"namespace\") Client namespace,\n+            @Bind(\"useCase\") String useCase,\n+            @BindPojo(\"round\") Iterable<PaxosRound<V>> rounds);\n+\n+    @SqlQuery(\"SELECT DISTINCT(namespace) FROM paxosLog\")\n+    Set<String> getAllNamespaces();\n+\n+    @SqlQuery(\"SELECT DISTINCT namespace, useCase FROM paxosLog\")\n+    Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples();\n+\n+    @SqlQuery(\"SELECT seq, val FROM paxosLog WHERE namespace = :namespace.value AND useCase = :useCase AND seq > :seq\")", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1MjEyNQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492152125", "body": "```suggestion\r\n        Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise = KeyedStream\r\n                .of(getNamespaceAndUseCaseTuples().stream())\r\n                .map(namespaceAndUseCase -> verificationProgressState.computeIfAbsent(namespaceAndUseCase,\r\n                        this::getOrInsertVerificationState))\r\n                .collectToMap();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise = getNamespaceAndUseCaseTuples().stream()\n          \n          \n            \n                    Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise = KeyedStream\n          \n          \n            \n                            .of(getNamespaceAndUseCaseTuples().stream())\n          \n          \n            \n                            .map(namespaceAndUseCase -> verificationProgressState.computeIfAbsent(namespaceAndUseCase,\n          \n          \n            \n                                    this::getOrInsertVerificationState))\n          \n          \n            \n                            .collectToMap();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">NamespaceAndUseCase</span>, <span class=\"pl-smi\">Long</span>&gt;</span> laseVerifiedSeqNamespaceAndUseCaseWise <span class=\"pl-k\">=</span> <span class=\"x x-first\">getNamespaceAndUseCaseTuples()</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">stream()</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">NamespaceAndUseCase</span>, <span class=\"pl-smi\">Long</span>&gt;</span> laseVerifiedSeqNamespaceAndUseCaseWise <span class=\"pl-k\">=</span> <span class=\"pl-smi x x-first x-last\">KeyedStream</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .of(getNamespaceAndUseCaseTuples()<span class=\"pl-k\">.</span>stream())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .map(namespaceAndUseCase <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> verificationProgressState<span class=\"pl-k\">.</span>computeIfAbsent(namespaceAndUseCase,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-c1\">this</span><span class=\"pl-k\">::</span>getOrInsertVerificationState))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .collectToMap();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmaretic", "createdAt": "2020-09-21T15:28:25Z", "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.history.models.CompletePaxosHistoryForNamespaceAndUsecase;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.history.sqlite.LocalHistoryLoader;\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class PaxosLogHistoryProvider {\n+    private final DataSource dataSource;\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final LocalHistoryLoader localHistoryLoader;\n+    private final Jdbi jdbi;\n+    private Map<NamespaceAndUseCase, Long> verificationProgressState = new ConcurrentHashMap<>();\n+\n+    private static final long INITIAL_PROGRESS = -1L;\n+\n+    public PaxosLogHistoryProvider(DataSource dataSource) {\n+        this.jdbi = init(dataSource);\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.localHistoryLoader = LocalHistoryLoader.create(dataSource);\n+        this.dataSource = dataSource;\n+    }\n+\n+    private Jdbi init(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.withExtension(SqlitePaxosStateLogQueries.class, SqlitePaxosStateLogQueries::createTable);\n+        return jdbi;\n+    }\n+\n+    private Set<NamespaceAndUseCase> getNamespaceAndUseCaseTuples() {\n+        return jdbi.withExtension(SqlitePaxosStateLogQueries.class,\n+                SqlitePaxosStateLogQueries::getAllNamespaceAndUseCaseTuples);\n+    }\n+\n+    private Long getOrInsertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        Optional<Long> lastVerifiedSeq = logVerificationProgressState.getLastVerifiedSeq(\n+                namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase());\n+        return lastVerifiedSeq.orElseGet(() -> insertVerificationState(namespaceAndUseCase));\n+    }\n+\n+    private Long insertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        logVerificationProgressState.updateProgress(namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase(),\n+                INITIAL_PROGRESS);\n+        return INITIAL_PROGRESS;\n+    }\n+\n+    public List<CompletePaxosHistoryForNamespaceAndUsecase> getHistory() {\n+        Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise = getNamespaceAndUseCaseTuples().stream()", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NzA2Mw==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492157063", "body": "I think this is fine, maybe chain it all together if it looks better", "bodyText": "I think this is fine, maybe chain it all together if it looks better", "bodyHTML": "<p dir=\"auto\">I think this is fine, maybe chain it all together if it looks better</p>", "author": "gmaretic", "createdAt": "2020-09-21T15:34:53Z", "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LocalHistoryLoader.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.history.mappers.AcceptorPaxosRoundMapper;\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.history.models.ImmutableLearnerAndAcceptorRecords;\n+import com.palantir.history.models.ImmutablePaxosHistoryOnSingleNode;\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+//TBD cache implementation\n+public class LocalHistoryLoader {\n+    private final Jdbi jdbi;\n+\n+    private LocalHistoryLoader(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static LocalHistoryLoader create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+\n+        jdbi.registerRowMapper(new AcceptorPaxosRoundMapper());\n+        jdbi.registerRowMapper(new LearnerPaxosRoundMapper());\n+        jdbi.registerRowMapper(new NamespaceAndUseCaseMapper());", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NzczNQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492157735", "body": "This will be one transaction when we implement it", "bodyText": "This will be one transaction when we implement it", "bodyHTML": "<p dir=\"auto\">This will be one transaction when we implement it</p>", "author": "gmaretic", "createdAt": "2020-09-21T15:35:51Z", "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LocalHistoryLoader.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.history.mappers.AcceptorPaxosRoundMapper;\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.history.models.ImmutableLearnerAndAcceptorRecords;\n+import com.palantir.history.models.ImmutablePaxosHistoryOnSingleNode;\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+//TBD cache implementation\n+public class LocalHistoryLoader {\n+    private final Jdbi jdbi;\n+\n+    private LocalHistoryLoader(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static LocalHistoryLoader create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+\n+        jdbi.registerRowMapper(new AcceptorPaxosRoundMapper());\n+        jdbi.registerRowMapper(new LearnerPaxosRoundMapper());\n+        jdbi.registerRowMapper(new NamespaceAndUseCaseMapper());\n+\n+        jdbi.withExtension(SqlitePaxosStateLogQueries.class, SqlitePaxosStateLogQueries::createTable);\n+        return new LocalHistoryLoader(jdbi);\n+    }\n+\n+    public PaxosHistoryOnSingleNode getLocalPaxosHistory(\n+            Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise) {\n+        return ImmutablePaxosHistoryOnSingleNode.of(KeyedStream.stream(laseVerifiedSeqNamespaceAndUseCaseWise)\n+                .map(this::loadLocalHistory)\n+                .collectToMap());\n+    }\n+\n+    private LearnerAndAcceptorRecords loadLocalHistory(NamespaceAndUseCase namespaceAndUseCase, Long seq) {\n+        return ImmutableLearnerAndAcceptorRecords.of(\n+                getLearnerLogsForNamespaceAndUseCaseSince(namespaceAndUseCase, seq),", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2MjU5Mw==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492162593", "body": "make sure this is tested", "bodyText": "make sure this is tested", "bodyHTML": "<p dir=\"auto\">make sure this is tested</p>", "author": "gmaretic", "createdAt": "2020-09-21T15:43:01Z", "path": "timelock-corruption/src/main/java/com/palantir/history/mappers/AcceptorPaxosRoundMapper.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.mappers;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.jdbi.v3.core.mapper.RowMapper;\n+import org.jdbi.v3.core.statement.StatementContext;\n+\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+\n+public class AcceptorPaxosRoundMapper implements RowMapper<PaxosRound<PaxosAcceptorState>> {\n+    @Override\n+    public PaxosRound<PaxosAcceptorState> map(ResultSet rs, StatementContext ctx) throws SQLException {\n+        PaxosAcceptorState value = PaxosAcceptorState.BYTES_HYDRATOR.hydrateFromBytes(rs.getBytes(\"val\"));", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MDE5Mw==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492170193", "body": "This will change if you implement the suggested change", "bodyText": "This will change if you implement the suggested change", "bodyHTML": "<p dir=\"auto\">This will change if you implement the suggested change</p>", "author": "gmaretic", "createdAt": "2020-09-21T15:53:57Z", "path": "timelock-corruption/src/test/java/com/palantir/history/LogVerificationStateTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Optional;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.SqliteConnections;\n+\n+public class LogVerificationStateTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"tom\");\n+    private static final String USE_CASE = \"useCase1\";\n+\n+    private DataSource dataSource;\n+    private LogVerificationProgressState log;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        log = LogVerificationProgressState.create(dataSource);\n+    }\n+\n+    @Test\n+    public void initialStateIsAbsent() {", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MDgxOA==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492170818", "body": "```suggestion\r\n        assertThat(log.getLastVerifiedSeq(CLIENT, USE_CASE)).hasValue(5L);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(log.getLastVerifiedSeq(CLIENT, USE_CASE)).isPresent();\n          \n          \n            \n                    assertThat(log.getLastVerifiedSeq(CLIENT, USE_CASE)).hasValue(5L);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertThat(log<span class=\"pl-k\">.</span>getLastVerifiedSeq(<span class=\"pl-c1\">CLIENT</span>, <span class=\"pl-c1\">USE_CASE</span>))<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">isPresent(</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertThat(log<span class=\"pl-k\">.</span>getLastVerifiedSeq(<span class=\"pl-c1\">CLIENT</span>, <span class=\"pl-c1\">USE_CASE</span>))<span class=\"pl-k\">.</span><span class=\"x x-first\">hasValue(</span><span class=\"pl-c1 x x-last\">5L</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmaretic", "createdAt": "2020-09-21T15:54:54Z", "path": "timelock-corruption/src/test/java/com/palantir/history/LogVerificationStateTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Optional;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.SqliteConnections;\n+\n+public class LogVerificationStateTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"tom\");\n+    private static final String USE_CASE = \"useCase1\";\n+\n+    private DataSource dataSource;\n+    private LogVerificationProgressState log;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        log = LogVerificationProgressState.create(dataSource);\n+    }\n+\n+    @Test\n+    public void initialStateIsAbsent() {\n+        assertThat(log.getLastVerifiedSeq(CLIENT, USE_CASE)).isNotPresent();\n+    }\n+\n+    @Test\n+    public void canUpdateState() {\n+        assertThat(log.updateProgress(CLIENT, USE_CASE, 5L)).isTrue();\n+        assertThat(log.getLastVerifiedSeq(CLIENT, USE_CASE)).isPresent();", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3NDEyNw==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492174127", "body": "You shouldn't be testing at this level of abstraction here, you should have a method that you call instead", "bodyText": "You shouldn't be testing at this level of abstraction here, you should have a method that you call instead", "bodyHTML": "<p dir=\"auto\">You shouldn't be testing at this level of abstraction here, you should have a method that you call instead</p>", "author": "gmaretic", "createdAt": "2020-09-21T15:59:48Z", "path": "timelock-corruption/src/test/java/com/palantir/history/SqliteHistoryQueryTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class SqliteHistoryQueryTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"tom\");\n+    private static final String USE_CASE = \"useCase1\";\n+\n+    private DataSource dataSource;\n+    private Jdbi jdbi;\n+    private PaxosStateLog<PaxosValue> stateLog;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        stateLog = SqlitePaxosStateLog.create(ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), dataSource);\n+\n+        jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.getConfig(JdbiImmutables.class).registerImmutable(Client.class, PaxosRound.class);\n+        jdbi.registerRowMapper(new LearnerPaxosRoundMapper());\n+        jdbi.registerRowMapper(new NamespaceAndUseCaseMapper());\n+    }\n+\n+    @Test\n+    public void canGetAllLogsSince() {\n+        IntStream.range(0, 100).forEach(i -> writeValueForLogAndRound(stateLog, i + 1));\n+        Function<SqlitePaxosStateLogQueries, Set<PaxosRound<PaxosValue>>> call\n+                = dao -> dao.getLearnerLogsSince(CLIENT, USE_CASE, 5L);", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3NDUxNw==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492174517", "body": "Don't forget to add a test for PAS reading", "bodyText": "Don't forget to add a test for PAS reading", "bodyHTML": "<p dir=\"auto\">Don't forget to add a test for PAS reading</p>", "author": "gmaretic", "createdAt": "2020-09-21T16:00:18Z", "path": "timelock-corruption/src/test/java/com/palantir/history/SqliteHistoryQueryTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class SqliteHistoryQueryTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"tom\");\n+    private static final String USE_CASE = \"useCase1\";\n+\n+    private DataSource dataSource;\n+    private Jdbi jdbi;\n+    private PaxosStateLog<PaxosValue> stateLog;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        stateLog = SqlitePaxosStateLog.create(ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), dataSource);\n+\n+        jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.getConfig(JdbiImmutables.class).registerImmutable(Client.class, PaxosRound.class);\n+        jdbi.registerRowMapper(new LearnerPaxosRoundMapper());\n+        jdbi.registerRowMapper(new NamespaceAndUseCaseMapper());\n+    }\n+\n+    @Test\n+    public void canGetAllLogsSince() {\n+        IntStream.range(0, 100).forEach(i -> writeValueForLogAndRound(stateLog, i + 1));\n+        Function<SqlitePaxosStateLogQueries, Set<PaxosRound<PaxosValue>>> call\n+                = dao -> dao.getLearnerLogsSince(CLIENT, USE_CASE, 5L);\n+        Set<PaxosRound<PaxosValue>> namespaceAndUseCases = jdbi.withExtension(SqlitePaxosStateLogQueries.class,\n+                call::apply);\n+        assertThat(namespaceAndUseCases.size()).isEqualTo(95);\n+    }\n+\n+    @Test\n+    public void canGetAllUniquePairsOfNamespaceAndClient() {\n+        IntStream.range(0, 100).forEach(i -> {\n+            PaxosStateLog<PaxosValue> otherLog\n+                    = SqlitePaxosStateLog.create(ImmutableNamespaceAndUseCase.of(Client.of(\"client\" + i), USE_CASE), dataSource);\n+            writeValueForLogAndRound(otherLog, 1L);\n+        });\n+        Set<NamespaceAndUseCase> namespaceAndUseCases = jdbi.withExtension(SqlitePaxosStateLogQueries.class,\n+                SqlitePaxosStateLogQueries::getAllNamespaceAndUseCaseTuples);\n+        assertThat(namespaceAndUseCases.size()).isEqualTo(100);\n+    }\n+\n+    private PaxosValue writeValueForLogAndRound(PaxosStateLog<PaxosValue> log, long round) {", "originalCommit": "69fca64e69f8bf118ae7948cb89226f8c185bdac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5396cbbd1aead7d30e6cd42843813bd3dedf2e5f", "url": "https://github.com/palantir/atlasdb/commit/5396cbbd1aead7d30e6cd42843813bd3dedf2e5f", "message": "Address comments - 1 | Refactor", "committedDate": "2020-09-21T17:56:52Z", "type": "commit"}, {"oid": "31a14c4bcf6635aef2f53a28e584bc6548522263", "url": "https://github.com/palantir/atlasdb/commit/31a14c4bcf6635aef2f53a28e584bc6548522263", "message": "Address comments - 2 | Rename project", "committedDate": "2020-09-21T18:13:36Z", "type": "commit"}, {"oid": "c75ed4cae916f0957e9adb0602c70ef8551e5556", "url": "https://github.com/palantir/atlasdb/commit/c75ed4cae916f0957e9adb0602c70ef8551e5556", "message": "Address comments | Java doc + Limit on query", "committedDate": "2020-09-21T19:40:59Z", "type": "commit"}, {"oid": "28b7f05ac983969f27eb1d44e8d25db180eb7a7a", "url": "https://github.com/palantir/atlasdb/commit/28b7f05ac983969f27eb1d44e8d25db180eb7a7a", "message": "Checkstyle", "committedDate": "2020-09-21T20:33:27Z", "type": "commit"}, {"oid": "a1ef324a5be29aed9c4d362cc0fb594b552293e8", "url": "https://github.com/palantir/atlasdb/commit/a1ef324a5be29aed9c4d362cc0fb594b552293e8", "message": "Add generated changelog entries", "committedDate": "2020-09-21T20:33:27Z", "type": "commit"}, {"oid": "6cda417667b3a6101d2bda6d61c968d88b126699", "url": "https://github.com/palantir/atlasdb/commit/6cda417667b3a6101d2bda6d61c968d88b126699", "message": "warn log instead of throwing and killing the service", "committedDate": "2020-09-22T09:04:56Z", "type": "commit"}, {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4", "url": "https://github.com/palantir/atlasdb/commit/f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4", "message": "Merge branch 'tl-corr-history' of github.com:palantir/atlasdb into tl-corr-history", "committedDate": "2020-09-22T09:06:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU3ODUyNQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493578525", "body": "```suggestion\r\n        return execute(Queries::getAllNamespaceAndUseCaseTuples);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return execute(dao -> dao.getAllNamespaceAndUseCaseTuples());\n          \n          \n            \n                    return execute(Queries::getAllNamespaceAndUseCaseTuples);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> execute(<span class=\"x x-first\">dao </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> dao</span><span class=\"pl-k x x-last\">.</span>getAllNamespaceAndUseCaseTuples<span class=\"x x-first x-last\">()</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> execute(<span class=\"pl-smi x x-first\">Queries</span><span class=\"pl-k x x-last\">::</span>getAllNamespaceAndUseCaseTuples);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmaretic", "createdAt": "2020-09-23T13:19:33Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/SqlitePaxosStateLogHistory.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+\n+import com.palantir.history.mappers.AcceptorPaxosRoundMapper;\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.history.models.AcceptorUseCase;\n+import com.palantir.history.models.ImmutableRawLearnerAndAcceptorRecords;\n+import com.palantir.history.models.LearnerUseCase;\n+import com.palantir.history.models.RawLearnerAndAcceptorRecords;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+\n+public final class SqlitePaxosStateLogHistory {\n+    private final Jdbi jdbi;\n+\n+    private SqlitePaxosStateLogHistory(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static SqlitePaxosStateLogHistory create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.withExtension(SqlitePaxosStateLog.Queries.class, SqlitePaxosStateLog.Queries::createTable);\n+        jdbi.getConfig(JdbiImmutables.class)\n+                .registerImmutable(Client.class, PaxosRound.class, NamespaceAndUseCase.class);\n+        jdbi.registerRowMapper(new AcceptorPaxosRoundMapper())\n+                .registerRowMapper(new LearnerPaxosRoundMapper())\n+                .registerRowMapper(new NamespaceAndUseCaseMapper());\n+        return new SqlitePaxosStateLogHistory(jdbi);\n+    }\n+\n+    public Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples() {\n+        return execute(dao -> dao.getAllNamespaceAndUseCaseTuples());", "originalCommit": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4MjM5NQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493582395", "body": "How did we chose this limit? We need to figure out the correct limit for remotes", "bodyText": "How did we chose this limit? We need to figure out the correct limit for remotes", "bodyHTML": "<p dir=\"auto\">How did we chose this limit? We need to figure out the correct limit for remotes</p>", "author": "gmaretic", "createdAt": "2020-09-23T13:23:20Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/SqlitePaxosStateLogHistory.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+\n+import com.palantir.history.mappers.AcceptorPaxosRoundMapper;\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.history.models.AcceptorUseCase;\n+import com.palantir.history.models.ImmutableRawLearnerAndAcceptorRecords;\n+import com.palantir.history.models.LearnerUseCase;\n+import com.palantir.history.models.RawLearnerAndAcceptorRecords;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+\n+public final class SqlitePaxosStateLogHistory {\n+    private final Jdbi jdbi;\n+\n+    private SqlitePaxosStateLogHistory(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static SqlitePaxosStateLogHistory create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.withExtension(SqlitePaxosStateLog.Queries.class, SqlitePaxosStateLog.Queries::createTable);\n+        jdbi.getConfig(JdbiImmutables.class)\n+                .registerImmutable(Client.class, PaxosRound.class, NamespaceAndUseCase.class);\n+        jdbi.registerRowMapper(new AcceptorPaxosRoundMapper())\n+                .registerRowMapper(new LearnerPaxosRoundMapper())\n+                .registerRowMapper(new NamespaceAndUseCaseMapper());\n+        return new SqlitePaxosStateLogHistory(jdbi);\n+    }\n+\n+    public Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples() {\n+        return execute(dao -> dao.getAllNamespaceAndUseCaseTuples());\n+    }\n+\n+    public RawLearnerAndAcceptorRecords getRawLearnerAndAcceptorLogsSince(\n+            Client namespace, LearnerUseCase learnerUseCase, AcceptorUseCase acceptorUseCase, long seq) {\n+        return execute(dao -> ImmutableRawLearnerAndAcceptorRecords.of(\n+                dao.getLearnerLogsSince(namespace, learnerUseCase.value(), seq),\n+                dao.getAcceptorLogsSince(namespace, acceptorUseCase.value(), seq)));\n+    }\n+\n+    private <T> T execute(Function<Queries, T> call) {\n+        return jdbi.withExtension(Queries.class, call::apply);\n+    }\n+\n+    public interface Queries {\n+        @SqlQuery(\"SELECT DISTINCT namespace, useCase FROM paxosLog\")\n+        Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples();\n+\n+        @SqlQuery(\"SELECT seq, val FROM paxosLog \"\n+                + \"WHERE namespace = :namespace.value AND useCase = :useCase AND seq > :seq \"\n+                + \"ORDER BY seq ASC LIMIT 500\")", "originalCommit": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTgyMQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493771821", "bodyText": "you can make it a todo, but this is also fine", "author": "gmaretic", "createdAt": "2020-09-23T17:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4MjM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4MzE4OQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493583189", "body": "People usually say \"no\" because they are lazy, but it's not a no op :P", "bodyText": "People usually say \"no\" because they are lazy, but it's not a no op :P", "bodyHTML": "<p dir=\"auto\">People usually say \"no\" because they are lazy, but it's not a no op :P</p>", "author": "gmaretic", "createdAt": "2020-09-23T13:24:05Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/util/UseCaseUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.util;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.history.models.AcceptorUseCase;\n+import com.palantir.history.models.ImmutableAcceptorUseCase;\n+import com.palantir.history.models.ImmutableLearnerUseCase;\n+import com.palantir.history.models.LearnerUseCase;\n+import com.palantir.logsafe.SafeArg;\n+\n+public final class UseCaseUtils {\n+    private static final Logger log = LoggerFactory.getLogger(UseCaseUtils.class);\n+\n+    private UseCaseUtils() {\n+        // no op", "originalCommit": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU5NDY1Ng==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493594656", "body": "Feels like these two should be part of the interface. Also you can put a check on creation that the use case is correctly formatted and the prefix method.", "bodyText": "Feels like these two should be part of the interface. Also you can put a check on creation that the use case is correctly formatted and the prefix method.", "bodyHTML": "<p dir=\"auto\">Feels like these two should be part of the interface. Also you can put a check on creation that the use case is correctly formatted and the prefix method.</p>", "author": "gmaretic", "createdAt": "2020-09-23T13:34:46Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/util/UseCaseUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.util;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.history.models.AcceptorUseCase;\n+import com.palantir.history.models.ImmutableAcceptorUseCase;\n+import com.palantir.history.models.ImmutableLearnerUseCase;\n+import com.palantir.history.models.LearnerUseCase;\n+import com.palantir.logsafe.SafeArg;\n+\n+public final class UseCaseUtils {\n+    private static final Logger log = LoggerFactory.getLogger(UseCaseUtils.class);\n+\n+    private UseCaseUtils() {\n+        // no op\n+    }\n+\n+    public static String getPaxosUseCasePrefix(String useCase) {\n+        int delimiterIndex = useCase.indexOf(\"!\");\n+        if (delimiterIndex == -1) {\n+            log.warn(\"The useCase - {} unexpectedly does not have `!` as delimiter. We should never reach here.\",\n+                    SafeArg.of(\"useCase\", useCase));\n+        }\n+        return useCase.substring(0, delimiterIndex);\n+    }\n+\n+    public static LearnerUseCase getLearnerUseCase(String paxosUseCase) {", "originalCommit": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU5OTY2Nw==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493599667", "body": "nit: make it OptionalLong, and don't box the long in the method below", "bodyText": "nit: make it OptionalLong, and don't box the long in the method below", "bodyHTML": "<p dir=\"auto\">nit: make it OptionalLong, and don't box the long in the method below</p>", "author": "gmaretic", "createdAt": "2020-09-23T13:39:18Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/LogVerificationProgressState.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import com.palantir.paxos.Client;\n+\n+public final class LogVerificationProgressState {\n+    private static final long INITIAL_PROGRESS = -1L;\n+\n+    private final Jdbi jdbi;\n+\n+    private LogVerificationProgressState(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static LogVerificationProgressState create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.getConfig(JdbiImmutables.class).registerImmutable(Client.class);\n+        LogVerificationProgressState state = new LogVerificationProgressState(jdbi);\n+        state.initialize();\n+        return state;\n+    }\n+\n+    private void initialize() {\n+        execute(LogVerificationProgressState.Queries::createVerificationProgressStateTable);\n+    }\n+\n+    public void updateProgress(Client client, String useCase, long seq) {\n+        execute(dao -> dao.updateProgress(client, useCase, seq));\n+    }\n+\n+    public Long getLastVerifiedSeq(Client client, String useCase) {\n+        return execute(dao -> {\n+            Optional<Long> lastVerifiedSeq = dao.getLastVerifiedSeq(client, useCase);", "originalCommit": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwMzQ4NQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493603485", "body": "I would just not have this class and create the LAAR directly", "bodyText": "I would just not have this class and create the LAAR directly", "bodyHTML": "<p dir=\"auto\">I would just not have this class and create the LAAR directly</p>", "author": "gmaretic", "createdAt": "2020-09-23T13:44:08Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/RawLearnerAndAcceptorRecords.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.models;\n+\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosValue;\n+\n+@Value.Immutable\n+public interface RawLearnerAndAcceptorRecords {\n+\n+    @Value.Parameter\n+    Set<PaxosRound<PaxosValue>>  rawLearnerRecords();", "originalCommit": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwNzg1NA==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493607854", "body": "```suggestion\r\npublic class AcceptorPaxosRoundMapper implements RowMapper<Map.Entry<Long, PaxosAcceptorState>> {\r\n    @Override\r\n    public Map.Entry<Long, PaxosAcceptorState> map(ResultSet rs, StatementContext ctx) throws SQLException {\r\n        PaxosAcceptorState value = PaxosAcceptorState.BYTES_HYDRATOR.hydrateFromBytes(rs.getBytes(\"val\"));\r\n        return Maps.immutableEntry(rs.getLong(\"seq\"), value);\r\n    }\r\n}\r\n```\r\nSame for the Learner, and then we can create the map directly in the query and get rid of `RawLearnerAndAcceptorRecords.java`", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class AcceptorPaxosRoundMapper implements RowMapper<PaxosRound<PaxosAcceptorState>> {\n          \n          \n            \n            public class AcceptorPaxosRoundMapper implements RowMapper<Map.Entry<Long, PaxosAcceptorState>> {\n          \n          \n            \n                @Override\n          \n          \n            \n                public Map.Entry<Long, PaxosAcceptorState> map(ResultSet rs, StatementContext ctx) throws SQLException {\n          \n          \n            \n                    PaxosAcceptorState value = PaxosAcceptorState.BYTES_HYDRATOR.hydrateFromBytes(rs.getBytes(\"val\"));\n          \n          \n            \n                    return Maps.immutableEntry(rs.getLong(\"seq\"), value);\n          \n          \n            \n                }\n          \n          \n            \n            }\n          \n      \n    \n    \n  \n\nSame for the Learner, and then we can create the map directly in the query and get rid of RawLearnerAndAcceptorRecords.java", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">AcceptorPaxosRoundMapper</span> <span class=\"pl-k\">implements</span> <span class=\"pl-e\">RowMapper&lt;<span class=\"pl-k\"><span class=\"x x-first x-last\">PaxosRound&lt;</span><span class=\"pl-smi\">PaxosAcceptorState</span>&gt;</span>&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">AcceptorPaxosRoundMapper</span> <span class=\"pl-k\">implements</span> <span class=\"pl-e\">RowMapper&lt;<span class=\"pl-smi x x-first\">Map</span><span class=\"x\">.Entry&lt;</span><span class=\"pl-smi x\">Long</span><span class=\"x x-last\">, </span><span class=\"pl-smi\">PaxosAcceptorState</span>&gt;</span>&gt; {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Override</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span><span class=\"pl-k\">Entry&lt;<span class=\"pl-smi\">Long</span>, <span class=\"pl-smi\">PaxosAcceptorState</span>&gt;</span> map(<span class=\"pl-smi\">ResultSet</span> rs, <span class=\"pl-smi\">StatementContext</span> ctx) throws <span class=\"pl-smi\">SQLException</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">PaxosAcceptorState</span> value <span class=\"pl-k\">=</span> <span class=\"pl-smi\">PaxosAcceptorState</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>BYTES_HYDRATOR</span><span class=\"pl-k\">.</span>hydrateFromBytes(rs<span class=\"pl-k\">.</span>getBytes(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>val<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Maps</span><span class=\"pl-k\">.</span>immutableEntry(rs<span class=\"pl-k\">.</span>getLong(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>seq<span class=\"pl-pds\">\"</span></span>), value);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">}</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Same for the Learner, and then we can create the map directly in the query and get rid of <code>RawLearnerAndAcceptorRecords.java</code></p>", "author": "gmaretic", "createdAt": "2020-09-23T13:49:37Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/mappers/AcceptorPaxosRoundMapper.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.mappers;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.jdbi.v3.core.mapper.RowMapper;\n+import org.jdbi.v3.core.statement.StatementContext;\n+\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+\n+public class AcceptorPaxosRoundMapper implements RowMapper<PaxosRound<PaxosAcceptorState>> {", "originalCommit": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMDgyMw==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493610823", "body": "nit: remove", "bodyText": "nit: remove", "bodyHTML": "<p dir=\"auto\">nit: remove</p>", "author": "gmaretic", "createdAt": "2020-09-23T13:53:11Z", "path": "timelock-corruption-detection/src/test/java/com/palantir/history/SqliteHistoryQueryTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n+import com.palantir.history.util.UseCaseUtils;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosProposalId;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+\n+public class SqliteHistoryQueryTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"tom\");\n+    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n+    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n+\n+    private DataSource dataSource;\n+    private Jdbi jdbi;", "originalCommit": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjAxOQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493612019", "body": "These tests are pretty decent, maybe add a test where some rounds are not present and you have records in both. Maybe even verify the actual paxosvalue", "bodyText": "These tests are pretty decent, maybe add a test where some rounds are not present and you have records in both. Maybe even verify the actual paxosvalue", "bodyHTML": "<p dir=\"auto\">These tests are pretty decent, maybe add a test where some rounds are not present and you have records in both. Maybe even verify the actual paxosvalue</p>", "author": "gmaretic", "createdAt": "2020-09-23T13:54:39Z", "path": "timelock-corruption-detection/src/test/java/com/palantir/history/SqliteHistoryQueryTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n+import com.palantir.history.util.UseCaseUtils;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosProposalId;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+\n+public class SqliteHistoryQueryTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"tom\");\n+    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n+    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n+\n+    private DataSource dataSource;\n+    private Jdbi jdbi;\n+    private PaxosStateLog<PaxosValue> learnerLog;\n+    private PaxosStateLog<PaxosAcceptorState> acceptorLog;\n+    private LocalHistoryLoader history;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        learnerLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_LEARNER), dataSource);\n+        acceptorLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_ACCEPTOR), dataSource);\n+\n+        history = LocalHistoryLoader.create(SqlitePaxosStateLogHistory.create(dataSource));\n+    }\n+\n+    @Test\n+    public void canGetAllLearnerLogsSince() {\n+        IntStream.range(0, 100).forEach(i -> writeValueForLogAndRound(learnerLog, i + 1));\n+        LearnerAndAcceptorRecords learnerAndAcceptorRecords\n+                = history.loadLocalHistory(ImmutableNamespaceAndUseCase.of(\n+                        CLIENT, UseCaseUtils.getPaxosUseCasePrefix(USE_CASE_LEARNER)), 5L);\n+        assertThat(learnerAndAcceptorRecords.acceptorRecords().size()).isEqualTo(0);\n+        assertThat(learnerAndAcceptorRecords.learnerRecords().size()).isEqualTo(95);\n+    }\n+\n+    @Test\n+    public void canGetAllAcceptorLogsSince() {\n+        IntStream.range(0, 100).forEach(i -> writeAcceptorStateForLogAndRound(acceptorLog, i + 1));\n+        LearnerAndAcceptorRecords learnerAndAcceptorRecords\n+                = history.loadLocalHistory(ImmutableNamespaceAndUseCase.of(\n+                CLIENT, UseCaseUtils.getPaxosUseCasePrefix(USE_CASE_LEARNER)), 5L);\n+        assertThat(learnerAndAcceptorRecords.learnerRecords().size()).isEqualTo(0);\n+        assertThat(learnerAndAcceptorRecords.acceptorRecords().size()).isEqualTo(95);\n+    }\n+\n+    @Test\n+    public void canGetAllUniquePairsOfNamespaceAndClient() {\n+        IntStream.range(0, 100).forEach(i -> {\n+            PaxosStateLog<PaxosValue> otherLog\n+                    = SqlitePaxosStateLog.create(ImmutableNamespaceAndUseCase.of(Client.of(\"client\" + i),\n+                    USE_CASE_LEARNER), dataSource);\n+            writeValueForLogAndRound(otherLog, 1L);\n+        });\n+        Set<NamespaceAndUseCase> allNamespaceAndUseCaseTuples = SqlitePaxosStateLogHistory.create(\n+                dataSource).getAllNamespaceAndUseCaseTuples();\n+        assertThat(allNamespaceAndUseCaseTuples.size()).isEqualTo(100);\n+    }\n+\n+    private PaxosValue writeValueForLogAndRound(PaxosStateLog<PaxosValue> log, long round) {", "originalCommit": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyOTAzNg==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493729036", "bodyText": "done", "author": "sudiksha27", "createdAt": "2020-09-23T16:28:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjAxOQ=="}], "type": "inlineReview"}, {"oid": "2a76b6d189e432c40739b5dc2391bd18fc59b9c6", "url": "https://github.com/palantir/atlasdb/commit/2a76b6d189e432c40739b5dc2391bd18fc59b9c6", "message": "Adress comments", "committedDate": "2020-09-23T14:49:47Z", "type": "commit"}, {"oid": "5226a1706c1c860ef99b3f8e22ef3c295ed85fe8", "url": "https://github.com/palantir/atlasdb/commit/5226a1706c1c860ef99b3f8e22ef3c295ed85fe8", "message": "Missed comment | added test", "committedDate": "2020-09-23T14:59:53Z", "type": "commit"}, {"oid": "b311febaf9bfb663e10d4484ca692b78ebcbccad", "url": "https://github.com/palantir/atlasdb/commit/b311febaf9bfb663e10d4484ca692b78ebcbccad", "message": "WIP", "committedDate": "2020-09-23T15:31:01Z", "type": "commit"}, {"oid": "069e38be89a40dfeeb6cdcf19d188d47dda02e0a", "url": "https://github.com/palantir/atlasdb/commit/069e38be89a40dfeeb6cdcf19d188d47dda02e0a", "message": "[TimeLock Corruption] !!!!!!!!!!!!!! (UseCaseUtils Refactor/Bugfix) (#4995)\n\n* use case utils\r\n\r\n* WARN logs", "committedDate": "2020-09-23T16:27:11Z", "type": "commit"}, {"oid": "15f5899126305da007d30e537aae33fefb2c4e83", "url": "https://github.com/palantir/atlasdb/commit/15f5899126305da007d30e537aae33fefb2c4e83", "message": "Add generated changelog entries", "committedDate": "2020-09-23T16:27:11Z", "type": "commit"}, {"oid": "7ab2bc1219cf7df5b9976e4cd4ec204434f25206", "url": "https://github.com/palantir/atlasdb/commit/7ab2bc1219cf7df5b9976e4cd4ec204434f25206", "message": "Checkstyle", "committedDate": "2020-09-23T16:51:23Z", "type": "commit"}, {"oid": "9ee1cb16396b72b1f7049b816d99d8a66e1f5c49", "url": "https://github.com/palantir/atlasdb/commit/9ee1cb16396b72b1f7049b816d99d8a66e1f5c49", "message": "WIP - Do not review", "committedDate": "2020-09-23T16:52:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MDQ4NQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493770485", "body": "\ud83d\udc4d ", "bodyText": "\ud83d\udc4d", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "gmaretic", "createdAt": "2020-09-23T17:36:01Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/mappers/AcceptorPaxosRoundMapper.java", "diffHunk": "@@ -18,17 +18,18 @@\n \n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.Map;\n \n import org.jdbi.v3.core.mapper.RowMapper;\n import org.jdbi.v3.core.statement.StatementContext;\n \n+import com.google.common.collect.Maps;\n import com.palantir.paxos.PaxosAcceptorState;\n-import com.palantir.paxos.PaxosRound;\n \n-public class AcceptorPaxosRoundMapper implements RowMapper<PaxosRound<PaxosAcceptorState>> {\n+public class AcceptorPaxosRoundMapper implements RowMapper<Map.Entry<Long, PaxosAcceptorState>> {", "originalCommit": "2a76b6d189e432c40739b5dc2391bd18fc59b9c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTAzNA==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493771034", "body": "this is fine, but I'd call this method `create`", "bodyText": "this is fine, but I'd call this method create", "bodyHTML": "<p dir=\"auto\">this is fine, but I'd call this method <code>create</code></p>", "author": "gmaretic", "createdAt": "2020-09-23T17:36:55Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/AcceptorUseCase.java", "diffHunk": "@@ -20,7 +20,10 @@\n \n @Value.Immutable\n public interface AcceptorUseCase {\n-\n     @Value.Parameter\n     String value();\n+\n+    static AcceptorUseCase getAcceptorUseCase(String paxosUseCase) {", "originalCommit": "2a76b6d189e432c40739b5dc2391bd18fc59b9c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTExMw==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493771113", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "gmaretic", "createdAt": "2020-09-23T17:37:05Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerUseCase.java", "diffHunk": "@@ -20,7 +20,10 @@\n \n @Value.Immutable\n public interface LearnerUseCase {\n-\n     @Value.Parameter\n     String value();\n+\n+    static LearnerUseCase getLearnerUseCase(String paxosUseCase) {", "originalCommit": "2a76b6d189e432c40739b5dc2391bd18fc59b9c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTYyNA==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493771624", "body": "nit: method name", "bodyText": "nit: method name", "bodyHTML": "<p dir=\"auto\">nit: method name</p>", "author": "gmaretic", "createdAt": "2020-09-23T17:38:02Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/SqlitePaxosStateLogHistory.java", "diffHunk": "@@ -61,12 +62,12 @@ public static SqlitePaxosStateLogHistory create(DataSource dataSource) {\n     }\n \n     public Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples() {\n-        return execute(dao -> dao.getAllNamespaceAndUseCaseTuples());\n+        return execute(Queries::getAllNamespaceAndUseCaseTuples);\n     }\n \n-    public RawLearnerAndAcceptorRecords getRawLearnerAndAcceptorLogsSince(\n+    public LearnerAndAcceptorRecords getRawLearnerAndAcceptorLogsSince(", "originalCommit": "2a76b6d189e432c40739b5dc2391bd18fc59b9c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MjMxMQ==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493772311", "body": "\ud83c\udf96\ufe0f ", "bodyText": "\ud83c\udf96\ufe0f", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"medal_military\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f396.png\">\ud83c\udf96\ufe0f</g-emoji></p>", "author": "gmaretic", "createdAt": "2020-09-23T17:39:16Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/SqlitePaxosStateLogHistory.java", "diffHunk": "@@ -79,18 +80,21 @@ public RawLearnerAndAcceptorRecords getRawLearnerAndAcceptorLogsSince(\n         @SqlQuery(\"SELECT DISTINCT namespace, useCase FROM paxosLog\")\n         Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples();\n \n+//      For now, limit is based on approximation and has not been tested with remotes. We need to revisit this once\n+//      we have the remote history providers set up. Also, we may have to make it configurable to\n+//      accommodate the rate at which logs are being published.\n         @SqlQuery(\"SELECT seq, val FROM paxosLog \"\n                 + \"WHERE namespace = :namespace.value AND useCase = :useCase AND seq > :seq \"\n                 + \"ORDER BY seq ASC LIMIT 500\")\n-        Set<PaxosRound<PaxosValue>> getLearnerLogsSince(\n+        Map<Long, PaxosValue> getLearnerLogsSince(", "originalCommit": "2a76b6d189e432c40739b5dc2391bd18fc59b9c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3NTM5Mg==", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493775392", "body": "nice!", "bodyText": "nice!", "bodyHTML": "<p dir=\"auto\">nice!</p>", "author": "gmaretic", "createdAt": "2020-09-23T17:44:34Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/util/UseCaseUtils.java", "diffHunk": "@@ -16,24 +16,26 @@\n \n package com.palantir.history.util;\n \n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.palantir.logsafe.Preconditions;\n import com.palantir.logsafe.SafeArg;\n \n public final class UseCaseUtils {\n-    private static final Logger log = LoggerFactory.getLogger(UseCaseUtils.class);\n+    private static final Pattern PATTERN = Pattern.compile(\"^(.*)!(.*)$\");\n \n     private UseCaseUtils() {\n         // no op\n     }\n \n     public static String getPaxosUseCasePrefix(String useCase) {\n-        String[] delimitedStrings = useCase.split(\"!\");\n-        if (delimitedStrings.length != 2) {\n-            log.warn(\"The useCase - {} unexpectedly does not have `!` as delimiter. We should never reach here.\",\n-                    SafeArg.of(\"useCase\", useCase));\n-        }\n-        return delimitedStrings[0];\n+        Matcher matcher = PATTERN.matcher(useCase);\n+        Preconditions.checkState(matcher.find(),\n+                \"Unexpected use case format\", SafeArg.of(\"useCase\", useCase));\n+        return matcher.group(1);", "originalCommit": "069e38be89a40dfeeb6cdcf19d188d47dda02e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ecb00dd2edc2384a5974e3ad2294742e6db01de8", "url": "https://github.com/palantir/atlasdb/commit/ecb00dd2edc2384a5974e3ad2294742e6db01de8", "message": "Address comments | please be my last commit on this", "committedDate": "2020-09-23T19:40:24Z", "type": "commit"}]}