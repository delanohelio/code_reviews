{"pr_number": 4760, "pr_title": "Filter out leaderPaxos from list of namespaces", "pr_author": "sudiksha27", "pr_createdAt": "2020-05-11T09:56:48Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4760", "timeline": [{"oid": "b85872162b0da970181e3cb06b0564232097506d", "url": "https://github.com/palantir/atlasdb/commit/b85872162b0da970181e3cb06b0564232097506d", "message": "Filter out leaderPaxos from list of namespaces", "committedDate": "2020-05-11T09:51:59Z", "type": "commit"}, {"oid": "7ed3014f266b148d141b223a83526f1ec540cbfc", "url": "https://github.com/palantir/atlasdb/commit/7ed3014f266b148d141b223a83526f1ec540cbfc", "message": "Add generated changelog entries", "committedDate": "2020-05-11T09:52:59Z", "type": "commit"}, {"oid": "0ff0279ab2ed9de4289908a8efe00192138e9ca7", "url": "https://github.com/palantir/atlasdb/commit/0ff0279ab2ed9de4289908a8efe00192138e9ca7", "message": "Fix imports", "committedDate": "2020-05-11T09:52:59Z", "type": "commit"}, {"oid": "6485433d5b648e8f449ac8c073db0b532b83c9dc", "url": "https://github.com/palantir/atlasdb/commit/6485433d5b648e8f449ac8c073db0b532b83c9dc", "message": "Add generated changelog entries", "committedDate": "2020-05-11T09:52:59Z", "type": "commit"}, {"oid": "fda8c53e67066cb8865fc1e56eda137ca0c634fc", "url": "https://github.com/palantir/atlasdb/commit/fda8c53e67066cb8865fc1e56eda137ca0c634fc", "message": "Tests", "committedDate": "2020-05-11T13:14:28Z", "type": "commit"}, {"oid": "8b6b7995d1635f6d64e304ec8112c7b5917fe6c8", "url": "https://github.com/palantir/atlasdb/commit/8b6b7995d1635f6d64e304ec8112c7b5917fe6c8", "message": "Merge branch 'namespace_loader_bug_fix' of github.com:palantir/atlasdb into namespace_loader_bug_fix", "committedDate": "2020-05-11T13:14:42Z", "type": "commit"}, {"oid": "27f69c92e554ffb0acfd7d2ee26c7c156efe2673", "url": "https://github.com/palantir/atlasdb/commit/27f69c92e554ffb0acfd7d2ee26c7c156efe2673", "message": "Merge branch 'develop' into namespace_loader_bug_fix", "committedDate": "2020-05-11T13:15:40Z", "type": "commit"}, {"oid": "c32c77f74c5445272780a03cc9dffe94c5a3d837", "url": "https://github.com/palantir/atlasdb/commit/c32c77f74c5445272780a03cc9dffe94c5a3d837", "message": "Resolve conflict", "committedDate": "2020-05-11T13:20:30Z", "type": "commit"}, {"oid": "7ac199db33c58cf0848692c03f0547846b97e59b", "url": "https://github.com/palantir/atlasdb/commit/7ac199db33c58cf0848692c03f0547846b97e59b", "message": "Modify test", "committedDate": "2020-05-11T13:31:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyMzk4Mw==", "url": "https://github.com/palantir/atlasdb/pull/4760#discussion_r423123983", "body": "Some improvements I'd suggest here:\r\n- The Path API has a cleaner way of doing this: `Paths.get(tempFolder.getRoot().toPath(), namespace).toFile()`. The main reason is that we can't guarantee `/` is always the path separator.\r\n- `File::mkdirs` fails silently if creating the directory fails. It's probably better to surface such failures earlier in the test, so debugging is easier.", "bodyText": "Some improvements I'd suggest here:\n\nThe Path API has a cleaner way of doing this: Paths.get(tempFolder.getRoot().toPath(), namespace).toFile(). The main reason is that we can't guarantee / is always the path separator.\nFile::mkdirs fails silently if creating the directory fails. It's probably better to surface such failures earlier in the test, so debugging is easier.", "bodyHTML": "<p dir=\"auto\">Some improvements I'd suggest here:</p>\n<ul dir=\"auto\">\n<li>The Path API has a cleaner way of doing this: <code>Paths.get(tempFolder.getRoot().toPath(), namespace).toFile()</code>. The main reason is that we can't guarantee <code>/</code> is always the path separator.</li>\n<li><code>File::mkdirs</code> fails silently if creating the directory fails. It's probably better to surface such failures earlier in the test, so debugging is easier.</li>\n</ul>", "author": "jeremyk-91", "createdAt": "2020-05-11T15:28:09Z", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.management;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.atlasdb.timelock.paxos.PaxosTimeLockConstants;\n+\n+public class DiskNamespaceLoaderTest {\n+    private static final String NAMESPACE_1 = \"namespace_1\";\n+    private static final String NAMESPACE_2 = \"namespace_2\";\n+\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private DiskNamespaceLoader diskNamespaceLoader;\n+\n+    @Before\n+    public void setup() {\n+        createDirectoryForLeaderForEachClientUseCase(NAMESPACE_1);\n+        createDirectoryTimestampUseCase(NAMESPACE_2);\n+        createDirectoryTimestampUseCase(PaxosTimeLockConstants.LEADER_PAXOS_NAMESPACE);\n+        diskNamespaceLoader = new DiskNamespaceLoader(tempFolder.getRoot().toPath());\n+    }\n+\n+    @Test\n+    public void doesNotLoadLeaderPaxosAsNamespace() {\n+        Set<String> namespaces = diskNamespaceLoader.getAllPersistedNamespaces().stream().map(client -> client.value()).collect(\n+                Collectors.toSet());\n+        assertThat(namespaces).containsExactlyInAnyOrder(NAMESPACE_1, NAMESPACE_2);\n+    }\n+\n+    private void createDirectoryForLeaderForEachClientUseCase(String namespace) {\n+        new File(tempFolder.getRoot().toPath() + \"/\" +\n+                Paths.get(PaxosTimeLockConstants.LEADER_PAXOS_NAMESPACE,\n+                        PaxosTimeLockConstants.MULTI_LEADER_PAXOS_NAMESPACE).toString() + \"/\" +\n+                namespace).mkdirs();\n+    }\n+\n+    private void createDirectoryTimestampUseCase(String namespace) {\n+        new File(tempFolder.getRoot().toPath() + \"/\" +", "originalCommit": "7ac199db33c58cf0848692c03f0547846b97e59b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyNDE3Mw==", "url": "https://github.com/palantir/atlasdb/pull/4760#discussion_r423124173", "body": "(see comment on other mkdirs creation)", "bodyText": "(see comment on other mkdirs creation)", "bodyHTML": "<p dir=\"auto\">(see comment on other mkdirs creation)</p>", "author": "jeremyk-91", "createdAt": "2020-05-11T15:28:25Z", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.management;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.atlasdb.timelock.paxos.PaxosTimeLockConstants;\n+\n+public class DiskNamespaceLoaderTest {\n+    private static final String NAMESPACE_1 = \"namespace_1\";\n+    private static final String NAMESPACE_2 = \"namespace_2\";\n+\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private DiskNamespaceLoader diskNamespaceLoader;\n+\n+    @Before\n+    public void setup() {\n+        createDirectoryForLeaderForEachClientUseCase(NAMESPACE_1);\n+        createDirectoryTimestampUseCase(NAMESPACE_2);\n+        createDirectoryTimestampUseCase(PaxosTimeLockConstants.LEADER_PAXOS_NAMESPACE);\n+        diskNamespaceLoader = new DiskNamespaceLoader(tempFolder.getRoot().toPath());\n+    }\n+\n+    @Test\n+    public void doesNotLoadLeaderPaxosAsNamespace() {\n+        Set<String> namespaces = diskNamespaceLoader.getAllPersistedNamespaces().stream().map(client -> client.value()).collect(\n+                Collectors.toSet());\n+        assertThat(namespaces).containsExactlyInAnyOrder(NAMESPACE_1, NAMESPACE_2);\n+    }\n+\n+    private void createDirectoryForLeaderForEachClientUseCase(String namespace) {\n+        new File(tempFolder.getRoot().toPath() + \"/\" +\n+                Paths.get(PaxosTimeLockConstants.LEADER_PAXOS_NAMESPACE,\n+                        PaxosTimeLockConstants.MULTI_LEADER_PAXOS_NAMESPACE).toString() + \"/\" +\n+                namespace).mkdirs();", "originalCommit": "7ac199db33c58cf0848692c03f0547846b97e59b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyNDYwMQ==", "url": "https://github.com/palantir/atlasdb/pull/4760#discussion_r423124601", "body": "Have a look at `TemporaryFolder.after()` \ud83d\ude04 ", "bodyText": "Have a look at TemporaryFolder.after() \ud83d\ude04", "bodyHTML": "<p dir=\"auto\">Have a look at <code>TemporaryFolder.after()</code> <g-emoji class=\"g-emoji\" alias=\"smile\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f604.png\">\ud83d\ude04</g-emoji></p>", "author": "jeremyk-91", "createdAt": "2020-05-11T15:29:01Z", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.management;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.atlasdb.timelock.paxos.PaxosTimeLockConstants;\n+\n+public class DiskNamespaceLoaderTest {\n+    private static final String NAMESPACE_1 = \"namespace_1\";\n+    private static final String NAMESPACE_2 = \"namespace_2\";\n+\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private DiskNamespaceLoader diskNamespaceLoader;\n+\n+    @Before\n+    public void setup() {\n+        createDirectoryForLeaderForEachClientUseCase(NAMESPACE_1);\n+        createDirectoryTimestampUseCase(NAMESPACE_2);\n+        createDirectoryTimestampUseCase(PaxosTimeLockConstants.LEADER_PAXOS_NAMESPACE);\n+        diskNamespaceLoader = new DiskNamespaceLoader(tempFolder.getRoot().toPath());\n+    }\n+\n+    @Test\n+    public void doesNotLoadLeaderPaxosAsNamespace() {\n+        Set<String> namespaces = diskNamespaceLoader.getAllPersistedNamespaces().stream().map(client -> client.value()).collect(\n+                Collectors.toSet());\n+        assertThat(namespaces).containsExactlyInAnyOrder(NAMESPACE_1, NAMESPACE_2);\n+    }\n+\n+    private void createDirectoryForLeaderForEachClientUseCase(String namespace) {\n+        new File(tempFolder.getRoot().toPath() + \"/\" +\n+                Paths.get(PaxosTimeLockConstants.LEADER_PAXOS_NAMESPACE,\n+                        PaxosTimeLockConstants.MULTI_LEADER_PAXOS_NAMESPACE).toString() + \"/\" +\n+                namespace).mkdirs();\n+    }\n+\n+    private void createDirectoryTimestampUseCase(String namespace) {\n+        new File(tempFolder.getRoot().toPath() + \"/\" +\n+                namespace).mkdirs();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        tempFolder.delete();", "originalCommit": "7ac199db33c58cf0848692c03f0547846b97e59b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyNTA0OQ==", "url": "https://github.com/palantir/atlasdb/pull/4760#discussion_r423125049", "body": "nit: maybe `createDirectoryInRootDataDirectory` to avoid confusion?", "bodyText": "nit: maybe createDirectoryInRootDataDirectory to avoid confusion?", "bodyHTML": "<p dir=\"auto\">nit: maybe <code>createDirectoryInRootDataDirectory</code> to avoid confusion?</p>", "author": "jeremyk-91", "createdAt": "2020-05-11T15:29:38Z", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.management;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.atlasdb.timelock.paxos.PaxosTimeLockConstants;\n+\n+public class DiskNamespaceLoaderTest {\n+    private static final String NAMESPACE_1 = \"namespace_1\";\n+    private static final String NAMESPACE_2 = \"namespace_2\";\n+\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private DiskNamespaceLoader diskNamespaceLoader;\n+\n+    @Before\n+    public void setup() {\n+        createDirectoryForLeaderForEachClientUseCase(NAMESPACE_1);\n+        createDirectoryTimestampUseCase(NAMESPACE_2);\n+        createDirectoryTimestampUseCase(PaxosTimeLockConstants.LEADER_PAXOS_NAMESPACE);", "originalCommit": "7ac199db33c58cf0848692c03f0547846b97e59b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyNjU2MQ==", "url": "https://github.com/palantir/atlasdb/pull/4760#discussion_r423126561", "body": "nit: I _believe_ the Rule can be made final, and with that you can make this final and set it here as opposed to inside `setup()` (the test as written works, this is just general cleanliness).", "bodyText": "nit: I believe the Rule can be made final, and with that you can make this final and set it here as opposed to inside setup() (the test as written works, this is just general cleanliness).", "bodyHTML": "<p dir=\"auto\">nit: I <em>believe</em> the Rule can be made final, and with that you can make this final and set it here as opposed to inside <code>setup()</code> (the test as written works, this is just general cleanliness).</p>", "author": "jeremyk-91", "createdAt": "2020-05-11T15:31:47Z", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.management;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.atlasdb.timelock.paxos.PaxosTimeLockConstants;\n+\n+public class DiskNamespaceLoaderTest {\n+    private static final String NAMESPACE_1 = \"namespace_1\";\n+    private static final String NAMESPACE_2 = \"namespace_2\";\n+\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private DiskNamespaceLoader diskNamespaceLoader;", "originalCommit": "7ac199db33c58cf0848692c03f0547846b97e59b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzMjIwNA==", "url": "https://github.com/palantir/atlasdb/pull/4760#discussion_r423232204", "bodyText": "The DiskNamespaceLoader requires path to the tempFolder which is only available after the folder has been created. The only other option TemporaryFolder api gives is to provide the path of parent file. There is not a way to determine the path of the temp folder before it is created (which happens in the before block).", "author": "sudiksha27", "createdAt": "2020-05-11T18:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyNjU2MQ=="}], "type": "inlineReview"}, {"oid": "dbe680e5dae26cf6c3faf7c060cc15250aa616e3", "url": "https://github.com/palantir/atlasdb/commit/dbe680e5dae26cf6c3faf7c060cc15250aa616e3", "message": "Address comments -1", "committedDate": "2020-05-11T17:05:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNDYzOA==", "url": "https://github.com/palantir/atlasdb/pull/4760#discussion_r423614638", "body": "```suggestion\r\n    @Rule\r\n    public final TemporaryFolder tempFolder = new TemporaryFolder();\r\n```\r\n\r\nThis is fine also, just for consistency with the other tests.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public final @Rule TemporaryFolder tempFolder = new TemporaryFolder();\n          \n          \n            \n                @Rule\n          \n          \n            \n                public final TemporaryFolder tempFolder = new TemporaryFolder();\n          \n      \n    \n    \n  \n\nThis is fine also, just for consistency with the other tests.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first\">public</span><span class=\"x\"> </span><span class=\"pl-k x\">final</span><span class=\"x x-last\"> </span><span class=\"pl-k\">@Rule</span><span class=\"x x-first\"> </span><span class=\"pl-smi x\">TemporaryFolder</span><span class=\"x\"> tempFolder </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">TemporaryFolder</span><span class=\"x x-last\">();</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Rule</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">TemporaryFolder</span> tempFolder <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TemporaryFolder</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">This is fine also, just for consistency with the other tests.</p>", "author": "jeremyk-91", "createdAt": "2020-05-12T10:02:07Z", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.management;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.atlasdb.timelock.paxos.PaxosTimeLockConstants;\n+\n+public class DiskNamespaceLoaderTest {\n+    private static final String NAMESPACE_1 = \"namespace_1\";\n+    private static final String NAMESPACE_2 = \"namespace_2\";\n+\n+\n+    public final @Rule TemporaryFolder tempFolder = new TemporaryFolder();", "originalCommit": "dbe680e5dae26cf6c3faf7c060cc15250aa616e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNDkxOA==", "url": "https://github.com/palantir/atlasdb/pull/4760#discussion_r423614918", "body": "nit: 2 lines?", "bodyText": "nit: 2 lines?", "bodyHTML": "<p dir=\"auto\">nit: 2 lines?</p>", "author": "jeremyk-91", "createdAt": "2020-05-12T10:02:40Z", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.management;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.atlasdb.timelock.paxos.PaxosTimeLockConstants;\n+\n+public class DiskNamespaceLoaderTest {\n+    private static final String NAMESPACE_1 = \"namespace_1\";\n+    private static final String NAMESPACE_2 = \"namespace_2\";\n+\n+", "originalCommit": "dbe680e5dae26cf6c3faf7c060cc15250aa616e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNjExMQ==", "url": "https://github.com/palantir/atlasdb/pull/4760#discussion_r423616111", "body": "nit: Let's use a method reference here (`Client::value` as opposed to `x -> x.value()`)", "bodyText": "nit: Let's use a method reference here (Client::value as opposed to x -> x.value())", "bodyHTML": "<p dir=\"auto\">nit: Let's use a method reference here (<code>Client::value</code> as opposed to <code>x -&gt; x.value()</code>)</p>", "author": "jeremyk-91", "createdAt": "2020-05-12T10:04:45Z", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.management;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.atlasdb.timelock.paxos.PaxosTimeLockConstants;\n+\n+public class DiskNamespaceLoaderTest {\n+    private static final String NAMESPACE_1 = \"namespace_1\";\n+    private static final String NAMESPACE_2 = \"namespace_2\";\n+\n+\n+    public final @Rule TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    public DiskNamespaceLoader diskNamespaceLoader;\n+\n+    @Before\n+    public void setup() {\n+        diskNamespaceLoader = new DiskNamespaceLoader(tempFolder.getRoot().toPath());\n+        createDirectoryForLeaderForEachClientUseCase(NAMESPACE_1);\n+        createDirectoryInRootDataDirectory(NAMESPACE_2);\n+    }\n+\n+    @Test\n+    public void doesNotLoadLeaderPaxosAsNamespace() {\n+        Set<String> namespaces = diskNamespaceLoader.getAllPersistedNamespaces().stream().map(client -> client.value()).collect(", "originalCommit": "dbe680e5dae26cf6c3faf7c060cc15250aa616e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNzU3MA==", "url": "https://github.com/palantir/atlasdb/pull/4760#discussion_r423617570", "body": "nit: I think it's probably nicer to do `tempFolder.getRoot().toPath().resolve(LEADER_PAXOS_NAMESPACE).resolve(...)` which should behave in the same way", "bodyText": "nit: I think it's probably nicer to do tempFolder.getRoot().toPath().resolve(LEADER_PAXOS_NAMESPACE).resolve(...) which should behave in the same way", "bodyHTML": "<p dir=\"auto\">nit: I think it's probably nicer to do <code>tempFolder.getRoot().toPath().resolve(LEADER_PAXOS_NAMESPACE).resolve(...)</code> which should behave in the same way</p>", "author": "jeremyk-91", "createdAt": "2020-05-12T10:07:20Z", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.management;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.atlasdb.timelock.paxos.PaxosTimeLockConstants;\n+\n+public class DiskNamespaceLoaderTest {\n+    private static final String NAMESPACE_1 = \"namespace_1\";\n+    private static final String NAMESPACE_2 = \"namespace_2\";\n+\n+\n+    public final @Rule TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    public DiskNamespaceLoader diskNamespaceLoader;\n+\n+    @Before\n+    public void setup() {\n+        diskNamespaceLoader = new DiskNamespaceLoader(tempFolder.getRoot().toPath());\n+        createDirectoryForLeaderForEachClientUseCase(NAMESPACE_1);\n+        createDirectoryInRootDataDirectory(NAMESPACE_2);\n+    }\n+\n+    @Test\n+    public void doesNotLoadLeaderPaxosAsNamespace() {\n+        Set<String> namespaces = diskNamespaceLoader.getAllPersistedNamespaces().stream().map(client -> client.value()).collect(\n+                Collectors.toSet());\n+        assertThat(namespaces).containsExactlyInAnyOrder(NAMESPACE_1, NAMESPACE_2);\n+    }\n+\n+    private void createDirectoryForLeaderForEachClientUseCase(String namespace) {\n+        if (Paths.get(tempFolder.getRoot().toPath().toString(),", "originalCommit": "dbe680e5dae26cf6c3faf7c060cc15250aa616e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7163e6bcb046ff749abaabb72c3495dfd3888408", "url": "https://github.com/palantir/atlasdb/commit/7163e6bcb046ff749abaabb72c3495dfd3888408", "message": "Address comments - 2", "committedDate": "2020-05-12T10:27:45Z", "type": "commit"}]}