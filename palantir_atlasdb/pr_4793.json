{"pr_number": 4793, "pr_title": "[PaxosStateLog] Splitting log", "pr_author": "gmaretic", "pr_createdAt": "2020-05-21T16:51:50Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4793", "timeline": [{"oid": "ae1c1dea8ddae53b161dd69ce871713235d75df8", "url": "https://github.com/palantir/atlasdb/commit/ae1c1dea8ddae53b161dd69ce871713235d75df8", "message": "Splitting log", "committedDate": "2020-05-21T16:49:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNzc0Nw==", "url": "https://github.com/palantir/atlasdb/pull/4793#discussion_r428807747", "body": "Seems like we should truncate both? Or just throw UnsupportedOperationException given where we're deploying this", "bodyText": "Seems like we should truncate both? Or just throw UnsupportedOperationException given where we're deploying this", "bodyHTML": "<p dir=\"auto\">Seems like we should truncate both? Or just throw UnsupportedOperationException given where we're deploying this</p>", "author": "jeremyk-91", "createdAt": "2020-05-21T17:39:22Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+\n+import com.palantir.common.persist.Persistable;\n+\n+/**\n+ * This implementation of {@link PaxosStateLog} delegates all reads and writes of rounds to one of two delegates, as\n+ * determined by the cutoff point. If a read or write does occur prior to the cutoff point, i.e., to the legacy delegate\n+ * e update the appropriate metric. Remaining methods are delegated only to the current delegate.\n+ */\n+public class SplittingPaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final PaxosStateLog<V> legacyLog;\n+    private final PaxosStateLog<V> currentLog;\n+    private final Runnable markLegacyWrite;\n+    private final Runnable markLegacyRead;\n+    private final long cutoffInclusive;\n+\n+    public SplittingPaxosStateLog(PaxosStateLog<V> legacyLog,\n+            PaxosStateLog<V> currentLog,\n+            Runnable markLegacyWrite,\n+            Runnable markLegacyRead,\n+            long cutoffInclusive) {\n+        this.legacyLog = legacyLog;\n+        this.currentLog = currentLog;\n+        this.markLegacyWrite = markLegacyWrite;\n+        this.markLegacyRead = markLegacyRead;\n+        this.cutoffInclusive = cutoffInclusive;\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        if (seq >= cutoffInclusive) {\n+            currentLog.writeRound(seq, round);\n+        } else {\n+            markLegacyWrite.run();\n+            legacyLog.writeRound(seq, round);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) throws IOException {\n+        if (seq >= cutoffInclusive) {\n+            return currentLog.readRound(seq);\n+        } else {\n+            markLegacyRead.run();\n+            return legacyLog.readRound(seq);\n+        }\n+    }\n+\n+    @Override\n+    public long getLeastLogEntry() {\n+        return currentLog.getLeastLogEntry();\n+    }\n+\n+    @Override\n+    public long getGreatestLogEntry() {\n+        return currentLog.getGreatestLogEntry();\n+    }\n+\n+    @Override\n+    public void truncate(long toDeleteInclusive) {\n+        currentLog.truncate(toDeleteInclusive);", "originalCommit": "ae1c1dea8ddae53b161dd69ce871713235d75df8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwOTAzNw==", "url": "https://github.com/palantir/atlasdb/pull/4793#discussion_r428809037", "body": "We should talk about this one: I think it needs careful thought. The acceptors for example are just going to fail the legacy requests with a TruncatedStateLogException (see `PaxosAcceptor.checkLogIfNeeded()`) which might affect our visibility into them", "bodyText": "We should talk about this one: I think it needs careful thought. The acceptors for example are just going to fail the legacy requests with a TruncatedStateLogException (see PaxosAcceptor.checkLogIfNeeded()) which might affect our visibility into them", "bodyHTML": "<p dir=\"auto\">We should talk about this one: I think it needs careful thought. The acceptors for example are just going to fail the legacy requests with a TruncatedStateLogException (see <code>PaxosAcceptor.checkLogIfNeeded()</code>) which might affect our visibility into them</p>", "author": "jeremyk-91", "createdAt": "2020-05-21T17:41:45Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+\n+import com.palantir.common.persist.Persistable;\n+\n+/**\n+ * This implementation of {@link PaxosStateLog} delegates all reads and writes of rounds to one of two delegates, as\n+ * determined by the cutoff point. If a read or write does occur prior to the cutoff point, i.e., to the legacy delegate\n+ * e update the appropriate metric. Remaining methods are delegated only to the current delegate.\n+ */\n+public class SplittingPaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final PaxosStateLog<V> legacyLog;\n+    private final PaxosStateLog<V> currentLog;\n+    private final Runnable markLegacyWrite;\n+    private final Runnable markLegacyRead;\n+    private final long cutoffInclusive;\n+\n+    public SplittingPaxosStateLog(PaxosStateLog<V> legacyLog,\n+            PaxosStateLog<V> currentLog,\n+            Runnable markLegacyWrite,\n+            Runnable markLegacyRead,\n+            long cutoffInclusive) {\n+        this.legacyLog = legacyLog;\n+        this.currentLog = currentLog;\n+        this.markLegacyWrite = markLegacyWrite;\n+        this.markLegacyRead = markLegacyRead;\n+        this.cutoffInclusive = cutoffInclusive;\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        if (seq >= cutoffInclusive) {\n+            currentLog.writeRound(seq, round);\n+        } else {\n+            markLegacyWrite.run();\n+            legacyLog.writeRound(seq, round);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) throws IOException {\n+        if (seq >= cutoffInclusive) {\n+            return currentLog.readRound(seq);\n+        } else {\n+            markLegacyRead.run();\n+            return legacyLog.readRound(seq);\n+        }\n+    }\n+\n+    @Override\n+    public long getLeastLogEntry() {\n+        return currentLog.getLeastLogEntry();", "originalCommit": "ae1c1dea8ddae53b161dd69ce871713235d75df8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "16cec72eefa0b46b8fba84135220e6c7f326a6d3", "url": "https://github.com/palantir/atlasdb/commit/16cec72eefa0b46b8fba84135220e6c7f326a6d3", "message": "Noop truncate and remember least log entry", "committedDate": "2020-05-22T13:06:20Z", "type": "commit"}, {"oid": "969dc92c856dd966f28213a8922a6a3966cd608b", "url": "https://github.com/palantir/atlasdb/commit/969dc92c856dd966f28213a8922a6a3966cd608b", "message": "Improve logic", "committedDate": "2020-05-22T13:46:42Z", "type": "commit"}, {"oid": "b6b637f0964be274182692688e5fd2a20cc6e829", "url": "https://github.com/palantir/atlasdb/commit/b6b637f0964be274182692688e5fd2a20cc6e829", "message": "Checkstyle", "committedDate": "2020-05-22T13:58:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4MjgwNg==", "url": "https://github.com/palantir/atlasdb/pull/4793#discussion_r430382806", "body": "Good to disambiguate the types", "bodyText": "Good to disambiguate the types", "bodyHTML": "<p dir=\"auto\">Good to disambiguate the types</p>", "author": "jeremyk-91", "createdAt": "2020-05-26T12:44:04Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.common.persist.Persistable;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This implementation of {@link PaxosStateLog} delegates all reads and writes of rounds to one of two delegates, as\n+ * determined by the cutoff point. If a read or write does occur prior to the cutoff point, i.e., to the legacy delegate\n+ * we update the appropriate metric. Remaining methods are delegated only to the current delegate.\n+ */\n+public final class SplittingPaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final PaxosStateLog<V> legacyLog;\n+    private final PaxosStateLog<V> currentLog;\n+    private final Runnable markLegacyWrite;\n+    private final Runnable markLegacyRead;\n+    private final long cutoffInclusive;\n+    private final AtomicLong leastLogEntry;\n+\n+    private SplittingPaxosStateLog(PaxosStateLog<V> legacyLog,\n+            PaxosStateLog<V> currentLog,\n+            Runnable markLegacyWrite,\n+            Runnable markLegacyRead,\n+            long cutoffInclusive,\n+            AtomicLong leastLogEntry) {\n+        this.legacyLog = legacyLog;\n+        this.currentLog = currentLog;\n+        this.markLegacyWrite = markLegacyWrite;\n+        this.markLegacyRead = markLegacyRead;\n+        this.cutoffInclusive = cutoffInclusive;\n+        this.leastLogEntry = leastLogEntry;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> create(SplittingParameters<V> parameters) {\n+        return new SplittingPaxosStateLog<>(\n+                parameters.legacyLog(),\n+                parameters.currentLog(),\n+                parameters.markLegacyWrite(),\n+                parameters.markLegacyRead(),\n+                parameters.cutoffInclusive(),\n+                new AtomicLong(Math.min(parameters.legacyLog().getLeastLogEntry(), parameters.cutoffInclusive())));\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        if (seq >= cutoffInclusive) {\n+            currentLog.writeRound(seq, round);\n+        } else {\n+            markLegacyWrite.run();\n+            legacyLog.writeRound(seq, round);\n+            leastLogEntry.accumulateAndGet(seq, Math::min);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) throws IOException {\n+        if (seq >= cutoffInclusive) {\n+            return currentLog.readRound(seq);\n+        } else {\n+            markLegacyRead.run();\n+            return legacyLog.readRound(seq);\n+        }\n+    }\n+\n+    @Override\n+    public long getLeastLogEntry() {\n+        return leastLogEntry.get();\n+    }\n+\n+    @Override\n+    public long getGreatestLogEntry() {\n+        return currentLog.getGreatestLogEntry();\n+    }\n+\n+    /**\n+     * This implementation is a noop to ensure correctness of {@link #getLeastLogEntry()}.\n+     */\n+    @Override\n+    public void truncate(long toDeleteInclusive) {\n+        // noop\n+    }\n+\n+    @Value.Immutable\n+    abstract static class SplittingParameters<V extends Persistable & Versionable> {\n+        abstract PaxosStateLog<V> legacyLog();\n+        abstract PaxosStateLog<V> currentLog();\n+        abstract Runnable markLegacyWrite();\n+        abstract Runnable markLegacyRead();", "originalCommit": "b6b637f0964be274182692688e5fd2a20cc6e829", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4NTcyOA==", "url": "https://github.com/palantir/atlasdb/pull/4793#discussion_r430385728", "body": "This does incur a read whenever creating this object.\r\n\r\nThis is constructed once per (client, use-case). Let's go ahead with this for now I think", "bodyText": "This does incur a read whenever creating this object.\nThis is constructed once per (client, use-case). Let's go ahead with this for now I think", "bodyHTML": "<p dir=\"auto\">This does incur a read whenever creating this object.</p>\n<p dir=\"auto\">This is constructed once per (client, use-case). Let's go ahead with this for now I think</p>", "author": "jeremyk-91", "createdAt": "2020-05-26T12:48:54Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.common.persist.Persistable;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This implementation of {@link PaxosStateLog} delegates all reads and writes of rounds to one of two delegates, as\n+ * determined by the cutoff point. If a read or write does occur prior to the cutoff point, i.e., to the legacy delegate\n+ * we update the appropriate metric. Remaining methods are delegated only to the current delegate.\n+ */\n+public final class SplittingPaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final PaxosStateLog<V> legacyLog;\n+    private final PaxosStateLog<V> currentLog;\n+    private final Runnable markLegacyWrite;\n+    private final Runnable markLegacyRead;\n+    private final long cutoffInclusive;\n+    private final AtomicLong leastLogEntry;\n+\n+    private SplittingPaxosStateLog(PaxosStateLog<V> legacyLog,\n+            PaxosStateLog<V> currentLog,\n+            Runnable markLegacyWrite,\n+            Runnable markLegacyRead,\n+            long cutoffInclusive,\n+            AtomicLong leastLogEntry) {\n+        this.legacyLog = legacyLog;\n+        this.currentLog = currentLog;\n+        this.markLegacyWrite = markLegacyWrite;\n+        this.markLegacyRead = markLegacyRead;\n+        this.cutoffInclusive = cutoffInclusive;\n+        this.leastLogEntry = leastLogEntry;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> create(SplittingParameters<V> parameters) {\n+        return new SplittingPaxosStateLog<>(\n+                parameters.legacyLog(),\n+                parameters.currentLog(),\n+                parameters.markLegacyWrite(),\n+                parameters.markLegacyRead(),\n+                parameters.cutoffInclusive(),\n+                new AtomicLong(Math.min(parameters.legacyLog().getLeastLogEntry(), parameters.cutoffInclusive())));\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        if (seq >= cutoffInclusive) {\n+            currentLog.writeRound(seq, round);\n+        } else {\n+            markLegacyWrite.run();\n+            legacyLog.writeRound(seq, round);\n+            leastLogEntry.accumulateAndGet(seq, Math::min);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) throws IOException {\n+        if (seq >= cutoffInclusive) {\n+            return currentLog.readRound(seq);\n+        } else {\n+            markLegacyRead.run();\n+            return legacyLog.readRound(seq);\n+        }\n+    }\n+\n+    @Override\n+    public long getLeastLogEntry() {\n+        return leastLogEntry.get();\n+    }\n+\n+    @Override\n+    public long getGreatestLogEntry() {\n+        return currentLog.getGreatestLogEntry();\n+    }\n+\n+    /**\n+     * This implementation is a noop to ensure correctness of {@link #getLeastLogEntry()}.\n+     */\n+    @Override\n+    public void truncate(long toDeleteInclusive) {\n+        // noop\n+    }\n+\n+    @Value.Immutable\n+    abstract static class SplittingParameters<V extends Persistable & Versionable> {\n+        abstract PaxosStateLog<V> legacyLog();\n+        abstract PaxosStateLog<V> currentLog();\n+        abstract Runnable markLegacyWrite();\n+        abstract Runnable markLegacyRead();\n+        abstract long cutoffInclusive();\n+\n+        @Value.Check\n+        void cutoffEntryMustBeInCurrentLogOrEqualToNoEntry() {\n+            try {\n+                Preconditions.checkState(cutoffInclusive() == PaxosAcceptor.NO_LOG_ENTRY\n+                                || currentLog().readRound(cutoffInclusive()) != null,", "originalCommit": "b6b637f0964be274182692688e5fd2a20cc6e829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNjQxMg==", "url": "https://github.com/palantir/atlasdb/pull/4793#discussion_r430426412", "bodyText": "discussing offline:\n\nActually, we want to check that at least one entry exists in the new log after the cutoff - and this can be checked by verifying that the greatest log entry in currentLog() is at least the cutoff", "author": "jeremyk-91", "createdAt": "2020-05-26T13:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4NTcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4OTQyMQ==", "url": "https://github.com/palantir/atlasdb/pull/4793#discussion_r430389421", "body": "Discussed offline: This is ok as long as we make sure internal server doesn't say that it is fully ready until this has completed for all clients.", "bodyText": "Discussed offline: This is ok as long as we make sure internal server doesn't say that it is fully ready until this has completed for all clients.", "bodyHTML": "<p dir=\"auto\">Discussed offline: This is ok as long as we make sure internal server doesn't say that it is fully ready until this has completed for all clients.</p>", "author": "jeremyk-91", "createdAt": "2020-05-26T12:54:46Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.common.persist.Persistable;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This implementation of {@link PaxosStateLog} delegates all reads and writes of rounds to one of two delegates, as\n+ * determined by the cutoff point. If a read or write does occur prior to the cutoff point, i.e., to the legacy delegate\n+ * we update the appropriate metric. Remaining methods are delegated only to the current delegate.\n+ */\n+public final class SplittingPaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final PaxosStateLog<V> legacyLog;\n+    private final PaxosStateLog<V> currentLog;\n+    private final Runnable markLegacyWrite;\n+    private final Runnable markLegacyRead;\n+    private final long cutoffInclusive;\n+    private final AtomicLong leastLogEntry;\n+\n+    private SplittingPaxosStateLog(PaxosStateLog<V> legacyLog,\n+            PaxosStateLog<V> currentLog,\n+            Runnable markLegacyWrite,\n+            Runnable markLegacyRead,\n+            long cutoffInclusive,\n+            AtomicLong leastLogEntry) {\n+        this.legacyLog = legacyLog;\n+        this.currentLog = currentLog;\n+        this.markLegacyWrite = markLegacyWrite;\n+        this.markLegacyRead = markLegacyRead;\n+        this.cutoffInclusive = cutoffInclusive;\n+        this.leastLogEntry = leastLogEntry;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> create(SplittingParameters<V> parameters) {\n+        return new SplittingPaxosStateLog<>(\n+                parameters.legacyLog(),\n+                parameters.currentLog(),\n+                parameters.markLegacyWrite(),\n+                parameters.markLegacyRead(),\n+                parameters.cutoffInclusive(),\n+                new AtomicLong(Math.min(parameters.legacyLog().getLeastLogEntry(), parameters.cutoffInclusive())));", "originalCommit": "b6b637f0964be274182692688e5fd2a20cc6e829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4OTc1OQ==", "url": "https://github.com/palantir/atlasdb/pull/4793#discussion_r430389759", "bodyText": "We can also hack in an optimisation to make getLeastLogEntry() faster at a majority of installations.", "author": "jeremyk-91", "createdAt": "2020-05-26T12:55:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4OTQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MTM4Ng==", "url": "https://github.com/palantir/atlasdb/pull/4793#discussion_r430391386", "body": "`log.warn(\"Tried to truncate with an impl that doesn't support it\")` or something like that please, this may confuse unsuspecting users.", "bodyText": "log.warn(\"Tried to truncate with an impl that doesn't support it\") or something like that please, this may confuse unsuspecting users.", "bodyHTML": "<p dir=\"auto\"><code>log.warn(\"Tried to truncate with an impl that doesn't support it\")</code> or something like that please, this may confuse unsuspecting users.</p>", "author": "jeremyk-91", "createdAt": "2020-05-26T12:57:48Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.common.persist.Persistable;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This implementation of {@link PaxosStateLog} delegates all reads and writes of rounds to one of two delegates, as\n+ * determined by the cutoff point. If a read or write does occur prior to the cutoff point, i.e., to the legacy delegate\n+ * we update the appropriate metric. Remaining methods are delegated only to the current delegate.\n+ */\n+public final class SplittingPaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final PaxosStateLog<V> legacyLog;\n+    private final PaxosStateLog<V> currentLog;\n+    private final Runnable markLegacyWrite;\n+    private final Runnable markLegacyRead;\n+    private final long cutoffInclusive;\n+    private final AtomicLong leastLogEntry;\n+\n+    private SplittingPaxosStateLog(PaxosStateLog<V> legacyLog,\n+            PaxosStateLog<V> currentLog,\n+            Runnable markLegacyWrite,\n+            Runnable markLegacyRead,\n+            long cutoffInclusive,\n+            AtomicLong leastLogEntry) {\n+        this.legacyLog = legacyLog;\n+        this.currentLog = currentLog;\n+        this.markLegacyWrite = markLegacyWrite;\n+        this.markLegacyRead = markLegacyRead;\n+        this.cutoffInclusive = cutoffInclusive;\n+        this.leastLogEntry = leastLogEntry;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> create(SplittingParameters<V> parameters) {\n+        return new SplittingPaxosStateLog<>(\n+                parameters.legacyLog(),\n+                parameters.currentLog(),\n+                parameters.markLegacyWrite(),\n+                parameters.markLegacyRead(),\n+                parameters.cutoffInclusive(),\n+                new AtomicLong(Math.min(parameters.legacyLog().getLeastLogEntry(), parameters.cutoffInclusive())));\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        if (seq >= cutoffInclusive) {\n+            currentLog.writeRound(seq, round);\n+        } else {\n+            markLegacyWrite.run();\n+            legacyLog.writeRound(seq, round);\n+            leastLogEntry.accumulateAndGet(seq, Math::min);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) throws IOException {\n+        if (seq >= cutoffInclusive) {\n+            return currentLog.readRound(seq);\n+        } else {\n+            markLegacyRead.run();\n+            return legacyLog.readRound(seq);\n+        }\n+    }\n+\n+    @Override\n+    public long getLeastLogEntry() {\n+        return leastLogEntry.get();\n+    }\n+\n+    @Override\n+    public long getGreatestLogEntry() {\n+        return currentLog.getGreatestLogEntry();\n+    }\n+\n+    /**\n+     * This implementation is a noop to ensure correctness of {@link #getLeastLogEntry()}.\n+     */\n+    @Override\n+    public void truncate(long toDeleteInclusive) {\n+        // noop", "originalCommit": "b6b637f0964be274182692688e5fd2a20cc6e829", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5550c0f28ec386db93c61b32eacb1c71a46b9d1a", "url": "https://github.com/palantir/atlasdb/commit/5550c0f28ec386db93c61b32eacb1c71a46b9d1a", "message": "Merge branch 'develop' of github.com:palantir/atlasdb into psl/splitting-log", "committedDate": "2020-05-26T13:26:54Z", "type": "commit"}, {"oid": "af72f016283863bbbff4a4a44596949c7e076e23", "url": "https://github.com/palantir/atlasdb/commit/af72f016283863bbbff4a4a44596949c7e076e23", "message": "Merge branch 'develop' of github.com:palantir/atlasdb into psl/splitting-log", "committedDate": "2020-05-27T12:32:07Z", "type": "commit"}, {"oid": "bded1cc78498cc6100e82425fadbdb600554a98f", "url": "https://github.com/palantir/atlasdb/commit/bded1cc78498cc6100e82425fadbdb600554a98f", "message": "Make discussed changes and add unit tests", "committedDate": "2020-05-27T13:11:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTExNTA0NA==", "url": "https://github.com/palantir/atlasdb/pull/4793#discussion_r431115044", "body": "```suggestion\r\n                \"Cutoff value must either be -1, or the current log must contain an entry after the cutoff.\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"Cutoff value must either be -1, or the current log must contain en entry after the cutoff.\");\n          \n          \n            \n                            \"Cutoff value must either be -1, or the current log must contain an entry after the cutoff.\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Cutoff value must either be -1, or the current log must contain <span class=\"x x-first x-last\">en</span> entry after the cutoff.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Cutoff value must either be -1, or the current log must contain <span class=\"x x-first x-last\">an</span> entry after the cutoff.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jeremyk-91", "createdAt": "2020-05-27T13:13:18Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java", "diffHunk": "@@ -30,35 +32,40 @@\n  * we update the appropriate metric. Remaining methods are delegated only to the current delegate.\n  */\n public final class SplittingPaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private static final Logger log = LoggerFactory.getLogger(SplittingPaxosStateLog.class);\n+\n     private final PaxosStateLog<V> legacyLog;\n     private final PaxosStateLog<V> currentLog;\n     private final Runnable markLegacyWrite;\n     private final Runnable markLegacyRead;\n     private final long cutoffInclusive;\n-    private final AtomicLong leastLogEntry;\n+    private final AtomicLong legacyLogLeastLogEntry;\n \n     private SplittingPaxosStateLog(PaxosStateLog<V> legacyLog,\n             PaxosStateLog<V> currentLog,\n             Runnable markLegacyWrite,\n             Runnable markLegacyRead,\n             long cutoffInclusive,\n-            AtomicLong leastLogEntry) {\n+            AtomicLong legacyLogLeastLogEntry) {\n         this.legacyLog = legacyLog;\n         this.currentLog = currentLog;\n         this.markLegacyWrite = markLegacyWrite;\n         this.markLegacyRead = markLegacyRead;\n         this.cutoffInclusive = cutoffInclusive;\n-        this.leastLogEntry = leastLogEntry;\n+        this.legacyLogLeastLogEntry = legacyLogLeastLogEntry;\n     }\n \n     public static <V extends Persistable & Versionable> PaxosStateLog<V> create(SplittingParameters<V> parameters) {\n+        Preconditions.checkState(parameters.cutoffInclusive() == PaxosAcceptor.NO_LOG_ENTRY\n+                        || parameters.currentLog().getGreatestLogEntry() >= parameters.cutoffInclusive(),\n+                \"Cutoff value must either be -1, or the current log must contain en entry after the cutoff.\");", "originalCommit": "bded1cc78498cc6100e82425fadbdb600554a98f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEyMzQ2Ng==", "url": "https://github.com/palantir/atlasdb/pull/4793#discussion_r431123466", "body": "nit: We could probably just use mock-maker-inline", "bodyText": "nit: We could probably just use mock-maker-inline", "bodyHTML": "<p dir=\"auto\">nit: We could probably just use mock-maker-inline</p>", "author": "jeremyk-91", "createdAt": "2020-05-27T13:20:04Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -34,7 +34,8 @@\n \n import com.palantir.common.persist.Persistable;\n \n-public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+@SuppressWarnings(\"FinalClass\") // non-final for mocking", "originalCommit": "bded1cc78498cc6100e82425fadbdb600554a98f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1de3ed8d0102f27fbabbea195a38e31b1bc97131", "url": "https://github.com/palantir/atlasdb/commit/1de3ed8d0102f27fbabbea195a38e31b1bc97131", "message": "Update leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java\n\nCo-authored-by: Jeremy Kong <jeremykong@hotmail.com>", "committedDate": "2020-05-27T14:22:23Z", "type": "commit"}]}